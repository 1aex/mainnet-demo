import {
  CID,
  base58btc,
  esm_default
} from "./chunk-TOUMRBVU.js";
import {
  createPublicClient,
  createWalletClient,
  decodeEventLog,
  hashAuthorization,
  hashMessage,
  hashTypedData,
  http,
  publicKeyToAddress,
  serializeSignature,
  zeroAddress,
  zeroHash
} from "./chunk-QD5JIHSI.js";
import {
  encodeFunctionData,
  erc20Abi
} from "./chunk-EGPSZLVG.js";
import {
  defineChain,
  serializeTransaction
} from "./chunk-SW57J3WI.js";
import {
  InvalidAddressError,
  encodeAbiParameters,
  formatEther,
  isAddress,
  keccak256,
  maxUint256,
  maxUint32,
  numberToHex,
  stringToHex,
  toFunctionSelector,
  toHex
} from "./chunk-5KDY6HVT.js";
import "./chunk-I4N6U4EZ.js";
import "./chunk-BSIOSPHI.js";
import {
  secp256k1
} from "./chunk-NJ2IMHHP.js";
import "./chunk-BIDMXIGI.js";
import "./chunk-HHC25657.js";
import {
  sha256
} from "./chunk-2YJ6SRAI.js";
import {
  utf8ToBytes
} from "./chunk-FNOUKXXE.js";
import {
  __commonJS,
  __toESM
} from "./chunk-QEK2ZTOW.js";

// browser-external:fs
var require_fs = __commonJS({
  "browser-external:fs"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "fs" has been externalized for browser compatibility. Cannot access "fs.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:path
var require_path = __commonJS({
  "browser-external:path"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "path" has been externalized for browser compatibility. Cannot access "path.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:os
var require_os = __commonJS({
  "browser-external:os"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "os" has been externalized for browser compatibility. Cannot access "os.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:crypto
var require_crypto = __commonJS({
  "browser-external:crypto"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "crypto" has been externalized for browser compatibility. Cannot access "crypto.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/@story-protocol/core-sdk/node_modules/dotenv/package.json
var require_package = __commonJS({
  "node_modules/@story-protocol/core-sdk/node_modules/dotenv/package.json"(exports, module) {
    module.exports = {
      name: "dotenv",
      version: "16.6.1",
      description: "Loads environment variables from .env file",
      main: "lib/main.js",
      types: "lib/main.d.ts",
      exports: {
        ".": {
          types: "./lib/main.d.ts",
          require: "./lib/main.js",
          default: "./lib/main.js"
        },
        "./config": "./config.js",
        "./config.js": "./config.js",
        "./lib/env-options": "./lib/env-options.js",
        "./lib/env-options.js": "./lib/env-options.js",
        "./lib/cli-options": "./lib/cli-options.js",
        "./lib/cli-options.js": "./lib/cli-options.js",
        "./package.json": "./package.json"
      },
      scripts: {
        "dts-check": "tsc --project tests/types/tsconfig.json",
        lint: "standard",
        pretest: "npm run lint && npm run dts-check",
        test: "tap run --allow-empty-coverage --disable-coverage --timeout=60000",
        "test:coverage": "tap run --show-full-coverage --timeout=60000 --coverage-report=text --coverage-report=lcov",
        prerelease: "npm test",
        release: "standard-version"
      },
      repository: {
        type: "git",
        url: "git://github.com/motdotla/dotenv.git"
      },
      homepage: "https://github.com/motdotla/dotenv#readme",
      funding: "https://dotenvx.com",
      keywords: [
        "dotenv",
        "env",
        ".env",
        "environment",
        "variables",
        "config",
        "settings"
      ],
      readmeFilename: "README.md",
      license: "BSD-2-Clause",
      devDependencies: {
        "@types/node": "^18.11.3",
        decache: "^4.6.2",
        sinon: "^14.0.1",
        standard: "^17.0.0",
        "standard-version": "^9.5.0",
        tap: "^19.2.0",
        typescript: "^4.8.4"
      },
      engines: {
        node: ">=12"
      },
      browser: {
        fs: false
      }
    };
  }
});

// node_modules/@story-protocol/core-sdk/node_modules/dotenv/lib/main.js
var require_main = __commonJS({
  "node_modules/@story-protocol/core-sdk/node_modules/dotenv/lib/main.js"(exports, module) {
    var fs = require_fs();
    var path = require_path();
    var os = require_os();
    var crypto = require_crypto();
    var packageJson = require_package();
    var version = packageJson.version;
    var LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
    function parse(src) {
      const obj = {};
      let lines = src.toString();
      lines = lines.replace(/\r\n?/mg, "\n");
      let match;
      while ((match = LINE.exec(lines)) != null) {
        const key = match[1];
        let value = match[2] || "";
        value = value.trim();
        const maybeQuote = value[0];
        value = value.replace(/^(['"`])([\s\S]*)\1$/mg, "$2");
        if (maybeQuote === '"') {
          value = value.replace(/\\n/g, "\n");
          value = value.replace(/\\r/g, "\r");
        }
        obj[key] = value;
      }
      return obj;
    }
    function _parseVault(options) {
      options = options || {};
      const vaultPath = _vaultPath(options);
      options.path = vaultPath;
      const result = DotenvModule.configDotenv(options);
      if (!result.parsed) {
        const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`);
        err.code = "MISSING_DATA";
        throw err;
      }
      const keys = _dotenvKey(options).split(",");
      const length = keys.length;
      let decrypted;
      for (let i = 0; i < length; i++) {
        try {
          const key = keys[i].trim();
          const attrs = _instructions(result, key);
          decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);
          break;
        } catch (error) {
          if (i + 1 >= length) {
            throw error;
          }
        }
      }
      return DotenvModule.parse(decrypted);
    }
    function _warn(message) {
      console.log(`[dotenv@${version}][WARN] ${message}`);
    }
    function _debug(message) {
      console.log(`[dotenv@${version}][DEBUG] ${message}`);
    }
    function _log(message) {
      console.log(`[dotenv@${version}] ${message}`);
    }
    function _dotenvKey(options) {
      if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {
        return options.DOTENV_KEY;
      }
      if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {
        return process.env.DOTENV_KEY;
      }
      return "";
    }
    function _instructions(result, dotenvKey) {
      let uri;
      try {
        uri = new URL(dotenvKey);
      } catch (error) {
        if (error.code === "ERR_INVALID_URL") {
          const err = new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");
          err.code = "INVALID_DOTENV_KEY";
          throw err;
        }
        throw error;
      }
      const key = uri.password;
      if (!key) {
        const err = new Error("INVALID_DOTENV_KEY: Missing key part");
        err.code = "INVALID_DOTENV_KEY";
        throw err;
      }
      const environment = uri.searchParams.get("environment");
      if (!environment) {
        const err = new Error("INVALID_DOTENV_KEY: Missing environment part");
        err.code = "INVALID_DOTENV_KEY";
        throw err;
      }
      const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`;
      const ciphertext = result.parsed[environmentKey];
      if (!ciphertext) {
        const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`);
        err.code = "NOT_FOUND_DOTENV_ENVIRONMENT";
        throw err;
      }
      return { ciphertext, key };
    }
    function _vaultPath(options) {
      let possibleVaultPath = null;
      if (options && options.path && options.path.length > 0) {
        if (Array.isArray(options.path)) {
          for (const filepath of options.path) {
            if (fs.existsSync(filepath)) {
              possibleVaultPath = filepath.endsWith(".vault") ? filepath : `${filepath}.vault`;
            }
          }
        } else {
          possibleVaultPath = options.path.endsWith(".vault") ? options.path : `${options.path}.vault`;
        }
      } else {
        possibleVaultPath = path.resolve(process.cwd(), ".env.vault");
      }
      if (fs.existsSync(possibleVaultPath)) {
        return possibleVaultPath;
      }
      return null;
    }
    function _resolveHome(envPath) {
      return envPath[0] === "~" ? path.join(os.homedir(), envPath.slice(1)) : envPath;
    }
    function _configVault(options) {
      const debug = Boolean(options && options.debug);
      const quiet = options && "quiet" in options ? options.quiet : true;
      if (debug || !quiet) {
        _log("Loading env from encrypted .env.vault");
      }
      const parsed = DotenvModule._parseVault(options);
      let processEnv = process.env;
      if (options && options.processEnv != null) {
        processEnv = options.processEnv;
      }
      DotenvModule.populate(processEnv, parsed, options);
      return { parsed };
    }
    function configDotenv(options) {
      const dotenvPath = path.resolve(process.cwd(), ".env");
      let encoding = "utf8";
      const debug = Boolean(options && options.debug);
      const quiet = options && "quiet" in options ? options.quiet : true;
      if (options && options.encoding) {
        encoding = options.encoding;
      } else {
        if (debug) {
          _debug("No encoding is specified. UTF-8 is used by default");
        }
      }
      let optionPaths = [dotenvPath];
      if (options && options.path) {
        if (!Array.isArray(options.path)) {
          optionPaths = [_resolveHome(options.path)];
        } else {
          optionPaths = [];
          for (const filepath of options.path) {
            optionPaths.push(_resolveHome(filepath));
          }
        }
      }
      let lastError;
      const parsedAll = {};
      for (const path2 of optionPaths) {
        try {
          const parsed = DotenvModule.parse(fs.readFileSync(path2, { encoding }));
          DotenvModule.populate(parsedAll, parsed, options);
        } catch (e) {
          if (debug) {
            _debug(`Failed to load ${path2} ${e.message}`);
          }
          lastError = e;
        }
      }
      let processEnv = process.env;
      if (options && options.processEnv != null) {
        processEnv = options.processEnv;
      }
      DotenvModule.populate(processEnv, parsedAll, options);
      if (debug || !quiet) {
        const keysCount = Object.keys(parsedAll).length;
        const shortPaths = [];
        for (const filePath of optionPaths) {
          try {
            const relative = path.relative(process.cwd(), filePath);
            shortPaths.push(relative);
          } catch (e) {
            if (debug) {
              _debug(`Failed to load ${filePath} ${e.message}`);
            }
            lastError = e;
          }
        }
        _log(`injecting env (${keysCount}) from ${shortPaths.join(",")}`);
      }
      if (lastError) {
        return { parsed: parsedAll, error: lastError };
      } else {
        return { parsed: parsedAll };
      }
    }
    function config2(options) {
      if (_dotenvKey(options).length === 0) {
        return DotenvModule.configDotenv(options);
      }
      const vaultPath = _vaultPath(options);
      if (!vaultPath) {
        _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);
        return DotenvModule.configDotenv(options);
      }
      return DotenvModule._configVault(options);
    }
    function decrypt(encrypted, keyStr) {
      const key = Buffer.from(keyStr.slice(-64), "hex");
      let ciphertext = Buffer.from(encrypted, "base64");
      const nonce = ciphertext.subarray(0, 12);
      const authTag = ciphertext.subarray(-16);
      ciphertext = ciphertext.subarray(12, -16);
      try {
        const aesgcm = crypto.createDecipheriv("aes-256-gcm", key, nonce);
        aesgcm.setAuthTag(authTag);
        return `${aesgcm.update(ciphertext)}${aesgcm.final()}`;
      } catch (error) {
        const isRange = error instanceof RangeError;
        const invalidKeyLength = error.message === "Invalid key length";
        const decryptionFailed = error.message === "Unsupported state or unable to authenticate data";
        if (isRange || invalidKeyLength) {
          const err = new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");
          err.code = "INVALID_DOTENV_KEY";
          throw err;
        } else if (decryptionFailed) {
          const err = new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");
          err.code = "DECRYPTION_FAILED";
          throw err;
        } else {
          throw error;
        }
      }
    }
    function populate(processEnv, parsed, options = {}) {
      const debug = Boolean(options && options.debug);
      const override = Boolean(options && options.override);
      if (typeof parsed !== "object") {
        const err = new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");
        err.code = "OBJECT_REQUIRED";
        throw err;
      }
      for (const key of Object.keys(parsed)) {
        if (Object.prototype.hasOwnProperty.call(processEnv, key)) {
          if (override === true) {
            processEnv[key] = parsed[key];
          }
          if (debug) {
            if (override === true) {
              _debug(`"${key}" is already defined and WAS overwritten`);
            } else {
              _debug(`"${key}" is already defined and was NOT overwritten`);
            }
          }
        } else {
          processEnv[key] = parsed[key];
        }
      }
    }
    var DotenvModule = {
      configDotenv,
      _configVault,
      _parseVault,
      config: config2,
      decrypt,
      parse,
      populate
    };
    module.exports.configDotenv = DotenvModule.configDotenv;
    module.exports._configVault = DotenvModule._configVault;
    module.exports._parseVault = DotenvModule._parseVault;
    module.exports.config = DotenvModule.config;
    module.exports.decrypt = DotenvModule.decrypt;
    module.exports.parse = DotenvModule.parse;
    module.exports.populate = DotenvModule.populate;
    module.exports = DotenvModule;
  }
});

// node_modules/@story-protocol/core-sdk/dist/story-protocol-core-sdk.esm.js
var dotenv = __toESM(require_main());

// node_modules/@scure/base/lib/esm/index.js
function isBytes(a) {
  return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
}
function abytes(b, ...lengths) {
  if (!isBytes(b))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b.length);
}
function isArrayOf(isString, arr) {
  if (!Array.isArray(arr))
    return false;
  if (arr.length === 0)
    return true;
  if (isString) {
    return arr.every((item) => typeof item === "string");
  } else {
    return arr.every((item) => Number.isSafeInteger(item));
  }
}
function afn(input) {
  if (typeof input !== "function")
    throw new Error("function expected");
  return true;
}
function astr(label, input) {
  if (typeof input !== "string")
    throw new Error(`${label}: string expected`);
  return true;
}
function anumber(n) {
  if (!Number.isSafeInteger(n))
    throw new Error(`invalid integer: ${n}`);
}
function aArr(input) {
  if (!Array.isArray(input))
    throw new Error("array expected");
}
function astrArr(label, input) {
  if (!isArrayOf(true, input))
    throw new Error(`${label}: array of strings expected`);
}
function anumArr(label, input) {
  if (!isArrayOf(false, input))
    throw new Error(`${label}: array of numbers expected`);
}
function chain(...args) {
  const id = (a) => a;
  const wrap = (a, b) => (c) => a(b(c));
  const encode = args.map((x) => x.encode).reduceRight(wrap, id);
  const decode = args.map((x) => x.decode).reduce(wrap, id);
  return { encode, decode };
}
function alphabet(letters) {
  const lettersA = typeof letters === "string" ? letters.split("") : letters;
  const len = lettersA.length;
  astrArr("alphabet", lettersA);
  const indexes = new Map(lettersA.map((l, i) => [l, i]));
  return {
    encode: (digits) => {
      aArr(digits);
      return digits.map((i) => {
        if (!Number.isSafeInteger(i) || i < 0 || i >= len)
          throw new Error(`alphabet.encode: digit index outside alphabet "${i}". Allowed: ${letters}`);
        return lettersA[i];
      });
    },
    decode: (input) => {
      aArr(input);
      return input.map((letter) => {
        astr("alphabet.decode", letter);
        const i = indexes.get(letter);
        if (i === void 0)
          throw new Error(`Unknown letter: "${letter}". Allowed: ${letters}`);
        return i;
      });
    }
  };
}
function join(separator = "") {
  astr("join", separator);
  return {
    encode: (from) => {
      astrArr("join.decode", from);
      return from.join(separator);
    },
    decode: (to) => {
      astr("join.decode", to);
      return to.split(separator);
    }
  };
}
function padding(bits, chr = "=") {
  anumber(bits);
  astr("padding", chr);
  return {
    encode(data) {
      astrArr("padding.encode", data);
      while (data.length * bits % 8)
        data.push(chr);
      return data;
    },
    decode(input) {
      astrArr("padding.decode", input);
      let end = input.length;
      if (end * bits % 8)
        throw new Error("padding: invalid, string should have whole number of bytes");
      for (; end > 0 && input[end - 1] === chr; end--) {
        const last = end - 1;
        const byte = last * bits;
        if (byte % 8 === 0)
          throw new Error("padding: invalid, string has too much padding");
      }
      return input.slice(0, end);
    }
  };
}
function normalize(fn) {
  afn(fn);
  return { encode: (from) => from, decode: (to) => fn(to) };
}
function convertRadix(data, from, to) {
  if (from < 2)
    throw new Error(`convertRadix: invalid from=${from}, base cannot be less than 2`);
  if (to < 2)
    throw new Error(`convertRadix: invalid to=${to}, base cannot be less than 2`);
  aArr(data);
  if (!data.length)
    return [];
  let pos = 0;
  const res = [];
  const digits = Array.from(data, (d) => {
    anumber(d);
    if (d < 0 || d >= from)
      throw new Error(`invalid integer: ${d}`);
    return d;
  });
  const dlen = digits.length;
  while (true) {
    let carry = 0;
    let done = true;
    for (let i = pos; i < dlen; i++) {
      const digit = digits[i];
      const fromCarry = from * carry;
      const digitBase = fromCarry + digit;
      if (!Number.isSafeInteger(digitBase) || fromCarry / from !== carry || digitBase - digit !== fromCarry) {
        throw new Error("convertRadix: carry overflow");
      }
      const div = digitBase / to;
      carry = digitBase % to;
      const rounded = Math.floor(div);
      digits[i] = rounded;
      if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)
        throw new Error("convertRadix: carry overflow");
      if (!done)
        continue;
      else if (!rounded)
        pos = i;
      else
        done = false;
    }
    res.push(carry);
    if (done)
      break;
  }
  for (let i = 0; i < data.length - 1 && data[i] === 0; i++)
    res.push(0);
  return res.reverse();
}
var gcd = (a, b) => b === 0 ? a : gcd(b, a % b);
var radix2carry = (from, to) => from + (to - gcd(from, to));
var powers = (() => {
  let res = [];
  for (let i = 0; i < 40; i++)
    res.push(2 ** i);
  return res;
})();
function convertRadix2(data, from, to, padding2) {
  aArr(data);
  if (from <= 0 || from > 32)
    throw new Error(`convertRadix2: wrong from=${from}`);
  if (to <= 0 || to > 32)
    throw new Error(`convertRadix2: wrong to=${to}`);
  if (radix2carry(from, to) > 32) {
    throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);
  }
  let carry = 0;
  let pos = 0;
  const max = powers[from];
  const mask = powers[to] - 1;
  const res = [];
  for (const n of data) {
    anumber(n);
    if (n >= max)
      throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);
    carry = carry << from | n;
    if (pos + from > 32)
      throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);
    pos += from;
    for (; pos >= to; pos -= to)
      res.push((carry >> pos - to & mask) >>> 0);
    const pow = powers[pos];
    if (pow === void 0)
      throw new Error("invalid carry");
    carry &= pow - 1;
  }
  carry = carry << to - pos & mask;
  if (!padding2 && pos >= from)
    throw new Error("Excess padding");
  if (!padding2 && carry > 0)
    throw new Error(`Non-zero padding: ${carry}`);
  if (padding2 && pos > 0)
    res.push(carry >>> 0);
  return res;
}
function radix(num) {
  anumber(num);
  const _256 = 2 ** 8;
  return {
    encode: (bytes) => {
      if (!isBytes(bytes))
        throw new Error("radix.encode input should be Uint8Array");
      return convertRadix(Array.from(bytes), _256, num);
    },
    decode: (digits) => {
      anumArr("radix.decode", digits);
      return Uint8Array.from(convertRadix(digits, num, _256));
    }
  };
}
function radix2(bits, revPadding = false) {
  anumber(bits);
  if (bits <= 0 || bits > 32)
    throw new Error("radix2: bits should be in (0..32]");
  if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)
    throw new Error("radix2: carry overflow");
  return {
    encode: (bytes) => {
      if (!isBytes(bytes))
        throw new Error("radix2.encode input should be Uint8Array");
      return convertRadix2(Array.from(bytes), 8, bits, !revPadding);
    },
    decode: (digits) => {
      anumArr("radix2.decode", digits);
      return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
    }
  };
}
function unsafeWrapper(fn) {
  afn(fn);
  return function(...args) {
    try {
      return fn.apply(null, args);
    } catch (e) {
    }
  };
}
function checksum(len, fn) {
  anumber(len);
  afn(fn);
  return {
    encode(data) {
      if (!isBytes(data))
        throw new Error("checksum.encode: input should be Uint8Array");
      const sum = fn(data).slice(0, len);
      const res = new Uint8Array(data.length + len);
      res.set(data);
      res.set(sum, data.length);
      return res;
    },
    decode(data) {
      if (!isBytes(data))
        throw new Error("checksum.decode: input should be Uint8Array");
      const payload = data.slice(0, -len);
      const oldChecksum = data.slice(-len);
      const newChecksum = fn(payload).slice(0, len);
      for (let i = 0; i < len; i++)
        if (newChecksum[i] !== oldChecksum[i])
          throw new Error("Invalid checksum");
      return payload;
    }
  };
}
var base16 = chain(radix2(4), alphabet("0123456789ABCDEF"), join(""));
var base32 = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding(5), join(""));
var base32nopad = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), join(""));
var base32hex = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding(5), join(""));
var base32hexnopad = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), join(""));
var base32crockford = chain(radix2(5), alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join(""), normalize((s) => s.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
var hasBase64Builtin = (() => typeof Uint8Array.from([]).toBase64 === "function" && typeof Uint8Array.fromBase64 === "function")();
var decodeBase64Builtin = (s, isUrl) => {
  astr("base64", s);
  const re = isUrl ? /^[A-Za-z0-9=_-]+$/ : /^[A-Za-z0-9=+/]+$/;
  const alphabet2 = isUrl ? "base64url" : "base64";
  if (s.length > 0 && !re.test(s))
    throw new Error("invalid base64");
  return Uint8Array.fromBase64(s, { alphabet: alphabet2, lastChunkHandling: "strict" });
};
var base64 = hasBase64Builtin ? {
  encode(b) {
    abytes(b);
    return b.toBase64();
  },
  decode(s) {
    return decodeBase64Builtin(s, false);
  }
} : chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding(6), join(""));
var base64nopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), join(""));
var base64url = hasBase64Builtin ? {
  encode(b) {
    abytes(b);
    return b.toBase64({ alphabet: "base64url" });
  },
  decode(s) {
    return decodeBase64Builtin(s, true);
  }
} : chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding(6), join(""));
var base64urlnopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), join(""));
var genBase58 = (abc) => chain(radix(58), alphabet(abc), join(""));
var base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
var base58flickr = genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
var base58xrp = genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
var createBase58check = (sha2562) => chain(checksum(4, (data) => sha2562(sha2562(data))), base58);
var BECH_ALPHABET = chain(alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join(""));
var POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
function bech32Polymod(pre) {
  const b = pre >> 25;
  let chk = (pre & 33554431) << 5;
  for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {
    if ((b >> i & 1) === 1)
      chk ^= POLYMOD_GENERATORS[i];
  }
  return chk;
}
function bechChecksum(prefix, words, encodingConst = 1) {
  const len = prefix.length;
  let chk = 1;
  for (let i = 0; i < len; i++) {
    const c = prefix.charCodeAt(i);
    if (c < 33 || c > 126)
      throw new Error(`Invalid prefix (${prefix})`);
    chk = bech32Polymod(chk) ^ c >> 5;
  }
  chk = bech32Polymod(chk);
  for (let i = 0; i < len; i++)
    chk = bech32Polymod(chk) ^ prefix.charCodeAt(i) & 31;
  for (let v of words)
    chk = bech32Polymod(chk) ^ v;
  for (let i = 0; i < 6; i++)
    chk = bech32Polymod(chk);
  chk ^= encodingConst;
  return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]], 30, 5, false));
}
function genBech32(encoding) {
  const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
  const _words = radix2(5);
  const fromWords = _words.decode;
  const toWords = _words.encode;
  const fromWordsUnsafe = unsafeWrapper(fromWords);
  function encode(prefix, words, limit = 90) {
    astr("bech32.encode prefix", prefix);
    if (isBytes(words))
      words = Array.from(words);
    anumArr("bech32.encode", words);
    const plen = prefix.length;
    if (plen === 0)
      throw new TypeError(`Invalid prefix length ${plen}`);
    const actualLength = plen + 7 + words.length;
    if (limit !== false && actualLength > limit)
      throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
    const lowered = prefix.toLowerCase();
    const sum = bechChecksum(lowered, words, ENCODING_CONST);
    return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
  }
  function decode(str, limit = 90) {
    astr("bech32.decode input", str);
    const slen = str.length;
    if (slen < 8 || limit !== false && slen > limit)
      throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit})`);
    const lowered = str.toLowerCase();
    if (str !== lowered && str !== str.toUpperCase())
      throw new Error(`String must be lowercase or uppercase`);
    const sepIndex = lowered.lastIndexOf("1");
    if (sepIndex === 0 || sepIndex === -1)
      throw new Error(`Letter "1" must be present between prefix and data only`);
    const prefix = lowered.slice(0, sepIndex);
    const data = lowered.slice(sepIndex + 1);
    if (data.length < 6)
      throw new Error("Data must be at least 6 characters long");
    const words = BECH_ALPHABET.decode(data).slice(0, -6);
    const sum = bechChecksum(prefix, words, ENCODING_CONST);
    if (!data.endsWith(sum))
      throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
    return { prefix, words };
  }
  const decodeUnsafe = unsafeWrapper(decode);
  function decodeToBytes(str) {
    const { prefix, words } = decode(str, false);
    return { prefix, words, bytes: fromWords(words) };
  }
  function encodeFromBytes(prefix, bytes) {
    return encode(prefix, toWords(bytes));
  }
  return {
    encode,
    decode,
    encodeFromBytes,
    decodeToBytes,
    decodeUnsafe,
    fromWords,
    fromWordsUnsafe,
    toWords
  };
}
var bech32 = genBech32("bech32");
var bech32m = genBech32("bech32m");
var hasHexBuiltin = (() => typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function")();
var hexBuiltin = {
  encode(data) {
    abytes(data);
    return data.toHex();
  },
  decode(s) {
    astr("hex", s);
    return Uint8Array.fromHex(s);
  }
};
var hex = hasHexBuiltin ? hexBuiltin : chain(radix2(4), alphabet("0123456789abcdef"), join(""), normalize((s) => {
  if (typeof s !== "string" || s.length % 2 !== 0)
    throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
  return s.toLowerCase();
}));

// node_modules/@scure/bip32/lib/esm/index.js
var Point = secp256k1.ProjectivePoint;
var base58check = createBase58check(sha256);
var MASTER_SECRET = utf8ToBytes("Bitcoin seed");

// node_modules/@scure/bip39/esm/wordlists/czech.js
var wordlist = `abdikace
abeceda
adresa
agrese
akce
aktovka
alej
alkohol
amputace
ananas
andulka
anekdota
anketa
antika
anulovat
archa
arogance
asfalt
asistent
aspirace
astma
astronom
atlas
atletika
atol
autobus
azyl
babka
bachor
bacil
baculka
badatel
bageta
bagr
bahno
bakterie
balada
baletka
balkon
balonek
balvan
balza
bambus
bankomat
barbar
baret
barman
baroko
barva
baterka
batoh
bavlna
bazalka
bazilika
bazuka
bedna
beran
beseda
bestie
beton
bezinka
bezmoc
beztak
bicykl
bidlo
biftek
bikiny
bilance
biograf
biolog
bitva
bizon
blahobyt
blatouch
blecha
bledule
blesk
blikat
blizna
blokovat
bloudit
blud
bobek
bobr
bodlina
bodnout
bohatost
bojkot
bojovat
bokorys
bolest
borec
borovice
bota
boubel
bouchat
bouda
boule
bourat
boxer
bradavka
brambora
branka
bratr
brepta
briketa
brko
brloh
bronz
broskev
brunetka
brusinka
brzda
brzy
bublina
bubnovat
buchta
buditel
budka
budova
bufet
bujarost
bukvice
buldok
bulva
bunda
bunkr
burza
butik
buvol
buzola
bydlet
bylina
bytovka
bzukot
capart
carevna
cedr
cedule
cejch
cejn
cela
celer
celkem
celnice
cenina
cennost
cenovka
centrum
cenzor
cestopis
cetka
chalupa
chapadlo
charita
chata
chechtat
chemie
chichot
chirurg
chlad
chleba
chlubit
chmel
chmura
chobot
chochol
chodba
cholera
chomout
chopit
choroba
chov
chrapot
chrlit
chrt
chrup
chtivost
chudina
chutnat
chvat
chvilka
chvost
chyba
chystat
chytit
cibule
cigareta
cihelna
cihla
cinkot
cirkus
cisterna
citace
citrus
cizinec
cizost
clona
cokoliv
couvat
ctitel
ctnost
cudnost
cuketa
cukr
cupot
cvaknout
cval
cvik
cvrkot
cyklista
daleko
dareba
datel
datum
dcera
debata
dechovka
decibel
deficit
deflace
dekl
dekret
demokrat
deprese
derby
deska
detektiv
dikobraz
diktovat
dioda
diplom
disk
displej
divadlo
divoch
dlaha
dlouho
dluhopis
dnes
dobro
dobytek
docent
dochutit
dodnes
dohled
dohoda
dohra
dojem
dojnice
doklad
dokola
doktor
dokument
dolar
doleva
dolina
doma
dominant
domluvit
domov
donutit
dopad
dopis
doplnit
doposud
doprovod
dopustit
dorazit
dorost
dort
dosah
doslov
dostatek
dosud
dosyta
dotaz
dotek
dotknout
doufat
doutnat
dovozce
dozadu
doznat
dozorce
drahota
drak
dramatik
dravec
draze
drdol
drobnost
drogerie
drozd
drsnost
drtit
drzost
duben
duchovno
dudek
duha
duhovka
dusit
dusno
dutost
dvojice
dvorec
dynamit
ekolog
ekonomie
elektron
elipsa
email
emise
emoce
empatie
epizoda
epocha
epopej
epos
esej
esence
eskorta
eskymo
etiketa
euforie
evoluce
exekuce
exkurze
expedice
exploze
export
extrakt
facka
fajfka
fakulta
fanatik
fantazie
farmacie
favorit
fazole
federace
fejeton
fenka
fialka
figurant
filozof
filtr
finance
finta
fixace
fjord
flanel
flirt
flotila
fond
fosfor
fotbal
fotka
foton
frakce
freska
fronta
fukar
funkce
fyzika
galeje
garant
genetika
geolog
gilotina
glazura
glejt
golem
golfista
gotika
graf
gramofon
granule
grep
gril
grog
groteska
guma
hadice
hadr
hala
halenka
hanba
hanopis
harfa
harpuna
havran
hebkost
hejkal
hejno
hejtman
hektar
helma
hematom
herec
herna
heslo
hezky
historik
hladovka
hlasivky
hlava
hledat
hlen
hlodavec
hloh
hloupost
hltat
hlubina
hluchota
hmat
hmota
hmyz
hnis
hnojivo
hnout
hoblina
hoboj
hoch
hodiny
hodlat
hodnota
hodovat
hojnost
hokej
holinka
holka
holub
homole
honitba
honorace
horal
horda
horizont
horko
horlivec
hormon
hornina
horoskop
horstvo
hospoda
hostina
hotovost
houba
houf
houpat
houska
hovor
hradba
hranice
hravost
hrazda
hrbolek
hrdina
hrdlo
hrdost
hrnek
hrobka
hromada
hrot
hrouda
hrozen
hrstka
hrubost
hryzat
hubenost
hubnout
hudba
hukot
humr
husita
hustota
hvozd
hybnost
hydrant
hygiena
hymna
hysterik
idylka
ihned
ikona
iluze
imunita
infekce
inflace
inkaso
inovace
inspekce
internet
invalida
investor
inzerce
ironie
jablko
jachta
jahoda
jakmile
jakost
jalovec
jantar
jarmark
jaro
jasan
jasno
jatka
javor
jazyk
jedinec
jedle
jednatel
jehlan
jekot
jelen
jelito
jemnost
jenom
jepice
jeseter
jevit
jezdec
jezero
jinak
jindy
jinoch
jiskra
jistota
jitrnice
jizva
jmenovat
jogurt
jurta
kabaret
kabel
kabinet
kachna
kadet
kadidlo
kahan
kajak
kajuta
kakao
kaktus
kalamita
kalhoty
kalibr
kalnost
kamera
kamkoliv
kamna
kanibal
kanoe
kantor
kapalina
kapela
kapitola
kapka
kaple
kapota
kapr
kapusta
kapybara
karamel
karotka
karton
kasa
katalog
katedra
kauce
kauza
kavalec
kazajka
kazeta
kazivost
kdekoliv
kdesi
kedluben
kemp
keramika
kino
klacek
kladivo
klam
klapot
klasika
klaun
klec
klenba
klepat
klesnout
klid
klima
klisna
klobouk
klokan
klopa
kloub
klubovna
klusat
kluzkost
kmen
kmitat
kmotr
kniha
knot
koalice
koberec
kobka
kobliha
kobyla
kocour
kohout
kojenec
kokos
koktejl
kolaps
koleda
kolize
kolo
komando
kometa
komik
komnata
komora
kompas
komunita
konat
koncept
kondice
konec
konfese
kongres
konina
konkurs
kontakt
konzerva
kopanec
kopie
kopnout
koprovka
korbel
korektor
kormidlo
koroptev
korpus
koruna
koryto
korzet
kosatec
kostka
kotel
kotleta
kotoul
koukat
koupelna
kousek
kouzlo
kovboj
koza
kozoroh
krabice
krach
krajina
kralovat
krasopis
kravata
kredit
krejcar
kresba
kreveta
kriket
kritik
krize
krkavec
krmelec
krmivo
krocan
krok
kronika
kropit
kroupa
krovka
krtek
kruhadlo
krupice
krutost
krvinka
krychle
krypta
krystal
kryt
kudlanka
kufr
kujnost
kukla
kulajda
kulich
kulka
kulomet
kultura
kuna
kupodivu
kurt
kurzor
kutil
kvalita
kvasinka
kvestor
kynolog
kyselina
kytara
kytice
kytka
kytovec
kyvadlo
labrador
lachtan
ladnost
laik
lakomec
lamela
lampa
lanovka
lasice
laso
lastura
latinka
lavina
lebka
leckdy
leden
lednice
ledovka
ledvina
legenda
legie
legrace
lehce
lehkost
lehnout
lektvar
lenochod
lentilka
lepenka
lepidlo
letadlo
letec
letmo
letokruh
levhart
levitace
levobok
libra
lichotka
lidojed
lidskost
lihovina
lijavec
lilek
limetka
linie
linka
linoleum
listopad
litina
litovat
lobista
lodivod
logika
logoped
lokalita
loket
lomcovat
lopata
lopuch
lord
losos
lotr
loudal
louh
louka
louskat
lovec
lstivost
lucerna
lucifer
lump
lusk
lustrace
lvice
lyra
lyrika
lysina
madam
madlo
magistr
mahagon
majetek
majitel
majorita
makak
makovice
makrela
malba
malina
malovat
malvice
maminka
mandle
manko
marnost
masakr
maskot
masopust
matice
matrika
maturita
mazanec
mazivo
mazlit
mazurka
mdloba
mechanik
meditace
medovina
melasa
meloun
mentolka
metla
metoda
metr
mezera
migrace
mihnout
mihule
mikina
mikrofon
milenec
milimetr
milost
mimika
mincovna
minibar
minomet
minulost
miska
mistr
mixovat
mladost
mlha
mlhovina
mlok
mlsat
mluvit
mnich
mnohem
mobil
mocnost
modelka
modlitba
mohyla
mokro
molekula
momentka
monarcha
monokl
monstrum
montovat
monzun
mosaz
moskyt
most
motivace
motorka
motyka
moucha
moudrost
mozaika
mozek
mozol
mramor
mravenec
mrkev
mrtvola
mrzet
mrzutost
mstitel
mudrc
muflon
mulat
mumie
munice
muset
mutace
muzeum
muzikant
myslivec
mzda
nabourat
nachytat
nadace
nadbytek
nadhoz
nadobro
nadpis
nahlas
nahnat
nahodile
nahradit
naivita
najednou
najisto
najmout
naklonit
nakonec
nakrmit
nalevo
namazat
namluvit
nanometr
naoko
naopak
naostro
napadat
napevno
naplnit
napnout
naposled
naprosto
narodit
naruby
narychlo
nasadit
nasekat
naslepo
nastat
natolik
navenek
navrch
navzdory
nazvat
nebe
nechat
necky
nedaleko
nedbat
neduh
negace
nehet
nehoda
nejen
nejprve
neklid
nelibost
nemilost
nemoc
neochota
neonka
nepokoj
nerost
nerv
nesmysl
nesoulad
netvor
neuron
nevina
nezvykle
nicota
nijak
nikam
nikdy
nikl
nikterak
nitro
nocleh
nohavice
nominace
nora
norek
nositel
nosnost
nouze
noviny
novota
nozdra
nuda
nudle
nuget
nutit
nutnost
nutrie
nymfa
obal
obarvit
obava
obdiv
obec
obehnat
obejmout
obezita
obhajoba
obilnice
objasnit
objekt
obklopit
oblast
oblek
obliba
obloha
obluda
obnos
obohatit
obojek
obout
obrazec
obrna
obruba
obrys
obsah
obsluha
obstarat
obuv
obvaz
obvinit
obvod
obvykle
obyvatel
obzor
ocas
ocel
ocenit
ochladit
ochota
ochrana
ocitnout
odboj
odbyt
odchod
odcizit
odebrat
odeslat
odevzdat
odezva
odhadce
odhodit
odjet
odjinud
odkaz
odkoupit
odliv
odluka
odmlka
odolnost
odpad
odpis
odplout
odpor
odpustit
odpykat
odrazka
odsoudit
odstup
odsun
odtok
odtud
odvaha
odveta
odvolat
odvracet
odznak
ofina
ofsajd
ohlas
ohnisko
ohrada
ohrozit
ohryzek
okap
okenice
oklika
okno
okouzlit
okovy
okrasa
okres
okrsek
okruh
okupant
okurka
okusit
olejnina
olizovat
omak
omeleta
omezit
omladina
omlouvat
omluva
omyl
onehdy
opakovat
opasek
operace
opice
opilost
opisovat
opora
opozice
opravdu
oproti
orbital
orchestr
orgie
orlice
orloj
ortel
osada
oschnout
osika
osivo
oslava
oslepit
oslnit
oslovit
osnova
osoba
osolit
ospalec
osten
ostraha
ostuda
ostych
osvojit
oteplit
otisk
otop
otrhat
otrlost
otrok
otruby
otvor
ovanout
ovar
oves
ovlivnit
ovoce
oxid
ozdoba
pachatel
pacient
padouch
pahorek
pakt
palanda
palec
palivo
paluba
pamflet
pamlsek
panenka
panika
panna
panovat
panstvo
pantofle
paprika
parketa
parodie
parta
paruka
paryba
paseka
pasivita
pastelka
patent
patrona
pavouk
pazneht
pazourek
pecka
pedagog
pejsek
peklo
peloton
penalta
pendrek
penze
periskop
pero
pestrost
petarda
petice
petrolej
pevnina
pexeso
pianista
piha
pijavice
pikle
piknik
pilina
pilnost
pilulka
pinzeta
pipeta
pisatel
pistole
pitevna
pivnice
pivovar
placenta
plakat
plamen
planeta
plastika
platit
plavidlo
plaz
plech
plemeno
plenta
ples
pletivo
plevel
plivat
plnit
plno
plocha
plodina
plomba
plout
pluk
plyn
pobavit
pobyt
pochod
pocit
poctivec
podat
podcenit
podepsat
podhled
podivit
podklad
podmanit
podnik
podoba
podpora
podraz
podstata
podvod
podzim
poezie
pohanka
pohnutka
pohovor
pohroma
pohyb
pointa
pojistka
pojmout
pokazit
pokles
pokoj
pokrok
pokuta
pokyn
poledne
polibek
polknout
poloha
polynom
pomalu
pominout
pomlka
pomoc
pomsta
pomyslet
ponechat
ponorka
ponurost
popadat
popel
popisek
poplach
poprosit
popsat
popud
poradce
porce
porod
porucha
poryv
posadit
posed
posila
poskok
poslanec
posoudit
pospolu
postava
posudek
posyp
potah
potkan
potlesk
potomek
potrava
potupa
potvora
poukaz
pouto
pouzdro
povaha
povidla
povlak
povoz
povrch
povstat
povyk
povzdech
pozdrav
pozemek
poznatek
pozor
pozvat
pracovat
prahory
praktika
prales
praotec
praporek
prase
pravda
princip
prkno
probudit
procento
prodej
profese
prohra
projekt
prolomit
promile
pronikat
propad
prorok
prosba
proton
proutek
provaz
prskavka
prsten
prudkost
prut
prvek
prvohory
psanec
psovod
pstruh
ptactvo
puberta
puch
pudl
pukavec
puklina
pukrle
pult
pumpa
punc
pupen
pusa
pusinka
pustina
putovat
putyka
pyramida
pysk
pytel
racek
rachot
radiace
radnice
radon
raft
ragby
raketa
rakovina
rameno
rampouch
rande
rarach
rarita
rasovna
rastr
ratolest
razance
razidlo
reagovat
reakce
recept
redaktor
referent
reflex
rejnok
reklama
rekord
rekrut
rektor
reputace
revize
revma
revolver
rezerva
riskovat
riziko
robotika
rodokmen
rohovka
rokle
rokoko
romaneto
ropovod
ropucha
rorejs
rosol
rostlina
rotmistr
rotoped
rotunda
roubenka
roucho
roup
roura
rovina
rovnice
rozbor
rozchod
rozdat
rozeznat
rozhodce
rozinka
rozjezd
rozkaz
rozloha
rozmar
rozpad
rozruch
rozsah
roztok
rozum
rozvod
rubrika
ruchadlo
rukavice
rukopis
ryba
rybolov
rychlost
rydlo
rypadlo
rytina
ryzost
sadista
sahat
sako
samec
samizdat
samota
sanitka
sardinka
sasanka
satelit
sazba
sazenice
sbor
schovat
sebranka
secese
sedadlo
sediment
sedlo
sehnat
sejmout
sekera
sekta
sekunda
sekvoje
semeno
seno
servis
sesadit
seshora
seskok
seslat
sestra
sesuv
sesypat
setba
setina
setkat
setnout
setrvat
sever
seznam
shoda
shrnout
sifon
silnice
sirka
sirotek
sirup
situace
skafandr
skalisko
skanzen
skaut
skeptik
skica
skladba
sklenice
sklo
skluz
skoba
skokan
skoro
skripta
skrz
skupina
skvost
skvrna
slabika
sladidlo
slanina
slast
slavnost
sledovat
slepec
sleva
slezina
slib
slina
sliznice
slon
sloupek
slovo
sluch
sluha
slunce
slupka
slza
smaragd
smetana
smilstvo
smlouva
smog
smrad
smrk
smrtka
smutek
smysl
snad
snaha
snob
sobota
socha
sodovka
sokol
sopka
sotva
souboj
soucit
soudce
souhlas
soulad
soumrak
souprava
soused
soutok
souviset
spalovna
spasitel
spis
splav
spodek
spojenec
spolu
sponzor
spornost
spousta
sprcha
spustit
sranda
sraz
srdce
srna
srnec
srovnat
srpen
srst
srub
stanice
starosta
statika
stavba
stehno
stezka
stodola
stolek
stopa
storno
stoupat
strach
stres
strhnout
strom
struna
studna
stupnice
stvol
styk
subjekt
subtropy
suchar
sudost
sukno
sundat
sunout
surikata
surovina
svah
svalstvo
svetr
svatba
svazek
svisle
svitek
svoboda
svodidlo
svorka
svrab
sykavka
sykot
synek
synovec
sypat
sypkost
syrovost
sysel
sytost
tabletka
tabule
tahoun
tajemno
tajfun
tajga
tajit
tajnost
taktika
tamhle
tampon
tancovat
tanec
tanker
tapeta
tavenina
tazatel
technika
tehdy
tekutina
telefon
temnota
tendence
tenista
tenor
teplota
tepna
teprve
terapie
termoska
textil
ticho
tiskopis
titulek
tkadlec
tkanina
tlapka
tleskat
tlukot
tlupa
tmel
toaleta
topinka
topol
torzo
touha
toulec
tradice
traktor
tramp
trasa
traverza
trefit
trest
trezor
trhavina
trhlina
trochu
trojice
troska
trouba
trpce
trpitel
trpkost
trubec
truchlit
truhlice
trus
trvat
tudy
tuhnout
tuhost
tundra
turista
turnaj
tuzemsko
tvaroh
tvorba
tvrdost
tvrz
tygr
tykev
ubohost
uboze
ubrat
ubrousek
ubrus
ubytovna
ucho
uctivost
udivit
uhradit
ujednat
ujistit
ujmout
ukazatel
uklidnit
uklonit
ukotvit
ukrojit
ulice
ulita
ulovit
umyvadlo
unavit
uniforma
uniknout
upadnout
uplatnit
uplynout
upoutat
upravit
uran
urazit
usednout
usilovat
usmrtit
usnadnit
usnout
usoudit
ustlat
ustrnout
utahovat
utkat
utlumit
utonout
utopenec
utrousit
uvalit
uvolnit
uvozovka
uzdravit
uzel
uzenina
uzlina
uznat
vagon
valcha
valoun
vana
vandal
vanilka
varan
varhany
varovat
vcelku
vchod
vdova
vedro
vegetace
vejce
velbloud
veletrh
velitel
velmoc
velryba
venkov
veranda
verze
veselka
veskrze
vesnice
vespodu
vesta
veterina
veverka
vibrace
vichr
videohra
vidina
vidle
vila
vinice
viset
vitalita
vize
vizitka
vjezd
vklad
vkus
vlajka
vlak
vlasec
vlevo
vlhkost
vliv
vlnovka
vloupat
vnucovat
vnuk
voda
vodivost
vodoznak
vodstvo
vojensky
vojna
vojsko
volant
volba
volit
volno
voskovka
vozidlo
vozovna
vpravo
vrabec
vracet
vrah
vrata
vrba
vrcholek
vrhat
vrstva
vrtule
vsadit
vstoupit
vstup
vtip
vybavit
vybrat
vychovat
vydat
vydra
vyfotit
vyhledat
vyhnout
vyhodit
vyhradit
vyhubit
vyjasnit
vyjet
vyjmout
vyklopit
vykonat
vylekat
vymazat
vymezit
vymizet
vymyslet
vynechat
vynikat
vynutit
vypadat
vyplatit
vypravit
vypustit
vyrazit
vyrovnat
vyrvat
vyslovit
vysoko
vystavit
vysunout
vysypat
vytasit
vytesat
vytratit
vyvinout
vyvolat
vyvrhel
vyzdobit
vyznat
vzadu
vzbudit
vzchopit
vzdor
vzduch
vzdychat
vzestup
vzhledem
vzkaz
vzlykat
vznik
vzorek
vzpoura
vztah
vztek
xylofon
zabrat
zabydlet
zachovat
zadarmo
zadusit
zafoukat
zahltit
zahodit
zahrada
zahynout
zajatec
zajet
zajistit
zaklepat
zakoupit
zalepit
zamezit
zamotat
zamyslet
zanechat
zanikat
zaplatit
zapojit
zapsat
zarazit
zastavit
zasunout
zatajit
zatemnit
zatknout
zaujmout
zavalit
zavelet
zavinit
zavolat
zavrtat
zazvonit
zbavit
zbrusu
zbudovat
zbytek
zdaleka
zdarma
zdatnost
zdivo
zdobit
zdroj
zdvih
zdymadlo
zelenina
zeman
zemina
zeptat
zezadu
zezdola
zhatit
zhltnout
zhluboka
zhotovit
zhruba
zima
zimnice
zjemnit
zklamat
zkoumat
zkratka
zkumavka
zlato
zlehka
zloba
zlom
zlost
zlozvyk
zmapovat
zmar
zmatek
zmije
zmizet
zmocnit
zmodrat
zmrzlina
zmutovat
znak
znalost
znamenat
znovu
zobrazit
zotavit
zoubek
zoufale
zplodit
zpomalit
zprava
zprostit
zprudka
zprvu
zrada
zranit
zrcadlo
zrnitost
zrno
zrovna
zrychlit
zrzavost
zticha
ztratit
zubovina
zubr
zvednout
zvenku
zvesela
zvon
zvrat
zvukovod
zvyk`.split("\n");

// node_modules/@scure/bip39/esm/wordlists/english.js
var wordlist2 = `abandon
ability
able
about
above
absent
absorb
abstract
absurd
abuse
access
accident
account
accuse
achieve
acid
acoustic
acquire
across
act
action
actor
actress
actual
adapt
add
addict
address
adjust
admit
adult
advance
advice
aerobic
affair
afford
afraid
again
age
agent
agree
ahead
aim
air
airport
aisle
alarm
album
alcohol
alert
alien
all
alley
allow
almost
alone
alpha
already
also
alter
always
amateur
amazing
among
amount
amused
analyst
anchor
ancient
anger
angle
angry
animal
ankle
announce
annual
another
answer
antenna
antique
anxiety
any
apart
apology
appear
apple
approve
april
arch
arctic
area
arena
argue
arm
armed
armor
army
around
arrange
arrest
arrive
arrow
art
artefact
artist
artwork
ask
aspect
assault
asset
assist
assume
asthma
athlete
atom
attack
attend
attitude
attract
auction
audit
august
aunt
author
auto
autumn
average
avocado
avoid
awake
aware
away
awesome
awful
awkward
axis
baby
bachelor
bacon
badge
bag
balance
balcony
ball
bamboo
banana
banner
bar
barely
bargain
barrel
base
basic
basket
battle
beach
bean
beauty
because
become
beef
before
begin
behave
behind
believe
below
belt
bench
benefit
best
betray
better
between
beyond
bicycle
bid
bike
bind
biology
bird
birth
bitter
black
blade
blame
blanket
blast
bleak
bless
blind
blood
blossom
blouse
blue
blur
blush
board
boat
body
boil
bomb
bone
bonus
book
boost
border
boring
borrow
boss
bottom
bounce
box
boy
bracket
brain
brand
brass
brave
bread
breeze
brick
bridge
brief
bright
bring
brisk
broccoli
broken
bronze
broom
brother
brown
brush
bubble
buddy
budget
buffalo
build
bulb
bulk
bullet
bundle
bunker
burden
burger
burst
bus
business
busy
butter
buyer
buzz
cabbage
cabin
cable
cactus
cage
cake
call
calm
camera
camp
can
canal
cancel
candy
cannon
canoe
canvas
canyon
capable
capital
captain
car
carbon
card
cargo
carpet
carry
cart
case
cash
casino
castle
casual
cat
catalog
catch
category
cattle
caught
cause
caution
cave
ceiling
celery
cement
census
century
cereal
certain
chair
chalk
champion
change
chaos
chapter
charge
chase
chat
cheap
check
cheese
chef
cherry
chest
chicken
chief
child
chimney
choice
choose
chronic
chuckle
chunk
churn
cigar
cinnamon
circle
citizen
city
civil
claim
clap
clarify
claw
clay
clean
clerk
clever
click
client
cliff
climb
clinic
clip
clock
clog
close
cloth
cloud
clown
club
clump
cluster
clutch
coach
coast
coconut
code
coffee
coil
coin
collect
color
column
combine
come
comfort
comic
common
company
concert
conduct
confirm
congress
connect
consider
control
convince
cook
cool
copper
copy
coral
core
corn
correct
cost
cotton
couch
country
couple
course
cousin
cover
coyote
crack
cradle
craft
cram
crane
crash
crater
crawl
crazy
cream
credit
creek
crew
cricket
crime
crisp
critic
crop
cross
crouch
crowd
crucial
cruel
cruise
crumble
crunch
crush
cry
crystal
cube
culture
cup
cupboard
curious
current
curtain
curve
cushion
custom
cute
cycle
dad
damage
damp
dance
danger
daring
dash
daughter
dawn
day
deal
debate
debris
decade
december
decide
decline
decorate
decrease
deer
defense
define
defy
degree
delay
deliver
demand
demise
denial
dentist
deny
depart
depend
deposit
depth
deputy
derive
describe
desert
design
desk
despair
destroy
detail
detect
develop
device
devote
diagram
dial
diamond
diary
dice
diesel
diet
differ
digital
dignity
dilemma
dinner
dinosaur
direct
dirt
disagree
discover
disease
dish
dismiss
disorder
display
distance
divert
divide
divorce
dizzy
doctor
document
dog
doll
dolphin
domain
donate
donkey
donor
door
dose
double
dove
draft
dragon
drama
drastic
draw
dream
dress
drift
drill
drink
drip
drive
drop
drum
dry
duck
dumb
dune
during
dust
dutch
duty
dwarf
dynamic
eager
eagle
early
earn
earth
easily
east
easy
echo
ecology
economy
edge
edit
educate
effort
egg
eight
either
elbow
elder
electric
elegant
element
elephant
elevator
elite
else
embark
embody
embrace
emerge
emotion
employ
empower
empty
enable
enact
end
endless
endorse
enemy
energy
enforce
engage
engine
enhance
enjoy
enlist
enough
enrich
enroll
ensure
enter
entire
entry
envelope
episode
equal
equip
era
erase
erode
erosion
error
erupt
escape
essay
essence
estate
eternal
ethics
evidence
evil
evoke
evolve
exact
example
excess
exchange
excite
exclude
excuse
execute
exercise
exhaust
exhibit
exile
exist
exit
exotic
expand
expect
expire
explain
expose
express
extend
extra
eye
eyebrow
fabric
face
faculty
fade
faint
faith
fall
false
fame
family
famous
fan
fancy
fantasy
farm
fashion
fat
fatal
father
fatigue
fault
favorite
feature
february
federal
fee
feed
feel
female
fence
festival
fetch
fever
few
fiber
fiction
field
figure
file
film
filter
final
find
fine
finger
finish
fire
firm
first
fiscal
fish
fit
fitness
fix
flag
flame
flash
flat
flavor
flee
flight
flip
float
flock
floor
flower
fluid
flush
fly
foam
focus
fog
foil
fold
follow
food
foot
force
forest
forget
fork
fortune
forum
forward
fossil
foster
found
fox
fragile
frame
frequent
fresh
friend
fringe
frog
front
frost
frown
frozen
fruit
fuel
fun
funny
furnace
fury
future
gadget
gain
galaxy
gallery
game
gap
garage
garbage
garden
garlic
garment
gas
gasp
gate
gather
gauge
gaze
general
genius
genre
gentle
genuine
gesture
ghost
giant
gift
giggle
ginger
giraffe
girl
give
glad
glance
glare
glass
glide
glimpse
globe
gloom
glory
glove
glow
glue
goat
goddess
gold
good
goose
gorilla
gospel
gossip
govern
gown
grab
grace
grain
grant
grape
grass
gravity
great
green
grid
grief
grit
grocery
group
grow
grunt
guard
guess
guide
guilt
guitar
gun
gym
habit
hair
half
hammer
hamster
hand
happy
harbor
hard
harsh
harvest
hat
have
hawk
hazard
head
health
heart
heavy
hedgehog
height
hello
helmet
help
hen
hero
hidden
high
hill
hint
hip
hire
history
hobby
hockey
hold
hole
holiday
hollow
home
honey
hood
hope
horn
horror
horse
hospital
host
hotel
hour
hover
hub
huge
human
humble
humor
hundred
hungry
hunt
hurdle
hurry
hurt
husband
hybrid
ice
icon
idea
identify
idle
ignore
ill
illegal
illness
image
imitate
immense
immune
impact
impose
improve
impulse
inch
include
income
increase
index
indicate
indoor
industry
infant
inflict
inform
inhale
inherit
initial
inject
injury
inmate
inner
innocent
input
inquiry
insane
insect
inside
inspire
install
intact
interest
into
invest
invite
involve
iron
island
isolate
issue
item
ivory
jacket
jaguar
jar
jazz
jealous
jeans
jelly
jewel
job
join
joke
journey
joy
judge
juice
jump
jungle
junior
junk
just
kangaroo
keen
keep
ketchup
key
kick
kid
kidney
kind
kingdom
kiss
kit
kitchen
kite
kitten
kiwi
knee
knife
knock
know
lab
label
labor
ladder
lady
lake
lamp
language
laptop
large
later
latin
laugh
laundry
lava
law
lawn
lawsuit
layer
lazy
leader
leaf
learn
leave
lecture
left
leg
legal
legend
leisure
lemon
lend
length
lens
leopard
lesson
letter
level
liar
liberty
library
license
life
lift
light
like
limb
limit
link
lion
liquid
list
little
live
lizard
load
loan
lobster
local
lock
logic
lonely
long
loop
lottery
loud
lounge
love
loyal
lucky
luggage
lumber
lunar
lunch
luxury
lyrics
machine
mad
magic
magnet
maid
mail
main
major
make
mammal
man
manage
mandate
mango
mansion
manual
maple
marble
march
margin
marine
market
marriage
mask
mass
master
match
material
math
matrix
matter
maximum
maze
meadow
mean
measure
meat
mechanic
medal
media
melody
melt
member
memory
mention
menu
mercy
merge
merit
merry
mesh
message
metal
method
middle
midnight
milk
million
mimic
mind
minimum
minor
minute
miracle
mirror
misery
miss
mistake
mix
mixed
mixture
mobile
model
modify
mom
moment
monitor
monkey
monster
month
moon
moral
more
morning
mosquito
mother
motion
motor
mountain
mouse
move
movie
much
muffin
mule
multiply
muscle
museum
mushroom
music
must
mutual
myself
mystery
myth
naive
name
napkin
narrow
nasty
nation
nature
near
neck
need
negative
neglect
neither
nephew
nerve
nest
net
network
neutral
never
news
next
nice
night
noble
noise
nominee
noodle
normal
north
nose
notable
note
nothing
notice
novel
now
nuclear
number
nurse
nut
oak
obey
object
oblige
obscure
observe
obtain
obvious
occur
ocean
october
odor
off
offer
office
often
oil
okay
old
olive
olympic
omit
once
one
onion
online
only
open
opera
opinion
oppose
option
orange
orbit
orchard
order
ordinary
organ
orient
original
orphan
ostrich
other
outdoor
outer
output
outside
oval
oven
over
own
owner
oxygen
oyster
ozone
pact
paddle
page
pair
palace
palm
panda
panel
panic
panther
paper
parade
parent
park
parrot
party
pass
patch
path
patient
patrol
pattern
pause
pave
payment
peace
peanut
pear
peasant
pelican
pen
penalty
pencil
people
pepper
perfect
permit
person
pet
phone
photo
phrase
physical
piano
picnic
picture
piece
pig
pigeon
pill
pilot
pink
pioneer
pipe
pistol
pitch
pizza
place
planet
plastic
plate
play
please
pledge
pluck
plug
plunge
poem
poet
point
polar
pole
police
pond
pony
pool
popular
portion
position
possible
post
potato
pottery
poverty
powder
power
practice
praise
predict
prefer
prepare
present
pretty
prevent
price
pride
primary
print
priority
prison
private
prize
problem
process
produce
profit
program
project
promote
proof
property
prosper
protect
proud
provide
public
pudding
pull
pulp
pulse
pumpkin
punch
pupil
puppy
purchase
purity
purpose
purse
push
put
puzzle
pyramid
quality
quantum
quarter
question
quick
quit
quiz
quote
rabbit
raccoon
race
rack
radar
radio
rail
rain
raise
rally
ramp
ranch
random
range
rapid
rare
rate
rather
raven
raw
razor
ready
real
reason
rebel
rebuild
recall
receive
recipe
record
recycle
reduce
reflect
reform
refuse
region
regret
regular
reject
relax
release
relief
rely
remain
remember
remind
remove
render
renew
rent
reopen
repair
repeat
replace
report
require
rescue
resemble
resist
resource
response
result
retire
retreat
return
reunion
reveal
review
reward
rhythm
rib
ribbon
rice
rich
ride
ridge
rifle
right
rigid
ring
riot
ripple
risk
ritual
rival
river
road
roast
robot
robust
rocket
romance
roof
rookie
room
rose
rotate
rough
round
route
royal
rubber
rude
rug
rule
run
runway
rural
sad
saddle
sadness
safe
sail
salad
salmon
salon
salt
salute
same
sample
sand
satisfy
satoshi
sauce
sausage
save
say
scale
scan
scare
scatter
scene
scheme
school
science
scissors
scorpion
scout
scrap
screen
script
scrub
sea
search
season
seat
second
secret
section
security
seed
seek
segment
select
sell
seminar
senior
sense
sentence
series
service
session
settle
setup
seven
shadow
shaft
shallow
share
shed
shell
sheriff
shield
shift
shine
ship
shiver
shock
shoe
shoot
shop
short
shoulder
shove
shrimp
shrug
shuffle
shy
sibling
sick
side
siege
sight
sign
silent
silk
silly
silver
similar
simple
since
sing
siren
sister
situate
six
size
skate
sketch
ski
skill
skin
skirt
skull
slab
slam
sleep
slender
slice
slide
slight
slim
slogan
slot
slow
slush
small
smart
smile
smoke
smooth
snack
snake
snap
sniff
snow
soap
soccer
social
sock
soda
soft
solar
soldier
solid
solution
solve
someone
song
soon
sorry
sort
soul
sound
soup
source
south
space
spare
spatial
spawn
speak
special
speed
spell
spend
sphere
spice
spider
spike
spin
spirit
split
spoil
sponsor
spoon
sport
spot
spray
spread
spring
spy
square
squeeze
squirrel
stable
stadium
staff
stage
stairs
stamp
stand
start
state
stay
steak
steel
stem
step
stereo
stick
still
sting
stock
stomach
stone
stool
story
stove
strategy
street
strike
strong
struggle
student
stuff
stumble
style
subject
submit
subway
success
such
sudden
suffer
sugar
suggest
suit
summer
sun
sunny
sunset
super
supply
supreme
sure
surface
surge
surprise
surround
survey
suspect
sustain
swallow
swamp
swap
swarm
swear
sweet
swift
swim
swing
switch
sword
symbol
symptom
syrup
system
table
tackle
tag
tail
talent
talk
tank
tape
target
task
taste
tattoo
taxi
teach
team
tell
ten
tenant
tennis
tent
term
test
text
thank
that
theme
then
theory
there
they
thing
this
thought
three
thrive
throw
thumb
thunder
ticket
tide
tiger
tilt
timber
time
tiny
tip
tired
tissue
title
toast
tobacco
today
toddler
toe
together
toilet
token
tomato
tomorrow
tone
tongue
tonight
tool
tooth
top
topic
topple
torch
tornado
tortoise
toss
total
tourist
toward
tower
town
toy
track
trade
traffic
tragic
train
transfer
trap
trash
travel
tray
treat
tree
trend
trial
tribe
trick
trigger
trim
trip
trophy
trouble
truck
true
truly
trumpet
trust
truth
try
tube
tuition
tumble
tuna
tunnel
turkey
turn
turtle
twelve
twenty
twice
twin
twist
two
type
typical
ugly
umbrella
unable
unaware
uncle
uncover
under
undo
unfair
unfold
unhappy
uniform
unique
unit
universe
unknown
unlock
until
unusual
unveil
update
upgrade
uphold
upon
upper
upset
urban
urge
usage
use
used
useful
useless
usual
utility
vacant
vacuum
vague
valid
valley
valve
van
vanish
vapor
various
vast
vault
vehicle
velvet
vendor
venture
venue
verb
verify
version
very
vessel
veteran
viable
vibrant
vicious
victory
video
view
village
vintage
violin
virtual
virus
visa
visit
visual
vital
vivid
vocal
voice
void
volcano
volume
vote
voyage
wage
wagon
wait
walk
wall
walnut
want
warfare
warm
warrior
wash
wasp
waste
water
wave
way
wealth
weapon
wear
weasel
weather
web
wedding
weekend
weird
welcome
west
wet
whale
what
wheat
wheel
when
where
whip
whisper
wide
width
wife
wild
will
win
window
wine
wing
wink
winner
winter
wire
wisdom
wise
wish
witness
wolf
woman
wonder
wood
wool
word
work
world
worry
worth
wrap
wreck
wrestle
wrist
write
wrong
yard
year
yellow
you
young
youth
zebra
zero
zone
zoo`.split("\n");

// node_modules/@scure/bip39/esm/wordlists/french.js
var wordlist3 = `abaisser
abandon
abdiquer
abeille
abolir
aborder
aboutir
aboyer
abrasif
abreuver
abriter
abroger
abrupt
absence
absolu
absurde
abusif
abyssal
académie
acajou
acarien
accabler
accepter
acclamer
accolade
accroche
accuser
acerbe
achat
acheter
aciduler
acier
acompte
acquérir
acronyme
acteur
actif
actuel
adepte
adéquat
adhésif
adjectif
adjuger
admettre
admirer
adopter
adorer
adoucir
adresse
adroit
adulte
adverbe
aérer
aéronef
affaire
affecter
affiche
affreux
affubler
agacer
agencer
agile
agiter
agrafer
agréable
agrume
aider
aiguille
ailier
aimable
aisance
ajouter
ajuster
alarmer
alchimie
alerte
algèbre
algue
aliéner
aliment
alléger
alliage
allouer
allumer
alourdir
alpaga
altesse
alvéole
amateur
ambigu
ambre
aménager
amertume
amidon
amiral
amorcer
amour
amovible
amphibie
ampleur
amusant
analyse
anaphore
anarchie
anatomie
ancien
anéantir
angle
angoisse
anguleux
animal
annexer
annonce
annuel
anodin
anomalie
anonyme
anormal
antenne
antidote
anxieux
apaiser
apéritif
aplanir
apologie
appareil
appeler
apporter
appuyer
aquarium
aqueduc
arbitre
arbuste
ardeur
ardoise
argent
arlequin
armature
armement
armoire
armure
arpenter
arracher
arriver
arroser
arsenic
artériel
article
aspect
asphalte
aspirer
assaut
asservir
assiette
associer
assurer
asticot
astre
astuce
atelier
atome
atrium
atroce
attaque
attentif
attirer
attraper
aubaine
auberge
audace
audible
augurer
aurore
automne
autruche
avaler
avancer
avarice
avenir
averse
aveugle
aviateur
avide
avion
aviser
avoine
avouer
avril
axial
axiome
badge
bafouer
bagage
baguette
baignade
balancer
balcon
baleine
balisage
bambin
bancaire
bandage
banlieue
bannière
banquier
barbier
baril
baron
barque
barrage
bassin
bastion
bataille
bateau
batterie
baudrier
bavarder
belette
bélier
belote
bénéfice
berceau
berger
berline
bermuda
besace
besogne
bétail
beurre
biberon
bicycle
bidule
bijou
bilan
bilingue
billard
binaire
biologie
biopsie
biotype
biscuit
bison
bistouri
bitume
bizarre
blafard
blague
blanchir
blessant
blinder
blond
bloquer
blouson
bobard
bobine
boire
boiser
bolide
bonbon
bondir
bonheur
bonifier
bonus
bordure
borne
botte
boucle
boueux
bougie
boulon
bouquin
bourse
boussole
boutique
boxeur
branche
brasier
brave
brebis
brèche
breuvage
bricoler
brigade
brillant
brioche
brique
brochure
broder
bronzer
brousse
broyeur
brume
brusque
brutal
bruyant
buffle
buisson
bulletin
bureau
burin
bustier
butiner
butoir
buvable
buvette
cabanon
cabine
cachette
cadeau
cadre
caféine
caillou
caisson
calculer
calepin
calibre
calmer
calomnie
calvaire
camarade
caméra
camion
campagne
canal
caneton
canon
cantine
canular
capable
caporal
caprice
capsule
capter
capuche
carabine
carbone
caresser
caribou
carnage
carotte
carreau
carton
cascade
casier
casque
cassure
causer
caution
cavalier
caverne
caviar
cédille
ceinture
céleste
cellule
cendrier
censurer
central
cercle
cérébral
cerise
cerner
cerveau
cesser
chagrin
chaise
chaleur
chambre
chance
chapitre
charbon
chasseur
chaton
chausson
chavirer
chemise
chenille
chéquier
chercher
cheval
chien
chiffre
chignon
chimère
chiot
chlorure
chocolat
choisir
chose
chouette
chrome
chute
cigare
cigogne
cimenter
cinéma
cintrer
circuler
cirer
cirque
citerne
citoyen
citron
civil
clairon
clameur
claquer
classe
clavier
client
cligner
climat
clivage
cloche
clonage
cloporte
cobalt
cobra
cocasse
cocotier
coder
codifier
coffre
cogner
cohésion
coiffer
coincer
colère
colibri
colline
colmater
colonel
combat
comédie
commande
compact
concert
conduire
confier
congeler
connoter
consonne
contact
convexe
copain
copie
corail
corbeau
cordage
corniche
corpus
correct
cortège
cosmique
costume
coton
coude
coupure
courage
couteau
couvrir
coyote
crabe
crainte
cravate
crayon
créature
créditer
crémeux
creuser
crevette
cribler
crier
cristal
critère
croire
croquer
crotale
crucial
cruel
crypter
cubique
cueillir
cuillère
cuisine
cuivre
culminer
cultiver
cumuler
cupide
curatif
curseur
cyanure
cycle
cylindre
cynique
daigner
damier
danger
danseur
dauphin
débattre
débiter
déborder
débrider
débutant
décaler
décembre
déchirer
décider
déclarer
décorer
décrire
décupler
dédale
déductif
déesse
défensif
défiler
défrayer
dégager
dégivrer
déglutir
dégrafer
déjeuner
délice
déloger
demander
demeurer
démolir
dénicher
dénouer
dentelle
dénuder
départ
dépenser
déphaser
déplacer
déposer
déranger
dérober
désastre
descente
désert
désigner
désobéir
dessiner
destrier
détacher
détester
détourer
détresse
devancer
devenir
deviner
devoir
diable
dialogue
diamant
dicter
différer
digérer
digital
digne
diluer
dimanche
diminuer
dioxyde
directif
diriger
discuter
disposer
dissiper
distance
divertir
diviser
docile
docteur
dogme
doigt
domaine
domicile
dompter
donateur
donjon
donner
dopamine
dortoir
dorure
dosage
doseur
dossier
dotation
douanier
double
douceur
douter
doyen
dragon
draper
dresser
dribbler
droiture
duperie
duplexe
durable
durcir
dynastie
éblouir
écarter
écharpe
échelle
éclairer
éclipse
éclore
écluse
école
économie
écorce
écouter
écraser
écrémer
écrivain
écrou
écume
écureuil
édifier
éduquer
effacer
effectif
effigie
effort
effrayer
effusion
égaliser
égarer
éjecter
élaborer
élargir
électron
élégant
éléphant
élève
éligible
élitisme
éloge
élucider
éluder
emballer
embellir
embryon
émeraude
émission
emmener
émotion
émouvoir
empereur
employer
emporter
emprise
émulsion
encadrer
enchère
enclave
encoche
endiguer
endosser
endroit
enduire
énergie
enfance
enfermer
enfouir
engager
engin
englober
énigme
enjamber
enjeu
enlever
ennemi
ennuyeux
enrichir
enrobage
enseigne
entasser
entendre
entier
entourer
entraver
énumérer
envahir
enviable
envoyer
enzyme
éolien
épaissir
épargne
épatant
épaule
épicerie
épidémie
épier
épilogue
épine
épisode
épitaphe
époque
épreuve
éprouver
épuisant
équerre
équipe
ériger
érosion
erreur
éruption
escalier
espadon
espèce
espiègle
espoir
esprit
esquiver
essayer
essence
essieu
essorer
estime
estomac
estrade
étagère
étaler
étanche
étatique
éteindre
étendoir
éternel
éthanol
éthique
ethnie
étirer
étoffer
étoile
étonnant
étourdir
étrange
étroit
étude
euphorie
évaluer
évasion
éventail
évidence
éviter
évolutif
évoquer
exact
exagérer
exaucer
exceller
excitant
exclusif
excuse
exécuter
exemple
exercer
exhaler
exhorter
exigence
exiler
exister
exotique
expédier
explorer
exposer
exprimer
exquis
extensif
extraire
exulter
fable
fabuleux
facette
facile
facture
faiblir
falaise
fameux
famille
farceur
farfelu
farine
farouche
fasciner
fatal
fatigue
faucon
fautif
faveur
favori
fébrile
féconder
fédérer
félin
femme
fémur
fendoir
féodal
fermer
féroce
ferveur
festival
feuille
feutre
février
fiasco
ficeler
fictif
fidèle
figure
filature
filetage
filière
filleul
filmer
filou
filtrer
financer
finir
fiole
firme
fissure
fixer
flairer
flamme
flasque
flatteur
fléau
flèche
fleur
flexion
flocon
flore
fluctuer
fluide
fluvial
folie
fonderie
fongible
fontaine
forcer
forgeron
formuler
fortune
fossile
foudre
fougère
fouiller
foulure
fourmi
fragile
fraise
franchir
frapper
frayeur
frégate
freiner
frelon
frémir
frénésie
frère
friable
friction
frisson
frivole
froid
fromage
frontal
frotter
fruit
fugitif
fuite
fureur
furieux
furtif
fusion
futur
gagner
galaxie
galerie
gambader
garantir
gardien
garnir
garrigue
gazelle
gazon
géant
gélatine
gélule
gendarme
général
génie
genou
gentil
géologie
géomètre
géranium
germe
gestuel
geyser
gibier
gicler
girafe
givre
glace
glaive
glisser
globe
gloire
glorieux
golfeur
gomme
gonfler
gorge
gorille
goudron
gouffre
goulot
goupille
gourmand
goutte
graduel
graffiti
graine
grand
grappin
gratuit
gravir
grenat
griffure
griller
grimper
grogner
gronder
grotte
groupe
gruger
grutier
gruyère
guépard
guerrier
guide
guimauve
guitare
gustatif
gymnaste
gyrostat
habitude
hachoir
halte
hameau
hangar
hanneton
haricot
harmonie
harpon
hasard
hélium
hématome
herbe
hérisson
hermine
héron
hésiter
heureux
hiberner
hibou
hilarant
histoire
hiver
homard
hommage
homogène
honneur
honorer
honteux
horde
horizon
horloge
hormone
horrible
houleux
housse
hublot
huileux
humain
humble
humide
humour
hurler
hydromel
hygiène
hymne
hypnose
idylle
ignorer
iguane
illicite
illusion
image
imbiber
imiter
immense
immobile
immuable
impact
impérial
implorer
imposer
imprimer
imputer
incarner
incendie
incident
incliner
incolore
indexer
indice
inductif
inédit
ineptie
inexact
infini
infliger
informer
infusion
ingérer
inhaler
inhiber
injecter
injure
innocent
inoculer
inonder
inscrire
insecte
insigne
insolite
inspirer
instinct
insulter
intact
intense
intime
intrigue
intuitif
inutile
invasion
inventer
inviter
invoquer
ironique
irradier
irréel
irriter
isoler
ivoire
ivresse
jaguar
jaillir
jambe
janvier
jardin
jauger
jaune
javelot
jetable
jeton
jeudi
jeunesse
joindre
joncher
jongler
joueur
jouissif
journal
jovial
joyau
joyeux
jubiler
jugement
junior
jupon
juriste
justice
juteux
juvénile
kayak
kimono
kiosque
label
labial
labourer
lacérer
lactose
lagune
laine
laisser
laitier
lambeau
lamelle
lampe
lanceur
langage
lanterne
lapin
largeur
larme
laurier
lavabo
lavoir
lecture
légal
léger
légume
lessive
lettre
levier
lexique
lézard
liasse
libérer
libre
licence
licorne
liège
lièvre
ligature
ligoter
ligue
limer
limite
limonade
limpide
linéaire
lingot
lionceau
liquide
lisière
lister
lithium
litige
littoral
livreur
logique
lointain
loisir
lombric
loterie
louer
lourd
loutre
louve
loyal
lubie
lucide
lucratif
lueur
lugubre
luisant
lumière
lunaire
lundi
luron
lutter
luxueux
machine
magasin
magenta
magique
maigre
maillon
maintien
mairie
maison
majorer
malaxer
maléfice
malheur
malice
mallette
mammouth
mandater
maniable
manquant
manteau
manuel
marathon
marbre
marchand
mardi
maritime
marqueur
marron
marteler
mascotte
massif
matériel
matière
matraque
maudire
maussade
mauve
maximal
méchant
méconnu
médaille
médecin
méditer
méduse
meilleur
mélange
mélodie
membre
mémoire
menacer
mener
menhir
mensonge
mentor
mercredi
mérite
merle
messager
mesure
métal
météore
méthode
métier
meuble
miauler
microbe
miette
mignon
migrer
milieu
million
mimique
mince
minéral
minimal
minorer
minute
miracle
miroiter
missile
mixte
mobile
moderne
moelleux
mondial
moniteur
monnaie
monotone
monstre
montagne
monument
moqueur
morceau
morsure
mortier
moteur
motif
mouche
moufle
moulin
mousson
mouton
mouvant
multiple
munition
muraille
murène
murmure
muscle
muséum
musicien
mutation
muter
mutuel
myriade
myrtille
mystère
mythique
nageur
nappe
narquois
narrer
natation
nation
nature
naufrage
nautique
navire
nébuleux
nectar
néfaste
négation
négliger
négocier
neige
nerveux
nettoyer
neurone
neutron
neveu
niche
nickel
nitrate
niveau
noble
nocif
nocturne
noirceur
noisette
nomade
nombreux
nommer
normatif
notable
notifier
notoire
nourrir
nouveau
novateur
novembre
novice
nuage
nuancer
nuire
nuisible
numéro
nuptial
nuque
nutritif
obéir
objectif
obliger
obscur
observer
obstacle
obtenir
obturer
occasion
occuper
océan
octobre
octroyer
octupler
oculaire
odeur
odorant
offenser
officier
offrir
ogive
oiseau
oisillon
olfactif
olivier
ombrage
omettre
onctueux
onduler
onéreux
onirique
opale
opaque
opérer
opinion
opportun
opprimer
opter
optique
orageux
orange
orbite
ordonner
oreille
organe
orgueil
orifice
ornement
orque
ortie
osciller
osmose
ossature
otarie
ouragan
ourson
outil
outrager
ouvrage
ovation
oxyde
oxygène
ozone
paisible
palace
palmarès
palourde
palper
panache
panda
pangolin
paniquer
panneau
panorama
pantalon
papaye
papier
papoter
papyrus
paradoxe
parcelle
paresse
parfumer
parler
parole
parrain
parsemer
partager
parure
parvenir
passion
pastèque
paternel
patience
patron
pavillon
pavoiser
payer
paysage
peigne
peintre
pelage
pélican
pelle
pelouse
peluche
pendule
pénétrer
pénible
pensif
pénurie
pépite
péplum
perdrix
perforer
période
permuter
perplexe
persil
perte
peser
pétale
petit
pétrir
peuple
pharaon
phobie
phoque
photon
phrase
physique
piano
pictural
pièce
pierre
pieuvre
pilote
pinceau
pipette
piquer
pirogue
piscine
piston
pivoter
pixel
pizza
placard
plafond
plaisir
planer
plaque
plastron
plateau
pleurer
plexus
pliage
plomb
plonger
pluie
plumage
pochette
poésie
poète
pointe
poirier
poisson
poivre
polaire
policier
pollen
polygone
pommade
pompier
ponctuel
pondérer
poney
portique
position
posséder
posture
potager
poteau
potion
pouce
poulain
poumon
pourpre
poussin
pouvoir
prairie
pratique
précieux
prédire
préfixe
prélude
prénom
présence
prétexte
prévoir
primitif
prince
prison
priver
problème
procéder
prodige
profond
progrès
proie
projeter
prologue
promener
propre
prospère
protéger
prouesse
proverbe
prudence
pruneau
psychose
public
puceron
puiser
pulpe
pulsar
punaise
punitif
pupitre
purifier
puzzle
pyramide
quasar
querelle
question
quiétude
quitter
quotient
racine
raconter
radieux
ragondin
raideur
raisin
ralentir
rallonge
ramasser
rapide
rasage
ratisser
ravager
ravin
rayonner
réactif
réagir
réaliser
réanimer
recevoir
réciter
réclamer
récolter
recruter
reculer
recycler
rédiger
redouter
refaire
réflexe
réformer
refrain
refuge
régalien
région
réglage
régulier
réitérer
rejeter
rejouer
relatif
relever
relief
remarque
remède
remise
remonter
remplir
remuer
renard
renfort
renifler
renoncer
rentrer
renvoi
replier
reporter
reprise
reptile
requin
réserve
résineux
résoudre
respect
rester
résultat
rétablir
retenir
réticule
retomber
retracer
réunion
réussir
revanche
revivre
révolte
révulsif
richesse
rideau
rieur
rigide
rigoler
rincer
riposter
risible
risque
rituel
rival
rivière
rocheux
romance
rompre
ronce
rondin
roseau
rosier
rotatif
rotor
rotule
rouge
rouille
rouleau
routine
royaume
ruban
rubis
ruche
ruelle
rugueux
ruiner
ruisseau
ruser
rustique
rythme
sabler
saboter
sabre
sacoche
safari
sagesse
saisir
salade
salive
salon
saluer
samedi
sanction
sanglier
sarcasme
sardine
saturer
saugrenu
saumon
sauter
sauvage
savant
savonner
scalpel
scandale
scélérat
scénario
sceptre
schéma
science
scinder
score
scrutin
sculpter
séance
sécable
sécher
secouer
sécréter
sédatif
séduire
seigneur
séjour
sélectif
semaine
sembler
semence
séminal
sénateur
sensible
sentence
séparer
séquence
serein
sergent
sérieux
serrure
sérum
service
sésame
sévir
sevrage
sextuple
sidéral
siècle
siéger
siffler
sigle
signal
silence
silicium
simple
sincère
sinistre
siphon
sirop
sismique
situer
skier
social
socle
sodium
soigneux
soldat
soleil
solitude
soluble
sombre
sommeil
somnoler
sonde
songeur
sonnette
sonore
sorcier
sortir
sosie
sottise
soucieux
soudure
souffle
soulever
soupape
source
soutirer
souvenir
spacieux
spatial
spécial
sphère
spiral
stable
station
sternum
stimulus
stipuler
strict
studieux
stupeur
styliste
sublime
substrat
subtil
subvenir
succès
sucre
suffixe
suggérer
suiveur
sulfate
superbe
supplier
surface
suricate
surmener
surprise
sursaut
survie
suspect
syllabe
symbole
symétrie
synapse
syntaxe
système
tabac
tablier
tactile
tailler
talent
talisman
talonner
tambour
tamiser
tangible
tapis
taquiner
tarder
tarif
tartine
tasse
tatami
tatouage
taupe
taureau
taxer
témoin
temporel
tenaille
tendre
teneur
tenir
tension
terminer
terne
terrible
tétine
texte
thème
théorie
thérapie
thorax
tibia
tiède
timide
tirelire
tiroir
tissu
titane
titre
tituber
toboggan
tolérant
tomate
tonique
tonneau
toponyme
torche
tordre
tornade
torpille
torrent
torse
tortue
totem
toucher
tournage
tousser
toxine
traction
trafic
tragique
trahir
train
trancher
travail
trèfle
tremper
trésor
treuil
triage
tribunal
tricoter
trilogie
triomphe
tripler
triturer
trivial
trombone
tronc
tropical
troupeau
tuile
tulipe
tumulte
tunnel
turbine
tuteur
tutoyer
tuyau
tympan
typhon
typique
tyran
ubuesque
ultime
ultrason
unanime
unifier
union
unique
unitaire
univers
uranium
urbain
urticant
usage
usine
usuel
usure
utile
utopie
vacarme
vaccin
vagabond
vague
vaillant
vaincre
vaisseau
valable
valise
vallon
valve
vampire
vanille
vapeur
varier
vaseux
vassal
vaste
vecteur
vedette
végétal
véhicule
veinard
véloce
vendredi
vénérer
venger
venimeux
ventouse
verdure
vérin
vernir
verrou
verser
vertu
veston
vétéran
vétuste
vexant
vexer
viaduc
viande
victoire
vidange
vidéo
vignette
vigueur
vilain
village
vinaigre
violon
vipère
virement
virtuose
virus
visage
viseur
vision
visqueux
visuel
vital
vitesse
viticole
vitrine
vivace
vivipare
vocation
voguer
voile
voisin
voiture
volaille
volcan
voltiger
volume
vorace
vortex
voter
vouloir
voyage
voyelle
wagon
xénon
yacht
zèbre
zénith
zeste
zoologie`.split("\n");

// node_modules/@scure/bip39/esm/wordlists/italian.js
var wordlist4 = `abaco
abbaglio
abbinato
abete
abisso
abolire
abrasivo
abrogato
accadere
accenno
accusato
acetone
achille
acido
acqua
acre
acrilico
acrobata
acuto
adagio
addebito
addome
adeguato
aderire
adipe
adottare
adulare
affabile
affetto
affisso
affranto
aforisma
afoso
africano
agave
agente
agevole
aggancio
agire
agitare
agonismo
agricolo
agrumeto
aguzzo
alabarda
alato
albatro
alberato
albo
albume
alce
alcolico
alettone
alfa
algebra
aliante
alibi
alimento
allagato
allegro
allievo
allodola
allusivo
almeno
alogeno
alpaca
alpestre
altalena
alterno
alticcio
altrove
alunno
alveolo
alzare
amalgama
amanita
amarena
ambito
ambrato
ameba
america
ametista
amico
ammasso
ammenda
ammirare
ammonito
amore
ampio
ampliare
amuleto
anacardo
anagrafe
analista
anarchia
anatra
anca
ancella
ancora
andare
andrea
anello
angelo
angolare
angusto
anima
annegare
annidato
anno
annuncio
anonimo
anticipo
anzi
apatico
apertura
apode
apparire
appetito
appoggio
approdo
appunto
aprile
arabica
arachide
aragosta
araldica
arancio
aratura
arazzo
arbitro
archivio
ardito
arenile
argento
argine
arguto
aria
armonia
arnese
arredato
arringa
arrosto
arsenico
arso
artefice
arzillo
asciutto
ascolto
asepsi
asettico
asfalto
asino
asola
aspirato
aspro
assaggio
asse
assoluto
assurdo
asta
astenuto
astice
astratto
atavico
ateismo
atomico
atono
attesa
attivare
attorno
attrito
attuale
ausilio
austria
autista
autonomo
autunno
avanzato
avere
avvenire
avviso
avvolgere
azione
azoto
azzimo
azzurro
babele
baccano
bacino
baco
badessa
badilata
bagnato
baita
balcone
baldo
balena
ballata
balzano
bambino
bandire
baraonda
barbaro
barca
baritono
barlume
barocco
basilico
basso
batosta
battuto
baule
bava
bavosa
becco
beffa
belgio
belva
benda
benevole
benigno
benzina
bere
berlina
beta
bibita
bici
bidone
bifido
biga
bilancia
bimbo
binocolo
biologo
bipede
bipolare
birbante
birra
biscotto
bisesto
bisnonno
bisonte
bisturi
bizzarro
blando
blatta
bollito
bonifico
bordo
bosco
botanico
bottino
bozzolo
braccio
bradipo
brama
branca
bravura
bretella
brevetto
brezza
briglia
brillante
brindare
broccolo
brodo
bronzina
brullo
bruno
bubbone
buca
budino
buffone
buio
bulbo
buono
burlone
burrasca
bussola
busta
cadetto
caduco
calamaro
calcolo
calesse
calibro
calmo
caloria
cambusa
camerata
camicia
cammino
camola
campale
canapa
candela
cane
canino
canotto
cantina
capace
capello
capitolo
capogiro
cappero
capra
capsula
carapace
carcassa
cardo
carisma
carovana
carretto
cartolina
casaccio
cascata
caserma
caso
cassone
castello
casuale
catasta
catena
catrame
cauto
cavillo
cedibile
cedrata
cefalo
celebre
cellulare
cena
cenone
centesimo
ceramica
cercare
certo
cerume
cervello
cesoia
cespo
ceto
chela
chiaro
chicca
chiedere
chimera
china
chirurgo
chitarra
ciao
ciclismo
cifrare
cigno
cilindro
ciottolo
circa
cirrosi
citrico
cittadino
ciuffo
civetta
civile
classico
clinica
cloro
cocco
codardo
codice
coerente
cognome
collare
colmato
colore
colposo
coltivato
colza
coma
cometa
commando
comodo
computer
comune
conciso
condurre
conferma
congelare
coniuge
connesso
conoscere
consumo
continuo
convegno
coperto
copione
coppia
copricapo
corazza
cordata
coricato
cornice
corolla
corpo
corredo
corsia
cortese
cosmico
costante
cottura
covato
cratere
cravatta
creato
credere
cremoso
crescita
creta
criceto
crinale
crisi
critico
croce
cronaca
crostata
cruciale
crusca
cucire
cuculo
cugino
cullato
cupola
curatore
cursore
curvo
cuscino
custode
dado
daino
dalmata
damerino
daniela
dannoso
danzare
datato
davanti
davvero
debutto
decennio
deciso
declino
decollo
decreto
dedicato
definito
deforme
degno
delegare
delfino
delirio
delta
demenza
denotato
dentro
deposito
derapata
derivare
deroga
descritto
deserto
desiderio
desumere
detersivo
devoto
diametro
dicembre
diedro
difeso
diffuso
digerire
digitale
diluvio
dinamico
dinnanzi
dipinto
diploma
dipolo
diradare
dire
dirotto
dirupo
disagio
discreto
disfare
disgelo
disposto
distanza
disumano
dito
divano
divelto
dividere
divorato
doblone
docente
doganale
dogma
dolce
domato
domenica
dominare
dondolo
dono
dormire
dote
dottore
dovuto
dozzina
drago
druido
dubbio
dubitare
ducale
duna
duomo
duplice
duraturo
ebano
eccesso
ecco
eclissi
economia
edera
edicola
edile
editoria
educare
egemonia
egli
egoismo
egregio
elaborato
elargire
elegante
elencato
eletto
elevare
elfico
elica
elmo
elsa
eluso
emanato
emblema
emesso
emiro
emotivo
emozione
empirico
emulo
endemico
enduro
energia
enfasi
enoteca
entrare
enzima
epatite
epilogo
episodio
epocale
eppure
equatore
erario
erba
erboso
erede
eremita
erigere
ermetico
eroe
erosivo
errante
esagono
esame
esanime
esaudire
esca
esempio
esercito
esibito
esigente
esistere
esito
esofago
esortato
esoso
espanso
espresso
essenza
esso
esteso
estimare
estonia
estroso
esultare
etilico
etnico
etrusco
etto
euclideo
europa
evaso
evidenza
evitato
evoluto
evviva
fabbrica
faccenda
fachiro
falco
famiglia
fanale
fanfara
fango
fantasma
fare
farfalla
farinoso
farmaco
fascia
fastoso
fasullo
faticare
fato
favoloso
febbre
fecola
fede
fegato
felpa
feltro
femmina
fendere
fenomeno
fermento
ferro
fertile
fessura
festivo
fetta
feudo
fiaba
fiducia
fifa
figurato
filo
finanza
finestra
finire
fiore
fiscale
fisico
fiume
flacone
flamenco
flebo
flemma
florido
fluente
fluoro
fobico
focaccia
focoso
foderato
foglio
folata
folclore
folgore
fondente
fonetico
fonia
fontana
forbito
forchetta
foresta
formica
fornaio
foro
fortezza
forzare
fosfato
fosso
fracasso
frana
frassino
fratello
freccetta
frenata
fresco
frigo
frollino
fronde
frugale
frutta
fucilata
fucsia
fuggente
fulmine
fulvo
fumante
fumetto
fumoso
fune
funzione
fuoco
furbo
furgone
furore
fuso
futile
gabbiano
gaffe
galateo
gallina
galoppo
gambero
gamma
garanzia
garbo
garofano
garzone
gasdotto
gasolio
gastrico
gatto
gaudio
gazebo
gazzella
geco
gelatina
gelso
gemello
gemmato
gene
genitore
gennaio
genotipo
gergo
ghepardo
ghiaccio
ghisa
giallo
gilda
ginepro
giocare
gioiello
giorno
giove
girato
girone
gittata
giudizio
giurato
giusto
globulo
glutine
gnomo
gobba
golf
gomito
gommone
gonfio
gonna
governo
gracile
grado
grafico
grammo
grande
grattare
gravoso
grazia
greca
gregge
grifone
grigio
grinza
grotta
gruppo
guadagno
guaio
guanto
guardare
gufo
guidare
ibernato
icona
identico
idillio
idolo
idra
idrico
idrogeno
igiene
ignaro
ignorato
ilare
illeso
illogico
illudere
imballo
imbevuto
imbocco
imbuto
immane
immerso
immolato
impacco
impeto
impiego
importo
impronta
inalare
inarcare
inattivo
incanto
incendio
inchino
incisivo
incluso
incontro
incrocio
incubo
indagine
india
indole
inedito
infatti
infilare
inflitto
ingaggio
ingegno
inglese
ingordo
ingrosso
innesco
inodore
inoltrare
inondato
insano
insetto
insieme
insonnia
insulina
intasato
intero
intonaco
intuito
inumidire
invalido
invece
invito
iperbole
ipnotico
ipotesi
ippica
iride
irlanda
ironico
irrigato
irrorare
isolato
isotopo
isterico
istituto
istrice
italia
iterare
labbro
labirinto
lacca
lacerato
lacrima
lacuna
laddove
lago
lampo
lancetta
lanterna
lardoso
larga
laringe
lastra
latenza
latino
lattuga
lavagna
lavoro
legale
leggero
lembo
lentezza
lenza
leone
lepre
lesivo
lessato
lesto
letterale
leva
levigato
libero
lido
lievito
lilla
limatura
limitare
limpido
lineare
lingua
liquido
lira
lirica
lisca
lite
litigio
livrea
locanda
lode
logica
lombare
londra
longevo
loquace
lorenzo
loto
lotteria
luce
lucidato
lumaca
luminoso
lungo
lupo
luppolo
lusinga
lusso
lutto
macabro
macchina
macero
macinato
madama
magico
maglia
magnete
magro
maiolica
malafede
malgrado
malinteso
malsano
malto
malumore
mana
mancia
mandorla
mangiare
manifesto
mannaro
manovra
mansarda
mantide
manubrio
mappa
maratona
marcire
maretta
marmo
marsupio
maschera
massaia
mastino
materasso
matricola
mattone
maturo
mazurca
meandro
meccanico
mecenate
medesimo
meditare
mega
melassa
melis
melodia
meninge
meno
mensola
mercurio
merenda
merlo
meschino
mese
messere
mestolo
metallo
metodo
mettere
miagolare
mica
micelio
michele
microbo
midollo
miele
migliore
milano
milite
mimosa
minerale
mini
minore
mirino
mirtillo
miscela
missiva
misto
misurare
mitezza
mitigare
mitra
mittente
mnemonico
modello
modifica
modulo
mogano
mogio
mole
molosso
monastero
monco
mondina
monetario
monile
monotono
monsone
montato
monviso
mora
mordere
morsicato
mostro
motivato
motosega
motto
movenza
movimento
mozzo
mucca
mucosa
muffa
mughetto
mugnaio
mulatto
mulinello
multiplo
mummia
munto
muovere
murale
musa
muscolo
musica
mutevole
muto
nababbo
nafta
nanometro
narciso
narice
narrato
nascere
nastrare
naturale
nautica
naviglio
nebulosa
necrosi
negativo
negozio
nemmeno
neofita
neretto
nervo
nessuno
nettuno
neutrale
neve
nevrotico
nicchia
ninfa
nitido
nobile
nocivo
nodo
nome
nomina
nordico
normale
norvegese
nostrano
notare
notizia
notturno
novella
nucleo
nulla
numero
nuovo
nutrire
nuvola
nuziale
oasi
obbedire
obbligo
obelisco
oblio
obolo
obsoleto
occasione
occhio
occidente
occorrere
occultare
ocra
oculato
odierno
odorare
offerta
offrire
offuscato
oggetto
oggi
ognuno
olandese
olfatto
oliato
oliva
ologramma
oltre
omaggio
ombelico
ombra
omega
omissione
ondoso
onere
onice
onnivoro
onorevole
onta
operato
opinione
opposto
oracolo
orafo
ordine
orecchino
orefice
orfano
organico
origine
orizzonte
orma
ormeggio
ornativo
orologio
orrendo
orribile
ortensia
ortica
orzata
orzo
osare
oscurare
osmosi
ospedale
ospite
ossa
ossidare
ostacolo
oste
otite
otre
ottagono
ottimo
ottobre
ovale
ovest
ovino
oviparo
ovocito
ovunque
ovviare
ozio
pacchetto
pace
pacifico
padella
padrone
paese
paga
pagina
palazzina
palesare
pallido
palo
palude
pandoro
pannello
paolo
paonazzo
paprica
parabola
parcella
parere
pargolo
pari
parlato
parola
partire
parvenza
parziale
passivo
pasticca
patacca
patologia
pattume
pavone
peccato
pedalare
pedonale
peggio
peloso
penare
pendice
penisola
pennuto
penombra
pensare
pentola
pepe
pepita
perbene
percorso
perdonato
perforare
pergamena
periodo
permesso
perno
perplesso
persuaso
pertugio
pervaso
pesatore
pesista
peso
pestifero
petalo
pettine
petulante
pezzo
piacere
pianta
piattino
piccino
picozza
piega
pietra
piffero
pigiama
pigolio
pigro
pila
pilifero
pillola
pilota
pimpante
pineta
pinna
pinolo
pioggia
piombo
piramide
piretico
pirite
pirolisi
pitone
pizzico
placebo
planare
plasma
platano
plenario
pochezza
poderoso
podismo
poesia
poggiare
polenta
poligono
pollice
polmonite
polpetta
polso
poltrona
polvere
pomice
pomodoro
ponte
popoloso
porfido
poroso
porpora
porre
portata
posa
positivo
possesso
postulato
potassio
potere
pranzo
prassi
pratica
precluso
predica
prefisso
pregiato
prelievo
premere
prenotare
preparato
presenza
pretesto
prevalso
prima
principe
privato
problema
procura
produrre
profumo
progetto
prolunga
promessa
pronome
proposta
proroga
proteso
prova
prudente
prugna
prurito
psiche
pubblico
pudica
pugilato
pugno
pulce
pulito
pulsante
puntare
pupazzo
pupilla
puro
quadro
qualcosa
quasi
querela
quota
raccolto
raddoppio
radicale
radunato
raffica
ragazzo
ragione
ragno
ramarro
ramingo
ramo
randagio
rantolare
rapato
rapina
rappreso
rasatura
raschiato
rasente
rassegna
rastrello
rata
ravveduto
reale
recepire
recinto
recluta
recondito
recupero
reddito
redimere
regalato
registro
regola
regresso
relazione
remare
remoto
renna
replica
reprimere
reputare
resa
residente
responso
restauro
rete
retina
retorica
rettifica
revocato
riassunto
ribadire
ribelle
ribrezzo
ricarica
ricco
ricevere
riciclato
ricordo
ricreduto
ridicolo
ridurre
rifasare
riflesso
riforma
rifugio
rigare
rigettato
righello
rilassato
rilevato
rimanere
rimbalzo
rimedio
rimorchio
rinascita
rincaro
rinforzo
rinnovo
rinomato
rinsavito
rintocco
rinuncia
rinvenire
riparato
ripetuto
ripieno
riportare
ripresa
ripulire
risata
rischio
riserva
risibile
riso
rispetto
ristoro
risultato
risvolto
ritardo
ritegno
ritmico
ritrovo
riunione
riva
riverso
rivincita
rivolto
rizoma
roba
robotico
robusto
roccia
roco
rodaggio
rodere
roditore
rogito
rollio
romantico
rompere
ronzio
rosolare
rospo
rotante
rotondo
rotula
rovescio
rubizzo
rubrica
ruga
rullino
rumine
rumoroso
ruolo
rupe
russare
rustico
sabato
sabbiare
sabotato
sagoma
salasso
saldatura
salgemma
salivare
salmone
salone
saltare
saluto
salvo
sapere
sapido
saporito
saraceno
sarcasmo
sarto
sassoso
satellite
satira
satollo
saturno
savana
savio
saziato
sbadiglio
sbalzo
sbancato
sbarra
sbattere
sbavare
sbendare
sbirciare
sbloccato
sbocciato
sbrinare
sbruffone
sbuffare
scabroso
scadenza
scala
scambiare
scandalo
scapola
scarso
scatenare
scavato
scelto
scenico
scettro
scheda
schiena
sciarpa
scienza
scindere
scippo
sciroppo
scivolo
sclerare
scodella
scolpito
scomparto
sconforto
scoprire
scorta
scossone
scozzese
scriba
scrollare
scrutinio
scuderia
scultore
scuola
scuro
scusare
sdebitare
sdoganare
seccatura
secondo
sedano
seggiola
segnalato
segregato
seguito
selciato
selettivo
sella
selvaggio
semaforo
sembrare
seme
seminato
sempre
senso
sentire
sepolto
sequenza
serata
serbato
sereno
serio
serpente
serraglio
servire
sestina
setola
settimana
sfacelo
sfaldare
sfamato
sfarzoso
sfaticato
sfera
sfida
sfilato
sfinge
sfocato
sfoderare
sfogo
sfoltire
sforzato
sfratto
sfruttato
sfuggito
sfumare
sfuso
sgabello
sgarbato
sgonfiare
sgorbio
sgrassato
sguardo
sibilo
siccome
sierra
sigla
signore
silenzio
sillaba
simbolo
simpatico
simulato
sinfonia
singolo
sinistro
sino
sintesi
sinusoide
sipario
sisma
sistole
situato
slitta
slogatura
sloveno
smarrito
smemorato
smentito
smeraldo
smilzo
smontare
smottato
smussato
snellire
snervato
snodo
sobbalzo
sobrio
soccorso
sociale
sodale
soffitto
sogno
soldato
solenne
solido
sollazzo
solo
solubile
solvente
somatico
somma
sonda
sonetto
sonnifero
sopire
soppeso
sopra
sorgere
sorpasso
sorriso
sorso
sorteggio
sorvolato
sospiro
sosta
sottile
spada
spalla
spargere
spatola
spavento
spazzola
specie
spedire
spegnere
spelatura
speranza
spessore
spettrale
spezzato
spia
spigoloso
spillato
spinoso
spirale
splendido
sportivo
sposo
spranga
sprecare
spronato
spruzzo
spuntino
squillo
sradicare
srotolato
stabile
stacco
staffa
stagnare
stampato
stantio
starnuto
stasera
statuto
stelo
steppa
sterzo
stiletto
stima
stirpe
stivale
stizzoso
stonato
storico
strappo
stregato
stridulo
strozzare
strutto
stuccare
stufo
stupendo
subentro
succoso
sudore
suggerito
sugo
sultano
suonare
superbo
supporto
surgelato
surrogato
sussurro
sutura
svagare
svedese
sveglio
svelare
svenuto
svezia
sviluppo
svista
svizzera
svolta
svuotare
tabacco
tabulato
tacciare
taciturno
tale
talismano
tampone
tannino
tara
tardivo
targato
tariffa
tarpare
tartaruga
tasto
tattico
taverna
tavolata
tazza
teca
tecnico
telefono
temerario
tempo
temuto
tendone
tenero
tensione
tentacolo
teorema
terme
terrazzo
terzetto
tesi
tesserato
testato
tetro
tettoia
tifare
tigella
timbro
tinto
tipico
tipografo
tiraggio
tiro
titanio
titolo
titubante
tizio
tizzone
toccare
tollerare
tolto
tombola
tomo
tonfo
tonsilla
topazio
topologia
toppa
torba
tornare
torrone
tortora
toscano
tossire
tostatura
totano
trabocco
trachea
trafila
tragedia
tralcio
tramonto
transito
trapano
trarre
trasloco
trattato
trave
treccia
tremolio
trespolo
tributo
tricheco
trifoglio
trillo
trincea
trio
tristezza
triturato
trivella
tromba
trono
troppo
trottola
trovare
truccato
tubatura
tuffato
tulipano
tumulto
tunisia
turbare
turchino
tuta
tutela
ubicato
uccello
uccisore
udire
uditivo
uffa
ufficio
uguale
ulisse
ultimato
umano
umile
umorismo
uncinetto
ungere
ungherese
unicorno
unificato
unisono
unitario
unte
uovo
upupa
uragano
urgenza
urlo
usanza
usato
uscito
usignolo
usuraio
utensile
utilizzo
utopia
vacante
vaccinato
vagabondo
vagliato
valanga
valgo
valico
valletta
valoroso
valutare
valvola
vampata
vangare
vanitoso
vano
vantaggio
vanvera
vapore
varano
varcato
variante
vasca
vedetta
vedova
veduto
vegetale
veicolo
velcro
velina
velluto
veloce
venato
vendemmia
vento
verace
verbale
vergogna
verifica
vero
verruca
verticale
vescica
vessillo
vestale
veterano
vetrina
vetusto
viandante
vibrante
vicenda
vichingo
vicinanza
vidimare
vigilia
vigneto
vigore
vile
villano
vimini
vincitore
viola
vipera
virgola
virologo
virulento
viscoso
visione
vispo
vissuto
visura
vita
vitello
vittima
vivanda
vivido
viziare
voce
voga
volatile
volere
volpe
voragine
vulcano
zampogna
zanna
zappato
zattera
zavorra
zefiro
zelante
zelo
zenzero
zerbino
zibetto
zinco
zircone
zitto
zolla
zotico
zucchero
zufolo
zulu
zuppa`.split("\n");

// node_modules/@scure/bip39/esm/wordlists/japanese.js
var wordlist5 = `あいこくしん
あいさつ
あいだ
あおぞら
あかちゃん
あきる
あけがた
あける
あこがれる
あさい
あさひ
あしあと
あじわう
あずかる
あずき
あそぶ
あたえる
あたためる
あたりまえ
あたる
あつい
あつかう
あっしゅく
あつまり
あつめる
あてな
あてはまる
あひる
あぶら
あぶる
あふれる
あまい
あまど
あまやかす
あまり
あみもの
あめりか
あやまる
あゆむ
あらいぐま
あらし
あらすじ
あらためる
あらゆる
あらわす
ありがとう
あわせる
あわてる
あんい
あんがい
あんこ
あんぜん
あんてい
あんない
あんまり
いいだす
いおん
いがい
いがく
いきおい
いきなり
いきもの
いきる
いくじ
いくぶん
いけばな
いけん
いこう
いこく
いこつ
いさましい
いさん
いしき
いじゅう
いじょう
いじわる
いずみ
いずれ
いせい
いせえび
いせかい
いせき
いぜん
いそうろう
いそがしい
いだい
いだく
いたずら
いたみ
いたりあ
いちおう
いちじ
いちど
いちば
いちぶ
いちりゅう
いつか
いっしゅん
いっせい
いっそう
いったん
いっち
いってい
いっぽう
いてざ
いてん
いどう
いとこ
いない
いなか
いねむり
いのち
いのる
いはつ
いばる
いはん
いびき
いひん
いふく
いへん
いほう
いみん
いもうと
いもたれ
いもり
いやがる
いやす
いよかん
いよく
いらい
いらすと
いりぐち
いりょう
いれい
いれもの
いれる
いろえんぴつ
いわい
いわう
いわかん
いわば
いわゆる
いんげんまめ
いんさつ
いんしょう
いんよう
うえき
うえる
うおざ
うがい
うかぶ
うかべる
うきわ
うくらいな
うくれれ
うけたまわる
うけつけ
うけとる
うけもつ
うける
うごかす
うごく
うこん
うさぎ
うしなう
うしろがみ
うすい
うすぎ
うすぐらい
うすめる
うせつ
うちあわせ
うちがわ
うちき
うちゅう
うっかり
うつくしい
うったえる
うつる
うどん
うなぎ
うなじ
うなずく
うなる
うねる
うのう
うぶげ
うぶごえ
うまれる
うめる
うもう
うやまう
うよく
うらがえす
うらぐち
うらない
うりあげ
うりきれ
うるさい
うれしい
うれゆき
うれる
うろこ
うわき
うわさ
うんこう
うんちん
うんてん
うんどう
えいえん
えいが
えいきょう
えいご
えいせい
えいぶん
えいよう
えいわ
えおり
えがお
えがく
えきたい
えくせる
えしゃく
えすて
えつらん
えのぐ
えほうまき
えほん
えまき
えもじ
えもの
えらい
えらぶ
えりあ
えんえん
えんかい
えんぎ
えんげき
えんしゅう
えんぜつ
えんそく
えんちょう
えんとつ
おいかける
おいこす
おいしい
おいつく
おうえん
おうさま
おうじ
おうせつ
おうたい
おうふく
おうべい
おうよう
おえる
おおい
おおう
おおどおり
おおや
おおよそ
おかえり
おかず
おがむ
おかわり
おぎなう
おきる
おくさま
おくじょう
おくりがな
おくる
おくれる
おこす
おこなう
おこる
おさえる
おさない
おさめる
おしいれ
おしえる
おじぎ
おじさん
おしゃれ
おそらく
おそわる
おたがい
おたく
おだやか
おちつく
おっと
おつり
おでかけ
おとしもの
おとなしい
おどり
おどろかす
おばさん
おまいり
おめでとう
おもいで
おもう
おもたい
おもちゃ
おやつ
おやゆび
およぼす
おらんだ
おろす
おんがく
おんけい
おんしゃ
おんせん
おんだん
おんちゅう
おんどけい
かあつ
かいが
がいき
がいけん
がいこう
かいさつ
かいしゃ
かいすいよく
かいぜん
かいぞうど
かいつう
かいてん
かいとう
かいふく
がいへき
かいほう
かいよう
がいらい
かいわ
かえる
かおり
かかえる
かがく
かがし
かがみ
かくご
かくとく
かざる
がぞう
かたい
かたち
がちょう
がっきゅう
がっこう
がっさん
がっしょう
かなざわし
かのう
がはく
かぶか
かほう
かほご
かまう
かまぼこ
かめれおん
かゆい
かようび
からい
かるい
かろう
かわく
かわら
がんか
かんけい
かんこう
かんしゃ
かんそう
かんたん
かんち
がんばる
きあい
きあつ
きいろ
ぎいん
きうい
きうん
きえる
きおう
きおく
きおち
きおん
きかい
きかく
きかんしゃ
ききて
きくばり
きくらげ
きけんせい
きこう
きこえる
きこく
きさい
きさく
きさま
きさらぎ
ぎじかがく
ぎしき
ぎじたいけん
ぎじにってい
ぎじゅつしゃ
きすう
きせい
きせき
きせつ
きそう
きぞく
きぞん
きたえる
きちょう
きつえん
ぎっちり
きつつき
きつね
きてい
きどう
きどく
きない
きなが
きなこ
きぬごし
きねん
きのう
きのした
きはく
きびしい
きひん
きふく
きぶん
きぼう
きほん
きまる
きみつ
きむずかしい
きめる
きもだめし
きもち
きもの
きゃく
きやく
ぎゅうにく
きよう
きょうりゅう
きらい
きらく
きりん
きれい
きれつ
きろく
ぎろん
きわめる
ぎんいろ
きんかくじ
きんじょ
きんようび
ぐあい
くいず
くうかん
くうき
くうぐん
くうこう
ぐうせい
くうそう
ぐうたら
くうふく
くうぼ
くかん
くきょう
くげん
ぐこう
くさい
くさき
くさばな
くさる
くしゃみ
くしょう
くすのき
くすりゆび
くせげ
くせん
ぐたいてき
くださる
くたびれる
くちこみ
くちさき
くつした
ぐっすり
くつろぐ
くとうてん
くどく
くなん
くねくね
くのう
くふう
くみあわせ
くみたてる
くめる
くやくしょ
くらす
くらべる
くるま
くれる
くろう
くわしい
ぐんかん
ぐんしょく
ぐんたい
ぐんて
けあな
けいかく
けいけん
けいこ
けいさつ
げいじゅつ
けいたい
げいのうじん
けいれき
けいろ
けおとす
けおりもの
げきか
げきげん
げきだん
げきちん
げきとつ
げきは
げきやく
げこう
げこくじょう
げざい
けさき
げざん
けしき
けしごむ
けしょう
げすと
けたば
けちゃっぷ
けちらす
けつあつ
けつい
けつえき
けっこん
けつじょ
けっせき
けってい
けつまつ
げつようび
げつれい
けつろん
げどく
けとばす
けとる
けなげ
けなす
けなみ
けぬき
げねつ
けねん
けはい
げひん
けぶかい
げぼく
けまり
けみかる
けむし
けむり
けもの
けらい
けろけろ
けわしい
けんい
けんえつ
けんお
けんか
げんき
けんげん
けんこう
けんさく
けんしゅう
けんすう
げんそう
けんちく
けんてい
けんとう
けんない
けんにん
げんぶつ
けんま
けんみん
けんめい
けんらん
けんり
こあくま
こいぬ
こいびと
ごうい
こうえん
こうおん
こうかん
ごうきゅう
ごうけい
こうこう
こうさい
こうじ
こうすい
ごうせい
こうそく
こうたい
こうちゃ
こうつう
こうてい
こうどう
こうない
こうはい
ごうほう
ごうまん
こうもく
こうりつ
こえる
こおり
ごかい
ごがつ
ごかん
こくご
こくさい
こくとう
こくない
こくはく
こぐま
こけい
こける
ここのか
こころ
こさめ
こしつ
こすう
こせい
こせき
こぜん
こそだて
こたい
こたえる
こたつ
こちょう
こっか
こつこつ
こつばん
こつぶ
こてい
こてん
ことがら
ことし
ことば
ことり
こなごな
こねこね
このまま
このみ
このよ
ごはん
こひつじ
こふう
こふん
こぼれる
ごまあぶら
こまかい
ごますり
こまつな
こまる
こむぎこ
こもじ
こもち
こもの
こもん
こやく
こやま
こゆう
こゆび
こよい
こよう
こりる
これくしょん
ころっけ
こわもて
こわれる
こんいん
こんかい
こんき
こんしゅう
こんすい
こんだて
こんとん
こんなん
こんびに
こんぽん
こんまけ
こんや
こんれい
こんわく
ざいえき
さいかい
さいきん
ざいげん
ざいこ
さいしょ
さいせい
ざいたく
ざいちゅう
さいてき
ざいりょう
さうな
さかいし
さがす
さかな
さかみち
さがる
さぎょう
さくし
さくひん
さくら
さこく
さこつ
さずかる
ざせき
さたん
さつえい
ざつおん
ざっか
ざつがく
さっきょく
ざっし
さつじん
ざっそう
さつたば
さつまいも
さてい
さといも
さとう
さとおや
さとし
さとる
さのう
さばく
さびしい
さべつ
さほう
さほど
さます
さみしい
さみだれ
さむけ
さめる
さやえんどう
さゆう
さよう
さよく
さらだ
ざるそば
さわやか
さわる
さんいん
さんか
さんきゃく
さんこう
さんさい
ざんしょ
さんすう
さんせい
さんそ
さんち
さんま
さんみ
さんらん
しあい
しあげ
しあさって
しあわせ
しいく
しいん
しうち
しえい
しおけ
しかい
しかく
じかん
しごと
しすう
じだい
したうけ
したぎ
したて
したみ
しちょう
しちりん
しっかり
しつじ
しつもん
してい
してき
してつ
じてん
じどう
しなぎれ
しなもの
しなん
しねま
しねん
しのぐ
しのぶ
しはい
しばかり
しはつ
しはらい
しはん
しひょう
しふく
じぶん
しへい
しほう
しほん
しまう
しまる
しみん
しむける
じむしょ
しめい
しめる
しもん
しゃいん
しゃうん
しゃおん
じゃがいも
しやくしょ
しゃくほう
しゃけん
しゃこ
しゃざい
しゃしん
しゃせん
しゃそう
しゃたい
しゃちょう
しゃっきん
じゃま
しゃりん
しゃれい
じゆう
じゅうしょ
しゅくはく
じゅしん
しゅっせき
しゅみ
しゅらば
じゅんばん
しょうかい
しょくたく
しょっけん
しょどう
しょもつ
しらせる
しらべる
しんか
しんこう
じんじゃ
しんせいじ
しんちく
しんりん
すあげ
すあし
すあな
ずあん
すいえい
すいか
すいとう
ずいぶん
すいようび
すうがく
すうじつ
すうせん
すおどり
すきま
すくう
すくない
すける
すごい
すこし
ずさん
すずしい
すすむ
すすめる
すっかり
ずっしり
ずっと
すてき
すてる
すねる
すのこ
すはだ
すばらしい
ずひょう
ずぶぬれ
すぶり
すふれ
すべて
すべる
ずほう
すぼん
すまい
すめし
すもう
すやき
すらすら
するめ
すれちがう
すろっと
すわる
すんぜん
すんぽう
せあぶら
せいかつ
せいげん
せいじ
せいよう
せおう
せかいかん
せきにん
せきむ
せきゆ
せきらんうん
せけん
せこう
せすじ
せたい
せたけ
せっかく
せっきゃく
ぜっく
せっけん
せっこつ
せっさたくま
せつぞく
せつだん
せつでん
せっぱん
せつび
せつぶん
せつめい
せつりつ
せなか
せのび
せはば
せびろ
せぼね
せまい
せまる
せめる
せもたれ
せりふ
ぜんあく
せんい
せんえい
せんか
せんきょ
せんく
せんげん
ぜんご
せんさい
せんしゅ
せんすい
せんせい
せんぞ
せんたく
せんちょう
せんてい
せんとう
せんぬき
せんねん
せんぱい
ぜんぶ
ぜんぽう
せんむ
せんめんじょ
せんもん
せんやく
せんゆう
せんよう
ぜんら
ぜんりゃく
せんれい
せんろ
そあく
そいとげる
そいね
そうがんきょう
そうき
そうご
そうしん
そうだん
そうなん
そうび
そうめん
そうり
そえもの
そえん
そがい
そげき
そこう
そこそこ
そざい
そしな
そせい
そせん
そそぐ
そだてる
そつう
そつえん
そっかん
そつぎょう
そっけつ
そっこう
そっせん
そっと
そとがわ
そとづら
そなえる
そなた
そふぼ
そぼく
そぼろ
そまつ
そまる
そむく
そむりえ
そめる
そもそも
そよかぜ
そらまめ
そろう
そんかい
そんけい
そんざい
そんしつ
そんぞく
そんちょう
ぞんび
ぞんぶん
そんみん
たあい
たいいん
たいうん
たいえき
たいおう
だいがく
たいき
たいぐう
たいけん
たいこ
たいざい
だいじょうぶ
だいすき
たいせつ
たいそう
だいたい
たいちょう
たいてい
だいどころ
たいない
たいねつ
たいのう
たいはん
だいひょう
たいふう
たいへん
たいほ
たいまつばな
たいみんぐ
たいむ
たいめん
たいやき
たいよう
たいら
たいりょく
たいる
たいわん
たうえ
たえる
たおす
たおる
たおれる
たかい
たかね
たきび
たくさん
たこく
たこやき
たさい
たしざん
だじゃれ
たすける
たずさわる
たそがれ
たたかう
たたく
ただしい
たたみ
たちばな
だっかい
だっきゃく
だっこ
だっしゅつ
だったい
たてる
たとえる
たなばた
たにん
たぬき
たのしみ
たはつ
たぶん
たべる
たぼう
たまご
たまる
だむる
ためいき
ためす
ためる
たもつ
たやすい
たよる
たらす
たりきほんがん
たりょう
たりる
たると
たれる
たれんと
たろっと
たわむれる
だんあつ
たんい
たんおん
たんか
たんき
たんけん
たんご
たんさん
たんじょうび
だんせい
たんそく
たんたい
だんち
たんてい
たんとう
だんな
たんにん
だんねつ
たんのう
たんぴん
だんぼう
たんまつ
たんめい
だんれつ
だんろ
だんわ
ちあい
ちあん
ちいき
ちいさい
ちえん
ちかい
ちから
ちきゅう
ちきん
ちけいず
ちけん
ちこく
ちさい
ちしき
ちしりょう
ちせい
ちそう
ちたい
ちたん
ちちおや
ちつじょ
ちてき
ちてん
ちぬき
ちぬり
ちのう
ちひょう
ちへいせん
ちほう
ちまた
ちみつ
ちみどろ
ちめいど
ちゃんこなべ
ちゅうい
ちゆりょく
ちょうし
ちょさくけん
ちらし
ちらみ
ちりがみ
ちりょう
ちるど
ちわわ
ちんたい
ちんもく
ついか
ついたち
つうか
つうじょう
つうはん
つうわ
つかう
つかれる
つくね
つくる
つけね
つける
つごう
つたえる
つづく
つつじ
つつむ
つとめる
つながる
つなみ
つねづね
つのる
つぶす
つまらない
つまる
つみき
つめたい
つもり
つもる
つよい
つるぼ
つるみく
つわもの
つわり
てあし
てあて
てあみ
ていおん
ていか
ていき
ていけい
ていこく
ていさつ
ていし
ていせい
ていたい
ていど
ていねい
ていひょう
ていへん
ていぼう
てうち
ておくれ
てきとう
てくび
でこぼこ
てさぎょう
てさげ
てすり
てそう
てちがい
てちょう
てつがく
てつづき
でっぱ
てつぼう
てつや
でぬかえ
てぬき
てぬぐい
てのひら
てはい
てぶくろ
てふだ
てほどき
てほん
てまえ
てまきずし
てみじか
てみやげ
てらす
てれび
てわけ
てわたし
でんあつ
てんいん
てんかい
てんき
てんぐ
てんけん
てんごく
てんさい
てんし
てんすう
でんち
てんてき
てんとう
てんない
てんぷら
てんぼうだい
てんめつ
てんらんかい
でんりょく
でんわ
どあい
といれ
どうかん
とうきゅう
どうぐ
とうし
とうむぎ
とおい
とおか
とおく
とおす
とおる
とかい
とかす
ときおり
ときどき
とくい
とくしゅう
とくてん
とくに
とくべつ
とけい
とける
とこや
とさか
としょかん
とそう
とたん
とちゅう
とっきゅう
とっくん
とつぜん
とつにゅう
とどける
ととのえる
とない
となえる
となり
とのさま
とばす
どぶがわ
とほう
とまる
とめる
ともだち
ともる
どようび
とらえる
とんかつ
どんぶり
ないかく
ないこう
ないしょ
ないす
ないせん
ないそう
なおす
ながい
なくす
なげる
なこうど
なさけ
なたでここ
なっとう
なつやすみ
ななおし
なにごと
なにもの
なにわ
なのか
なふだ
なまいき
なまえ
なまみ
なみだ
なめらか
なめる
なやむ
ならう
ならび
ならぶ
なれる
なわとび
なわばり
にあう
にいがた
にうけ
におい
にかい
にがて
にきび
にくしみ
にくまん
にげる
にさんかたんそ
にしき
にせもの
にちじょう
にちようび
にっか
にっき
にっけい
にっこう
にっさん
にっしょく
にっすう
にっせき
にってい
になう
にほん
にまめ
にもつ
にやり
にゅういん
にりんしゃ
にわとり
にんい
にんか
にんき
にんげん
にんしき
にんずう
にんそう
にんたい
にんち
にんてい
にんにく
にんぷ
にんまり
にんむ
にんめい
にんよう
ぬいくぎ
ぬかす
ぬぐいとる
ぬぐう
ぬくもり
ぬすむ
ぬまえび
ぬめり
ぬらす
ぬんちゃく
ねあげ
ねいき
ねいる
ねいろ
ねぐせ
ねくたい
ねくら
ねこぜ
ねこむ
ねさげ
ねすごす
ねそべる
ねだん
ねつい
ねっしん
ねつぞう
ねったいぎょ
ねぶそく
ねふだ
ねぼう
ねほりはほり
ねまき
ねまわし
ねみみ
ねむい
ねむたい
ねもと
ねらう
ねわざ
ねんいり
ねんおし
ねんかん
ねんきん
ねんぐ
ねんざ
ねんし
ねんちゃく
ねんど
ねんぴ
ねんぶつ
ねんまつ
ねんりょう
ねんれい
のいず
のおづま
のがす
のきなみ
のこぎり
のこす
のこる
のせる
のぞく
のぞむ
のたまう
のちほど
のっく
のばす
のはら
のべる
のぼる
のみもの
のやま
のらいぬ
のらねこ
のりもの
のりゆき
のれん
のんき
ばあい
はあく
ばあさん
ばいか
ばいく
はいけん
はいご
はいしん
はいすい
はいせん
はいそう
はいち
ばいばい
はいれつ
はえる
はおる
はかい
ばかり
はかる
はくしゅ
はけん
はこぶ
はさみ
はさん
はしご
ばしょ
はしる
はせる
ぱそこん
はそん
はたん
はちみつ
はつおん
はっかく
はづき
はっきり
はっくつ
はっけん
はっこう
はっさん
はっしん
はったつ
はっちゅう
はってん
はっぴょう
はっぽう
はなす
はなび
はにかむ
はぶらし
はみがき
はむかう
はめつ
はやい
はやし
はらう
はろうぃん
はわい
はんい
はんえい
はんおん
はんかく
はんきょう
ばんぐみ
はんこ
はんしゃ
はんすう
はんだん
ぱんち
ぱんつ
はんてい
はんとし
はんのう
はんぱ
はんぶん
はんぺん
はんぼうき
はんめい
はんらん
はんろん
ひいき
ひうん
ひえる
ひかく
ひかり
ひかる
ひかん
ひくい
ひけつ
ひこうき
ひこく
ひさい
ひさしぶり
ひさん
びじゅつかん
ひしょ
ひそか
ひそむ
ひたむき
ひだり
ひたる
ひつぎ
ひっこし
ひっし
ひつじゅひん
ひっす
ひつぜん
ぴったり
ぴっちり
ひつよう
ひてい
ひとごみ
ひなまつり
ひなん
ひねる
ひはん
ひびく
ひひょう
ひほう
ひまわり
ひまん
ひみつ
ひめい
ひめじし
ひやけ
ひやす
ひよう
びょうき
ひらがな
ひらく
ひりつ
ひりょう
ひるま
ひるやすみ
ひれい
ひろい
ひろう
ひろき
ひろゆき
ひんかく
ひんけつ
ひんこん
ひんしゅ
ひんそう
ぴんち
ひんぱん
びんぼう
ふあん
ふいうち
ふうけい
ふうせん
ぷうたろう
ふうとう
ふうふ
ふえる
ふおん
ふかい
ふきん
ふくざつ
ふくぶくろ
ふこう
ふさい
ふしぎ
ふじみ
ふすま
ふせい
ふせぐ
ふそく
ぶたにく
ふたん
ふちょう
ふつう
ふつか
ふっかつ
ふっき
ふっこく
ぶどう
ふとる
ふとん
ふのう
ふはい
ふひょう
ふへん
ふまん
ふみん
ふめつ
ふめん
ふよう
ふりこ
ふりる
ふるい
ふんいき
ぶんがく
ぶんぐ
ふんしつ
ぶんせき
ふんそう
ぶんぽう
へいあん
へいおん
へいがい
へいき
へいげん
へいこう
へいさ
へいしゃ
へいせつ
へいそ
へいたく
へいてん
へいねつ
へいわ
へきが
へこむ
べにいろ
べにしょうが
へらす
へんかん
べんきょう
べんごし
へんさい
へんたい
べんり
ほあん
ほいく
ぼうぎょ
ほうこく
ほうそう
ほうほう
ほうもん
ほうりつ
ほえる
ほおん
ほかん
ほきょう
ぼきん
ほくろ
ほけつ
ほけん
ほこう
ほこる
ほしい
ほしつ
ほしゅ
ほしょう
ほせい
ほそい
ほそく
ほたて
ほたる
ぽちぶくろ
ほっきょく
ほっさ
ほったん
ほとんど
ほめる
ほんい
ほんき
ほんけ
ほんしつ
ほんやく
まいにち
まかい
まかせる
まがる
まける
まこと
まさつ
まじめ
ますく
まぜる
まつり
まとめ
まなぶ
まぬけ
まねく
まほう
まもる
まゆげ
まよう
まろやか
まわす
まわり
まわる
まんが
まんきつ
まんぞく
まんなか
みいら
みうち
みえる
みがく
みかた
みかん
みけん
みこん
みじかい
みすい
みすえる
みせる
みっか
みつかる
みつける
みてい
みとめる
みなと
みなみかさい
みねらる
みのう
みのがす
みほん
みもと
みやげ
みらい
みりょく
みわく
みんか
みんぞく
むいか
むえき
むえん
むかい
むかう
むかえ
むかし
むぎちゃ
むける
むげん
むさぼる
むしあつい
むしば
むじゅん
むしろ
むすう
むすこ
むすぶ
むすめ
むせる
むせん
むちゅう
むなしい
むのう
むやみ
むよう
むらさき
むりょう
むろん
めいあん
めいうん
めいえん
めいかく
めいきょく
めいさい
めいし
めいそう
めいぶつ
めいれい
めいわく
めぐまれる
めざす
めした
めずらしい
めだつ
めまい
めやす
めんきょ
めんせき
めんどう
もうしあげる
もうどうけん
もえる
もくし
もくてき
もくようび
もちろん
もどる
もらう
もんく
もんだい
やおや
やける
やさい
やさしい
やすい
やすたろう
やすみ
やせる
やそう
やたい
やちん
やっと
やっぱり
やぶる
やめる
ややこしい
やよい
やわらかい
ゆうき
ゆうびんきょく
ゆうべ
ゆうめい
ゆけつ
ゆしゅつ
ゆせん
ゆそう
ゆたか
ゆちゃく
ゆでる
ゆにゅう
ゆびわ
ゆらい
ゆれる
ようい
ようか
ようきゅう
ようじ
ようす
ようちえん
よかぜ
よかん
よきん
よくせい
よくぼう
よけい
よごれる
よさん
よしゅう
よそう
よそく
よっか
よてい
よどがわく
よねつ
よやく
よゆう
よろこぶ
よろしい
らいう
らくがき
らくご
らくさつ
らくだ
らしんばん
らせん
らぞく
らたい
らっか
られつ
りえき
りかい
りきさく
りきせつ
りくぐん
りくつ
りけん
りこう
りせい
りそう
りそく
りてん
りねん
りゆう
りゅうがく
りよう
りょうり
りょかん
りょくちゃ
りょこう
りりく
りれき
りろん
りんご
るいけい
るいさい
るいじ
るいせき
るすばん
るりがわら
れいかん
れいぎ
れいせい
れいぞうこ
れいとう
れいぼう
れきし
れきだい
れんあい
れんけい
れんこん
れんさい
れんしゅう
れんぞく
れんらく
ろうか
ろうご
ろうじん
ろうそく
ろくが
ろこつ
ろじうら
ろしゅつ
ろせん
ろてん
ろめん
ろれつ
ろんぎ
ろんぱ
ろんぶん
ろんり
わかす
わかめ
わかやま
わかれる
わしつ
わじまし
わすれもの
わらう
われる`.split("\n");

// node_modules/@scure/bip39/esm/wordlists/korean.js
var wordlist6 = `가격
가끔
가난
가능
가득
가르침
가뭄
가방
가상
가슴
가운데
가을
가이드
가입
가장
가정
가족
가죽
각오
각자
간격
간부
간섭
간장
간접
간판
갈등
갈비
갈색
갈증
감각
감기
감소
감수성
감자
감정
갑자기
강남
강당
강도
강력히
강변
강북
강사
강수량
강아지
강원도
강의
강제
강조
같이
개구리
개나리
개방
개별
개선
개성
개인
객관적
거실
거액
거울
거짓
거품
걱정
건강
건물
건설
건조
건축
걸음
검사
검토
게시판
게임
겨울
견해
결과
결국
결론
결석
결승
결심
결정
결혼
경계
경고
경기
경력
경복궁
경비
경상도
경영
경우
경쟁
경제
경주
경찰
경치
경향
경험
계곡
계단
계란
계산
계속
계약
계절
계층
계획
고객
고구려
고궁
고급
고등학생
고무신
고민
고양이
고장
고전
고집
고춧가루
고통
고향
곡식
골목
골짜기
골프
공간
공개
공격
공군
공급
공기
공동
공무원
공부
공사
공식
공업
공연
공원
공장
공짜
공책
공통
공포
공항
공휴일
과목
과일
과장
과정
과학
관객
관계
관광
관념
관람
관련
관리
관습
관심
관점
관찰
광경
광고
광장
광주
괴로움
굉장히
교과서
교문
교복
교실
교양
교육
교장
교직
교통
교환
교훈
구경
구름
구멍
구별
구분
구석
구성
구속
구역
구입
구청
구체적
국가
국기
국내
국립
국물
국민
국수
국어
국왕
국적
국제
국회
군대
군사
군인
궁극적
권리
권위
권투
귀국
귀신
규정
규칙
균형
그날
그냥
그늘
그러나
그룹
그릇
그림
그제서야
그토록
극복
극히
근거
근교
근래
근로
근무
근본
근원
근육
근처
글씨
글자
금강산
금고
금년
금메달
금액
금연
금요일
금지
긍정적
기간
기관
기념
기능
기독교
기둥
기록
기름
기법
기본
기분
기쁨
기숙사
기술
기억
기업
기온
기운
기원
기적
기준
기침
기혼
기획
긴급
긴장
길이
김밥
김치
김포공항
깍두기
깜빡
깨달음
깨소금
껍질
꼭대기
꽃잎
나들이
나란히
나머지
나물
나침반
나흘
낙엽
난방
날개
날씨
날짜
남녀
남대문
남매
남산
남자
남편
남학생
낭비
낱말
내년
내용
내일
냄비
냄새
냇물
냉동
냉면
냉방
냉장고
넥타이
넷째
노동
노란색
노력
노인
녹음
녹차
녹화
논리
논문
논쟁
놀이
농구
농담
농민
농부
농업
농장
농촌
높이
눈동자
눈물
눈썹
뉴욕
느낌
늑대
능동적
능력
다방
다양성
다음
다이어트
다행
단계
단골
단독
단맛
단순
단어
단위
단점
단체
단추
단편
단풍
달걀
달러
달력
달리
닭고기
담당
담배
담요
담임
답변
답장
당근
당분간
당연히
당장
대규모
대낮
대단히
대답
대도시
대략
대량
대륙
대문
대부분
대신
대응
대장
대전
대접
대중
대책
대출
대충
대통령
대학
대한민국
대합실
대형
덩어리
데이트
도대체
도덕
도둑
도망
도서관
도심
도움
도입
도자기
도저히
도전
도중
도착
독감
독립
독서
독일
독창적
동화책
뒷모습
뒷산
딸아이
마누라
마늘
마당
마라톤
마련
마무리
마사지
마약
마요네즈
마을
마음
마이크
마중
마지막
마찬가지
마찰
마흔
막걸리
막내
막상
만남
만두
만세
만약
만일
만점
만족
만화
많이
말기
말씀
말투
맘대로
망원경
매년
매달
매력
매번
매스컴
매일
매장
맥주
먹이
먼저
먼지
멀리
메일
며느리
며칠
면담
멸치
명단
명령
명예
명의
명절
명칭
명함
모금
모니터
모델
모든
모범
모습
모양
모임
모조리
모집
모퉁이
목걸이
목록
목사
목소리
목숨
목적
목표
몰래
몸매
몸무게
몸살
몸속
몸짓
몸통
몹시
무관심
무궁화
무더위
무덤
무릎
무슨
무엇
무역
무용
무조건
무지개
무척
문구
문득
문법
문서
문제
문학
문화
물가
물건
물결
물고기
물론
물리학
물음
물질
물체
미국
미디어
미사일
미술
미역
미용실
미움
미인
미팅
미혼
민간
민족
민주
믿음
밀가루
밀리미터
밑바닥
바가지
바구니
바나나
바늘
바닥
바닷가
바람
바이러스
바탕
박물관
박사
박수
반대
반드시
반말
반발
반성
반응
반장
반죽
반지
반찬
받침
발가락
발걸음
발견
발달
발레
발목
발바닥
발생
발음
발자국
발전
발톱
발표
밤하늘
밥그릇
밥맛
밥상
밥솥
방금
방면
방문
방바닥
방법
방송
방식
방안
방울
방지
방학
방해
방향
배경
배꼽
배달
배드민턴
백두산
백색
백성
백인
백제
백화점
버릇
버섯
버튼
번개
번역
번지
번호
벌금
벌레
벌써
범위
범인
범죄
법률
법원
법적
법칙
베이징
벨트
변경
변동
변명
변신
변호사
변화
별도
별명
별일
병실
병아리
병원
보관
보너스
보라색
보람
보름
보상
보안
보자기
보장
보전
보존
보통
보편적
보험
복도
복사
복숭아
복습
볶음
본격적
본래
본부
본사
본성
본인
본질
볼펜
봉사
봉지
봉투
부근
부끄러움
부담
부동산
부문
부분
부산
부상
부엌
부인
부작용
부장
부정
부족
부지런히
부친
부탁
부품
부회장
북부
북한
분노
분량
분리
분명
분석
분야
분위기
분필
분홍색
불고기
불과
불교
불꽃
불만
불법
불빛
불안
불이익
불행
브랜드
비극
비난
비닐
비둘기
비디오
비로소
비만
비명
비밀
비바람
비빔밥
비상
비용
비율
비중
비타민
비판
빌딩
빗물
빗방울
빗줄기
빛깔
빨간색
빨래
빨리
사건
사계절
사나이
사냥
사람
사랑
사립
사모님
사물
사방
사상
사생활
사설
사슴
사실
사업
사용
사월
사장
사전
사진
사촌
사춘기
사탕
사투리
사흘
산길
산부인과
산업
산책
살림
살인
살짝
삼계탕
삼국
삼십
삼월
삼촌
상관
상금
상대
상류
상반기
상상
상식
상업
상인
상자
상점
상처
상추
상태
상표
상품
상황
새벽
색깔
색연필
생각
생명
생물
생방송
생산
생선
생신
생일
생활
서랍
서른
서명
서민
서비스
서양
서울
서적
서점
서쪽
서클
석사
석유
선거
선물
선배
선생
선수
선원
선장
선전
선택
선풍기
설거지
설날
설렁탕
설명
설문
설사
설악산
설치
설탕
섭씨
성공
성당
성명
성별
성인
성장
성적
성질
성함
세금
세미나
세상
세월
세종대왕
세탁
센터
센티미터
셋째
소규모
소극적
소금
소나기
소년
소득
소망
소문
소설
소속
소아과
소용
소원
소음
소중히
소지품
소질
소풍
소형
속담
속도
속옷
손가락
손길
손녀
손님
손등
손목
손뼉
손실
손질
손톱
손해
솔직히
솜씨
송아지
송이
송편
쇠고기
쇼핑
수건
수년
수단
수돗물
수동적
수면
수명
수박
수상
수석
수술
수시로
수업
수염
수영
수입
수준
수집
수출
수컷
수필
수학
수험생
수화기
숙녀
숙소
숙제
순간
순서
순수
순식간
순위
숟가락
술병
술집
숫자
스님
스물
스스로
스승
스웨터
스위치
스케이트
스튜디오
스트레스
스포츠
슬쩍
슬픔
습관
습기
승객
승리
승부
승용차
승진
시각
시간
시골
시금치
시나리오
시댁
시리즈
시멘트
시민
시부모
시선
시설
시스템
시아버지
시어머니
시월
시인
시일
시작
시장
시절
시점
시중
시즌
시집
시청
시합
시험
식구
식기
식당
식량
식료품
식물
식빵
식사
식생활
식초
식탁
식품
신고
신규
신념
신문
신발
신비
신사
신세
신용
신제품
신청
신체
신화
실감
실내
실력
실례
실망
실수
실습
실시
실장
실정
실질적
실천
실체
실컷
실태
실패
실험
실현
심리
심부름
심사
심장
심정
심판
쌍둥이
씨름
씨앗
아가씨
아나운서
아드님
아들
아쉬움
아스팔트
아시아
아울러
아저씨
아줌마
아직
아침
아파트
아프리카
아픔
아홉
아흔
악기
악몽
악수
안개
안경
안과
안내
안녕
안동
안방
안부
안주
알루미늄
알코올
암시
암컷
압력
앞날
앞문
애인
애정
액수
앨범
야간
야단
야옹
약간
약국
약속
약수
약점
약품
약혼녀
양념
양력
양말
양배추
양주
양파
어둠
어려움
어른
어젯밤
어쨌든
어쩌다가
어쩐지
언니
언덕
언론
언어
얼굴
얼른
얼음
얼핏
엄마
업무
업종
업체
엉덩이
엉망
엉터리
엊그제
에너지
에어컨
엔진
여건
여고생
여관
여군
여권
여대생
여덟
여동생
여든
여론
여름
여섯
여성
여왕
여인
여전히
여직원
여학생
여행
역사
역시
역할
연결
연구
연극
연기
연락
연설
연세
연속
연습
연애
연예인
연인
연장
연주
연출
연필
연합
연휴
열기
열매
열쇠
열심히
열정
열차
열흘
염려
엽서
영국
영남
영상
영양
영역
영웅
영원히
영하
영향
영혼
영화
옆구리
옆방
옆집
예감
예금
예방
예산
예상
예선
예술
예습
예식장
예약
예전
예절
예정
예컨대
옛날
오늘
오락
오랫동안
오렌지
오로지
오른발
오븐
오십
오염
오월
오전
오직
오징어
오페라
오피스텔
오히려
옥상
옥수수
온갖
온라인
온몸
온종일
온통
올가을
올림픽
올해
옷차림
와이셔츠
와인
완성
완전
왕비
왕자
왜냐하면
왠지
외갓집
외국
외로움
외삼촌
외출
외침
외할머니
왼발
왼손
왼쪽
요금
요일
요즘
요청
용기
용서
용어
우산
우선
우승
우연히
우정
우체국
우편
운동
운명
운반
운전
운행
울산
울음
움직임
웃어른
웃음
워낙
원고
원래
원서
원숭이
원인
원장
원피스
월급
월드컵
월세
월요일
웨이터
위반
위법
위성
위원
위험
위협
윗사람
유난히
유럽
유명
유물
유산
유적
유치원
유학
유행
유형
육군
육상
육십
육체
은행
음력
음료
음반
음성
음식
음악
음주
의견
의논
의문
의복
의식
의심
의외로
의욕
의원
의학
이것
이곳
이념
이놈
이달
이대로
이동
이렇게
이력서
이론적
이름
이민
이발소
이별
이불
이빨
이상
이성
이슬
이야기
이용
이웃
이월
이윽고
이익
이전
이중
이튿날
이틀
이혼
인간
인격
인공
인구
인근
인기
인도
인류
인물
인생
인쇄
인연
인원
인재
인종
인천
인체
인터넷
인하
인형
일곱
일기
일단
일대
일등
일반
일본
일부
일상
일생
일손
일요일
일월
일정
일종
일주일
일찍
일체
일치
일행
일회용
임금
임무
입대
입력
입맛
입사
입술
입시
입원
입장
입학
자가용
자격
자극
자동
자랑
자부심
자식
자신
자연
자원
자율
자전거
자정
자존심
자판
작가
작년
작성
작업
작용
작은딸
작품
잔디
잔뜩
잔치
잘못
잠깐
잠수함
잠시
잠옷
잠자리
잡지
장관
장군
장기간
장래
장례
장르
장마
장면
장모
장미
장비
장사
장소
장식
장애인
장인
장점
장차
장학금
재능
재빨리
재산
재생
재작년
재정
재채기
재판
재학
재활용
저것
저고리
저곳
저녁
저런
저렇게
저번
저울
저절로
저축
적극
적당히
적성
적용
적응
전개
전공
전기
전달
전라도
전망
전문
전반
전부
전세
전시
전용
전자
전쟁
전주
전철
전체
전통
전혀
전후
절대
절망
절반
절약
절차
점검
점수
점심
점원
점점
점차
접근
접시
접촉
젓가락
정거장
정도
정류장
정리
정말
정면
정문
정반대
정보
정부
정비
정상
정성
정오
정원
정장
정지
정치
정확히
제공
제과점
제대로
제목
제발
제법
제삿날
제안
제일
제작
제주도
제출
제품
제한
조각
조건
조금
조깅
조명
조미료
조상
조선
조용히
조절
조정
조직
존댓말
존재
졸업
졸음
종교
종로
종류
종소리
종업원
종종
종합
좌석
죄인
주관적
주름
주말
주머니
주먹
주문
주민
주방
주변
주식
주인
주일
주장
주전자
주택
준비
줄거리
줄기
줄무늬
중간
중계방송
중국
중년
중단
중독
중반
중부
중세
중소기업
중순
중앙
중요
중학교
즉석
즉시
즐거움
증가
증거
증권
증상
증세
지각
지갑
지경
지극히
지금
지급
지능
지름길
지리산
지방
지붕
지식
지역
지우개
지원
지적
지점
지진
지출
직선
직업
직원
직장
진급
진동
진로
진료
진리
진짜
진찰
진출
진통
진행
질문
질병
질서
짐작
집단
집안
집중
짜증
찌꺼기
차남
차라리
차량
차림
차별
차선
차츰
착각
찬물
찬성
참가
참기름
참새
참석
참여
참외
참조
찻잔
창가
창고
창구
창문
창밖
창작
창조
채널
채점
책가방
책방
책상
책임
챔피언
처벌
처음
천국
천둥
천장
천재
천천히
철도
철저히
철학
첫날
첫째
청년
청바지
청소
청춘
체계
체력
체온
체육
체중
체험
초등학생
초반
초밥
초상화
초순
초여름
초원
초저녁
초점
초청
초콜릿
촛불
총각
총리
총장
촬영
최근
최상
최선
최신
최악
최종
추석
추억
추진
추천
추측
축구
축소
축제
축하
출근
출발
출산
출신
출연
출입
출장
출판
충격
충고
충돌
충분히
충청도
취업
취직
취향
치약
친구
친척
칠십
칠월
칠판
침대
침묵
침실
칫솔
칭찬
카메라
카운터
칼국수
캐릭터
캠퍼스
캠페인
커튼
컨디션
컬러
컴퓨터
코끼리
코미디
콘서트
콜라
콤플렉스
콩나물
쾌감
쿠데타
크림
큰길
큰딸
큰소리
큰아들
큰어머니
큰일
큰절
클래식
클럽
킬로
타입
타자기
탁구
탁자
탄생
태권도
태양
태풍
택시
탤런트
터널
터미널
테니스
테스트
테이블
텔레비전
토론
토마토
토요일
통계
통과
통로
통신
통역
통일
통장
통제
통증
통합
통화
퇴근
퇴원
퇴직금
튀김
트럭
특급
특별
특성
특수
특징
특히
튼튼히
티셔츠
파란색
파일
파출소
판결
판단
판매
판사
팔십
팔월
팝송
패션
팩스
팩시밀리
팬티
퍼센트
페인트
편견
편의
편지
편히
평가
평균
평생
평소
평양
평일
평화
포스터
포인트
포장
포함
표면
표정
표준
표현
품목
품질
풍경
풍속
풍습
프랑스
프린터
플라스틱
피곤
피망
피아노
필름
필수
필요
필자
필통
핑계
하느님
하늘
하드웨어
하룻밤
하반기
하숙집
하순
하여튼
하지만
하천
하품
하필
학과
학교
학급
학기
학년
학력
학번
학부모
학비
학생
학술
학습
학용품
학원
학위
학자
학점
한계
한글
한꺼번에
한낮
한눈
한동안
한때
한라산
한마디
한문
한번
한복
한식
한여름
한쪽
할머니
할아버지
할인
함께
함부로
합격
합리적
항공
항구
항상
항의
해결
해군
해답
해당
해물
해석
해설
해수욕장
해안
핵심
핸드백
햄버거
햇볕
햇살
행동
행복
행사
행운
행위
향기
향상
향수
허락
허용
헬기
현관
현금
현대
현상
현실
현장
현재
현지
혈액
협력
형부
형사
형수
형식
형제
형태
형편
혜택
호기심
호남
호랑이
호박
호텔
호흡
혹시
홀로
홈페이지
홍보
홍수
홍차
화면
화분
화살
화요일
화장
화학
확보
확인
확장
확정
환갑
환경
환영
환율
환자
활기
활동
활발히
활용
활짝
회견
회관
회복
회색
회원
회장
회전
횟수
횡단보도
효율적
후반
후춧가루
훈련
훨씬
휴식
휴일
흉내
흐름
흑백
흑인
흔적
흔히
흥미
흥분
희곡
희망
희생
흰색
힘껏`.split("\n");

// node_modules/@scure/bip39/esm/wordlists/portuguese.js
var wordlist7 = `abacate
abaixo
abalar
abater
abduzir
abelha
aberto
abismo
abotoar
abranger
abreviar
abrigar
abrupto
absinto
absoluto
absurdo
abutre
acabado
acalmar
acampar
acanhar
acaso
aceitar
acelerar
acenar
acervo
acessar
acetona
achatar
acidez
acima
acionado
acirrar
aclamar
aclive
acolhida
acomodar
acoplar
acordar
acumular
acusador
adaptar
adega
adentro
adepto
adequar
aderente
adesivo
adeus
adiante
aditivo
adjetivo
adjunto
admirar
adorar
adquirir
adubo
adverso
advogado
aeronave
afastar
aferir
afetivo
afinador
afivelar
aflito
afluente
afrontar
agachar
agarrar
agasalho
agenciar
agilizar
agiota
agitado
agora
agradar
agreste
agrupar
aguardar
agulha
ajoelhar
ajudar
ajustar
alameda
alarme
alastrar
alavanca
albergue
albino
alcatra
aldeia
alecrim
alegria
alertar
alface
alfinete
algum
alheio
aliar
alicate
alienar
alinhar
aliviar
almofada
alocar
alpiste
alterar
altitude
alucinar
alugar
aluno
alusivo
alvo
amaciar
amador
amarelo
amassar
ambas
ambiente
ameixa
amenizar
amido
amistoso
amizade
amolador
amontoar
amoroso
amostra
amparar
ampliar
ampola
anagrama
analisar
anarquia
anatomia
andaime
anel
anexo
angular
animar
anjo
anomalia
anotado
ansioso
anterior
anuidade
anunciar
anzol
apagador
apalpar
apanhado
apego
apelido
apertada
apesar
apetite
apito
aplauso
aplicada
apoio
apontar
aposta
aprendiz
aprovar
aquecer
arame
aranha
arara
arcada
ardente
areia
arejar
arenito
aresta
argiloso
argola
arma
arquivo
arraial
arrebate
arriscar
arroba
arrumar
arsenal
arterial
artigo
arvoredo
asfaltar
asilado
aspirar
assador
assinar
assoalho
assunto
astral
atacado
atadura
atalho
atarefar
atear
atender
aterro
ateu
atingir
atirador
ativo
atoleiro
atracar
atrevido
atriz
atual
atum
auditor
aumentar
aura
aurora
autismo
autoria
autuar
avaliar
avante
avaria
avental
avesso
aviador
avisar
avulso
axila
azarar
azedo
azeite
azulejo
babar
babosa
bacalhau
bacharel
bacia
bagagem
baiano
bailar
baioneta
bairro
baixista
bajular
baleia
baliza
balsa
banal
bandeira
banho
banir
banquete
barato
barbado
baronesa
barraca
barulho
baseado
bastante
batata
batedor
batida
batom
batucar
baunilha
beber
beijo
beirada
beisebol
beldade
beleza
belga
beliscar
bendito
bengala
benzer
berimbau
berlinda
berro
besouro
bexiga
bezerro
bico
bicudo
bienal
bifocal
bifurcar
bigorna
bilhete
bimestre
bimotor
biologia
biombo
biosfera
bipolar
birrento
biscoito
bisneto
bispo
bissexto
bitola
bizarro
blindado
bloco
bloquear
boato
bobagem
bocado
bocejo
bochecha
boicotar
bolada
boletim
bolha
bolo
bombeiro
bonde
boneco
bonita
borbulha
borda
boreal
borracha
bovino
boxeador
branco
brasa
braveza
breu
briga
brilho
brincar
broa
brochura
bronzear
broto
bruxo
bucha
budismo
bufar
bule
buraco
busca
busto
buzina
cabana
cabelo
cabide
cabo
cabrito
cacau
cacetada
cachorro
cacique
cadastro
cadeado
cafezal
caiaque
caipira
caixote
cajado
caju
calafrio
calcular
caldeira
calibrar
calmante
calota
camada
cambista
camisa
camomila
campanha
camuflar
canavial
cancelar
caneta
canguru
canhoto
canivete
canoa
cansado
cantar
canudo
capacho
capela
capinar
capotar
capricho
captador
capuz
caracol
carbono
cardeal
careca
carimbar
carneiro
carpete
carreira
cartaz
carvalho
casaco
casca
casebre
castelo
casulo
catarata
cativar
caule
causador
cautelar
cavalo
caverna
cebola
cedilha
cegonha
celebrar
celular
cenoura
censo
centeio
cercar
cerrado
certeiro
cerveja
cetim
cevada
chacota
chaleira
chamado
chapada
charme
chatice
chave
chefe
chegada
cheiro
cheque
chicote
chifre
chinelo
chocalho
chover
chumbo
chutar
chuva
cicatriz
ciclone
cidade
cidreira
ciente
cigana
cimento
cinto
cinza
ciranda
circuito
cirurgia
citar
clareza
clero
clicar
clone
clube
coado
coagir
cobaia
cobertor
cobrar
cocada
coelho
coentro
coeso
cogumelo
coibir
coifa
coiote
colar
coleira
colher
colidir
colmeia
colono
coluna
comando
combinar
comentar
comitiva
comover
complexo
comum
concha
condor
conectar
confuso
congelar
conhecer
conjugar
consumir
contrato
convite
cooperar
copeiro
copiador
copo
coquetel
coragem
cordial
corneta
coronha
corporal
correio
cortejo
coruja
corvo
cosseno
costela
cotonete
couro
couve
covil
cozinha
cratera
cravo
creche
credor
creme
crer
crespo
criada
criminal
crioulo
crise
criticar
crosta
crua
cruzeiro
cubano
cueca
cuidado
cujo
culatra
culminar
culpar
cultura
cumprir
cunhado
cupido
curativo
curral
cursar
curto
cuspir
custear
cutelo
damasco
datar
debater
debitar
deboche
debulhar
decalque
decimal
declive
decote
decretar
dedal
dedicado
deduzir
defesa
defumar
degelo
degrau
degustar
deitado
deixar
delator
delegado
delinear
delonga
demanda
demitir
demolido
dentista
depenado
depilar
depois
depressa
depurar
deriva
derramar
desafio
desbotar
descanso
desenho
desfiado
desgaste
desigual
deslize
desmamar
desova
despesa
destaque
desviar
detalhar
detentor
detonar
detrito
deusa
dever
devido
devotado
dezena
diagrama
dialeto
didata
difuso
digitar
dilatado
diluente
diminuir
dinastia
dinheiro
diocese
direto
discreta
disfarce
disparo
disquete
dissipar
distante
ditador
diurno
diverso
divisor
divulgar
dizer
dobrador
dolorido
domador
dominado
donativo
donzela
dormente
dorsal
dosagem
dourado
doutor
drenagem
drible
drogaria
duelar
duende
dueto
duplo
duquesa
durante
duvidoso
eclodir
ecoar
ecologia
edificar
edital
educado
efeito
efetivar
ejetar
elaborar
eleger
eleitor
elenco
elevador
eliminar
elogiar
embargo
embolado
embrulho
embutido
emenda
emergir
emissor
empatia
empenho
empinado
empolgar
emprego
empurrar
emulador
encaixe
encenado
enchente
encontro
endeusar
endossar
enfaixar
enfeite
enfim
engajado
engenho
englobar
engomado
engraxar
enguia
enjoar
enlatar
enquanto
enraizar
enrolado
enrugar
ensaio
enseada
ensino
ensopado
entanto
enteado
entidade
entortar
entrada
entulho
envergar
enviado
envolver
enxame
enxerto
enxofre
enxuto
epiderme
equipar
ereto
erguido
errata
erva
ervilha
esbanjar
esbelto
escama
escola
escrita
escuta
esfinge
esfolar
esfregar
esfumado
esgrima
esmalte
espanto
espelho
espiga
esponja
espreita
espumar
esquerda
estaca
esteira
esticar
estofado
estrela
estudo
esvaziar
etanol
etiqueta
euforia
europeu
evacuar
evaporar
evasivo
eventual
evidente
evoluir
exagero
exalar
examinar
exato
exausto
excesso
excitar
exclamar
executar
exemplo
exibir
exigente
exonerar
expandir
expelir
expirar
explanar
exposto
expresso
expulsar
externo
extinto
extrato
fabricar
fabuloso
faceta
facial
fada
fadiga
faixa
falar
falta
familiar
fandango
fanfarra
fantoche
fardado
farelo
farinha
farofa
farpa
fartura
fatia
fator
favorita
faxina
fazenda
fechado
feijoada
feirante
felino
feminino
fenda
feno
fera
feriado
ferrugem
ferver
festejar
fetal
feudal
fiapo
fibrose
ficar
ficheiro
figurado
fileira
filho
filme
filtrar
firmeza
fisgada
fissura
fita
fivela
fixador
fixo
flacidez
flamingo
flanela
flechada
flora
flutuar
fluxo
focal
focinho
fofocar
fogo
foguete
foice
folgado
folheto
forjar
formiga
forno
forte
fosco
fossa
fragata
fralda
frango
frasco
fraterno
freira
frente
fretar
frieza
friso
fritura
fronha
frustrar
fruteira
fugir
fulano
fuligem
fundar
fungo
funil
furador
furioso
futebol
gabarito
gabinete
gado
gaiato
gaiola
gaivota
galega
galho
galinha
galocha
ganhar
garagem
garfo
gargalo
garimpo
garoupa
garrafa
gasoduto
gasto
gata
gatilho
gaveta
gazela
gelado
geleia
gelo
gemada
gemer
gemido
generoso
gengiva
genial
genoma
genro
geologia
gerador
germinar
gesso
gestor
ginasta
gincana
gingado
girafa
girino
glacial
glicose
global
glorioso
goela
goiaba
golfe
golpear
gordura
gorjeta
gorro
gostoso
goteira
governar
gracejo
gradual
grafite
gralha
grampo
granada
gratuito
graveto
graxa
grego
grelhar
greve
grilo
grisalho
gritaria
grosso
grotesco
grudado
grunhido
gruta
guache
guarani
guaxinim
guerrear
guiar
guincho
guisado
gula
guloso
guru
habitar
harmonia
haste
haver
hectare
herdar
heresia
hesitar
hiato
hibernar
hidratar
hiena
hino
hipismo
hipnose
hipoteca
hoje
holofote
homem
honesto
honrado
hormonal
hospedar
humorado
iate
ideia
idoso
ignorado
igreja
iguana
ileso
ilha
iludido
iluminar
ilustrar
imagem
imediato
imenso
imersivo
iminente
imitador
imortal
impacto
impedir
implante
impor
imprensa
impune
imunizar
inalador
inapto
inativo
incenso
inchar
incidir
incluir
incolor
indeciso
indireto
indutor
ineficaz
inerente
infantil
infestar
infinito
inflamar
informal
infrator
ingerir
inibido
inicial
inimigo
injetar
inocente
inodoro
inovador
inox
inquieto
inscrito
inseto
insistir
inspetor
instalar
insulto
intacto
integral
intimar
intocado
intriga
invasor
inverno
invicto
invocar
iogurte
iraniano
ironizar
irreal
irritado
isca
isento
isolado
isqueiro
italiano
janeiro
jangada
janta
jararaca
jardim
jarro
jasmim
jato
javali
jazida
jejum
joaninha
joelhada
jogador
joia
jornal
jorrar
jovem
juba
judeu
judoca
juiz
julgador
julho
jurado
jurista
juro
justa
labareda
laboral
lacre
lactante
ladrilho
lagarta
lagoa
laje
lamber
lamentar
laminar
lampejo
lanche
lapidar
lapso
laranja
lareira
largura
lasanha
lastro
lateral
latido
lavanda
lavoura
lavrador
laxante
lazer
lealdade
lebre
legado
legendar
legista
leigo
leiloar
leitura
lembrete
leme
lenhador
lentilha
leoa
lesma
leste
letivo
letreiro
levar
leveza
levitar
liberal
libido
liderar
ligar
ligeiro
limitar
limoeiro
limpador
linda
linear
linhagem
liquidez
listagem
lisura
litoral
livro
lixa
lixeira
locador
locutor
lojista
lombo
lona
longe
lontra
lorde
lotado
loteria
loucura
lousa
louvar
luar
lucidez
lucro
luneta
lustre
lutador
luva
macaco
macete
machado
macio
madeira
madrinha
magnata
magreza
maior
mais
malandro
malha
malote
maluco
mamilo
mamoeiro
mamute
manada
mancha
mandato
manequim
manhoso
manivela
manobrar
mansa
manter
manusear
mapeado
maquinar
marcador
maresia
marfim
margem
marinho
marmita
maroto
marquise
marreco
martelo
marujo
mascote
masmorra
massagem
mastigar
matagal
materno
matinal
matutar
maxilar
medalha
medida
medusa
megafone
meiga
melancia
melhor
membro
memorial
menino
menos
mensagem
mental
merecer
mergulho
mesada
mesclar
mesmo
mesquita
mestre
metade
meteoro
metragem
mexer
mexicano
micro
migalha
migrar
milagre
milenar
milhar
mimado
minerar
minhoca
ministro
minoria
miolo
mirante
mirtilo
misturar
mocidade
moderno
modular
moeda
moer
moinho
moita
moldura
moleza
molho
molinete
molusco
montanha
moqueca
morango
morcego
mordomo
morena
mosaico
mosquete
mostarda
motel
motim
moto
motriz
muda
muito
mulata
mulher
multar
mundial
munido
muralha
murcho
muscular
museu
musical
nacional
nadador
naja
namoro
narina
narrado
nascer
nativa
natureza
navalha
navegar
navio
neblina
nebuloso
negativa
negociar
negrito
nervoso
neta
neural
nevasca
nevoeiro
ninar
ninho
nitidez
nivelar
nobreza
noite
noiva
nomear
nominal
nordeste
nortear
notar
noticiar
noturno
novelo
novilho
novo
nublado
nudez
numeral
nupcial
nutrir
nuvem
obcecado
obedecer
objetivo
obrigado
obscuro
obstetra
obter
obturar
ocidente
ocioso
ocorrer
oculista
ocupado
ofegante
ofensiva
oferenda
oficina
ofuscado
ogiva
olaria
oleoso
olhar
oliveira
ombro
omelete
omisso
omitir
ondulado
oneroso
ontem
opcional
operador
oponente
oportuno
oposto
orar
orbitar
ordem
ordinal
orfanato
orgasmo
orgulho
oriental
origem
oriundo
orla
ortodoxo
orvalho
oscilar
ossada
osso
ostentar
otimismo
ousadia
outono
outubro
ouvido
ovelha
ovular
oxidar
oxigenar
pacato
paciente
pacote
pactuar
padaria
padrinho
pagar
pagode
painel
pairar
paisagem
palavra
palestra
palheta
palito
palmada
palpitar
pancada
panela
panfleto
panqueca
pantanal
papagaio
papelada
papiro
parafina
parcial
pardal
parede
partida
pasmo
passado
pastel
patamar
patente
patinar
patrono
paulada
pausar
peculiar
pedalar
pedestre
pediatra
pedra
pegada
peitoral
peixe
pele
pelicano
penca
pendurar
peneira
penhasco
pensador
pente
perceber
perfeito
pergunta
perito
permitir
perna
perplexo
persiana
pertence
peruca
pescado
pesquisa
pessoa
petiscar
piada
picado
piedade
pigmento
pilastra
pilhado
pilotar
pimenta
pincel
pinguim
pinha
pinote
pintar
pioneiro
pipoca
piquete
piranha
pires
pirueta
piscar
pistola
pitanga
pivete
planta
plaqueta
platina
plebeu
plumagem
pluvial
pneu
poda
poeira
poetisa
polegada
policiar
poluente
polvilho
pomar
pomba
ponderar
pontaria
populoso
porta
possuir
postal
pote
poupar
pouso
povoar
praia
prancha
prato
praxe
prece
predador
prefeito
premiar
prensar
preparar
presilha
pretexto
prevenir
prezar
primata
princesa
prisma
privado
processo
produto
profeta
proibido
projeto
prometer
propagar
prosa
protetor
provador
publicar
pudim
pular
pulmonar
pulseira
punhal
punir
pupilo
pureza
puxador
quadra
quantia
quarto
quase
quebrar
queda
queijo
quente
querido
quimono
quina
quiosque
rabanada
rabisco
rachar
racionar
radial
raiar
rainha
raio
raiva
rajada
ralado
ramal
ranger
ranhura
rapadura
rapel
rapidez
raposa
raquete
raridade
rasante
rascunho
rasgar
raspador
rasteira
rasurar
ratazana
ratoeira
realeza
reanimar
reaver
rebaixar
rebelde
rebolar
recado
recente
recheio
recibo
recordar
recrutar
recuar
rede
redimir
redonda
reduzida
reenvio
refinar
refletir
refogar
refresco
refugiar
regalia
regime
regra
reinado
reitor
rejeitar
relativo
remador
remendo
remorso
renovado
reparo
repelir
repleto
repolho
represa
repudiar
requerer
resenha
resfriar
resgatar
residir
resolver
respeito
ressaca
restante
resumir
retalho
reter
retirar
retomada
retratar
revelar
revisor
revolta
riacho
rica
rigidez
rigoroso
rimar
ringue
risada
risco
risonho
robalo
rochedo
rodada
rodeio
rodovia
roedor
roleta
romano
roncar
rosado
roseira
rosto
rota
roteiro
rotina
rotular
rouco
roupa
roxo
rubro
rugido
rugoso
ruivo
rumo
rupestre
russo
sabor
saciar
sacola
sacudir
sadio
safira
saga
sagrada
saibro
salada
saleiro
salgado
saliva
salpicar
salsicha
saltar
salvador
sambar
samurai
sanar
sanfona
sangue
sanidade
sapato
sarda
sargento
sarjeta
saturar
saudade
saxofone
sazonal
secar
secular
seda
sedento
sediado
sedoso
sedutor
segmento
segredo
segundo
seiva
seleto
selvagem
semanal
semente
senador
senhor
sensual
sentado
separado
sereia
seringa
serra
servo
setembro
setor
sigilo
silhueta
silicone
simetria
simpatia
simular
sinal
sincero
singular
sinopse
sintonia
sirene
siri
situado
soberano
sobra
socorro
sogro
soja
solda
soletrar
solteiro
sombrio
sonata
sondar
sonegar
sonhador
sono
soprano
soquete
sorrir
sorteio
sossego
sotaque
soterrar
sovado
sozinho
suavizar
subida
submerso
subsolo
subtrair
sucata
sucesso
suco
sudeste
sufixo
sugador
sugerir
sujeito
sulfato
sumir
suor
superior
suplicar
suposto
suprimir
surdina
surfista
surpresa
surreal
surtir
suspiro
sustento
tabela
tablete
tabuada
tacho
tagarela
talher
talo
talvez
tamanho
tamborim
tampa
tangente
tanto
tapar
tapioca
tardio
tarefa
tarja
tarraxa
tatuagem
taurino
taxativo
taxista
teatral
tecer
tecido
teclado
tedioso
teia
teimar
telefone
telhado
tempero
tenente
tensor
tentar
termal
terno
terreno
tese
tesoura
testado
teto
textura
texugo
tiara
tigela
tijolo
timbrar
timidez
tingido
tinteiro
tiragem
titular
toalha
tocha
tolerar
tolice
tomada
tomilho
tonel
tontura
topete
tora
torcido
torneio
torque
torrada
torto
tostar
touca
toupeira
toxina
trabalho
tracejar
tradutor
trafegar
trajeto
trama
trancar
trapo
traseiro
tratador
travar
treino
tremer
trepidar
trevo
triagem
tribo
triciclo
tridente
trilogia
trindade
triplo
triturar
triunfal
trocar
trombeta
trova
trunfo
truque
tubular
tucano
tudo
tulipa
tupi
turbo
turma
turquesa
tutelar
tutorial
uivar
umbigo
unha
unidade
uniforme
urologia
urso
urtiga
urubu
usado
usina
usufruir
vacina
vadiar
vagaroso
vaidoso
vala
valente
validade
valores
vantagem
vaqueiro
varanda
vareta
varrer
vascular
vasilha
vassoura
vazar
vazio
veado
vedar
vegetar
veicular
veleiro
velhice
veludo
vencedor
vendaval
venerar
ventre
verbal
verdade
vereador
vergonha
vermelho
verniz
versar
vertente
vespa
vestido
vetorial
viaduto
viagem
viajar
viatura
vibrador
videira
vidraria
viela
viga
vigente
vigiar
vigorar
vilarejo
vinco
vinheta
vinil
violeta
virada
virtude
visitar
visto
vitral
viveiro
vizinho
voador
voar
vogal
volante
voleibol
voltagem
volumoso
vontade
vulto
vuvuzela
xadrez
xarope
xeque
xeretar
xerife
xingar
zangado
zarpar
zebu
zelador
zombar
zoologia
zumbido`.split("\n");

// node_modules/@scure/bip39/esm/wordlists/simplified-chinese.js
var wordlist8 = `的
一
是
在
不
了
有
和
人
这
中
大
为
上
个
国
我
以
要
他
时
来
用
们
生
到
作
地
于
出
就
分
对
成
会
可
主
发
年
动
同
工
也
能
下
过
子
说
产
种
面
而
方
后
多
定
行
学
法
所
民
得
经
十
三
之
进
着
等
部
度
家
电
力
里
如
水
化
高
自
二
理
起
小
物
现
实
加
量
都
两
体
制
机
当
使
点
从
业
本
去
把
性
好
应
开
它
合
还
因
由
其
些
然
前
外
天
政
四
日
那
社
义
事
平
形
相
全
表
间
样
与
关
各
重
新
线
内
数
正
心
反
你
明
看
原
又
么
利
比
或
但
质
气
第
向
道
命
此
变
条
只
没
结
解
问
意
建
月
公
无
系
军
很
情
者
最
立
代
想
已
通
并
提
直
题
党
程
展
五
果
料
象
员
革
位
入
常
文
总
次
品
式
活
设
及
管
特
件
长
求
老
头
基
资
边
流
路
级
少
图
山
统
接
知
较
将
组
见
计
别
她
手
角
期
根
论
运
农
指
几
九
区
强
放
决
西
被
干
做
必
战
先
回
则
任
取
据
处
队
南
给
色
光
门
即
保
治
北
造
百
规
热
领
七
海
口
东
导
器
压
志
世
金
增
争
济
阶
油
思
术
极
交
受
联
什
认
六
共
权
收
证
改
清
美
再
采
转
更
单
风
切
打
白
教
速
花
带
安
场
身
车
例
真
务
具
万
每
目
至
达
走
积
示
议
声
报
斗
完
类
八
离
华
名
确
才
科
张
信
马
节
话
米
整
空
元
况
今
集
温
传
土
许
步
群
广
石
记
需
段
研
界
拉
林
律
叫
且
究
观
越
织
装
影
算
低
持
音
众
书
布
复
容
儿
须
际
商
非
验
连
断
深
难
近
矿
千
周
委
素
技
备
半
办
青
省
列
习
响
约
支
般
史
感
劳
便
团
往
酸
历
市
克
何
除
消
构
府
称
太
准
精
值
号
率
族
维
划
选
标
写
存
候
毛
亲
快
效
斯
院
查
江
型
眼
王
按
格
养
易
置
派
层
片
始
却
专
状
育
厂
京
识
适
属
圆
包
火
住
调
满
县
局
照
参
红
细
引
听
该
铁
价
严
首
底
液
官
德
随
病
苏
失
尔
死
讲
配
女
黄
推
显
谈
罪
神
艺
呢
席
含
企
望
密
批
营
项
防
举
球
英
氧
势
告
李
台
落
木
帮
轮
破
亚
师
围
注
远
字
材
排
供
河
态
封
另
施
减
树
溶
怎
止
案
言
士
均
武
固
叶
鱼
波
视
仅
费
紧
爱
左
章
早
朝
害
续
轻
服
试
食
充
兵
源
判
护
司
足
某
练
差
致
板
田
降
黑
犯
负
击
范
继
兴
似
余
坚
曲
输
修
故
城
夫
够
送
笔
船
占
右
财
吃
富
春
职
觉
汉
画
功
巴
跟
虽
杂
飞
检
吸
助
升
阳
互
初
创
抗
考
投
坏
策
古
径
换
未
跑
留
钢
曾
端
责
站
简
述
钱
副
尽
帝
射
草
冲
承
独
令
限
阿
宣
环
双
请
超
微
让
控
州
良
轴
找
否
纪
益
依
优
顶
础
载
倒
房
突
坐
粉
敌
略
客
袁
冷
胜
绝
析
块
剂
测
丝
协
诉
念
陈
仍
罗
盐
友
洋
错
苦
夜
刑
移
频
逐
靠
混
母
短
皮
终
聚
汽
村
云
哪
既
距
卫
停
烈
央
察
烧
迅
境
若
印
洲
刻
括
激
孔
搞
甚
室
待
核
校
散
侵
吧
甲
游
久
菜
味
旧
模
湖
货
损
预
阻
毫
普
稳
乙
妈
植
息
扩
银
语
挥
酒
守
拿
序
纸
医
缺
雨
吗
针
刘
啊
急
唱
误
训
愿
审
附
获
茶
鲜
粮
斤
孩
脱
硫
肥
善
龙
演
父
渐
血
欢
械
掌
歌
沙
刚
攻
谓
盾
讨
晚
粒
乱
燃
矛
乎
杀
药
宁
鲁
贵
钟
煤
读
班
伯
香
介
迫
句
丰
培
握
兰
担
弦
蛋
沉
假
穿
执
答
乐
谁
顺
烟
缩
征
脸
喜
松
脚
困
异
免
背
星
福
买
染
井
概
慢
怕
磁
倍
祖
皇
促
静
补
评
翻
肉
践
尼
衣
宽
扬
棉
希
伤
操
垂
秋
宜
氢
套
督
振
架
亮
末
宪
庆
编
牛
触
映
雷
销
诗
座
居
抓
裂
胞
呼
娘
景
威
绿
晶
厚
盟
衡
鸡
孙
延
危
胶
屋
乡
临
陆
顾
掉
呀
灯
岁
措
束
耐
剧
玉
赵
跳
哥
季
课
凯
胡
额
款
绍
卷
齐
伟
蒸
殖
永
宗
苗
川
炉
岩
弱
零
杨
奏
沿
露
杆
探
滑
镇
饭
浓
航
怀
赶
库
夺
伊
灵
税
途
灭
赛
归
召
鼓
播
盘
裁
险
康
唯
录
菌
纯
借
糖
盖
横
符
私
努
堂
域
枪
润
幅
哈
竟
熟
虫
泽
脑
壤
碳
欧
遍
侧
寨
敢
彻
虑
斜
薄
庭
纳
弹
饲
伸
折
麦
湿
暗
荷
瓦
塞
床
筑
恶
户
访
塔
奇
透
梁
刀
旋
迹
卡
氯
遇
份
毒
泥
退
洗
摆
灰
彩
卖
耗
夏
择
忙
铜
献
硬
予
繁
圈
雪
函
亦
抽
篇
阵
阴
丁
尺
追
堆
雄
迎
泛
爸
楼
避
谋
吨
野
猪
旗
累
偏
典
馆
索
秦
脂
潮
爷
豆
忽
托
惊
塑
遗
愈
朱
替
纤
粗
倾
尚
痛
楚
谢
奋
购
磨
君
池
旁
碎
骨
监
捕
弟
暴
割
贯
殊
释
词
亡
壁
顿
宝
午
尘
闻
揭
炮
残
冬
桥
妇
警
综
招
吴
付
浮
遭
徐
您
摇
谷
赞
箱
隔
订
男
吹
园
纷
唐
败
宋
玻
巨
耕
坦
荣
闭
湾
键
凡
驻
锅
救
恩
剥
凝
碱
齿
截
炼
麻
纺
禁
废
盛
版
缓
净
睛
昌
婚
涉
筒
嘴
插
岸
朗
庄
街
藏
姑
贸
腐
奴
啦
惯
乘
伙
恢
匀
纱
扎
辩
耳
彪
臣
亿
璃
抵
脉
秀
萨
俄
网
舞
店
喷
纵
寸
汗
挂
洪
贺
闪
柬
爆
烯
津
稻
墙
软
勇
像
滚
厘
蒙
芳
肯
坡
柱
荡
腿
仪
旅
尾
轧
冰
贡
登
黎
削
钻
勒
逃
障
氨
郭
峰
币
港
伏
轨
亩
毕
擦
莫
刺
浪
秘
援
株
健
售
股
岛
甘
泡
睡
童
铸
汤
阀
休
汇
舍
牧
绕
炸
哲
磷
绩
朋
淡
尖
启
陷
柴
呈
徒
颜
泪
稍
忘
泵
蓝
拖
洞
授
镜
辛
壮
锋
贫
虚
弯
摩
泰
幼
廷
尊
窗
纲
弄
隶
疑
氏
宫
姐
震
瑞
怪
尤
琴
循
描
膜
违
夹
腰
缘
珠
穷
森
枝
竹
沟
催
绳
忆
邦
剩
幸
浆
栏
拥
牙
贮
礼
滤
钠
纹
罢
拍
咱
喊
袖
埃
勤
罚
焦
潜
伍
墨
欲
缝
姓
刊
饱
仿
奖
铝
鬼
丽
跨
默
挖
链
扫
喝
袋
炭
污
幕
诸
弧
励
梅
奶
洁
灾
舟
鉴
苯
讼
抱
毁
懂
寒
智
埔
寄
届
跃
渡
挑
丹
艰
贝
碰
拔
爹
戴
码
梦
芽
熔
赤
渔
哭
敬
颗
奔
铅
仲
虎
稀
妹
乏
珍
申
桌
遵
允
隆
螺
仓
魏
锐
晓
氮
兼
隐
碍
赫
拨
忠
肃
缸
牵
抢
博
巧
壳
兄
杜
讯
诚
碧
祥
柯
页
巡
矩
悲
灌
龄
伦
票
寻
桂
铺
圣
恐
恰
郑
趣
抬
荒
腾
贴
柔
滴
猛
阔
辆
妻
填
撤
储
签
闹
扰
紫
砂
递
戏
吊
陶
伐
喂
疗
瓶
婆
抚
臂
摸
忍
虾
蜡
邻
胸
巩
挤
偶
弃
槽
劲
乳
邓
吉
仁
烂
砖
租
乌
舰
伴
瓜
浅
丙
暂
燥
橡
柳
迷
暖
牌
秧
胆
详
簧
踏
瓷
谱
呆
宾
糊
洛
辉
愤
竞
隙
怒
粘
乃
绪
肩
籍
敏
涂
熙
皆
侦
悬
掘
享
纠
醒
狂
锁
淀
恨
牲
霸
爬
赏
逆
玩
陵
祝
秒
浙
貌
役
彼
悉
鸭
趋
凤
晨
畜
辈
秩
卵
署
梯
炎
滩
棋
驱
筛
峡
冒
啥
寿
译
浸
泉
帽
迟
硅
疆
贷
漏
稿
冠
嫩
胁
芯
牢
叛
蚀
奥
鸣
岭
羊
凭
串
塘
绘
酵
融
盆
锡
庙
筹
冻
辅
摄
袭
筋
拒
僚
旱
钾
鸟
漆
沈
眉
疏
添
棒
穗
硝
韩
逼
扭
侨
凉
挺
碗
栽
炒
杯
患
馏
劝
豪
辽
勃
鸿
旦
吏
拜
狗
埋
辊
掩
饮
搬
骂
辞
勾
扣
估
蒋
绒
雾
丈
朵
姆
拟
宇
辑
陕
雕
偿
蓄
崇
剪
倡
厅
咬
驶
薯
刷
斥
番
赋
奉
佛
浇
漫
曼
扇
钙
桃
扶
仔
返
俗
亏
腔
鞋
棱
覆
框
悄
叔
撞
骗
勘
旺
沸
孤
吐
孟
渠
屈
疾
妙
惜
仰
狠
胀
谐
抛
霉
桑
岗
嘛
衰
盗
渗
脏
赖
涌
甜
曹
阅
肌
哩
厉
烃
纬
毅
昨
伪
症
煮
叹
钉
搭
茎
笼
酷
偷
弓
锥
恒
杰
坑
鼻
翼
纶
叙
狱
逮
罐
络
棚
抑
膨
蔬
寺
骤
穆
冶
枯
册
尸
凸
绅
坯
牺
焰
轰
欣
晋
瘦
御
锭
锦
丧
旬
锻
垄
搜
扑
邀
亭
酯
迈
舒
脆
酶
闲
忧
酚
顽
羽
涨
卸
仗
陪
辟
惩
杭
姚
肚
捉
飘
漂
昆
欺
吾
郎
烷
汁
呵
饰
萧
雅
邮
迁
燕
撒
姻
赴
宴
烦
债
帐
斑
铃
旨
醇
董
饼
雏
姿
拌
傅
腹
妥
揉
贤
拆
歪
葡
胺
丢
浩
徽
昂
垫
挡
览
贪
慰
缴
汪
慌
冯
诺
姜
谊
凶
劣
诬
耀
昏
躺
盈
骑
乔
溪
丛
卢
抹
闷
咨
刮
驾
缆
悟
摘
铒
掷
颇
幻
柄
惠
惨
佳
仇
腊
窝
涤
剑
瞧
堡
泼
葱
罩
霍
捞
胎
苍
滨
俩
捅
湘
砍
霞
邵
萄
疯
淮
遂
熊
粪
烘
宿
档
戈
驳
嫂
裕
徙
箭
捐
肠
撑
晒
辨
殿
莲
摊
搅
酱
屏
疫
哀
蔡
堵
沫
皱
畅
叠
阁
莱
敲
辖
钩
痕
坝
巷
饿
祸
丘
玄
溜
曰
逻
彭
尝
卿
妨
艇
吞
韦
怨
矮
歇`.split("\n");

// node_modules/@scure/bip39/esm/wordlists/spanish.js
var wordlist9 = `ábaco
abdomen
abeja
abierto
abogado
abono
aborto
abrazo
abrir
abuelo
abuso
acabar
academia
acceso
acción
aceite
acelga
acento
aceptar
ácido
aclarar
acné
acoger
acoso
activo
acto
actriz
actuar
acudir
acuerdo
acusar
adicto
admitir
adoptar
adorno
aduana
adulto
aéreo
afectar
afición
afinar
afirmar
ágil
agitar
agonía
agosto
agotar
agregar
agrio
agua
agudo
águila
aguja
ahogo
ahorro
aire
aislar
ajedrez
ajeno
ajuste
alacrán
alambre
alarma
alba
álbum
alcalde
aldea
alegre
alejar
alerta
aleta
alfiler
alga
algodón
aliado
aliento
alivio
alma
almeja
almíbar
altar
alteza
altivo
alto
altura
alumno
alzar
amable
amante
amapola
amargo
amasar
ámbar
ámbito
ameno
amigo
amistad
amor
amparo
amplio
ancho
anciano
ancla
andar
andén
anemia
ángulo
anillo
ánimo
anís
anotar
antena
antiguo
antojo
anual
anular
anuncio
añadir
añejo
año
apagar
aparato
apetito
apio
aplicar
apodo
aporte
apoyo
aprender
aprobar
apuesta
apuro
arado
araña
arar
árbitro
árbol
arbusto
archivo
arco
arder
ardilla
arduo
área
árido
aries
armonía
arnés
aroma
arpa
arpón
arreglo
arroz
arruga
arte
artista
asa
asado
asalto
ascenso
asegurar
aseo
asesor
asiento
asilo
asistir
asno
asombro
áspero
astilla
astro
astuto
asumir
asunto
atajo
ataque
atar
atento
ateo
ático
atleta
átomo
atraer
atroz
atún
audaz
audio
auge
aula
aumento
ausente
autor
aval
avance
avaro
ave
avellana
avena
avestruz
avión
aviso
ayer
ayuda
ayuno
azafrán
azar
azote
azúcar
azufre
azul
baba
babor
bache
bahía
baile
bajar
balanza
balcón
balde
bambú
banco
banda
baño
barba
barco
barniz
barro
báscula
bastón
basura
batalla
batería
batir
batuta
baúl
bazar
bebé
bebida
bello
besar
beso
bestia
bicho
bien
bingo
blanco
bloque
blusa
boa
bobina
bobo
boca
bocina
boda
bodega
boina
bola
bolero
bolsa
bomba
bondad
bonito
bono
bonsái
borde
borrar
bosque
bote
botín
bóveda
bozal
bravo
brazo
brecha
breve
brillo
brinco
brisa
broca
broma
bronce
brote
bruja
brusco
bruto
buceo
bucle
bueno
buey
bufanda
bufón
búho
buitre
bulto
burbuja
burla
burro
buscar
butaca
buzón
caballo
cabeza
cabina
cabra
cacao
cadáver
cadena
caer
café
caída
caimán
caja
cajón
cal
calamar
calcio
caldo
calidad
calle
calma
calor
calvo
cama
cambio
camello
camino
campo
cáncer
candil
canela
canguro
canica
canto
caña
cañón
caoba
caos
capaz
capitán
capote
captar
capucha
cara
carbón
cárcel
careta
carga
cariño
carne
carpeta
carro
carta
casa
casco
casero
caspa
castor
catorce
catre
caudal
causa
cazo
cebolla
ceder
cedro
celda
célebre
celoso
célula
cemento
ceniza
centro
cerca
cerdo
cereza
cero
cerrar
certeza
césped
cetro
chacal
chaleco
champú
chancla
chapa
charla
chico
chiste
chivo
choque
choza
chuleta
chupar
ciclón
ciego
cielo
cien
cierto
cifra
cigarro
cima
cinco
cine
cinta
ciprés
circo
ciruela
cisne
cita
ciudad
clamor
clan
claro
clase
clave
cliente
clima
clínica
cobre
cocción
cochino
cocina
coco
código
codo
cofre
coger
cohete
cojín
cojo
cola
colcha
colegio
colgar
colina
collar
colmo
columna
combate
comer
comida
cómodo
compra
conde
conejo
conga
conocer
consejo
contar
copa
copia
corazón
corbata
corcho
cordón
corona
correr
coser
cosmos
costa
cráneo
cráter
crear
crecer
creído
crema
cría
crimen
cripta
crisis
cromo
crónica
croqueta
crudo
cruz
cuadro
cuarto
cuatro
cubo
cubrir
cuchara
cuello
cuento
cuerda
cuesta
cueva
cuidar
culebra
culpa
culto
cumbre
cumplir
cuna
cuneta
cuota
cupón
cúpula
curar
curioso
curso
curva
cutis
dama
danza
dar
dardo
dátil
deber
débil
década
decir
dedo
defensa
definir
dejar
delfín
delgado
delito
demora
denso
dental
deporte
derecho
derrota
desayuno
deseo
desfile
desnudo
destino
desvío
detalle
detener
deuda
día
diablo
diadema
diamante
diana
diario
dibujo
dictar
diente
dieta
diez
difícil
digno
dilema
diluir
dinero
directo
dirigir
disco
diseño
disfraz
diva
divino
doble
doce
dolor
domingo
don
donar
dorado
dormir
dorso
dos
dosis
dragón
droga
ducha
duda
duelo
dueño
dulce
dúo
duque
durar
dureza
duro
ébano
ebrio
echar
eco
ecuador
edad
edición
edificio
editor
educar
efecto
eficaz
eje
ejemplo
elefante
elegir
elemento
elevar
elipse
élite
elixir
elogio
eludir
embudo
emitir
emoción
empate
empeño
empleo
empresa
enano
encargo
enchufe
encía
enemigo
enero
enfado
enfermo
engaño
enigma
enlace
enorme
enredo
ensayo
enseñar
entero
entrar
envase
envío
época
equipo
erizo
escala
escena
escolar
escribir
escudo
esencia
esfera
esfuerzo
espada
espejo
espía
esposa
espuma
esquí
estar
este
estilo
estufa
etapa
eterno
ética
etnia
evadir
evaluar
evento
evitar
exacto
examen
exceso
excusa
exento
exigir
exilio
existir
éxito
experto
explicar
exponer
extremo
fábrica
fábula
fachada
fácil
factor
faena
faja
falda
fallo
falso
faltar
fama
familia
famoso
faraón
farmacia
farol
farsa
fase
fatiga
fauna
favor
fax
febrero
fecha
feliz
feo
feria
feroz
fértil
fervor
festín
fiable
fianza
fiar
fibra
ficción
ficha
fideo
fiebre
fiel
fiera
fiesta
figura
fijar
fijo
fila
filete
filial
filtro
fin
finca
fingir
finito
firma
flaco
flauta
flecha
flor
flota
fluir
flujo
flúor
fobia
foca
fogata
fogón
folio
folleto
fondo
forma
forro
fortuna
forzar
fosa
foto
fracaso
frágil
franja
frase
fraude
freír
freno
fresa
frío
frito
fruta
fuego
fuente
fuerza
fuga
fumar
función
funda
furgón
furia
fusil
fútbol
futuro
gacela
gafas
gaita
gajo
gala
galería
gallo
gamba
ganar
gancho
ganga
ganso
garaje
garza
gasolina
gastar
gato
gavilán
gemelo
gemir
gen
género
genio
gente
geranio
gerente
germen
gesto
gigante
gimnasio
girar
giro
glaciar
globo
gloria
gol
golfo
goloso
golpe
goma
gordo
gorila
gorra
gota
goteo
gozar
grada
gráfico
grano
grasa
gratis
grave
grieta
grillo
gripe
gris
grito
grosor
grúa
grueso
grumo
grupo
guante
guapo
guardia
guerra
guía
guiño
guion
guiso
guitarra
gusano
gustar
haber
hábil
hablar
hacer
hacha
hada
hallar
hamaca
harina
haz
hazaña
hebilla
hebra
hecho
helado
helio
hembra
herir
hermano
héroe
hervir
hielo
hierro
hígado
higiene
hijo
himno
historia
hocico
hogar
hoguera
hoja
hombre
hongo
honor
honra
hora
hormiga
horno
hostil
hoyo
hueco
huelga
huerta
hueso
huevo
huida
huir
humano
húmedo
humilde
humo
hundir
huracán
hurto
icono
ideal
idioma
ídolo
iglesia
iglú
igual
ilegal
ilusión
imagen
imán
imitar
impar
imperio
imponer
impulso
incapaz
índice
inerte
infiel
informe
ingenio
inicio
inmenso
inmune
innato
insecto
instante
interés
íntimo
intuir
inútil
invierno
ira
iris
ironía
isla
islote
jabalí
jabón
jamón
jarabe
jardín
jarra
jaula
jazmín
jefe
jeringa
jinete
jornada
joroba
joven
joya
juerga
jueves
juez
jugador
jugo
juguete
juicio
junco
jungla
junio
juntar
júpiter
jurar
justo
juvenil
juzgar
kilo
koala
labio
lacio
lacra
lado
ladrón
lagarto
lágrima
laguna
laico
lamer
lámina
lámpara
lana
lancha
langosta
lanza
lápiz
largo
larva
lástima
lata
látex
latir
laurel
lavar
lazo
leal
lección
leche
lector
leer
legión
legumbre
lejano
lengua
lento
leña
león
leopardo
lesión
letal
letra
leve
leyenda
libertad
libro
licor
líder
lidiar
lienzo
liga
ligero
lima
límite
limón
limpio
lince
lindo
línea
lingote
lino
linterna
líquido
liso
lista
litera
litio
litro
llaga
llama
llanto
llave
llegar
llenar
llevar
llorar
llover
lluvia
lobo
loción
loco
locura
lógica
logro
lombriz
lomo
lonja
lote
lucha
lucir
lugar
lujo
luna
lunes
lupa
lustro
luto
luz
maceta
macho
madera
madre
maduro
maestro
mafia
magia
mago
maíz
maldad
maleta
malla
malo
mamá
mambo
mamut
manco
mando
manejar
manga
maniquí
manjar
mano
manso
manta
mañana
mapa
máquina
mar
marco
marea
marfil
margen
marido
mármol
marrón
martes
marzo
masa
máscara
masivo
matar
materia
matiz
matriz
máximo
mayor
mazorca
mecha
medalla
medio
médula
mejilla
mejor
melena
melón
memoria
menor
mensaje
mente
menú
mercado
merengue
mérito
mes
mesón
meta
meter
método
metro
mezcla
miedo
miel
miembro
miga
mil
milagro
militar
millón
mimo
mina
minero
mínimo
minuto
miope
mirar
misa
miseria
misil
mismo
mitad
mito
mochila
moción
moda
modelo
moho
mojar
molde
moler
molino
momento
momia
monarca
moneda
monja
monto
moño
morada
morder
moreno
morir
morro
morsa
mortal
mosca
mostrar
motivo
mover
móvil
mozo
mucho
mudar
mueble
muela
muerte
muestra
mugre
mujer
mula
muleta
multa
mundo
muñeca
mural
muro
músculo
museo
musgo
música
muslo
nácar
nación
nadar
naipe
naranja
nariz
narrar
nasal
natal
nativo
natural
náusea
naval
nave
navidad
necio
néctar
negar
negocio
negro
neón
nervio
neto
neutro
nevar
nevera
nicho
nido
niebla
nieto
niñez
niño
nítido
nivel
nobleza
noche
nómina
noria
norma
norte
nota
noticia
novato
novela
novio
nube
nuca
núcleo
nudillo
nudo
nuera
nueve
nuez
nulo
número
nutria
oasis
obeso
obispo
objeto
obra
obrero
observar
obtener
obvio
oca
ocaso
océano
ochenta
ocho
ocio
ocre
octavo
octubre
oculto
ocupar
ocurrir
odiar
odio
odisea
oeste
ofensa
oferta
oficio
ofrecer
ogro
oído
oír
ojo
ola
oleada
olfato
olivo
olla
olmo
olor
olvido
ombligo
onda
onza
opaco
opción
ópera
opinar
oponer
optar
óptica
opuesto
oración
orador
oral
órbita
orca
orden
oreja
órgano
orgía
orgullo
oriente
origen
orilla
oro
orquesta
oruga
osadía
oscuro
osezno
oso
ostra
otoño
otro
oveja
óvulo
óxido
oxígeno
oyente
ozono
pacto
padre
paella
página
pago
país
pájaro
palabra
palco
paleta
pálido
palma
paloma
palpar
pan
panal
pánico
pantera
pañuelo
papá
papel
papilla
paquete
parar
parcela
pared
parir
paro
párpado
parque
párrafo
parte
pasar
paseo
pasión
paso
pasta
pata
patio
patria
pausa
pauta
pavo
payaso
peatón
pecado
pecera
pecho
pedal
pedir
pegar
peine
pelar
peldaño
pelea
peligro
pellejo
pelo
peluca
pena
pensar
peñón
peón
peor
pepino
pequeño
pera
percha
perder
pereza
perfil
perico
perla
permiso
perro
persona
pesa
pesca
pésimo
pestaña
pétalo
petróleo
pez
pezuña
picar
pichón
pie
piedra
pierna
pieza
pijama
pilar
piloto
pimienta
pino
pintor
pinza
piña
piojo
pipa
pirata
pisar
piscina
piso
pista
pitón
pizca
placa
plan
plata
playa
plaza
pleito
pleno
plomo
pluma
plural
pobre
poco
poder
podio
poema
poesía
poeta
polen
policía
pollo
polvo
pomada
pomelo
pomo
pompa
poner
porción
portal
posada
poseer
posible
poste
potencia
potro
pozo
prado
precoz
pregunta
premio
prensa
preso
previo
primo
príncipe
prisión
privar
proa
probar
proceso
producto
proeza
profesor
programa
prole
promesa
pronto
propio
próximo
prueba
público
puchero
pudor
pueblo
puerta
puesto
pulga
pulir
pulmón
pulpo
pulso
puma
punto
puñal
puño
pupa
pupila
puré
quedar
queja
quemar
querer
queso
quieto
química
quince
quitar
rábano
rabia
rabo
ración
radical
raíz
rama
rampa
rancho
rango
rapaz
rápido
rapto
rasgo
raspa
rato
rayo
raza
razón
reacción
realidad
rebaño
rebote
recaer
receta
rechazo
recoger
recreo
recto
recurso
red
redondo
reducir
reflejo
reforma
refrán
refugio
regalo
regir
regla
regreso
rehén
reino
reír
reja
relato
relevo
relieve
relleno
reloj
remar
remedio
remo
rencor
rendir
renta
reparto
repetir
reposo
reptil
res
rescate
resina
respeto
resto
resumen
retiro
retorno
retrato
reunir
revés
revista
rey
rezar
rico
riego
rienda
riesgo
rifa
rígido
rigor
rincón
riñón
río
riqueza
risa
ritmo
rito
rizo
roble
roce
rociar
rodar
rodeo
rodilla
roer
rojizo
rojo
romero
romper
ron
ronco
ronda
ropa
ropero
rosa
rosca
rostro
rotar
rubí
rubor
rudo
rueda
rugir
ruido
ruina
ruleta
rulo
rumbo
rumor
ruptura
ruta
rutina
sábado
saber
sabio
sable
sacar
sagaz
sagrado
sala
saldo
salero
salir
salmón
salón
salsa
salto
salud
salvar
samba
sanción
sandía
sanear
sangre
sanidad
sano
santo
sapo
saque
sardina
sartén
sastre
satán
sauna
saxofón
sección
seco
secreto
secta
sed
seguir
seis
sello
selva
semana
semilla
senda
sensor
señal
señor
separar
sepia
sequía
ser
serie
sermón
servir
sesenta
sesión
seta
setenta
severo
sexo
sexto
sidra
siesta
siete
siglo
signo
sílaba
silbar
silencio
silla
símbolo
simio
sirena
sistema
sitio
situar
sobre
socio
sodio
sol
solapa
soldado
soledad
sólido
soltar
solución
sombra
sondeo
sonido
sonoro
sonrisa
sopa
soplar
soporte
sordo
sorpresa
sorteo
sostén
sótano
suave
subir
suceso
sudor
suegra
suelo
sueño
suerte
sufrir
sujeto
sultán
sumar
superar
suplir
suponer
supremo
sur
surco
sureño
surgir
susto
sutil
tabaco
tabique
tabla
tabú
taco
tacto
tajo
talar
talco
talento
talla
talón
tamaño
tambor
tango
tanque
tapa
tapete
tapia
tapón
taquilla
tarde
tarea
tarifa
tarjeta
tarot
tarro
tarta
tatuaje
tauro
taza
tazón
teatro
techo
tecla
técnica
tejado
tejer
tejido
tela
teléfono
tema
temor
templo
tenaz
tender
tener
tenis
tenso
teoría
terapia
terco
término
ternura
terror
tesis
tesoro
testigo
tetera
texto
tez
tibio
tiburón
tiempo
tienda
tierra
tieso
tigre
tijera
tilde
timbre
tímido
timo
tinta
tío
típico
tipo
tira
tirón
titán
títere
título
tiza
toalla
tobillo
tocar
tocino
todo
toga
toldo
tomar
tono
tonto
topar
tope
toque
tórax
torero
tormenta
torneo
toro
torpedo
torre
torso
tortuga
tos
tosco
toser
tóxico
trabajo
tractor
traer
tráfico
trago
traje
tramo
trance
trato
trauma
trazar
trébol
tregua
treinta
tren
trepar
tres
tribu
trigo
tripa
triste
triunfo
trofeo
trompa
tronco
tropa
trote
trozo
truco
trueno
trufa
tubería
tubo
tuerto
tumba
tumor
túnel
túnica
turbina
turismo
turno
tutor
ubicar
úlcera
umbral
unidad
unir
universo
uno
untar
uña
urbano
urbe
urgente
urna
usar
usuario
útil
utopía
uva
vaca
vacío
vacuna
vagar
vago
vaina
vajilla
vale
válido
valle
valor
válvula
vampiro
vara
variar
varón
vaso
vecino
vector
vehículo
veinte
vejez
vela
velero
veloz
vena
vencer
venda
veneno
vengar
venir
venta
venus
ver
verano
verbo
verde
vereda
verja
verso
verter
vía
viaje
vibrar
vicio
víctima
vida
vídeo
vidrio
viejo
viernes
vigor
vil
villa
vinagre
vino
viñedo
violín
viral
virgo
virtud
visor
víspera
vista
vitamina
viudo
vivaz
vivero
vivir
vivo
volcán
volumen
volver
voraz
votar
voto
voz
vuelo
vulgar
yacer
yate
yegua
yema
yerno
yeso
yodo
yoga
yogur
zafiro
zanja
zapato
zarza
zona
zorro
zumo
zurdo`.split("\n");

// node_modules/@scure/bip39/esm/wordlists/traditional-chinese.js
var wordlist10 = `的
一
是
在
不
了
有
和
人
這
中
大
為
上
個
國
我
以
要
他
時
來
用
們
生
到
作
地
於
出
就
分
對
成
會
可
主
發
年
動
同
工
也
能
下
過
子
說
產
種
面
而
方
後
多
定
行
學
法
所
民
得
經
十
三
之
進
著
等
部
度
家
電
力
裡
如
水
化
高
自
二
理
起
小
物
現
實
加
量
都
兩
體
制
機
當
使
點
從
業
本
去
把
性
好
應
開
它
合
還
因
由
其
些
然
前
外
天
政
四
日
那
社
義
事
平
形
相
全
表
間
樣
與
關
各
重
新
線
內
數
正
心
反
你
明
看
原
又
麼
利
比
或
但
質
氣
第
向
道
命
此
變
條
只
沒
結
解
問
意
建
月
公
無
系
軍
很
情
者
最
立
代
想
已
通
並
提
直
題
黨
程
展
五
果
料
象
員
革
位
入
常
文
總
次
品
式
活
設
及
管
特
件
長
求
老
頭
基
資
邊
流
路
級
少
圖
山
統
接
知
較
將
組
見
計
別
她
手
角
期
根
論
運
農
指
幾
九
區
強
放
決
西
被
幹
做
必
戰
先
回
則
任
取
據
處
隊
南
給
色
光
門
即
保
治
北
造
百
規
熱
領
七
海
口
東
導
器
壓
志
世
金
增
爭
濟
階
油
思
術
極
交
受
聯
什
認
六
共
權
收
證
改
清
美
再
採
轉
更
單
風
切
打
白
教
速
花
帶
安
場
身
車
例
真
務
具
萬
每
目
至
達
走
積
示
議
聲
報
鬥
完
類
八
離
華
名
確
才
科
張
信
馬
節
話
米
整
空
元
況
今
集
溫
傳
土
許
步
群
廣
石
記
需
段
研
界
拉
林
律
叫
且
究
觀
越
織
裝
影
算
低
持
音
眾
書
布
复
容
兒
須
際
商
非
驗
連
斷
深
難
近
礦
千
週
委
素
技
備
半
辦
青
省
列
習
響
約
支
般
史
感
勞
便
團
往
酸
歷
市
克
何
除
消
構
府
稱
太
準
精
值
號
率
族
維
劃
選
標
寫
存
候
毛
親
快
效
斯
院
查
江
型
眼
王
按
格
養
易
置
派
層
片
始
卻
專
狀
育
廠
京
識
適
屬
圓
包
火
住
調
滿
縣
局
照
參
紅
細
引
聽
該
鐵
價
嚴
首
底
液
官
德
隨
病
蘇
失
爾
死
講
配
女
黃
推
顯
談
罪
神
藝
呢
席
含
企
望
密
批
營
項
防
舉
球
英
氧
勢
告
李
台
落
木
幫
輪
破
亞
師
圍
注
遠
字
材
排
供
河
態
封
另
施
減
樹
溶
怎
止
案
言
士
均
武
固
葉
魚
波
視
僅
費
緊
愛
左
章
早
朝
害
續
輕
服
試
食
充
兵
源
判
護
司
足
某
練
差
致
板
田
降
黑
犯
負
擊
范
繼
興
似
餘
堅
曲
輸
修
故
城
夫
夠
送
筆
船
佔
右
財
吃
富
春
職
覺
漢
畫
功
巴
跟
雖
雜
飛
檢
吸
助
昇
陽
互
初
創
抗
考
投
壞
策
古
徑
換
未
跑
留
鋼
曾
端
責
站
簡
述
錢
副
盡
帝
射
草
衝
承
獨
令
限
阿
宣
環
雙
請
超
微
讓
控
州
良
軸
找
否
紀
益
依
優
頂
礎
載
倒
房
突
坐
粉
敵
略
客
袁
冷
勝
絕
析
塊
劑
測
絲
協
訴
念
陳
仍
羅
鹽
友
洋
錯
苦
夜
刑
移
頻
逐
靠
混
母
短
皮
終
聚
汽
村
雲
哪
既
距
衛
停
烈
央
察
燒
迅
境
若
印
洲
刻
括
激
孔
搞
甚
室
待
核
校
散
侵
吧
甲
遊
久
菜
味
舊
模
湖
貨
損
預
阻
毫
普
穩
乙
媽
植
息
擴
銀
語
揮
酒
守
拿
序
紙
醫
缺
雨
嗎
針
劉
啊
急
唱
誤
訓
願
審
附
獲
茶
鮮
糧
斤
孩
脫
硫
肥
善
龍
演
父
漸
血
歡
械
掌
歌
沙
剛
攻
謂
盾
討
晚
粒
亂
燃
矛
乎
殺
藥
寧
魯
貴
鐘
煤
讀
班
伯
香
介
迫
句
豐
培
握
蘭
擔
弦
蛋
沉
假
穿
執
答
樂
誰
順
煙
縮
徵
臉
喜
松
腳
困
異
免
背
星
福
買
染
井
概
慢
怕
磁
倍
祖
皇
促
靜
補
評
翻
肉
踐
尼
衣
寬
揚
棉
希
傷
操
垂
秋
宜
氫
套
督
振
架
亮
末
憲
慶
編
牛
觸
映
雷
銷
詩
座
居
抓
裂
胞
呼
娘
景
威
綠
晶
厚
盟
衡
雞
孫
延
危
膠
屋
鄉
臨
陸
顧
掉
呀
燈
歲
措
束
耐
劇
玉
趙
跳
哥
季
課
凱
胡
額
款
紹
卷
齊
偉
蒸
殖
永
宗
苗
川
爐
岩
弱
零
楊
奏
沿
露
桿
探
滑
鎮
飯
濃
航
懷
趕
庫
奪
伊
靈
稅
途
滅
賽
歸
召
鼓
播
盤
裁
險
康
唯
錄
菌
純
借
糖
蓋
橫
符
私
努
堂
域
槍
潤
幅
哈
竟
熟
蟲
澤
腦
壤
碳
歐
遍
側
寨
敢
徹
慮
斜
薄
庭
納
彈
飼
伸
折
麥
濕
暗
荷
瓦
塞
床
築
惡
戶
訪
塔
奇
透
梁
刀
旋
跡
卡
氯
遇
份
毒
泥
退
洗
擺
灰
彩
賣
耗
夏
擇
忙
銅
獻
硬
予
繁
圈
雪
函
亦
抽
篇
陣
陰
丁
尺
追
堆
雄
迎
泛
爸
樓
避
謀
噸
野
豬
旗
累
偏
典
館
索
秦
脂
潮
爺
豆
忽
托
驚
塑
遺
愈
朱
替
纖
粗
傾
尚
痛
楚
謝
奮
購
磨
君
池
旁
碎
骨
監
捕
弟
暴
割
貫
殊
釋
詞
亡
壁
頓
寶
午
塵
聞
揭
炮
殘
冬
橋
婦
警
綜
招
吳
付
浮
遭
徐
您
搖
谷
贊
箱
隔
訂
男
吹
園
紛
唐
敗
宋
玻
巨
耕
坦
榮
閉
灣
鍵
凡
駐
鍋
救
恩
剝
凝
鹼
齒
截
煉
麻
紡
禁
廢
盛
版
緩
淨
睛
昌
婚
涉
筒
嘴
插
岸
朗
莊
街
藏
姑
貿
腐
奴
啦
慣
乘
夥
恢
勻
紗
扎
辯
耳
彪
臣
億
璃
抵
脈
秀
薩
俄
網
舞
店
噴
縱
寸
汗
掛
洪
賀
閃
柬
爆
烯
津
稻
牆
軟
勇
像
滾
厘
蒙
芳
肯
坡
柱
盪
腿
儀
旅
尾
軋
冰
貢
登
黎
削
鑽
勒
逃
障
氨
郭
峰
幣
港
伏
軌
畝
畢
擦
莫
刺
浪
秘
援
株
健
售
股
島
甘
泡
睡
童
鑄
湯
閥
休
匯
舍
牧
繞
炸
哲
磷
績
朋
淡
尖
啟
陷
柴
呈
徒
顏
淚
稍
忘
泵
藍
拖
洞
授
鏡
辛
壯
鋒
貧
虛
彎
摩
泰
幼
廷
尊
窗
綱
弄
隸
疑
氏
宮
姐
震
瑞
怪
尤
琴
循
描
膜
違
夾
腰
緣
珠
窮
森
枝
竹
溝
催
繩
憶
邦
剩
幸
漿
欄
擁
牙
貯
禮
濾
鈉
紋
罷
拍
咱
喊
袖
埃
勤
罰
焦
潛
伍
墨
欲
縫
姓
刊
飽
仿
獎
鋁
鬼
麗
跨
默
挖
鏈
掃
喝
袋
炭
污
幕
諸
弧
勵
梅
奶
潔
災
舟
鑑
苯
訟
抱
毀
懂
寒
智
埔
寄
屆
躍
渡
挑
丹
艱
貝
碰
拔
爹
戴
碼
夢
芽
熔
赤
漁
哭
敬
顆
奔
鉛
仲
虎
稀
妹
乏
珍
申
桌
遵
允
隆
螺
倉
魏
銳
曉
氮
兼
隱
礙
赫
撥
忠
肅
缸
牽
搶
博
巧
殼
兄
杜
訊
誠
碧
祥
柯
頁
巡
矩
悲
灌
齡
倫
票
尋
桂
鋪
聖
恐
恰
鄭
趣
抬
荒
騰
貼
柔
滴
猛
闊
輛
妻
填
撤
儲
簽
鬧
擾
紫
砂
遞
戲
吊
陶
伐
餵
療
瓶
婆
撫
臂
摸
忍
蝦
蠟
鄰
胸
鞏
擠
偶
棄
槽
勁
乳
鄧
吉
仁
爛
磚
租
烏
艦
伴
瓜
淺
丙
暫
燥
橡
柳
迷
暖
牌
秧
膽
詳
簧
踏
瓷
譜
呆
賓
糊
洛
輝
憤
競
隙
怒
粘
乃
緒
肩
籍
敏
塗
熙
皆
偵
懸
掘
享
糾
醒
狂
鎖
淀
恨
牲
霸
爬
賞
逆
玩
陵
祝
秒
浙
貌
役
彼
悉
鴨
趨
鳳
晨
畜
輩
秩
卵
署
梯
炎
灘
棋
驅
篩
峽
冒
啥
壽
譯
浸
泉
帽
遲
矽
疆
貸
漏
稿
冠
嫩
脅
芯
牢
叛
蝕
奧
鳴
嶺
羊
憑
串
塘
繪
酵
融
盆
錫
廟
籌
凍
輔
攝
襲
筋
拒
僚
旱
鉀
鳥
漆
沈
眉
疏
添
棒
穗
硝
韓
逼
扭
僑
涼
挺
碗
栽
炒
杯
患
餾
勸
豪
遼
勃
鴻
旦
吏
拜
狗
埋
輥
掩
飲
搬
罵
辭
勾
扣
估
蔣
絨
霧
丈
朵
姆
擬
宇
輯
陝
雕
償
蓄
崇
剪
倡
廳
咬
駛
薯
刷
斥
番
賦
奉
佛
澆
漫
曼
扇
鈣
桃
扶
仔
返
俗
虧
腔
鞋
棱
覆
框
悄
叔
撞
騙
勘
旺
沸
孤
吐
孟
渠
屈
疾
妙
惜
仰
狠
脹
諧
拋
黴
桑
崗
嘛
衰
盜
滲
臟
賴
湧
甜
曹
閱
肌
哩
厲
烴
緯
毅
昨
偽
症
煮
嘆
釘
搭
莖
籠
酷
偷
弓
錐
恆
傑
坑
鼻
翼
綸
敘
獄
逮
罐
絡
棚
抑
膨
蔬
寺
驟
穆
冶
枯
冊
屍
凸
紳
坯
犧
焰
轟
欣
晉
瘦
禦
錠
錦
喪
旬
鍛
壟
搜
撲
邀
亭
酯
邁
舒
脆
酶
閒
憂
酚
頑
羽
漲
卸
仗
陪
闢
懲
杭
姚
肚
捉
飄
漂
昆
欺
吾
郎
烷
汁
呵
飾
蕭
雅
郵
遷
燕
撒
姻
赴
宴
煩
債
帳
斑
鈴
旨
醇
董
餅
雛
姿
拌
傅
腹
妥
揉
賢
拆
歪
葡
胺
丟
浩
徽
昂
墊
擋
覽
貪
慰
繳
汪
慌
馮
諾
姜
誼
兇
劣
誣
耀
昏
躺
盈
騎
喬
溪
叢
盧
抹
悶
諮
刮
駕
纜
悟
摘
鉺
擲
頗
幻
柄
惠
慘
佳
仇
臘
窩
滌
劍
瞧
堡
潑
蔥
罩
霍
撈
胎
蒼
濱
倆
捅
湘
砍
霞
邵
萄
瘋
淮
遂
熊
糞
烘
宿
檔
戈
駁
嫂
裕
徙
箭
捐
腸
撐
曬
辨
殿
蓮
攤
攪
醬
屏
疫
哀
蔡
堵
沫
皺
暢
疊
閣
萊
敲
轄
鉤
痕
壩
巷
餓
禍
丘
玄
溜
曰
邏
彭
嘗
卿
妨
艇
吞
韋
怨
矮
歇`.split("\n");

// node_modules/viem/_esm/accounts/toAccount.js
function toAccount(source) {
  if (typeof source === "string") {
    if (!isAddress(source, { strict: false }))
      throw new InvalidAddressError({ address: source });
    return {
      address: source,
      type: "json-rpc"
    };
  }
  if (!isAddress(source.address, { strict: false }))
    throw new InvalidAddressError({ address: source.address });
  return {
    address: source.address,
    nonceManager: source.nonceManager,
    sign: source.sign,
    signAuthorization: source.signAuthorization,
    signMessage: source.signMessage,
    signTransaction: source.signTransaction,
    signTypedData: source.signTypedData,
    source: "custom",
    type: "local"
  };
}

// node_modules/viem/_esm/accounts/utils/sign.js
var extraEntropy = false;
async function sign({ hash, privateKey, to = "object" }) {
  const { r, s, recovery } = secp256k1.sign(hash.slice(2), privateKey.slice(2), { lowS: true, extraEntropy });
  const signature = {
    r: numberToHex(r, { size: 32 }),
    s: numberToHex(s, { size: 32 }),
    v: recovery ? 28n : 27n,
    yParity: recovery
  };
  return (() => {
    if (to === "bytes" || to === "hex")
      return serializeSignature({ ...signature, to });
    return signature;
  })();
}

// node_modules/viem/_esm/accounts/utils/signAuthorization.js
async function signAuthorization(parameters) {
  const { chainId, nonce, privateKey, to = "object" } = parameters;
  const address = parameters.contractAddress ?? parameters.address;
  const signature = await sign({
    hash: hashAuthorization({ address, chainId, nonce }),
    privateKey,
    to
  });
  if (to === "object")
    return {
      address,
      chainId,
      nonce,
      ...signature
    };
  return signature;
}

// node_modules/viem/_esm/accounts/utils/signMessage.js
async function signMessage({ message, privateKey }) {
  return await sign({ hash: hashMessage(message), privateKey, to: "hex" });
}

// node_modules/viem/_esm/accounts/utils/signTransaction.js
async function signTransaction(parameters) {
  const { privateKey, transaction, serializer = serializeTransaction } = parameters;
  const signableTransaction = (() => {
    if (transaction.type === "eip4844")
      return {
        ...transaction,
        sidecars: false
      };
    return transaction;
  })();
  const signature = await sign({
    hash: keccak256(serializer(signableTransaction)),
    privateKey
  });
  return serializer(transaction, signature);
}

// node_modules/viem/_esm/accounts/utils/signTypedData.js
async function signTypedData(parameters) {
  const { privateKey, ...typedData } = parameters;
  return await sign({
    hash: hashTypedData(typedData),
    privateKey,
    to: "hex"
  });
}

// node_modules/viem/_esm/accounts/privateKeyToAccount.js
function privateKeyToAccount(privateKey, options = {}) {
  const { nonceManager: nonceManager2 } = options;
  const publicKey = toHex(secp256k1.getPublicKey(privateKey.slice(2), false));
  const address = publicKeyToAddress(publicKey);
  const account = toAccount({
    address,
    nonceManager: nonceManager2,
    async sign({ hash }) {
      return sign({ hash, privateKey, to: "hex" });
    },
    async signAuthorization(authorization) {
      return signAuthorization({ ...authorization, privateKey });
    },
    async signMessage({ message }) {
      return signMessage({ message, privateKey });
    },
    async signTransaction(transaction, { serializer } = {}) {
      return signTransaction({ privateKey, transaction, serializer });
    },
    async signTypedData(typedData) {
      return signTypedData({ ...typedData, privateKey });
    }
  });
  return {
    ...account,
    publicKey,
    source: "privateKey"
  };
}

// node_modules/@story-protocol/core-sdk/dist/story-protocol-core-sdk.esm.js
function _regeneratorDefine(e, r, n, t) {
  var i = Object.defineProperty;
  try {
    i({}, "", {});
  } catch (e2) {
    i = 0;
  }
  _regeneratorDefine = function(e2, r2, n2, t2) {
    if (r2) i ? i(e2, r2, {
      value: n2,
      enumerable: !t2,
      configurable: !t2,
      writable: !t2
    }) : e2[r2] = n2;
    else {
      let o = function(r3, n3) {
        _regeneratorDefine(e2, r3, function(e3) {
          return this._invoke(r3, n3, e3);
        });
      };
      o("next", 0), o("throw", 1), o("return", 2);
    }
  }, _regeneratorDefine(e, r, n, t);
}
function _regenerator() {
  var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag";
  function i(r2, n2, o2, i2) {
    var c2 = n2 && n2.prototype instanceof Generator ? n2 : Generator, u2 = Object.create(c2.prototype);
    return _regeneratorDefine(u2, "_invoke", function(r3, n3, o3) {
      var i3, c3, u3, f2 = 0, p = o3 || [], y = false, G = {
        p: 0,
        n: 0,
        v: e,
        a: d,
        f: d.bind(e, 4),
        d: function(t2, r4) {
          return i3 = t2, c3 = 0, u3 = e, G.n = r4, a;
        }
      };
      function d(r4, n4) {
        for (c3 = r4, u3 = n4, t = 0; !y && f2 && !o4 && t < p.length; t++) {
          var o4, i4 = p[t], d2 = G.p, l = i4[2];
          r4 > 3 ? (o4 = l === n4) && (u3 = i4[(c3 = i4[4]) ? 5 : (c3 = 3, 3)], i4[4] = i4[5] = e) : i4[0] <= d2 && ((o4 = r4 < 2 && d2 < i4[1]) ? (c3 = 0, G.v = n4, G.n = i4[1]) : d2 < l && (o4 = r4 < 3 || i4[0] > n4 || n4 > l) && (i4[4] = r4, i4[5] = n4, G.n = l, c3 = 0));
        }
        if (o4 || r4 > 1) return a;
        throw y = true, n4;
      }
      return function(o4, p2, l) {
        if (f2 > 1) throw TypeError("Generator is already running");
        for (y && 1 === p2 && d(p2, l), c3 = p2, u3 = l; (t = c3 < 2 ? e : u3) || !y; ) {
          i3 || (c3 ? c3 < 3 ? (c3 > 1 && (G.n = -1), d(c3, u3)) : G.n = u3 : G.v = u3);
          try {
            if (f2 = 2, i3) {
              if (c3 || (o4 = "next"), t = i3[o4]) {
                if (!(t = t.call(i3, u3))) throw TypeError("iterator result is not an object");
                if (!t.done) return t;
                u3 = t.value, c3 < 2 && (c3 = 0);
              } else 1 === c3 && (t = i3.return) && t.call(i3), c3 < 2 && (u3 = TypeError("The iterator does not provide a '" + o4 + "' method"), c3 = 1);
              i3 = e;
            } else if ((t = (y = G.n < 0) ? u3 : r3.call(n3, G)) !== a) break;
          } catch (t2) {
            i3 = e, c3 = 1, u3 = t2;
          } finally {
            f2 = 1;
          }
        }
        return {
          value: t,
          done: y
        };
      };
    }(r2, o2, i2), true), u2;
  }
  var a = {};
  function Generator() {
  }
  function GeneratorFunction() {
  }
  function GeneratorFunctionPrototype() {
  }
  t = Object.getPrototypeOf;
  var c = [][n] ? t(t([][n]())) : (_regeneratorDefine(t = {}, n, function() {
    return this;
  }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c);
  function f(e2) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(e2, GeneratorFunctionPrototype) : (e2.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine(e2, o, "GeneratorFunction")), e2.prototype = Object.create(u), e2;
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine(u), _regeneratorDefine(u, o, "Generator"), _regeneratorDefine(u, n, function() {
    return this;
  }), _regeneratorDefine(u, "toString", function() {
    return "[object Generator]";
  }), (_regenerator = function() {
    return {
      w: i,
      m: f
    };
  })();
}
function asyncGeneratorStep(n, t, e, r, o, a, c) {
  try {
    var i = n[a](c), u = i.value;
  } catch (n2) {
    return void e(n2);
  }
  i.done ? t(u) : Promise.resolve(u).then(r, o);
}
function _asyncToGenerator(n) {
  return function() {
    var t = this, e = arguments;
    return new Promise(function(r, o) {
      var a = n.apply(t, e);
      function _next(n2) {
        asyncGeneratorStep(a, r, o, _next, _throw, "next", n2);
      }
      function _throw(n2) {
        asyncGeneratorStep(a, r, o, _next, _throw, "throw", n2);
      }
      _next(void 0);
    });
  };
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r);
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return String(t);
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e[r] = t, e;
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _classCallCheck(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
    writable: false
  }), e;
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _createForOfIteratorHelper(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (!t) {
    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {
      t && (r = t);
      var n = 0, F = function() {
      };
      return {
        s: F,
        n: function() {
          return n >= r.length ? {
            done: true
          } : {
            done: false,
            value: r[n++]
          };
        },
        e: function(r2) {
          throw r2;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o, a = true, u = false;
  return {
    s: function() {
      t = t.call(r);
    },
    n: function() {
      var r2 = t.next();
      return a = r2.done, r2;
    },
    e: function(r2) {
      u = true, o = r2;
    },
    f: function() {
      try {
        a || null == t.return || t.return();
      } finally {
        if (u) throw o;
      }
    }
  };
}
function _arrayWithHoles(r) {
  if (Array.isArray(r)) return r;
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = false;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(r, e) {
  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}
function _getPrototypeOf(t) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
    return t2.__proto__ || Object.getPrototypeOf(t2);
  }, _getPrototypeOf(t);
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t2) {
  }
  return (_isNativeReflectConstruct = function() {
    return !!t;
  })();
}
function _assertThisInitialized(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function _possibleConstructorReturn(t, e) {
  if (e && ("object" == typeof e || "function" == typeof e)) return e;
  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t);
}
function _callSuper(t, o, e) {
  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
    return t2.__proto__ = e2, t2;
  }, _setPrototypeOf(t, e);
}
function _inherits(t, e) {
  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
  t.prototype = Object.create(e && e.prototype, {
    constructor: {
      value: t,
      writable: true,
      configurable: true
    }
  }), Object.defineProperty(t, "prototype", {
    writable: false
  }), e && _setPrototypeOf(t, e);
}
var accessControllerAbi = [{ type: "constructor", inputs: [{ name: "ipAccountRegistry", internalType: "address", type: "address" }, { name: "moduleRegistry", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "signer", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }], name: "AccessController__BothCallerAndRecipientAreNotRegisteredModule" }, { type: "error", inputs: [], name: "AccessController__CallerIsNotIPAccountOrOwner" }, { type: "error", inputs: [{ name: "ipAccount", internalType: "address", type: "address" }], name: "AccessController__IPAccountIsNotValid" }, { type: "error", inputs: [], name: "AccessController__IPAccountIsZeroAddress" }, { type: "error", inputs: [{ name: "ipAccount", internalType: "address", type: "address" }, { name: "owner", internalType: "address", type: "address" }], name: "AccessController__OwnerIsIPAccount" }, { type: "error", inputs: [{ name: "ipAccount", internalType: "address", type: "address" }, { name: "signer", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }, { name: "func", internalType: "bytes4", type: "bytes4" }], name: "AccessController__PermissionDenied" }, { type: "error", inputs: [], name: "AccessController__PermissionIsNotValid" }, { type: "error", inputs: [], name: "AccessController__SignerIsZeroAddress" }, { type: "error", inputs: [], name: "AccessController__ToAndFuncAreZeroAddressShouldCallSetAllPermissions" }, { type: "error", inputs: [], name: "AccessController__ZeroAccessManager" }, { type: "error", inputs: [], name: "AccessController__ZeroIPAccountRegistry" }, { type: "error", inputs: [], name: "AccessController__ZeroModuleRegistry" }, { type: "error", inputs: [{ name: "authority", internalType: "address", type: "address" }], name: "AccessManagedInvalidAuthority" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "delay", internalType: "uint32", type: "uint32" }], name: "AccessManagedRequiredDelay" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "AccessManagedUnauthorized" }, { type: "error", inputs: [{ name: "target", internalType: "address", type: "address" }], name: "AddressEmptyCode" }, { type: "error", inputs: [{ name: "implementation", internalType: "address", type: "address" }], name: "ERC1967InvalidImplementation" }, { type: "error", inputs: [], name: "ERC1967NonPayable" }, { type: "error", inputs: [], name: "EnforcedPause" }, { type: "error", inputs: [], name: "ExpectedPause" }, { type: "error", inputs: [], name: "FailedCall" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" }, { type: "error", inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }], name: "UUPSUnsupportedProxiableUUID" }, { type: "event", anonymous: false, inputs: [{ name: "authority", internalType: "address", type: "address", indexed: false }], name: "AuthorityUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }], name: "Paused" }, { type: "event", anonymous: false, inputs: [{ name: "ipAccountOwner", internalType: "address", type: "address", indexed: false }, { name: "ipAccount", internalType: "address", type: "address", indexed: true }, { name: "signer", internalType: "address", type: "address", indexed: true }, { name: "to", internalType: "address", type: "address", indexed: true }, { name: "func", internalType: "bytes4", type: "bytes4", indexed: false }, { name: "permission", internalType: "uint8", type: "uint8", indexed: false }], name: "PermissionSet" }, { type: "event", anonymous: false, inputs: [{ name: "ipAccountOwner", internalType: "address", type: "address", indexed: false }, { name: "ipAccount", internalType: "address", type: "address", indexed: true }, { name: "signer", internalType: "address", type: "address", indexed: true }, { name: "to", internalType: "address", type: "address", indexed: true }, { name: "func", internalType: "bytes4", type: "bytes4", indexed: false }, { name: "permission", internalType: "uint8", type: "uint8", indexed: false }], name: "TransientPermissionSet" }, { type: "event", anonymous: false, inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }], name: "Unpaused" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "function", inputs: [], name: "IP_ASSET_REGISTRY", outputs: [{ name: "", internalType: "contract IIPAssetRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "MODULE_REGISTRY", outputs: [{ name: "", internalType: "contract IModuleRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "UPGRADE_INTERFACE_VERSION", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "__ProtocolPausable_init", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "authority", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipAccount", internalType: "address", type: "address" }, { name: "signer", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }, { name: "func", internalType: "bytes4", type: "bytes4" }], name: "checkPermission", outputs: [], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipAccount", internalType: "address", type: "address" }, { name: "signer", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }, { name: "func", internalType: "bytes4", type: "bytes4" }], name: "getPermanentPermission", outputs: [{ name: "", internalType: "uint8", type: "uint8" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipAccount", internalType: "address", type: "address" }, { name: "signer", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }, { name: "func", internalType: "bytes4", type: "bytes4" }], name: "getPermission", outputs: [{ name: "", internalType: "uint8", type: "uint8" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipAccount", internalType: "address", type: "address" }, { name: "signer", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }, { name: "func", internalType: "bytes4", type: "bytes4" }], name: "getTransientPermission", outputs: [{ name: "", internalType: "uint8", type: "uint8" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "isConsumingScheduledOp", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [], name: "pause", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "paused", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipAccount", internalType: "address", type: "address" }, { name: "signer", internalType: "address", type: "address" }, { name: "permission", internalType: "uint8", type: "uint8" }], name: "setAllPermissions", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "ipAccount", internalType: "address", type: "address" }, { name: "signer", internalType: "address", type: "address" }, { name: "permission", internalType: "uint8", type: "uint8" }], name: "setAllTransientPermissions", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newAuthority", internalType: "address", type: "address" }], name: "setAuthority", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "permissions", internalType: "struct AccessPermission.Permission[]", type: "tuple[]", components: [{ name: "ipAccount", internalType: "address", type: "address" }, { name: "signer", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }, { name: "func", internalType: "bytes4", type: "bytes4" }, { name: "permission", internalType: "uint8", type: "uint8" }] }], name: "setBatchPermissions", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "permissions", internalType: "struct AccessPermission.Permission[]", type: "tuple[]", components: [{ name: "ipAccount", internalType: "address", type: "address" }, { name: "signer", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }, { name: "func", internalType: "bytes4", type: "bytes4" }, { name: "permission", internalType: "uint8", type: "uint8" }] }], name: "setBatchTransientPermissions", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "ipAccount", internalType: "address", type: "address" }, { name: "signer", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }, { name: "func", internalType: "bytes4", type: "bytes4" }, { name: "permission", internalType: "uint8", type: "uint8" }], name: "setPermission", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "ipAccount", internalType: "address", type: "address" }, { name: "signer", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }, { name: "func", internalType: "bytes4", type: "bytes4" }, { name: "permission", internalType: "uint8", type: "uint8" }], name: "setTransientPermission", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "unpause", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }];
var accessControllerAddress = { 1315: "0xcCF37d0a503Ee1D4C11208672e622ed3DFB2275a", 1514: "0xcCF37d0a503Ee1D4C11208672e622ed3DFB2275a" };
var arbitrationPolicyUmaAbi = [{ type: "constructor", inputs: [{ name: "disputeModule", internalType: "address", type: "address" }, { name: "royaltyModule", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "authority", internalType: "address", type: "address" }], name: "AccessManagedInvalidAuthority" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "delay", internalType: "uint32", type: "uint32" }], name: "AccessManagedRequiredDelay" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "AccessManagedUnauthorized" }, { type: "error", inputs: [{ name: "target", internalType: "address", type: "address" }], name: "AddressEmptyCode" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__BondAboveMax" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__CannotCancel" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__CannotDisputeAssertionIfTagIsInherited" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__CurrencyNotWhitelisted" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__DisputeNotFound" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__IpOwnerTimePercentAboveMax" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__LivenessAboveMax" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__LivenessBelowMin" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__MaxBondBelowMinimumBond" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__MinLivenessAboveMax" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__NoCounterEvidence" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__NotDisputeModule" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__NotOOV3" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__OnlyDisputePolicyUMA" }, { type: "error", inputs: [{ name: "elapsedTime", internalType: "uint64", type: "uint64" }, { name: "liveness", internalType: "uint64", type: "uint64" }, { name: "caller", internalType: "address", type: "address" }], name: "ArbitrationPolicyUMA__OnlyTargetIpIdCanDisputeWithinTimeWindow" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__ZeroAccessManager" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__ZeroDisputeModule" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__ZeroMaxLiveness" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__ZeroMinLiveness" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__ZeroOOV3" }, { type: "error", inputs: [], name: "ArbitrationPolicyUMA__ZeroRoyaltyModule" }, { type: "error", inputs: [{ name: "implementation", internalType: "address", type: "address" }], name: "ERC1967InvalidImplementation" }, { type: "error", inputs: [], name: "ERC1967NonPayable" }, { type: "error", inputs: [], name: "EnforcedPause" }, { type: "error", inputs: [], name: "ExpectedPause" }, { type: "error", inputs: [], name: "FailedCall" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" }, { type: "error", inputs: [{ name: "token", internalType: "address", type: "address" }], name: "SafeERC20FailedOperation" }, { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" }, { type: "error", inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }], name: "UUPSUnsupportedProxiableUUID" }, { type: "event", anonymous: false, inputs: [{ name: "disputeId", internalType: "uint256", type: "uint256", indexed: false }, { name: "assertionId", internalType: "bytes32", type: "bytes32", indexed: false }, { name: "counterEvidenceHash", internalType: "bytes32", type: "bytes32", indexed: false }], name: "AssertionDisputed" }, { type: "event", anonymous: false, inputs: [{ name: "authority", internalType: "address", type: "address", indexed: false }], name: "AuthorityUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "disputeId", internalType: "uint256", type: "uint256", indexed: false }, { name: "assertionId", internalType: "bytes32", type: "bytes32", indexed: false }, { name: "caller", internalType: "address", type: "address", indexed: false }, { name: "liveness", internalType: "uint64", type: "uint64", indexed: false }, { name: "currency", internalType: "address", type: "address", indexed: false }, { name: "bond", internalType: "uint256", type: "uint256", indexed: false }], name: "DisputeRaisedUMA" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "minLiveness", internalType: "uint64", type: "uint64", indexed: false }, { name: "maxLiveness", internalType: "uint64", type: "uint64", indexed: false }, { name: "ipOwnerTimePercent", internalType: "uint32", type: "uint32", indexed: false }], name: "LivenessSet" }, { type: "event", anonymous: false, inputs: [{ name: "token", internalType: "address", type: "address", indexed: false }, { name: "maxBond", internalType: "uint256", type: "uint256", indexed: false }], name: "MaxBondSet" }, { type: "event", anonymous: false, inputs: [{ name: "oov3", internalType: "address", type: "address", indexed: false }], name: "OOV3Set" }, { type: "event", anonymous: false, inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }], name: "Paused" }, { type: "event", anonymous: false, inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }], name: "Unpaused" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "function", inputs: [], name: "DISPUTE_MODULE", outputs: [{ name: "", internalType: "contract IDisputeModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "ROYALTY_MODULE", outputs: [{ name: "", internalType: "contract IRoyaltyModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "UPGRADE_INTERFACE_VERSION", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "__ProtocolPausable_init", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "assertionId", internalType: "bytes32", type: "bytes32" }], name: "assertionDisputedCallback", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "assertionId", internalType: "bytes32", type: "bytes32" }], name: "assertionIdToDisputeId", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "assertionId", internalType: "bytes32", type: "bytes32" }, { name: "assertedTruthfully", internalType: "bool", type: "bool" }], name: "assertionResolvedCallback", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "authority", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "assertionId", internalType: "bytes32", type: "bytes32" }, { name: "counterEvidenceHash", internalType: "bytes32", type: "bytes32" }], name: "disputeAssertion", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "disputeId", internalType: "uint256", type: "uint256" }], name: "disputeIdToAssertionId", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "ipOwnerTimePercent", outputs: [{ name: "", internalType: "uint32", type: "uint32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "disputeId", internalType: "uint256", type: "uint256" }], name: "ipOwnerTimePercents", outputs: [{ name: "", internalType: "uint32", type: "uint32" }], stateMutability: "view" }, { type: "function", inputs: [], name: "isConsumingScheduledOp", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "token", internalType: "address", type: "address" }], name: "maxBonds", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "maxLiveness", outputs: [{ name: "", internalType: "uint64", type: "uint64" }], stateMutability: "view" }, { type: "function", inputs: [], name: "minLiveness", outputs: [{ name: "", internalType: "uint64", type: "uint64" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "disputeId", internalType: "uint256", type: "uint256" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "onDisputeCancel", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "disputeId", internalType: "uint256", type: "uint256" }, { name: "decision", internalType: "bool", type: "bool" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "onDisputeJudgement", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "targetIpId", internalType: "address", type: "address" }, { name: "disputeEvidenceHash", internalType: "bytes32", type: "bytes32" }, { name: "targetTag", internalType: "bytes32", type: "bytes32" }, { name: "disputeId", internalType: "uint256", type: "uint256" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "onRaiseDispute", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "disputeId", internalType: "uint256", type: "uint256" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "onResolveDispute", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "oov3", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "pause", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "paused", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "newAuthority", internalType: "address", type: "address" }], name: "setAuthority", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "minLiveness", internalType: "uint64", type: "uint64" }, { name: "maxLiveness", internalType: "uint64", type: "uint64" }, { name: "ipOwnerTimePercent", internalType: "uint32", type: "uint32" }], name: "setLiveness", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "token", internalType: "address", type: "address" }, { name: "maxBond", internalType: "uint256", type: "uint256" }], name: "setMaxBond", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "oov3", internalType: "address", type: "address" }], name: "setOOV3", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "unpause", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }];
var arbitrationPolicyUmaAddress = { 1315: "0xfFD98c3877B8789124f02C7E8239A4b0Ef11E936", 1514: "0xfFD98c3877B8789124f02C7E8239A4b0Ef11E936" };
var coreMetadataModuleAbi = [{ type: "constructor", inputs: [{ name: "accessController", internalType: "address", type: "address" }, { name: "ipAccountRegistry", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "ipAccount", internalType: "address", type: "address" }], name: "AccessControlled__NotIpAccount" }, { type: "error", inputs: [], name: "AccessControlled__ZeroAddress" }, { type: "error", inputs: [{ name: "authority", internalType: "address", type: "address" }], name: "AccessManagedInvalidAuthority" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "delay", internalType: "uint32", type: "uint32" }], name: "AccessManagedRequiredDelay" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "AccessManagedUnauthorized" }, { type: "error", inputs: [{ name: "target", internalType: "address", type: "address" }], name: "AddressEmptyCode" }, { type: "error", inputs: [], name: "CoreMetadataModule__MetadataAlreadyFrozen" }, { type: "error", inputs: [], name: "CoreMetadataModule__ZeroAccessManager" }, { type: "error", inputs: [{ name: "implementation", internalType: "address", type: "address" }], name: "ERC1967InvalidImplementation" }, { type: "error", inputs: [], name: "ERC1967NonPayable" }, { type: "error", inputs: [], name: "FailedCall" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" }, { type: "error", inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }], name: "UUPSUnsupportedProxiableUUID" }, { type: "event", anonymous: false, inputs: [{ name: "authority", internalType: "address", type: "address", indexed: false }], name: "AuthorityUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "ipId", internalType: "address", type: "address", indexed: true }], name: "MetadataFrozen" }, { type: "event", anonymous: false, inputs: [{ name: "ipId", internalType: "address", type: "address", indexed: true }, { name: "metadataURI", internalType: "string", type: "string", indexed: false }, { name: "metadataHash", internalType: "bytes32", type: "bytes32", indexed: false }], name: "MetadataURISet" }, { type: "event", anonymous: false, inputs: [{ name: "ipId", internalType: "address", type: "address", indexed: true }, { name: "nftTokenURI", internalType: "string", type: "string", indexed: false }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32", indexed: false }], name: "NFTTokenURISet" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "function", inputs: [], name: "ACCESS_CONTROLLER", outputs: [{ name: "", internalType: "contract IAccessController", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_ASSET_REGISTRY", outputs: [{ name: "", internalType: "contract IIPAssetRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "UPGRADE_INTERFACE_VERSION", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [], name: "authority", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "freezeMetadata", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "isConsumingScheduledOp", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "isMetadataFrozen", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "pure" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "metadataURI", internalType: "string", type: "string" }, { name: "metadataHash", internalType: "bytes32", type: "bytes32" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }], name: "setAll", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newAuthority", internalType: "address", type: "address" }], name: "setAuthority", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "metadataURI", internalType: "string", type: "string" }, { name: "metadataHash", internalType: "bytes32", type: "bytes32" }], name: "setMetadataURI", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }], name: "supportsInterface", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }], name: "updateNftTokenURI", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }];
var coreMetadataModuleAddress = { 1315: "0x6E81a25C99C6e8430aeC7353325EB138aFE5DC16", 1514: "0x6E81a25C99C6e8430aeC7353325EB138aFE5DC16" };
var derivativeWorkflowsAbi = [{ type: "constructor", inputs: [{ name: "accessController", internalType: "address", type: "address" }, { name: "coreMetadataModule", internalType: "address", type: "address" }, { name: "ipAssetRegistry", internalType: "address", type: "address" }, { name: "licenseRegistry", internalType: "address", type: "address" }, { name: "licenseToken", internalType: "address", type: "address" }, { name: "licensingModule", internalType: "address", type: "address" }, { name: "pilTemplate", internalType: "address", type: "address" }, { name: "royaltyModule", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "authority", internalType: "address", type: "address" }], name: "AccessManagedInvalidAuthority" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "delay", internalType: "uint32", type: "uint32" }], name: "AccessManagedRequiredDelay" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "AccessManagedUnauthorized" }, { type: "error", inputs: [{ name: "target", internalType: "address", type: "address" }], name: "AddressEmptyCode" }, { type: "error", inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }, { name: "caller", internalType: "address", type: "address" }, { name: "actualTokenOwner", internalType: "address", type: "address" }], name: "DerivativeWorkflows__CallerAndNotTokenOwner" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "signer", internalType: "address", type: "address" }], name: "DerivativeWorkflows__CallerNotSigner" }, { type: "error", inputs: [], name: "DerivativeWorkflows__EmptyLicenseTokens" }, { type: "error", inputs: [], name: "DerivativeWorkflows__ZeroAddressParam" }, { type: "error", inputs: [{ name: "implementation", internalType: "address", type: "address" }], name: "ERC1967InvalidImplementation" }, { type: "error", inputs: [], name: "ERC1967NonPayable" }, { type: "error", inputs: [], name: "FailedCall" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [], name: "LicensingHelper__ParentIpIdsAndLicenseTermsIdsMismatch" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [], name: "PermissionHelper__ModulesAndSelectorsMismatch" }, { type: "error", inputs: [{ name: "token", internalType: "address", type: "address" }], name: "SafeERC20FailedOperation" }, { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" }, { type: "error", inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }], name: "UUPSUnsupportedProxiableUUID" }, { type: "error", inputs: [], name: "Workflow__CallerNotAuthorizedToMint" }, { type: "event", anonymous: false, inputs: [{ name: "authority", internalType: "address", type: "address", indexed: false }], name: "AuthorityUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "function", inputs: [], name: "ACCESS_CONTROLLER", outputs: [{ name: "", internalType: "contract IAccessController", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "CORE_METADATA_MODULE", outputs: [{ name: "", internalType: "contract ICoreMetadataModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_ASSET_REGISTRY", outputs: [{ name: "", internalType: "contract IIPAssetRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSE_REGISTRY", outputs: [{ name: "", internalType: "contract ILicenseRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSE_TOKEN", outputs: [{ name: "", internalType: "contract ILicenseToken", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSING_MODULE", outputs: [{ name: "", internalType: "contract ILicensingModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "PIL_TEMPLATE", outputs: [{ name: "", internalType: "contract IPILicenseTemplate", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "ROYALTY_MODULE", outputs: [{ name: "", internalType: "contract IRoyaltyModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "UPGRADE_INTERFACE_VERSION", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [], name: "authority", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "isConsumingScheduledOp", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "spgNftContract", internalType: "address", type: "address" }, { name: "derivData", internalType: "struct WorkflowStructs.MakeDerivative", type: "tuple", components: [{ name: "parentIpIds", internalType: "address[]", type: "address[]" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsIds", internalType: "uint256[]", type: "uint256[]" }, { name: "royaltyContext", internalType: "bytes", type: "bytes" }, { name: "maxMintingFee", internalType: "uint256", type: "uint256" }, { name: "maxRts", internalType: "uint32", type: "uint32" }, { name: "maxRevenueShare", internalType: "uint32", type: "uint32" }] }, { name: "ipMetadata", internalType: "struct WorkflowStructs.IPMetadata", type: "tuple", components: [{ name: "ipMetadataURI", internalType: "string", type: "string" }, { name: "ipMetadataHash", internalType: "bytes32", type: "bytes32" }, { name: "nftMetadataURI", internalType: "string", type: "string" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }] }, { name: "recipient", internalType: "address", type: "address" }, { name: "allowDuplicates", internalType: "bool", type: "bool" }], name: "mintAndRegisterIpAndMakeDerivative", outputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "spgNftContract", internalType: "address", type: "address" }, { name: "licenseTokenIds", internalType: "uint256[]", type: "uint256[]" }, { name: "royaltyContext", internalType: "bytes", type: "bytes" }, { name: "maxRts", internalType: "uint32", type: "uint32" }, { name: "ipMetadata", internalType: "struct WorkflowStructs.IPMetadata", type: "tuple", components: [{ name: "ipMetadataURI", internalType: "string", type: "string" }, { name: "ipMetadataHash", internalType: "bytes32", type: "bytes32" }, { name: "nftMetadataURI", internalType: "string", type: "string" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }] }, { name: "recipient", internalType: "address", type: "address" }, { name: "allowDuplicates", internalType: "bool", type: "bool" }], name: "mintAndRegisterIpAndMakeDerivativeWithLicenseTokens", outputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }], name: "multicall", outputs: [{ name: "results", internalType: "bytes[]", type: "bytes[]" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "", internalType: "address", type: "address" }, { name: "", internalType: "address", type: "address" }, { name: "", internalType: "uint256", type: "uint256" }, { name: "", internalType: "bytes", type: "bytes" }], name: "onERC721Received", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "nftContract", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }, { name: "derivData", internalType: "struct WorkflowStructs.MakeDerivative", type: "tuple", components: [{ name: "parentIpIds", internalType: "address[]", type: "address[]" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsIds", internalType: "uint256[]", type: "uint256[]" }, { name: "royaltyContext", internalType: "bytes", type: "bytes" }, { name: "maxMintingFee", internalType: "uint256", type: "uint256" }, { name: "maxRts", internalType: "uint32", type: "uint32" }, { name: "maxRevenueShare", internalType: "uint32", type: "uint32" }] }, { name: "ipMetadata", internalType: "struct WorkflowStructs.IPMetadata", type: "tuple", components: [{ name: "ipMetadataURI", internalType: "string", type: "string" }, { name: "ipMetadataHash", internalType: "bytes32", type: "bytes32" }, { name: "nftMetadataURI", internalType: "string", type: "string" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }] }, { name: "sigMetadataAndRegister", internalType: "struct WorkflowStructs.SignatureData", type: "tuple", components: [{ name: "signer", internalType: "address", type: "address" }, { name: "deadline", internalType: "uint256", type: "uint256" }, { name: "signature", internalType: "bytes", type: "bytes" }] }], name: "registerIpAndMakeDerivative", outputs: [{ name: "ipId", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "nftContract", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }, { name: "licenseTokenIds", internalType: "uint256[]", type: "uint256[]" }, { name: "royaltyContext", internalType: "bytes", type: "bytes" }, { name: "maxRts", internalType: "uint32", type: "uint32" }, { name: "ipMetadata", internalType: "struct WorkflowStructs.IPMetadata", type: "tuple", components: [{ name: "ipMetadataURI", internalType: "string", type: "string" }, { name: "ipMetadataHash", internalType: "bytes32", type: "bytes32" }, { name: "nftMetadataURI", internalType: "string", type: "string" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }] }, { name: "sigMetadataAndRegister", internalType: "struct WorkflowStructs.SignatureData", type: "tuple", components: [{ name: "signer", internalType: "address", type: "address" }, { name: "deadline", internalType: "uint256", type: "uint256" }, { name: "signature", internalType: "bytes", type: "bytes" }] }], name: "registerIpAndMakeDerivativeWithLicenseTokens", outputs: [{ name: "ipId", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newAuthority", internalType: "address", type: "address" }], name: "setAuthority", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }];
var derivativeWorkflowsAddress = { 1315: "0x9e2d496f72C547C2C535B167e06ED8729B374a4f", 1514: "0x9e2d496f72C547C2C535B167e06ED8729B374a4f" };
var disputeModuleAbi = [{ type: "constructor", inputs: [{ name: "accessController", internalType: "address", type: "address" }, { name: "ipAssetRegistry", internalType: "address", type: "address" }, { name: "licenseRegistry", internalType: "address", type: "address" }, { name: "ipGraphAcl", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "ipAccount", internalType: "address", type: "address" }], name: "AccessControlled__NotIpAccount" }, { type: "error", inputs: [], name: "AccessControlled__ZeroAddress" }, { type: "error", inputs: [{ name: "authority", internalType: "address", type: "address" }], name: "AccessManagedInvalidAuthority" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "delay", internalType: "uint32", type: "uint32" }], name: "AccessManagedRequiredDelay" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "AccessManagedUnauthorized" }, { type: "error", inputs: [{ name: "target", internalType: "address", type: "address" }], name: "AddressEmptyCode" }, { type: "error", inputs: [], name: "DisputeModule__CannotBlacklistBaseArbitrationPolicy" }, { type: "error", inputs: [], name: "DisputeModule__DisputeAlreadyPropagated" }, { type: "error", inputs: [], name: "DisputeModule__DisputeWithoutInfringementTag" }, { type: "error", inputs: [], name: "DisputeModule__EvidenceHashAlreadyUsed" }, { type: "error", inputs: [], name: "DisputeModule__NotAbleToResolve" }, { type: "error", inputs: [], name: "DisputeModule__NotAllowedToWhitelist" }, { type: "error", inputs: [], name: "DisputeModule__NotArbitrationRelayer" }, { type: "error", inputs: [], name: "DisputeModule__NotDerivativeOrGroupIp" }, { type: "error", inputs: [], name: "DisputeModule__NotDisputeInitiator" }, { type: "error", inputs: [], name: "DisputeModule__NotInDisputeState" }, { type: "error", inputs: [], name: "DisputeModule__NotRegisteredIpId" }, { type: "error", inputs: [], name: "DisputeModule__NotWhitelistedArbitrationPolicy" }, { type: "error", inputs: [], name: "DisputeModule__NotWhitelistedDisputeTag" }, { type: "error", inputs: [], name: "DisputeModule__RelatedDisputeNotResolved" }, { type: "error", inputs: [], name: "DisputeModule__ZeroAccessController" }, { type: "error", inputs: [], name: "DisputeModule__ZeroAccessManager" }, { type: "error", inputs: [], name: "DisputeModule__ZeroArbitrationPolicy" }, { type: "error", inputs: [], name: "DisputeModule__ZeroArbitrationPolicyCooldown" }, { type: "error", inputs: [], name: "DisputeModule__ZeroDisputeEvidenceHash" }, { type: "error", inputs: [], name: "DisputeModule__ZeroDisputeTag" }, { type: "error", inputs: [], name: "DisputeModule__ZeroIPAssetRegistry" }, { type: "error", inputs: [], name: "DisputeModule__ZeroIPGraphACL" }, { type: "error", inputs: [], name: "DisputeModule__ZeroLicenseRegistry" }, { type: "error", inputs: [{ name: "implementation", internalType: "address", type: "address" }], name: "ERC1967InvalidImplementation" }, { type: "error", inputs: [], name: "ERC1967NonPayable" }, { type: "error", inputs: [], name: "EnforcedPause" }, { type: "error", inputs: [], name: "ExpectedPause" }, { type: "error", inputs: [], name: "FailedCall" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" }, { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" }, { type: "error", inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }], name: "UUPSUnsupportedProxiableUUID" }, { type: "event", anonymous: false, inputs: [{ name: "cooldown", internalType: "uint256", type: "uint256", indexed: false }], name: "ArbitrationPolicyCooldownUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "ipId", internalType: "address", type: "address", indexed: false }, { name: "arbitrationPolicy", internalType: "address", type: "address", indexed: false }, { name: "nextArbitrationUpdateTimestamp", internalType: "uint256", type: "uint256", indexed: false }], name: "ArbitrationPolicySet" }, { type: "event", anonymous: false, inputs: [{ name: "arbitrationPolicy", internalType: "address", type: "address", indexed: false }, { name: "allowed", internalType: "bool", type: "bool", indexed: false }], name: "ArbitrationPolicyWhitelistUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "arbitrationPolicy", internalType: "address", type: "address", indexed: false }, { name: "arbitrationRelayer", internalType: "address", type: "address", indexed: false }], name: "ArbitrationRelayerUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "authority", internalType: "address", type: "address", indexed: false }], name: "AuthorityUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "arbitrationPolicy", internalType: "address", type: "address", indexed: false }], name: "DefaultArbitrationPolicyUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "disputeId", internalType: "uint256", type: "uint256", indexed: false }, { name: "data", internalType: "bytes", type: "bytes", indexed: false }], name: "DisputeCancelled" }, { type: "event", anonymous: false, inputs: [{ name: "disputeId", internalType: "uint256", type: "uint256", indexed: false }, { name: "decision", internalType: "bool", type: "bool", indexed: false }, { name: "data", internalType: "bytes", type: "bytes", indexed: false }], name: "DisputeJudgementSet" }, { type: "event", anonymous: false, inputs: [{ name: "disputeId", internalType: "uint256", type: "uint256", indexed: false }, { name: "targetIpId", internalType: "address", type: "address", indexed: false }, { name: "disputeInitiator", internalType: "address", type: "address", indexed: false }, { name: "disputeTimestamp", internalType: "uint256", type: "uint256", indexed: false }, { name: "arbitrationPolicy", internalType: "address", type: "address", indexed: false }, { name: "disputeEvidenceHash", internalType: "bytes32", type: "bytes32", indexed: false }, { name: "targetTag", internalType: "bytes32", type: "bytes32", indexed: false }, { name: "data", internalType: "bytes", type: "bytes", indexed: false }], name: "DisputeRaised" }, { type: "event", anonymous: false, inputs: [{ name: "disputeId", internalType: "uint256", type: "uint256", indexed: false }, { name: "data", internalType: "bytes", type: "bytes", indexed: false }], name: "DisputeResolved" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "disputeId", internalType: "uint256", type: "uint256", indexed: false }, { name: "infringingIpId", internalType: "address", type: "address", indexed: false }, { name: "ipIdToTag", internalType: "address", type: "address", indexed: false }, { name: "infringerDisputeId", internalType: "uint256", type: "uint256", indexed: false }, { name: "tag", internalType: "bytes32", type: "bytes32", indexed: false }, { name: "disputeTimestamp", internalType: "uint256", type: "uint256", indexed: false }], name: "IpTaggedOnRelatedIpInfringement" }, { type: "event", anonymous: false, inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }], name: "Paused" }, { type: "event", anonymous: false, inputs: [{ name: "tag", internalType: "bytes32", type: "bytes32", indexed: false }, { name: "allowed", internalType: "bool", type: "bool", indexed: false }], name: "TagWhitelistUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }], name: "Unpaused" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "function", inputs: [], name: "ACCESS_CONTROLLER", outputs: [{ name: "", internalType: "contract IAccessController", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "GROUP_IP_ASSET_REGISTRY", outputs: [{ name: "", internalType: "contract IGroupIPAssetRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IN_DISPUTE", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_ASSET_REGISTRY", outputs: [{ name: "", internalType: "contract IIPAssetRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_GRAPH_ACL", outputs: [{ name: "", internalType: "contract IPGraphACL", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSE_REGISTRY", outputs: [{ name: "", internalType: "contract ILicenseRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "UPGRADE_INTERFACE_VERSION", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "__ProtocolPausable_init", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "arbitrationPolicies", outputs: [{ name: "policy", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "arbitrationPolicyCooldown", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "arbitrationPolicy", internalType: "address", type: "address" }], name: "arbitrationRelayer", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "authority", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "baseArbitrationPolicy", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "disputeId", internalType: "uint256", type: "uint256" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "cancelDispute", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "disputeCounter", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "disputeId", internalType: "uint256", type: "uint256" }], name: "disputes", outputs: [{ name: "targetIpId", internalType: "address", type: "address" }, { name: "disputeInitiator", internalType: "address", type: "address" }, { name: "disputeTimestamp", internalType: "uint256", type: "uint256" }, { name: "arbitrationPolicy", internalType: "address", type: "address" }, { name: "disputeEvidenceHash", internalType: "bytes32", type: "bytes32" }, { name: "targetTag", internalType: "bytes32", type: "bytes32" }, { name: "currentTag", internalType: "bytes32", type: "bytes32" }, { name: "infringerDisputeId", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "isConsumingScheduledOp", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "isIpTagged", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "arbitrationPolicy", internalType: "address", type: "address" }], name: "isWhitelistedArbitrationPolicy", outputs: [{ name: "allowed", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "tag", internalType: "bytes32", type: "bytes32" }], name: "isWhitelistedDisputeTag", outputs: [{ name: "allowed", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }], name: "multicall", outputs: [{ name: "results", internalType: "bytes[]", type: "bytes[]" }], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "nextArbitrationPolicies", outputs: [{ name: "policy", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "nextArbitrationUpdateTimestamps", outputs: [{ name: "timestamp", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "pause", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "paused", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "targetIpId", internalType: "address", type: "address" }, { name: "disputeEvidenceHash", internalType: "bytes32", type: "bytes32" }, { name: "targetTag", internalType: "bytes32", type: "bytes32" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "raiseDispute", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "disputeId", internalType: "uint256", type: "uint256" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "resolveDispute", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "nextArbitrationPolicy", internalType: "address", type: "address" }], name: "setArbitrationPolicy", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "cooldown", internalType: "uint256", type: "uint256" }], name: "setArbitrationPolicyCooldown", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "arbitrationPolicy", internalType: "address", type: "address" }, { name: "arbPolicyRelayer", internalType: "address", type: "address" }], name: "setArbitrationRelayer", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newAuthority", internalType: "address", type: "address" }], name: "setAuthority", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "arbitrationPolicy", internalType: "address", type: "address" }], name: "setBaseArbitrationPolicy", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "disputeId", internalType: "uint256", type: "uint256" }, { name: "decision", internalType: "bool", type: "bool" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "setDisputeJudgement", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }], name: "supportsInterface", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipIdToTag", internalType: "address", type: "address" }, { name: "infringerDisputeId", internalType: "uint256", type: "uint256" }], name: "tagIfRelatedIpInfringed", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "unpause", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "updateActiveArbitrationPolicy", outputs: [{ name: "arbitrationPolicy", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }, { type: "function", inputs: [{ name: "arbitrationPolicy", internalType: "address", type: "address" }, { name: "allowed", internalType: "bool", type: "bool" }], name: "whitelistArbitrationPolicy", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "tag", internalType: "bytes32", type: "bytes32" }, { name: "allowed", internalType: "bool", type: "bool" }], name: "whitelistDisputeTag", outputs: [], stateMutability: "nonpayable" }];
var disputeModuleAddress = { 1315: "0x9b7A9c70AFF961C799110954fc06F3093aeb94C5", 1514: "0x9b7A9c70AFF961C799110954fc06F3093aeb94C5" };
var erc20Abi2 = [{ type: "constructor", inputs: [], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "spender", internalType: "address", type: "address" }, { name: "allowance", internalType: "uint256", type: "uint256" }, { name: "needed", internalType: "uint256", type: "uint256" }], name: "ERC20InsufficientAllowance" }, { type: "error", inputs: [{ name: "sender", internalType: "address", type: "address" }, { name: "balance", internalType: "uint256", type: "uint256" }, { name: "needed", internalType: "uint256", type: "uint256" }], name: "ERC20InsufficientBalance" }, { type: "error", inputs: [{ name: "approver", internalType: "address", type: "address" }], name: "ERC20InvalidApprover" }, { type: "error", inputs: [{ name: "receiver", internalType: "address", type: "address" }], name: "ERC20InvalidReceiver" }, { type: "error", inputs: [{ name: "sender", internalType: "address", type: "address" }], name: "ERC20InvalidSender" }, { type: "error", inputs: [{ name: "spender", internalType: "address", type: "address" }], name: "ERC20InvalidSpender" }, { type: "event", anonymous: false, inputs: [{ name: "owner", internalType: "address", type: "address", indexed: true }, { name: "spender", internalType: "address", type: "address", indexed: true }, { name: "value", internalType: "uint256", type: "uint256", indexed: false }], name: "Approval" }, { type: "event", anonymous: false, inputs: [{ name: "from", internalType: "address", type: "address", indexed: true }, { name: "to", internalType: "address", type: "address", indexed: true }, { name: "value", internalType: "uint256", type: "uint256", indexed: false }], name: "Transfer" }, { type: "function", inputs: [{ name: "owner", internalType: "address", type: "address" }, { name: "spender", internalType: "address", type: "address" }], name: "allowance", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "spender", internalType: "address", type: "address" }, { name: "value", internalType: "uint256", type: "uint256" }], name: "approve", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "account", internalType: "address", type: "address" }], name: "balanceOf", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "from", internalType: "address", type: "address" }, { name: "amount", internalType: "uint256", type: "uint256" }], name: "burn", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "decimals", outputs: [{ name: "", internalType: "uint8", type: "uint8" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "to", internalType: "address", type: "address" }, { name: "amount", internalType: "uint256", type: "uint256" }], name: "mint", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [], name: "symbol", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [], name: "totalSupply", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "to", internalType: "address", type: "address" }, { name: "value", internalType: "uint256", type: "uint256" }], name: "transfer", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "from", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }, { name: "value", internalType: "uint256", type: "uint256" }], name: "transferFrom", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "nonpayable" }];
var erc20Address = { 1315: "0xF2104833d386a2734a4eB3B8ad6FC6812F29E38E", 1514: "0xF2104833d386a2734a4eB3B8ad6FC6812F29E38E" };
var groupingModuleAbi = [{ type: "constructor", inputs: [{ name: "accessController", internalType: "address", type: "address" }, { name: "ipAssetRegistry", internalType: "address", type: "address" }, { name: "licenseRegistry", internalType: "address", type: "address" }, { name: "licenseToken", internalType: "address", type: "address" }, { name: "groupNFT", internalType: "address", type: "address" }, { name: "royaltyModule", internalType: "address", type: "address" }, { name: "disputeModule", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "ipAccount", internalType: "address", type: "address" }], name: "AccessControlled__NotIpAccount" }, { type: "error", inputs: [], name: "AccessControlled__ZeroAddress" }, { type: "error", inputs: [{ name: "authority", internalType: "address", type: "address" }], name: "AccessManagedInvalidAuthority" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "delay", internalType: "uint32", type: "uint32" }], name: "AccessManagedRequiredDelay" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "AccessManagedUnauthorized" }, { type: "error", inputs: [{ name: "target", internalType: "address", type: "address" }], name: "AddressEmptyCode" }, { type: "error", inputs: [{ name: "implementation", internalType: "address", type: "address" }], name: "ERC1967InvalidImplementation" }, { type: "error", inputs: [], name: "ERC1967NonPayable" }, { type: "error", inputs: [], name: "EnforcedPause" }, { type: "error", inputs: [], name: "ExpectedPause" }, { type: "error", inputs: [], name: "FailedCall" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "GroupingModule__CannotAddDisputedIpToGroup" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }, { name: "childGroupId", internalType: "address", type: "address" }], name: "GroupingModule__CannotAddGroupToGroup" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "GroupingModule__DisputedGroupCannotAddIp" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "GroupingModule__DisputedGroupCannotClaimReward" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "GroupingModule__DisputedGroupCannotCollectRoyalties" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "GroupingModule__GroupFrozenDueToAlreadyMintLicenseTokens" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "GroupingModule__GroupFrozenDueToHasDerivativeIps" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "GroupingModule__GroupIPHasNoLicenseTerms" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "GroupingModule__GroupIPLicenseHasNotSpecifyRevenueToken" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }, { name: "groupRewardPool", internalType: "address", type: "address" }], name: "GroupingModule__GroupRewardPoolNotWhitelisted" }, { type: "error", inputs: [{ name: "groupNFT", internalType: "address", type: "address" }], name: "GroupingModule__InvalidGroupNFT" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }, { name: "ipId", internalType: "address", type: "address" }, { name: "maxAllowedRewardShare", internalType: "uint256", type: "uint256" }, { name: "expectGroupRewardShare", internalType: "uint256", type: "uint256" }], name: "GroupingModule__IpExpectedShareExceedsMaxAllowedShare" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }, { name: "maxAllowedRewardShare", internalType: "uint256", type: "uint256" }], name: "GroupingModule__MaxAllowedRewardShareExceeds100Percent" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }, { name: "royaltyToken", internalType: "address", type: "address" }], name: "GroupingModule__RoyaltyTokenNotWhitelisted" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }, { name: "groupCurrentToken", internalType: "address", type: "address" }, { name: "token", internalType: "address", type: "address" }], name: "GroupingModule__TokenNotMatchGroupRevenueToken" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }, { name: "totalGroupRewardShare", internalType: "uint256", type: "uint256" }, { name: "ipId", internalType: "address", type: "address" }, { name: "expectGroupRewardShare", internalType: "uint256", type: "uint256" }], name: "GroupingModule__TotalGroupRewardShareExceeds100Percent" }, { type: "error", inputs: [], name: "GroupingModule__ZeroAccessManager" }, { type: "error", inputs: [], name: "GroupingModule__ZeroGroupNFT" }, { type: "error", inputs: [], name: "GroupingModule__ZeroGroupRewardPool" }, { type: "error", inputs: [], name: "GroupingModule__ZeroIpAssetRegistry" }, { type: "error", inputs: [], name: "GroupingModule__ZeroLicenseRegistry" }, { type: "error", inputs: [], name: "GroupingModule__ZeroLicenseToken" }, { type: "error", inputs: [], name: "GroupingModule__ZeroRoyaltyModule" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" }, { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" }, { type: "error", inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }], name: "UUPSUnsupportedProxiableUUID" }, { type: "event", anonymous: false, inputs: [{ name: "groupId", internalType: "address", type: "address", indexed: true }, { name: "ipIds", internalType: "address[]", type: "address[]", indexed: false }], name: "AddedIpToGroup" }, { type: "event", anonymous: false, inputs: [{ name: "authority", internalType: "address", type: "address", indexed: false }], name: "AuthorityUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "groupId", internalType: "address", type: "address", indexed: true }, { name: "token", internalType: "address", type: "address", indexed: true }, { name: "ipId", internalType: "address[]", type: "address[]", indexed: false }, { name: "amount", internalType: "uint256[]", type: "uint256[]", indexed: false }], name: "ClaimedReward" }, { type: "event", anonymous: false, inputs: [{ name: "groupId", internalType: "address", type: "address", indexed: true }, { name: "token", internalType: "address", type: "address", indexed: true }, { name: "pool", internalType: "address", type: "address", indexed: true }, { name: "amount", internalType: "uint256", type: "uint256", indexed: false }], name: "CollectedRoyaltiesToGroupPool" }, { type: "event", anonymous: false, inputs: [{ name: "groupId", internalType: "address", type: "address", indexed: true }, { name: "groupPool", internalType: "address", type: "address", indexed: true }], name: "IPGroupRegistered" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }], name: "Paused" }, { type: "event", anonymous: false, inputs: [{ name: "groupId", internalType: "address", type: "address", indexed: true }, { name: "ipIds", internalType: "address[]", type: "address[]", indexed: false }], name: "RemovedIpFromGroup" }, { type: "event", anonymous: false, inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }], name: "Unpaused" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "function", inputs: [], name: "ACCESS_CONTROLLER", outputs: [{ name: "", internalType: "contract IAccessController", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "DISPUTE_MODULE", outputs: [{ name: "", internalType: "contract IDisputeModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "GROUP_IP_ASSET_REGISTRY", outputs: [{ name: "", internalType: "contract IGroupIPAssetRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "GROUP_NFT", outputs: [{ name: "", internalType: "contract IGroupNFT", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_ASSET_REGISTRY", outputs: [{ name: "", internalType: "contract IIPAssetRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSE_REGISTRY", outputs: [{ name: "", internalType: "contract ILicenseRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSE_TOKEN", outputs: [{ name: "", internalType: "contract ILicenseToken", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "ROYALTY_MODULE", outputs: [{ name: "", internalType: "contract IRoyaltyModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "UPGRADE_INTERFACE_VERSION", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "__ProtocolPausable_init", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "groupIpId", internalType: "address", type: "address" }, { name: "ipIds", internalType: "address[]", type: "address[]" }, { name: "maxAllowedRewardShare", internalType: "uint256", type: "uint256" }], name: "addIp", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "authority", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "groupId", internalType: "address", type: "address" }, { name: "token", internalType: "address", type: "address" }, { name: "ipIds", internalType: "address[]", type: "address[]" }], name: "claimReward", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "groupId", internalType: "address", type: "address" }, { name: "token", internalType: "address", type: "address" }], name: "collectRoyalties", outputs: [{ name: "royalties", internalType: "uint256", type: "uint256" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "groupId", internalType: "address", type: "address" }, { name: "token", internalType: "address", type: "address" }, { name: "ipIds", internalType: "address[]", type: "address[]" }], name: "getClaimableReward", outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "isConsumingScheduledOp", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "pure" }, { type: "function", inputs: [], name: "pause", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "paused", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "groupPool", internalType: "address", type: "address" }], name: "registerGroup", outputs: [{ name: "groupId", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "groupIpId", internalType: "address", type: "address" }, { name: "ipIds", internalType: "address[]", type: "address[]" }], name: "removeIp", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newAuthority", internalType: "address", type: "address" }], name: "setAuthority", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }], name: "supportsInterface", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "unpause", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }, { type: "function", inputs: [{ name: "rewardPool", internalType: "address", type: "address" }, { name: "allowed", internalType: "bool", type: "bool" }], name: "whitelistGroupRewardPool", outputs: [], stateMutability: "nonpayable" }];
var groupingModuleAddress = { 1315: "0x69D3a7aa9edb72Bc226E745A7cCdd50D947b69Ac", 1514: "0x69D3a7aa9edb72Bc226E745A7cCdd50D947b69Ac" };
var groupingWorkflowsAbi = [{ type: "constructor", inputs: [{ name: "accessController", internalType: "address", type: "address" }, { name: "coreMetadataModule", internalType: "address", type: "address" }, { name: "groupingModule", internalType: "address", type: "address" }, { name: "groupNft", internalType: "address", type: "address" }, { name: "ipAssetRegistry", internalType: "address", type: "address" }, { name: "licenseRegistry", internalType: "address", type: "address" }, { name: "licensingModule", internalType: "address", type: "address" }, { name: "pilTemplate", internalType: "address", type: "address" }, { name: "royaltyModule", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "authority", internalType: "address", type: "address" }], name: "AccessManagedInvalidAuthority" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "delay", internalType: "uint32", type: "uint32" }], name: "AccessManagedRequiredDelay" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "AccessManagedUnauthorized" }, { type: "error", inputs: [{ name: "target", internalType: "address", type: "address" }], name: "AddressEmptyCode" }, { type: "error", inputs: [{ name: "implementation", internalType: "address", type: "address" }], name: "ERC1967InvalidImplementation" }, { type: "error", inputs: [], name: "ERC1967NonPayable" }, { type: "error", inputs: [], name: "FailedCall" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "signer", internalType: "address", type: "address" }], name: "GroupingWorkflows__CallerNotSigner" }, { type: "error", inputs: [], name: "GroupingWorkflows__NoLicenseData" }, { type: "error", inputs: [], name: "GroupingWorkflows__ZeroAddressParam" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [], name: "PermissionHelper__ModulesAndSelectorsMismatch" }, { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" }, { type: "error", inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }], name: "UUPSUnsupportedProxiableUUID" }, { type: "error", inputs: [], name: "Workflow__CallerNotAuthorizedToMint" }, { type: "event", anonymous: false, inputs: [{ name: "authority", internalType: "address", type: "address", indexed: false }], name: "AuthorityUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "function", inputs: [], name: "ACCESS_CONTROLLER", outputs: [{ name: "", internalType: "contract IAccessController", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "CORE_METADATA_MODULE", outputs: [{ name: "", internalType: "contract ICoreMetadataModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "GROUPING_MODULE", outputs: [{ name: "", internalType: "contract IGroupingModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "GROUP_NFT", outputs: [{ name: "", internalType: "contract GroupNFT", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_ASSET_REGISTRY", outputs: [{ name: "", internalType: "contract IIPAssetRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSE_REGISTRY", outputs: [{ name: "", internalType: "contract ILicenseRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSING_MODULE", outputs: [{ name: "", internalType: "contract ILicensingModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "PIL_TEMPLATE", outputs: [{ name: "", internalType: "contract IPILicenseTemplate", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "ROYALTY_MODULE", outputs: [{ name: "", internalType: "contract RoyaltyModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "UPGRADE_INTERFACE_VERSION", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [], name: "authority", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "groupIpId", internalType: "address", type: "address" }, { name: "currencyTokens", internalType: "address[]", type: "address[]" }, { name: "memberIpIds", internalType: "address[]", type: "address[]" }], name: "collectRoyaltiesAndClaimReward", outputs: [{ name: "collectedRoyalties", internalType: "uint256[]", type: "uint256[]" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "isConsumingScheduledOp", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "spgNftContract", internalType: "address", type: "address" }, { name: "groupId", internalType: "address", type: "address" }, { name: "recipient", internalType: "address", type: "address" }, { name: "maxAllowedRewardShare", internalType: "uint256", type: "uint256" }, { name: "licensesData", internalType: "struct WorkflowStructs.LicenseData[]", type: "tuple[]", components: [{ name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "licensingConfig", internalType: "struct Licensing.LicensingConfig", type: "tuple", components: [{ name: "isSet", internalType: "bool", type: "bool" }, { name: "mintingFee", internalType: "uint256", type: "uint256" }, { name: "licensingHook", internalType: "address", type: "address" }, { name: "hookData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "disabled", internalType: "bool", type: "bool" }, { name: "expectMinimumGroupRewardShare", internalType: "uint32", type: "uint32" }, { name: "expectGroupRewardPool", internalType: "address", type: "address" }] }] }, { name: "ipMetadata", internalType: "struct WorkflowStructs.IPMetadata", type: "tuple", components: [{ name: "ipMetadataURI", internalType: "string", type: "string" }, { name: "ipMetadataHash", internalType: "bytes32", type: "bytes32" }, { name: "nftMetadataURI", internalType: "string", type: "string" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }] }, { name: "sigAddToGroup", internalType: "struct WorkflowStructs.SignatureData", type: "tuple", components: [{ name: "signer", internalType: "address", type: "address" }, { name: "deadline", internalType: "uint256", type: "uint256" }, { name: "signature", internalType: "bytes", type: "bytes" }] }, { name: "allowDuplicates", internalType: "bool", type: "bool" }], name: "mintAndRegisterIpAndAttachLicenseAndAddToGroup", outputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }], name: "multicall", outputs: [{ name: "results", internalType: "bytes[]", type: "bytes[]" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "", internalType: "address", type: "address" }, { name: "", internalType: "address", type: "address" }, { name: "", internalType: "uint256", type: "uint256" }, { name: "", internalType: "bytes", type: "bytes" }], name: "onERC721Received", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "groupPool", internalType: "address", type: "address" }, { name: "licenseData", internalType: "struct WorkflowStructs.LicenseData", type: "tuple", components: [{ name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "licensingConfig", internalType: "struct Licensing.LicensingConfig", type: "tuple", components: [{ name: "isSet", internalType: "bool", type: "bool" }, { name: "mintingFee", internalType: "uint256", type: "uint256" }, { name: "licensingHook", internalType: "address", type: "address" }, { name: "hookData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "disabled", internalType: "bool", type: "bool" }, { name: "expectMinimumGroupRewardShare", internalType: "uint32", type: "uint32" }, { name: "expectGroupRewardPool", internalType: "address", type: "address" }] }] }], name: "registerGroupAndAttachLicense", outputs: [{ name: "groupId", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "groupPool", internalType: "address", type: "address" }, { name: "ipIds", internalType: "address[]", type: "address[]" }, { name: "maxAllowedRewardShare", internalType: "uint256", type: "uint256" }, { name: "licenseData", internalType: "struct WorkflowStructs.LicenseData", type: "tuple", components: [{ name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "licensingConfig", internalType: "struct Licensing.LicensingConfig", type: "tuple", components: [{ name: "isSet", internalType: "bool", type: "bool" }, { name: "mintingFee", internalType: "uint256", type: "uint256" }, { name: "licensingHook", internalType: "address", type: "address" }, { name: "hookData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "disabled", internalType: "bool", type: "bool" }, { name: "expectMinimumGroupRewardShare", internalType: "uint32", type: "uint32" }, { name: "expectGroupRewardPool", internalType: "address", type: "address" }] }] }], name: "registerGroupAndAttachLicenseAndAddIps", outputs: [{ name: "groupId", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "nftContract", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }, { name: "groupId", internalType: "address", type: "address" }, { name: "maxAllowedRewardShare", internalType: "uint256", type: "uint256" }, { name: "licensesData", internalType: "struct WorkflowStructs.LicenseData[]", type: "tuple[]", components: [{ name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "licensingConfig", internalType: "struct Licensing.LicensingConfig", type: "tuple", components: [{ name: "isSet", internalType: "bool", type: "bool" }, { name: "mintingFee", internalType: "uint256", type: "uint256" }, { name: "licensingHook", internalType: "address", type: "address" }, { name: "hookData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "disabled", internalType: "bool", type: "bool" }, { name: "expectMinimumGroupRewardShare", internalType: "uint32", type: "uint32" }, { name: "expectGroupRewardPool", internalType: "address", type: "address" }] }] }, { name: "ipMetadata", internalType: "struct WorkflowStructs.IPMetadata", type: "tuple", components: [{ name: "ipMetadataURI", internalType: "string", type: "string" }, { name: "ipMetadataHash", internalType: "bytes32", type: "bytes32" }, { name: "nftMetadataURI", internalType: "string", type: "string" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }] }, { name: "sigMetadataAndAttachAndConfig", internalType: "struct WorkflowStructs.SignatureData", type: "tuple", components: [{ name: "signer", internalType: "address", type: "address" }, { name: "deadline", internalType: "uint256", type: "uint256" }, { name: "signature", internalType: "bytes", type: "bytes" }] }, { name: "sigAddToGroup", internalType: "struct WorkflowStructs.SignatureData", type: "tuple", components: [{ name: "signer", internalType: "address", type: "address" }, { name: "deadline", internalType: "uint256", type: "uint256" }, { name: "signature", internalType: "bytes", type: "bytes" }] }], name: "registerIpAndAttachLicenseAndAddToGroup", outputs: [{ name: "ipId", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newAuthority", internalType: "address", type: "address" }], name: "setAuthority", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }];
var groupingWorkflowsAddress = { 1315: "0xD7c0beb3aa4DCD4723465f1ecAd045676c24CDCd", 1514: "0xD7c0beb3aa4DCD4723465f1ecAd045676c24CDCd" };
var ipAccountImplAbi = [{ type: "constructor", inputs: [{ name: "accessController", internalType: "address", type: "address" }, { name: "ipAssetRegistry", internalType: "address", type: "address" }, { name: "licenseRegistry", internalType: "address", type: "address" }, { name: "moduleRegistry", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [], name: "FnSelectorNotRecognized" }, { type: "error", inputs: [], name: "IPAccountStorage__InvalidBatchLengths" }, { type: "error", inputs: [{ name: "module", internalType: "address", type: "address" }], name: "IPAccountStorage__NotRegisteredModule" }, { type: "error", inputs: [], name: "IPAccountStorage__ZeroIpAssetRegistry" }, { type: "error", inputs: [], name: "IPAccountStorage__ZeroLicenseRegistry" }, { type: "error", inputs: [], name: "IPAccountStorage__ZeroModuleRegistry" }, { type: "error", inputs: [], name: "IPAccount__ExpiredSignature" }, { type: "error", inputs: [], name: "IPAccount__InvalidCalldata" }, { type: "error", inputs: [], name: "IPAccount__InvalidOperation" }, { type: "error", inputs: [], name: "IPAccount__InvalidSignature" }, { type: "error", inputs: [], name: "IPAccount__InvalidSigner" }, { type: "error", inputs: [], name: "IPAccount__UUPSUpgradeDisabled" }, { type: "error", inputs: [], name: "IPAccount__ZeroAccessController" }, { type: "error", inputs: [], name: "OperationNotSupported" }, { type: "error", inputs: [], name: "SelfOwnDetected" }, { type: "error", inputs: [], name: "Unauthorized" }, { type: "error", inputs: [], name: "UnauthorizedCallContext" }, { type: "error", inputs: [], name: "UpgradeFailed" }, { type: "event", anonymous: false, inputs: [{ name: "to", internalType: "address", type: "address", indexed: true }, { name: "value", internalType: "uint256", type: "uint256", indexed: false }, { name: "data", internalType: "bytes", type: "bytes", indexed: false }, { name: "nonce", internalType: "bytes32", type: "bytes32", indexed: false }], name: "Executed" }, { type: "event", anonymous: false, inputs: [{ name: "to", internalType: "address", type: "address", indexed: true }, { name: "value", internalType: "uint256", type: "uint256", indexed: false }, { name: "data", internalType: "bytes", type: "bytes", indexed: false }, { name: "nonce", internalType: "bytes32", type: "bytes32", indexed: false }, { name: "deadline", internalType: "uint256", type: "uint256", indexed: false }, { name: "signer", internalType: "address", type: "address", indexed: true }, { name: "signature", internalType: "bytes", type: "bytes", indexed: false }], name: "ExecutedWithSig" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "fallback", stateMutability: "payable" }, { type: "function", inputs: [], name: "ACCESS_CONTROLLER", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_ASSET_REGISTRY", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSE_REGISTRY", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "MODULE_REGISTRY", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }, { name: "", internalType: "bytes32", type: "bytes32" }], name: "bytes32Data", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }, { name: "", internalType: "bytes32", type: "bytes32" }], name: "bytesData", outputs: [{ name: "", internalType: "bytes", type: "bytes" }], stateMutability: "view" }, { type: "function", inputs: [], name: "eip712Domain", outputs: [{ name: "fields", internalType: "bytes1", type: "bytes1" }, { name: "name", internalType: "string", type: "string" }, { name: "version", internalType: "string", type: "string" }, { name: "chainId", internalType: "uint256", type: "uint256" }, { name: "verifyingContract", internalType: "address", type: "address" }, { name: "salt", internalType: "bytes32", type: "bytes32" }, { name: "extensions", internalType: "uint256[]", type: "uint256[]" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "to", internalType: "address", type: "address" }, { name: "value", internalType: "uint256", type: "uint256" }, { name: "data", internalType: "bytes", type: "bytes" }, { name: "operation", internalType: "uint8", type: "uint8" }], name: "execute", outputs: [{ name: "result", internalType: "bytes", type: "bytes" }], stateMutability: "payable" }, { type: "function", inputs: [{ name: "to", internalType: "address", type: "address" }, { name: "value", internalType: "uint256", type: "uint256" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "execute", outputs: [{ name: "result", internalType: "bytes", type: "bytes" }], stateMutability: "payable" }, { type: "function", inputs: [{ name: "calls", internalType: "struct ERC6551.Call[]", type: "tuple[]", components: [{ name: "target", internalType: "address", type: "address" }, { name: "value", internalType: "uint256", type: "uint256" }, { name: "data", internalType: "bytes", type: "bytes" }] }, { name: "operation", internalType: "uint8", type: "uint8" }], name: "executeBatch", outputs: [{ name: "results", internalType: "bytes[]", type: "bytes[]" }], stateMutability: "payable" }, { type: "function", inputs: [{ name: "to", internalType: "address", type: "address" }, { name: "value", internalType: "uint256", type: "uint256" }, { name: "data", internalType: "bytes", type: "bytes" }, { name: "signer", internalType: "address", type: "address" }, { name: "deadline", internalType: "uint256", type: "uint256" }, { name: "signature", internalType: "bytes", type: "bytes" }], name: "executeWithSig", outputs: [{ name: "result", internalType: "bytes", type: "bytes" }], stateMutability: "payable" }, { type: "function", inputs: [{ name: "key", internalType: "bytes32", type: "bytes32" }], name: "getBytes", outputs: [{ name: "", internalType: "bytes", type: "bytes" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "namespace", internalType: "bytes32", type: "bytes32" }, { name: "key", internalType: "bytes32", type: "bytes32" }], name: "getBytes", outputs: [{ name: "", internalType: "bytes", type: "bytes" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "namespace", internalType: "bytes32", type: "bytes32" }, { name: "key", internalType: "bytes32", type: "bytes32" }], name: "getBytes32", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "key", internalType: "bytes32", type: "bytes32" }], name: "getBytes32", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "namespaces", internalType: "bytes32[]", type: "bytes32[]" }, { name: "keys", internalType: "bytes32[]", type: "bytes32[]" }], name: "getBytes32Batch", outputs: [{ name: "values", internalType: "bytes32[]", type: "bytes32[]" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "namespaces", internalType: "bytes32[]", type: "bytes32[]" }, { name: "keys", internalType: "bytes32[]", type: "bytes32[]" }], name: "getBytesBatch", outputs: [{ name: "values", internalType: "bytes[]", type: "bytes[]" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "hash", internalType: "bytes32", type: "bytes32" }, { name: "signature", internalType: "bytes", type: "bytes" }], name: "isValidSignature", outputs: [{ name: "result", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "signer", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "isValidSigner", outputs: [{ name: "result", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "signer", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "isValidSigner", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "owner", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "key", internalType: "bytes32", type: "bytes32" }, { name: "value", internalType: "bytes", type: "bytes" }], name: "setBytes", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "key", internalType: "bytes32", type: "bytes32" }, { name: "value", internalType: "bytes32", type: "bytes32" }], name: "setBytes32", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "keys", internalType: "bytes32[]", type: "bytes32[]" }, { name: "values", internalType: "bytes32[]", type: "bytes32[]" }], name: "setBytes32Batch", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "keys", internalType: "bytes32[]", type: "bytes32[]" }, { name: "values", internalType: "bytes[]", type: "bytes[]" }], name: "setBytesBatch", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "state", outputs: [{ name: "result", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }], name: "supportsInterface", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "token", outputs: [{ name: "", internalType: "uint256", type: "uint256" }, { name: "", internalType: "address", type: "address" }, { name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }, { type: "receive", stateMutability: "payable" }];
var ipAccountImplAddress = { 1315: "0x7343646585443F1c3F64E4F08b708788527e1C77", 1514: "0x7343646585443F1c3F64E4F08b708788527e1C77" };
var ipAssetRegistryAbi = [{ type: "constructor", inputs: [{ name: "erc6551Registry", internalType: "address", type: "address" }, { name: "ipAccountImpl", internalType: "address", type: "address" }, { name: "groupingModule", internalType: "address", type: "address" }, { name: "ipAccountImplBeacon", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "authority", internalType: "address", type: "address" }], name: "AccessManagedInvalidAuthority" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "delay", internalType: "uint32", type: "uint32" }], name: "AccessManagedRequiredDelay" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "AccessManagedUnauthorized" }, { type: "error", inputs: [{ name: "target", internalType: "address", type: "address" }], name: "AddressEmptyCode" }, { type: "error", inputs: [{ name: "implementation", internalType: "address", type: "address" }], name: "ERC1967InvalidImplementation" }, { type: "error", inputs: [], name: "ERC1967NonPayable" }, { type: "error", inputs: [], name: "EnforcedPause" }, { type: "error", inputs: [], name: "ExpectedPause" }, { type: "error", inputs: [], name: "FailedCall" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "GroupIPAssetRegistry__CallerIsNotGroupingModule" }, { type: "error", inputs: [{ name: "groupPool", internalType: "address", type: "address" }], name: "GroupIPAssetRegistry__GroupRewardPoolNotRegistered" }, { type: "error", inputs: [{ name: "groupSize", internalType: "uint256", type: "uint256" }, { name: "limit", internalType: "uint256", type: "uint256" }], name: "GroupIPAssetRegistry__GroupSizeExceedsLimit" }, { type: "error", inputs: [{ name: "rewardPool", internalType: "address", type: "address" }], name: "GroupIPAssetRegistry__InvalidGroupRewardPool" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "GroupIPAssetRegistry__NotRegisteredGroupIP" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "GroupIPAssetRegistry__NotRegisteredIP" }, { type: "error", inputs: [{ name: "pageSize", internalType: "uint256", type: "uint256" }, { name: "limit", internalType: "uint256", type: "uint256" }], name: "GroupIPAssetRegistry__PageSizeExceedsLimit" }, { type: "error", inputs: [], name: "IPAccountRegistry_ZeroERC6551Registry" }, { type: "error", inputs: [], name: "IPAccountRegistry_ZeroIpAccountImpl" }, { type: "error", inputs: [], name: "IPAccountRegistry_ZeroIpAccountImplBeacon" }, { type: "error", inputs: [{ name: "contractAddress", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }], name: "IPAssetRegistry__InvalidToken" }, { type: "error", inputs: [{ name: "contractAddress", internalType: "address", type: "address" }], name: "IPAssetRegistry__UnsupportedIERC721" }, { type: "error", inputs: [{ name: "contractAddress", internalType: "address", type: "address" }], name: "IPAssetRegistry__UnsupportedIERC721Metadata" }, { type: "error", inputs: [], name: "IPAssetRegistry__ZeroAccessManager" }, { type: "error", inputs: [{ name: "name", internalType: "string", type: "string" }], name: "IPAssetRegistry__ZeroAddress" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [{ name: "token", internalType: "address", type: "address" }], name: "SafeERC20FailedOperation" }, { type: "error", inputs: [{ name: "value", internalType: "uint256", type: "uint256" }, { name: "length", internalType: "uint256", type: "uint256" }], name: "StringsInsufficientHexLength" }, { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" }, { type: "error", inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }], name: "UUPSUnsupportedProxiableUUID" }, { type: "event", anonymous: false, inputs: [{ name: "authority", internalType: "address", type: "address", indexed: false }], name: "AuthorityUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "account", internalType: "address", type: "address", indexed: true }, { name: "implementation", internalType: "address", type: "address", indexed: true }, { name: "chainId", internalType: "uint256", type: "uint256", indexed: true }, { name: "tokenContract", internalType: "address", type: "address", indexed: false }, { name: "tokenId", internalType: "uint256", type: "uint256", indexed: false }], name: "IPAccountRegistered" }, { type: "event", anonymous: false, inputs: [{ name: "ipId", internalType: "address", type: "address", indexed: false }, { name: "chainId", internalType: "uint256", type: "uint256", indexed: true }, { name: "tokenContract", internalType: "address", type: "address", indexed: true }, { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true }, { name: "name", internalType: "string", type: "string", indexed: false }, { name: "uri", internalType: "string", type: "string", indexed: false }, { name: "registrationDate", internalType: "uint256", type: "uint256", indexed: false }], name: "IPRegistered" }, { type: "event", anonymous: false, inputs: [{ name: "payer", internalType: "address", type: "address", indexed: true }, { name: "treasury", internalType: "address", type: "address", indexed: true }, { name: "feeToken", internalType: "address", type: "address", indexed: true }, { name: "amount", internalType: "uint96", type: "uint96", indexed: false }], name: "IPRegistrationFeePaid" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }], name: "Paused" }, { type: "event", anonymous: false, inputs: [{ name: "treasury", internalType: "address", type: "address", indexed: true }, { name: "feeToken", internalType: "address", type: "address", indexed: true }, { name: "feeAmount", internalType: "uint96", type: "uint96", indexed: false }], name: "RegistrationFeeSet" }, { type: "event", anonymous: false, inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }], name: "Unpaused" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "function", inputs: [], name: "ERC6551_PUBLIC_REGISTRY", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "GROUPING_MODULE", outputs: [{ name: "", internalType: "contract IGroupingModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_ACCOUNT_IMPL", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_ACCOUNT_IMPL_UPGRADEABLE_BEACON", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_ACCOUNT_SALT", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [], name: "MAX_GROUP_SIZE", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "UPGRADE_INTERFACE_VERSION", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "__ProtocolPausable_init", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "groupId", internalType: "address", type: "address" }, { name: "ipIds", internalType: "address[]", type: "address[]" }], name: "addGroupMember", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "authority", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "groupId", internalType: "address", type: "address" }, { name: "ipId", internalType: "address", type: "address" }], name: "containsIp", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "getFeeAmount", outputs: [{ name: "", internalType: "uint96", type: "uint96" }], stateMutability: "view" }, { type: "function", inputs: [], name: "getFeeToken", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "groupId", internalType: "address", type: "address" }, { name: "startIndex", internalType: "uint256", type: "uint256" }, { name: "size", internalType: "uint256", type: "uint256" }], name: "getGroupMembers", outputs: [{ name: "results", internalType: "address[]", type: "address[]" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "getGroupRewardPool", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "getIPAccountImpl", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "getTreasury", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "chainId", internalType: "uint256", type: "uint256" }, { name: "tokenContract", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }], name: "ipAccount", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "chainId", internalType: "uint256", type: "uint256" }, { name: "tokenContract", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }], name: "ipId", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "isConsumingScheduledOp", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "id", internalType: "address", type: "address" }], name: "isRegistered", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "isRegisteredGroup", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "rewardPool", internalType: "address", type: "address" }], name: "isWhitelistedGroupRewardPool", outputs: [{ name: "isWhitelisted", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "pause", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "paused", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "chainid", internalType: "uint256", type: "uint256" }, { name: "tokenContract", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }], name: "register", outputs: [{ name: "id", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "groupNft", internalType: "address", type: "address" }, { name: "groupNftId", internalType: "uint256", type: "uint256" }, { name: "rewardPool", internalType: "address", type: "address" }, { name: "registerFeePayer", internalType: "address", type: "address" }], name: "registerGroup", outputs: [{ name: "groupId", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "groupId", internalType: "address", type: "address" }, { name: "ipIds", internalType: "address[]", type: "address[]" }], name: "removeGroupMember", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newAuthority", internalType: "address", type: "address" }], name: "setAuthority", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "treasury", internalType: "address", type: "address" }, { name: "feeToken", internalType: "address", type: "address" }, { name: "feeAmount", internalType: "uint96", type: "uint96" }], name: "setRegistrationFee", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "totalMembers", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "totalSupply", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "unpause", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newIpAccountImpl", internalType: "address", type: "address" }], name: "upgradeIPAccountImpl", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }, { type: "function", inputs: [{ name: "rewardPool", internalType: "address", type: "address" }, { name: "allowed", internalType: "bool", type: "bool" }], name: "whitelistGroupRewardPool", outputs: [], stateMutability: "nonpayable" }];
var ipAssetRegistryAddress = { 1315: "0x77319B4031e6eF1250907aa00018B8B1c67a244b", 1514: "0x77319B4031e6eF1250907aa00018B8B1c67a244b" };
var ipRoyaltyVaultImplAbi = [{ type: "constructor", inputs: [{ name: "disputeModule", internalType: "address", type: "address" }, { name: "royaltyModule", internalType: "address", type: "address" }, { name: "ipAssetRegistry", internalType: "address", type: "address" }, { name: "groupingModule", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "spender", internalType: "address", type: "address" }, { name: "allowance", internalType: "uint256", type: "uint256" }, { name: "needed", internalType: "uint256", type: "uint256" }], name: "ERC20InsufficientAllowance" }, { type: "error", inputs: [{ name: "sender", internalType: "address", type: "address" }, { name: "balance", internalType: "uint256", type: "uint256" }, { name: "needed", internalType: "uint256", type: "uint256" }], name: "ERC20InsufficientBalance" }, { type: "error", inputs: [{ name: "approver", internalType: "address", type: "address" }], name: "ERC20InvalidApprover" }, { type: "error", inputs: [{ name: "receiver", internalType: "address", type: "address" }], name: "ERC20InvalidReceiver" }, { type: "error", inputs: [{ name: "sender", internalType: "address", type: "address" }], name: "ERC20InvalidSender" }, { type: "error", inputs: [{ name: "spender", internalType: "address", type: "address" }], name: "ERC20InvalidSpender" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [], name: "IpRoyaltyVault__EnforcedPause" }, { type: "error", inputs: [], name: "IpRoyaltyVault__GroupPoolMustClaimViaGroupingModule" }, { type: "error", inputs: [{ name: "vault", internalType: "address", type: "address" }, { name: "account", internalType: "address", type: "address" }, { name: "amount", internalType: "uint256", type: "uint256" }], name: "IpRoyaltyVault__InsufficientBalance" }, { type: "error", inputs: [], name: "IpRoyaltyVault__InvalidTargetIpId" }, { type: "error", inputs: [], name: "IpRoyaltyVault__NegativeValueUnsafeCastingToUint256" }, { type: "error", inputs: [], name: "IpRoyaltyVault__NoClaimableTokens" }, { type: "error", inputs: [], name: "IpRoyaltyVault__NotAllowedToAddTokenToVault" }, { type: "error", inputs: [], name: "IpRoyaltyVault__NotWhitelistedRoyaltyToken" }, { type: "error", inputs: [{ name: "vault", internalType: "address", type: "address" }, { name: "from", internalType: "address", type: "address" }], name: "IpRoyaltyVault__SameFromToAddress" }, { type: "error", inputs: [], name: "IpRoyaltyVault__VaultDoesNotBelongToAnAncestor" }, { type: "error", inputs: [], name: "IpRoyaltyVault__VaultsMustClaimAsSelf" }, { type: "error", inputs: [], name: "IpRoyaltyVault__ZeroAmount" }, { type: "error", inputs: [{ name: "vault", internalType: "address", type: "address" }, { name: "account", internalType: "address", type: "address" }], name: "IpRoyaltyVault__ZeroBalance" }, { type: "error", inputs: [], name: "IpRoyaltyVault__ZeroDisputeModule" }, { type: "error", inputs: [], name: "IpRoyaltyVault__ZeroGroupingModule" }, { type: "error", inputs: [], name: "IpRoyaltyVault__ZeroIpAssetRegistry" }, { type: "error", inputs: [], name: "IpRoyaltyVault__ZeroRoyaltyModule" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" }, { type: "error", inputs: [{ name: "token", internalType: "address", type: "address" }], name: "SafeERC20FailedOperation" }, { type: "event", anonymous: false, inputs: [{ name: "owner", internalType: "address", type: "address", indexed: true }, { name: "spender", internalType: "address", type: "address", indexed: true }, { name: "value", internalType: "uint256", type: "uint256", indexed: false }], name: "Approval" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "claimer", internalType: "address", type: "address", indexed: false }, { name: "token", internalType: "address", type: "address", indexed: false }, { name: "revenueDebt", internalType: "int256", type: "int256", indexed: false }], name: "RevenueDebtUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "token", internalType: "address", type: "address", indexed: false }, { name: "amount", internalType: "uint256", type: "uint256", indexed: false }], name: "RevenueTokenAddedToVault" }, { type: "event", anonymous: false, inputs: [{ name: "claimer", internalType: "address", type: "address", indexed: false }, { name: "token", internalType: "address", type: "address", indexed: false }, { name: "amount", internalType: "uint256", type: "uint256", indexed: false }], name: "RevenueTokenClaimed" }, { type: "event", anonymous: false, inputs: [{ name: "from", internalType: "address", type: "address", indexed: true }, { name: "to", internalType: "address", type: "address", indexed: true }, { name: "value", internalType: "uint256", type: "uint256", indexed: false }], name: "Transfer" }, { type: "function", inputs: [], name: "DISPUTE_MODULE", outputs: [{ name: "", internalType: "contract IDisputeModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "GROUPING_MODULE", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_ASSET_REGISTRY", outputs: [{ name: "", internalType: "contract IGroupIPAssetRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "ROYALTY_MODULE", outputs: [{ name: "", internalType: "contract IRoyaltyModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "owner", internalType: "address", type: "address" }, { name: "spender", internalType: "address", type: "address" }], name: "allowance", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "spender", internalType: "address", type: "address" }, { name: "value", internalType: "uint256", type: "uint256" }], name: "approve", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "account", internalType: "address", type: "address" }], name: "balanceOf", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "tokenList", internalType: "address[]", type: "address[]" }, { name: "targetIpId", internalType: "address", type: "address" }], name: "claimByTokenBatchAsSelf", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "claimer", internalType: "address", type: "address" }, { name: "token", internalType: "address", type: "address" }], name: "claimRevenueOnBehalf", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "claimer", internalType: "address", type: "address" }, { name: "tokenList", internalType: "address[]", type: "address[]" }], name: "claimRevenueOnBehalfByTokenBatch", outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "claimer", internalType: "address", type: "address" }, { name: "token", internalType: "address", type: "address" }], name: "claimableRevenue", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "claimer", internalType: "address", type: "address" }, { name: "token", internalType: "address", type: "address" }], name: "claimerRevenueDebt", outputs: [{ name: "", internalType: "int256", type: "int256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "decimals", outputs: [{ name: "", internalType: "uint8", type: "uint8" }], stateMutability: "pure" }, { type: "function", inputs: [{ name: "name", internalType: "string", type: "string" }, { name: "symbol", internalType: "string", type: "string" }, { name: "supply", internalType: "uint32", type: "uint32" }, { name: "ipIdAddress", internalType: "address", type: "address" }, { name: "rtReceiver", internalType: "address", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "ipId", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [], name: "symbol", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [], name: "tokens", outputs: [{ name: "", internalType: "address[]", type: "address[]" }], stateMutability: "view" }, { type: "function", inputs: [], name: "totalSupply", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "to", internalType: "address", type: "address" }, { name: "value", internalType: "uint256", type: "uint256" }], name: "transfer", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "from", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }, { name: "value", internalType: "uint256", type: "uint256" }], name: "transferFrom", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "token", internalType: "address", type: "address" }, { name: "amount", internalType: "uint256", type: "uint256" }], name: "updateVaultBalance", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "token", internalType: "address", type: "address" }], name: "vaultAccBalances", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }];
var ipRoyaltyVaultImplAddress = { 1315: "0x73e2D097F71e5103824abB6562362106A8955AEc", 1514: "0x63cC7611316880213f3A4Ba9bD72b0EaA2010298" };
var licenseAttachmentWorkflowsAbi = [{ type: "constructor", inputs: [{ name: "accessController", internalType: "address", type: "address" }, { name: "coreMetadataModule", internalType: "address", type: "address" }, { name: "ipAssetRegistry", internalType: "address", type: "address" }, { name: "licenseRegistry", internalType: "address", type: "address" }, { name: "licensingModule", internalType: "address", type: "address" }, { name: "pilTemplate", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "authority", internalType: "address", type: "address" }], name: "AccessManagedInvalidAuthority" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "delay", internalType: "uint32", type: "uint32" }], name: "AccessManagedRequiredDelay" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "AccessManagedUnauthorized" }, { type: "error", inputs: [{ name: "target", internalType: "address", type: "address" }], name: "AddressEmptyCode" }, { type: "error", inputs: [{ name: "implementation", internalType: "address", type: "address" }], name: "ERC1967InvalidImplementation" }, { type: "error", inputs: [], name: "ERC1967NonPayable" }, { type: "error", inputs: [], name: "FailedCall" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "signer", internalType: "address", type: "address" }], name: "LicenseAttachmentWorkflows__CallerNotSigner" }, { type: "error", inputs: [], name: "LicenseAttachmentWorkflows__NoLicenseTermsData" }, { type: "error", inputs: [], name: "LicenseAttachmentWorkflows__ZeroAddressParam" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [], name: "PermissionHelper__ModulesAndSelectorsMismatch" }, { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" }, { type: "error", inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }], name: "UUPSUnsupportedProxiableUUID" }, { type: "error", inputs: [], name: "Workflow__CallerNotAuthorizedToMint" }, { type: "event", anonymous: false, inputs: [{ name: "authority", internalType: "address", type: "address", indexed: false }], name: "AuthorityUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "function", inputs: [], name: "ACCESS_CONTROLLER", outputs: [{ name: "", internalType: "contract IAccessController", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "CORE_METADATA_MODULE", outputs: [{ name: "", internalType: "contract ICoreMetadataModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_ASSET_REGISTRY", outputs: [{ name: "", internalType: "contract IIPAssetRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSE_REGISTRY", outputs: [{ name: "", internalType: "contract ILicenseRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSING_MODULE", outputs: [{ name: "", internalType: "contract ILicensingModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "PIL_TEMPLATE", outputs: [{ name: "", internalType: "contract IPILicenseTemplate", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "UPGRADE_INTERFACE_VERSION", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [], name: "authority", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "isConsumingScheduledOp", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "spgNftContract", internalType: "address", type: "address" }, { name: "recipient", internalType: "address", type: "address" }, { name: "ipMetadata", internalType: "struct WorkflowStructs.IPMetadata", type: "tuple", components: [{ name: "ipMetadataURI", internalType: "string", type: "string" }, { name: "ipMetadataHash", internalType: "bytes32", type: "bytes32" }, { name: "nftMetadataURI", internalType: "string", type: "string" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }] }, { name: "allowDuplicates", internalType: "bool", type: "bool" }], name: "mintAndRegisterIpAndAttachDefaultTerms", outputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "spgNftContract", internalType: "address", type: "address" }, { name: "recipient", internalType: "address", type: "address" }, { name: "ipMetadata", internalType: "struct WorkflowStructs.IPMetadata", type: "tuple", components: [{ name: "ipMetadataURI", internalType: "string", type: "string" }, { name: "ipMetadataHash", internalType: "bytes32", type: "bytes32" }, { name: "nftMetadataURI", internalType: "string", type: "string" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }] }, { name: "licenseTermsData", internalType: "struct WorkflowStructs.LicenseTermsData[]", type: "tuple[]", components: [{ name: "terms", internalType: "struct PILTerms", type: "tuple", components: [{ name: "transferable", internalType: "bool", type: "bool" }, { name: "royaltyPolicy", internalType: "address", type: "address" }, { name: "defaultMintingFee", internalType: "uint256", type: "uint256" }, { name: "expiration", internalType: "uint256", type: "uint256" }, { name: "commercialUse", internalType: "bool", type: "bool" }, { name: "commercialAttribution", internalType: "bool", type: "bool" }, { name: "commercializerChecker", internalType: "address", type: "address" }, { name: "commercializerCheckerData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "commercialRevCeiling", internalType: "uint256", type: "uint256" }, { name: "derivativesAllowed", internalType: "bool", type: "bool" }, { name: "derivativesAttribution", internalType: "bool", type: "bool" }, { name: "derivativesApproval", internalType: "bool", type: "bool" }, { name: "derivativesReciprocal", internalType: "bool", type: "bool" }, { name: "derivativeRevCeiling", internalType: "uint256", type: "uint256" }, { name: "currency", internalType: "address", type: "address" }, { name: "uri", internalType: "string", type: "string" }] }, { name: "licensingConfig", internalType: "struct Licensing.LicensingConfig", type: "tuple", components: [{ name: "isSet", internalType: "bool", type: "bool" }, { name: "mintingFee", internalType: "uint256", type: "uint256" }, { name: "licensingHook", internalType: "address", type: "address" }, { name: "hookData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "disabled", internalType: "bool", type: "bool" }, { name: "expectMinimumGroupRewardShare", internalType: "uint32", type: "uint32" }, { name: "expectGroupRewardPool", internalType: "address", type: "address" }] }] }, { name: "allowDuplicates", internalType: "bool", type: "bool" }], name: "mintAndRegisterIpAndAttachPILTerms", outputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }, { name: "licenseTermsIds", internalType: "uint256[]", type: "uint256[]" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }], name: "multicall", outputs: [{ name: "results", internalType: "bytes[]", type: "bytes[]" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "", internalType: "address", type: "address" }, { name: "", internalType: "address", type: "address" }, { name: "", internalType: "uint256", type: "uint256" }, { name: "", internalType: "bytes", type: "bytes" }], name: "onERC721Received", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "nftContract", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }, { name: "ipMetadata", internalType: "struct WorkflowStructs.IPMetadata", type: "tuple", components: [{ name: "ipMetadataURI", internalType: "string", type: "string" }, { name: "ipMetadataHash", internalType: "bytes32", type: "bytes32" }, { name: "nftMetadataURI", internalType: "string", type: "string" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }] }, { name: "sigMetadataAndDefaultTerms", internalType: "struct WorkflowStructs.SignatureData", type: "tuple", components: [{ name: "signer", internalType: "address", type: "address" }, { name: "deadline", internalType: "uint256", type: "uint256" }, { name: "signature", internalType: "bytes", type: "bytes" }] }], name: "registerIpAndAttachDefaultTerms", outputs: [{ name: "ipId", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "nftContract", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }, { name: "ipMetadata", internalType: "struct WorkflowStructs.IPMetadata", type: "tuple", components: [{ name: "ipMetadataURI", internalType: "string", type: "string" }, { name: "ipMetadataHash", internalType: "bytes32", type: "bytes32" }, { name: "nftMetadataURI", internalType: "string", type: "string" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }] }, { name: "licenseTermsData", internalType: "struct WorkflowStructs.LicenseTermsData[]", type: "tuple[]", components: [{ name: "terms", internalType: "struct PILTerms", type: "tuple", components: [{ name: "transferable", internalType: "bool", type: "bool" }, { name: "royaltyPolicy", internalType: "address", type: "address" }, { name: "defaultMintingFee", internalType: "uint256", type: "uint256" }, { name: "expiration", internalType: "uint256", type: "uint256" }, { name: "commercialUse", internalType: "bool", type: "bool" }, { name: "commercialAttribution", internalType: "bool", type: "bool" }, { name: "commercializerChecker", internalType: "address", type: "address" }, { name: "commercializerCheckerData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "commercialRevCeiling", internalType: "uint256", type: "uint256" }, { name: "derivativesAllowed", internalType: "bool", type: "bool" }, { name: "derivativesAttribution", internalType: "bool", type: "bool" }, { name: "derivativesApproval", internalType: "bool", type: "bool" }, { name: "derivativesReciprocal", internalType: "bool", type: "bool" }, { name: "derivativeRevCeiling", internalType: "uint256", type: "uint256" }, { name: "currency", internalType: "address", type: "address" }, { name: "uri", internalType: "string", type: "string" }] }, { name: "licensingConfig", internalType: "struct Licensing.LicensingConfig", type: "tuple", components: [{ name: "isSet", internalType: "bool", type: "bool" }, { name: "mintingFee", internalType: "uint256", type: "uint256" }, { name: "licensingHook", internalType: "address", type: "address" }, { name: "hookData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "disabled", internalType: "bool", type: "bool" }, { name: "expectMinimumGroupRewardShare", internalType: "uint32", type: "uint32" }, { name: "expectGroupRewardPool", internalType: "address", type: "address" }] }] }, { name: "sigMetadataAndAttachAndConfig", internalType: "struct WorkflowStructs.SignatureData", type: "tuple", components: [{ name: "signer", internalType: "address", type: "address" }, { name: "deadline", internalType: "uint256", type: "uint256" }, { name: "signature", internalType: "bytes", type: "bytes" }] }], name: "registerIpAndAttachPILTerms", outputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licenseTermsIds", internalType: "uint256[]", type: "uint256[]" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licenseTermsData", internalType: "struct WorkflowStructs.LicenseTermsData[]", type: "tuple[]", components: [{ name: "terms", internalType: "struct PILTerms", type: "tuple", components: [{ name: "transferable", internalType: "bool", type: "bool" }, { name: "royaltyPolicy", internalType: "address", type: "address" }, { name: "defaultMintingFee", internalType: "uint256", type: "uint256" }, { name: "expiration", internalType: "uint256", type: "uint256" }, { name: "commercialUse", internalType: "bool", type: "bool" }, { name: "commercialAttribution", internalType: "bool", type: "bool" }, { name: "commercializerChecker", internalType: "address", type: "address" }, { name: "commercializerCheckerData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "commercialRevCeiling", internalType: "uint256", type: "uint256" }, { name: "derivativesAllowed", internalType: "bool", type: "bool" }, { name: "derivativesAttribution", internalType: "bool", type: "bool" }, { name: "derivativesApproval", internalType: "bool", type: "bool" }, { name: "derivativesReciprocal", internalType: "bool", type: "bool" }, { name: "derivativeRevCeiling", internalType: "uint256", type: "uint256" }, { name: "currency", internalType: "address", type: "address" }, { name: "uri", internalType: "string", type: "string" }] }, { name: "licensingConfig", internalType: "struct Licensing.LicensingConfig", type: "tuple", components: [{ name: "isSet", internalType: "bool", type: "bool" }, { name: "mintingFee", internalType: "uint256", type: "uint256" }, { name: "licensingHook", internalType: "address", type: "address" }, { name: "hookData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "disabled", internalType: "bool", type: "bool" }, { name: "expectMinimumGroupRewardShare", internalType: "uint32", type: "uint32" }, { name: "expectGroupRewardPool", internalType: "address", type: "address" }] }] }, { name: "sigAttachAndConfig", internalType: "struct WorkflowStructs.SignatureData", type: "tuple", components: [{ name: "signer", internalType: "address", type: "address" }, { name: "deadline", internalType: "uint256", type: "uint256" }, { name: "signature", internalType: "bytes", type: "bytes" }] }], name: "registerPILTermsAndAttach", outputs: [{ name: "licenseTermsIds", internalType: "uint256[]", type: "uint256[]" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newAuthority", internalType: "address", type: "address" }], name: "setAuthority", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }];
var licenseAttachmentWorkflowsAddress = { 1315: "0xcC2E862bCee5B6036Db0de6E06Ae87e524a79fd8", 1514: "0xcC2E862bCee5B6036Db0de6E06Ae87e524a79fd8" };
var licenseRegistryAbi = [{ type: "constructor", inputs: [{ name: "groupIpAssetRegistry", internalType: "address", type: "address" }, { name: "licensingModule", internalType: "address", type: "address" }, { name: "disputeModule", internalType: "address", type: "address" }, { name: "ipGraphAcl", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "authority", internalType: "address", type: "address" }], name: "AccessManagedInvalidAuthority" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "delay", internalType: "uint32", type: "uint32" }], name: "AccessManagedRequiredDelay" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "AccessManagedUnauthorized" }, { type: "error", inputs: [{ name: "target", internalType: "address", type: "address" }], name: "AddressEmptyCode" }, { type: "error", inputs: [{ name: "implementation", internalType: "address", type: "address" }], name: "ERC1967InvalidImplementation" }, { type: "error", inputs: [], name: "ERC1967NonPayable" }, { type: "error", inputs: [], name: "FailedCall" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [{ name: "childIpId", internalType: "address", type: "address" }, { name: "parentIpIds", internalType: "address[]", type: "address[]" }], name: "LicenseRegistry__AddParentIpToIPGraphFailed" }, { type: "error", inputs: [], name: "LicenseRegistry__CallFailed" }, { type: "error", inputs: [], name: "LicenseRegistry__CallerNotLicensingModule" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "LicenseRegistry__CannotAddIpWithExpirationToGroup" }, { type: "error", inputs: [{ name: "childIpId", internalType: "address", type: "address" }], name: "LicenseRegistry__DerivativeAlreadyRegistered" }, { type: "error", inputs: [{ name: "childIpId", internalType: "address", type: "address" }], name: "LicenseRegistry__DerivativeIpAlreadyHasChild" }, { type: "error", inputs: [{ name: "childIpId", internalType: "address", type: "address" }], name: "LicenseRegistry__DerivativeIpAlreadyHasLicense" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "LicenseRegistry__DerivativeIsParent" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "parentIpId", internalType: "address", type: "address" }], name: "LicenseRegistry__DuplicateParentIp" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "LicenseRegistry__EmptyGroupCannotMintLicenseToken" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "LicenseRegistry__GroupCannotHasParentIp" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "LicenseRegistry__GroupIpAlreadyHasLicenseTerms" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }, { name: "ipCommercialRevShare", internalType: "uint32", type: "uint32" }, { name: "groupCommercialRevShare", internalType: "uint32", type: "uint32" }], name: "LicenseRegistry__GroupIpCommercialRevShareConfigMustNotLessThanIp" }, { type: "error", inputs: [{ name: "childIpId", internalType: "address", type: "address" }, { name: "groupId", internalType: "address", type: "address" }], name: "LicenseRegistry__GroupMustBeSoleParent" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "index", internalType: "uint256", type: "uint256" }, { name: "length", internalType: "uint256", type: "uint256" }], name: "LicenseRegistry__IndexOutOfBounds" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "expectGroupRewardPool", internalType: "address", type: "address" }, { name: "groupId", internalType: "address", type: "address" }, { name: "groupRewardPool", internalType: "address", type: "address" }], name: "LicenseRegistry__IpExpectGroupRewardPoolNotMatch" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "LicenseRegistry__IpExpectGroupRewardPoolNotSet" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "LicenseRegistry__IpExpired" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "LicenseRegistry__IpHasNoGroupLicenseTerms" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "LicenseRegistry__IpLicenseDisabled" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "hookData", internalType: "bytes", type: "bytes" }, { name: "groupHookData", internalType: "bytes", type: "bytes" }], name: "LicenseRegistry__IpLicensingHookDataNotMatchWithGroup" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licensingHook", internalType: "address", type: "address" }, { name: "groupLicensingHook", internalType: "address", type: "address" }], name: "LicenseRegistry__IpLicensingHookNotMatchWithGroup" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "mintingFee", internalType: "uint256", type: "uint256" }, { name: "groupMintingFee", internalType: "uint256", type: "uint256" }], name: "LicenseRegistry__IpMintingFeeNotMatchWithGroup" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "LicenseRegistry__LicenseTermsAlreadyAttached" }, { type: "error", inputs: [{ name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "LicenseRegistry__LicenseTermsCannotAttachToGroupIp" }, { type: "error", inputs: [{ name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "LicenseRegistry__LicenseTermsNotExists" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "LicenseRegistry__LicensorIpHasNoLicenseTerms" }, { type: "error", inputs: [{ name: "licenseTemplate", internalType: "address", type: "address" }], name: "LicenseRegistry__NotLicenseTemplate" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "LicenseRegistry__ParentIpExpired" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "LicenseRegistry__ParentIpHasNoLicenseTerms" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "LicenseRegistry__ParentIpIsEmptyGroup" }, { type: "error", inputs: [{ name: "parentIpId", internalType: "address", type: "address" }], name: "LicenseRegistry__ParentIpNotRegistered" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "LicenseRegistry__ParentIpTagged" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }], name: "LicenseRegistry__ParentIpUnmatchedLicenseTemplate" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "ancestors", internalType: "uint256", type: "uint256" }, { name: "maxAncestors", internalType: "uint256", type: "uint256" }], name: "LicenseRegistry__TooManyAncestors" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "parents", internalType: "uint256", type: "uint256" }, { name: "maxParents", internalType: "uint256", type: "uint256" }], name: "LicenseRegistry__TooManyParents" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "newLicenseTemplate", internalType: "address", type: "address" }], name: "LicenseRegistry__UnmatchedLicenseTemplate" }, { type: "error", inputs: [{ name: "licenseTemplate", internalType: "address", type: "address" }], name: "LicenseRegistry__UnregisteredLicenseTemplate" }, { type: "error", inputs: [], name: "LicenseRegistry__ZeroAccessManager" }, { type: "error", inputs: [], name: "LicenseRegistry__ZeroDisputeModule" }, { type: "error", inputs: [], name: "LicenseRegistry__ZeroGroupIpRegistry" }, { type: "error", inputs: [], name: "LicenseRegistry__ZeroIPGraphACL" }, { type: "error", inputs: [], name: "LicenseRegistry__ZeroLicenseTemplate" }, { type: "error", inputs: [], name: "LicenseRegistry__ZeroLicensingModule" }, { type: "error", inputs: [], name: "LicensingModule__DerivativesCannotAddLicenseTerms" }, { type: "error", inputs: [{ name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "LicensingModule__LicenseTermsNotFound" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [], name: "RoyaltyModule__CallFailed" }, { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" }, { type: "error", inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }], name: "UUPSUnsupportedProxiableUUID" }, { type: "event", anonymous: false, inputs: [{ name: "authority", internalType: "address", type: "address", indexed: false }], name: "AuthorityUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "licenseTemplate", internalType: "address", type: "address", indexed: false }, { name: "licenseTermsId", internalType: "uint256", type: "uint256", indexed: false }], name: "DefaultLicenseTermsSet" }, { type: "event", anonymous: false, inputs: [{ name: "ipId", internalType: "address", type: "address", indexed: true }, { name: "expireTime", internalType: "uint256", type: "uint256", indexed: false }], name: "ExpirationTimeSet" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "licenseTemplate", internalType: "address", type: "address", indexed: true }], name: "LicenseTemplateRegistered" }, { type: "event", anonymous: false, inputs: [{ name: "ipId", internalType: "address", type: "address", indexed: true }, { name: "licenseTemplate", internalType: "address", type: "address", indexed: true }, { name: "licenseTermsId", internalType: "uint256", type: "uint256", indexed: true }, { name: "licensingConfig", internalType: "struct Licensing.LicensingConfig", type: "tuple", components: [{ name: "isSet", internalType: "bool", type: "bool" }, { name: "mintingFee", internalType: "uint256", type: "uint256" }, { name: "licensingHook", internalType: "address", type: "address" }, { name: "hookData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "disabled", internalType: "bool", type: "bool" }, { name: "expectMinimumGroupRewardShare", internalType: "uint32", type: "uint32" }, { name: "expectGroupRewardPool", internalType: "address", type: "address" }], indexed: false }], name: "LicensingConfigSetForLicense" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "function", inputs: [], name: "DISPUTE_MODULE", outputs: [{ name: "", internalType: "contract IDisputeModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "EXPIRATION_TIME", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [], name: "GROUP_IP_ASSET_REGISTRY", outputs: [{ name: "", internalType: "contract IGroupIPAssetRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_GRAPH", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_GRAPH_ACL", outputs: [{ name: "", internalType: "contract IPGraphACL", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSING_MODULE", outputs: [{ name: "", internalType: "contract ILicensingModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "MAX_ANCESTORS", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "MAX_PARENTS", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "UPGRADE_INTERFACE_VERSION", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "attachLicenseTermsToIp", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "authority", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "exists", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "getAncestorsCount", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "index", internalType: "uint256", type: "uint256" }], name: "getAttachedLicenseTerms", outputs: [{ name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "getAttachedLicenseTermsCount", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "getDefaultLicenseTerms", outputs: [{ name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "parentIpId", internalType: "address", type: "address" }, { name: "index", internalType: "uint256", type: "uint256" }], name: "getDerivativeIp", outputs: [{ name: "childIpId", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "parentIpId", internalType: "address", type: "address" }], name: "getDerivativeIpCount", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "getExpireTime", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "getLicensingConfig", outputs: [{ name: "", internalType: "struct Licensing.LicensingConfig", type: "tuple", components: [{ name: "isSet", internalType: "bool", type: "bool" }, { name: "mintingFee", internalType: "uint256", type: "uint256" }, { name: "licensingHook", internalType: "address", type: "address" }, { name: "hookData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "disabled", internalType: "bool", type: "bool" }, { name: "expectMinimumGroupRewardShare", internalType: "uint32", type: "uint32" }, { name: "expectGroupRewardPool", internalType: "address", type: "address" }] }], stateMutability: "view" }, { type: "function", inputs: [{ name: "childIpId", internalType: "address", type: "address" }, { name: "index", internalType: "uint256", type: "uint256" }], name: "getParentIp", outputs: [{ name: "parentIpId", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "childIpId", internalType: "address", type: "address" }], name: "getParentIpCount", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "childIpId", internalType: "address", type: "address" }, { name: "parentIpId", internalType: "address", type: "address" }], name: "getParentLicenseTerms", outputs: [{ name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "getRoyaltyPercent", outputs: [{ name: "royaltyPercent", internalType: "uint32", type: "uint32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "parentIpId", internalType: "address", type: "address" }], name: "hasDerivativeIps", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "hasIpAttachedLicenseTerms", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }], name: "initializeLicenseTemplate", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "isConsumingScheduledOp", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "isDefaultLicense", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "childIpId", internalType: "address", type: "address" }], name: "isDerivativeIp", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "isExpiredNow", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "parentIpId", internalType: "address", type: "address" }, { name: "childIpId", internalType: "address", type: "address" }], name: "isParentIp", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "licenseTemplate", internalType: "address", type: "address" }], name: "isRegisteredLicenseTemplate", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "childIpId", internalType: "address", type: "address" }, { name: "parentIpIds", internalType: "address[]", type: "address[]" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsIds", internalType: "uint256[]", type: "uint256[]" }, { name: "isUsingLicenseToken", internalType: "bool", type: "bool" }], name: "registerDerivativeIp", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "licenseTemplate", internalType: "address", type: "address" }], name: "registerLicenseTemplate", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newAuthority", internalType: "address", type: "address" }], name: "setAuthority", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newLicenseTemplate", internalType: "address", type: "address" }, { name: "newLicenseTermsId", internalType: "uint256", type: "uint256" }], name: "setDefaultLicenseTerms", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "licensingConfig", internalType: "struct Licensing.LicensingConfig", type: "tuple", components: [{ name: "isSet", internalType: "bool", type: "bool" }, { name: "mintingFee", internalType: "uint256", type: "uint256" }, { name: "licensingHook", internalType: "address", type: "address" }, { name: "hookData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "disabled", internalType: "bool", type: "bool" }, { name: "expectMinimumGroupRewardShare", internalType: "uint32", type: "uint32" }, { name: "expectGroupRewardPool", internalType: "address", type: "address" }] }], name: "setLicensingConfigForLicense", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }, { type: "function", inputs: [{ name: "groupId", internalType: "address", type: "address" }, { name: "groupRewardPool", internalType: "address", type: "address" }, { name: "ipId", internalType: "address", type: "address" }, { name: "groupLicenseTemplate", internalType: "address", type: "address" }, { name: "groupLicenseTermsId", internalType: "uint256", type: "uint256" }], name: "verifyGroupAddIp", outputs: [{ name: "ipLicensingConfig", internalType: "struct Licensing.LicensingConfig", type: "tuple", components: [{ name: "isSet", internalType: "bool", type: "bool" }, { name: "mintingFee", internalType: "uint256", type: "uint256" }, { name: "licensingHook", internalType: "address", type: "address" }, { name: "hookData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "disabled", internalType: "bool", type: "bool" }, { name: "expectMinimumGroupRewardShare", internalType: "uint32", type: "uint32" }, { name: "expectGroupRewardPool", internalType: "address", type: "address" }] }], stateMutability: "view" }, { type: "function", inputs: [{ name: "licensorIpId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "isMintedByIpOwner", internalType: "bool", type: "bool" }], name: "verifyMintLicenseToken", outputs: [{ name: "", internalType: "struct Licensing.LicensingConfig", type: "tuple", components: [{ name: "isSet", internalType: "bool", type: "bool" }, { name: "mintingFee", internalType: "uint256", type: "uint256" }, { name: "licensingHook", internalType: "address", type: "address" }, { name: "hookData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "disabled", internalType: "bool", type: "bool" }, { name: "expectMinimumGroupRewardShare", internalType: "uint32", type: "uint32" }, { name: "expectGroupRewardPool", internalType: "address", type: "address" }] }], stateMutability: "view" }];
var licenseRegistryAddress = { 1315: "0x529a750E02d8E2f15649c13D69a465286a780e24", 1514: "0x529a750E02d8E2f15649c13D69a465286a780e24" };
var licenseTokenAbi = [{ type: "constructor", inputs: [{ name: "licensingModule", internalType: "address", type: "address" }, { name: "disputeModule", internalType: "address", type: "address" }, { name: "licenseRegistry", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "authority", internalType: "address", type: "address" }], name: "AccessManagedInvalidAuthority" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "delay", internalType: "uint32", type: "uint32" }], name: "AccessManagedRequiredDelay" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "AccessManagedUnauthorized" }, { type: "error", inputs: [{ name: "target", internalType: "address", type: "address" }], name: "AddressEmptyCode" }, { type: "error", inputs: [{ name: "implementation", internalType: "address", type: "address" }], name: "ERC1967InvalidImplementation" }, { type: "error", inputs: [], name: "ERC1967NonPayable" }, { type: "error", inputs: [], name: "ERC721EnumerableForbiddenBatchMint" }, { type: "error", inputs: [{ name: "sender", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }, { name: "owner", internalType: "address", type: "address" }], name: "ERC721IncorrectOwner" }, { type: "error", inputs: [{ name: "operator", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }], name: "ERC721InsufficientApproval" }, { type: "error", inputs: [{ name: "approver", internalType: "address", type: "address" }], name: "ERC721InvalidApprover" }, { type: "error", inputs: [{ name: "operator", internalType: "address", type: "address" }], name: "ERC721InvalidOperator" }, { type: "error", inputs: [{ name: "owner", internalType: "address", type: "address" }], name: "ERC721InvalidOwner" }, { type: "error", inputs: [{ name: "receiver", internalType: "address", type: "address" }], name: "ERC721InvalidReceiver" }, { type: "error", inputs: [{ name: "sender", internalType: "address", type: "address" }], name: "ERC721InvalidSender" }, { type: "error", inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }], name: "ERC721NonexistentToken" }, { type: "error", inputs: [{ name: "owner", internalType: "address", type: "address" }, { name: "index", internalType: "uint256", type: "uint256" }], name: "ERC721OutOfBoundsIndex" }, { type: "error", inputs: [], name: "FailedCall" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [{ name: "licenseTemplate", internalType: "address", type: "address" }, { name: "anotherLicenseTemplate", internalType: "address", type: "address" }], name: "LicenseToken__AllLicenseTokensMustFromSameLicenseTemplate" }, { type: "error", inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }, { name: "caller", internalType: "address", type: "address" }, { name: "childIpIp", internalType: "address", type: "address" }, { name: "actualTokenOwner", internalType: "address", type: "address" }], name: "LicenseToken__CallerAndChildIPNotTokenOwner" }, { type: "error", inputs: [], name: "LicenseToken__CallerNotLicensingModule" }, { type: "error", inputs: [{ name: "childIpId", internalType: "address", type: "address" }], name: "LicenseToken__ChildIPAlreadyHasBeenMintedLicenseTokens" }, { type: "error", inputs: [{ name: "commercialRevenueShare", internalType: "uint32", type: "uint32" }, { name: "maxRevenueShare", internalType: "uint32", type: "uint32" }, { name: "ipId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "LicenseToken__CommercialRevenueShareExceedMaxRevenueShare" }, { type: "error", inputs: [{ name: "invalidRoyaltyPercent", internalType: "uint32", type: "uint32" }, { name: "ipId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "LicenseToken__InvalidRoyaltyPercent" }, { type: "error", inputs: [], name: "LicenseToken__NotTransferable" }, { type: "error", inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }], name: "LicenseToken__RevokedLicense" }, { type: "error", inputs: [], name: "LicenseToken__ZeroAccessManager" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [{ name: "value", internalType: "uint256", type: "uint256" }, { name: "length", internalType: "uint256", type: "uint256" }], name: "StringsInsufficientHexLength" }, { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" }, { type: "error", inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }], name: "UUPSUnsupportedProxiableUUID" }, { type: "event", anonymous: false, inputs: [{ name: "owner", internalType: "address", type: "address", indexed: true }, { name: "approved", internalType: "address", type: "address", indexed: true }, { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true }], name: "Approval" }, { type: "event", anonymous: false, inputs: [{ name: "owner", internalType: "address", type: "address", indexed: true }, { name: "operator", internalType: "address", type: "address", indexed: true }, { name: "approved", internalType: "bool", type: "bool", indexed: false }], name: "ApprovalForAll" }, { type: "event", anonymous: false, inputs: [{ name: "authority", internalType: "address", type: "address", indexed: false }], name: "AuthorityUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "_fromTokenId", internalType: "uint256", type: "uint256", indexed: false }, { name: "_toTokenId", internalType: "uint256", type: "uint256", indexed: false }], name: "BatchMetadataUpdate" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "minter", internalType: "address", type: "address", indexed: true }, { name: "receiver", internalType: "address", type: "address", indexed: true }, { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true }], name: "LicenseTokenMinted" }, { type: "event", anonymous: false, inputs: [{ name: "from", internalType: "address", type: "address", indexed: true }, { name: "to", internalType: "address", type: "address", indexed: true }, { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true }], name: "Transfer" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "function", inputs: [], name: "DISPUTE_MODULE", outputs: [{ name: "", internalType: "contract IDisputeModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSE_REGISTRY", outputs: [{ name: "", internalType: "contract ILicenseRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSING_MODULE", outputs: [{ name: "", internalType: "contract ILicensingModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "MAX_COMMERCIAL_REVENUE_SHARE", outputs: [{ name: "", internalType: "uint32", type: "uint32" }], stateMutability: "view" }, { type: "function", inputs: [], name: "UPGRADE_INTERFACE_VERSION", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "to", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }], name: "approve", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "authority", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "owner", internalType: "address", type: "address" }], name: "balanceOf", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "holder", internalType: "address", type: "address" }, { name: "tokenIds", internalType: "uint256[]", type: "uint256[]" }], name: "burnLicenseTokens", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }], name: "getApproved", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }], name: "getLicenseTemplate", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }], name: "getLicenseTermsId", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }], name: "getLicenseTokenMetadata", outputs: [{ name: "", internalType: "struct ILicenseToken.LicenseTokenMetadata", type: "tuple", components: [{ name: "licensorIpId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "transferable", internalType: "bool", type: "bool" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }] }], stateMutability: "view" }, { type: "function", inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }], name: "getLicensorIpId", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "licensorIpId", internalType: "address", type: "address" }], name: "getTotalTokensByLicensor", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }, { name: "imageUrl", internalType: "string", type: "string" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "owner", internalType: "address", type: "address" }, { name: "operator", internalType: "address", type: "address" }], name: "isApprovedForAll", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "isConsumingScheduledOp", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }], name: "isLicenseTokenRevoked", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "licensorIpId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "amount", internalType: "uint256", type: "uint256" }, { name: "minter", internalType: "address", type: "address" }, { name: "receiver", internalType: "address", type: "address" }, { name: "maxRevenueShare", internalType: "uint32", type: "uint32" }], name: "mintLicenseTokens", outputs: [{ name: "startLicenseTokenId", internalType: "uint256", type: "uint256" }], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }], name: "ownerOf", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "from", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "from", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "operator", internalType: "address", type: "address" }, { name: "approved", internalType: "bool", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newAuthority", internalType: "address", type: "address" }], name: "setAuthority", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "url", internalType: "string", type: "string" }], name: "setLicensingImageUrl", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }], name: "supportsInterface", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "symbol", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "index", internalType: "uint256", type: "uint256" }], name: "tokenByIndex", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "owner", internalType: "address", type: "address" }, { name: "index", internalType: "uint256", type: "uint256" }], name: "tokenOfOwnerByIndex", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "id", internalType: "uint256", type: "uint256" }], name: "tokenURI", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [], name: "totalMintedTokens", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "totalSupply", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "from", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }], name: "transferFrom", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }, { type: "function", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "childIpId", internalType: "address", type: "address" }, { name: "tokenIds", internalType: "uint256[]", type: "uint256[]" }], name: "validateLicenseTokensForDerivative", outputs: [{ name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licensorIpIds", internalType: "address[]", type: "address[]" }, { name: "licenseTermsIds", internalType: "uint256[]", type: "uint256[]" }, { name: "commercialRevShares", internalType: "uint32[]", type: "uint32[]" }], stateMutability: "view" }];
var licenseTokenAddress = { 1315: "0xFe3838BFb30B34170F00030B52eA4893d8aAC6bC", 1514: "0xFe3838BFb30B34170F00030B52eA4893d8aAC6bC" };
var licensingModuleAbi = [{ type: "constructor", inputs: [{ name: "accessController", internalType: "address", type: "address" }, { name: "ipAccountRegistry", internalType: "address", type: "address" }, { name: "moduleRegistry", internalType: "address", type: "address" }, { name: "royaltyModule", internalType: "address", type: "address" }, { name: "licenseRegistry", internalType: "address", type: "address" }, { name: "disputeModule", internalType: "address", type: "address" }, { name: "licenseToken", internalType: "address", type: "address" }, { name: "ipGraphAcl", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "ipAccount", internalType: "address", type: "address" }], name: "AccessControlled__NotIpAccount" }, { type: "error", inputs: [], name: "AccessControlled__ZeroAddress" }, { type: "error", inputs: [{ name: "authority", internalType: "address", type: "address" }], name: "AccessManagedInvalidAuthority" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "delay", internalType: "uint32", type: "uint32" }], name: "AccessManagedRequiredDelay" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "AccessManagedUnauthorized" }, { type: "error", inputs: [{ name: "target", internalType: "address", type: "address" }], name: "AddressEmptyCode" }, { type: "error", inputs: [{ name: "implementation", internalType: "address", type: "address" }], name: "ERC1967InvalidImplementation" }, { type: "error", inputs: [], name: "ERC1967NonPayable" }, { type: "error", inputs: [], name: "EnforcedPause" }, { type: "error", inputs: [], name: "ExpectedPause" }, { type: "error", inputs: [], name: "FailedCall" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [], name: "LicenseRegistry__LicenseTemplateCannotBeZeroAddress" }, { type: "error", inputs: [{ name: "licenseTemplate", internalType: "address", type: "address" }], name: "LicenseRegistry__UnregisteredLicenseTemplate" }, { type: "error", inputs: [{ name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "newRoyaltyPercent", internalType: "uint32", type: "uint32" }], name: "LicensingModule__CurrentLicenseNotAllowOverrideRoyaltyPercent" }, { type: "error", inputs: [{ name: "childIpId", internalType: "address", type: "address" }], name: "LicensingModule__DerivativeAlreadyHasBeenMintedLicenseTokens" }, { type: "error", inputs: [], name: "LicensingModule__DisputedIpId" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "revenueShare", internalType: "uint32", type: "uint32" }, { name: "maxRevenueShare", internalType: "uint32", type: "uint32" }], name: "LicensingModule__ExceedMaxRevenueShare" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "LicensingModule__GroupIpCannotChangeHookData" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "LicensingModule__GroupIpCannotChangeIsSet" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "LicensingModule__GroupIpCannotChangeLicensingHook" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "LicensingModule__GroupIpCannotChangeMintingFee" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }, { name: "newRoyaltyPercent", internalType: "uint32", type: "uint32" }, { name: "oldRoyaltyPercent", internalType: "uint32", type: "uint32" }], name: "LicensingModule__GroupIpCannotDecreaseRoyalty" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }], name: "LicensingModule__GroupIpCannotSetExpectGroupRewardPool" }, { type: "error", inputs: [{ name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "LicensingModule__InvalidLicenseTermsId" }, { type: "error", inputs: [{ name: "hook", internalType: "address", type: "address" }], name: "LicensingModule__InvalidLicensingHook" }, { type: "error", inputs: [{ name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "licensorIpId", internalType: "address", type: "address" }], name: "LicensingModule__LicenseDenyMintLicenseToken" }, { type: "error", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "LicensingModule__LicenseDisabled" }, { type: "error", inputs: [{ name: "childIpId", internalType: "address", type: "address" }], name: "LicensingModule__LicenseNotCompatibleForDerivative" }, { type: "error", inputs: [{ name: "ipLength", internalType: "uint256", type: "uint256" }, { name: "licenseTermsLength", internalType: "uint256", type: "uint256" }], name: "LicensingModule__LicenseTermsLengthMismatch" }, { type: "error", inputs: [{ name: "childIpId", internalType: "address", type: "address" }, { name: "licenseTokenIds", internalType: "uint256[]", type: "uint256[]" }], name: "LicensingModule__LicenseTokenNotCompatibleForDerivative" }, { type: "error", inputs: [{ name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "licensingConfigMintingFee", internalType: "uint256", type: "uint256" }, { name: "licenseTermsMintingFee", internalType: "uint256", type: "uint256" }], name: "LicensingModule__LicensingConfigMintingFeeBelowLicenseTerms" }, { type: "error", inputs: [{ name: "licensingHookMintingFee", internalType: "uint256", type: "uint256" }, { name: "licenseTermsMintingFee", internalType: "uint256", type: "uint256" }], name: "LicensingModule__LicensingHookMintingFeeBelowLicenseTerms" }, { type: "error", inputs: [], name: "LicensingModule__LicensorIpNotRegistered" }, { type: "error", inputs: [], name: "LicensingModule__MintAmountZero" }, { type: "error", inputs: [{ name: "mintingFee", internalType: "uint256", type: "uint256" }, { name: "maxMintingFee", internalType: "uint256", type: "uint256" }], name: "LicensingModule__MintingFeeExceedMaxMintingFee" }, { type: "error", inputs: [], name: "LicensingModule__MintingFeeRequiresRoyaltyPolicy" }, { type: "error", inputs: [], name: "LicensingModule__NoLicenseToken" }, { type: "error", inputs: [], name: "LicensingModule__NoParentIp" }, { type: "error", inputs: [], name: "LicensingModule__ReceiverZeroAddress" }, { type: "error", inputs: [{ name: "royaltyPolicy", internalType: "address", type: "address" }, { name: "anotherRoyaltyPolicy", internalType: "address", type: "address" }], name: "LicensingModule__RoyaltyPolicyMismatch" }, { type: "error", inputs: [{ name: "licensorIpId", internalType: "address", type: "address" }, { name: "ancestors", internalType: "uint256", type: "uint256" }, { name: "maxAncestors", internalType: "uint256", type: "uint256" }], name: "LicensingModule__TooManyAncestorsForMintingLicenseTokenAllowRegisterDerivative" }, { type: "error", inputs: [], name: "LicensingModule__ZeroAccessManager" }, { type: "error", inputs: [], name: "LicensingModule__ZeroDisputeModule" }, { type: "error", inputs: [], name: "LicensingModule__ZeroIPGraphACL" }, { type: "error", inputs: [], name: "LicensingModule__ZeroLicenseRegistry" }, { type: "error", inputs: [], name: "LicensingModule__ZeroLicenseTemplate" }, { type: "error", inputs: [], name: "LicensingModule__ZeroLicenseToken" }, { type: "error", inputs: [], name: "LicensingModule__ZeroModuleRegistry" }, { type: "error", inputs: [], name: "LicensingModule__ZeroRoyaltyModule" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" }, { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" }, { type: "error", inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }], name: "UUPSUnsupportedProxiableUUID" }, { type: "event", anonymous: false, inputs: [{ name: "authority", internalType: "address", type: "address", indexed: false }], name: "AuthorityUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "caller", internalType: "address", type: "address", indexed: true }, { name: "childIpId", internalType: "address", type: "address", indexed: true }, { name: "licenseTokenIds", internalType: "uint256[]", type: "uint256[]", indexed: false }, { name: "parentIpIds", internalType: "address[]", type: "address[]", indexed: false }, { name: "licenseTermsIds", internalType: "uint256[]", type: "uint256[]", indexed: false }, { name: "licenseTemplate", internalType: "address", type: "address", indexed: false }], name: "DerivativeRegistered" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "caller", internalType: "address", type: "address", indexed: true }, { name: "ipId", internalType: "address", type: "address", indexed: true }, { name: "licenseTemplate", internalType: "address", type: "address", indexed: false }, { name: "licenseTermsId", internalType: "uint256", type: "uint256", indexed: false }], name: "LicenseTermsAttached" }, { type: "event", anonymous: false, inputs: [{ name: "caller", internalType: "address", type: "address", indexed: true }, { name: "licensorIpId", internalType: "address", type: "address", indexed: true }, { name: "licenseTemplate", internalType: "address", type: "address", indexed: false }, { name: "licenseTermsId", internalType: "uint256", type: "uint256", indexed: true }, { name: "amount", internalType: "uint256", type: "uint256", indexed: false }, { name: "receiver", internalType: "address", type: "address", indexed: false }, { name: "startLicenseTokenId", internalType: "uint256", type: "uint256", indexed: false }], name: "LicenseTokensMinted" }, { type: "event", anonymous: false, inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }], name: "Paused" }, { type: "event", anonymous: false, inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }], name: "Unpaused" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "function", inputs: [], name: "ACCESS_CONTROLLER", outputs: [{ name: "", internalType: "contract IAccessController", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "DISPUTE_MODULE", outputs: [{ name: "", internalType: "contract IDisputeModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_ASSET_REGISTRY", outputs: [{ name: "", internalType: "contract IIPAssetRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_GRAPH_ACL", outputs: [{ name: "", internalType: "contract IPGraphACL", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSE_NFT", outputs: [{ name: "", internalType: "contract ILicenseToken", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSE_REGISTRY", outputs: [{ name: "", internalType: "contract ILicenseRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "MODULE_REGISTRY", outputs: [{ name: "", internalType: "contract IModuleRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "ROYALTY_MODULE", outputs: [{ name: "", internalType: "contract RoyaltyModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "UPGRADE_INTERFACE_VERSION", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "__ProtocolPausable_init", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "attachDefaultLicenseTerms", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "attachLicenseTerms", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "authority", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "isConsumingScheduledOp", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "licensorIpId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "amount", internalType: "uint256", type: "uint256" }, { name: "receiver", internalType: "address", type: "address" }, { name: "royaltyContext", internalType: "bytes", type: "bytes" }, { name: "maxMintingFee", internalType: "uint256", type: "uint256" }, { name: "maxRevenueShare", internalType: "uint32", type: "uint32" }], name: "mintLicenseTokens", outputs: [{ name: "startLicenseTokenId", internalType: "uint256", type: "uint256" }], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [], name: "pause", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "paused", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "licensorIpId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "amount", internalType: "uint256", type: "uint256" }, { name: "receiver", internalType: "address", type: "address" }, { name: "royaltyContext", internalType: "bytes", type: "bytes" }], name: "predictMintingLicenseFee", outputs: [{ name: "currencyToken", internalType: "address", type: "address" }, { name: "tokenAmount", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "childIpId", internalType: "address", type: "address" }, { name: "parentIpIds", internalType: "address[]", type: "address[]" }, { name: "licenseTermsIds", internalType: "uint256[]", type: "uint256[]" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "royaltyContext", internalType: "bytes", type: "bytes" }, { name: "maxMintingFee", internalType: "uint256", type: "uint256" }, { name: "maxRts", internalType: "uint32", type: "uint32" }, { name: "maxRevenueShare", internalType: "uint32", type: "uint32" }], name: "registerDerivative", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "childIpId", internalType: "address", type: "address" }, { name: "licenseTokenIds", internalType: "uint256[]", type: "uint256[]" }, { name: "royaltyContext", internalType: "bytes", type: "bytes" }, { name: "maxRts", internalType: "uint32", type: "uint32" }], name: "registerDerivativeWithLicenseTokens", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newAuthority", internalType: "address", type: "address" }], name: "setAuthority", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "licensingConfig", internalType: "struct Licensing.LicensingConfig", type: "tuple", components: [{ name: "isSet", internalType: "bool", type: "bool" }, { name: "mintingFee", internalType: "uint256", type: "uint256" }, { name: "licensingHook", internalType: "address", type: "address" }, { name: "hookData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "disabled", internalType: "bool", type: "bool" }, { name: "expectMinimumGroupRewardShare", internalType: "uint32", type: "uint32" }, { name: "expectGroupRewardPool", internalType: "address", type: "address" }] }], name: "setLicensingConfig", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }], name: "supportsInterface", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "unpause", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }];
var licensingModuleAddress = { 1315: "0x04fbd8a2e56dd85CFD5500A4A4DfA955B9f1dE6f", 1514: "0x04fbd8a2e56dd85CFD5500A4A4DfA955B9f1dE6f" };
var moduleRegistryAbi = [{ type: "constructor", inputs: [], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "authority", internalType: "address", type: "address" }], name: "AccessManagedInvalidAuthority" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "delay", internalType: "uint32", type: "uint32" }], name: "AccessManagedRequiredDelay" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "AccessManagedUnauthorized" }, { type: "error", inputs: [{ name: "target", internalType: "address", type: "address" }], name: "AddressEmptyCode" }, { type: "error", inputs: [{ name: "implementation", internalType: "address", type: "address" }], name: "ERC1967InvalidImplementation" }, { type: "error", inputs: [], name: "ERC1967NonPayable" }, { type: "error", inputs: [], name: "FailedCall" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [], name: "ModuleRegistry__InterfaceIdZero" }, { type: "error", inputs: [], name: "ModuleRegistry__ModuleAddressNotContract" }, { type: "error", inputs: [], name: "ModuleRegistry__ModuleAddressZeroAddress" }, { type: "error", inputs: [], name: "ModuleRegistry__ModuleAlreadyRegistered" }, { type: "error", inputs: [], name: "ModuleRegistry__ModuleNotRegistered" }, { type: "error", inputs: [], name: "ModuleRegistry__ModuleNotSupportExpectedModuleTypeInterfaceId" }, { type: "error", inputs: [], name: "ModuleRegistry__ModuleTypeAlreadyRegistered" }, { type: "error", inputs: [], name: "ModuleRegistry__ModuleTypeEmptyString" }, { type: "error", inputs: [], name: "ModuleRegistry__ModuleTypeNotRegistered" }, { type: "error", inputs: [], name: "ModuleRegistry__NameAlreadyRegistered" }, { type: "error", inputs: [], name: "ModuleRegistry__NameDoesNotMatch" }, { type: "error", inputs: [], name: "ModuleRegistry__NameEmptyString" }, { type: "error", inputs: [], name: "ModuleRegistry__ZeroAccessManager" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" }, { type: "error", inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }], name: "UUPSUnsupportedProxiableUUID" }, { type: "event", anonymous: false, inputs: [{ name: "authority", internalType: "address", type: "address", indexed: false }], name: "AuthorityUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "name", internalType: "string", type: "string", indexed: false }, { name: "module", internalType: "address", type: "address", indexed: true }, { name: "moduleTypeInterfaceId", internalType: "bytes4", type: "bytes4", indexed: true }, { name: "moduleType", internalType: "string", type: "string", indexed: false }], name: "ModuleAdded" }, { type: "event", anonymous: false, inputs: [{ name: "name", internalType: "string", type: "string", indexed: false }, { name: "module", internalType: "address", type: "address", indexed: true }], name: "ModuleRemoved" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "function", inputs: [], name: "UPGRADE_INTERFACE_VERSION", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [], name: "authority", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "name", internalType: "string", type: "string" }], name: "getModule", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "moduleAddress", internalType: "address", type: "address" }], name: "getModuleType", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "moduleType", internalType: "string", type: "string" }], name: "getModuleTypeInterfaceId", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "isConsumingScheduledOp", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "moduleAddress", internalType: "address", type: "address" }], name: "isRegistered", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "name", internalType: "string", type: "string" }, { name: "moduleAddress", internalType: "address", type: "address" }], name: "registerModule", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "name", internalType: "string", type: "string" }, { name: "moduleAddress", internalType: "address", type: "address" }, { name: "moduleType", internalType: "string", type: "string" }], name: "registerModule", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "name", internalType: "string", type: "string" }, { name: "interfaceId", internalType: "bytes4", type: "bytes4" }], name: "registerModuleType", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "name", internalType: "string", type: "string" }], name: "removeModule", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "name", internalType: "string", type: "string" }], name: "removeModuleType", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newAuthority", internalType: "address", type: "address" }], name: "setAuthority", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }];
var moduleRegistryAddress = { 1315: "0x022DBAAeA5D8fB31a0Ad793335e39Ced5D631fa5", 1514: "0x022DBAAeA5D8fB31a0Ad793335e39Ced5D631fa5" };
var multicall3Abi = [{ type: "function", inputs: [{ name: "calls", internalType: "struct Multicall3.Call[]", type: "tuple[]", components: [{ name: "target", internalType: "address", type: "address" }, { name: "callData", internalType: "bytes", type: "bytes" }] }], name: "aggregate", outputs: [{ name: "blockNumber", internalType: "uint256", type: "uint256" }, { name: "returnData", internalType: "bytes[]", type: "bytes[]" }], stateMutability: "payable" }, { type: "function", inputs: [{ name: "calls", internalType: "struct Multicall3.Call3[]", type: "tuple[]", components: [{ name: "target", internalType: "address", type: "address" }, { name: "allowFailure", internalType: "bool", type: "bool" }, { name: "callData", internalType: "bytes", type: "bytes" }] }], name: "aggregate3", outputs: [{ name: "returnData", internalType: "struct Multicall3.Result[]", type: "tuple[]", components: [{ name: "success", internalType: "bool", type: "bool" }, { name: "returnData", internalType: "bytes", type: "bytes" }] }], stateMutability: "payable" }, { type: "function", inputs: [{ name: "calls", internalType: "struct Multicall3.Call3Value[]", type: "tuple[]", components: [{ name: "target", internalType: "address", type: "address" }, { name: "allowFailure", internalType: "bool", type: "bool" }, { name: "value", internalType: "uint256", type: "uint256" }, { name: "callData", internalType: "bytes", type: "bytes" }] }], name: "aggregate3Value", outputs: [{ name: "returnData", internalType: "struct Multicall3.Result[]", type: "tuple[]", components: [{ name: "success", internalType: "bool", type: "bool" }, { name: "returnData", internalType: "bytes", type: "bytes" }] }], stateMutability: "payable" }, { type: "function", inputs: [{ name: "calls", internalType: "struct Multicall3.Call[]", type: "tuple[]", components: [{ name: "target", internalType: "address", type: "address" }, { name: "callData", internalType: "bytes", type: "bytes" }] }], name: "blockAndAggregate", outputs: [{ name: "blockNumber", internalType: "uint256", type: "uint256" }, { name: "blockHash", internalType: "bytes32", type: "bytes32" }, { name: "returnData", internalType: "struct Multicall3.Result[]", type: "tuple[]", components: [{ name: "success", internalType: "bool", type: "bool" }, { name: "returnData", internalType: "bytes", type: "bytes" }] }], stateMutability: "payable" }, { type: "function", inputs: [], name: "getBasefee", outputs: [{ name: "basefee", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "blockNumber", internalType: "uint256", type: "uint256" }], name: "getBlockHash", outputs: [{ name: "blockHash", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [], name: "getBlockNumber", outputs: [{ name: "blockNumber", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "getChainId", outputs: [{ name: "chainid", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "getCurrentBlockCoinbase", outputs: [{ name: "coinbase", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "getCurrentBlockDifficulty", outputs: [{ name: "difficulty", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "getCurrentBlockGasLimit", outputs: [{ name: "gaslimit", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "getCurrentBlockTimestamp", outputs: [{ name: "timestamp", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "addr", internalType: "address", type: "address" }], name: "getEthBalance", outputs: [{ name: "balance", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "getLastBlockHash", outputs: [{ name: "blockHash", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "requireSuccess", internalType: "bool", type: "bool" }, { name: "calls", internalType: "struct Multicall3.Call[]", type: "tuple[]", components: [{ name: "target", internalType: "address", type: "address" }, { name: "callData", internalType: "bytes", type: "bytes" }] }], name: "tryAggregate", outputs: [{ name: "returnData", internalType: "struct Multicall3.Result[]", type: "tuple[]", components: [{ name: "success", internalType: "bool", type: "bool" }, { name: "returnData", internalType: "bytes", type: "bytes" }] }], stateMutability: "payable" }, { type: "function", inputs: [{ name: "requireSuccess", internalType: "bool", type: "bool" }, { name: "calls", internalType: "struct Multicall3.Call[]", type: "tuple[]", components: [{ name: "target", internalType: "address", type: "address" }, { name: "callData", internalType: "bytes", type: "bytes" }] }], name: "tryBlockAndAggregate", outputs: [{ name: "blockNumber", internalType: "uint256", type: "uint256" }, { name: "blockHash", internalType: "bytes32", type: "bytes32" }, { name: "returnData", internalType: "struct Multicall3.Result[]", type: "tuple[]", components: [{ name: "success", internalType: "bool", type: "bool" }, { name: "returnData", internalType: "bytes", type: "bytes" }] }], stateMutability: "payable" }];
var multicall3Address = { 1315: "0xcA11bde05977b3631167028862bE2a173976CA11", 1514: "0xcA11bde05977b3631167028862bE2a173976CA11" };
var piLicenseTemplateAbi = [{ type: "constructor", inputs: [{ name: "accessController", internalType: "address", type: "address" }, { name: "ipAccountRegistry", internalType: "address", type: "address" }, { name: "licenseRegistry", internalType: "address", type: "address" }, { name: "royaltyModule", internalType: "address", type: "address" }, { name: "moduleRegistry", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "ipAccount", internalType: "address", type: "address" }], name: "AccessControlled__NotIpAccount" }, { type: "error", inputs: [], name: "AccessControlled__ZeroAddress" }, { type: "error", inputs: [{ name: "authority", internalType: "address", type: "address" }], name: "AccessManagedInvalidAuthority" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "delay", internalType: "uint32", type: "uint32" }], name: "AccessManagedRequiredDelay" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "AccessManagedUnauthorized" }, { type: "error", inputs: [{ name: "target", internalType: "address", type: "address" }], name: "AddressEmptyCode" }, { type: "error", inputs: [{ name: "implementation", internalType: "address", type: "address" }], name: "ERC1967InvalidImplementation" }, { type: "error", inputs: [], name: "ERC1967NonPayable" }, { type: "error", inputs: [], name: "FailedCall" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [], name: "PILicenseTemplate__CommercialDisabled_CantAddAttribution" }, { type: "error", inputs: [], name: "PILicenseTemplate__CommercialDisabled_CantAddCommercializers" }, { type: "error", inputs: [], name: "PILicenseTemplate__CommercialDisabled_CantAddDerivativeRevCeiling" }, { type: "error", inputs: [], name: "PILicenseTemplate__CommercialDisabled_CantAddRevCeiling" }, { type: "error", inputs: [], name: "PILicenseTemplate__CommercialDisabled_CantAddRevShare" }, { type: "error", inputs: [], name: "PILicenseTemplate__CommercialDisabled_CantAddRoyaltyPolicy" }, { type: "error", inputs: [], name: "PILicenseTemplate__CommercialEnabled_RoyaltyPolicyRequired" }, { type: "error", inputs: [{ name: "checker", internalType: "address", type: "address" }], name: "PILicenseTemplate__CommercializerCheckerDoesNotSupportHook" }, { type: "error", inputs: [{ name: "commercializerChecker", internalType: "address", type: "address" }], name: "PILicenseTemplate__CommercializerCheckerNotRegistered" }, { type: "error", inputs: [], name: "PILicenseTemplate__CurrencyTokenNotWhitelisted" }, { type: "error", inputs: [], name: "PILicenseTemplate__DerivativesDisabled_CantAddApproval" }, { type: "error", inputs: [], name: "PILicenseTemplate__DerivativesDisabled_CantAddAttribution" }, { type: "error", inputs: [], name: "PILicenseTemplate__DerivativesDisabled_CantAddDerivativeRevCeiling" }, { type: "error", inputs: [], name: "PILicenseTemplate__DerivativesDisabled_CantAddReciprocal" }, { type: "error", inputs: [], name: "PILicenseTemplate__MintingFeeRequiresRoyaltyPolicy" }, { type: "error", inputs: [], name: "PILicenseTemplate__RoyaltyPolicyNotWhitelisted" }, { type: "error", inputs: [], name: "PILicenseTemplate__RoyaltyPolicyRequiresCurrencyToken" }, { type: "error", inputs: [], name: "PILicenseTemplate__ZeroAccessManager" }, { type: "error", inputs: [], name: "PILicenseTemplate__ZeroLicenseRegistry" }, { type: "error", inputs: [], name: "PILicenseTemplate__ZeroRoyaltyModule" }, { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" }, { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" }, { type: "error", inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }], name: "UUPSUnsupportedProxiableUUID" }, { type: "event", anonymous: false, inputs: [{ name: "authority", internalType: "address", type: "address", indexed: false }], name: "AuthorityUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "licenseTermsId", internalType: "uint256", type: "uint256", indexed: true }, { name: "ipId", internalType: "address", type: "address", indexed: true }, { name: "caller", internalType: "address", type: "address", indexed: true }, { name: "approved", internalType: "bool", type: "bool", indexed: false }], name: "DerivativeApproved" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "licenseTermsId", internalType: "uint256", type: "uint256", indexed: true }, { name: "licenseTemplate", internalType: "address", type: "address", indexed: true }, { name: "licenseTerms", internalType: "bytes", type: "bytes", indexed: false }], name: "LicenseTermsRegistered" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "function", inputs: [], name: "ACCESS_CONTROLLER", outputs: [{ name: "", internalType: "contract IAccessController", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_ASSET_REGISTRY", outputs: [{ name: "", internalType: "contract IIPAssetRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSE_REGISTRY", outputs: [{ name: "", internalType: "contract ILicenseRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "MODULE_REGISTRY", outputs: [{ name: "", internalType: "contract IModuleRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "ROYALTY_MODULE", outputs: [{ name: "", internalType: "contract IRoyaltyModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "TERMS_RENDERER", outputs: [{ name: "", internalType: "contract PILTermsRenderer", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "UPGRADE_INTERFACE_VERSION", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "allowDerivativeRegistration", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "authority", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "canAttachToGroupIp", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "newRoyaltyPercent", internalType: "uint32", type: "uint32" }], name: "canOverrideRoyaltyPercent", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "exists", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "licenseTermsIds", internalType: "uint256[]", type: "uint256[]" }, { name: "start", internalType: "uint256", type: "uint256" }], name: "getEarlierExpireTime", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "start", internalType: "uint256", type: "uint256" }], name: "getExpireTime", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "selectedLicenseTermsId", internalType: "uint256", type: "uint256" }], name: "getLicenseTerms", outputs: [{ name: "terms", internalType: "struct PILTerms", type: "tuple", components: [{ name: "transferable", internalType: "bool", type: "bool" }, { name: "royaltyPolicy", internalType: "address", type: "address" }, { name: "defaultMintingFee", internalType: "uint256", type: "uint256" }, { name: "expiration", internalType: "uint256", type: "uint256" }, { name: "commercialUse", internalType: "bool", type: "bool" }, { name: "commercialAttribution", internalType: "bool", type: "bool" }, { name: "commercializerChecker", internalType: "address", type: "address" }, { name: "commercializerCheckerData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "commercialRevCeiling", internalType: "uint256", type: "uint256" }, { name: "derivativesAllowed", internalType: "bool", type: "bool" }, { name: "derivativesAttribution", internalType: "bool", type: "bool" }, { name: "derivativesApproval", internalType: "bool", type: "bool" }, { name: "derivativesReciprocal", internalType: "bool", type: "bool" }, { name: "derivativeRevCeiling", internalType: "uint256", type: "uint256" }, { name: "currency", internalType: "address", type: "address" }, { name: "uri", internalType: "string", type: "string" }] }], stateMutability: "view" }, { type: "function", inputs: [{ name: "terms", internalType: "struct PILTerms", type: "tuple", components: [{ name: "transferable", internalType: "bool", type: "bool" }, { name: "royaltyPolicy", internalType: "address", type: "address" }, { name: "defaultMintingFee", internalType: "uint256", type: "uint256" }, { name: "expiration", internalType: "uint256", type: "uint256" }, { name: "commercialUse", internalType: "bool", type: "bool" }, { name: "commercialAttribution", internalType: "bool", type: "bool" }, { name: "commercializerChecker", internalType: "address", type: "address" }, { name: "commercializerCheckerData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "commercialRevCeiling", internalType: "uint256", type: "uint256" }, { name: "derivativesAllowed", internalType: "bool", type: "bool" }, { name: "derivativesAttribution", internalType: "bool", type: "bool" }, { name: "derivativesApproval", internalType: "bool", type: "bool" }, { name: "derivativesReciprocal", internalType: "bool", type: "bool" }, { name: "derivativeRevCeiling", internalType: "uint256", type: "uint256" }, { name: "currency", internalType: "address", type: "address" }, { name: "uri", internalType: "string", type: "string" }] }], name: "getLicenseTermsId", outputs: [{ name: "selectedLicenseTermsId", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "getLicenseTermsURI", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [], name: "getMetadataURI", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "getRoyaltyPolicy", outputs: [{ name: "royaltyPolicy", internalType: "address", type: "address" }, { name: "royaltyPercent", internalType: "uint32", type: "uint32" }, { name: "mintingFee", internalType: "uint256", type: "uint256" }, { name: "currency", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }, { name: "name", internalType: "string", type: "string" }, { name: "metadataURI", internalType: "string", type: "string" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "isConsumingScheduledOp", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "parentIpId", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "childIpId", internalType: "address", type: "address" }], name: "isDerivativeApproved", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "isLicenseTransferable", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "terms", internalType: "struct PILTerms", type: "tuple", components: [{ name: "transferable", internalType: "bool", type: "bool" }, { name: "royaltyPolicy", internalType: "address", type: "address" }, { name: "defaultMintingFee", internalType: "uint256", type: "uint256" }, { name: "expiration", internalType: "uint256", type: "uint256" }, { name: "commercialUse", internalType: "bool", type: "bool" }, { name: "commercialAttribution", internalType: "bool", type: "bool" }, { name: "commercializerChecker", internalType: "address", type: "address" }, { name: "commercializerCheckerData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "commercialRevCeiling", internalType: "uint256", type: "uint256" }, { name: "derivativesAllowed", internalType: "bool", type: "bool" }, { name: "derivativesAttribution", internalType: "bool", type: "bool" }, { name: "derivativesApproval", internalType: "bool", type: "bool" }, { name: "derivativesReciprocal", internalType: "bool", type: "bool" }, { name: "derivativeRevCeiling", internalType: "uint256", type: "uint256" }, { name: "currency", internalType: "address", type: "address" }, { name: "uri", internalType: "string", type: "string" }] }], name: "registerLicenseTerms", outputs: [{ name: "id", internalType: "uint256", type: "uint256" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "parentIpId", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "childIpId", internalType: "address", type: "address" }, { name: "approved", internalType: "bool", type: "bool" }], name: "setApproval", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newAuthority", internalType: "address", type: "address" }], name: "setAuthority", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }], name: "supportsInterface", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "licenseTermsId", internalType: "uint256", type: "uint256" }], name: "toJson", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [], name: "totalRegisteredLicenseTerms", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }, { type: "function", inputs: [{ name: "licenseTermsIds", internalType: "uint256[]", type: "uint256[]" }], name: "verifyCompatibleLicenses", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "licensee", internalType: "address", type: "address" }, { name: "licensorIpId", internalType: "address", type: "address" }, { name: "", internalType: "uint256", type: "uint256" }], name: "verifyMintLicenseToken", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "childIpId", internalType: "address", type: "address" }, { name: "parentIpId", internalType: "address", type: "address" }, { name: "licenseTermsId", internalType: "uint256", type: "uint256" }, { name: "licensee", internalType: "address", type: "address" }], name: "verifyRegisterDerivative", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "childIpId", internalType: "address", type: "address" }, { name: "parentIpIds", internalType: "address[]", type: "address[]" }, { name: "licenseTermsIds", internalType: "uint256[]", type: "uint256[]" }, { name: "caller", internalType: "address", type: "address" }], name: "verifyRegisterDerivativeForAllParents", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "nonpayable" }];
var piLicenseTemplateAddress = { 1315: "0x2E896b0b2Fdb7457499B56AAaA4AE55BCB4Cd316", 1514: "0x2E896b0b2Fdb7457499B56AAaA4AE55BCB4Cd316" };
var registrationWorkflowsAbi = [{ type: "constructor", inputs: [{ name: "accessController", internalType: "address", type: "address" }, { name: "coreMetadataModule", internalType: "address", type: "address" }, { name: "ipAssetRegistry", internalType: "address", type: "address" }, { name: "licenseRegistry", internalType: "address", type: "address" }, { name: "licensingModule", internalType: "address", type: "address" }, { name: "pilTemplate", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "authority", internalType: "address", type: "address" }], name: "AccessManagedInvalidAuthority" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "delay", internalType: "uint32", type: "uint32" }], name: "AccessManagedRequiredDelay" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "AccessManagedUnauthorized" }, { type: "error", inputs: [{ name: "target", internalType: "address", type: "address" }], name: "AddressEmptyCode" }, { type: "error", inputs: [{ name: "implementation", internalType: "address", type: "address" }], name: "ERC1967InvalidImplementation" }, { type: "error", inputs: [], name: "ERC1967NonPayable" }, { type: "error", inputs: [], name: "FailedCall" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "signer", internalType: "address", type: "address" }], name: "RegistrationWorkflows__CallerNotSigner" }, { type: "error", inputs: [], name: "RegistrationWorkflows__ZeroAddressParam" }, { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" }, { type: "error", inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }], name: "UUPSUnsupportedProxiableUUID" }, { type: "error", inputs: [], name: "Workflow__CallerNotAuthorizedToMint" }, { type: "event", anonymous: false, inputs: [{ name: "authority", internalType: "address", type: "address", indexed: false }], name: "AuthorityUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "spgNftContract", internalType: "address", type: "address", indexed: true }], name: "CollectionCreated" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "function", inputs: [], name: "ACCESS_CONTROLLER", outputs: [{ name: "", internalType: "contract IAccessController", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "CORE_METADATA_MODULE", outputs: [{ name: "", internalType: "contract ICoreMetadataModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_ASSET_REGISTRY", outputs: [{ name: "", internalType: "contract IIPAssetRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSE_REGISTRY", outputs: [{ name: "", internalType: "contract ILicenseRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSING_MODULE", outputs: [{ name: "", internalType: "contract ILicensingModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "PIL_TEMPLATE", outputs: [{ name: "", internalType: "contract IPILicenseTemplate", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "UPGRADE_INTERFACE_VERSION", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [], name: "authority", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "spgNftInitParams", internalType: "struct ISPGNFT.InitParams", type: "tuple", components: [{ name: "name", internalType: "string", type: "string" }, { name: "symbol", internalType: "string", type: "string" }, { name: "baseURI", internalType: "string", type: "string" }, { name: "contractURI", internalType: "string", type: "string" }, { name: "maxSupply", internalType: "uint32", type: "uint32" }, { name: "mintFee", internalType: "uint256", type: "uint256" }, { name: "mintFeeToken", internalType: "address", type: "address" }, { name: "mintFeeRecipient", internalType: "address", type: "address" }, { name: "owner", internalType: "address", type: "address" }, { name: "mintOpen", internalType: "bool", type: "bool" }, { name: "isPublicMinting", internalType: "bool", type: "bool" }] }], name: "createCollection", outputs: [{ name: "spgNftContract", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "isConsumingScheduledOp", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "spgNftContract", internalType: "address", type: "address" }, { name: "recipient", internalType: "address", type: "address" }, { name: "ipMetadata", internalType: "struct WorkflowStructs.IPMetadata", type: "tuple", components: [{ name: "ipMetadataURI", internalType: "string", type: "string" }, { name: "ipMetadataHash", internalType: "bytes32", type: "bytes32" }, { name: "nftMetadataURI", internalType: "string", type: "string" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }] }, { name: "allowDuplicates", internalType: "bool", type: "bool" }], name: "mintAndRegisterIp", outputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }], name: "multicall", outputs: [{ name: "results", internalType: "bytes[]", type: "bytes[]" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "", internalType: "address", type: "address" }, { name: "", internalType: "address", type: "address" }, { name: "", internalType: "uint256", type: "uint256" }, { name: "", internalType: "bytes", type: "bytes" }], name: "onERC721Received", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "nftContract", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }, { name: "ipMetadata", internalType: "struct WorkflowStructs.IPMetadata", type: "tuple", components: [{ name: "ipMetadataURI", internalType: "string", type: "string" }, { name: "ipMetadataHash", internalType: "bytes32", type: "bytes32" }, { name: "nftMetadataURI", internalType: "string", type: "string" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }] }, { name: "sigMetadata", internalType: "struct WorkflowStructs.SignatureData", type: "tuple", components: [{ name: "signer", internalType: "address", type: "address" }, { name: "deadline", internalType: "uint256", type: "uint256" }, { name: "signature", internalType: "bytes", type: "bytes" }] }], name: "registerIp", outputs: [{ name: "ipId", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newAuthority", internalType: "address", type: "address" }], name: "setAuthority", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newNftContractBeacon", internalType: "address", type: "address" }], name: "setNftContractBeacon", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newNftContract", internalType: "address", type: "address" }], name: "upgradeCollections", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }];
var registrationWorkflowsAddress = { 1315: "0xbe39E1C756e921BD25DF86e7AAa31106d1eb0424", 1514: "0xbe39E1C756e921BD25DF86e7AAa31106d1eb0424" };
var royaltyModuleAbi = [{ type: "constructor", inputs: [{ name: "licensingModule", internalType: "address", type: "address" }, { name: "disputeModule", internalType: "address", type: "address" }, { name: "licenseRegistry", internalType: "address", type: "address" }, { name: "ipAssetRegistry", internalType: "address", type: "address" }, { name: "ipGraphAcl", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "authority", internalType: "address", type: "address" }], name: "AccessManagedInvalidAuthority" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "delay", internalType: "uint32", type: "uint32" }], name: "AccessManagedRequiredDelay" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "AccessManagedUnauthorized" }, { type: "error", inputs: [{ name: "target", internalType: "address", type: "address" }], name: "AddressEmptyCode" }, { type: "error", inputs: [{ name: "implementation", internalType: "address", type: "address" }], name: "ERC1967InvalidImplementation" }, { type: "error", inputs: [], name: "ERC1967NonPayable" }, { type: "error", inputs: [], name: "EnforcedPause" }, { type: "error", inputs: [], name: "ExpectedPause" }, { type: "error", inputs: [], name: "FailedCall" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" }, { type: "error", inputs: [], name: "RoyaltyModule__AboveAccumulatedRoyaltyPoliciesLimit" }, { type: "error", inputs: [], name: "RoyaltyModule__AboveMaxPercent" }, { type: "error", inputs: [], name: "RoyaltyModule__AboveMaxRts" }, { type: "error", inputs: [], name: "RoyaltyModule__CallFailed" }, { type: "error", inputs: [{ name: "groupId", internalType: "address", type: "address" }, { name: "rewardPool", internalType: "address", type: "address" }], name: "RoyaltyModule__GroupRewardPoolNotWhitelisted" }, { type: "error", inputs: [], name: "RoyaltyModule__InvalidExternalRoyaltyPolicy" }, { type: "error", inputs: [], name: "RoyaltyModule__IpExpired" }, { type: "error", inputs: [], name: "RoyaltyModule__IpIsTagged" }, { type: "error", inputs: [], name: "RoyaltyModule__NoParentsOnLinking" }, { type: "error", inputs: [], name: "RoyaltyModule__NotAllowedCaller" }, { type: "error", inputs: [], name: "RoyaltyModule__NotWhitelistedOrRegisteredRoyaltyPolicy" }, { type: "error", inputs: [], name: "RoyaltyModule__NotWhitelistedRoyaltyToken" }, { type: "error", inputs: [], name: "RoyaltyModule__PaymentAmountIsTooLow" }, { type: "error", inputs: [], name: "RoyaltyModule__PolicyAlreadyRegisteredAsExternalRoyaltyPolicy" }, { type: "error", inputs: [], name: "RoyaltyModule__PolicyAlreadyWhitelistedOrRegistered" }, { type: "error", inputs: [], name: "RoyaltyModule__UnlinkableToParents" }, { type: "error", inputs: [], name: "RoyaltyModule__ZeroAccessManager" }, { type: "error", inputs: [], name: "RoyaltyModule__ZeroAccumulatedRoyaltyPoliciesLimit" }, { type: "error", inputs: [], name: "RoyaltyModule__ZeroAmount" }, { type: "error", inputs: [], name: "RoyaltyModule__ZeroDisputeModule" }, { type: "error", inputs: [], name: "RoyaltyModule__ZeroIpAssetRegistry" }, { type: "error", inputs: [], name: "RoyaltyModule__ZeroIpGraphAcl" }, { type: "error", inputs: [], name: "RoyaltyModule__ZeroLicenseRegistry" }, { type: "error", inputs: [], name: "RoyaltyModule__ZeroLicensingModule" }, { type: "error", inputs: [], name: "RoyaltyModule__ZeroParentIpId" }, { type: "error", inputs: [], name: "RoyaltyModule__ZeroReceiverVault" }, { type: "error", inputs: [], name: "RoyaltyModule__ZeroRoyaltyPolicy" }, { type: "error", inputs: [], name: "RoyaltyModule__ZeroRoyaltyToken" }, { type: "error", inputs: [], name: "RoyaltyModule__ZeroTreasury" }, { type: "error", inputs: [{ name: "token", internalType: "address", type: "address" }], name: "SafeERC20FailedOperation" }, { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" }, { type: "error", inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }], name: "UUPSUnsupportedProxiableUUID" }, { type: "error", inputs: [], name: "VaultController__ZeroIpRoyaltyVaultBeacon" }, { type: "event", anonymous: false, inputs: [{ name: "authority", internalType: "address", type: "address", indexed: false }], name: "AuthorityUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "externalRoyaltyPolicy", internalType: "address", type: "address", indexed: false }], name: "ExternalRoyaltyPolicyRegistered" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "ipId", internalType: "address", type: "address", indexed: false }, { name: "ipRoyaltyVault", internalType: "address", type: "address", indexed: false }], name: "IpRoyaltyVaultDeployed" }, { type: "event", anonymous: false, inputs: [{ name: "receiverIpId", internalType: "address", type: "address", indexed: false }, { name: "payerAddress", internalType: "address", type: "address", indexed: false }, { name: "token", internalType: "address", type: "address", indexed: false }, { name: "amount", internalType: "uint256", type: "uint256", indexed: false }, { name: "amountAfterFee", internalType: "uint256", type: "uint256", indexed: false }], name: "LicenseMintingFeePaid" }, { type: "event", anonymous: false, inputs: [{ name: "ipId", internalType: "address", type: "address", indexed: false }, { name: "royaltyPolicy", internalType: "address", type: "address", indexed: false }, { name: "licensePercent", internalType: "uint32", type: "uint32", indexed: false }, { name: "externalData", internalType: "bytes", type: "bytes", indexed: false }], name: "LicensedWithRoyalty" }, { type: "event", anonymous: false, inputs: [{ name: "ipId", internalType: "address", type: "address", indexed: false }, { name: "parentIpIds", internalType: "address[]", type: "address[]", indexed: false }, { name: "licenseRoyaltyPolicies", internalType: "address[]", type: "address[]", indexed: false }, { name: "licensesPercent", internalType: "uint32[]", type: "uint32[]", indexed: false }, { name: "externalData", internalType: "bytes", type: "bytes", indexed: false }], name: "LinkedToParents" }, { type: "event", anonymous: false, inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }], name: "Paused" }, { type: "event", anonymous: false, inputs: [{ name: "royaltyFeePercent", internalType: "uint256", type: "uint256", indexed: false }], name: "RoyaltyFeePercentSet" }, { type: "event", anonymous: false, inputs: [{ name: "accumulatedRoyaltyPoliciesLimit", internalType: "uint256", type: "uint256", indexed: false }], name: "RoyaltyLimitsUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "receiverIpId", internalType: "address", type: "address", indexed: false }, { name: "payerIpId", internalType: "address", type: "address", indexed: false }, { name: "sender", internalType: "address", type: "address", indexed: false }, { name: "token", internalType: "address", type: "address", indexed: false }, { name: "amount", internalType: "uint256", type: "uint256", indexed: false }, { name: "amountAfterFee", internalType: "uint256", type: "uint256", indexed: false }], name: "RoyaltyPaid" }, { type: "event", anonymous: false, inputs: [{ name: "royaltyPolicy", internalType: "address", type: "address", indexed: false }, { name: "allowed", internalType: "bool", type: "bool", indexed: false }], name: "RoyaltyPolicyWhitelistUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "token", internalType: "address", type: "address", indexed: false }, { name: "allowed", internalType: "bool", type: "bool", indexed: false }], name: "RoyaltyTokenWhitelistUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "treasury", internalType: "address", type: "address", indexed: false }], name: "TreasurySet" }, { type: "event", anonymous: false, inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }], name: "Unpaused" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "function", inputs: [], name: "DISPUTE_MODULE", outputs: [{ name: "", internalType: "contract IDisputeModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_ASSET_REGISTRY", outputs: [{ name: "", internalType: "contract IGroupIPAssetRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_GRAPH", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_GRAPH_ACL", outputs: [{ name: "", internalType: "contract IPGraphACL", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSE_REGISTRY", outputs: [{ name: "", internalType: "contract ILicenseRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSING_MODULE", outputs: [{ name: "", internalType: "contract ILicensingModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "MAX_PERCENT", outputs: [{ name: "", internalType: "uint32", type: "uint32" }], stateMutability: "view" }, { type: "function", inputs: [], name: "UPGRADE_INTERFACE_VERSION", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "__ProtocolPausable_init", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "accumulatedRoyaltyPolicies", outputs: [{ name: "", internalType: "address[]", type: "address[]" }], stateMutability: "view" }, { type: "function", inputs: [], name: "authority", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "globalRoyaltyStack", outputs: [{ name: "", internalType: "uint32", type: "uint32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "ancestorIpId", internalType: "address", type: "address" }], name: "hasAncestorIp", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }, { name: "accumulatedRoyaltyPoliciesLimit", internalType: "uint256", type: "uint256" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "ipRoyaltyVaultBeacon", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "ipRoyaltyVaults", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "isConsumingScheduledOp", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipRoyaltyVault", internalType: "address", type: "address" }], name: "isIpRoyaltyVault", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "externalRoyaltyPolicy", internalType: "address", type: "address" }], name: "isRegisteredExternalRoyaltyPolicy", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "royaltyPolicy", internalType: "address", type: "address" }], name: "isWhitelistedRoyaltyPolicy", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "token", internalType: "address", type: "address" }], name: "isWhitelistedRoyaltyToken", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "maxAccumulatedRoyaltyPolicies", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "maxAncestors", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "maxParents", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "maxPercent", outputs: [{ name: "", internalType: "uint32", type: "uint32" }], stateMutability: "pure" }, { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "royaltyPolicy", internalType: "address", type: "address" }, { name: "licensePercent", internalType: "uint32", type: "uint32" }, { name: "externalData", internalType: "bytes", type: "bytes" }], name: "onLicenseMinting", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "parentIpIds", internalType: "address[]", type: "address[]" }, { name: "licenseRoyaltyPolicies", internalType: "address[]", type: "address[]" }, { name: "licensesPercent", internalType: "uint32[]", type: "uint32[]" }, { name: "externalData", internalType: "bytes", type: "bytes" }, { name: "maxRts", internalType: "uint32", type: "uint32" }], name: "onLinkToParents", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "pause", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "paused", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "receiverIpId", internalType: "address", type: "address" }, { name: "payerAddress", internalType: "address", type: "address" }, { name: "token", internalType: "address", type: "address" }, { name: "amount", internalType: "uint256", type: "uint256" }], name: "payLicenseMintingFee", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "receiverIpId", internalType: "address", type: "address" }, { name: "payerIpId", internalType: "address", type: "address" }, { name: "token", internalType: "address", type: "address" }, { name: "amount", internalType: "uint256", type: "uint256" }], name: "payRoyaltyOnBehalf", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "externalRoyaltyPolicy", internalType: "address", type: "address" }], name: "registerExternalRoyaltyPolicy", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "royaltyFeePercent", outputs: [{ name: "", internalType: "uint32", type: "uint32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "newAuthority", internalType: "address", type: "address" }], name: "setAuthority", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "beacon", internalType: "address", type: "address" }], name: "setIpRoyaltyVaultBeacon", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "royaltyFeePercent", internalType: "uint32", type: "uint32" }], name: "setRoyaltyFeePercent", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "accumulatedRoyaltyPoliciesLimit", internalType: "uint256", type: "uint256" }], name: "setRoyaltyLimits", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "treasury", internalType: "address", type: "address" }], name: "setTreasury", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }], name: "supportsInterface", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "token", internalType: "address", type: "address" }, { name: "royaltyPolicy", internalType: "address", type: "address" }], name: "totalRevenueTokensAccounted", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "token", internalType: "address", type: "address" }], name: "totalRevenueTokensReceived", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "treasury", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "unpause", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }, { type: "function", inputs: [{ name: "newVault", internalType: "address", type: "address" }], name: "upgradeVaults", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "royaltyPolicy", internalType: "address", type: "address" }, { name: "allowed", internalType: "bool", type: "bool" }], name: "whitelistRoyaltyPolicy", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "token", internalType: "address", type: "address" }, { name: "allowed", internalType: "bool", type: "bool" }], name: "whitelistRoyaltyToken", outputs: [], stateMutability: "nonpayable" }];
var royaltyModuleAddress = { 1315: "0xD2f60c40fEbccf6311f8B47c4f2Ec6b040400086", 1514: "0xD2f60c40fEbccf6311f8B47c4f2Ec6b040400086" };
var royaltyPolicyLapAddress = { 1315: "0xBe54FB168b3c982b7AaE60dB6CF75Bd8447b390E", 1514: "0xBe54FB168b3c982b7AaE60dB6CF75Bd8447b390E" };
var royaltyPolicyLrpAbi = [{ type: "constructor", inputs: [{ name: "royaltyModule", internalType: "address", type: "address" }, { name: "royaltyPolicyLAP", internalType: "address", type: "address" }, { name: "ipGraphAcl", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "authority", internalType: "address", type: "address" }], name: "AccessManagedInvalidAuthority" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "delay", internalType: "uint32", type: "uint32" }], name: "AccessManagedRequiredDelay" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "AccessManagedUnauthorized" }, { type: "error", inputs: [{ name: "target", internalType: "address", type: "address" }], name: "AddressEmptyCode" }, { type: "error", inputs: [{ name: "implementation", internalType: "address", type: "address" }], name: "ERC1967InvalidImplementation" }, { type: "error", inputs: [], name: "ERC1967NonPayable" }, { type: "error", inputs: [], name: "EnforcedPause" }, { type: "error", inputs: [], name: "ExpectedPause" }, { type: "error", inputs: [], name: "FailedCall" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" }, { type: "error", inputs: [], name: "RoyaltyPolicyLRP__AboveMaxPercent" }, { type: "error", inputs: [], name: "RoyaltyPolicyLRP__CallFailed" }, { type: "error", inputs: [], name: "RoyaltyPolicyLRP__NotRoyaltyModule" }, { type: "error", inputs: [], name: "RoyaltyPolicyLRP__SameIpTransfer" }, { type: "error", inputs: [], name: "RoyaltyPolicyLRP__ZeroAccessManager" }, { type: "error", inputs: [], name: "RoyaltyPolicyLRP__ZeroClaimableRoyalty" }, { type: "error", inputs: [], name: "RoyaltyPolicyLRP__ZeroIPGraphACL" }, { type: "error", inputs: [], name: "RoyaltyPolicyLRP__ZeroRoyaltyModule" }, { type: "error", inputs: [], name: "RoyaltyPolicyLRP__ZeroRoyaltyPolicyLAP" }, { type: "error", inputs: [{ name: "token", internalType: "address", type: "address" }], name: "SafeERC20FailedOperation" }, { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" }, { type: "error", inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }], name: "UUPSUnsupportedProxiableUUID" }, { type: "event", anonymous: false, inputs: [{ name: "authority", internalType: "address", type: "address", indexed: false }], name: "AuthorityUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }], name: "Paused" }, { type: "event", anonymous: false, inputs: [{ name: "ipId", internalType: "address", type: "address", indexed: false }, { name: "ancestorIpId", internalType: "address", type: "address", indexed: false }, { name: "token", internalType: "address", type: "address", indexed: false }, { name: "amount", internalType: "uint256", type: "uint256", indexed: false }], name: "RevenueTransferredToVault" }, { type: "event", anonymous: false, inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }], name: "Unpaused" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "function", inputs: [], name: "IP_GRAPH", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_GRAPH_ACL", outputs: [{ name: "", internalType: "contract IPGraphACL", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "ROYALTY_MODULE", outputs: [{ name: "", internalType: "contract IRoyaltyModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "ROYALTY_POLICY_LAP", outputs: [{ name: "", internalType: "contract IGraphAwareRoyaltyPolicy", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "UPGRADE_INTERFACE_VERSION", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "__ProtocolPausable_init", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "authority", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "ancestorIpId", internalType: "address", type: "address" }], name: "getPolicyRoyalty", outputs: [{ name: "", internalType: "uint32", type: "uint32" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }], name: "getPolicyRoyaltyStack", outputs: [{ name: "", internalType: "uint32", type: "uint32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licensePercent", internalType: "uint32", type: "uint32" }], name: "getPolicyRtsRequiredToLink", outputs: [{ name: "", internalType: "uint32", type: "uint32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "ancestorIpId", internalType: "address", type: "address" }, { name: "token", internalType: "address", type: "address" }], name: "getTransferredTokens", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "isConsumingScheduledOp", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [], name: "isSupportGroup", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licensePercent", internalType: "uint32", type: "uint32" }, { name: "", internalType: "bytes", type: "bytes" }], name: "onLicenseMinting", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "parentIpIds", internalType: "address[]", type: "address[]" }, { name: "licenseRoyaltyPolicies", internalType: "address[]", type: "address[]" }, { name: "licensesPercent", internalType: "uint32[]", type: "uint32[]" }, { name: "", internalType: "bytes", type: "bytes" }], name: "onLinkToParents", outputs: [{ name: "newRoyaltyStackLRP", internalType: "uint32", type: "uint32" }], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "pause", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "paused", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "newAuthority", internalType: "address", type: "address" }], name: "setAuthority", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "ancestorIpId", internalType: "address", type: "address" }, { name: "token", internalType: "address", type: "address" }], name: "transferToVault", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "unpause", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }];
var royaltyPolicyLrpAddress = { 1315: "0x9156e603C949481883B1d3355c6f1132D191fC41", 1514: "0x9156e603C949481883B1d3355c6f1132D191fC41" };
var royaltyTokenDistributionWorkflowsAbi = [{ type: "constructor", inputs: [{ name: "accessController", internalType: "address", type: "address" }, { name: "coreMetadataModule", internalType: "address", type: "address" }, { name: "ipAssetRegistry", internalType: "address", type: "address" }, { name: "licenseRegistry", internalType: "address", type: "address" }, { name: "licensingModule", internalType: "address", type: "address" }, { name: "pilTemplate", internalType: "address", type: "address" }, { name: "royaltyModule", internalType: "address", type: "address" }, { name: "royaltyPolicyLRP", internalType: "address", type: "address" }, { name: "wip", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "authority", internalType: "address", type: "address" }], name: "AccessManagedInvalidAuthority" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "delay", internalType: "uint32", type: "uint32" }], name: "AccessManagedRequiredDelay" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "AccessManagedUnauthorized" }, { type: "error", inputs: [{ name: "target", internalType: "address", type: "address" }], name: "AddressEmptyCode" }, { type: "error", inputs: [{ name: "implementation", internalType: "address", type: "address" }], name: "ERC1967InvalidImplementation" }, { type: "error", inputs: [], name: "ERC1967NonPayable" }, { type: "error", inputs: [], name: "FailedCall" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [], name: "LicensingHelper__ParentIpIdsAndLicenseTermsIdsMismatch" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [], name: "PermissionHelper__ModulesAndSelectorsMismatch" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "signer", internalType: "address", type: "address" }], name: "RoyaltyTokenDistributionWorkflows__CallerNotSigner" }, { type: "error", inputs: [], name: "RoyaltyTokenDistributionWorkflows__NoLicenseTermsData" }, { type: "error", inputs: [], name: "RoyaltyTokenDistributionWorkflows__RoyaltyVaultNotDeployed" }, { type: "error", inputs: [{ name: "totalShares", internalType: "uint32", type: "uint32" }, { name: "ipAccountBalance", internalType: "uint32", type: "uint32" }], name: "RoyaltyTokenDistributionWorkflows__TotalSharesExceedsIPAccountBalance" }, { type: "error", inputs: [], name: "RoyaltyTokenDistributionWorkflows__ZeroAddressParam" }, { type: "error", inputs: [{ name: "token", internalType: "address", type: "address" }], name: "SafeERC20FailedOperation" }, { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" }, { type: "error", inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }], name: "UUPSUnsupportedProxiableUUID" }, { type: "error", inputs: [], name: "Workflow__CallerNotAuthorizedToMint" }, { type: "event", anonymous: false, inputs: [{ name: "authority", internalType: "address", type: "address", indexed: false }], name: "AuthorityUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "function", inputs: [], name: "ACCESS_CONTROLLER", outputs: [{ name: "", internalType: "contract IAccessController", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "CORE_METADATA_MODULE", outputs: [{ name: "", internalType: "contract ICoreMetadataModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "IP_ASSET_REGISTRY", outputs: [{ name: "", internalType: "contract IIPAssetRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSE_REGISTRY", outputs: [{ name: "", internalType: "contract ILicenseRegistry", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSING_MODULE", outputs: [{ name: "", internalType: "contract ILicensingModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "PIL_TEMPLATE", outputs: [{ name: "", internalType: "contract IPILicenseTemplate", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "ROYALTY_MODULE", outputs: [{ name: "", internalType: "contract IRoyaltyModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "ROYALTY_POLICY_LRP", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "UPGRADE_INTERFACE_VERSION", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [], name: "WIP", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "authority", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "royaltyShares", internalType: "struct WorkflowStructs.RoyaltyShare[]", type: "tuple[]", components: [{ name: "recipient", internalType: "address", type: "address" }, { name: "percentage", internalType: "uint32", type: "uint32" }] }, { name: "sigApproveRoyaltyTokens", internalType: "struct WorkflowStructs.SignatureData", type: "tuple", components: [{ name: "signer", internalType: "address", type: "address" }, { name: "deadline", internalType: "uint256", type: "uint256" }, { name: "signature", internalType: "bytes", type: "bytes" }] }], name: "distributeRoyaltyTokens", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "isConsumingScheduledOp", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "spgNftContract", internalType: "address", type: "address" }, { name: "recipient", internalType: "address", type: "address" }, { name: "ipMetadata", internalType: "struct WorkflowStructs.IPMetadata", type: "tuple", components: [{ name: "ipMetadataURI", internalType: "string", type: "string" }, { name: "ipMetadataHash", internalType: "bytes32", type: "bytes32" }, { name: "nftMetadataURI", internalType: "string", type: "string" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }] }, { name: "licenseTermsData", internalType: "struct WorkflowStructs.LicenseTermsData[]", type: "tuple[]", components: [{ name: "terms", internalType: "struct PILTerms", type: "tuple", components: [{ name: "transferable", internalType: "bool", type: "bool" }, { name: "royaltyPolicy", internalType: "address", type: "address" }, { name: "defaultMintingFee", internalType: "uint256", type: "uint256" }, { name: "expiration", internalType: "uint256", type: "uint256" }, { name: "commercialUse", internalType: "bool", type: "bool" }, { name: "commercialAttribution", internalType: "bool", type: "bool" }, { name: "commercializerChecker", internalType: "address", type: "address" }, { name: "commercializerCheckerData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "commercialRevCeiling", internalType: "uint256", type: "uint256" }, { name: "derivativesAllowed", internalType: "bool", type: "bool" }, { name: "derivativesAttribution", internalType: "bool", type: "bool" }, { name: "derivativesApproval", internalType: "bool", type: "bool" }, { name: "derivativesReciprocal", internalType: "bool", type: "bool" }, { name: "derivativeRevCeiling", internalType: "uint256", type: "uint256" }, { name: "currency", internalType: "address", type: "address" }, { name: "uri", internalType: "string", type: "string" }] }, { name: "licensingConfig", internalType: "struct Licensing.LicensingConfig", type: "tuple", components: [{ name: "isSet", internalType: "bool", type: "bool" }, { name: "mintingFee", internalType: "uint256", type: "uint256" }, { name: "licensingHook", internalType: "address", type: "address" }, { name: "hookData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "disabled", internalType: "bool", type: "bool" }, { name: "expectMinimumGroupRewardShare", internalType: "uint32", type: "uint32" }, { name: "expectGroupRewardPool", internalType: "address", type: "address" }] }] }, { name: "royaltyShares", internalType: "struct WorkflowStructs.RoyaltyShare[]", type: "tuple[]", components: [{ name: "recipient", internalType: "address", type: "address" }, { name: "percentage", internalType: "uint32", type: "uint32" }] }, { name: "allowDuplicates", internalType: "bool", type: "bool" }], name: "mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens", outputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }, { name: "licenseTermsIds", internalType: "uint256[]", type: "uint256[]" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "spgNftContract", internalType: "address", type: "address" }, { name: "recipient", internalType: "address", type: "address" }, { name: "ipMetadata", internalType: "struct WorkflowStructs.IPMetadata", type: "tuple", components: [{ name: "ipMetadataURI", internalType: "string", type: "string" }, { name: "ipMetadataHash", internalType: "bytes32", type: "bytes32" }, { name: "nftMetadataURI", internalType: "string", type: "string" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }] }, { name: "derivData", internalType: "struct WorkflowStructs.MakeDerivative", type: "tuple", components: [{ name: "parentIpIds", internalType: "address[]", type: "address[]" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsIds", internalType: "uint256[]", type: "uint256[]" }, { name: "royaltyContext", internalType: "bytes", type: "bytes" }, { name: "maxMintingFee", internalType: "uint256", type: "uint256" }, { name: "maxRts", internalType: "uint32", type: "uint32" }, { name: "maxRevenueShare", internalType: "uint32", type: "uint32" }] }, { name: "royaltyShares", internalType: "struct WorkflowStructs.RoyaltyShare[]", type: "tuple[]", components: [{ name: "recipient", internalType: "address", type: "address" }, { name: "percentage", internalType: "uint32", type: "uint32" }] }, { name: "allowDuplicates", internalType: "bool", type: "bool" }], name: "mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens", outputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }], name: "multicall", outputs: [{ name: "results", internalType: "bytes[]", type: "bytes[]" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "", internalType: "address", type: "address" }, { name: "", internalType: "address", type: "address" }, { name: "", internalType: "uint256", type: "uint256" }, { name: "", internalType: "bytes", type: "bytes" }], name: "onERC721Received", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "nftContract", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }, { name: "ipMetadata", internalType: "struct WorkflowStructs.IPMetadata", type: "tuple", components: [{ name: "ipMetadataURI", internalType: "string", type: "string" }, { name: "ipMetadataHash", internalType: "bytes32", type: "bytes32" }, { name: "nftMetadataURI", internalType: "string", type: "string" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }] }, { name: "licenseTermsData", internalType: "struct WorkflowStructs.LicenseTermsData[]", type: "tuple[]", components: [{ name: "terms", internalType: "struct PILTerms", type: "tuple", components: [{ name: "transferable", internalType: "bool", type: "bool" }, { name: "royaltyPolicy", internalType: "address", type: "address" }, { name: "defaultMintingFee", internalType: "uint256", type: "uint256" }, { name: "expiration", internalType: "uint256", type: "uint256" }, { name: "commercialUse", internalType: "bool", type: "bool" }, { name: "commercialAttribution", internalType: "bool", type: "bool" }, { name: "commercializerChecker", internalType: "address", type: "address" }, { name: "commercializerCheckerData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "commercialRevCeiling", internalType: "uint256", type: "uint256" }, { name: "derivativesAllowed", internalType: "bool", type: "bool" }, { name: "derivativesAttribution", internalType: "bool", type: "bool" }, { name: "derivativesApproval", internalType: "bool", type: "bool" }, { name: "derivativesReciprocal", internalType: "bool", type: "bool" }, { name: "derivativeRevCeiling", internalType: "uint256", type: "uint256" }, { name: "currency", internalType: "address", type: "address" }, { name: "uri", internalType: "string", type: "string" }] }, { name: "licensingConfig", internalType: "struct Licensing.LicensingConfig", type: "tuple", components: [{ name: "isSet", internalType: "bool", type: "bool" }, { name: "mintingFee", internalType: "uint256", type: "uint256" }, { name: "licensingHook", internalType: "address", type: "address" }, { name: "hookData", internalType: "bytes", type: "bytes" }, { name: "commercialRevShare", internalType: "uint32", type: "uint32" }, { name: "disabled", internalType: "bool", type: "bool" }, { name: "expectMinimumGroupRewardShare", internalType: "uint32", type: "uint32" }, { name: "expectGroupRewardPool", internalType: "address", type: "address" }] }] }, { name: "sigMetadataAndAttachAndConfig", internalType: "struct WorkflowStructs.SignatureData", type: "tuple", components: [{ name: "signer", internalType: "address", type: "address" }, { name: "deadline", internalType: "uint256", type: "uint256" }, { name: "signature", internalType: "bytes", type: "bytes" }] }], name: "registerIpAndAttachPILTermsAndDeployRoyaltyVault", outputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "licenseTermsIds", internalType: "uint256[]", type: "uint256[]" }, { name: "ipRoyaltyVault", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "nftContract", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }, { name: "ipMetadata", internalType: "struct WorkflowStructs.IPMetadata", type: "tuple", components: [{ name: "ipMetadataURI", internalType: "string", type: "string" }, { name: "ipMetadataHash", internalType: "bytes32", type: "bytes32" }, { name: "nftMetadataURI", internalType: "string", type: "string" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }] }, { name: "derivData", internalType: "struct WorkflowStructs.MakeDerivative", type: "tuple", components: [{ name: "parentIpIds", internalType: "address[]", type: "address[]" }, { name: "licenseTemplate", internalType: "address", type: "address" }, { name: "licenseTermsIds", internalType: "uint256[]", type: "uint256[]" }, { name: "royaltyContext", internalType: "bytes", type: "bytes" }, { name: "maxMintingFee", internalType: "uint256", type: "uint256" }, { name: "maxRts", internalType: "uint32", type: "uint32" }, { name: "maxRevenueShare", internalType: "uint32", type: "uint32" }] }, { name: "sigMetadataAndRegister", internalType: "struct WorkflowStructs.SignatureData", type: "tuple", components: [{ name: "signer", internalType: "address", type: "address" }, { name: "deadline", internalType: "uint256", type: "uint256" }, { name: "signature", internalType: "bytes", type: "bytes" }] }], name: "registerIpAndMakeDerivativeAndDeployRoyaltyVault", outputs: [{ name: "ipId", internalType: "address", type: "address" }, { name: "ipRoyaltyVault", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newAuthority", internalType: "address", type: "address" }], name: "setAuthority", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }];
var royaltyTokenDistributionWorkflowsAddress = { 1315: "0xa38f42B8d33809917f23997B8423054aAB97322C", 1514: "0xa38f42B8d33809917f23997B8423054aAB97322C" };
var royaltyWorkflowsAbi = [{ type: "constructor", inputs: [{ name: "royaltyModule", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [{ name: "authority", internalType: "address", type: "address" }], name: "AccessManagedInvalidAuthority" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }, { name: "delay", internalType: "uint32", type: "uint32" }], name: "AccessManagedRequiredDelay" }, { type: "error", inputs: [{ name: "caller", internalType: "address", type: "address" }], name: "AccessManagedUnauthorized" }, { type: "error", inputs: [{ name: "target", internalType: "address", type: "address" }], name: "AddressEmptyCode" }, { type: "error", inputs: [{ name: "implementation", internalType: "address", type: "address" }], name: "ERC1967InvalidImplementation" }, { type: "error", inputs: [], name: "ERC1967NonPayable" }, { type: "error", inputs: [], name: "FailedCall" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [], name: "RoyaltyWorkflows__ZeroAddressParam" }, { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" }, { type: "error", inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }], name: "UUPSUnsupportedProxiableUUID" }, { type: "event", anonymous: false, inputs: [{ name: "authority", internalType: "address", type: "address", indexed: false }], name: "AuthorityUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }], name: "Upgraded" }, { type: "function", inputs: [], name: "ROYALTY_MODULE", outputs: [{ name: "", internalType: "contract IRoyaltyModule", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "UPGRADE_INTERFACE_VERSION", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [], name: "authority", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "ancestorIpId", internalType: "address", type: "address" }, { name: "claimer", internalType: "address", type: "address" }, { name: "childIpIds", internalType: "address[]", type: "address[]" }, { name: "royaltyPolicies", internalType: "address[]", type: "address[]" }, { name: "currencyTokens", internalType: "address[]", type: "address[]" }], name: "claimAllRevenue", outputs: [{ name: "amountsClaimed", internalType: "uint256[]", type: "uint256[]" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "accessManager", internalType: "address", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "isConsumingScheduledOp", outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }], name: "multicall", outputs: [{ name: "results", internalType: "bytes[]", type: "bytes[]" }], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "proxiableUUID", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "newAuthority", internalType: "address", type: "address" }], name: "setAuthority", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newImplementation", internalType: "address", type: "address" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable" }];
var royaltyWorkflowsAddress = { 1315: "0x9515faE61E0c0447C6AC6dEe5628A2097aFE1890", 1514: "0x9515faE61E0c0447C6AC6dEe5628A2097aFE1890" };
var spgnftImplAbi = [{ type: "constructor", inputs: [{ name: "derivativeWorkflows", internalType: "address", type: "address" }, { name: "groupingWorkflows", internalType: "address", type: "address" }, { name: "licenseAttachmentWorkflows", internalType: "address", type: "address" }, { name: "registrationWorkflows", internalType: "address", type: "address" }, { name: "royaltyTokenDistributionWorkflows", internalType: "address", type: "address" }], stateMutability: "nonpayable" }, { type: "error", inputs: [], name: "AccessControlBadConfirmation" }, { type: "error", inputs: [{ name: "account", internalType: "address", type: "address" }, { name: "neededRole", internalType: "bytes32", type: "bytes32" }], name: "AccessControlUnauthorizedAccount" }, { type: "error", inputs: [{ name: "sender", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }, { name: "owner", internalType: "address", type: "address" }], name: "ERC721IncorrectOwner" }, { type: "error", inputs: [{ name: "operator", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }], name: "ERC721InsufficientApproval" }, { type: "error", inputs: [{ name: "approver", internalType: "address", type: "address" }], name: "ERC721InvalidApprover" }, { type: "error", inputs: [{ name: "operator", internalType: "address", type: "address" }], name: "ERC721InvalidOperator" }, { type: "error", inputs: [{ name: "owner", internalType: "address", type: "address" }], name: "ERC721InvalidOwner" }, { type: "error", inputs: [{ name: "receiver", internalType: "address", type: "address" }], name: "ERC721InvalidReceiver" }, { type: "error", inputs: [{ name: "sender", internalType: "address", type: "address" }], name: "ERC721InvalidSender" }, { type: "error", inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }], name: "ERC721NonexistentToken" }, { type: "error", inputs: [], name: "InvalidInitialization" }, { type: "error", inputs: [], name: "NotInitializing" }, { type: "error", inputs: [], name: "SPGNFT__CallerNotFeeRecipientOrAdmin" }, { type: "error", inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }, { name: "caller", internalType: "address", type: "address" }, { name: "owner", internalType: "address", type: "address" }], name: "SPGNFT__CallerNotOwner" }, { type: "error", inputs: [], name: "SPGNFT__CallerNotPeripheryContract" }, { type: "error", inputs: [{ name: "spgNftContract", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }], name: "SPGNFT__DuplicatedNFTMetadataHash" }, { type: "error", inputs: [], name: "SPGNFT__MaxSupplyReached" }, { type: "error", inputs: [], name: "SPGNFT__MintingClosed" }, { type: "error", inputs: [], name: "SPGNFT__MintingDenied" }, { type: "error", inputs: [], name: "SPGNFT__ZeroAddressParam" }, { type: "error", inputs: [], name: "SPGNFT__ZeroMaxSupply" }, { type: "error", inputs: [{ name: "token", internalType: "address", type: "address" }], name: "SafeERC20FailedOperation" }, { type: "event", anonymous: false, inputs: [{ name: "owner", internalType: "address", type: "address", indexed: true }, { name: "approved", internalType: "address", type: "address", indexed: true }, { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true }], name: "Approval" }, { type: "event", anonymous: false, inputs: [{ name: "owner", internalType: "address", type: "address", indexed: true }, { name: "operator", internalType: "address", type: "address", indexed: true }, { name: "approved", internalType: "bool", type: "bool", indexed: false }], name: "ApprovalForAll" }, { type: "event", anonymous: false, inputs: [{ name: "_fromTokenId", internalType: "uint256", type: "uint256", indexed: false }, { name: "_toTokenId", internalType: "uint256", type: "uint256", indexed: false }], name: "BatchMetadataUpdate" }, { type: "event", anonymous: false, inputs: [], name: "ContractURIUpdated" }, { type: "event", anonymous: false, inputs: [{ name: "version", internalType: "uint64", type: "uint64", indexed: false }], name: "Initialized" }, { type: "event", anonymous: false, inputs: [{ name: "_tokenId", internalType: "uint256", type: "uint256", indexed: false }], name: "MetadataUpdate" }, { type: "event", anonymous: false, inputs: [{ name: "role", internalType: "bytes32", type: "bytes32", indexed: true }, { name: "previousAdminRole", internalType: "bytes32", type: "bytes32", indexed: true }, { name: "newAdminRole", internalType: "bytes32", type: "bytes32", indexed: true }], name: "RoleAdminChanged" }, { type: "event", anonymous: false, inputs: [{ name: "role", internalType: "bytes32", type: "bytes32", indexed: true }, { name: "account", internalType: "address", type: "address", indexed: true }, { name: "sender", internalType: "address", type: "address", indexed: true }], name: "RoleGranted" }, { type: "event", anonymous: false, inputs: [{ name: "role", internalType: "bytes32", type: "bytes32", indexed: true }, { name: "account", internalType: "address", type: "address", indexed: true }, { name: "sender", internalType: "address", type: "address", indexed: true }], name: "RoleRevoked" }, { type: "event", anonymous: false, inputs: [{ name: "from", internalType: "address", type: "address", indexed: true }, { name: "to", internalType: "address", type: "address", indexed: true }, { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true }], name: "Transfer" }, { type: "function", inputs: [], name: "DEFAULT_ADMIN_ROLE", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [], name: "DERIVATIVE_WORKFLOWS_ADDRESS", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "GROUPING_WORKFLOWS_ADDRESS", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "LICENSE_ATTACHMENT_WORKFLOWS_ADDRESS", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "REGISTRATION_WORKFLOWS_ADDRESS", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "ROYALTY_TOKEN_DISTRIBUTION_WORKFLOWS_ADDRESS", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "to", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }], name: "approve", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "owner", internalType: "address", type: "address" }], name: "balanceOf", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "baseURI", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [], name: "contractURI", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }], name: "getApproved", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }], name: "getTokenIdByMetadataHash", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }, { name: "account", internalType: "address", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }, { name: "account", internalType: "address", type: "address" }], name: "hasRole", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "initParams", internalType: "struct ISPGNFT.InitParams", type: "tuple", components: [{ name: "name", internalType: "string", type: "string" }, { name: "symbol", internalType: "string", type: "string" }, { name: "baseURI", internalType: "string", type: "string" }, { name: "contractURI", internalType: "string", type: "string" }, { name: "maxSupply", internalType: "uint32", type: "uint32" }, { name: "mintFee", internalType: "uint256", type: "uint256" }, { name: "mintFeeToken", internalType: "address", type: "address" }, { name: "mintFeeRecipient", internalType: "address", type: "address" }, { name: "owner", internalType: "address", type: "address" }, { name: "mintOpen", internalType: "bool", type: "bool" }, { name: "isPublicMinting", internalType: "bool", type: "bool" }] }], name: "initialize", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "owner", internalType: "address", type: "address" }, { name: "operator", internalType: "address", type: "address" }], name: "isApprovedForAll", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "to", internalType: "address", type: "address" }, { name: "nftMetadataURI", internalType: "string", type: "string" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }, { name: "allowDuplicates", internalType: "bool", type: "bool" }], name: "mint", outputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "to", internalType: "address", type: "address" }, { name: "payer", internalType: "address", type: "address" }, { name: "nftMetadataURI", internalType: "string", type: "string" }, { name: "nftMetadataHash", internalType: "bytes32", type: "bytes32" }, { name: "allowDuplicates", internalType: "bool", type: "bool" }], name: "mintByPeriphery", outputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "mintFee", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "mintFeeRecipient", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "mintFeeToken", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "mintOpen", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }], name: "ownerOf", outputs: [{ name: "", internalType: "address", type: "address" }], stateMutability: "view" }, { type: "function", inputs: [], name: "publicMinting", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }, { name: "callerConfirmation", internalType: "address", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }, { name: "account", internalType: "address", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "from", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "from", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }, { name: "data", internalType: "bytes", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "operator", internalType: "address", type: "address" }, { name: "approved", internalType: "bool", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "baseURI", internalType: "string", type: "string" }], name: "setBaseURI", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "contractURI", internalType: "string", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "fee", internalType: "uint256", type: "uint256" }], name: "setMintFee", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "newFeeRecipient", internalType: "address", type: "address" }], name: "setMintFeeRecipient", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "token", internalType: "address", type: "address" }], name: "setMintFeeToken", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "mintOpen", internalType: "bool", type: "bool" }], name: "setMintOpen", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "isPublicMinting", internalType: "bool", type: "bool" }], name: "setPublicMinting", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }, { name: "tokenUri", internalType: "string", type: "string" }], name: "setTokenURI", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }], name: "supportsInterface", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" }, { type: "function", inputs: [], name: "symbol", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }], name: "tokenURI", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" }, { type: "function", inputs: [], name: "totalSupply", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "from", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }, { name: "tokenId", internalType: "uint256", type: "uint256" }], name: "transferFrom", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "token", internalType: "address", type: "address" }], name: "withdrawToken", outputs: [], stateMutability: "nonpayable" }];
var spgnftImplAddress = { 1315: "0x5266215a00c31AaA2f2BB7b951Ea0028Ea8b4e37", 1514: "0x6Cfa03Bc64B1a76206d0Ea10baDed31D520449F5" };
var wrappedIpAbi = [{ type: "error", inputs: [], name: "AllowanceOverflow" }, { type: "error", inputs: [], name: "AllowanceUnderflow" }, { type: "error", inputs: [{ name: "receiver", internalType: "address", type: "address" }], name: "ERC20InvalidReceiver" }, { type: "error", inputs: [{ name: "spender", internalType: "address", type: "address" }], name: "ERC20InvalidSpender" }, { type: "error", inputs: [], name: "IPTransferFailed" }, { type: "error", inputs: [], name: "InsufficientAllowance" }, { type: "error", inputs: [], name: "InsufficientBalance" }, { type: "error", inputs: [], name: "InvalidPermit" }, { type: "error", inputs: [], name: "Permit2AllowanceIsFixedAtInfinity" }, { type: "error", inputs: [], name: "PermitExpired" }, { type: "error", inputs: [], name: "TotalSupplyOverflow" }, { type: "event", anonymous: false, inputs: [{ name: "owner", internalType: "address", type: "address", indexed: true }, { name: "spender", internalType: "address", type: "address", indexed: true }, { name: "amount", internalType: "uint256", type: "uint256", indexed: false }], name: "Approval" }, { type: "event", anonymous: false, inputs: [{ name: "from", internalType: "address", type: "address", indexed: true }, { name: "amount", internalType: "uint256", type: "uint256", indexed: false }], name: "Deposit" }, { type: "event", anonymous: false, inputs: [{ name: "from", internalType: "address", type: "address", indexed: true }, { name: "to", internalType: "address", type: "address", indexed: true }, { name: "amount", internalType: "uint256", type: "uint256", indexed: false }], name: "Transfer" }, { type: "event", anonymous: false, inputs: [{ name: "to", internalType: "address", type: "address", indexed: true }, { name: "amount", internalType: "uint256", type: "uint256", indexed: false }], name: "Withdrawal" }, { type: "function", inputs: [], name: "DOMAIN_SEPARATOR", outputs: [{ name: "result", internalType: "bytes32", type: "bytes32" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "owner", internalType: "address", type: "address" }, { name: "spender", internalType: "address", type: "address" }], name: "allowance", outputs: [{ name: "result", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "spender", internalType: "address", type: "address" }, { name: "amount", internalType: "uint256", type: "uint256" }], name: "approve", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "owner", internalType: "address", type: "address" }], name: "balanceOf", outputs: [{ name: "result", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [], name: "decimals", outputs: [{ name: "", internalType: "uint8", type: "uint8" }], stateMutability: "view" }, { type: "function", inputs: [], name: "deposit", outputs: [], stateMutability: "payable" }, { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "pure" }, { type: "function", inputs: [{ name: "owner", internalType: "address", type: "address" }], name: "nonces", outputs: [{ name: "result", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "owner", internalType: "address", type: "address" }, { name: "spender", internalType: "address", type: "address" }, { name: "value", internalType: "uint256", type: "uint256" }, { name: "deadline", internalType: "uint256", type: "uint256" }, { name: "v", internalType: "uint8", type: "uint8" }, { name: "r", internalType: "bytes32", type: "bytes32" }, { name: "s", internalType: "bytes32", type: "bytes32" }], name: "permit", outputs: [], stateMutability: "nonpayable" }, { type: "function", inputs: [], name: "symbol", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "pure" }, { type: "function", inputs: [], name: "totalSupply", outputs: [{ name: "result", internalType: "uint256", type: "uint256" }], stateMutability: "view" }, { type: "function", inputs: [{ name: "to", internalType: "address", type: "address" }, { name: "amount", internalType: "uint256", type: "uint256" }], name: "transfer", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "from", internalType: "address", type: "address" }, { name: "to", internalType: "address", type: "address" }, { name: "amount", internalType: "uint256", type: "uint256" }], name: "transferFrom", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "nonpayable" }, { type: "function", inputs: [{ name: "value", internalType: "uint256", type: "uint256" }], name: "withdraw", outputs: [], stateMutability: "nonpayable" }, { type: "receive", stateMutability: "payable" }];
var wrappedIpAddress = { 1315: "0x1514000000000000000000000000000000000000", 1514: "0x1514000000000000000000000000000000000000" };
function getAddress(address, chainId) {
  return address[chainId || 0] || "0x";
}
var AccessControllerEventClient = function() {
  function AccessControllerEventClient2(rpcClient, address) {
    var _rpcClient$chain;
    _classCallCheck(this, AccessControllerEventClient2);
    this.address = address || getAddress(accessControllerAddress, (_rpcClient$chain = rpcClient.chain) === null || _rpcClient$chain === void 0 ? void 0 : _rpcClient$chain.id);
    this.rpcClient = rpcClient;
  }
  return _createClass(AccessControllerEventClient2, [{
    key: "watchPermissionSetEvent",
    value: function watchPermissionSetEvent(_onLogs) {
      return this.rpcClient.watchContractEvent({ abi: accessControllerAbi, address: this.address, eventName: "PermissionSet", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event PermissionSet for contract AccessController
    */
  }, { key: "parseTxPermissionSetEvent", value: function parseTxPermissionSetEvent(txReceipt) {
    var targetLogs = [];
    var _iterator = _createForOfIteratorHelper(txReceipt.logs), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var log = _step.value;
        try {
          var event = decodeEventLog({ abi: accessControllerAbi, eventName: "PermissionSet", data: log.data, topics: log.topics });
          if (event.eventName === "PermissionSet") {
            targetLogs.push(event.args);
          }
        } catch (e) {
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return targetLogs;
  } }]);
}();
var AccessControllerClient = function(_AccessControllerEven) {
  function AccessControllerClient2(rpcClient, wallet, address) {
    var _this;
    _classCallCheck(this, AccessControllerClient2);
    _this = _callSuper(this, AccessControllerClient2, [rpcClient, address]);
    _this.wallet = wallet;
    return _this;
  }
  _inherits(AccessControllerClient2, _AccessControllerEven);
  return _createClass(AccessControllerClient2, [{ key: "setAllPermissions", value: function() {
    var _setAllPermissions = _asyncToGenerator(_regenerator().m(function _callee(request) {
      var _yield$this$rpcClient, call;
      return _regenerator().w(function(_context) {
        while (1) switch (_context.n) {
          case 0:
            _context.n = 1;
            return this.rpcClient.simulateContract({ abi: accessControllerAbi, address: this.address, functionName: "setAllPermissions", account: this.wallet.account, args: [request.ipAccount, request.signer, request.permission] });
          case 1:
            _yield$this$rpcClient = _context.v;
            call = _yield$this$rpcClient.request;
            _context.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context.a(2, _context.v);
        }
      }, _callee, this);
    }));
    function setAllPermissions(_x) {
      return _setAllPermissions.apply(this, arguments);
    }
    return setAllPermissions;
  }() }, {
    key: "setAllPermissionsEncode",
    value: function setAllPermissionsEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: accessControllerAbi, functionName: "setAllPermissions", args: [request.ipAccount, request.signer, request.permission] }) };
    }
    /**
    * method setBatchPermissions for contract AccessController
    *
    * @param request AccessControllerSetBatchPermissionsRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "setBatchPermissions", value: function() {
    var _setBatchPermissions = _asyncToGenerator(_regenerator().m(function _callee2(request) {
      var _yield$this$rpcClient2, call;
      return _regenerator().w(function(_context2) {
        while (1) switch (_context2.n) {
          case 0:
            _context2.n = 1;
            return this.rpcClient.simulateContract({ abi: accessControllerAbi, address: this.address, functionName: "setBatchPermissions", account: this.wallet.account, args: [request.permissions] });
          case 1:
            _yield$this$rpcClient2 = _context2.v;
            call = _yield$this$rpcClient2.request;
            _context2.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context2.a(2, _context2.v);
        }
      }, _callee2, this);
    }));
    function setBatchPermissions(_x2) {
      return _setBatchPermissions.apply(this, arguments);
    }
    return setBatchPermissions;
  }() }, {
    key: "setBatchPermissionsEncode",
    value: function setBatchPermissionsEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: accessControllerAbi, functionName: "setBatchPermissions", args: [request.permissions] }) };
    }
    /**
    * method setPermission for contract AccessController
    *
    * @param request AccessControllerSetPermissionRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "setPermission", value: function() {
    var _setPermission = _asyncToGenerator(_regenerator().m(function _callee3(request) {
      var _yield$this$rpcClient3, call;
      return _regenerator().w(function(_context3) {
        while (1) switch (_context3.n) {
          case 0:
            _context3.n = 1;
            return this.rpcClient.simulateContract({ abi: accessControllerAbi, address: this.address, functionName: "setPermission", account: this.wallet.account, args: [request.ipAccount, request.signer, request.to, request.func, request.permission] });
          case 1:
            _yield$this$rpcClient3 = _context3.v;
            call = _yield$this$rpcClient3.request;
            _context3.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context3.a(2, _context3.v);
        }
      }, _callee3, this);
    }));
    function setPermission(_x3) {
      return _setPermission.apply(this, arguments);
    }
    return setPermission;
  }() }, { key: "setPermissionEncode", value: function setPermissionEncode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: accessControllerAbi, functionName: "setPermission", args: [request.ipAccount, request.signer, request.to, request.func, request.permission] }) };
  } }]);
}(AccessControllerEventClient);
var ArbitrationPolicyUmaReadOnlyClient = function() {
  function ArbitrationPolicyUmaReadOnlyClient2(rpcClient, address) {
    var _rpcClient$chain2;
    _classCallCheck(this, ArbitrationPolicyUmaReadOnlyClient2);
    this.address = address || getAddress(arbitrationPolicyUmaAddress, (_rpcClient$chain2 = rpcClient.chain) === null || _rpcClient$chain2 === void 0 ? void 0 : _rpcClient$chain2.id);
    this.rpcClient = rpcClient;
  }
  return _createClass(ArbitrationPolicyUmaReadOnlyClient2, [{ key: "disputeIdToAssertionId", value: function() {
    var _disputeIdToAssertionId = _asyncToGenerator(_regenerator().m(function _callee4(request) {
      return _regenerator().w(function(_context4) {
        while (1) switch (_context4.n) {
          case 0:
            _context4.n = 1;
            return this.rpcClient.readContract({ abi: arbitrationPolicyUmaAbi, address: this.address, functionName: "disputeIdToAssertionId", args: [request.disputeId] });
          case 1:
            return _context4.a(2, _context4.v);
        }
      }, _callee4, this);
    }));
    function disputeIdToAssertionId(_x4) {
      return _disputeIdToAssertionId.apply(this, arguments);
    }
    return disputeIdToAssertionId;
  }() }, { key: "maxBonds", value: function() {
    var _maxBonds = _asyncToGenerator(_regenerator().m(function _callee5(request) {
      return _regenerator().w(function(_context5) {
        while (1) switch (_context5.n) {
          case 0:
            _context5.n = 1;
            return this.rpcClient.readContract({ abi: arbitrationPolicyUmaAbi, address: this.address, functionName: "maxBonds", args: [request.token] });
          case 1:
            return _context5.a(2, _context5.v);
        }
      }, _callee5, this);
    }));
    function maxBonds(_x5) {
      return _maxBonds.apply(this, arguments);
    }
    return maxBonds;
  }() }, { key: "maxLiveness", value: function() {
    var _maxLiveness = _asyncToGenerator(_regenerator().m(function _callee6() {
      return _regenerator().w(function(_context6) {
        while (1) switch (_context6.n) {
          case 0:
            _context6.n = 1;
            return this.rpcClient.readContract({ abi: arbitrationPolicyUmaAbi, address: this.address, functionName: "maxLiveness" });
          case 1:
            return _context6.a(2, _context6.v);
        }
      }, _callee6, this);
    }));
    function maxLiveness() {
      return _maxLiveness.apply(this, arguments);
    }
    return maxLiveness;
  }() }, { key: "minLiveness", value: function() {
    var _minLiveness = _asyncToGenerator(_regenerator().m(function _callee7() {
      return _regenerator().w(function(_context7) {
        while (1) switch (_context7.n) {
          case 0:
            _context7.n = 1;
            return this.rpcClient.readContract({ abi: arbitrationPolicyUmaAbi, address: this.address, functionName: "minLiveness" });
          case 1:
            return _context7.a(2, _context7.v);
        }
      }, _callee7, this);
    }));
    function minLiveness() {
      return _minLiveness.apply(this, arguments);
    }
    return minLiveness;
  }() }, { key: "oov3", value: function() {
    var _oov = _asyncToGenerator(_regenerator().m(function _callee8() {
      return _regenerator().w(function(_context8) {
        while (1) switch (_context8.n) {
          case 0:
            _context8.n = 1;
            return this.rpcClient.readContract({ abi: arbitrationPolicyUmaAbi, address: this.address, functionName: "oov3" });
          case 1:
            return _context8.a(2, _context8.v);
        }
      }, _callee8, this);
    }));
    function oov3() {
      return _oov.apply(this, arguments);
    }
    return oov3;
  }() }]);
}();
var ArbitrationPolicyUmaClient = function(_ArbitrationPolicyUma) {
  function ArbitrationPolicyUmaClient2(rpcClient, wallet, address) {
    var _this2;
    _classCallCheck(this, ArbitrationPolicyUmaClient2);
    _this2 = _callSuper(this, ArbitrationPolicyUmaClient2, [rpcClient, address]);
    _this2.wallet = wallet;
    return _this2;
  }
  _inherits(ArbitrationPolicyUmaClient2, _ArbitrationPolicyUma);
  return _createClass(ArbitrationPolicyUmaClient2, [{ key: "disputeAssertion", value: function() {
    var _disputeAssertion = _asyncToGenerator(_regenerator().m(function _callee9(request) {
      var _yield$this$rpcClient4, call;
      return _regenerator().w(function(_context9) {
        while (1) switch (_context9.n) {
          case 0:
            _context9.n = 1;
            return this.rpcClient.simulateContract({ abi: arbitrationPolicyUmaAbi, address: this.address, functionName: "disputeAssertion", account: this.wallet.account, args: [request.assertionId, request.counterEvidenceHash] });
          case 1:
            _yield$this$rpcClient4 = _context9.v;
            call = _yield$this$rpcClient4.request;
            _context9.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context9.a(2, _context9.v);
        }
      }, _callee9, this);
    }));
    function disputeAssertion(_x6) {
      return _disputeAssertion.apply(this, arguments);
    }
    return disputeAssertion;
  }() }, { key: "disputeAssertionEncode", value: function disputeAssertionEncode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: arbitrationPolicyUmaAbi, functionName: "disputeAssertion", args: [request.assertionId, request.counterEvidenceHash] }) };
  } }]);
}(ArbitrationPolicyUmaReadOnlyClient);
var CoreMetadataModuleEventClient = function() {
  function CoreMetadataModuleEventClient2(rpcClient, address) {
    var _rpcClient$chain3;
    _classCallCheck(this, CoreMetadataModuleEventClient2);
    this.address = address || getAddress(coreMetadataModuleAddress, (_rpcClient$chain3 = rpcClient.chain) === null || _rpcClient$chain3 === void 0 ? void 0 : _rpcClient$chain3.id);
    this.rpcClient = rpcClient;
  }
  return _createClass(CoreMetadataModuleEventClient2, [{
    key: "watchAuthorityUpdatedEvent",
    value: function watchAuthorityUpdatedEvent(_onLogs2) {
      return this.rpcClient.watchContractEvent({ abi: coreMetadataModuleAbi, address: this.address, eventName: "AuthorityUpdated", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs2(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event AuthorityUpdated for contract CoreMetadataModule
    */
  }, {
    key: "parseTxAuthorityUpdatedEvent",
    value: function parseTxAuthorityUpdatedEvent(txReceipt) {
      var targetLogs = [];
      var _iterator2 = _createForOfIteratorHelper(txReceipt.logs), _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
          var log = _step2.value;
          try {
            var event = decodeEventLog({ abi: coreMetadataModuleAbi, eventName: "AuthorityUpdated", data: log.data, topics: log.topics });
            if (event.eventName === "AuthorityUpdated") {
              targetLogs.push(event.args);
            }
          } catch (e) {
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return targetLogs;
    }
    /**
    * event Initialized for contract CoreMetadataModule
    */
  }, {
    key: "watchInitializedEvent",
    value: function watchInitializedEvent(_onLogs3) {
      return this.rpcClient.watchContractEvent({ abi: coreMetadataModuleAbi, address: this.address, eventName: "Initialized", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs3(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event Initialized for contract CoreMetadataModule
    */
  }, {
    key: "parseTxInitializedEvent",
    value: function parseTxInitializedEvent(txReceipt) {
      var targetLogs = [];
      var _iterator3 = _createForOfIteratorHelper(txReceipt.logs), _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
          var log = _step3.value;
          try {
            var event = decodeEventLog({ abi: coreMetadataModuleAbi, eventName: "Initialized", data: log.data, topics: log.topics });
            if (event.eventName === "Initialized") {
              targetLogs.push(event.args);
            }
          } catch (e) {
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return targetLogs;
    }
    /**
    * event MetadataFrozen for contract CoreMetadataModule
    */
  }, {
    key: "watchMetadataFrozenEvent",
    value: function watchMetadataFrozenEvent(_onLogs4) {
      return this.rpcClient.watchContractEvent({ abi: coreMetadataModuleAbi, address: this.address, eventName: "MetadataFrozen", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs4(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event MetadataFrozen for contract CoreMetadataModule
    */
  }, {
    key: "parseTxMetadataFrozenEvent",
    value: function parseTxMetadataFrozenEvent(txReceipt) {
      var targetLogs = [];
      var _iterator4 = _createForOfIteratorHelper(txReceipt.logs), _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
          var log = _step4.value;
          try {
            var event = decodeEventLog({ abi: coreMetadataModuleAbi, eventName: "MetadataFrozen", data: log.data, topics: log.topics });
            if (event.eventName === "MetadataFrozen") {
              targetLogs.push(event.args);
            }
          } catch (e) {
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      return targetLogs;
    }
    /**
    * event MetadataURISet for contract CoreMetadataModule
    */
  }, {
    key: "watchMetadataUriSetEvent",
    value: function watchMetadataUriSetEvent(_onLogs5) {
      return this.rpcClient.watchContractEvent({ abi: coreMetadataModuleAbi, address: this.address, eventName: "MetadataURISet", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs5(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event MetadataURISet for contract CoreMetadataModule
    */
  }, {
    key: "parseTxMetadataUriSetEvent",
    value: function parseTxMetadataUriSetEvent(txReceipt) {
      var targetLogs = [];
      var _iterator5 = _createForOfIteratorHelper(txReceipt.logs), _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
          var log = _step5.value;
          try {
            var event = decodeEventLog({ abi: coreMetadataModuleAbi, eventName: "MetadataURISet", data: log.data, topics: log.topics });
            if (event.eventName === "MetadataURISet") {
              targetLogs.push(event.args);
            }
          } catch (e) {
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      return targetLogs;
    }
    /**
    * event NFTTokenURISet for contract CoreMetadataModule
    */
  }, {
    key: "watchNftTokenUriSetEvent",
    value: function watchNftTokenUriSetEvent(_onLogs6) {
      return this.rpcClient.watchContractEvent({ abi: coreMetadataModuleAbi, address: this.address, eventName: "NFTTokenURISet", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs6(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event NFTTokenURISet for contract CoreMetadataModule
    */
  }, {
    key: "parseTxNftTokenUriSetEvent",
    value: function parseTxNftTokenUriSetEvent(txReceipt) {
      var targetLogs = [];
      var _iterator6 = _createForOfIteratorHelper(txReceipt.logs), _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
          var log = _step6.value;
          try {
            var event = decodeEventLog({ abi: coreMetadataModuleAbi, eventName: "NFTTokenURISet", data: log.data, topics: log.topics });
            if (event.eventName === "NFTTokenURISet") {
              targetLogs.push(event.args);
            }
          } catch (e) {
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      return targetLogs;
    }
    /**
    * event Upgraded for contract CoreMetadataModule
    */
  }, {
    key: "watchUpgradedEvent",
    value: function watchUpgradedEvent(_onLogs7) {
      return this.rpcClient.watchContractEvent({ abi: coreMetadataModuleAbi, address: this.address, eventName: "Upgraded", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs7(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event Upgraded for contract CoreMetadataModule
    */
  }, { key: "parseTxUpgradedEvent", value: function parseTxUpgradedEvent(txReceipt) {
    var targetLogs = [];
    var _iterator7 = _createForOfIteratorHelper(txReceipt.logs), _step7;
    try {
      for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
        var log = _step7.value;
        try {
          var event = decodeEventLog({ abi: coreMetadataModuleAbi, eventName: "Upgraded", data: log.data, topics: log.topics });
          if (event.eventName === "Upgraded") {
            targetLogs.push(event.args);
          }
        } catch (e) {
        }
      }
    } catch (err) {
      _iterator7.e(err);
    } finally {
      _iterator7.f();
    }
    return targetLogs;
  } }]);
}();
var CoreMetadataModuleReadOnlyClient = function(_CoreMetadataModuleEv) {
  function CoreMetadataModuleReadOnlyClient2(rpcClient, address) {
    _classCallCheck(this, CoreMetadataModuleReadOnlyClient2);
    return _callSuper(this, CoreMetadataModuleReadOnlyClient2, [rpcClient, address]);
  }
  _inherits(CoreMetadataModuleReadOnlyClient2, _CoreMetadataModuleEv);
  return _createClass(CoreMetadataModuleReadOnlyClient2, [{ key: "accessController", value: function() {
    var _accessController = _asyncToGenerator(_regenerator().m(function _callee0() {
      return _regenerator().w(function(_context0) {
        while (1) switch (_context0.n) {
          case 0:
            _context0.n = 1;
            return this.rpcClient.readContract({ abi: coreMetadataModuleAbi, address: this.address, functionName: "ACCESS_CONTROLLER" });
          case 1:
            return _context0.a(2, _context0.v);
        }
      }, _callee0, this);
    }));
    function accessController() {
      return _accessController.apply(this, arguments);
    }
    return accessController;
  }() }, { key: "ipAssetRegistry", value: function() {
    var _ipAssetRegistry = _asyncToGenerator(_regenerator().m(function _callee1() {
      return _regenerator().w(function(_context1) {
        while (1) switch (_context1.n) {
          case 0:
            _context1.n = 1;
            return this.rpcClient.readContract({ abi: coreMetadataModuleAbi, address: this.address, functionName: "IP_ASSET_REGISTRY" });
          case 1:
            return _context1.a(2, _context1.v);
        }
      }, _callee1, this);
    }));
    function ipAssetRegistry() {
      return _ipAssetRegistry.apply(this, arguments);
    }
    return ipAssetRegistry;
  }() }, { key: "upgradeInterfaceVersion", value: function() {
    var _upgradeInterfaceVersion = _asyncToGenerator(_regenerator().m(function _callee10() {
      return _regenerator().w(function(_context10) {
        while (1) switch (_context10.n) {
          case 0:
            _context10.n = 1;
            return this.rpcClient.readContract({ abi: coreMetadataModuleAbi, address: this.address, functionName: "UPGRADE_INTERFACE_VERSION" });
          case 1:
            return _context10.a(2, _context10.v);
        }
      }, _callee10, this);
    }));
    function upgradeInterfaceVersion() {
      return _upgradeInterfaceVersion.apply(this, arguments);
    }
    return upgradeInterfaceVersion;
  }() }, { key: "authority", value: function() {
    var _authority = _asyncToGenerator(_regenerator().m(function _callee11() {
      return _regenerator().w(function(_context11) {
        while (1) switch (_context11.n) {
          case 0:
            _context11.n = 1;
            return this.rpcClient.readContract({ abi: coreMetadataModuleAbi, address: this.address, functionName: "authority" });
          case 1:
            return _context11.a(2, _context11.v);
        }
      }, _callee11, this);
    }));
    function authority() {
      return _authority.apply(this, arguments);
    }
    return authority;
  }() }, { key: "isConsumingScheduledOp", value: function() {
    var _isConsumingScheduledOp = _asyncToGenerator(_regenerator().m(function _callee12() {
      return _regenerator().w(function(_context12) {
        while (1) switch (_context12.n) {
          case 0:
            _context12.n = 1;
            return this.rpcClient.readContract({ abi: coreMetadataModuleAbi, address: this.address, functionName: "isConsumingScheduledOp" });
          case 1:
            return _context12.a(2, _context12.v);
        }
      }, _callee12, this);
    }));
    function isConsumingScheduledOp() {
      return _isConsumingScheduledOp.apply(this, arguments);
    }
    return isConsumingScheduledOp;
  }() }, { key: "isMetadataFrozen", value: function() {
    var _isMetadataFrozen = _asyncToGenerator(_regenerator().m(function _callee13(request) {
      return _regenerator().w(function(_context13) {
        while (1) switch (_context13.n) {
          case 0:
            _context13.n = 1;
            return this.rpcClient.readContract({ abi: coreMetadataModuleAbi, address: this.address, functionName: "isMetadataFrozen", args: [request.ipId] });
          case 1:
            return _context13.a(2, _context13.v);
        }
      }, _callee13, this);
    }));
    function isMetadataFrozen(_x7) {
      return _isMetadataFrozen.apply(this, arguments);
    }
    return isMetadataFrozen;
  }() }, { key: "name", value: function() {
    var _name = _asyncToGenerator(_regenerator().m(function _callee14() {
      return _regenerator().w(function(_context14) {
        while (1) switch (_context14.n) {
          case 0:
            _context14.n = 1;
            return this.rpcClient.readContract({ abi: coreMetadataModuleAbi, address: this.address, functionName: "name" });
          case 1:
            return _context14.a(2, _context14.v);
        }
      }, _callee14, this);
    }));
    function name() {
      return _name.apply(this, arguments);
    }
    return name;
  }() }, { key: "proxiableUuid", value: function() {
    var _proxiableUuid = _asyncToGenerator(_regenerator().m(function _callee15() {
      return _regenerator().w(function(_context15) {
        while (1) switch (_context15.n) {
          case 0:
            _context15.n = 1;
            return this.rpcClient.readContract({ abi: coreMetadataModuleAbi, address: this.address, functionName: "proxiableUUID" });
          case 1:
            return _context15.a(2, _context15.v);
        }
      }, _callee15, this);
    }));
    function proxiableUuid() {
      return _proxiableUuid.apply(this, arguments);
    }
    return proxiableUuid;
  }() }, { key: "supportsInterface", value: function() {
    var _supportsInterface = _asyncToGenerator(_regenerator().m(function _callee16(request) {
      return _regenerator().w(function(_context16) {
        while (1) switch (_context16.n) {
          case 0:
            _context16.n = 1;
            return this.rpcClient.readContract({ abi: coreMetadataModuleAbi, address: this.address, functionName: "supportsInterface", args: [request.interfaceId] });
          case 1:
            return _context16.a(2, _context16.v);
        }
      }, _callee16, this);
    }));
    function supportsInterface(_x8) {
      return _supportsInterface.apply(this, arguments);
    }
    return supportsInterface;
  }() }]);
}(CoreMetadataModuleEventClient);
var CoreMetadataModuleClient = function(_CoreMetadataModuleRe) {
  function CoreMetadataModuleClient2(rpcClient, wallet, address) {
    var _this3;
    _classCallCheck(this, CoreMetadataModuleClient2);
    _this3 = _callSuper(this, CoreMetadataModuleClient2, [rpcClient, address]);
    _this3.wallet = wallet;
    return _this3;
  }
  _inherits(CoreMetadataModuleClient2, _CoreMetadataModuleRe);
  return _createClass(CoreMetadataModuleClient2, [{ key: "freezeMetadata", value: function() {
    var _freezeMetadata = _asyncToGenerator(_regenerator().m(function _callee17(request) {
      var _yield$this$rpcClient5, call;
      return _regenerator().w(function(_context17) {
        while (1) switch (_context17.n) {
          case 0:
            _context17.n = 1;
            return this.rpcClient.simulateContract({ abi: coreMetadataModuleAbi, address: this.address, functionName: "freezeMetadata", account: this.wallet.account, args: [request.ipId] });
          case 1:
            _yield$this$rpcClient5 = _context17.v;
            call = _yield$this$rpcClient5.request;
            _context17.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context17.a(2, _context17.v);
        }
      }, _callee17, this);
    }));
    function freezeMetadata(_x9) {
      return _freezeMetadata.apply(this, arguments);
    }
    return freezeMetadata;
  }() }, {
    key: "freezeMetadataEncode",
    value: function freezeMetadataEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: coreMetadataModuleAbi, functionName: "freezeMetadata", args: [request.ipId] }) };
    }
    /**
    * method initialize for contract CoreMetadataModule
    *
    * @param request CoreMetadataModuleInitializeRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "initialize", value: function() {
    var _initialize = _asyncToGenerator(_regenerator().m(function _callee18(request) {
      var _yield$this$rpcClient6, call;
      return _regenerator().w(function(_context18) {
        while (1) switch (_context18.n) {
          case 0:
            _context18.n = 1;
            return this.rpcClient.simulateContract({ abi: coreMetadataModuleAbi, address: this.address, functionName: "initialize", account: this.wallet.account, args: [request.accessManager] });
          case 1:
            _yield$this$rpcClient6 = _context18.v;
            call = _yield$this$rpcClient6.request;
            _context18.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context18.a(2, _context18.v);
        }
      }, _callee18, this);
    }));
    function initialize(_x0) {
      return _initialize.apply(this, arguments);
    }
    return initialize;
  }() }, {
    key: "initializeEncode",
    value: function initializeEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: coreMetadataModuleAbi, functionName: "initialize", args: [request.accessManager] }) };
    }
    /**
    * method setAll for contract CoreMetadataModule
    *
    * @param request CoreMetadataModuleSetAllRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "setAll", value: function() {
    var _setAll = _asyncToGenerator(_regenerator().m(function _callee19(request) {
      var _yield$this$rpcClient7, call;
      return _regenerator().w(function(_context19) {
        while (1) switch (_context19.n) {
          case 0:
            _context19.n = 1;
            return this.rpcClient.simulateContract({ abi: coreMetadataModuleAbi, address: this.address, functionName: "setAll", account: this.wallet.account, args: [request.ipId, request.metadataURI, request.metadataHash, request.nftMetadataHash] });
          case 1:
            _yield$this$rpcClient7 = _context19.v;
            call = _yield$this$rpcClient7.request;
            _context19.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context19.a(2, _context19.v);
        }
      }, _callee19, this);
    }));
    function setAll(_x1) {
      return _setAll.apply(this, arguments);
    }
    return setAll;
  }() }, {
    key: "setAllEncode",
    value: function setAllEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: coreMetadataModuleAbi, functionName: "setAll", args: [request.ipId, request.metadataURI, request.metadataHash, request.nftMetadataHash] }) };
    }
    /**
    * method setAuthority for contract CoreMetadataModule
    *
    * @param request CoreMetadataModuleSetAuthorityRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "setAuthority", value: function() {
    var _setAuthority = _asyncToGenerator(_regenerator().m(function _callee20(request) {
      var _yield$this$rpcClient8, call;
      return _regenerator().w(function(_context20) {
        while (1) switch (_context20.n) {
          case 0:
            _context20.n = 1;
            return this.rpcClient.simulateContract({ abi: coreMetadataModuleAbi, address: this.address, functionName: "setAuthority", account: this.wallet.account, args: [request.newAuthority] });
          case 1:
            _yield$this$rpcClient8 = _context20.v;
            call = _yield$this$rpcClient8.request;
            _context20.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context20.a(2, _context20.v);
        }
      }, _callee20, this);
    }));
    function setAuthority(_x10) {
      return _setAuthority.apply(this, arguments);
    }
    return setAuthority;
  }() }, {
    key: "setAuthorityEncode",
    value: function setAuthorityEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: coreMetadataModuleAbi, functionName: "setAuthority", args: [request.newAuthority] }) };
    }
    /**
    * method setMetadataURI for contract CoreMetadataModule
    *
    * @param request CoreMetadataModuleSetMetadataUriRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "setMetadataUri", value: function() {
    var _setMetadataUri = _asyncToGenerator(_regenerator().m(function _callee21(request) {
      var _yield$this$rpcClient9, call;
      return _regenerator().w(function(_context21) {
        while (1) switch (_context21.n) {
          case 0:
            _context21.n = 1;
            return this.rpcClient.simulateContract({ abi: coreMetadataModuleAbi, address: this.address, functionName: "setMetadataURI", account: this.wallet.account, args: [request.ipId, request.metadataURI, request.metadataHash] });
          case 1:
            _yield$this$rpcClient9 = _context21.v;
            call = _yield$this$rpcClient9.request;
            _context21.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context21.a(2, _context21.v);
        }
      }, _callee21, this);
    }));
    function setMetadataUri(_x11) {
      return _setMetadataUri.apply(this, arguments);
    }
    return setMetadataUri;
  }() }, {
    key: "setMetadataUriEncode",
    value: function setMetadataUriEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: coreMetadataModuleAbi, functionName: "setMetadataURI", args: [request.ipId, request.metadataURI, request.metadataHash] }) };
    }
    /**
    * method updateNftTokenURI for contract CoreMetadataModule
    *
    * @param request CoreMetadataModuleUpdateNftTokenUriRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "updateNftTokenUri", value: function() {
    var _updateNftTokenUri = _asyncToGenerator(_regenerator().m(function _callee22(request) {
      var _yield$this$rpcClient0, call;
      return _regenerator().w(function(_context22) {
        while (1) switch (_context22.n) {
          case 0:
            _context22.n = 1;
            return this.rpcClient.simulateContract({ abi: coreMetadataModuleAbi, address: this.address, functionName: "updateNftTokenURI", account: this.wallet.account, args: [request.ipId, request.nftMetadataHash] });
          case 1:
            _yield$this$rpcClient0 = _context22.v;
            call = _yield$this$rpcClient0.request;
            _context22.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context22.a(2, _context22.v);
        }
      }, _callee22, this);
    }));
    function updateNftTokenUri(_x12) {
      return _updateNftTokenUri.apply(this, arguments);
    }
    return updateNftTokenUri;
  }() }, {
    key: "updateNftTokenUriEncode",
    value: function updateNftTokenUriEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: coreMetadataModuleAbi, functionName: "updateNftTokenURI", args: [request.ipId, request.nftMetadataHash] }) };
    }
    /**
    * method upgradeToAndCall for contract CoreMetadataModule
    *
    * @param request CoreMetadataModuleUpgradeToAndCallRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "upgradeToAndCall", value: function() {
    var _upgradeToAndCall = _asyncToGenerator(_regenerator().m(function _callee23(request) {
      var _yield$this$rpcClient1, call;
      return _regenerator().w(function(_context23) {
        while (1) switch (_context23.n) {
          case 0:
            _context23.n = 1;
            return this.rpcClient.simulateContract({ abi: coreMetadataModuleAbi, address: this.address, functionName: "upgradeToAndCall", account: this.wallet.account, args: [request.newImplementation, request.data] });
          case 1:
            _yield$this$rpcClient1 = _context23.v;
            call = _yield$this$rpcClient1.request;
            _context23.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context23.a(2, _context23.v);
        }
      }, _callee23, this);
    }));
    function upgradeToAndCall(_x13) {
      return _upgradeToAndCall.apply(this, arguments);
    }
    return upgradeToAndCall;
  }() }, { key: "upgradeToAndCallEncode", value: function upgradeToAndCallEncode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: coreMetadataModuleAbi, functionName: "upgradeToAndCall", args: [request.newImplementation, request.data] }) };
  } }]);
}(CoreMetadataModuleReadOnlyClient);
var DerivativeWorkflowsClient = function() {
  function DerivativeWorkflowsClient2(rpcClient, wallet, address) {
    var _rpcClient$chain4;
    _classCallCheck(this, DerivativeWorkflowsClient2);
    this.address = address || getAddress(derivativeWorkflowsAddress, (_rpcClient$chain4 = rpcClient.chain) === null || _rpcClient$chain4 === void 0 ? void 0 : _rpcClient$chain4.id);
    this.rpcClient = rpcClient;
    this.wallet = wallet;
  }
  return _createClass(DerivativeWorkflowsClient2, [{ key: "mintAndRegisterIpAndMakeDerivative", value: function() {
    var _mintAndRegisterIpAndMakeDerivative = _asyncToGenerator(_regenerator().m(function _callee24(request) {
      var _yield$this$rpcClient10, call;
      return _regenerator().w(function(_context24) {
        while (1) switch (_context24.n) {
          case 0:
            _context24.n = 1;
            return this.rpcClient.simulateContract({ abi: derivativeWorkflowsAbi, address: this.address, functionName: "mintAndRegisterIpAndMakeDerivative", account: this.wallet.account, args: [request.spgNftContract, request.derivData, request.ipMetadata, request.recipient, request.allowDuplicates] });
          case 1:
            _yield$this$rpcClient10 = _context24.v;
            call = _yield$this$rpcClient10.request;
            _context24.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context24.a(2, _context24.v);
        }
      }, _callee24, this);
    }));
    function mintAndRegisterIpAndMakeDerivative(_x14) {
      return _mintAndRegisterIpAndMakeDerivative.apply(this, arguments);
    }
    return mintAndRegisterIpAndMakeDerivative;
  }() }, {
    key: "mintAndRegisterIpAndMakeDerivativeEncode",
    value: function mintAndRegisterIpAndMakeDerivativeEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: derivativeWorkflowsAbi, functionName: "mintAndRegisterIpAndMakeDerivative", args: [request.spgNftContract, request.derivData, request.ipMetadata, request.recipient, request.allowDuplicates] }) };
    }
    /**
    * method mintAndRegisterIpAndMakeDerivativeWithLicenseTokens for contract DerivativeWorkflows
    *
    * @param request DerivativeWorkflowsMintAndRegisterIpAndMakeDerivativeWithLicenseTokensRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "mintAndRegisterIpAndMakeDerivativeWithLicenseTokens", value: function() {
    var _mintAndRegisterIpAndMakeDerivativeWithLicenseTokens = _asyncToGenerator(_regenerator().m(function _callee25(request) {
      var _yield$this$rpcClient11, call;
      return _regenerator().w(function(_context25) {
        while (1) switch (_context25.n) {
          case 0:
            _context25.n = 1;
            return this.rpcClient.simulateContract({ abi: derivativeWorkflowsAbi, address: this.address, functionName: "mintAndRegisterIpAndMakeDerivativeWithLicenseTokens", account: this.wallet.account, args: [request.spgNftContract, request.licenseTokenIds, request.royaltyContext, request.maxRts, request.ipMetadata, request.recipient, request.allowDuplicates] });
          case 1:
            _yield$this$rpcClient11 = _context25.v;
            call = _yield$this$rpcClient11.request;
            _context25.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context25.a(2, _context25.v);
        }
      }, _callee25, this);
    }));
    function mintAndRegisterIpAndMakeDerivativeWithLicenseTokens(_x15) {
      return _mintAndRegisterIpAndMakeDerivativeWithLicenseTokens.apply(this, arguments);
    }
    return mintAndRegisterIpAndMakeDerivativeWithLicenseTokens;
  }() }, {
    key: "mintAndRegisterIpAndMakeDerivativeWithLicenseTokensEncode",
    value: function mintAndRegisterIpAndMakeDerivativeWithLicenseTokensEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: derivativeWorkflowsAbi, functionName: "mintAndRegisterIpAndMakeDerivativeWithLicenseTokens", args: [request.spgNftContract, request.licenseTokenIds, request.royaltyContext, request.maxRts, request.ipMetadata, request.recipient, request.allowDuplicates] }) };
    }
    /**
    * method multicall for contract DerivativeWorkflows
    *
    * @param request DerivativeWorkflowsMulticallRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "multicall", value: function() {
    var _multicall = _asyncToGenerator(_regenerator().m(function _callee26(request) {
      var _yield$this$rpcClient12, call;
      return _regenerator().w(function(_context26) {
        while (1) switch (_context26.n) {
          case 0:
            _context26.n = 1;
            return this.rpcClient.simulateContract({ abi: derivativeWorkflowsAbi, address: this.address, functionName: "multicall", account: this.wallet.account, args: [request.data] });
          case 1:
            _yield$this$rpcClient12 = _context26.v;
            call = _yield$this$rpcClient12.request;
            _context26.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context26.a(2, _context26.v);
        }
      }, _callee26, this);
    }));
    function multicall(_x16) {
      return _multicall.apply(this, arguments);
    }
    return multicall;
  }() }, {
    key: "multicallEncode",
    value: function multicallEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: derivativeWorkflowsAbi, functionName: "multicall", args: [request.data] }) };
    }
    /**
    * method registerIpAndMakeDerivative for contract DerivativeWorkflows
    *
    * @param request DerivativeWorkflowsRegisterIpAndMakeDerivativeRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "registerIpAndMakeDerivative", value: function() {
    var _registerIpAndMakeDerivative = _asyncToGenerator(_regenerator().m(function _callee27(request) {
      var _yield$this$rpcClient13, call;
      return _regenerator().w(function(_context27) {
        while (1) switch (_context27.n) {
          case 0:
            _context27.n = 1;
            return this.rpcClient.simulateContract({ abi: derivativeWorkflowsAbi, address: this.address, functionName: "registerIpAndMakeDerivative", account: this.wallet.account, args: [request.nftContract, request.tokenId, request.derivData, request.ipMetadata, request.sigMetadataAndRegister] });
          case 1:
            _yield$this$rpcClient13 = _context27.v;
            call = _yield$this$rpcClient13.request;
            _context27.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context27.a(2, _context27.v);
        }
      }, _callee27, this);
    }));
    function registerIpAndMakeDerivative(_x17) {
      return _registerIpAndMakeDerivative.apply(this, arguments);
    }
    return registerIpAndMakeDerivative;
  }() }, {
    key: "registerIpAndMakeDerivativeEncode",
    value: function registerIpAndMakeDerivativeEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: derivativeWorkflowsAbi, functionName: "registerIpAndMakeDerivative", args: [request.nftContract, request.tokenId, request.derivData, request.ipMetadata, request.sigMetadataAndRegister] }) };
    }
    /**
    * method registerIpAndMakeDerivativeWithLicenseTokens for contract DerivativeWorkflows
    *
    * @param request DerivativeWorkflowsRegisterIpAndMakeDerivativeWithLicenseTokensRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "registerIpAndMakeDerivativeWithLicenseTokens", value: function() {
    var _registerIpAndMakeDerivativeWithLicenseTokens = _asyncToGenerator(_regenerator().m(function _callee28(request) {
      var _yield$this$rpcClient14, call;
      return _regenerator().w(function(_context28) {
        while (1) switch (_context28.n) {
          case 0:
            _context28.n = 1;
            return this.rpcClient.simulateContract({ abi: derivativeWorkflowsAbi, address: this.address, functionName: "registerIpAndMakeDerivativeWithLicenseTokens", account: this.wallet.account, args: [request.nftContract, request.tokenId, request.licenseTokenIds, request.royaltyContext, request.maxRts, request.ipMetadata, request.sigMetadataAndRegister] });
          case 1:
            _yield$this$rpcClient14 = _context28.v;
            call = _yield$this$rpcClient14.request;
            _context28.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context28.a(2, _context28.v);
        }
      }, _callee28, this);
    }));
    function registerIpAndMakeDerivativeWithLicenseTokens(_x18) {
      return _registerIpAndMakeDerivativeWithLicenseTokens.apply(this, arguments);
    }
    return registerIpAndMakeDerivativeWithLicenseTokens;
  }() }, { key: "registerIpAndMakeDerivativeWithLicenseTokensEncode", value: function registerIpAndMakeDerivativeWithLicenseTokensEncode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: derivativeWorkflowsAbi, functionName: "registerIpAndMakeDerivativeWithLicenseTokens", args: [request.nftContract, request.tokenId, request.licenseTokenIds, request.royaltyContext, request.maxRts, request.ipMetadata, request.sigMetadataAndRegister] }) };
  } }]);
}();
var DisputeModuleEventClient = function() {
  function DisputeModuleEventClient2(rpcClient, address) {
    var _rpcClient$chain5;
    _classCallCheck(this, DisputeModuleEventClient2);
    this.address = address || getAddress(disputeModuleAddress, (_rpcClient$chain5 = rpcClient.chain) === null || _rpcClient$chain5 === void 0 ? void 0 : _rpcClient$chain5.id);
    this.rpcClient = rpcClient;
  }
  return _createClass(DisputeModuleEventClient2, [{
    key: "watchDisputeCancelledEvent",
    value: function watchDisputeCancelledEvent(_onLogs8) {
      return this.rpcClient.watchContractEvent({ abi: disputeModuleAbi, address: this.address, eventName: "DisputeCancelled", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs8(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event DisputeCancelled for contract DisputeModule
    */
  }, {
    key: "parseTxDisputeCancelledEvent",
    value: function parseTxDisputeCancelledEvent(txReceipt) {
      var targetLogs = [];
      var _iterator8 = _createForOfIteratorHelper(txReceipt.logs), _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
          var log = _step8.value;
          try {
            var event = decodeEventLog({ abi: disputeModuleAbi, eventName: "DisputeCancelled", data: log.data, topics: log.topics });
            if (event.eventName === "DisputeCancelled") {
              targetLogs.push(event.args);
            }
          } catch (e) {
          }
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
      return targetLogs;
    }
    /**
    * event DisputeRaised for contract DisputeModule
    */
  }, {
    key: "watchDisputeRaisedEvent",
    value: function watchDisputeRaisedEvent(_onLogs9) {
      return this.rpcClient.watchContractEvent({ abi: disputeModuleAbi, address: this.address, eventName: "DisputeRaised", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs9(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event DisputeRaised for contract DisputeModule
    */
  }, {
    key: "parseTxDisputeRaisedEvent",
    value: function parseTxDisputeRaisedEvent(txReceipt) {
      var targetLogs = [];
      var _iterator9 = _createForOfIteratorHelper(txReceipt.logs), _step9;
      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done; ) {
          var log = _step9.value;
          try {
            var event = decodeEventLog({ abi: disputeModuleAbi, eventName: "DisputeRaised", data: log.data, topics: log.topics });
            if (event.eventName === "DisputeRaised") {
              targetLogs.push(event.args);
            }
          } catch (e) {
          }
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
      return targetLogs;
    }
    /**
    * event DisputeResolved for contract DisputeModule
    */
  }, {
    key: "watchDisputeResolvedEvent",
    value: function watchDisputeResolvedEvent(_onLogs0) {
      return this.rpcClient.watchContractEvent({ abi: disputeModuleAbi, address: this.address, eventName: "DisputeResolved", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs0(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event DisputeResolved for contract DisputeModule
    */
  }, { key: "parseTxDisputeResolvedEvent", value: function parseTxDisputeResolvedEvent(txReceipt) {
    var targetLogs = [];
    var _iterator0 = _createForOfIteratorHelper(txReceipt.logs), _step0;
    try {
      for (_iterator0.s(); !(_step0 = _iterator0.n()).done; ) {
        var log = _step0.value;
        try {
          var event = decodeEventLog({ abi: disputeModuleAbi, eventName: "DisputeResolved", data: log.data, topics: log.topics });
          if (event.eventName === "DisputeResolved") {
            targetLogs.push(event.args);
          }
        } catch (e) {
        }
      }
    } catch (err) {
      _iterator0.e(err);
    } finally {
      _iterator0.f();
    }
    return targetLogs;
  } }]);
}();
var DisputeModuleReadOnlyClient = function(_DisputeModuleEventCl) {
  function DisputeModuleReadOnlyClient2(rpcClient, address) {
    _classCallCheck(this, DisputeModuleReadOnlyClient2);
    return _callSuper(this, DisputeModuleReadOnlyClient2, [rpcClient, address]);
  }
  _inherits(DisputeModuleReadOnlyClient2, _DisputeModuleEventCl);
  return _createClass(DisputeModuleReadOnlyClient2, [{ key: "isWhitelistedDisputeTag", value: function() {
    var _isWhitelistedDisputeTag = _asyncToGenerator(_regenerator().m(function _callee29(request) {
      var result;
      return _regenerator().w(function(_context29) {
        while (1) switch (_context29.n) {
          case 0:
            _context29.n = 1;
            return this.rpcClient.readContract({ abi: disputeModuleAbi, address: this.address, functionName: "isWhitelistedDisputeTag", args: [request.tag] });
          case 1:
            result = _context29.v;
            return _context29.a(2, { allowed: result });
        }
      }, _callee29, this);
    }));
    function isWhitelistedDisputeTag(_x19) {
      return _isWhitelistedDisputeTag.apply(this, arguments);
    }
    return isWhitelistedDisputeTag;
  }() }]);
}(DisputeModuleEventClient);
var DisputeModuleClient = function(_DisputeModuleReadOnl) {
  function DisputeModuleClient2(rpcClient, wallet, address) {
    var _this4;
    _classCallCheck(this, DisputeModuleClient2);
    _this4 = _callSuper(this, DisputeModuleClient2, [rpcClient, address]);
    _this4.wallet = wallet;
    return _this4;
  }
  _inherits(DisputeModuleClient2, _DisputeModuleReadOnl);
  return _createClass(DisputeModuleClient2, [{ key: "cancelDispute", value: function() {
    var _cancelDispute = _asyncToGenerator(_regenerator().m(function _callee30(request) {
      var _yield$this$rpcClient15, call;
      return _regenerator().w(function(_context30) {
        while (1) switch (_context30.n) {
          case 0:
            _context30.n = 1;
            return this.rpcClient.simulateContract({ abi: disputeModuleAbi, address: this.address, functionName: "cancelDispute", account: this.wallet.account, args: [request.disputeId, request.data] });
          case 1:
            _yield$this$rpcClient15 = _context30.v;
            call = _yield$this$rpcClient15.request;
            _context30.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context30.a(2, _context30.v);
        }
      }, _callee30, this);
    }));
    function cancelDispute(_x20) {
      return _cancelDispute.apply(this, arguments);
    }
    return cancelDispute;
  }() }, {
    key: "cancelDisputeEncode",
    value: function cancelDisputeEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: disputeModuleAbi, functionName: "cancelDispute", args: [request.disputeId, request.data] }) };
    }
    /**
    * method raiseDispute for contract DisputeModule
    *
    * @param request DisputeModuleRaiseDisputeRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "raiseDispute", value: function() {
    var _raiseDispute = _asyncToGenerator(_regenerator().m(function _callee31(request) {
      var _yield$this$rpcClient16, call;
      return _regenerator().w(function(_context31) {
        while (1) switch (_context31.n) {
          case 0:
            _context31.n = 1;
            return this.rpcClient.simulateContract({ abi: disputeModuleAbi, address: this.address, functionName: "raiseDispute", account: this.wallet.account, args: [request.targetIpId, request.disputeEvidenceHash, request.targetTag, request.data] });
          case 1:
            _yield$this$rpcClient16 = _context31.v;
            call = _yield$this$rpcClient16.request;
            _context31.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context31.a(2, _context31.v);
        }
      }, _callee31, this);
    }));
    function raiseDispute(_x21) {
      return _raiseDispute.apply(this, arguments);
    }
    return raiseDispute;
  }() }, {
    key: "raiseDisputeEncode",
    value: function raiseDisputeEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: disputeModuleAbi, functionName: "raiseDispute", args: [request.targetIpId, request.disputeEvidenceHash, request.targetTag, request.data] }) };
    }
    /**
    * method resolveDispute for contract DisputeModule
    *
    * @param request DisputeModuleResolveDisputeRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "resolveDispute", value: function() {
    var _resolveDispute = _asyncToGenerator(_regenerator().m(function _callee32(request) {
      var _yield$this$rpcClient17, call;
      return _regenerator().w(function(_context32) {
        while (1) switch (_context32.n) {
          case 0:
            _context32.n = 1;
            return this.rpcClient.simulateContract({ abi: disputeModuleAbi, address: this.address, functionName: "resolveDispute", account: this.wallet.account, args: [request.disputeId, request.data] });
          case 1:
            _yield$this$rpcClient17 = _context32.v;
            call = _yield$this$rpcClient17.request;
            _context32.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context32.a(2, _context32.v);
        }
      }, _callee32, this);
    }));
    function resolveDispute(_x22) {
      return _resolveDispute.apply(this, arguments);
    }
    return resolveDispute;
  }() }, {
    key: "resolveDisputeEncode",
    value: function resolveDisputeEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: disputeModuleAbi, functionName: "resolveDispute", args: [request.disputeId, request.data] }) };
    }
    /**
    * method tagIfRelatedIpInfringed for contract DisputeModule
    *
    * @param request DisputeModuleTagIfRelatedIpInfringedRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "tagIfRelatedIpInfringed", value: function() {
    var _tagIfRelatedIpInfringed = _asyncToGenerator(_regenerator().m(function _callee33(request) {
      var _yield$this$rpcClient18, call;
      return _regenerator().w(function(_context33) {
        while (1) switch (_context33.n) {
          case 0:
            _context33.n = 1;
            return this.rpcClient.simulateContract({ abi: disputeModuleAbi, address: this.address, functionName: "tagIfRelatedIpInfringed", account: this.wallet.account, args: [request.ipIdToTag, request.infringerDisputeId] });
          case 1:
            _yield$this$rpcClient18 = _context33.v;
            call = _yield$this$rpcClient18.request;
            _context33.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context33.a(2, _context33.v);
        }
      }, _callee33, this);
    }));
    function tagIfRelatedIpInfringed(_x23) {
      return _tagIfRelatedIpInfringed.apply(this, arguments);
    }
    return tagIfRelatedIpInfringed;
  }() }, { key: "tagIfRelatedIpInfringedEncode", value: function tagIfRelatedIpInfringedEncode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: disputeModuleAbi, functionName: "tagIfRelatedIpInfringed", args: [request.ipIdToTag, request.infringerDisputeId] }) };
  } }]);
}(DisputeModuleReadOnlyClient);
var Erc20ReadOnlyClient = function() {
  function Erc20ReadOnlyClient2(rpcClient, address) {
    var _rpcClient$chain6;
    _classCallCheck(this, Erc20ReadOnlyClient2);
    this.address = address || getAddress(erc20Address, (_rpcClient$chain6 = rpcClient.chain) === null || _rpcClient$chain6 === void 0 ? void 0 : _rpcClient$chain6.id);
    this.rpcClient = rpcClient;
  }
  return _createClass(Erc20ReadOnlyClient2, [{ key: "allowance", value: function() {
    var _allowance = _asyncToGenerator(_regenerator().m(function _callee34(request) {
      return _regenerator().w(function(_context34) {
        while (1) switch (_context34.n) {
          case 0:
            _context34.n = 1;
            return this.rpcClient.readContract({ abi: erc20Abi2, address: this.address, functionName: "allowance", args: [request.owner, request.spender] });
          case 1:
            return _context34.a(2, _context34.v);
        }
      }, _callee34, this);
    }));
    function allowance(_x24) {
      return _allowance.apply(this, arguments);
    }
    return allowance;
  }() }, { key: "balanceOf", value: function() {
    var _balanceOf = _asyncToGenerator(_regenerator().m(function _callee35(request) {
      return _regenerator().w(function(_context35) {
        while (1) switch (_context35.n) {
          case 0:
            _context35.n = 1;
            return this.rpcClient.readContract({ abi: erc20Abi2, address: this.address, functionName: "balanceOf", args: [request.account] });
          case 1:
            return _context35.a(2, _context35.v);
        }
      }, _callee35, this);
    }));
    function balanceOf(_x25) {
      return _balanceOf.apply(this, arguments);
    }
    return balanceOf;
  }() }]);
}();
var Erc20Client = function(_Erc20ReadOnlyClient) {
  function Erc20Client2(rpcClient, wallet, address) {
    var _this5;
    _classCallCheck(this, Erc20Client2);
    _this5 = _callSuper(this, Erc20Client2, [rpcClient, address]);
    _this5.wallet = wallet;
    return _this5;
  }
  _inherits(Erc20Client2, _Erc20ReadOnlyClient);
  return _createClass(Erc20Client2, [{ key: "approve", value: function() {
    var _approve = _asyncToGenerator(_regenerator().m(function _callee36(request) {
      var _yield$this$rpcClient19, call;
      return _regenerator().w(function(_context36) {
        while (1) switch (_context36.n) {
          case 0:
            _context36.n = 1;
            return this.rpcClient.simulateContract({ abi: erc20Abi2, address: this.address, functionName: "approve", account: this.wallet.account, args: [request.spender, request.value] });
          case 1:
            _yield$this$rpcClient19 = _context36.v;
            call = _yield$this$rpcClient19.request;
            _context36.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context36.a(2, _context36.v);
        }
      }, _callee36, this);
    }));
    function approve(_x26) {
      return _approve.apply(this, arguments);
    }
    return approve;
  }() }, {
    key: "approveEncode",
    value: function approveEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: erc20Abi2, functionName: "approve", args: [request.spender, request.value] }) };
    }
    /**
    * method mint for contract ERC20
    *
    * @param request Erc20MintRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "mint", value: function() {
    var _mint = _asyncToGenerator(_regenerator().m(function _callee37(request) {
      var _yield$this$rpcClient20, call;
      return _regenerator().w(function(_context37) {
        while (1) switch (_context37.n) {
          case 0:
            _context37.n = 1;
            return this.rpcClient.simulateContract({ abi: erc20Abi2, address: this.address, functionName: "mint", account: this.wallet.account, args: [request.to, request.amount] });
          case 1:
            _yield$this$rpcClient20 = _context37.v;
            call = _yield$this$rpcClient20.request;
            _context37.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context37.a(2, _context37.v);
        }
      }, _callee37, this);
    }));
    function mint(_x27) {
      return _mint.apply(this, arguments);
    }
    return mint;
  }() }, {
    key: "mintEncode",
    value: function mintEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: erc20Abi2, functionName: "mint", args: [request.to, request.amount] }) };
    }
    /**
    * method transfer for contract ERC20
    *
    * @param request Erc20TransferRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "transfer", value: function() {
    var _transfer = _asyncToGenerator(_regenerator().m(function _callee38(request) {
      var _yield$this$rpcClient21, call;
      return _regenerator().w(function(_context38) {
        while (1) switch (_context38.n) {
          case 0:
            _context38.n = 1;
            return this.rpcClient.simulateContract({ abi: erc20Abi2, address: this.address, functionName: "transfer", account: this.wallet.account, args: [request.to, request.value] });
          case 1:
            _yield$this$rpcClient21 = _context38.v;
            call = _yield$this$rpcClient21.request;
            _context38.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context38.a(2, _context38.v);
        }
      }, _callee38, this);
    }));
    function transfer(_x28) {
      return _transfer.apply(this, arguments);
    }
    return transfer;
  }() }, {
    key: "transferEncode",
    value: function transferEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: erc20Abi2, functionName: "transfer", args: [request.to, request.value] }) };
    }
    /**
    * method transferFrom for contract ERC20
    *
    * @param request Erc20TransferFromRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "transferFrom", value: function() {
    var _transferFrom = _asyncToGenerator(_regenerator().m(function _callee39(request) {
      var _yield$this$rpcClient22, call;
      return _regenerator().w(function(_context39) {
        while (1) switch (_context39.n) {
          case 0:
            _context39.n = 1;
            return this.rpcClient.simulateContract({ abi: erc20Abi2, address: this.address, functionName: "transferFrom", account: this.wallet.account, args: [request.from, request.to, request.value] });
          case 1:
            _yield$this$rpcClient22 = _context39.v;
            call = _yield$this$rpcClient22.request;
            _context39.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context39.a(2, _context39.v);
        }
      }, _callee39, this);
    }));
    function transferFrom(_x29) {
      return _transferFrom.apply(this, arguments);
    }
    return transferFrom;
  }() }, { key: "transferFromEncode", value: function transferFromEncode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: erc20Abi2, functionName: "transferFrom", args: [request.from, request.to, request.value] }) };
  } }]);
}(Erc20ReadOnlyClient);
var GroupingModuleEventClient = function() {
  function GroupingModuleEventClient2(rpcClient, address) {
    var _rpcClient$chain8;
    _classCallCheck(this, GroupingModuleEventClient2);
    this.address = address || getAddress(groupingModuleAddress, (_rpcClient$chain8 = rpcClient.chain) === null || _rpcClient$chain8 === void 0 ? void 0 : _rpcClient$chain8.id);
    this.rpcClient = rpcClient;
  }
  return _createClass(GroupingModuleEventClient2, [{
    key: "watchClaimedRewardEvent",
    value: function watchClaimedRewardEvent(_onLogs14) {
      return this.rpcClient.watchContractEvent({ abi: groupingModuleAbi, address: this.address, eventName: "ClaimedReward", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs14(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event ClaimedReward for contract GroupingModule
    */
  }, {
    key: "parseTxClaimedRewardEvent",
    value: function parseTxClaimedRewardEvent(txReceipt) {
      var targetLogs = [];
      var _iterator14 = _createForOfIteratorHelper(txReceipt.logs), _step14;
      try {
        for (_iterator14.s(); !(_step14 = _iterator14.n()).done; ) {
          var log = _step14.value;
          try {
            var event = decodeEventLog({ abi: groupingModuleAbi, eventName: "ClaimedReward", data: log.data, topics: log.topics });
            if (event.eventName === "ClaimedReward") {
              targetLogs.push(event.args);
            }
          } catch (e) {
          }
        }
      } catch (err) {
        _iterator14.e(err);
      } finally {
        _iterator14.f();
      }
      return targetLogs;
    }
    /**
    * event CollectedRoyaltiesToGroupPool for contract GroupingModule
    */
  }, {
    key: "watchCollectedRoyaltiesToGroupPoolEvent",
    value: function watchCollectedRoyaltiesToGroupPoolEvent(_onLogs15) {
      return this.rpcClient.watchContractEvent({ abi: groupingModuleAbi, address: this.address, eventName: "CollectedRoyaltiesToGroupPool", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs15(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event CollectedRoyaltiesToGroupPool for contract GroupingModule
    */
  }, {
    key: "parseTxCollectedRoyaltiesToGroupPoolEvent",
    value: function parseTxCollectedRoyaltiesToGroupPoolEvent(txReceipt) {
      var targetLogs = [];
      var _iterator15 = _createForOfIteratorHelper(txReceipt.logs), _step15;
      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done; ) {
          var log = _step15.value;
          try {
            var event = decodeEventLog({ abi: groupingModuleAbi, eventName: "CollectedRoyaltiesToGroupPool", data: log.data, topics: log.topics });
            if (event.eventName === "CollectedRoyaltiesToGroupPool") {
              targetLogs.push(event.args);
            }
          } catch (e) {
          }
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }
      return targetLogs;
    }
    /**
    * event IPGroupRegistered for contract GroupingModule
    */
  }, {
    key: "watchIpGroupRegisteredEvent",
    value: function watchIpGroupRegisteredEvent(_onLogs16) {
      return this.rpcClient.watchContractEvent({ abi: groupingModuleAbi, address: this.address, eventName: "IPGroupRegistered", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs16(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event IPGroupRegistered for contract GroupingModule
    */
  }, { key: "parseTxIpGroupRegisteredEvent", value: function parseTxIpGroupRegisteredEvent(txReceipt) {
    var targetLogs = [];
    var _iterator16 = _createForOfIteratorHelper(txReceipt.logs), _step16;
    try {
      for (_iterator16.s(); !(_step16 = _iterator16.n()).done; ) {
        var log = _step16.value;
        try {
          var event = decodeEventLog({ abi: groupingModuleAbi, eventName: "IPGroupRegistered", data: log.data, topics: log.topics });
          if (event.eventName === "IPGroupRegistered") {
            targetLogs.push(event.args);
          }
        } catch (e) {
        }
      }
    } catch (err) {
      _iterator16.e(err);
    } finally {
      _iterator16.f();
    }
    return targetLogs;
  } }]);
}();
var GroupingModuleReadOnlyClient = function(_GroupingModuleEventC) {
  function GroupingModuleReadOnlyClient2(rpcClient, address) {
    _classCallCheck(this, GroupingModuleReadOnlyClient2);
    return _callSuper(this, GroupingModuleReadOnlyClient2, [rpcClient, address]);
  }
  _inherits(GroupingModuleReadOnlyClient2, _GroupingModuleEventC);
  return _createClass(GroupingModuleReadOnlyClient2, [{ key: "getClaimableReward", value: function() {
    var _getClaimableReward = _asyncToGenerator(_regenerator().m(function _callee66(request) {
      return _regenerator().w(function(_context66) {
        while (1) switch (_context66.n) {
          case 0:
            _context66.n = 1;
            return this.rpcClient.readContract({ abi: groupingModuleAbi, address: this.address, functionName: "getClaimableReward", args: [request.groupId, request.token, request.ipIds] });
          case 1:
            return _context66.a(2, _context66.v);
        }
      }, _callee66, this);
    }));
    function getClaimableReward(_x45) {
      return _getClaimableReward.apply(this, arguments);
    }
    return getClaimableReward;
  }() }]);
}(GroupingModuleEventClient);
var GroupingModuleClient = function(_GroupingModuleReadOn) {
  function GroupingModuleClient2(rpcClient, wallet, address) {
    var _this7;
    _classCallCheck(this, GroupingModuleClient2);
    _this7 = _callSuper(this, GroupingModuleClient2, [rpcClient, address]);
    _this7.wallet = wallet;
    return _this7;
  }
  _inherits(GroupingModuleClient2, _GroupingModuleReadOn);
  return _createClass(GroupingModuleClient2, [{ key: "addIp", value: function() {
    var _addIp2 = _asyncToGenerator(_regenerator().m(function _callee67(request) {
      var _yield$this$rpcClient33, call;
      return _regenerator().w(function(_context67) {
        while (1) switch (_context67.n) {
          case 0:
            _context67.n = 1;
            return this.rpcClient.simulateContract({ abi: groupingModuleAbi, address: this.address, functionName: "addIp", account: this.wallet.account, args: [request.groupIpId, request.ipIds, request.maxAllowedRewardShare] });
          case 1:
            _yield$this$rpcClient33 = _context67.v;
            call = _yield$this$rpcClient33.request;
            _context67.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context67.a(2, _context67.v);
        }
      }, _callee67, this);
    }));
    function addIp(_x46) {
      return _addIp2.apply(this, arguments);
    }
    return addIp;
  }() }, {
    key: "addIpEncode",
    value: function addIpEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: groupingModuleAbi, functionName: "addIp", args: [request.groupIpId, request.ipIds, request.maxAllowedRewardShare] }) };
    }
    /**
    * method claimReward for contract GroupingModule
    *
    * @param request GroupingModuleClaimRewardRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "claimReward", value: function() {
    var _claimReward = _asyncToGenerator(_regenerator().m(function _callee68(request) {
      var _yield$this$rpcClient34, call;
      return _regenerator().w(function(_context68) {
        while (1) switch (_context68.n) {
          case 0:
            _context68.n = 1;
            return this.rpcClient.simulateContract({ abi: groupingModuleAbi, address: this.address, functionName: "claimReward", account: this.wallet.account, args: [request.groupId, request.token, request.ipIds] });
          case 1:
            _yield$this$rpcClient34 = _context68.v;
            call = _yield$this$rpcClient34.request;
            _context68.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context68.a(2, _context68.v);
        }
      }, _callee68, this);
    }));
    function claimReward(_x47) {
      return _claimReward.apply(this, arguments);
    }
    return claimReward;
  }() }, {
    key: "claimRewardEncode",
    value: function claimRewardEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: groupingModuleAbi, functionName: "claimReward", args: [request.groupId, request.token, request.ipIds] }) };
    }
    /**
    * method collectRoyalties for contract GroupingModule
    *
    * @param request GroupingModuleCollectRoyaltiesRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "collectRoyalties", value: function() {
    var _collectRoyalties = _asyncToGenerator(_regenerator().m(function _callee69(request) {
      var _yield$this$rpcClient35, call;
      return _regenerator().w(function(_context69) {
        while (1) switch (_context69.n) {
          case 0:
            _context69.n = 1;
            return this.rpcClient.simulateContract({ abi: groupingModuleAbi, address: this.address, functionName: "collectRoyalties", account: this.wallet.account, args: [request.groupId, request.token] });
          case 1:
            _yield$this$rpcClient35 = _context69.v;
            call = _yield$this$rpcClient35.request;
            _context69.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context69.a(2, _context69.v);
        }
      }, _callee69, this);
    }));
    function collectRoyalties(_x48) {
      return _collectRoyalties.apply(this, arguments);
    }
    return collectRoyalties;
  }() }, {
    key: "collectRoyaltiesEncode",
    value: function collectRoyaltiesEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: groupingModuleAbi, functionName: "collectRoyalties", args: [request.groupId, request.token] }) };
    }
    /**
    * method registerGroup for contract GroupingModule
    *
    * @param request GroupingModuleRegisterGroupRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "registerGroup", value: function() {
    var _registerGroup = _asyncToGenerator(_regenerator().m(function _callee70(request) {
      var _yield$this$rpcClient36, call;
      return _regenerator().w(function(_context70) {
        while (1) switch (_context70.n) {
          case 0:
            _context70.n = 1;
            return this.rpcClient.simulateContract({ abi: groupingModuleAbi, address: this.address, functionName: "registerGroup", account: this.wallet.account, args: [request.groupPool] });
          case 1:
            _yield$this$rpcClient36 = _context70.v;
            call = _yield$this$rpcClient36.request;
            _context70.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context70.a(2, _context70.v);
        }
      }, _callee70, this);
    }));
    function registerGroup(_x49) {
      return _registerGroup.apply(this, arguments);
    }
    return registerGroup;
  }() }, {
    key: "registerGroupEncode",
    value: function registerGroupEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: groupingModuleAbi, functionName: "registerGroup", args: [request.groupPool] }) };
    }
    /**
    * method removeIp for contract GroupingModule
    *
    * @param request GroupingModuleRemoveIpRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "removeIp", value: function() {
    var _removeIp2 = _asyncToGenerator(_regenerator().m(function _callee71(request) {
      var _yield$this$rpcClient37, call;
      return _regenerator().w(function(_context71) {
        while (1) switch (_context71.n) {
          case 0:
            _context71.n = 1;
            return this.rpcClient.simulateContract({ abi: groupingModuleAbi, address: this.address, functionName: "removeIp", account: this.wallet.account, args: [request.groupIpId, request.ipIds] });
          case 1:
            _yield$this$rpcClient37 = _context71.v;
            call = _yield$this$rpcClient37.request;
            _context71.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context71.a(2, _context71.v);
        }
      }, _callee71, this);
    }));
    function removeIp(_x50) {
      return _removeIp2.apply(this, arguments);
    }
    return removeIp;
  }() }, { key: "removeIpEncode", value: function removeIpEncode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: groupingModuleAbi, functionName: "removeIp", args: [request.groupIpId, request.ipIds] }) };
  } }]);
}(GroupingModuleReadOnlyClient);
var GroupingWorkflowsClient = function() {
  function GroupingWorkflowsClient2(rpcClient, wallet, address) {
    var _rpcClient$chain9;
    _classCallCheck(this, GroupingWorkflowsClient2);
    this.address = address || getAddress(groupingWorkflowsAddress, (_rpcClient$chain9 = rpcClient.chain) === null || _rpcClient$chain9 === void 0 ? void 0 : _rpcClient$chain9.id);
    this.rpcClient = rpcClient;
    this.wallet = wallet;
  }
  return _createClass(GroupingWorkflowsClient2, [{ key: "collectRoyaltiesAndClaimReward", value: function() {
    var _collectRoyaltiesAndClaimReward = _asyncToGenerator(_regenerator().m(function _callee72(request) {
      var _yield$this$rpcClient38, call;
      return _regenerator().w(function(_context72) {
        while (1) switch (_context72.n) {
          case 0:
            _context72.n = 1;
            return this.rpcClient.simulateContract({ abi: groupingWorkflowsAbi, address: this.address, functionName: "collectRoyaltiesAndClaimReward", account: this.wallet.account, args: [request.groupIpId, request.currencyTokens, request.memberIpIds] });
          case 1:
            _yield$this$rpcClient38 = _context72.v;
            call = _yield$this$rpcClient38.request;
            _context72.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context72.a(2, _context72.v);
        }
      }, _callee72, this);
    }));
    function collectRoyaltiesAndClaimReward(_x51) {
      return _collectRoyaltiesAndClaimReward.apply(this, arguments);
    }
    return collectRoyaltiesAndClaimReward;
  }() }, {
    key: "collectRoyaltiesAndClaimRewardEncode",
    value: function collectRoyaltiesAndClaimRewardEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: groupingWorkflowsAbi, functionName: "collectRoyaltiesAndClaimReward", args: [request.groupIpId, request.currencyTokens, request.memberIpIds] }) };
    }
    /**
    * method mintAndRegisterIpAndAttachLicenseAndAddToGroup for contract GroupingWorkflows
    *
    * @param request GroupingWorkflowsMintAndRegisterIpAndAttachLicenseAndAddToGroupRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "mintAndRegisterIpAndAttachLicenseAndAddToGroup", value: function() {
    var _mintAndRegisterIpAndAttachLicenseAndAddToGroup = _asyncToGenerator(_regenerator().m(function _callee73(request) {
      var _yield$this$rpcClient39, call;
      return _regenerator().w(function(_context73) {
        while (1) switch (_context73.n) {
          case 0:
            _context73.n = 1;
            return this.rpcClient.simulateContract({ abi: groupingWorkflowsAbi, address: this.address, functionName: "mintAndRegisterIpAndAttachLicenseAndAddToGroup", account: this.wallet.account, args: [request.spgNftContract, request.groupId, request.recipient, request.maxAllowedRewardShare, request.licensesData, request.ipMetadata, request.sigAddToGroup, request.allowDuplicates] });
          case 1:
            _yield$this$rpcClient39 = _context73.v;
            call = _yield$this$rpcClient39.request;
            _context73.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context73.a(2, _context73.v);
        }
      }, _callee73, this);
    }));
    function mintAndRegisterIpAndAttachLicenseAndAddToGroup(_x52) {
      return _mintAndRegisterIpAndAttachLicenseAndAddToGroup.apply(this, arguments);
    }
    return mintAndRegisterIpAndAttachLicenseAndAddToGroup;
  }() }, {
    key: "mintAndRegisterIpAndAttachLicenseAndAddToGroupEncode",
    value: function mintAndRegisterIpAndAttachLicenseAndAddToGroupEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: groupingWorkflowsAbi, functionName: "mintAndRegisterIpAndAttachLicenseAndAddToGroup", args: [request.spgNftContract, request.groupId, request.recipient, request.maxAllowedRewardShare, request.licensesData, request.ipMetadata, request.sigAddToGroup, request.allowDuplicates] }) };
    }
    /**
    * method registerGroupAndAttachLicense for contract GroupingWorkflows
    *
    * @param request GroupingWorkflowsRegisterGroupAndAttachLicenseRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "registerGroupAndAttachLicense", value: function() {
    var _registerGroupAndAttachLicense = _asyncToGenerator(_regenerator().m(function _callee74(request) {
      var _yield$this$rpcClient40, call;
      return _regenerator().w(function(_context74) {
        while (1) switch (_context74.n) {
          case 0:
            _context74.n = 1;
            return this.rpcClient.simulateContract({ abi: groupingWorkflowsAbi, address: this.address, functionName: "registerGroupAndAttachLicense", account: this.wallet.account, args: [request.groupPool, request.licenseData] });
          case 1:
            _yield$this$rpcClient40 = _context74.v;
            call = _yield$this$rpcClient40.request;
            _context74.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context74.a(2, _context74.v);
        }
      }, _callee74, this);
    }));
    function registerGroupAndAttachLicense(_x53) {
      return _registerGroupAndAttachLicense.apply(this, arguments);
    }
    return registerGroupAndAttachLicense;
  }() }, {
    key: "registerGroupAndAttachLicenseEncode",
    value: function registerGroupAndAttachLicenseEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: groupingWorkflowsAbi, functionName: "registerGroupAndAttachLicense", args: [request.groupPool, request.licenseData] }) };
    }
    /**
    * method registerGroupAndAttachLicenseAndAddIps for contract GroupingWorkflows
    *
    * @param request GroupingWorkflowsRegisterGroupAndAttachLicenseAndAddIpsRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "registerGroupAndAttachLicenseAndAddIps", value: function() {
    var _registerGroupAndAttachLicenseAndAddIps = _asyncToGenerator(_regenerator().m(function _callee75(request) {
      var _yield$this$rpcClient41, call;
      return _regenerator().w(function(_context75) {
        while (1) switch (_context75.n) {
          case 0:
            _context75.n = 1;
            return this.rpcClient.simulateContract({ abi: groupingWorkflowsAbi, address: this.address, functionName: "registerGroupAndAttachLicenseAndAddIps", account: this.wallet.account, args: [request.groupPool, request.ipIds, request.maxAllowedRewardShare, request.licenseData] });
          case 1:
            _yield$this$rpcClient41 = _context75.v;
            call = _yield$this$rpcClient41.request;
            _context75.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context75.a(2, _context75.v);
        }
      }, _callee75, this);
    }));
    function registerGroupAndAttachLicenseAndAddIps(_x54) {
      return _registerGroupAndAttachLicenseAndAddIps.apply(this, arguments);
    }
    return registerGroupAndAttachLicenseAndAddIps;
  }() }, {
    key: "registerGroupAndAttachLicenseAndAddIpsEncode",
    value: function registerGroupAndAttachLicenseAndAddIpsEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: groupingWorkflowsAbi, functionName: "registerGroupAndAttachLicenseAndAddIps", args: [request.groupPool, request.ipIds, request.maxAllowedRewardShare, request.licenseData] }) };
    }
    /**
    * method registerIpAndAttachLicenseAndAddToGroup for contract GroupingWorkflows
    *
    * @param request GroupingWorkflowsRegisterIpAndAttachLicenseAndAddToGroupRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "registerIpAndAttachLicenseAndAddToGroup", value: function() {
    var _registerIpAndAttachLicenseAndAddToGroup = _asyncToGenerator(_regenerator().m(function _callee76(request) {
      var _yield$this$rpcClient42, call;
      return _regenerator().w(function(_context76) {
        while (1) switch (_context76.n) {
          case 0:
            _context76.n = 1;
            return this.rpcClient.simulateContract({ abi: groupingWorkflowsAbi, address: this.address, functionName: "registerIpAndAttachLicenseAndAddToGroup", account: this.wallet.account, args: [request.nftContract, request.tokenId, request.groupId, request.maxAllowedRewardShare, request.licensesData, request.ipMetadata, request.sigMetadataAndAttachAndConfig, request.sigAddToGroup] });
          case 1:
            _yield$this$rpcClient42 = _context76.v;
            call = _yield$this$rpcClient42.request;
            _context76.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context76.a(2, _context76.v);
        }
      }, _callee76, this);
    }));
    function registerIpAndAttachLicenseAndAddToGroup(_x55) {
      return _registerIpAndAttachLicenseAndAddToGroup.apply(this, arguments);
    }
    return registerIpAndAttachLicenseAndAddToGroup;
  }() }, { key: "registerIpAndAttachLicenseAndAddToGroupEncode", value: function registerIpAndAttachLicenseAndAddToGroupEncode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: groupingWorkflowsAbi, functionName: "registerIpAndAttachLicenseAndAddToGroup", args: [request.nftContract, request.tokenId, request.groupId, request.maxAllowedRewardShare, request.licensesData, request.ipMetadata, request.sigMetadataAndAttachAndConfig, request.sigAddToGroup] }) };
  } }]);
}();
var IpAccountImplReadOnlyClient = function() {
  function IpAccountImplReadOnlyClient2(rpcClient, address) {
    var _rpcClient$chain0;
    _classCallCheck(this, IpAccountImplReadOnlyClient2);
    this.address = address || getAddress(ipAccountImplAddress, (_rpcClient$chain0 = rpcClient.chain) === null || _rpcClient$chain0 === void 0 ? void 0 : _rpcClient$chain0.id);
    this.rpcClient = rpcClient;
  }
  return _createClass(IpAccountImplReadOnlyClient2, [{ key: "owner", value: function() {
    var _owner = _asyncToGenerator(_regenerator().m(function _callee77() {
      return _regenerator().w(function(_context77) {
        while (1) switch (_context77.n) {
          case 0:
            _context77.n = 1;
            return this.rpcClient.readContract({ abi: ipAccountImplAbi, address: this.address, functionName: "owner" });
          case 1:
            return _context77.a(2, _context77.v);
        }
      }, _callee77, this);
    }));
    function owner() {
      return _owner.apply(this, arguments);
    }
    return owner;
  }() }, { key: "state", value: function() {
    var _state = _asyncToGenerator(_regenerator().m(function _callee78() {
      var result;
      return _regenerator().w(function(_context78) {
        while (1) switch (_context78.n) {
          case 0:
            _context78.n = 1;
            return this.rpcClient.readContract({ abi: ipAccountImplAbi, address: this.address, functionName: "state" });
          case 1:
            result = _context78.v;
            return _context78.a(2, { result });
        }
      }, _callee78, this);
    }));
    function state() {
      return _state.apply(this, arguments);
    }
    return state;
  }() }, { key: "token", value: function() {
    var _token = _asyncToGenerator(_regenerator().m(function _callee79() {
      return _regenerator().w(function(_context79) {
        while (1) switch (_context79.n) {
          case 0:
            _context79.n = 1;
            return this.rpcClient.readContract({ abi: ipAccountImplAbi, address: this.address, functionName: "token" });
          case 1:
            return _context79.a(2, _context79.v);
        }
      }, _callee79, this);
    }));
    function token() {
      return _token.apply(this, arguments);
    }
    return token;
  }() }]);
}();
var IpAccountImplClient = function(_IpAccountImplReadOnl) {
  function IpAccountImplClient2(rpcClient, wallet, address) {
    var _this8;
    _classCallCheck(this, IpAccountImplClient2);
    _this8 = _callSuper(this, IpAccountImplClient2, [rpcClient, address]);
    _this8.wallet = wallet;
    return _this8;
  }
  _inherits(IpAccountImplClient2, _IpAccountImplReadOnl);
  return _createClass(IpAccountImplClient2, [{ key: "execute", value: function() {
    var _execute = _asyncToGenerator(_regenerator().m(function _callee80(request) {
      var _yield$this$rpcClient43, call;
      return _regenerator().w(function(_context80) {
        while (1) switch (_context80.n) {
          case 0:
            _context80.n = 1;
            return this.rpcClient.simulateContract({ abi: ipAccountImplAbi, address: this.address, functionName: "execute", account: this.wallet.account, args: [request.to, request.value, request.data, request.operation] });
          case 1:
            _yield$this$rpcClient43 = _context80.v;
            call = _yield$this$rpcClient43.request;
            _context80.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context80.a(2, _context80.v);
        }
      }, _callee80, this);
    }));
    function execute(_x56) {
      return _execute.apply(this, arguments);
    }
    return execute;
  }() }, {
    key: "executeEncode",
    value: function executeEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: ipAccountImplAbi, functionName: "execute", args: [request.to, request.value, request.data, request.operation] }) };
    }
    /**
    * method execute for contract IPAccountImpl
    *
    * @param request IpAccountImplExecute2Request
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "execute2", value: function() {
    var _execute2 = _asyncToGenerator(_regenerator().m(function _callee81(request) {
      var _yield$this$rpcClient44, call;
      return _regenerator().w(function(_context81) {
        while (1) switch (_context81.n) {
          case 0:
            _context81.n = 1;
            return this.rpcClient.simulateContract({ abi: ipAccountImplAbi, address: this.address, functionName: "execute", account: this.wallet.account, args: [request.to, request.value, request.data] });
          case 1:
            _yield$this$rpcClient44 = _context81.v;
            call = _yield$this$rpcClient44.request;
            _context81.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context81.a(2, _context81.v);
        }
      }, _callee81, this);
    }));
    function execute2(_x57) {
      return _execute2.apply(this, arguments);
    }
    return execute2;
  }() }, {
    key: "execute2Encode",
    value: function execute2Encode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: ipAccountImplAbi, functionName: "execute", args: [request.to, request.value, request.data] }) };
    }
    /**
    * method executeBatch for contract IPAccountImpl
    *
    * @param request IpAccountImplExecuteBatchRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "executeBatch", value: function() {
    var _executeBatch = _asyncToGenerator(_regenerator().m(function _callee82(request) {
      var _yield$this$rpcClient45, call;
      return _regenerator().w(function(_context82) {
        while (1) switch (_context82.n) {
          case 0:
            _context82.n = 1;
            return this.rpcClient.simulateContract({ abi: ipAccountImplAbi, address: this.address, functionName: "executeBatch", account: this.wallet.account, args: [request.calls, request.operation] });
          case 1:
            _yield$this$rpcClient45 = _context82.v;
            call = _yield$this$rpcClient45.request;
            _context82.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context82.a(2, _context82.v);
        }
      }, _callee82, this);
    }));
    function executeBatch(_x58) {
      return _executeBatch.apply(this, arguments);
    }
    return executeBatch;
  }() }, {
    key: "executeBatchEncode",
    value: function executeBatchEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: ipAccountImplAbi, functionName: "executeBatch", args: [request.calls, request.operation] }) };
    }
    /**
    * method executeWithSig for contract IPAccountImpl
    *
    * @param request IpAccountImplExecuteWithSigRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "executeWithSig", value: function() {
    var _executeWithSig = _asyncToGenerator(_regenerator().m(function _callee83(request) {
      var _yield$this$rpcClient46, call;
      return _regenerator().w(function(_context83) {
        while (1) switch (_context83.n) {
          case 0:
            _context83.n = 1;
            return this.rpcClient.simulateContract({ abi: ipAccountImplAbi, address: this.address, functionName: "executeWithSig", account: this.wallet.account, args: [request.to, request.value, request.data, request.signer, request.deadline, request.signature] });
          case 1:
            _yield$this$rpcClient46 = _context83.v;
            call = _yield$this$rpcClient46.request;
            _context83.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context83.a(2, _context83.v);
        }
      }, _callee83, this);
    }));
    function executeWithSig(_x59) {
      return _executeWithSig.apply(this, arguments);
    }
    return executeWithSig;
  }() }, { key: "executeWithSigEncode", value: function executeWithSigEncode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: ipAccountImplAbi, functionName: "executeWithSig", args: [request.to, request.value, request.data, request.signer, request.deadline, request.signature] }) };
  } }]);
}(IpAccountImplReadOnlyClient);
var IpAssetRegistryEventClient = function() {
  function IpAssetRegistryEventClient2(rpcClient, address) {
    var _rpcClient$chain1;
    _classCallCheck(this, IpAssetRegistryEventClient2);
    this.address = address || getAddress(ipAssetRegistryAddress, (_rpcClient$chain1 = rpcClient.chain) === null || _rpcClient$chain1 === void 0 ? void 0 : _rpcClient$chain1.id);
    this.rpcClient = rpcClient;
  }
  return _createClass(IpAssetRegistryEventClient2, [{
    key: "watchIpAccountRegisteredEvent",
    value: function watchIpAccountRegisteredEvent(_onLogs17) {
      return this.rpcClient.watchContractEvent({ abi: ipAssetRegistryAbi, address: this.address, eventName: "IPAccountRegistered", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs17(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event IPAccountRegistered for contract IPAssetRegistry
    */
  }, {
    key: "parseTxIpAccountRegisteredEvent",
    value: function parseTxIpAccountRegisteredEvent(txReceipt) {
      var targetLogs = [];
      var _iterator17 = _createForOfIteratorHelper(txReceipt.logs), _step17;
      try {
        for (_iterator17.s(); !(_step17 = _iterator17.n()).done; ) {
          var log = _step17.value;
          try {
            var event = decodeEventLog({ abi: ipAssetRegistryAbi, eventName: "IPAccountRegistered", data: log.data, topics: log.topics });
            if (event.eventName === "IPAccountRegistered") {
              targetLogs.push(event.args);
            }
          } catch (e) {
          }
        }
      } catch (err) {
        _iterator17.e(err);
      } finally {
        _iterator17.f();
      }
      return targetLogs;
    }
    /**
    * event IPRegistered for contract IPAssetRegistry
    */
  }, {
    key: "watchIpRegisteredEvent",
    value: function watchIpRegisteredEvent(_onLogs18) {
      return this.rpcClient.watchContractEvent({ abi: ipAssetRegistryAbi, address: this.address, eventName: "IPRegistered", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs18(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event IPRegistered for contract IPAssetRegistry
    */
  }, { key: "parseTxIpRegisteredEvent", value: function parseTxIpRegisteredEvent(txReceipt) {
    var targetLogs = [];
    var _iterator18 = _createForOfIteratorHelper(txReceipt.logs), _step18;
    try {
      for (_iterator18.s(); !(_step18 = _iterator18.n()).done; ) {
        var log = _step18.value;
        try {
          var event = decodeEventLog({ abi: ipAssetRegistryAbi, eventName: "IPRegistered", data: log.data, topics: log.topics });
          if (event.eventName === "IPRegistered") {
            targetLogs.push(event.args);
          }
        } catch (e) {
        }
      }
    } catch (err) {
      _iterator18.e(err);
    } finally {
      _iterator18.f();
    }
    return targetLogs;
  } }]);
}();
var IpAssetRegistryReadOnlyClient = function(_IpAssetRegistryEvent) {
  function IpAssetRegistryReadOnlyClient2(rpcClient, address) {
    _classCallCheck(this, IpAssetRegistryReadOnlyClient2);
    return _callSuper(this, IpAssetRegistryReadOnlyClient2, [rpcClient, address]);
  }
  _inherits(IpAssetRegistryReadOnlyClient2, _IpAssetRegistryEvent);
  return _createClass(IpAssetRegistryReadOnlyClient2, [{ key: "ipId", value: function() {
    var _ipId = _asyncToGenerator(_regenerator().m(function _callee84(request) {
      return _regenerator().w(function(_context84) {
        while (1) switch (_context84.n) {
          case 0:
            _context84.n = 1;
            return this.rpcClient.readContract({ abi: ipAssetRegistryAbi, address: this.address, functionName: "ipId", args: [request.chainId, request.tokenContract, request.tokenId] });
          case 1:
            return _context84.a(2, _context84.v);
        }
      }, _callee84, this);
    }));
    function ipId(_x60) {
      return _ipId.apply(this, arguments);
    }
    return ipId;
  }() }, { key: "isRegistered", value: function() {
    var _isRegistered = _asyncToGenerator(_regenerator().m(function _callee85(request) {
      return _regenerator().w(function(_context85) {
        while (1) switch (_context85.n) {
          case 0:
            _context85.n = 1;
            return this.rpcClient.readContract({ abi: ipAssetRegistryAbi, address: this.address, functionName: "isRegistered", args: [request.id] });
          case 1:
            return _context85.a(2, _context85.v);
        }
      }, _callee85, this);
    }));
    function isRegistered(_x61) {
      return _isRegistered.apply(this, arguments);
    }
    return isRegistered;
  }() }]);
}(IpAssetRegistryEventClient);
var IpAssetRegistryClient = function(_IpAssetRegistryReadO) {
  function IpAssetRegistryClient2(rpcClient, wallet, address) {
    var _this9;
    _classCallCheck(this, IpAssetRegistryClient2);
    _this9 = _callSuper(this, IpAssetRegistryClient2, [rpcClient, address]);
    _this9.wallet = wallet;
    return _this9;
  }
  _inherits(IpAssetRegistryClient2, _IpAssetRegistryReadO);
  return _createClass(IpAssetRegistryClient2, [{ key: "register", value: function() {
    var _register = _asyncToGenerator(_regenerator().m(function _callee86(request) {
      var _yield$this$rpcClient47, call;
      return _regenerator().w(function(_context86) {
        while (1) switch (_context86.n) {
          case 0:
            _context86.n = 1;
            return this.rpcClient.simulateContract({ abi: ipAssetRegistryAbi, address: this.address, functionName: "register", account: this.wallet.account, args: [request.chainid, request.tokenContract, request.tokenId] });
          case 1:
            _yield$this$rpcClient47 = _context86.v;
            call = _yield$this$rpcClient47.request;
            _context86.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context86.a(2, _context86.v);
        }
      }, _callee86, this);
    }));
    function register(_x62) {
      return _register.apply(this, arguments);
    }
    return register;
  }() }, { key: "registerEncode", value: function registerEncode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: ipAssetRegistryAbi, functionName: "register", args: [request.chainid, request.tokenContract, request.tokenId] }) };
  } }]);
}(IpAssetRegistryReadOnlyClient);
var IpRoyaltyVaultImplEventClient = function() {
  function IpRoyaltyVaultImplEventClient2(rpcClient, address) {
    var _rpcClient$chain10;
    _classCallCheck(this, IpRoyaltyVaultImplEventClient2);
    this.address = address || getAddress(ipRoyaltyVaultImplAddress, (_rpcClient$chain10 = rpcClient.chain) === null || _rpcClient$chain10 === void 0 ? void 0 : _rpcClient$chain10.id);
    this.rpcClient = rpcClient;
  }
  return _createClass(IpRoyaltyVaultImplEventClient2, [{
    key: "watchRevenueTokenClaimedEvent",
    value: function watchRevenueTokenClaimedEvent(_onLogs19) {
      return this.rpcClient.watchContractEvent({ abi: ipRoyaltyVaultImplAbi, address: this.address, eventName: "RevenueTokenClaimed", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs19(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event RevenueTokenClaimed for contract IpRoyaltyVaultImpl
    */
  }, { key: "parseTxRevenueTokenClaimedEvent", value: function parseTxRevenueTokenClaimedEvent(txReceipt) {
    var targetLogs = [];
    var _iterator19 = _createForOfIteratorHelper(txReceipt.logs), _step19;
    try {
      for (_iterator19.s(); !(_step19 = _iterator19.n()).done; ) {
        var log = _step19.value;
        try {
          var event = decodeEventLog({ abi: ipRoyaltyVaultImplAbi, eventName: "RevenueTokenClaimed", data: log.data, topics: log.topics });
          if (event.eventName === "RevenueTokenClaimed") {
            targetLogs.push(event.args);
          }
        } catch (e) {
        }
      }
    } catch (err) {
      _iterator19.e(err);
    } finally {
      _iterator19.f();
    }
    return targetLogs;
  } }]);
}();
var IpRoyaltyVaultImplReadOnlyClient = function(_IpRoyaltyVaultImplEv) {
  function IpRoyaltyVaultImplReadOnlyClient2(rpcClient, address) {
    _classCallCheck(this, IpRoyaltyVaultImplReadOnlyClient2);
    return _callSuper(this, IpRoyaltyVaultImplReadOnlyClient2, [rpcClient, address]);
  }
  _inherits(IpRoyaltyVaultImplReadOnlyClient2, _IpRoyaltyVaultImplEv);
  return _createClass(IpRoyaltyVaultImplReadOnlyClient2, [{ key: "balanceOf", value: function() {
    var _balanceOf2 = _asyncToGenerator(_regenerator().m(function _callee87(request) {
      return _regenerator().w(function(_context87) {
        while (1) switch (_context87.n) {
          case 0:
            _context87.n = 1;
            return this.rpcClient.readContract({ abi: ipRoyaltyVaultImplAbi, address: this.address, functionName: "balanceOf", args: [request.account] });
          case 1:
            return _context87.a(2, _context87.v);
        }
      }, _callee87, this);
    }));
    function balanceOf(_x63) {
      return _balanceOf2.apply(this, arguments);
    }
    return balanceOf;
  }() }, { key: "claimableRevenue", value: function() {
    var _claimableRevenue = _asyncToGenerator(_regenerator().m(function _callee88(request) {
      return _regenerator().w(function(_context88) {
        while (1) switch (_context88.n) {
          case 0:
            _context88.n = 1;
            return this.rpcClient.readContract({ abi: ipRoyaltyVaultImplAbi, address: this.address, functionName: "claimableRevenue", args: [request.claimer, request.token] });
          case 1:
            return _context88.a(2, _context88.v);
        }
      }, _callee88, this);
    }));
    function claimableRevenue(_x64) {
      return _claimableRevenue.apply(this, arguments);
    }
    return claimableRevenue;
  }() }, { key: "ipId", value: function() {
    var _ipId2 = _asyncToGenerator(_regenerator().m(function _callee89() {
      return _regenerator().w(function(_context89) {
        while (1) switch (_context89.n) {
          case 0:
            _context89.n = 1;
            return this.rpcClient.readContract({ abi: ipRoyaltyVaultImplAbi, address: this.address, functionName: "ipId" });
          case 1:
            return _context89.a(2, _context89.v);
        }
      }, _callee89, this);
    }));
    function ipId() {
      return _ipId2.apply(this, arguments);
    }
    return ipId;
  }() }]);
}(IpRoyaltyVaultImplEventClient);
var LicenseAttachmentWorkflowsClient = function() {
  function LicenseAttachmentWorkflowsClient2(rpcClient, wallet, address) {
    var _rpcClient$chain11;
    _classCallCheck(this, LicenseAttachmentWorkflowsClient2);
    this.address = address || getAddress(licenseAttachmentWorkflowsAddress, (_rpcClient$chain11 = rpcClient.chain) === null || _rpcClient$chain11 === void 0 ? void 0 : _rpcClient$chain11.id);
    this.rpcClient = rpcClient;
    this.wallet = wallet;
  }
  return _createClass(LicenseAttachmentWorkflowsClient2, [{ key: "mintAndRegisterIpAndAttachPilTerms", value: function() {
    var _mintAndRegisterIpAndAttachPilTerms = _asyncToGenerator(_regenerator().m(function _callee90(request) {
      var _yield$this$rpcClient48, call;
      return _regenerator().w(function(_context90) {
        while (1) switch (_context90.n) {
          case 0:
            _context90.n = 1;
            return this.rpcClient.simulateContract({ abi: licenseAttachmentWorkflowsAbi, address: this.address, functionName: "mintAndRegisterIpAndAttachPILTerms", account: this.wallet.account, args: [request.spgNftContract, request.recipient, request.ipMetadata, request.licenseTermsData, request.allowDuplicates] });
          case 1:
            _yield$this$rpcClient48 = _context90.v;
            call = _yield$this$rpcClient48.request;
            _context90.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context90.a(2, _context90.v);
        }
      }, _callee90, this);
    }));
    function mintAndRegisterIpAndAttachPilTerms(_x65) {
      return _mintAndRegisterIpAndAttachPilTerms.apply(this, arguments);
    }
    return mintAndRegisterIpAndAttachPilTerms;
  }() }, {
    key: "mintAndRegisterIpAndAttachPilTermsEncode",
    value: function mintAndRegisterIpAndAttachPilTermsEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: licenseAttachmentWorkflowsAbi, functionName: "mintAndRegisterIpAndAttachPILTerms", args: [request.spgNftContract, request.recipient, request.ipMetadata, request.licenseTermsData, request.allowDuplicates] }) };
    }
    /**
    * method multicall for contract LicenseAttachmentWorkflows
    *
    * @param request LicenseAttachmentWorkflowsMulticallRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "multicall", value: function() {
    var _multicall2 = _asyncToGenerator(_regenerator().m(function _callee91(request) {
      var _yield$this$rpcClient49, call;
      return _regenerator().w(function(_context91) {
        while (1) switch (_context91.n) {
          case 0:
            _context91.n = 1;
            return this.rpcClient.simulateContract({ abi: licenseAttachmentWorkflowsAbi, address: this.address, functionName: "multicall", account: this.wallet.account, args: [request.data] });
          case 1:
            _yield$this$rpcClient49 = _context91.v;
            call = _yield$this$rpcClient49.request;
            _context91.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context91.a(2, _context91.v);
        }
      }, _callee91, this);
    }));
    function multicall(_x66) {
      return _multicall2.apply(this, arguments);
    }
    return multicall;
  }() }, {
    key: "multicallEncode",
    value: function multicallEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: licenseAttachmentWorkflowsAbi, functionName: "multicall", args: [request.data] }) };
    }
    /**
    * method registerIpAndAttachPILTerms for contract LicenseAttachmentWorkflows
    *
    * @param request LicenseAttachmentWorkflowsRegisterIpAndAttachPilTermsRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "registerIpAndAttachPilTerms", value: function() {
    var _registerIpAndAttachPilTerms = _asyncToGenerator(_regenerator().m(function _callee92(request) {
      var _yield$this$rpcClient50, call;
      return _regenerator().w(function(_context92) {
        while (1) switch (_context92.n) {
          case 0:
            _context92.n = 1;
            return this.rpcClient.simulateContract({ abi: licenseAttachmentWorkflowsAbi, address: this.address, functionName: "registerIpAndAttachPILTerms", account: this.wallet.account, args: [request.nftContract, request.tokenId, request.ipMetadata, request.licenseTermsData, request.sigMetadataAndAttachAndConfig] });
          case 1:
            _yield$this$rpcClient50 = _context92.v;
            call = _yield$this$rpcClient50.request;
            _context92.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context92.a(2, _context92.v);
        }
      }, _callee92, this);
    }));
    function registerIpAndAttachPilTerms(_x67) {
      return _registerIpAndAttachPilTerms.apply(this, arguments);
    }
    return registerIpAndAttachPilTerms;
  }() }, {
    key: "registerIpAndAttachPilTermsEncode",
    value: function registerIpAndAttachPilTermsEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: licenseAttachmentWorkflowsAbi, functionName: "registerIpAndAttachPILTerms", args: [request.nftContract, request.tokenId, request.ipMetadata, request.licenseTermsData, request.sigMetadataAndAttachAndConfig] }) };
    }
    /**
    * method registerPILTermsAndAttach for contract LicenseAttachmentWorkflows
    *
    * @param request LicenseAttachmentWorkflowsRegisterPilTermsAndAttachRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "registerPilTermsAndAttach", value: function() {
    var _registerPilTermsAndAttach = _asyncToGenerator(_regenerator().m(function _callee93(request) {
      var _yield$this$rpcClient51, call;
      return _regenerator().w(function(_context93) {
        while (1) switch (_context93.n) {
          case 0:
            _context93.n = 1;
            return this.rpcClient.simulateContract({ abi: licenseAttachmentWorkflowsAbi, address: this.address, functionName: "registerPILTermsAndAttach", account: this.wallet.account, args: [request.ipId, request.licenseTermsData, request.sigAttachAndConfig] });
          case 1:
            _yield$this$rpcClient51 = _context93.v;
            call = _yield$this$rpcClient51.request;
            _context93.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context93.a(2, _context93.v);
        }
      }, _callee93, this);
    }));
    function registerPilTermsAndAttach(_x68) {
      return _registerPilTermsAndAttach.apply(this, arguments);
    }
    return registerPilTermsAndAttach;
  }() }, { key: "registerPilTermsAndAttachEncode", value: function registerPilTermsAndAttachEncode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: licenseAttachmentWorkflowsAbi, functionName: "registerPILTermsAndAttach", args: [request.ipId, request.licenseTermsData, request.sigAttachAndConfig] }) };
  } }]);
}();
var LicenseRegistryReadOnlyClient = function() {
  function LicenseRegistryReadOnlyClient2(rpcClient, address) {
    var _rpcClient$chain12;
    _classCallCheck(this, LicenseRegistryReadOnlyClient2);
    this.address = address || getAddress(licenseRegistryAddress, (_rpcClient$chain12 = rpcClient.chain) === null || _rpcClient$chain12 === void 0 ? void 0 : _rpcClient$chain12.id);
    this.rpcClient = rpcClient;
  }
  return _createClass(LicenseRegistryReadOnlyClient2, [{ key: "getDefaultLicenseTerms", value: function() {
    var _getDefaultLicenseTerms = _asyncToGenerator(_regenerator().m(function _callee94() {
      var result;
      return _regenerator().w(function(_context94) {
        while (1) switch (_context94.n) {
          case 0:
            _context94.n = 1;
            return this.rpcClient.readContract({ abi: licenseRegistryAbi, address: this.address, functionName: "getDefaultLicenseTerms" });
          case 1:
            result = _context94.v;
            return _context94.a(2, { licenseTemplate: result[0], licenseTermsId: result[1] });
        }
      }, _callee94, this);
    }));
    function getDefaultLicenseTerms() {
      return _getDefaultLicenseTerms.apply(this, arguments);
    }
    return getDefaultLicenseTerms;
  }() }, { key: "getLicensingConfig", value: function() {
    var _getLicensingConfig = _asyncToGenerator(_regenerator().m(function _callee95(request) {
      return _regenerator().w(function(_context95) {
        while (1) switch (_context95.n) {
          case 0:
            _context95.n = 1;
            return this.rpcClient.readContract({ abi: licenseRegistryAbi, address: this.address, functionName: "getLicensingConfig", args: [request.ipId, request.licenseTemplate, request.licenseTermsId] });
          case 1:
            return _context95.a(2, _context95.v);
        }
      }, _callee95, this);
    }));
    function getLicensingConfig(_x69) {
      return _getLicensingConfig.apply(this, arguments);
    }
    return getLicensingConfig;
  }() }, { key: "getRoyaltyPercent", value: function() {
    var _getRoyaltyPercent = _asyncToGenerator(_regenerator().m(function _callee96(request) {
      var result;
      return _regenerator().w(function(_context96) {
        while (1) switch (_context96.n) {
          case 0:
            _context96.n = 1;
            return this.rpcClient.readContract({ abi: licenseRegistryAbi, address: this.address, functionName: "getRoyaltyPercent", args: [request.ipId, request.licenseTemplate, request.licenseTermsId] });
          case 1:
            result = _context96.v;
            return _context96.a(2, { royaltyPercent: result });
        }
      }, _callee96, this);
    }));
    function getRoyaltyPercent(_x70) {
      return _getRoyaltyPercent.apply(this, arguments);
    }
    return getRoyaltyPercent;
  }() }, { key: "hasIpAttachedLicenseTerms", value: function() {
    var _hasIpAttachedLicenseTerms = _asyncToGenerator(_regenerator().m(function _callee97(request) {
      return _regenerator().w(function(_context97) {
        while (1) switch (_context97.n) {
          case 0:
            _context97.n = 1;
            return this.rpcClient.readContract({ abi: licenseRegistryAbi, address: this.address, functionName: "hasIpAttachedLicenseTerms", args: [request.ipId, request.licenseTemplate, request.licenseTermsId] });
          case 1:
            return _context97.a(2, _context97.v);
        }
      }, _callee97, this);
    }));
    function hasIpAttachedLicenseTerms(_x71) {
      return _hasIpAttachedLicenseTerms.apply(this, arguments);
    }
    return hasIpAttachedLicenseTerms;
  }() }]);
}();
var LicenseTokenReadOnlyClient = function() {
  function LicenseTokenReadOnlyClient2(rpcClient, address) {
    var _rpcClient$chain13;
    _classCallCheck(this, LicenseTokenReadOnlyClient2);
    this.address = address || getAddress(licenseTokenAddress, (_rpcClient$chain13 = rpcClient.chain) === null || _rpcClient$chain13 === void 0 ? void 0 : _rpcClient$chain13.id);
    this.rpcClient = rpcClient;
  }
  return _createClass(LicenseTokenReadOnlyClient2, [{ key: "ownerOf", value: function() {
    var _ownerOf = _asyncToGenerator(_regenerator().m(function _callee98(request) {
      return _regenerator().w(function(_context98) {
        while (1) switch (_context98.n) {
          case 0:
            _context98.n = 1;
            return this.rpcClient.readContract({ abi: licenseTokenAbi, address: this.address, functionName: "ownerOf", args: [request.tokenId] });
          case 1:
            return _context98.a(2, _context98.v);
        }
      }, _callee98, this);
    }));
    function ownerOf(_x72) {
      return _ownerOf.apply(this, arguments);
    }
    return ownerOf;
  }() }]);
}();
var LicensingModuleEventClient = function() {
  function LicensingModuleEventClient2(rpcClient, address) {
    var _rpcClient$chain14;
    _classCallCheck(this, LicensingModuleEventClient2);
    this.address = address || getAddress(licensingModuleAddress, (_rpcClient$chain14 = rpcClient.chain) === null || _rpcClient$chain14 === void 0 ? void 0 : _rpcClient$chain14.id);
    this.rpcClient = rpcClient;
  }
  return _createClass(LicensingModuleEventClient2, [{
    key: "watchLicenseTermsAttachedEvent",
    value: function watchLicenseTermsAttachedEvent(_onLogs20) {
      return this.rpcClient.watchContractEvent({ abi: licensingModuleAbi, address: this.address, eventName: "LicenseTermsAttached", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs20(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event LicenseTermsAttached for contract LicensingModule
    */
  }, {
    key: "parseTxLicenseTermsAttachedEvent",
    value: function parseTxLicenseTermsAttachedEvent(txReceipt) {
      var targetLogs = [];
      var _iterator20 = _createForOfIteratorHelper(txReceipt.logs), _step20;
      try {
        for (_iterator20.s(); !(_step20 = _iterator20.n()).done; ) {
          var log = _step20.value;
          try {
            var event = decodeEventLog({ abi: licensingModuleAbi, eventName: "LicenseTermsAttached", data: log.data, topics: log.topics });
            if (event.eventName === "LicenseTermsAttached") {
              targetLogs.push(event.args);
            }
          } catch (e) {
          }
        }
      } catch (err) {
        _iterator20.e(err);
      } finally {
        _iterator20.f();
      }
      return targetLogs;
    }
    /**
    * event LicenseTokensMinted for contract LicensingModule
    */
  }, {
    key: "watchLicenseTokensMintedEvent",
    value: function watchLicenseTokensMintedEvent(_onLogs21) {
      return this.rpcClient.watchContractEvent({ abi: licensingModuleAbi, address: this.address, eventName: "LicenseTokensMinted", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs21(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event LicenseTokensMinted for contract LicensingModule
    */
  }, { key: "parseTxLicenseTokensMintedEvent", value: function parseTxLicenseTokensMintedEvent(txReceipt) {
    var targetLogs = [];
    var _iterator21 = _createForOfIteratorHelper(txReceipt.logs), _step21;
    try {
      for (_iterator21.s(); !(_step21 = _iterator21.n()).done; ) {
        var log = _step21.value;
        try {
          var event = decodeEventLog({ abi: licensingModuleAbi, eventName: "LicenseTokensMinted", data: log.data, topics: log.topics });
          if (event.eventName === "LicenseTokensMinted") {
            targetLogs.push(event.args);
          }
        } catch (e) {
        }
      }
    } catch (err) {
      _iterator21.e(err);
    } finally {
      _iterator21.f();
    }
    return targetLogs;
  } }]);
}();
var LicensingModuleReadOnlyClient = function(_LicensingModuleEvent) {
  function LicensingModuleReadOnlyClient2(rpcClient, address) {
    _classCallCheck(this, LicensingModuleReadOnlyClient2);
    return _callSuper(this, LicensingModuleReadOnlyClient2, [rpcClient, address]);
  }
  _inherits(LicensingModuleReadOnlyClient2, _LicensingModuleEvent);
  return _createClass(LicensingModuleReadOnlyClient2, [{ key: "predictMintingLicenseFee", value: function() {
    var _predictMintingLicenseFee = _asyncToGenerator(_regenerator().m(function _callee99(request) {
      var result;
      return _regenerator().w(function(_context99) {
        while (1) switch (_context99.n) {
          case 0:
            _context99.n = 1;
            return this.rpcClient.readContract({ abi: licensingModuleAbi, address: this.address, functionName: "predictMintingLicenseFee", args: [request.licensorIpId, request.licenseTemplate, request.licenseTermsId, request.amount, request.receiver, request.royaltyContext] });
          case 1:
            result = _context99.v;
            return _context99.a(2, { currencyToken: result[0], tokenAmount: result[1] });
        }
      }, _callee99, this);
    }));
    function predictMintingLicenseFee2(_x73) {
      return _predictMintingLicenseFee.apply(this, arguments);
    }
    return predictMintingLicenseFee2;
  }() }]);
}(LicensingModuleEventClient);
var LicensingModuleClient = function(_LicensingModuleReadO) {
  function LicensingModuleClient2(rpcClient, wallet, address) {
    var _this0;
    _classCallCheck(this, LicensingModuleClient2);
    _this0 = _callSuper(this, LicensingModuleClient2, [rpcClient, address]);
    _this0.wallet = wallet;
    return _this0;
  }
  _inherits(LicensingModuleClient2, _LicensingModuleReadO);
  return _createClass(LicensingModuleClient2, [{ key: "attachLicenseTerms", value: function() {
    var _attachLicenseTerms = _asyncToGenerator(_regenerator().m(function _callee100(request) {
      var _yield$this$rpcClient52, call;
      return _regenerator().w(function(_context100) {
        while (1) switch (_context100.n) {
          case 0:
            _context100.n = 1;
            return this.rpcClient.simulateContract({ abi: licensingModuleAbi, address: this.address, functionName: "attachLicenseTerms", account: this.wallet.account, args: [request.ipId, request.licenseTemplate, request.licenseTermsId] });
          case 1:
            _yield$this$rpcClient52 = _context100.v;
            call = _yield$this$rpcClient52.request;
            _context100.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context100.a(2, _context100.v);
        }
      }, _callee100, this);
    }));
    function attachLicenseTerms(_x74) {
      return _attachLicenseTerms.apply(this, arguments);
    }
    return attachLicenseTerms;
  }() }, {
    key: "attachLicenseTermsEncode",
    value: function attachLicenseTermsEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: licensingModuleAbi, functionName: "attachLicenseTerms", args: [request.ipId, request.licenseTemplate, request.licenseTermsId] }) };
    }
    /**
    * method mintLicenseTokens for contract LicensingModule
    *
    * @param request LicensingModuleMintLicenseTokensRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "mintLicenseTokens", value: function() {
    var _mintLicenseTokens = _asyncToGenerator(_regenerator().m(function _callee101(request) {
      var _yield$this$rpcClient53, call;
      return _regenerator().w(function(_context101) {
        while (1) switch (_context101.n) {
          case 0:
            _context101.n = 1;
            return this.rpcClient.simulateContract({ abi: licensingModuleAbi, address: this.address, functionName: "mintLicenseTokens", account: this.wallet.account, args: [request.licensorIpId, request.licenseTemplate, request.licenseTermsId, request.amount, request.receiver, request.royaltyContext, request.maxMintingFee, request.maxRevenueShare] });
          case 1:
            _yield$this$rpcClient53 = _context101.v;
            call = _yield$this$rpcClient53.request;
            _context101.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context101.a(2, _context101.v);
        }
      }, _callee101, this);
    }));
    function mintLicenseTokens(_x75) {
      return _mintLicenseTokens.apply(this, arguments);
    }
    return mintLicenseTokens;
  }() }, {
    key: "mintLicenseTokensEncode",
    value: function mintLicenseTokensEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: licensingModuleAbi, functionName: "mintLicenseTokens", args: [request.licensorIpId, request.licenseTemplate, request.licenseTermsId, request.amount, request.receiver, request.royaltyContext, request.maxMintingFee, request.maxRevenueShare] }) };
    }
    /**
    * method registerDerivative for contract LicensingModule
    *
    * @param request LicensingModuleRegisterDerivativeRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "registerDerivative", value: function() {
    var _registerDerivative = _asyncToGenerator(_regenerator().m(function _callee102(request) {
      var _yield$this$rpcClient54, call;
      return _regenerator().w(function(_context102) {
        while (1) switch (_context102.n) {
          case 0:
            _context102.n = 1;
            return this.rpcClient.simulateContract({ abi: licensingModuleAbi, address: this.address, functionName: "registerDerivative", account: this.wallet.account, args: [request.childIpId, request.parentIpIds, request.licenseTermsIds, request.licenseTemplate, request.royaltyContext, request.maxMintingFee, request.maxRts, request.maxRevenueShare] });
          case 1:
            _yield$this$rpcClient54 = _context102.v;
            call = _yield$this$rpcClient54.request;
            _context102.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context102.a(2, _context102.v);
        }
      }, _callee102, this);
    }));
    function registerDerivative(_x76) {
      return _registerDerivative.apply(this, arguments);
    }
    return registerDerivative;
  }() }, {
    key: "registerDerivativeEncode",
    value: function registerDerivativeEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: licensingModuleAbi, functionName: "registerDerivative", args: [request.childIpId, request.parentIpIds, request.licenseTermsIds, request.licenseTemplate, request.royaltyContext, request.maxMintingFee, request.maxRts, request.maxRevenueShare] }) };
    }
    /**
    * method registerDerivativeWithLicenseTokens for contract LicensingModule
    *
    * @param request LicensingModuleRegisterDerivativeWithLicenseTokensRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "registerDerivativeWithLicenseTokens", value: function() {
    var _registerDerivativeWithLicenseTokens = _asyncToGenerator(_regenerator().m(function _callee103(request) {
      var _yield$this$rpcClient55, call;
      return _regenerator().w(function(_context103) {
        while (1) switch (_context103.n) {
          case 0:
            _context103.n = 1;
            return this.rpcClient.simulateContract({ abi: licensingModuleAbi, address: this.address, functionName: "registerDerivativeWithLicenseTokens", account: this.wallet.account, args: [request.childIpId, request.licenseTokenIds, request.royaltyContext, request.maxRts] });
          case 1:
            _yield$this$rpcClient55 = _context103.v;
            call = _yield$this$rpcClient55.request;
            _context103.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context103.a(2, _context103.v);
        }
      }, _callee103, this);
    }));
    function registerDerivativeWithLicenseTokens(_x77) {
      return _registerDerivativeWithLicenseTokens.apply(this, arguments);
    }
    return registerDerivativeWithLicenseTokens;
  }() }, {
    key: "registerDerivativeWithLicenseTokensEncode",
    value: function registerDerivativeWithLicenseTokensEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: licensingModuleAbi, functionName: "registerDerivativeWithLicenseTokens", args: [request.childIpId, request.licenseTokenIds, request.royaltyContext, request.maxRts] }) };
    }
    /**
    * method setLicensingConfig for contract LicensingModule
    *
    * @param request LicensingModuleSetLicensingConfigRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "setLicensingConfig", value: function() {
    var _setLicensingConfig = _asyncToGenerator(_regenerator().m(function _callee104(request) {
      var _yield$this$rpcClient56, call;
      return _regenerator().w(function(_context104) {
        while (1) switch (_context104.n) {
          case 0:
            _context104.n = 1;
            return this.rpcClient.simulateContract({ abi: licensingModuleAbi, address: this.address, functionName: "setLicensingConfig", account: this.wallet.account, args: [request.ipId, request.licenseTemplate, request.licenseTermsId, request.licensingConfig] });
          case 1:
            _yield$this$rpcClient56 = _context104.v;
            call = _yield$this$rpcClient56.request;
            _context104.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context104.a(2, _context104.v);
        }
      }, _callee104, this);
    }));
    function setLicensingConfig(_x78) {
      return _setLicensingConfig.apply(this, arguments);
    }
    return setLicensingConfig;
  }() }, { key: "setLicensingConfigEncode", value: function setLicensingConfigEncode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: licensingModuleAbi, functionName: "setLicensingConfig", args: [request.ipId, request.licenseTemplate, request.licenseTermsId, request.licensingConfig] }) };
  } }]);
}(LicensingModuleReadOnlyClient);
var ModuleRegistryReadOnlyClient = function() {
  function ModuleRegistryReadOnlyClient2(rpcClient, address) {
    var _rpcClient$chain15;
    _classCallCheck(this, ModuleRegistryReadOnlyClient2);
    this.address = address || getAddress(moduleRegistryAddress, (_rpcClient$chain15 = rpcClient.chain) === null || _rpcClient$chain15 === void 0 ? void 0 : _rpcClient$chain15.id);
    this.rpcClient = rpcClient;
  }
  return _createClass(ModuleRegistryReadOnlyClient2, [{ key: "isRegistered", value: function() {
    var _isRegistered2 = _asyncToGenerator(_regenerator().m(function _callee105(request) {
      return _regenerator().w(function(_context105) {
        while (1) switch (_context105.n) {
          case 0:
            _context105.n = 1;
            return this.rpcClient.readContract({ abi: moduleRegistryAbi, address: this.address, functionName: "isRegistered", args: [request.moduleAddress] });
          case 1:
            return _context105.a(2, _context105.v);
        }
      }, _callee105, this);
    }));
    function isRegistered(_x79) {
      return _isRegistered2.apply(this, arguments);
    }
    return isRegistered;
  }() }]);
}();
var Multicall3Client = function() {
  function Multicall3Client2(rpcClient, wallet, address) {
    var _rpcClient$chain16;
    _classCallCheck(this, Multicall3Client2);
    this.address = address || getAddress(multicall3Address, (_rpcClient$chain16 = rpcClient.chain) === null || _rpcClient$chain16 === void 0 ? void 0 : _rpcClient$chain16.id);
    this.rpcClient = rpcClient;
    this.wallet = wallet;
  }
  return _createClass(Multicall3Client2, [{ key: "aggregate3", value: function() {
    var _aggregate = _asyncToGenerator(_regenerator().m(function _callee106(request) {
      var _yield$this$rpcClient57, call;
      return _regenerator().w(function(_context106) {
        while (1) switch (_context106.n) {
          case 0:
            _context106.n = 1;
            return this.rpcClient.simulateContract({ abi: multicall3Abi, address: this.address, functionName: "aggregate3", account: this.wallet.account, args: [request.calls] });
          case 1:
            _yield$this$rpcClient57 = _context106.v;
            call = _yield$this$rpcClient57.request;
            _context106.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context106.a(2, _context106.v);
        }
      }, _callee106, this);
    }));
    function aggregate3(_x80) {
      return _aggregate.apply(this, arguments);
    }
    return aggregate3;
  }() }, { key: "aggregate3Encode", value: function aggregate3Encode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: multicall3Abi, functionName: "aggregate3", args: [request.calls] }) };
  } }]);
}();
var PiLicenseTemplateEventClient = function() {
  function PiLicenseTemplateEventClient2(rpcClient, address) {
    var _rpcClient$chain17;
    _classCallCheck(this, PiLicenseTemplateEventClient2);
    this.address = address || getAddress(piLicenseTemplateAddress, (_rpcClient$chain17 = rpcClient.chain) === null || _rpcClient$chain17 === void 0 ? void 0 : _rpcClient$chain17.id);
    this.rpcClient = rpcClient;
  }
  return _createClass(PiLicenseTemplateEventClient2, [{
    key: "watchAuthorityUpdatedEvent",
    value: function watchAuthorityUpdatedEvent(_onLogs22) {
      return this.rpcClient.watchContractEvent({ abi: piLicenseTemplateAbi, address: this.address, eventName: "AuthorityUpdated", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs22(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event AuthorityUpdated for contract PILicenseTemplate
    */
  }, {
    key: "parseTxAuthorityUpdatedEvent",
    value: function parseTxAuthorityUpdatedEvent(txReceipt) {
      var targetLogs = [];
      var _iterator22 = _createForOfIteratorHelper(txReceipt.logs), _step22;
      try {
        for (_iterator22.s(); !(_step22 = _iterator22.n()).done; ) {
          var log = _step22.value;
          try {
            var event = decodeEventLog({ abi: piLicenseTemplateAbi, eventName: "AuthorityUpdated", data: log.data, topics: log.topics });
            if (event.eventName === "AuthorityUpdated") {
              targetLogs.push(event.args);
            }
          } catch (e) {
          }
        }
      } catch (err) {
        _iterator22.e(err);
      } finally {
        _iterator22.f();
      }
      return targetLogs;
    }
    /**
    * event DerivativeApproved for contract PILicenseTemplate
    */
  }, {
    key: "watchDerivativeApprovedEvent",
    value: function watchDerivativeApprovedEvent(_onLogs23) {
      return this.rpcClient.watchContractEvent({ abi: piLicenseTemplateAbi, address: this.address, eventName: "DerivativeApproved", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs23(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event DerivativeApproved for contract PILicenseTemplate
    */
  }, {
    key: "parseTxDerivativeApprovedEvent",
    value: function parseTxDerivativeApprovedEvent(txReceipt) {
      var targetLogs = [];
      var _iterator23 = _createForOfIteratorHelper(txReceipt.logs), _step23;
      try {
        for (_iterator23.s(); !(_step23 = _iterator23.n()).done; ) {
          var log = _step23.value;
          try {
            var event = decodeEventLog({ abi: piLicenseTemplateAbi, eventName: "DerivativeApproved", data: log.data, topics: log.topics });
            if (event.eventName === "DerivativeApproved") {
              targetLogs.push(event.args);
            }
          } catch (e) {
          }
        }
      } catch (err) {
        _iterator23.e(err);
      } finally {
        _iterator23.f();
      }
      return targetLogs;
    }
    /**
    * event Initialized for contract PILicenseTemplate
    */
  }, {
    key: "watchInitializedEvent",
    value: function watchInitializedEvent(_onLogs24) {
      return this.rpcClient.watchContractEvent({ abi: piLicenseTemplateAbi, address: this.address, eventName: "Initialized", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs24(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event Initialized for contract PILicenseTemplate
    */
  }, {
    key: "parseTxInitializedEvent",
    value: function parseTxInitializedEvent(txReceipt) {
      var targetLogs = [];
      var _iterator24 = _createForOfIteratorHelper(txReceipt.logs), _step24;
      try {
        for (_iterator24.s(); !(_step24 = _iterator24.n()).done; ) {
          var log = _step24.value;
          try {
            var event = decodeEventLog({ abi: piLicenseTemplateAbi, eventName: "Initialized", data: log.data, topics: log.topics });
            if (event.eventName === "Initialized") {
              targetLogs.push(event.args);
            }
          } catch (e) {
          }
        }
      } catch (err) {
        _iterator24.e(err);
      } finally {
        _iterator24.f();
      }
      return targetLogs;
    }
    /**
    * event LicenseTermsRegistered for contract PILicenseTemplate
    */
  }, {
    key: "watchLicenseTermsRegisteredEvent",
    value: function watchLicenseTermsRegisteredEvent(_onLogs25) {
      return this.rpcClient.watchContractEvent({ abi: piLicenseTemplateAbi, address: this.address, eventName: "LicenseTermsRegistered", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs25(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event LicenseTermsRegistered for contract PILicenseTemplate
    */
  }, {
    key: "parseTxLicenseTermsRegisteredEvent",
    value: function parseTxLicenseTermsRegisteredEvent(txReceipt) {
      var targetLogs = [];
      var _iterator25 = _createForOfIteratorHelper(txReceipt.logs), _step25;
      try {
        for (_iterator25.s(); !(_step25 = _iterator25.n()).done; ) {
          var log = _step25.value;
          try {
            var event = decodeEventLog({ abi: piLicenseTemplateAbi, eventName: "LicenseTermsRegistered", data: log.data, topics: log.topics });
            if (event.eventName === "LicenseTermsRegistered") {
              targetLogs.push(event.args);
            }
          } catch (e) {
          }
        }
      } catch (err) {
        _iterator25.e(err);
      } finally {
        _iterator25.f();
      }
      return targetLogs;
    }
    /**
    * event Upgraded for contract PILicenseTemplate
    */
  }, {
    key: "watchUpgradedEvent",
    value: function watchUpgradedEvent(_onLogs26) {
      return this.rpcClient.watchContractEvent({ abi: piLicenseTemplateAbi, address: this.address, eventName: "Upgraded", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs26(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event Upgraded for contract PILicenseTemplate
    */
  }, { key: "parseTxUpgradedEvent", value: function parseTxUpgradedEvent(txReceipt) {
    var targetLogs = [];
    var _iterator26 = _createForOfIteratorHelper(txReceipt.logs), _step26;
    try {
      for (_iterator26.s(); !(_step26 = _iterator26.n()).done; ) {
        var log = _step26.value;
        try {
          var event = decodeEventLog({ abi: piLicenseTemplateAbi, eventName: "Upgraded", data: log.data, topics: log.topics });
          if (event.eventName === "Upgraded") {
            targetLogs.push(event.args);
          }
        } catch (e) {
        }
      }
    } catch (err) {
      _iterator26.e(err);
    } finally {
      _iterator26.f();
    }
    return targetLogs;
  } }]);
}();
var PiLicenseTemplateReadOnlyClient = function(_PiLicenseTemplateEve) {
  function PiLicenseTemplateReadOnlyClient2(rpcClient, address) {
    _classCallCheck(this, PiLicenseTemplateReadOnlyClient2);
    return _callSuper(this, PiLicenseTemplateReadOnlyClient2, [rpcClient, address]);
  }
  _inherits(PiLicenseTemplateReadOnlyClient2, _PiLicenseTemplateEve);
  return _createClass(PiLicenseTemplateReadOnlyClient2, [{ key: "accessController", value: function() {
    var _accessController2 = _asyncToGenerator(_regenerator().m(function _callee107() {
      return _regenerator().w(function(_context107) {
        while (1) switch (_context107.n) {
          case 0:
            _context107.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "ACCESS_CONTROLLER" });
          case 1:
            return _context107.a(2, _context107.v);
        }
      }, _callee107, this);
    }));
    function accessController() {
      return _accessController2.apply(this, arguments);
    }
    return accessController;
  }() }, { key: "ipAssetRegistry", value: function() {
    var _ipAssetRegistry2 = _asyncToGenerator(_regenerator().m(function _callee108() {
      return _regenerator().w(function(_context108) {
        while (1) switch (_context108.n) {
          case 0:
            _context108.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "IP_ASSET_REGISTRY" });
          case 1:
            return _context108.a(2, _context108.v);
        }
      }, _callee108, this);
    }));
    function ipAssetRegistry() {
      return _ipAssetRegistry2.apply(this, arguments);
    }
    return ipAssetRegistry;
  }() }, { key: "licenseRegistry", value: function() {
    var _licenseRegistry = _asyncToGenerator(_regenerator().m(function _callee109() {
      return _regenerator().w(function(_context109) {
        while (1) switch (_context109.n) {
          case 0:
            _context109.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "LICENSE_REGISTRY" });
          case 1:
            return _context109.a(2, _context109.v);
        }
      }, _callee109, this);
    }));
    function licenseRegistry() {
      return _licenseRegistry.apply(this, arguments);
    }
    return licenseRegistry;
  }() }, { key: "moduleRegistry", value: function() {
    var _moduleRegistry = _asyncToGenerator(_regenerator().m(function _callee110() {
      return _regenerator().w(function(_context110) {
        while (1) switch (_context110.n) {
          case 0:
            _context110.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "MODULE_REGISTRY" });
          case 1:
            return _context110.a(2, _context110.v);
        }
      }, _callee110, this);
    }));
    function moduleRegistry() {
      return _moduleRegistry.apply(this, arguments);
    }
    return moduleRegistry;
  }() }, { key: "royaltyModule", value: function() {
    var _royaltyModule2 = _asyncToGenerator(_regenerator().m(function _callee111() {
      return _regenerator().w(function(_context111) {
        while (1) switch (_context111.n) {
          case 0:
            _context111.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "ROYALTY_MODULE" });
          case 1:
            return _context111.a(2, _context111.v);
        }
      }, _callee111, this);
    }));
    function royaltyModule() {
      return _royaltyModule2.apply(this, arguments);
    }
    return royaltyModule;
  }() }, { key: "termsRenderer", value: function() {
    var _termsRenderer = _asyncToGenerator(_regenerator().m(function _callee112() {
      return _regenerator().w(function(_context112) {
        while (1) switch (_context112.n) {
          case 0:
            _context112.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "TERMS_RENDERER" });
          case 1:
            return _context112.a(2, _context112.v);
        }
      }, _callee112, this);
    }));
    function termsRenderer() {
      return _termsRenderer.apply(this, arguments);
    }
    return termsRenderer;
  }() }, { key: "upgradeInterfaceVersion", value: function() {
    var _upgradeInterfaceVersion3 = _asyncToGenerator(_regenerator().m(function _callee113() {
      return _regenerator().w(function(_context113) {
        while (1) switch (_context113.n) {
          case 0:
            _context113.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "UPGRADE_INTERFACE_VERSION" });
          case 1:
            return _context113.a(2, _context113.v);
        }
      }, _callee113, this);
    }));
    function upgradeInterfaceVersion() {
      return _upgradeInterfaceVersion3.apply(this, arguments);
    }
    return upgradeInterfaceVersion;
  }() }, { key: "allowDerivativeRegistration", value: function() {
    var _allowDerivativeRegistration = _asyncToGenerator(_regenerator().m(function _callee114(request) {
      return _regenerator().w(function(_context114) {
        while (1) switch (_context114.n) {
          case 0:
            _context114.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "allowDerivativeRegistration", args: [request.licenseTermsId] });
          case 1:
            return _context114.a(2, _context114.v);
        }
      }, _callee114, this);
    }));
    function allowDerivativeRegistration(_x81) {
      return _allowDerivativeRegistration.apply(this, arguments);
    }
    return allowDerivativeRegistration;
  }() }, { key: "authority", value: function() {
    var _authority3 = _asyncToGenerator(_regenerator().m(function _callee115() {
      return _regenerator().w(function(_context115) {
        while (1) switch (_context115.n) {
          case 0:
            _context115.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "authority" });
          case 1:
            return _context115.a(2, _context115.v);
        }
      }, _callee115, this);
    }));
    function authority() {
      return _authority3.apply(this, arguments);
    }
    return authority;
  }() }, { key: "canAttachToGroupIp", value: function() {
    var _canAttachToGroupIp = _asyncToGenerator(_regenerator().m(function _callee116(request) {
      return _regenerator().w(function(_context116) {
        while (1) switch (_context116.n) {
          case 0:
            _context116.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "canAttachToGroupIp", args: [request.licenseTermsId] });
          case 1:
            return _context116.a(2, _context116.v);
        }
      }, _callee116, this);
    }));
    function canAttachToGroupIp(_x82) {
      return _canAttachToGroupIp.apply(this, arguments);
    }
    return canAttachToGroupIp;
  }() }, { key: "canOverrideRoyaltyPercent", value: function() {
    var _canOverrideRoyaltyPercent = _asyncToGenerator(_regenerator().m(function _callee117(request) {
      return _regenerator().w(function(_context117) {
        while (1) switch (_context117.n) {
          case 0:
            _context117.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "canOverrideRoyaltyPercent", args: [request.licenseTermsId, request.newRoyaltyPercent] });
          case 1:
            return _context117.a(2, _context117.v);
        }
      }, _callee117, this);
    }));
    function canOverrideRoyaltyPercent(_x83) {
      return _canOverrideRoyaltyPercent.apply(this, arguments);
    }
    return canOverrideRoyaltyPercent;
  }() }, { key: "exists", value: function() {
    var _exists = _asyncToGenerator(_regenerator().m(function _callee118(request) {
      return _regenerator().w(function(_context118) {
        while (1) switch (_context118.n) {
          case 0:
            _context118.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "exists", args: [request.licenseTermsId] });
          case 1:
            return _context118.a(2, _context118.v);
        }
      }, _callee118, this);
    }));
    function exists(_x84) {
      return _exists.apply(this, arguments);
    }
    return exists;
  }() }, { key: "getEarlierExpireTime", value: function() {
    var _getEarlierExpireTime = _asyncToGenerator(_regenerator().m(function _callee119(request) {
      return _regenerator().w(function(_context119) {
        while (1) switch (_context119.n) {
          case 0:
            _context119.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "getEarlierExpireTime", args: [request.licenseTermsIds, request.start] });
          case 1:
            return _context119.a(2, _context119.v);
        }
      }, _callee119, this);
    }));
    function getEarlierExpireTime(_x85) {
      return _getEarlierExpireTime.apply(this, arguments);
    }
    return getEarlierExpireTime;
  }() }, { key: "getExpireTime", value: function() {
    var _getExpireTime = _asyncToGenerator(_regenerator().m(function _callee120(request) {
      return _regenerator().w(function(_context120) {
        while (1) switch (_context120.n) {
          case 0:
            _context120.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "getExpireTime", args: [request.licenseTermsId, request.start] });
          case 1:
            return _context120.a(2, _context120.v);
        }
      }, _callee120, this);
    }));
    function getExpireTime(_x86) {
      return _getExpireTime.apply(this, arguments);
    }
    return getExpireTime;
  }() }, { key: "getLicenseTerms", value: function() {
    var _getLicenseTerms = _asyncToGenerator(_regenerator().m(function _callee121(request) {
      var result;
      return _regenerator().w(function(_context121) {
        while (1) switch (_context121.n) {
          case 0:
            _context121.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "getLicenseTerms", args: [request.selectedLicenseTermsId] });
          case 1:
            result = _context121.v;
            return _context121.a(2, { terms: result });
        }
      }, _callee121, this);
    }));
    function getLicenseTerms(_x87) {
      return _getLicenseTerms.apply(this, arguments);
    }
    return getLicenseTerms;
  }() }, { key: "getLicenseTermsId", value: function() {
    var _getLicenseTermsId = _asyncToGenerator(_regenerator().m(function _callee122(request) {
      var result;
      return _regenerator().w(function(_context122) {
        while (1) switch (_context122.n) {
          case 0:
            _context122.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "getLicenseTermsId", args: [request.terms] });
          case 1:
            result = _context122.v;
            return _context122.a(2, { selectedLicenseTermsId: result });
        }
      }, _callee122, this);
    }));
    function getLicenseTermsId(_x88) {
      return _getLicenseTermsId.apply(this, arguments);
    }
    return getLicenseTermsId;
  }() }, { key: "getLicenseTermsUri", value: function() {
    var _getLicenseTermsUri = _asyncToGenerator(_regenerator().m(function _callee123(request) {
      return _regenerator().w(function(_context123) {
        while (1) switch (_context123.n) {
          case 0:
            _context123.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "getLicenseTermsURI", args: [request.licenseTermsId] });
          case 1:
            return _context123.a(2, _context123.v);
        }
      }, _callee123, this);
    }));
    function getLicenseTermsUri(_x89) {
      return _getLicenseTermsUri.apply(this, arguments);
    }
    return getLicenseTermsUri;
  }() }, { key: "getMetadataUri", value: function() {
    var _getMetadataUri = _asyncToGenerator(_regenerator().m(function _callee124() {
      return _regenerator().w(function(_context124) {
        while (1) switch (_context124.n) {
          case 0:
            _context124.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "getMetadataURI" });
          case 1:
            return _context124.a(2, _context124.v);
        }
      }, _callee124, this);
    }));
    function getMetadataUri() {
      return _getMetadataUri.apply(this, arguments);
    }
    return getMetadataUri;
  }() }, { key: "getRoyaltyPolicy", value: function() {
    var _getRoyaltyPolicy = _asyncToGenerator(_regenerator().m(function _callee125(request) {
      var result;
      return _regenerator().w(function(_context125) {
        while (1) switch (_context125.n) {
          case 0:
            _context125.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "getRoyaltyPolicy", args: [request.licenseTermsId] });
          case 1:
            result = _context125.v;
            return _context125.a(2, { royaltyPolicy: result[0], royaltyPercent: result[1], mintingFee: result[2], currency: result[3] });
        }
      }, _callee125, this);
    }));
    function getRoyaltyPolicy(_x90) {
      return _getRoyaltyPolicy.apply(this, arguments);
    }
    return getRoyaltyPolicy;
  }() }, { key: "isConsumingScheduledOp", value: function() {
    var _isConsumingScheduledOp3 = _asyncToGenerator(_regenerator().m(function _callee126() {
      return _regenerator().w(function(_context126) {
        while (1) switch (_context126.n) {
          case 0:
            _context126.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "isConsumingScheduledOp" });
          case 1:
            return _context126.a(2, _context126.v);
        }
      }, _callee126, this);
    }));
    function isConsumingScheduledOp() {
      return _isConsumingScheduledOp3.apply(this, arguments);
    }
    return isConsumingScheduledOp;
  }() }, { key: "isDerivativeApproved", value: function() {
    var _isDerivativeApproved = _asyncToGenerator(_regenerator().m(function _callee127(request) {
      return _regenerator().w(function(_context127) {
        while (1) switch (_context127.n) {
          case 0:
            _context127.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "isDerivativeApproved", args: [request.parentIpId, request.licenseTermsId, request.childIpId] });
          case 1:
            return _context127.a(2, _context127.v);
        }
      }, _callee127, this);
    }));
    function isDerivativeApproved(_x91) {
      return _isDerivativeApproved.apply(this, arguments);
    }
    return isDerivativeApproved;
  }() }, { key: "isLicenseTransferable", value: function() {
    var _isLicenseTransferable = _asyncToGenerator(_regenerator().m(function _callee128(request) {
      return _regenerator().w(function(_context128) {
        while (1) switch (_context128.n) {
          case 0:
            _context128.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "isLicenseTransferable", args: [request.licenseTermsId] });
          case 1:
            return _context128.a(2, _context128.v);
        }
      }, _callee128, this);
    }));
    function isLicenseTransferable(_x92) {
      return _isLicenseTransferable.apply(this, arguments);
    }
    return isLicenseTransferable;
  }() }, { key: "name", value: function() {
    var _name2 = _asyncToGenerator(_regenerator().m(function _callee129() {
      return _regenerator().w(function(_context129) {
        while (1) switch (_context129.n) {
          case 0:
            _context129.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "name" });
          case 1:
            return _context129.a(2, _context129.v);
        }
      }, _callee129, this);
    }));
    function name() {
      return _name2.apply(this, arguments);
    }
    return name;
  }() }, { key: "proxiableUuid", value: function() {
    var _proxiableUuid3 = _asyncToGenerator(_regenerator().m(function _callee130() {
      return _regenerator().w(function(_context130) {
        while (1) switch (_context130.n) {
          case 0:
            _context130.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "proxiableUUID" });
          case 1:
            return _context130.a(2, _context130.v);
        }
      }, _callee130, this);
    }));
    function proxiableUuid() {
      return _proxiableUuid3.apply(this, arguments);
    }
    return proxiableUuid;
  }() }, { key: "supportsInterface", value: function() {
    var _supportsInterface2 = _asyncToGenerator(_regenerator().m(function _callee131(request) {
      return _regenerator().w(function(_context131) {
        while (1) switch (_context131.n) {
          case 0:
            _context131.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "supportsInterface", args: [request.interfaceId] });
          case 1:
            return _context131.a(2, _context131.v);
        }
      }, _callee131, this);
    }));
    function supportsInterface(_x93) {
      return _supportsInterface2.apply(this, arguments);
    }
    return supportsInterface;
  }() }, { key: "toJson", value: function() {
    var _toJson = _asyncToGenerator(_regenerator().m(function _callee132(request) {
      return _regenerator().w(function(_context132) {
        while (1) switch (_context132.n) {
          case 0:
            _context132.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "toJson", args: [request.licenseTermsId] });
          case 1:
            return _context132.a(2, _context132.v);
        }
      }, _callee132, this);
    }));
    function toJson(_x94) {
      return _toJson.apply(this, arguments);
    }
    return toJson;
  }() }, { key: "totalRegisteredLicenseTerms", value: function() {
    var _totalRegisteredLicenseTerms = _asyncToGenerator(_regenerator().m(function _callee133() {
      return _regenerator().w(function(_context133) {
        while (1) switch (_context133.n) {
          case 0:
            _context133.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "totalRegisteredLicenseTerms" });
          case 1:
            return _context133.a(2, _context133.v);
        }
      }, _callee133, this);
    }));
    function totalRegisteredLicenseTerms() {
      return _totalRegisteredLicenseTerms.apply(this, arguments);
    }
    return totalRegisteredLicenseTerms;
  }() }, { key: "verifyCompatibleLicenses", value: function() {
    var _verifyCompatibleLicenses = _asyncToGenerator(_regenerator().m(function _callee134(request) {
      return _regenerator().w(function(_context134) {
        while (1) switch (_context134.n) {
          case 0:
            _context134.n = 1;
            return this.rpcClient.readContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "verifyCompatibleLicenses", args: [request.licenseTermsIds] });
          case 1:
            return _context134.a(2, _context134.v);
        }
      }, _callee134, this);
    }));
    function verifyCompatibleLicenses(_x95) {
      return _verifyCompatibleLicenses.apply(this, arguments);
    }
    return verifyCompatibleLicenses;
  }() }]);
}(PiLicenseTemplateEventClient);
var PiLicenseTemplateClient = function(_PiLicenseTemplateRea) {
  function PiLicenseTemplateClient2(rpcClient, wallet, address) {
    var _this1;
    _classCallCheck(this, PiLicenseTemplateClient2);
    _this1 = _callSuper(this, PiLicenseTemplateClient2, [rpcClient, address]);
    _this1.wallet = wallet;
    return _this1;
  }
  _inherits(PiLicenseTemplateClient2, _PiLicenseTemplateRea);
  return _createClass(PiLicenseTemplateClient2, [{ key: "initialize", value: function() {
    var _initialize3 = _asyncToGenerator(_regenerator().m(function _callee135(request) {
      var _yield$this$rpcClient58, call;
      return _regenerator().w(function(_context135) {
        while (1) switch (_context135.n) {
          case 0:
            _context135.n = 1;
            return this.rpcClient.simulateContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "initialize", account: this.wallet.account, args: [request.accessManager, request.name, request.metadataURI] });
          case 1:
            _yield$this$rpcClient58 = _context135.v;
            call = _yield$this$rpcClient58.request;
            _context135.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context135.a(2, _context135.v);
        }
      }, _callee135, this);
    }));
    function initialize(_x96) {
      return _initialize3.apply(this, arguments);
    }
    return initialize;
  }() }, {
    key: "initializeEncode",
    value: function initializeEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: piLicenseTemplateAbi, functionName: "initialize", args: [request.accessManager, request.name, request.metadataURI] }) };
    }
    /**
    * method registerLicenseTerms for contract PILicenseTemplate
    *
    * @param request PiLicenseTemplateRegisterLicenseTermsRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "registerLicenseTerms", value: function() {
    var _registerLicenseTerms = _asyncToGenerator(_regenerator().m(function _callee136(request) {
      var _yield$this$rpcClient59, call;
      return _regenerator().w(function(_context136) {
        while (1) switch (_context136.n) {
          case 0:
            _context136.n = 1;
            return this.rpcClient.simulateContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "registerLicenseTerms", account: this.wallet.account, args: [request.terms] });
          case 1:
            _yield$this$rpcClient59 = _context136.v;
            call = _yield$this$rpcClient59.request;
            _context136.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context136.a(2, _context136.v);
        }
      }, _callee136, this);
    }));
    function registerLicenseTerms(_x97) {
      return _registerLicenseTerms.apply(this, arguments);
    }
    return registerLicenseTerms;
  }() }, {
    key: "registerLicenseTermsEncode",
    value: function registerLicenseTermsEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: piLicenseTemplateAbi, functionName: "registerLicenseTerms", args: [request.terms] }) };
    }
    /**
    * method setApproval for contract PILicenseTemplate
    *
    * @param request PiLicenseTemplateSetApprovalRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "setApproval", value: function() {
    var _setApproval = _asyncToGenerator(_regenerator().m(function _callee137(request) {
      var _yield$this$rpcClient60, call;
      return _regenerator().w(function(_context137) {
        while (1) switch (_context137.n) {
          case 0:
            _context137.n = 1;
            return this.rpcClient.simulateContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "setApproval", account: this.wallet.account, args: [request.parentIpId, request.licenseTermsId, request.childIpId, request.approved] });
          case 1:
            _yield$this$rpcClient60 = _context137.v;
            call = _yield$this$rpcClient60.request;
            _context137.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context137.a(2, _context137.v);
        }
      }, _callee137, this);
    }));
    function setApproval(_x98) {
      return _setApproval.apply(this, arguments);
    }
    return setApproval;
  }() }, {
    key: "setApprovalEncode",
    value: function setApprovalEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: piLicenseTemplateAbi, functionName: "setApproval", args: [request.parentIpId, request.licenseTermsId, request.childIpId, request.approved] }) };
    }
    /**
    * method setAuthority for contract PILicenseTemplate
    *
    * @param request PiLicenseTemplateSetAuthorityRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "setAuthority", value: function() {
    var _setAuthority3 = _asyncToGenerator(_regenerator().m(function _callee138(request) {
      var _yield$this$rpcClient61, call;
      return _regenerator().w(function(_context138) {
        while (1) switch (_context138.n) {
          case 0:
            _context138.n = 1;
            return this.rpcClient.simulateContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "setAuthority", account: this.wallet.account, args: [request.newAuthority] });
          case 1:
            _yield$this$rpcClient61 = _context138.v;
            call = _yield$this$rpcClient61.request;
            _context138.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context138.a(2, _context138.v);
        }
      }, _callee138, this);
    }));
    function setAuthority(_x99) {
      return _setAuthority3.apply(this, arguments);
    }
    return setAuthority;
  }() }, {
    key: "setAuthorityEncode",
    value: function setAuthorityEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: piLicenseTemplateAbi, functionName: "setAuthority", args: [request.newAuthority] }) };
    }
    /**
    * method upgradeToAndCall for contract PILicenseTemplate
    *
    * @param request PiLicenseTemplateUpgradeToAndCallRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "upgradeToAndCall", value: function() {
    var _upgradeToAndCall3 = _asyncToGenerator(_regenerator().m(function _callee139(request) {
      var _yield$this$rpcClient62, call;
      return _regenerator().w(function(_context139) {
        while (1) switch (_context139.n) {
          case 0:
            _context139.n = 1;
            return this.rpcClient.simulateContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "upgradeToAndCall", account: this.wallet.account, args: [request.newImplementation, request.data] });
          case 1:
            _yield$this$rpcClient62 = _context139.v;
            call = _yield$this$rpcClient62.request;
            _context139.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context139.a(2, _context139.v);
        }
      }, _callee139, this);
    }));
    function upgradeToAndCall(_x100) {
      return _upgradeToAndCall3.apply(this, arguments);
    }
    return upgradeToAndCall;
  }() }, {
    key: "upgradeToAndCallEncode",
    value: function upgradeToAndCallEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: piLicenseTemplateAbi, functionName: "upgradeToAndCall", args: [request.newImplementation, request.data] }) };
    }
    /**
    * method verifyMintLicenseToken for contract PILicenseTemplate
    *
    * @param request PiLicenseTemplateVerifyMintLicenseTokenRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "verifyMintLicenseToken", value: function() {
    var _verifyMintLicenseToken = _asyncToGenerator(_regenerator().m(function _callee140(request) {
      var _yield$this$rpcClient63, call;
      return _regenerator().w(function(_context140) {
        while (1) switch (_context140.n) {
          case 0:
            _context140.n = 1;
            return this.rpcClient.simulateContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "verifyMintLicenseToken", account: this.wallet.account, args: [request[0], request[1], request[2], request[3]] });
          case 1:
            _yield$this$rpcClient63 = _context140.v;
            call = _yield$this$rpcClient63.request;
            _context140.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context140.a(2, _context140.v);
        }
      }, _callee140, this);
    }));
    function verifyMintLicenseToken(_x101) {
      return _verifyMintLicenseToken.apply(this, arguments);
    }
    return verifyMintLicenseToken;
  }() }, {
    key: "verifyMintLicenseTokenEncode",
    value: function verifyMintLicenseTokenEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: piLicenseTemplateAbi, functionName: "verifyMintLicenseToken", args: [request[0], request[1], request[2], request[3]] }) };
    }
    /**
    * method verifyRegisterDerivative for contract PILicenseTemplate
    *
    * @param request PiLicenseTemplateVerifyRegisterDerivativeRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "verifyRegisterDerivative", value: function() {
    var _verifyRegisterDerivative = _asyncToGenerator(_regenerator().m(function _callee141(request) {
      var _yield$this$rpcClient64, call;
      return _regenerator().w(function(_context141) {
        while (1) switch (_context141.n) {
          case 0:
            _context141.n = 1;
            return this.rpcClient.simulateContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "verifyRegisterDerivative", account: this.wallet.account, args: [request.childIpId, request.parentIpId, request.licenseTermsId, request.licensee] });
          case 1:
            _yield$this$rpcClient64 = _context141.v;
            call = _yield$this$rpcClient64.request;
            _context141.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context141.a(2, _context141.v);
        }
      }, _callee141, this);
    }));
    function verifyRegisterDerivative(_x102) {
      return _verifyRegisterDerivative.apply(this, arguments);
    }
    return verifyRegisterDerivative;
  }() }, {
    key: "verifyRegisterDerivativeEncode",
    value: function verifyRegisterDerivativeEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: piLicenseTemplateAbi, functionName: "verifyRegisterDerivative", args: [request.childIpId, request.parentIpId, request.licenseTermsId, request.licensee] }) };
    }
    /**
    * method verifyRegisterDerivativeForAllParents for contract PILicenseTemplate
    *
    * @param request PiLicenseTemplateVerifyRegisterDerivativeForAllParentsRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "verifyRegisterDerivativeForAllParents", value: function() {
    var _verifyRegisterDerivativeForAllParents = _asyncToGenerator(_regenerator().m(function _callee142(request) {
      var _yield$this$rpcClient65, call;
      return _regenerator().w(function(_context142) {
        while (1) switch (_context142.n) {
          case 0:
            _context142.n = 1;
            return this.rpcClient.simulateContract({ abi: piLicenseTemplateAbi, address: this.address, functionName: "verifyRegisterDerivativeForAllParents", account: this.wallet.account, args: [request.childIpId, request.parentIpIds, request.licenseTermsIds, request.caller] });
          case 1:
            _yield$this$rpcClient65 = _context142.v;
            call = _yield$this$rpcClient65.request;
            _context142.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context142.a(2, _context142.v);
        }
      }, _callee142, this);
    }));
    function verifyRegisterDerivativeForAllParents(_x103) {
      return _verifyRegisterDerivativeForAllParents.apply(this, arguments);
    }
    return verifyRegisterDerivativeForAllParents;
  }() }, { key: "verifyRegisterDerivativeForAllParentsEncode", value: function verifyRegisterDerivativeForAllParentsEncode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: piLicenseTemplateAbi, functionName: "verifyRegisterDerivativeForAllParents", args: [request.childIpId, request.parentIpIds, request.licenseTermsIds, request.caller] }) };
  } }]);
}(PiLicenseTemplateReadOnlyClient);
var RegistrationWorkflowsEventClient = function() {
  function RegistrationWorkflowsEventClient2(rpcClient, address) {
    var _rpcClient$chain18;
    _classCallCheck(this, RegistrationWorkflowsEventClient2);
    this.address = address || getAddress(registrationWorkflowsAddress, (_rpcClient$chain18 = rpcClient.chain) === null || _rpcClient$chain18 === void 0 ? void 0 : _rpcClient$chain18.id);
    this.rpcClient = rpcClient;
  }
  return _createClass(RegistrationWorkflowsEventClient2, [{
    key: "watchCollectionCreatedEvent",
    value: function watchCollectionCreatedEvent(_onLogs27) {
      return this.rpcClient.watchContractEvent({ abi: registrationWorkflowsAbi, address: this.address, eventName: "CollectionCreated", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs27(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event CollectionCreated for contract RegistrationWorkflows
    */
  }, { key: "parseTxCollectionCreatedEvent", value: function parseTxCollectionCreatedEvent(txReceipt) {
    var targetLogs = [];
    var _iterator27 = _createForOfIteratorHelper(txReceipt.logs), _step27;
    try {
      for (_iterator27.s(); !(_step27 = _iterator27.n()).done; ) {
        var log = _step27.value;
        try {
          var event = decodeEventLog({ abi: registrationWorkflowsAbi, eventName: "CollectionCreated", data: log.data, topics: log.topics });
          if (event.eventName === "CollectionCreated") {
            targetLogs.push(event.args);
          }
        } catch (e) {
        }
      }
    } catch (err) {
      _iterator27.e(err);
    } finally {
      _iterator27.f();
    }
    return targetLogs;
  } }]);
}();
var RegistrationWorkflowsClient = function(_RegistrationWorkflow) {
  function RegistrationWorkflowsClient2(rpcClient, wallet, address) {
    var _this10;
    _classCallCheck(this, RegistrationWorkflowsClient2);
    _this10 = _callSuper(this, RegistrationWorkflowsClient2, [rpcClient, address]);
    _this10.wallet = wallet;
    return _this10;
  }
  _inherits(RegistrationWorkflowsClient2, _RegistrationWorkflow);
  return _createClass(RegistrationWorkflowsClient2, [{ key: "createCollection", value: function() {
    var _createCollection = _asyncToGenerator(_regenerator().m(function _callee143(request) {
      var _yield$this$rpcClient66, call;
      return _regenerator().w(function(_context143) {
        while (1) switch (_context143.n) {
          case 0:
            _context143.n = 1;
            return this.rpcClient.simulateContract({ abi: registrationWorkflowsAbi, address: this.address, functionName: "createCollection", account: this.wallet.account, args: [request.spgNftInitParams] });
          case 1:
            _yield$this$rpcClient66 = _context143.v;
            call = _yield$this$rpcClient66.request;
            _context143.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context143.a(2, _context143.v);
        }
      }, _callee143, this);
    }));
    function createCollection(_x104) {
      return _createCollection.apply(this, arguments);
    }
    return createCollection;
  }() }, {
    key: "createCollectionEncode",
    value: function createCollectionEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: registrationWorkflowsAbi, functionName: "createCollection", args: [request.spgNftInitParams] }) };
    }
    /**
    * method mintAndRegisterIp for contract RegistrationWorkflows
    *
    * @param request RegistrationWorkflowsMintAndRegisterIpRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "mintAndRegisterIp", value: function() {
    var _mintAndRegisterIp = _asyncToGenerator(_regenerator().m(function _callee144(request) {
      var _yield$this$rpcClient67, call;
      return _regenerator().w(function(_context144) {
        while (1) switch (_context144.n) {
          case 0:
            _context144.n = 1;
            return this.rpcClient.simulateContract({ abi: registrationWorkflowsAbi, address: this.address, functionName: "mintAndRegisterIp", account: this.wallet.account, args: [request.spgNftContract, request.recipient, request.ipMetadata, request.allowDuplicates] });
          case 1:
            _yield$this$rpcClient67 = _context144.v;
            call = _yield$this$rpcClient67.request;
            _context144.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context144.a(2, _context144.v);
        }
      }, _callee144, this);
    }));
    function mintAndRegisterIp(_x105) {
      return _mintAndRegisterIp.apply(this, arguments);
    }
    return mintAndRegisterIp;
  }() }, {
    key: "mintAndRegisterIpEncode",
    value: function mintAndRegisterIpEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: registrationWorkflowsAbi, functionName: "mintAndRegisterIp", args: [request.spgNftContract, request.recipient, request.ipMetadata, request.allowDuplicates] }) };
    }
    /**
    * method multicall for contract RegistrationWorkflows
    *
    * @param request RegistrationWorkflowsMulticallRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "multicall", value: function() {
    var _multicall3 = _asyncToGenerator(_regenerator().m(function _callee145(request) {
      var _yield$this$rpcClient68, call;
      return _regenerator().w(function(_context145) {
        while (1) switch (_context145.n) {
          case 0:
            _context145.n = 1;
            return this.rpcClient.simulateContract({ abi: registrationWorkflowsAbi, address: this.address, functionName: "multicall", account: this.wallet.account, args: [request.data] });
          case 1:
            _yield$this$rpcClient68 = _context145.v;
            call = _yield$this$rpcClient68.request;
            _context145.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context145.a(2, _context145.v);
        }
      }, _callee145, this);
    }));
    function multicall(_x106) {
      return _multicall3.apply(this, arguments);
    }
    return multicall;
  }() }, {
    key: "multicallEncode",
    value: function multicallEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: registrationWorkflowsAbi, functionName: "multicall", args: [request.data] }) };
    }
    /**
    * method registerIp for contract RegistrationWorkflows
    *
    * @param request RegistrationWorkflowsRegisterIpRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "registerIp", value: function() {
    var _registerIp = _asyncToGenerator(_regenerator().m(function _callee146(request) {
      var _yield$this$rpcClient69, call;
      return _regenerator().w(function(_context146) {
        while (1) switch (_context146.n) {
          case 0:
            _context146.n = 1;
            return this.rpcClient.simulateContract({ abi: registrationWorkflowsAbi, address: this.address, functionName: "registerIp", account: this.wallet.account, args: [request.nftContract, request.tokenId, request.ipMetadata, request.sigMetadata] });
          case 1:
            _yield$this$rpcClient69 = _context146.v;
            call = _yield$this$rpcClient69.request;
            _context146.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context146.a(2, _context146.v);
        }
      }, _callee146, this);
    }));
    function registerIp(_x107) {
      return _registerIp.apply(this, arguments);
    }
    return registerIp;
  }() }, { key: "registerIpEncode", value: function registerIpEncode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: registrationWorkflowsAbi, functionName: "registerIp", args: [request.nftContract, request.tokenId, request.ipMetadata, request.sigMetadata] }) };
  } }]);
}(RegistrationWorkflowsEventClient);
var RoyaltyModuleEventClient = function() {
  function RoyaltyModuleEventClient2(rpcClient, address) {
    var _rpcClient$chain19;
    _classCallCheck(this, RoyaltyModuleEventClient2);
    this.address = address || getAddress(royaltyModuleAddress, (_rpcClient$chain19 = rpcClient.chain) === null || _rpcClient$chain19 === void 0 ? void 0 : _rpcClient$chain19.id);
    this.rpcClient = rpcClient;
  }
  return _createClass(RoyaltyModuleEventClient2, [{
    key: "watchIpRoyaltyVaultDeployedEvent",
    value: function watchIpRoyaltyVaultDeployedEvent(_onLogs28) {
      return this.rpcClient.watchContractEvent({ abi: royaltyModuleAbi, address: this.address, eventName: "IpRoyaltyVaultDeployed", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs28(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event IpRoyaltyVaultDeployed for contract RoyaltyModule
    */
  }, {
    key: "parseTxIpRoyaltyVaultDeployedEvent",
    value: function parseTxIpRoyaltyVaultDeployedEvent(txReceipt) {
      var targetLogs = [];
      var _iterator28 = _createForOfIteratorHelper(txReceipt.logs), _step28;
      try {
        for (_iterator28.s(); !(_step28 = _iterator28.n()).done; ) {
          var log = _step28.value;
          try {
            var event = decodeEventLog({ abi: royaltyModuleAbi, eventName: "IpRoyaltyVaultDeployed", data: log.data, topics: log.topics });
            if (event.eventName === "IpRoyaltyVaultDeployed") {
              targetLogs.push(event.args);
            }
          } catch (e) {
          }
        }
      } catch (err) {
        _iterator28.e(err);
      } finally {
        _iterator28.f();
      }
      return targetLogs;
    }
    /**
    * event RoyaltyPaid for contract RoyaltyModule
    */
  }, {
    key: "watchRoyaltyPaidEvent",
    value: function watchRoyaltyPaidEvent(_onLogs29) {
      return this.rpcClient.watchContractEvent({ abi: royaltyModuleAbi, address: this.address, eventName: "RoyaltyPaid", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs29(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event RoyaltyPaid for contract RoyaltyModule
    */
  }, { key: "parseTxRoyaltyPaidEvent", value: function parseTxRoyaltyPaidEvent(txReceipt) {
    var targetLogs = [];
    var _iterator29 = _createForOfIteratorHelper(txReceipt.logs), _step29;
    try {
      for (_iterator29.s(); !(_step29 = _iterator29.n()).done; ) {
        var log = _step29.value;
        try {
          var event = decodeEventLog({ abi: royaltyModuleAbi, eventName: "RoyaltyPaid", data: log.data, topics: log.topics });
          if (event.eventName === "RoyaltyPaid") {
            targetLogs.push(event.args);
          }
        } catch (e) {
        }
      }
    } catch (err) {
      _iterator29.e(err);
    } finally {
      _iterator29.f();
    }
    return targetLogs;
  } }]);
}();
var RoyaltyModuleReadOnlyClient = function(_RoyaltyModuleEventCl) {
  function RoyaltyModuleReadOnlyClient2(rpcClient, address) {
    _classCallCheck(this, RoyaltyModuleReadOnlyClient2);
    return _callSuper(this, RoyaltyModuleReadOnlyClient2, [rpcClient, address]);
  }
  _inherits(RoyaltyModuleReadOnlyClient2, _RoyaltyModuleEventCl);
  return _createClass(RoyaltyModuleReadOnlyClient2, [{ key: "ipRoyaltyVaults", value: function() {
    var _ipRoyaltyVaults = _asyncToGenerator(_regenerator().m(function _callee147(request) {
      return _regenerator().w(function(_context147) {
        while (1) switch (_context147.n) {
          case 0:
            _context147.n = 1;
            return this.rpcClient.readContract({ abi: royaltyModuleAbi, address: this.address, functionName: "ipRoyaltyVaults", args: [request.ipId] });
          case 1:
            return _context147.a(2, _context147.v);
        }
      }, _callee147, this);
    }));
    function ipRoyaltyVaults(_x108) {
      return _ipRoyaltyVaults.apply(this, arguments);
    }
    return ipRoyaltyVaults;
  }() }, { key: "isWhitelistedRoyaltyPolicy", value: function() {
    var _isWhitelistedRoyaltyPolicy = _asyncToGenerator(_regenerator().m(function _callee148(request) {
      return _regenerator().w(function(_context148) {
        while (1) switch (_context148.n) {
          case 0:
            _context148.n = 1;
            return this.rpcClient.readContract({ abi: royaltyModuleAbi, address: this.address, functionName: "isWhitelistedRoyaltyPolicy", args: [request.royaltyPolicy] });
          case 1:
            return _context148.a(2, _context148.v);
        }
      }, _callee148, this);
    }));
    function isWhitelistedRoyaltyPolicy(_x109) {
      return _isWhitelistedRoyaltyPolicy.apply(this, arguments);
    }
    return isWhitelistedRoyaltyPolicy;
  }() }, { key: "isWhitelistedRoyaltyToken", value: function() {
    var _isWhitelistedRoyaltyToken = _asyncToGenerator(_regenerator().m(function _callee149(request) {
      return _regenerator().w(function(_context149) {
        while (1) switch (_context149.n) {
          case 0:
            _context149.n = 1;
            return this.rpcClient.readContract({ abi: royaltyModuleAbi, address: this.address, functionName: "isWhitelistedRoyaltyToken", args: [request.token] });
          case 1:
            return _context149.a(2, _context149.v);
        }
      }, _callee149, this);
    }));
    function isWhitelistedRoyaltyToken(_x110) {
      return _isWhitelistedRoyaltyToken.apply(this, arguments);
    }
    return isWhitelistedRoyaltyToken;
  }() }]);
}(RoyaltyModuleEventClient);
var RoyaltyModuleClient = function(_RoyaltyModuleReadOnl) {
  function RoyaltyModuleClient2(rpcClient, wallet, address) {
    var _this11;
    _classCallCheck(this, RoyaltyModuleClient2);
    _this11 = _callSuper(this, RoyaltyModuleClient2, [rpcClient, address]);
    _this11.wallet = wallet;
    return _this11;
  }
  _inherits(RoyaltyModuleClient2, _RoyaltyModuleReadOnl);
  return _createClass(RoyaltyModuleClient2, [{ key: "payRoyaltyOnBehalf", value: function() {
    var _payRoyaltyOnBehalf = _asyncToGenerator(_regenerator().m(function _callee150(request) {
      var _yield$this$rpcClient70, call;
      return _regenerator().w(function(_context150) {
        while (1) switch (_context150.n) {
          case 0:
            _context150.n = 1;
            return this.rpcClient.simulateContract({ abi: royaltyModuleAbi, address: this.address, functionName: "payRoyaltyOnBehalf", account: this.wallet.account, args: [request.receiverIpId, request.payerIpId, request.token, request.amount] });
          case 1:
            _yield$this$rpcClient70 = _context150.v;
            call = _yield$this$rpcClient70.request;
            _context150.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context150.a(2, _context150.v);
        }
      }, _callee150, this);
    }));
    function payRoyaltyOnBehalf(_x111) {
      return _payRoyaltyOnBehalf.apply(this, arguments);
    }
    return payRoyaltyOnBehalf;
  }() }, { key: "payRoyaltyOnBehalfEncode", value: function payRoyaltyOnBehalfEncode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: royaltyModuleAbi, functionName: "payRoyaltyOnBehalf", args: [request.receiverIpId, request.payerIpId, request.token, request.amount] }) };
  } }]);
}(RoyaltyModuleReadOnlyClient);
var RoyaltyTokenDistributionWorkflowsClient = function() {
  function RoyaltyTokenDistributionWorkflowsClient2(rpcClient, wallet, address) {
    var _rpcClient$chain21;
    _classCallCheck(this, RoyaltyTokenDistributionWorkflowsClient2);
    this.address = address || getAddress(royaltyTokenDistributionWorkflowsAddress, (_rpcClient$chain21 = rpcClient.chain) === null || _rpcClient$chain21 === void 0 ? void 0 : _rpcClient$chain21.id);
    this.rpcClient = rpcClient;
    this.wallet = wallet;
  }
  return _createClass(RoyaltyTokenDistributionWorkflowsClient2, [{ key: "distributeRoyaltyTokens", value: function() {
    var _distributeRoyaltyTokens = _asyncToGenerator(_regenerator().m(function _callee174(request) {
      var _yield$this$rpcClient81, call;
      return _regenerator().w(function(_context174) {
        while (1) switch (_context174.n) {
          case 0:
            _context174.n = 1;
            return this.rpcClient.simulateContract({ abi: royaltyTokenDistributionWorkflowsAbi, address: this.address, functionName: "distributeRoyaltyTokens", account: this.wallet.account, args: [request.ipId, request.royaltyShares, request.sigApproveRoyaltyTokens] });
          case 1:
            _yield$this$rpcClient81 = _context174.v;
            call = _yield$this$rpcClient81.request;
            _context174.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context174.a(2, _context174.v);
        }
      }, _callee174, this);
    }));
    function distributeRoyaltyTokens(_x123) {
      return _distributeRoyaltyTokens.apply(this, arguments);
    }
    return distributeRoyaltyTokens;
  }() }, {
    key: "distributeRoyaltyTokensEncode",
    value: function distributeRoyaltyTokensEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: royaltyTokenDistributionWorkflowsAbi, functionName: "distributeRoyaltyTokens", args: [request.ipId, request.royaltyShares, request.sigApproveRoyaltyTokens] }) };
    }
    /**
    * method mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens for contract RoyaltyTokenDistributionWorkflows
    *
    * @param request RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens", value: function() {
    var _mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens = _asyncToGenerator(_regenerator().m(function _callee175(request) {
      var _yield$this$rpcClient82, call;
      return _regenerator().w(function(_context175) {
        while (1) switch (_context175.n) {
          case 0:
            _context175.n = 1;
            return this.rpcClient.simulateContract({ abi: royaltyTokenDistributionWorkflowsAbi, address: this.address, functionName: "mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens", account: this.wallet.account, args: [request.spgNftContract, request.recipient, request.ipMetadata, request.licenseTermsData, request.royaltyShares, request.allowDuplicates] });
          case 1:
            _yield$this$rpcClient82 = _context175.v;
            call = _yield$this$rpcClient82.request;
            _context175.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context175.a(2, _context175.v);
        }
      }, _callee175, this);
    }));
    function mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens(_x124) {
      return _mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens.apply(this, arguments);
    }
    return mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens;
  }() }, {
    key: "mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensEncode",
    value: function mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: royaltyTokenDistributionWorkflowsAbi, functionName: "mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens", args: [request.spgNftContract, request.recipient, request.ipMetadata, request.licenseTermsData, request.royaltyShares, request.allowDuplicates] }) };
    }
    /**
    * method mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens for contract RoyaltyTokenDistributionWorkflows
    *
    * @param request RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens", value: function() {
    var _mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens = _asyncToGenerator(_regenerator().m(function _callee176(request) {
      var _yield$this$rpcClient83, call;
      return _regenerator().w(function(_context176) {
        while (1) switch (_context176.n) {
          case 0:
            _context176.n = 1;
            return this.rpcClient.simulateContract({ abi: royaltyTokenDistributionWorkflowsAbi, address: this.address, functionName: "mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens", account: this.wallet.account, args: [request.spgNftContract, request.recipient, request.ipMetadata, request.derivData, request.royaltyShares, request.allowDuplicates] });
          case 1:
            _yield$this$rpcClient83 = _context176.v;
            call = _yield$this$rpcClient83.request;
            _context176.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context176.a(2, _context176.v);
        }
      }, _callee176, this);
    }));
    function mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens(_x125) {
      return _mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens.apply(this, arguments);
    }
    return mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens;
  }() }, {
    key: "mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensEncode",
    value: function mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: royaltyTokenDistributionWorkflowsAbi, functionName: "mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens", args: [request.spgNftContract, request.recipient, request.ipMetadata, request.derivData, request.royaltyShares, request.allowDuplicates] }) };
    }
    /**
    * method multicall for contract RoyaltyTokenDistributionWorkflows
    *
    * @param request RoyaltyTokenDistributionWorkflowsMulticallRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "multicall", value: function() {
    var _multicall4 = _asyncToGenerator(_regenerator().m(function _callee177(request) {
      var _yield$this$rpcClient84, call;
      return _regenerator().w(function(_context177) {
        while (1) switch (_context177.n) {
          case 0:
            _context177.n = 1;
            return this.rpcClient.simulateContract({ abi: royaltyTokenDistributionWorkflowsAbi, address: this.address, functionName: "multicall", account: this.wallet.account, args: [request.data] });
          case 1:
            _yield$this$rpcClient84 = _context177.v;
            call = _yield$this$rpcClient84.request;
            _context177.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context177.a(2, _context177.v);
        }
      }, _callee177, this);
    }));
    function multicall(_x126) {
      return _multicall4.apply(this, arguments);
    }
    return multicall;
  }() }, {
    key: "multicallEncode",
    value: function multicallEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: royaltyTokenDistributionWorkflowsAbi, functionName: "multicall", args: [request.data] }) };
    }
    /**
    * method registerIpAndAttachPILTermsAndDeployRoyaltyVault for contract RoyaltyTokenDistributionWorkflows
    *
    * @param request RoyaltyTokenDistributionWorkflowsRegisterIpAndAttachPilTermsAndDeployRoyaltyVaultRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "registerIpAndAttachPilTermsAndDeployRoyaltyVault", value: function() {
    var _registerIpAndAttachPilTermsAndDeployRoyaltyVault = _asyncToGenerator(_regenerator().m(function _callee178(request) {
      var _yield$this$rpcClient85, call;
      return _regenerator().w(function(_context178) {
        while (1) switch (_context178.n) {
          case 0:
            _context178.n = 1;
            return this.rpcClient.simulateContract({ abi: royaltyTokenDistributionWorkflowsAbi, address: this.address, functionName: "registerIpAndAttachPILTermsAndDeployRoyaltyVault", account: this.wallet.account, args: [request.nftContract, request.tokenId, request.ipMetadata, request.licenseTermsData, request.sigMetadataAndAttachAndConfig] });
          case 1:
            _yield$this$rpcClient85 = _context178.v;
            call = _yield$this$rpcClient85.request;
            _context178.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context178.a(2, _context178.v);
        }
      }, _callee178, this);
    }));
    function registerIpAndAttachPilTermsAndDeployRoyaltyVault(_x127) {
      return _registerIpAndAttachPilTermsAndDeployRoyaltyVault.apply(this, arguments);
    }
    return registerIpAndAttachPilTermsAndDeployRoyaltyVault;
  }() }, {
    key: "registerIpAndAttachPilTermsAndDeployRoyaltyVaultEncode",
    value: function registerIpAndAttachPilTermsAndDeployRoyaltyVaultEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: royaltyTokenDistributionWorkflowsAbi, functionName: "registerIpAndAttachPILTermsAndDeployRoyaltyVault", args: [request.nftContract, request.tokenId, request.ipMetadata, request.licenseTermsData, request.sigMetadataAndAttachAndConfig] }) };
    }
    /**
    * method registerIpAndMakeDerivativeAndDeployRoyaltyVault for contract RoyaltyTokenDistributionWorkflows
    *
    * @param request RoyaltyTokenDistributionWorkflowsRegisterIpAndMakeDerivativeAndDeployRoyaltyVaultRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "registerIpAndMakeDerivativeAndDeployRoyaltyVault", value: function() {
    var _registerIpAndMakeDerivativeAndDeployRoyaltyVault = _asyncToGenerator(_regenerator().m(function _callee179(request) {
      var _yield$this$rpcClient86, call;
      return _regenerator().w(function(_context179) {
        while (1) switch (_context179.n) {
          case 0:
            _context179.n = 1;
            return this.rpcClient.simulateContract({ abi: royaltyTokenDistributionWorkflowsAbi, address: this.address, functionName: "registerIpAndMakeDerivativeAndDeployRoyaltyVault", account: this.wallet.account, args: [request.nftContract, request.tokenId, request.ipMetadata, request.derivData, request.sigMetadataAndRegister] });
          case 1:
            _yield$this$rpcClient86 = _context179.v;
            call = _yield$this$rpcClient86.request;
            _context179.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context179.a(2, _context179.v);
        }
      }, _callee179, this);
    }));
    function registerIpAndMakeDerivativeAndDeployRoyaltyVault(_x128) {
      return _registerIpAndMakeDerivativeAndDeployRoyaltyVault.apply(this, arguments);
    }
    return registerIpAndMakeDerivativeAndDeployRoyaltyVault;
  }() }, { key: "registerIpAndMakeDerivativeAndDeployRoyaltyVaultEncode", value: function registerIpAndMakeDerivativeAndDeployRoyaltyVaultEncode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: royaltyTokenDistributionWorkflowsAbi, functionName: "registerIpAndMakeDerivativeAndDeployRoyaltyVault", args: [request.nftContract, request.tokenId, request.ipMetadata, request.derivData, request.sigMetadataAndRegister] }) };
  } }]);
}();
var RoyaltyWorkflowsClient = function() {
  function RoyaltyWorkflowsClient2(rpcClient, wallet, address) {
    var _rpcClient$chain22;
    _classCallCheck(this, RoyaltyWorkflowsClient2);
    this.address = address || getAddress(royaltyWorkflowsAddress, (_rpcClient$chain22 = rpcClient.chain) === null || _rpcClient$chain22 === void 0 ? void 0 : _rpcClient$chain22.id);
    this.rpcClient = rpcClient;
    this.wallet = wallet;
  }
  return _createClass(RoyaltyWorkflowsClient2, [{ key: "claimAllRevenue", value: function() {
    var _claimAllRevenue = _asyncToGenerator(_regenerator().m(function _callee180(request) {
      var _yield$this$rpcClient87, call;
      return _regenerator().w(function(_context180) {
        while (1) switch (_context180.n) {
          case 0:
            _context180.n = 1;
            return this.rpcClient.simulateContract({ abi: royaltyWorkflowsAbi, address: this.address, functionName: "claimAllRevenue", account: this.wallet.account, args: [request.ancestorIpId, request.claimer, request.childIpIds, request.royaltyPolicies, request.currencyTokens] });
          case 1:
            _yield$this$rpcClient87 = _context180.v;
            call = _yield$this$rpcClient87.request;
            _context180.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context180.a(2, _context180.v);
        }
      }, _callee180, this);
    }));
    function claimAllRevenue(_x129) {
      return _claimAllRevenue.apply(this, arguments);
    }
    return claimAllRevenue;
  }() }, {
    key: "claimAllRevenueEncode",
    value: function claimAllRevenueEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: royaltyWorkflowsAbi, functionName: "claimAllRevenue", args: [request.ancestorIpId, request.claimer, request.childIpIds, request.royaltyPolicies, request.currencyTokens] }) };
    }
    /**
    * method multicall for contract RoyaltyWorkflows
    *
    * @param request RoyaltyWorkflowsMulticallRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "multicall", value: function() {
    var _multicall5 = _asyncToGenerator(_regenerator().m(function _callee181(request) {
      var _yield$this$rpcClient88, call;
      return _regenerator().w(function(_context181) {
        while (1) switch (_context181.n) {
          case 0:
            _context181.n = 1;
            return this.rpcClient.simulateContract({ abi: royaltyWorkflowsAbi, address: this.address, functionName: "multicall", account: this.wallet.account, args: [request.data] });
          case 1:
            _yield$this$rpcClient88 = _context181.v;
            call = _yield$this$rpcClient88.request;
            _context181.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context181.a(2, _context181.v);
        }
      }, _callee181, this);
    }));
    function multicall(_x130) {
      return _multicall5.apply(this, arguments);
    }
    return multicall;
  }() }, { key: "multicallEncode", value: function multicallEncode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: royaltyWorkflowsAbi, functionName: "multicall", args: [request.data] }) };
  } }]);
}();
var SpgnftImplEventClient = function() {
  function SpgnftImplEventClient2(rpcClient, address) {
    var _rpcClient$chain24;
    _classCallCheck(this, SpgnftImplEventClient2);
    this.address = address || getAddress(spgnftImplAddress, (_rpcClient$chain24 = rpcClient.chain) === null || _rpcClient$chain24 === void 0 ? void 0 : _rpcClient$chain24.id);
    this.rpcClient = rpcClient;
  }
  return _createClass(SpgnftImplEventClient2, [{
    key: "watchTransferEvent",
    value: function watchTransferEvent(_onLogs38) {
      return this.rpcClient.watchContractEvent({ abi: spgnftImplAbi, address: this.address, eventName: "Transfer", onLogs: function onLogs(evs) {
        evs.forEach(function(it) {
          return _onLogs38(it.transactionHash, it.args);
        });
      } });
    }
    /**
    * parse tx receipt event Transfer for contract SPGNFTImpl
    */
  }, { key: "parseTxTransferEvent", value: function parseTxTransferEvent(txReceipt) {
    var targetLogs = [];
    var _iterator38 = _createForOfIteratorHelper(txReceipt.logs), _step38;
    try {
      for (_iterator38.s(); !(_step38 = _iterator38.n()).done; ) {
        var log = _step38.value;
        try {
          var event = decodeEventLog({ abi: spgnftImplAbi, eventName: "Transfer", data: log.data, topics: log.topics });
          if (event.eventName === "Transfer") {
            targetLogs.push(event.args);
          }
        } catch (e) {
        }
      }
    } catch (err) {
      _iterator38.e(err);
    } finally {
      _iterator38.f();
    }
    return targetLogs;
  } }]);
}();
var SpgnftImplReadOnlyClient = function(_SpgnftImplEventClien) {
  function SpgnftImplReadOnlyClient2(rpcClient, address) {
    _classCallCheck(this, SpgnftImplReadOnlyClient2);
    return _callSuper(this, SpgnftImplReadOnlyClient2, [rpcClient, address]);
  }
  _inherits(SpgnftImplReadOnlyClient2, _SpgnftImplEventClien);
  return _createClass(SpgnftImplReadOnlyClient2, [{ key: "mintFee", value: function() {
    var _mintFee = _asyncToGenerator(_regenerator().m(function _callee187() {
      return _regenerator().w(function(_context187) {
        while (1) switch (_context187.n) {
          case 0:
            _context187.n = 1;
            return this.rpcClient.readContract({ abi: spgnftImplAbi, address: this.address, functionName: "mintFee" });
          case 1:
            return _context187.a(2, _context187.v);
        }
      }, _callee187, this);
    }));
    function mintFee() {
      return _mintFee.apply(this, arguments);
    }
    return mintFee;
  }() }, { key: "mintFeeToken", value: function() {
    var _mintFeeToken = _asyncToGenerator(_regenerator().m(function _callee188() {
      return _regenerator().w(function(_context188) {
        while (1) switch (_context188.n) {
          case 0:
            _context188.n = 1;
            return this.rpcClient.readContract({ abi: spgnftImplAbi, address: this.address, functionName: "mintFeeToken" });
          case 1:
            return _context188.a(2, _context188.v);
        }
      }, _callee188, this);
    }));
    function mintFeeToken() {
      return _mintFeeToken.apply(this, arguments);
    }
    return mintFeeToken;
  }() }, { key: "publicMinting", value: function() {
    var _publicMinting = _asyncToGenerator(_regenerator().m(function _callee189() {
      return _regenerator().w(function(_context189) {
        while (1) switch (_context189.n) {
          case 0:
            _context189.n = 1;
            return this.rpcClient.readContract({ abi: spgnftImplAbi, address: this.address, functionName: "publicMinting" });
          case 1:
            return _context189.a(2, _context189.v);
        }
      }, _callee189, this);
    }));
    function publicMinting() {
      return _publicMinting.apply(this, arguments);
    }
    return publicMinting;
  }() }, { key: "tokenUri", value: function() {
    var _tokenUri = _asyncToGenerator(_regenerator().m(function _callee190(request) {
      return _regenerator().w(function(_context190) {
        while (1) switch (_context190.n) {
          case 0:
            _context190.n = 1;
            return this.rpcClient.readContract({ abi: spgnftImplAbi, address: this.address, functionName: "tokenURI", args: [request.tokenId] });
          case 1:
            return _context190.a(2, _context190.v);
        }
      }, _callee190, this);
    }));
    function tokenUri(_x133) {
      return _tokenUri.apply(this, arguments);
    }
    return tokenUri;
  }() }]);
}(SpgnftImplEventClient);
var SpgnftImplClient = function(_SpgnftImplReadOnlyCl) {
  function SpgnftImplClient2(rpcClient, wallet, address) {
    var _this14;
    _classCallCheck(this, SpgnftImplClient2);
    _this14 = _callSuper(this, SpgnftImplClient2, [rpcClient, address]);
    _this14.wallet = wallet;
    return _this14;
  }
  _inherits(SpgnftImplClient2, _SpgnftImplReadOnlyCl);
  return _createClass(SpgnftImplClient2, [{ key: "setTokenUri", value: function() {
    var _setTokenUri = _asyncToGenerator(_regenerator().m(function _callee191(request) {
      var _yield$this$rpcClient92, call;
      return _regenerator().w(function(_context191) {
        while (1) switch (_context191.n) {
          case 0:
            _context191.n = 1;
            return this.rpcClient.simulateContract({ abi: spgnftImplAbi, address: this.address, functionName: "setTokenURI", account: this.wallet.account, args: [request.tokenId, request.tokenUri] });
          case 1:
            _yield$this$rpcClient92 = _context191.v;
            call = _yield$this$rpcClient92.request;
            _context191.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context191.a(2, _context191.v);
        }
      }, _callee191, this);
    }));
    function setTokenUri(_x134) {
      return _setTokenUri.apply(this, arguments);
    }
    return setTokenUri;
  }() }, { key: "setTokenUriEncode", value: function setTokenUriEncode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: spgnftImplAbi, functionName: "setTokenURI", args: [request.tokenId, request.tokenUri] }) };
  } }]);
}(SpgnftImplReadOnlyClient);
var WrappedIpReadOnlyClient = function() {
  function WrappedIpReadOnlyClient2(rpcClient, address) {
    var _rpcClient$chain25;
    _classCallCheck(this, WrappedIpReadOnlyClient2);
    this.address = address || getAddress(wrappedIpAddress, (_rpcClient$chain25 = rpcClient.chain) === null || _rpcClient$chain25 === void 0 ? void 0 : _rpcClient$chain25.id);
    this.rpcClient = rpcClient;
  }
  return _createClass(WrappedIpReadOnlyClient2, [{ key: "allowance", value: function() {
    var _allowance2 = _asyncToGenerator(_regenerator().m(function _callee192(request) {
      var result;
      return _regenerator().w(function(_context192) {
        while (1) switch (_context192.n) {
          case 0:
            _context192.n = 1;
            return this.rpcClient.readContract({ abi: wrappedIpAbi, address: this.address, functionName: "allowance", args: [request.owner, request.spender] });
          case 1:
            result = _context192.v;
            return _context192.a(2, { result });
        }
      }, _callee192, this);
    }));
    function allowance(_x135) {
      return _allowance2.apply(this, arguments);
    }
    return allowance;
  }() }, { key: "balanceOf", value: function() {
    var _balanceOf3 = _asyncToGenerator(_regenerator().m(function _callee193(request) {
      var result;
      return _regenerator().w(function(_context193) {
        while (1) switch (_context193.n) {
          case 0:
            _context193.n = 1;
            return this.rpcClient.readContract({ abi: wrappedIpAbi, address: this.address, functionName: "balanceOf", args: [request.owner] });
          case 1:
            result = _context193.v;
            return _context193.a(2, { result });
        }
      }, _callee193, this);
    }));
    function balanceOf(_x136) {
      return _balanceOf3.apply(this, arguments);
    }
    return balanceOf;
  }() }]);
}();
var WrappedIpClient = function(_WrappedIpReadOnlyCli) {
  function WrappedIpClient2(rpcClient, wallet, address) {
    var _this15;
    _classCallCheck(this, WrappedIpClient2);
    _this15 = _callSuper(this, WrappedIpClient2, [rpcClient, address]);
    _this15.wallet = wallet;
    return _this15;
  }
  _inherits(WrappedIpClient2, _WrappedIpReadOnlyCli);
  return _createClass(WrappedIpClient2, [{ key: "approve", value: function() {
    var _approve2 = _asyncToGenerator(_regenerator().m(function _callee194(request) {
      var _yield$this$rpcClient93, call;
      return _regenerator().w(function(_context194) {
        while (1) switch (_context194.n) {
          case 0:
            _context194.n = 1;
            return this.rpcClient.simulateContract({ abi: wrappedIpAbi, address: this.address, functionName: "approve", account: this.wallet.account, args: [request.spender, request.amount] });
          case 1:
            _yield$this$rpcClient93 = _context194.v;
            call = _yield$this$rpcClient93.request;
            _context194.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context194.a(2, _context194.v);
        }
      }, _callee194, this);
    }));
    function approve(_x137) {
      return _approve2.apply(this, arguments);
    }
    return approve;
  }() }, {
    key: "approveEncode",
    value: function approveEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: wrappedIpAbi, functionName: "approve", args: [request.spender, request.amount] }) };
    }
    /**
    * method deposit for contract WrappedIP
    *
    * @param request WrappedIpDepositRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "deposit", value: function() {
    var _deposit = _asyncToGenerator(_regenerator().m(function _callee195() {
      var _yield$this$rpcClient94, call;
      return _regenerator().w(function(_context195) {
        while (1) switch (_context195.n) {
          case 0:
            _context195.n = 1;
            return this.rpcClient.simulateContract({ abi: wrappedIpAbi, address: this.address, functionName: "deposit", account: this.wallet.account });
          case 1:
            _yield$this$rpcClient94 = _context195.v;
            call = _yield$this$rpcClient94.request;
            _context195.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context195.a(2, _context195.v);
        }
      }, _callee195, this);
    }));
    function deposit() {
      return _deposit.apply(this, arguments);
    }
    return deposit;
  }() }, {
    key: "depositEncode",
    value: function depositEncode() {
      return { to: this.address, data: encodeFunctionData({ abi: wrappedIpAbi, functionName: "deposit" }) };
    }
    /**
    * method transfer for contract WrappedIP
    *
    * @param request WrappedIpTransferRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "transfer", value: function() {
    var _transfer2 = _asyncToGenerator(_regenerator().m(function _callee196(request) {
      var _yield$this$rpcClient95, call;
      return _regenerator().w(function(_context196) {
        while (1) switch (_context196.n) {
          case 0:
            _context196.n = 1;
            return this.rpcClient.simulateContract({ abi: wrappedIpAbi, address: this.address, functionName: "transfer", account: this.wallet.account, args: [request.to, request.amount] });
          case 1:
            _yield$this$rpcClient95 = _context196.v;
            call = _yield$this$rpcClient95.request;
            _context196.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context196.a(2, _context196.v);
        }
      }, _callee196, this);
    }));
    function transfer(_x138) {
      return _transfer2.apply(this, arguments);
    }
    return transfer;
  }() }, {
    key: "transferEncode",
    value: function transferEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: wrappedIpAbi, functionName: "transfer", args: [request.to, request.amount] }) };
    }
    /**
    * method transferFrom for contract WrappedIP
    *
    * @param request WrappedIpTransferFromRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "transferFrom", value: function() {
    var _transferFrom2 = _asyncToGenerator(_regenerator().m(function _callee197(request) {
      var _yield$this$rpcClient96, call;
      return _regenerator().w(function(_context197) {
        while (1) switch (_context197.n) {
          case 0:
            _context197.n = 1;
            return this.rpcClient.simulateContract({ abi: wrappedIpAbi, address: this.address, functionName: "transferFrom", account: this.wallet.account, args: [request.from, request.to, request.amount] });
          case 1:
            _yield$this$rpcClient96 = _context197.v;
            call = _yield$this$rpcClient96.request;
            _context197.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context197.a(2, _context197.v);
        }
      }, _callee197, this);
    }));
    function transferFrom(_x139) {
      return _transferFrom2.apply(this, arguments);
    }
    return transferFrom;
  }() }, {
    key: "transferFromEncode",
    value: function transferFromEncode(request) {
      return { to: this.address, data: encodeFunctionData({ abi: wrappedIpAbi, functionName: "transferFrom", args: [request.from, request.to, request.amount] }) };
    }
    /**
    * method withdraw for contract WrappedIP
    *
    * @param request WrappedIpWithdrawRequest
    * @return Promise<WriteContractReturnType>
    */
  }, { key: "withdraw", value: function() {
    var _withdraw = _asyncToGenerator(_regenerator().m(function _callee198(request) {
      var _yield$this$rpcClient97, call;
      return _regenerator().w(function(_context198) {
        while (1) switch (_context198.n) {
          case 0:
            _context198.n = 1;
            return this.rpcClient.simulateContract({ abi: wrappedIpAbi, address: this.address, functionName: "withdraw", account: this.wallet.account, args: [request.value] });
          case 1:
            _yield$this$rpcClient97 = _context198.v;
            call = _yield$this$rpcClient97.request;
            _context198.n = 2;
            return this.wallet.writeContract(call);
          case 2:
            return _context198.a(2, _context198.v);
        }
      }, _callee198, this);
    }));
    function withdraw(_x140) {
      return _withdraw.apply(this, arguments);
    }
    return withdraw;
  }() }, { key: "withdrawEncode", value: function withdrawEncode(request) {
    return { to: this.address, data: encodeFunctionData({ abi: wrappedIpAbi, functionName: "withdraw", args: [request.value] }) };
  } }]);
}(WrappedIpReadOnlyClient);
var aeneid = defineChain({
  id: 1315,
  name: "aeneid",
  nativeCurrency: {
    name: "IP",
    symbol: "IP",
    decimals: 18
  },
  rpcUrls: {
    "default": {
      http: ["https://aeneid.storyrpc.io/"]
    }
  },
  blockExplorers: {
    "default": {
      name: "Explorer",
      url: "https://aeneid.storyscan.xyz/"
    }
  },
  contracts: {
    multicall3: {
      address: "0xca11bde05977b3631167028862be2a173976ca11",
      blockCreated: 1792
    }
  },
  testnet: true
});
var mainnet = defineChain({
  id: 1514,
  name: "mainnet",
  nativeCurrency: {
    name: "IP",
    symbol: "IP",
    decimals: 18
  },
  rpcUrls: {
    "default": {
      http: ["https://mainnet.storyrpc.io/"]
    }
  },
  blockExplorers: {
    "default": {
      name: "Explorer",
      url: "https://dev-mainnet.storyscan.xyz/"
    }
  },
  contracts: {
    multicall3: {
      address: "0xca11bde05977b3631167028862be2a173976ca11",
      blockCreated: 340998
    }
  },
  testnet: false
});
var defaultFunctionSelector = "0x00000000";
var royaltySharesTotalSupply = 1e8;
var MAX_ROYALTY_TOKEN = 1e8;
var WIP_TOKEN_ADDRESS = wrappedIpAddress[mainnet.id];
var handleError = function handleError2(error, msg) {
  if (error instanceof Error) {
    var newError = new Error("".concat(msg, ": ").concat(error.message));
    newError.stack = error.stack;
    throw newError;
  }
  throw new Error("".concat(msg, ": Unknown error type"));
};
function _arrayWithoutHoles(r) {
  if (Array.isArray(r)) return _arrayLikeToArray(r);
}
function _iterableToArray(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(r) {
  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
}
var simulateAndWriteContract = function() {
  var _ref2 = _asyncToGenerator(_regenerator().m(function _callee(_ref) {
    var rpcClient, wallet, data, _yield$rpcClient$simu, request, txHash, receipt;
    return _regenerator().w(function(_context) {
      while (1) switch (_context.n) {
        case 0:
          rpcClient = _ref.rpcClient, wallet = _ref.wallet, data = _ref.data;
          _context.n = 1;
          return rpcClient.simulateContract(_objectSpread2(_objectSpread2({}, data), {}, {
            account: wallet.account
          }));
        case 1:
          _yield$rpcClient$simu = _context.v;
          request = _yield$rpcClient$simu.request;
          _context.n = 2;
          return wallet.writeContract(request);
        case 2:
          txHash = _context.v;
          _context.n = 3;
          return rpcClient.waitForTransactionReceipt({
            hash: txHash
          });
        case 3:
          receipt = _context.v;
          return _context.a(2, {
            txHash,
            receipt
          });
      }
    }, _callee);
  }));
  return function simulateAndWriteContract2(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var ERC20Client = function() {
  function ERC20Client2(rpcClient, wallet, address) {
    _classCallCheck(this, ERC20Client2);
    this.ercClient = new Erc20Client(rpcClient, wallet, address);
  }
  return _createClass(ERC20Client2, [{
    key: "balanceOf",
    value: function() {
      var _balanceOf = _asyncToGenerator(_regenerator().m(function _callee(account) {
        return _regenerator().w(function(_context) {
          while (1) switch (_context.n) {
            case 0:
              _context.n = 1;
              return this.ercClient.balanceOf({
                account
              });
            case 1:
              return _context.a(2, _context.v);
          }
        }, _callee, this);
      }));
      function balanceOf(_x) {
        return _balanceOf.apply(this, arguments);
      }
      return balanceOf;
    }()
  }, {
    key: "allowance",
    value: function() {
      var _allowance = _asyncToGenerator(_regenerator().m(function _callee2(owner, spender) {
        return _regenerator().w(function(_context2) {
          while (1) switch (_context2.n) {
            case 0:
              _context2.n = 1;
              return this.ercClient.allowance({
                owner,
                spender
              });
            case 1:
              return _context2.a(2, _context2.v);
          }
        }, _callee2, this);
      }));
      function allowance(_x2, _x3) {
        return _allowance.apply(this, arguments);
      }
      return allowance;
    }()
  }, {
    key: "approve",
    value: function() {
      var _approve = _asyncToGenerator(_regenerator().m(function _callee3(spender, value) {
        return _regenerator().w(function(_context3) {
          while (1) switch (_context3.n) {
            case 0:
              _context3.n = 1;
              return this.ercClient.approve({
                spender,
                value
              });
            case 1:
              return _context3.a(2, _context3.v);
          }
        }, _callee3, this);
      }));
      function approve(_x4, _x5) {
        return _approve.apply(this, arguments);
      }
      return approve;
    }()
  }, {
    key: "approveEncode",
    value: function approveEncode(spender, value) {
      return this.ercClient.approveEncode({
        spender,
        value
      });
    }
    // The method only will work in test environment
  }, {
    key: "mint",
    value: function() {
      var _mint = _asyncToGenerator(_regenerator().m(function _callee4(to, amount) {
        return _regenerator().w(function(_context4) {
          while (1) switch (_context4.n) {
            case 0:
              _context4.n = 1;
              return this.ercClient.mint({
                to,
                amount
              });
            case 1:
              return _context4.a(2, _context4.v);
          }
        }, _callee4, this);
      }));
      function mint(_x6, _x7) {
        return _mint.apply(this, arguments);
      }
      return mint;
    }()
  }]);
}();
var WipTokenClient = function() {
  function WipTokenClient2(rpcClient, wallet) {
    _classCallCheck(this, WipTokenClient2);
    this.wipClient = new WrappedIpClient(rpcClient, wallet);
  }
  return _createClass(WipTokenClient2, [{
    key: "balanceOf",
    value: function() {
      var _balanceOf2 = _asyncToGenerator(_regenerator().m(function _callee5(account) {
        var _yield$this$wipClient, balance;
        return _regenerator().w(function(_context5) {
          while (1) switch (_context5.n) {
            case 0:
              _context5.n = 1;
              return this.wipClient.balanceOf({
                owner: account
              });
            case 1:
              _yield$this$wipClient = _context5.v;
              balance = _yield$this$wipClient.result;
              return _context5.a(2, balance);
          }
        }, _callee5, this);
      }));
      function balanceOf(_x8) {
        return _balanceOf2.apply(this, arguments);
      }
      return balanceOf;
    }()
  }, {
    key: "allowance",
    value: function() {
      var _allowance2 = _asyncToGenerator(_regenerator().m(function _callee6(owner, spender) {
        var _yield$this$wipClient2, allowance2;
        return _regenerator().w(function(_context6) {
          while (1) switch (_context6.n) {
            case 0:
              _context6.n = 1;
              return this.wipClient.allowance({
                owner,
                spender
              });
            case 1:
              _yield$this$wipClient2 = _context6.v;
              allowance2 = _yield$this$wipClient2.result;
              return _context6.a(2, allowance2);
          }
        }, _callee6, this);
      }));
      function allowance(_x9, _x0) {
        return _allowance2.apply(this, arguments);
      }
      return allowance;
    }()
  }, {
    key: "approve",
    value: function() {
      var _approve2 = _asyncToGenerator(_regenerator().m(function _callee7(spender, value) {
        return _regenerator().w(function(_context7) {
          while (1) switch (_context7.n) {
            case 0:
              _context7.n = 1;
              return this.wipClient.approve({
                spender,
                amount: value
              });
            case 1:
              return _context7.a(2, _context7.v);
          }
        }, _callee7, this);
      }));
      function approve(_x1, _x10) {
        return _approve2.apply(this, arguments);
      }
      return approve;
    }()
  }, {
    key: "approveEncode",
    value: function approveEncode(spender, value) {
      return this.wipClient.approveEncode({
        spender,
        amount: value
      });
    }
  }, {
    key: "depositEncode",
    value: function depositEncode() {
      return this.wipClient.depositEncode();
    }
  }, {
    key: "address",
    get: function get() {
      return this.wipClient.address;
    }
  }]);
}();
var waitForTxReceipt = function() {
  var _ref2 = _asyncToGenerator(_regenerator().m(function _callee(_ref) {
    var txOptions, rpcClient, txHash, receipt;
    return _regenerator().w(function(_context) {
      while (1) switch (_context.n) {
        case 0:
          txOptions = _ref.txOptions, rpcClient = _ref.rpcClient, txHash = _ref.txHash;
          _context.n = 1;
          return rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, txOptions), {}, {
            hash: txHash
          }));
        case 1:
          receipt = _context.v;
          return _context.a(2, {
            txHash,
            receipt
          });
      }
    }, _callee);
  }));
  return function waitForTxReceipt2(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var waitForTxReceipts = function() {
  var _ref4 = _asyncToGenerator(_regenerator().m(function _callee2(_ref3) {
    var txOptions, rpcClient, txHashes, receipts;
    return _regenerator().w(function(_context2) {
      while (1) switch (_context2.n) {
        case 0:
          txOptions = _ref3.txOptions, rpcClient = _ref3.rpcClient, txHashes = _ref3.txHashes;
          _context2.n = 1;
          return Promise.all(txHashes.map(function(hash) {
            return rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, txOptions), {}, {
              hash
            }));
          }));
        case 1:
          receipts = _context2.v;
          return _context2.a(2, receipts.map(function(receipt) {
            return {
              txHash: receipt.transactionHash,
              receipt
            };
          }));
      }
    }, _callee2);
  }));
  return function waitForTxReceipts2(_x2) {
    return _ref4.apply(this, arguments);
  };
}();
var chainStringToViemChain = function chainStringToViemChain2(chainId) {
  switch (chainId) {
    case 1315:
    case "aeneid":
      return aeneid;
    case 1514:
    case "mainnet":
      return mainnet;
    default:
      throw new Error("ChainId ".concat(String(chainId), " not supported"));
  }
};
var chain2 = {
  aeneid: 1315,
  1315: 1315,
  mainnet: 1514,
  1514: 1514
};
var validateAddress = function validateAddress2(address) {
  if (!isAddress(address, {
    strict: false
  })) {
    throw Error("Invalid address: ".concat(address, "."));
  }
  return address;
};
var validateAddresses = function validateAddresses2(addresses) {
  return addresses.map(function(address) {
    return validateAddress(address);
  });
};
var getTokenAmountDisplay = function getTokenAmountDisplay2(amount) {
  var unit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "IP";
  return "".concat(formatEther(amount)).concat(unit);
};
var approvalAllSpenders = function() {
  var _ref2 = _asyncToGenerator(_regenerator().m(function _callee2(_ref) {
    var spenders, client, owner, useMultiCall, rpcClient, multicallAddress, approvals, allCalls, _iterator, _step, approval, hash, _t;
    return _regenerator().w(function(_context2) {
      while (1) switch (_context2.n) {
        case 0:
          spenders = _ref.spenders, client = _ref.client, owner = _ref.owner, useMultiCall = _ref.useMultiCall, rpcClient = _ref.rpcClient, multicallAddress = _ref.multicallAddress;
          _context2.n = 1;
          return Promise.all(spenders.map(function() {
            var _ref3 = _asyncToGenerator(_regenerator().m(function _callee(spender) {
              var spenderAmount, allowance;
              return _regenerator().w(function(_context) {
                while (1) switch (_context.n) {
                  case 0:
                    if (!(spender.address === multicallAddress)) {
                      _context.n = 1;
                      break;
                    }
                    return _context.a(2);
                  case 1:
                    spenderAmount = spender.amount || maxUint256;
                    _context.n = 2;
                    return client.allowance(owner, spender.address);
                  case 2:
                    allowance = _context.v;
                    if (!(allowance < spenderAmount)) {
                      _context.n = 3;
                      break;
                    }
                    return _context.a(2, {
                      spender: spender.address,
                      value: maxUint256
                      // approve max amount to avoid approvals in the future
                    });
                  case 3:
                    return _context.a(2);
                }
              }, _callee);
            }));
            return function(_x2) {
              return _ref3.apply(this, arguments);
            };
          }()));
        case 1:
          approvals = _context2.v;
          if (!useMultiCall) {
            _context2.n = 2;
            break;
          }
          allCalls = [];
          approvals.forEach(function(approval2) {
            if (!approval2) {
              return;
            }
            var encodedData = client.approveEncode(approval2.spender, approval2.value);
            allCalls.push({
              target: encodedData.to,
              allowFailure: false,
              value: 0n,
              callData: encodedData.data
            });
          });
          return _context2.a(2, allCalls);
        case 2:
          _iterator = _createForOfIteratorHelper(approvals);
          _context2.p = 3;
          _iterator.s();
        case 4:
          if ((_step = _iterator.n()).done) {
            _context2.n = 8;
            break;
          }
          approval = _step.value;
          if (approval) {
            _context2.n = 5;
            break;
          }
          return _context2.a(3, 7);
        case 5:
          _context2.n = 6;
          return client.approve(approval.spender, approval.value);
        case 6:
          hash = _context2.v;
          _context2.n = 7;
          return rpcClient.waitForTransactionReceipt({
            hash
          });
        case 7:
          _context2.n = 4;
          break;
        case 8:
          _context2.n = 10;
          break;
        case 9:
          _context2.p = 9;
          _t = _context2.v;
          _iterator.e(_t);
        case 10:
          _context2.p = 10;
          _iterator.f();
          return _context2.f(10);
        case 11:
          return _context2.a(2, []);
      }
    }, _callee2, null, [[3, 9, 10, 11]]);
  }));
  return function approvalAllSpenders2(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var multiCallWrapIp = function() {
  var _ref5 = _asyncToGenerator(_regenerator().m(function _callee3(_ref4) {
    var ipAmountToWrap, wipClient, multicall3Address2, wipSpenders, calls, rpcClient, wallet, contractCall, wipOptions, multiCalls, useMultiCall, deposit, autoApprove, approvalCalls, txHash;
    return _regenerator().w(function(_context3) {
      while (1) switch (_context3.n) {
        case 0:
          ipAmountToWrap = _ref4.ipAmountToWrap, wipClient = _ref4.wipClient, multicall3Address2 = _ref4.multicall3Address, wipSpenders = _ref4.wipSpenders, calls = _ref4.calls, rpcClient = _ref4.rpcClient, wallet = _ref4.wallet, contractCall = _ref4.contractCall, wipOptions = _ref4.wipOptions;
          if (!(ipAmountToWrap === 0n)) {
            _context3.n = 1;
            break;
          }
          throw new Error("ipAmountToWrap should be greater than 0");
        case 1:
          multiCalls = [];
          useMultiCall = (wipOptions === null || wipOptions === void 0 ? void 0 : wipOptions.useMulticallWhenPossible) !== false;
          if (!useMultiCall) {
            _context3.n = 2;
            break;
          }
          deposit = wipClient.depositEncode();
          multiCalls.push({
            target: deposit.to,
            allowFailure: false,
            value: ipAmountToWrap,
            callData: deposit.data
          });
          _context3.n = 3;
          break;
        case 2:
          _context3.n = 3;
          return simulateAndWriteContract({
            rpcClient,
            wallet,
            data: {
              abi: wrappedIpAbi,
              address: wipClient.address,
              functionName: "deposit",
              value: ipAmountToWrap
            }
          });
        case 3:
          autoApprove = (wipOptions === null || wipOptions === void 0 ? void 0 : wipOptions.enableAutoApprove) !== false;
          if (!autoApprove) {
            _context3.n = 5;
            break;
          }
          _context3.n = 4;
          return approvalAllSpenders({
            spenders: wipSpenders,
            client: wipClient,
            multicallAddress: multicall3Address2,
            owner: useMultiCall ? multicall3Address2 : wallet.account.address,
            rpcClient,
            useMultiCall
          });
        case 4:
          approvalCalls = _context3.v;
          if (approvalCalls.length > 0 && useMultiCall) {
            multiCalls.push.apply(multiCalls, _toConsumableArray(approvalCalls));
          }
        case 5:
          multiCalls.push.apply(multiCalls, _toConsumableArray(calls));
          if (useMultiCall) {
            _context3.n = 7;
            break;
          }
          _context3.n = 6;
          return contractCall();
        case 6:
          txHash = _context3.v;
          return _context3.a(2, {
            txHash
          });
        case 7:
          return _context3.a(2, simulateAndWriteContract({
            rpcClient,
            wallet,
            data: {
              abi: multicall3Abi,
              address: multicall3Address2,
              functionName: "aggregate3Value",
              args: [multiCalls],
              value: ipAmountToWrap
            }
          }));
      }
    }, _callee3);
  }));
  return function multiCallWrapIp2(_x3) {
    return _ref5.apply(this, arguments);
  };
}();
var contractCallWithFees = function() {
  var _ref7 = _asyncToGenerator(_regenerator().m(function _callee4(_ref6) {
    var _options$wipOptions;
    var totalFees, options, multicall3Address2, wallet, tokenSpenders, contractCall, sender, txOptions, encodedTxs, rpcClient, token, wipTokenClient, isWip, selectedOptions, tokenClient, _txHash, balance, autoApprove, _txHash2, autoWrapIp, startingBalance, calls, _yield$multiCallWrapI, txHash;
    return _regenerator().w(function(_context4) {
      while (1) switch (_context4.n) {
        case 0:
          totalFees = _ref6.totalFees, options = _ref6.options, multicall3Address2 = _ref6.multicall3Address, wallet = _ref6.wallet, tokenSpenders = _ref6.tokenSpenders, contractCall = _ref6.contractCall, sender = _ref6.sender, txOptions = _ref6.txOptions, encodedTxs = _ref6.encodedTxs, rpcClient = _ref6.rpcClient, token = _ref6.token;
          wipTokenClient = new WipTokenClient(rpcClient, wallet);
          isWip = token === wipTokenClient.address || token === void 0;
          selectedOptions = isWip ? options === null || options === void 0 ? void 0 : options.wipOptions : options.erc20Options;
          tokenClient = isWip ? wipTokenClient : new ERC20Client(rpcClient, wallet, token);
          if (!(totalFees === 0n)) {
            _context4.n = 2;
            break;
          }
          _context4.n = 1;
          return contractCall();
        case 1:
          _txHash = _context4.v;
          return _context4.a(2, handleTransactionResponse(_txHash, rpcClient, txOptions));
        case 2:
          _context4.n = 3;
          return tokenClient.balanceOf(sender);
        case 3:
          balance = _context4.v;
          autoApprove = (selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions.enableAutoApprove) !== false;
          if (!(balance >= totalFees)) {
            _context4.n = 6;
            break;
          }
          if (!autoApprove) {
            _context4.n = 4;
            break;
          }
          _context4.n = 4;
          return approvalAllSpenders({
            spenders: tokenSpenders,
            client: tokenClient,
            owner: sender,
            // sender owns the wip
            multicallAddress: multicall3Address2,
            rpcClient,
            // since sender has all token, if using multicall, we cannot approve transfer token into multicall by multicall.
            //  So in this case, we don't use multicall here and instead just wait for each approval to be finished.
            useMultiCall: false
          });
        case 4:
          _context4.n = 5;
          return contractCall();
        case 5:
          _txHash2 = _context4.v;
          return _context4.a(2, handleTransactionResponse(_txHash2, rpcClient, txOptions));
        case 6:
          if (isWip) {
            _context4.n = 7;
            break;
          }
          throw new Error("Wallet does not have enough erc20 token to pay for fees. Total fees:  ".concat(getTokenAmountDisplay(totalFees), ", balance: ").concat(getTokenAmountDisplay(balance), "."));
        case 7:
          autoWrapIp = (options === null || options === void 0 || (_options$wipOptions = options.wipOptions) === null || _options$wipOptions === void 0 ? void 0 : _options$wipOptions.enableAutoWrapIp) !== false;
          _context4.n = 8;
          return rpcClient.getBalance({
            address: sender
          });
        case 8:
          startingBalance = _context4.v;
          if (!(startingBalance < totalFees)) {
            _context4.n = 9;
            break;
          }
          throw new Error("Wallet does not have enough IP to wrap to WIP and pay for fees. Total fees: ".concat(getTokenAmountDisplay(totalFees), ", balance: ").concat(getTokenAmountDisplay(startingBalance), "."));
        case 9:
          if (autoWrapIp) {
            _context4.n = 10;
            break;
          }
          throw new Error("Wallet does not have enough WIP to pay for fees. Total fees: ".concat(getTokenAmountDisplay(totalFees), ", balance: ").concat(getTokenAmountDisplay(balance, "WIP"), "."));
        case 10:
          calls = encodedTxs === null || encodedTxs === void 0 ? void 0 : encodedTxs.map(function(data) {
            return {
              target: data.to,
              allowFailure: false,
              value: 0n,
              callData: data.data
            };
          });
          _context4.n = 11;
          return multiCallWrapIp({
            ipAmountToWrap: totalFees,
            multicall3Address: multicall3Address2,
            wipClient: wipTokenClient,
            wipOptions: options === null || options === void 0 ? void 0 : options.wipOptions,
            contractCall,
            wipSpenders: tokenSpenders,
            rpcClient,
            wallet,
            calls
          });
        case 11:
          _yield$multiCallWrapI = _context4.v;
          txHash = _yield$multiCallWrapI.txHash;
          return _context4.a(2, handleTransactionResponse(txHash, rpcClient, txOptions));
      }
    }, _callee4);
  }));
  return function contractCallWithFees2(_x4) {
    return _ref7.apply(this, arguments);
  };
}();
var handleTransactionResponse = function() {
  var _ref8 = _asyncToGenerator(_regenerator().m(function _callee5(txHash, rpcClient, txOptions) {
    return _regenerator().w(function(_context5) {
      while (1) switch (_context5.n) {
        case 0:
          if (!Array.isArray(txHash)) {
            _context5.n = 1;
            break;
          }
          return _context5.a(2, waitForTxReceipts({
            rpcClient,
            txOptions,
            txHashes: txHash
          }));
        case 1:
          return _context5.a(2, waitForTxReceipt({
            rpcClient,
            txOptions,
            txHash
          }));
      }
    }, _callee5);
  }));
  return function handleTransactionResponse2(_x5, _x6, _x7) {
    return _ref8.apply(this, arguments);
  };
}();
var v0Prefix = "1220";
var convertCIDtoHashIPFS = function convertCIDtoHashIPFS2(cid) {
  var isV0 = cid.startsWith("Qm");
  var parsedCID = CID.parse(cid);
  var base58CID = isV0 ? parsedCID.toString() : parsedCID.toV0().toString();
  var bytes = esm_default.decode(base58CID);
  var base16CID = Array.from(bytes).map(function(_byte) {
    return _byte.toString(16).padStart(2, "0");
  }).join("");
  return "0x" + base16CID.slice(v0Prefix.length);
};
var convertHashIPFStoCID = function convertHashIPFStoCID2(hash) {
  var version = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "v0";
  var base16CID = v0Prefix + hash.slice(2);
  var bytes = new Uint8Array(base16CID.match(/.{1,2}/g).map(function(_byte2) {
    return parseInt(_byte2, 16);
  }));
  var base58CID = esm_default.encode(Buffer.from(bytes));
  if (version === "v0") {
    return base58CID;
  } else {
    return CID.parse(base58CID, base58btc).toV1().toString();
  }
};
var ASSERTION_ABI = [{
  inputs: [{
    internalType: "bytes32",
    name: "assertionId",
    type: "bytes32"
  }],
  name: "getAssertion",
  outputs: [{
    components: [{
      components: [{
        internalType: "bool",
        name: "arbitrateViaEscalationManager",
        type: "bool"
      }, {
        internalType: "bool",
        name: "discardOracle",
        type: "bool"
      }, {
        internalType: "bool",
        name: "validateDisputers",
        type: "bool"
      }, {
        internalType: "address",
        name: "assertingCaller",
        type: "address"
      }, {
        internalType: "address",
        name: "escalationManager",
        type: "address"
      }],
      internalType: "struct OptimisticOracleV3Interface.EscalationManagerSettings",
      name: "escalationManagerSettings",
      type: "tuple"
    }, {
      internalType: "address",
      name: "asserter",
      type: "address"
    }, {
      internalType: "uint64",
      name: "assertionTime",
      type: "uint64"
    }, {
      internalType: "bool",
      name: "settled",
      type: "bool"
    }, {
      internalType: "contract IERC20",
      name: "currency",
      type: "address"
    }, {
      internalType: "uint64",
      name: "expirationTime",
      type: "uint64"
    }, {
      internalType: "bool",
      name: "settlementResolution",
      type: "bool"
    }, {
      internalType: "bytes32",
      name: "domainId",
      type: "bytes32"
    }, {
      internalType: "bytes32",
      name: "identifier",
      type: "bytes32"
    }, {
      internalType: "uint256",
      name: "bond",
      type: "uint256"
    }, {
      internalType: "address",
      name: "callbackRecipient",
      type: "address"
    }, {
      internalType: "address",
      name: "disputer",
      type: "address"
    }],
    internalType: "struct OptimisticOracleV3Interface.Assertion",
    name: "",
    type: "tuple"
  }],
  stateMutability: "view",
  type: "function"
}, {
  inputs: [{
    internalType: "bytes32",
    name: "assertionId",
    type: "bytes32"
  }],
  name: "settleAssertion",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "currency",
    type: "address"
  }],
  name: "getMinimumBond",
  outputs: [{
    internalType: "uint256",
    name: "",
    type: "uint256"
  }],
  stateMutability: "view",
  type: "function"
}];
var getOov3Contract = function() {
  var _ref = _asyncToGenerator(_regenerator().m(function _callee(arbitrationPolicyUmaClient) {
    return _regenerator().w(function(_context) {
      while (1) switch (_context.n) {
        case 0:
          _context.n = 1;
          return arbitrationPolicyUmaClient.oov3();
        case 1:
          return _context.a(2, _context.v);
      }
    }, _callee);
  }));
  return function getOov3Contract2(_x) {
    return _ref.apply(this, arguments);
  };
}();
var getAssertionDetails = function() {
  var _ref2 = _asyncToGenerator(_regenerator().m(function _callee2(rpcClient, arbitrationPolicyUmaClient, assertionId) {
    var oov3Contract, _yield$rpcClient$read, bond;
    return _regenerator().w(function(_context2) {
      while (1) switch (_context2.n) {
        case 0:
          _context2.n = 1;
          return getOov3Contract(arbitrationPolicyUmaClient);
        case 1:
          oov3Contract = _context2.v;
          _context2.n = 2;
          return rpcClient.readContract({
            address: oov3Contract,
            abi: ASSERTION_ABI,
            functionName: "getAssertion",
            args: [assertionId]
          });
        case 2:
          _yield$rpcClient$read = _context2.v;
          bond = _yield$rpcClient$read.bond;
          return _context2.a(2, bond);
      }
    }, _callee2);
  }));
  return function getAssertionDetails2(_x2, _x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
var getMinimumBond = function() {
  var _ref3 = _asyncToGenerator(_regenerator().m(function _callee3(rpcClient, arbitrationPolicyUmaClient, currency) {
    var oov3Contract;
    return _regenerator().w(function(_context3) {
      while (1) switch (_context3.n) {
        case 0:
          _context3.n = 1;
          return getOov3Contract(arbitrationPolicyUmaClient);
        case 1:
          oov3Contract = _context3.v;
          _context3.n = 2;
          return rpcClient.readContract({
            address: oov3Contract,
            abi: ASSERTION_ABI,
            functionName: "getMinimumBond",
            args: [currency]
          });
        case 2:
          return _context3.a(2, _context3.v);
      }
    }, _callee3);
  }));
  return function getMinimumBond2(_x5, _x6, _x7) {
    return _ref3.apply(this, arguments);
  };
}();
var settleAssertion = function() {
  var _ref4 = _asyncToGenerator(_regenerator().m(function _callee4(privateKey, disputeId, transport) {
    var baseConfig, rpcClient, walletClient, arbitrationPolicyUmaClient, oov3Contract, assertionId, txHash, _t;
    return _regenerator().w(function(_context4) {
      while (1) switch (_context4.n) {
        case 0:
          _context4.p = 0;
          baseConfig = {
            chain: chainStringToViemChain("aeneid"),
            transport: http(transport !== null && transport !== void 0 ? transport : aeneid.rpcUrls["default"].http[0])
          };
          rpcClient = createPublicClient(baseConfig);
          walletClient = createWalletClient(_objectSpread2(_objectSpread2({}, baseConfig), {}, {
            account: privateKeyToAccount(privateKey)
          }));
          arbitrationPolicyUmaClient = new ArbitrationPolicyUmaClient(rpcClient, walletClient);
          _context4.n = 1;
          return getOov3Contract(arbitrationPolicyUmaClient);
        case 1:
          oov3Contract = _context4.v;
          _context4.n = 2;
          return arbitrationPolicyUmaClient.disputeIdToAssertionId({
            disputeId: BigInt(disputeId)
          });
        case 2:
          assertionId = _context4.v;
          _context4.n = 3;
          return walletClient.writeContract({
            address: oov3Contract,
            abi: ASSERTION_ABI,
            functionName: "settleAssertion",
            args: [assertionId]
          });
        case 3:
          txHash = _context4.v;
          _context4.n = 4;
          return rpcClient.waitForTransactionReceipt({
            hash: txHash
          });
        case 4:
          return _context4.a(2, txHash);
        case 5:
          _context4.p = 5;
          _t = _context4.v;
          return _context4.a(2, handleError(_t, "Failed to settle assertion"));
      }
    }, _callee4, null, [[0, 5]]);
  }));
  return function settleAssertion2(_x8, _x9, _x0) {
    return _ref4.apply(this, arguments);
  };
}();
var DisputeClient = function() {
  function DisputeClient2(rpcClient, wallet, chainId) {
    _classCallCheck(this, DisputeClient2);
    this.rpcClient = rpcClient;
    this.disputeModuleClient = new DisputeModuleClient(rpcClient, wallet);
    this.arbitrationPolicyUmaClient = new ArbitrationPolicyUmaClient(rpcClient, wallet);
    this.multicall3Client = new Multicall3Client(rpcClient, wallet);
    this.wrappedIpClient = new WrappedIpClient(rpcClient, wallet);
    this.chainId = chainId;
    this.wallet = wallet;
  }
  return _createClass(DisputeClient2, [{
    key: "raiseDispute",
    value: function() {
      var _raiseDispute = _asyncToGenerator(_regenerator().m(function _callee(request) {
        var _this = this;
        var _request$txOptions, liveness, _yield$Promise$all, _yield$Promise$all2, minLiveness, maxLiveness, _yield$Promise$all3, _yield$Promise$all4, minimumBond, maximumBond, bonds, tag, data, _yield$this$disputeMo, isWhiteList, req, encodedTxData, contractCall, _yield$contractCallWi, txHash, receipt, targetLogs, _t;
        return _regenerator().w(function(_context) {
          while (1) switch (_context.n) {
            case 0:
              _context.p = 0;
              liveness = BigInt(request.liveness);
              _context.n = 1;
              return Promise.all([this.arbitrationPolicyUmaClient.minLiveness(), this.arbitrationPolicyUmaClient.maxLiveness()]);
            case 1:
              _yield$Promise$all = _context.v;
              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);
              minLiveness = _yield$Promise$all2[0];
              maxLiveness = _yield$Promise$all2[1];
              if (!(liveness < minLiveness || liveness > maxLiveness)) {
                _context.n = 2;
                break;
              }
              throw new Error("Liveness must be between ".concat(minLiveness, " and ").concat(maxLiveness, "."));
            case 2:
              _context.n = 3;
              return Promise.all([getMinimumBond(this.rpcClient, this.arbitrationPolicyUmaClient, WIP_TOKEN_ADDRESS), this.arbitrationPolicyUmaClient.maxBonds({
                token: WIP_TOKEN_ADDRESS
              })]);
            case 3:
              _yield$Promise$all3 = _context.v;
              _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 2);
              minimumBond = _yield$Promise$all4[0];
              maximumBond = _yield$Promise$all4[1];
              bonds = BigInt(request.bond || minimumBond);
              if (!(bonds > maximumBond || bonds < minimumBond)) {
                _context.n = 4;
                break;
              }
              throw new Error("Bonds must be between ".concat(minimumBond, " and ").concat(maximumBond, "."));
            case 4:
              tag = stringToHex(request.targetTag, {
                size: 32
              });
              data = encodeAbiParameters([{
                name: "",
                type: "uint64"
              }, {
                name: "",
                type: "address"
              }, {
                name: "",
                type: "uint256"
              }], [liveness, WIP_TOKEN_ADDRESS, bonds]);
              _context.n = 5;
              return this.disputeModuleClient.isWhitelistedDisputeTag({
                tag
              });
            case 5:
              _yield$this$disputeMo = _context.v;
              isWhiteList = _yield$this$disputeMo.allowed;
              if (isWhiteList) {
                _context.n = 6;
                break;
              }
              throw new Error("The target tag ".concat(request.targetTag, " is not whitelisted."));
            case 6:
              req = {
                targetIpId: validateAddress(request.targetIpId),
                targetTag: tag,
                disputeEvidenceHash: convertCIDtoHashIPFS(request.cid),
                data
              };
              encodedTxData = this.disputeModuleClient.raiseDisputeEncode(req);
              if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.encodedTxDataOnly)) {
                _context.n = 7;
                break;
              }
              return _context.a(2, {
                encodedTxData
              });
            case 7:
              contractCall = function contractCall2() {
                return _this.disputeModuleClient.raiseDispute(req);
              };
              _context.n = 8;
              return contractCallWithFees({
                totalFees: bonds,
                options: {
                  wipOptions: _objectSpread2(_objectSpread2({}, request.wipOptions), {}, {
                    // Disable multicall because multicall makes more complex due to disputeInitiator in this version.
                    useMulticallWhenPossible: false
                  })
                },
                multicall3Address: this.multicall3Client.address,
                rpcClient: this.rpcClient,
                tokenSpenders: [{
                  address: this.arbitrationPolicyUmaClient.address,
                  amount: bonds
                }],
                contractCall,
                encodedTxs: [encodedTxData],
                wallet: this.wallet,
                txOptions: request.txOptions,
                sender: this.wallet.account.address
              });
            case 8:
              _yield$contractCallWi = _context.v;
              txHash = _yield$contractCallWi.txHash;
              receipt = _yield$contractCallWi.receipt;
              if (receipt) {
                _context.n = 9;
                break;
              }
              return _context.a(2, {
                txHash
              });
            case 9:
              targetLogs = this.disputeModuleClient.parseTxDisputeRaisedEvent(receipt);
              return _context.a(2, {
                txHash,
                disputeId: targetLogs[0].disputeId
              });
            case 10:
              _context.n = 12;
              break;
            case 11:
              _context.p = 11;
              _t = _context.v;
              return _context.a(2, handleError(_t, "Failed to raise dispute"));
            case 12:
              return _context.a(2);
          }
        }, _callee, this, [[0, 11]]);
      }));
      function raiseDispute(_x) {
        return _raiseDispute.apply(this, arguments);
      }
      return raiseDispute;
    }()
  }, {
    key: "cancelDispute",
    value: function() {
      var _cancelDispute = _asyncToGenerator(_regenerator().m(function _callee2(request) {
        var _request$txOptions2, _req, txHash, _t2;
        return _regenerator().w(function(_context2) {
          while (1) switch (_context2.n) {
            case 0:
              _context2.p = 0;
              _req = {
                disputeId: BigInt(request.disputeId),
                data: request.data ? request.data : "0x"
              };
              if (!((_request$txOptions2 = request.txOptions) !== null && _request$txOptions2 !== void 0 && _request$txOptions2.encodedTxDataOnly)) {
                _context2.n = 1;
                break;
              }
              return _context2.a(2, {
                encodedTxData: this.disputeModuleClient.cancelDisputeEncode(_req)
              });
            case 1:
              _context2.n = 2;
              return this.disputeModuleClient.cancelDispute(_req);
            case 2:
              txHash = _context2.v;
              _context2.n = 3;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 3:
              return _context2.a(2, {
                txHash
              });
            case 4:
              _context2.n = 6;
              break;
            case 5:
              _context2.p = 5;
              _t2 = _context2.v;
              return _context2.a(2, handleError(_t2, "Failed to cancel dispute"));
            case 6:
              return _context2.a(2);
          }
        }, _callee2, this, [[0, 5]]);
      }));
      function cancelDispute(_x2) {
        return _cancelDispute.apply(this, arguments);
      }
      return cancelDispute;
    }()
  }, {
    key: "resolveDispute",
    value: function() {
      var _resolveDispute = _asyncToGenerator(_regenerator().m(function _callee3(request) {
        var _request$data, _request$txOptions3, _req2, txHash, _t3;
        return _regenerator().w(function(_context3) {
          while (1) switch (_context3.n) {
            case 0:
              _context3.p = 0;
              _req2 = {
                disputeId: BigInt(request.disputeId),
                data: (_request$data = request.data) !== null && _request$data !== void 0 ? _request$data : "0x"
              };
              if (!((_request$txOptions3 = request.txOptions) !== null && _request$txOptions3 !== void 0 && _request$txOptions3.encodedTxDataOnly)) {
                _context3.n = 1;
                break;
              }
              return _context3.a(2, {
                encodedTxData: this.disputeModuleClient.resolveDisputeEncode(_req2)
              });
            case 1:
              _context3.n = 2;
              return this.disputeModuleClient.resolveDispute(_req2);
            case 2:
              txHash = _context3.v;
              _context3.n = 3;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 3:
              return _context3.a(2, {
                txHash
              });
            case 4:
              _context3.n = 6;
              break;
            case 5:
              _context3.p = 5;
              _t3 = _context3.v;
              return _context3.a(2, handleError(_t3, "Failed to resolve dispute"));
            case 6:
              return _context3.a(2);
          }
        }, _callee3, this, [[0, 5]]);
      }));
      function resolveDispute(_x3) {
        return _resolveDispute.apply(this, arguments);
      }
      return resolveDispute;
    }()
  }, {
    key: "tagIfRelatedIpInfringed",
    value: function() {
      var _tagIfRelatedIpInfringed = _asyncToGenerator(_regenerator().m(function _callee4(request) {
        var _this2 = this;
        var _request$options, objects, txHashes, calls, txHash, _iterator, _step, object, _txHash, _t4, _t5;
        return _regenerator().w(function(_context4) {
          while (1) switch (_context4.n) {
            case 0:
              _context4.p = 0;
              objects = request.infringementTags.map(function(arg) {
                return {
                  ipIdToTag: validateAddress(arg.ipId),
                  infringerDisputeId: BigInt(arg.disputeId)
                };
              });
              txHashes = [];
              if (!(((_request$options = request.options) === null || _request$options === void 0 ? void 0 : _request$options.useMulticallWhenPossible) !== false && request.infringementTags.length > 1)) {
                _context4.n = 2;
                break;
              }
              calls = objects.map(function(object2) {
                return {
                  target: _this2.disputeModuleClient.address,
                  allowFailure: false,
                  callData: _this2.disputeModuleClient.tagIfRelatedIpInfringedEncode(object2).data
                };
              });
              _context4.n = 1;
              return this.multicall3Client.aggregate3({
                calls
              });
            case 1:
              txHash = _context4.v;
              txHashes.push(txHash);
              _context4.n = 10;
              break;
            case 2:
              _iterator = _createForOfIteratorHelper(objects);
              _context4.p = 3;
              _iterator.s();
            case 4:
              if ((_step = _iterator.n()).done) {
                _context4.n = 7;
                break;
              }
              object = _step.value;
              _context4.n = 5;
              return this.disputeModuleClient.tagIfRelatedIpInfringed(object);
            case 5:
              _txHash = _context4.v;
              txHashes.push(_txHash);
            case 6:
              _context4.n = 4;
              break;
            case 7:
              _context4.n = 9;
              break;
            case 8:
              _context4.p = 8;
              _t4 = _context4.v;
              _iterator.e(_t4);
            case 9:
              _context4.p = 9;
              _iterator.f();
              return _context4.f(9);
            case 10:
              _context4.n = 11;
              return Promise.all(txHashes.map(function(txHash2) {
                return waitForTxReceipt({
                  txHash: txHash2,
                  txOptions: request.txOptions,
                  rpcClient: _this2.rpcClient
                });
              }));
            case 11:
              return _context4.a(2, _context4.v);
            case 12:
              _context4.p = 12;
              _t5 = _context4.v;
              return _context4.a(2, handleError(_t5, "Failed to tag related ip infringed"));
          }
        }, _callee4, this, [[3, 8, 9, 10], [0, 12]]);
      }));
      function tagIfRelatedIpInfringed(_x4) {
        return _tagIfRelatedIpInfringed.apply(this, arguments);
      }
      return tagIfRelatedIpInfringed;
    }()
  }, {
    key: "disputeAssertion",
    value: function() {
      var _disputeAssertion = _asyncToGenerator(_regenerator().m(function _callee5(request) {
        var _this3 = this;
        var ipAccount, bond, counterEvidenceHash, encodedData, _yield$this$wrappedIp, allowance, _txHash2, contractCall, _yield$contractCallWi2, txHash, receipt, _t6;
        return _regenerator().w(function(_context5) {
          while (1) switch (_context5.n) {
            case 0:
              _context5.p = 0;
              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, validateAddress(request.ipId));
              _context5.n = 1;
              return getAssertionDetails(this.rpcClient, this.arbitrationPolicyUmaClient, request.assertionId);
            case 1:
              bond = _context5.v;
              counterEvidenceHash = convertCIDtoHashIPFS(request.counterEvidenceCID);
              encodedData = this.arbitrationPolicyUmaClient.disputeAssertionEncode({
                assertionId: request.assertionId,
                counterEvidenceHash
              });
              _context5.n = 2;
              return this.wrappedIpClient.allowance({
                owner: this.wallet.account.address,
                spender: ipAccount.address
              });
            case 2:
              _yield$this$wrappedIp = _context5.v;
              allowance = _yield$this$wrappedIp.result;
              if (!(allowance < bond)) {
                _context5.n = 4;
                break;
              }
              _context5.n = 3;
              return this.wrappedIpClient.approve({
                spender: ipAccount.address,
                amount: maxUint256
              });
            case 3:
              _txHash2 = _context5.v;
              _context5.n = 4;
              return this.rpcClient.waitForTransactionReceipt({
                hash: _txHash2
              });
            case 4:
              contractCall = function contractCall2() {
                var calls = [];
                if (bond > 0) {
                  calls.push({
                    target: _this3.wrappedIpClient.address,
                    value: 0n,
                    data: _this3.wrappedIpClient.transferFromEncode({
                      from: _this3.wallet.account.address,
                      to: ipAccount.address,
                      amount: bond
                    }).data
                  });
                  calls.push({
                    target: _this3.wrappedIpClient.address,
                    value: 0n,
                    data: _this3.wrappedIpClient.approveEncode({
                      spender: _this3.arbitrationPolicyUmaClient.address,
                      amount: maxUint256
                    }).data
                  });
                }
                return ipAccount.executeBatch({
                  calls: [].concat(calls, [{
                    target: encodedData.to,
                    value: 0n,
                    data: encodedData.data
                  }]),
                  operation: 0
                });
              };
              _context5.n = 5;
              return contractCallWithFees({
                totalFees: bond,
                options: {
                  wipOptions: _objectSpread2(_objectSpread2({}, request.wipOptions), {}, {
                    // Disable auto approve because msg.sender is ipAccount instead of wallet.
                    enableAutoApprove: false,
                    // Disable multicall because multicall makes more complex due to disputeInitiator in this version.
                    useMulticallWhenPossible: false
                  })
                },
                multicall3Address: this.multicall3Client.address,
                rpcClient: this.rpcClient,
                contractCall,
                tokenSpenders: [{
                  address: this.arbitrationPolicyUmaClient.address,
                  amount: bond
                }],
                encodedTxs: [encodedData],
                wallet: this.wallet,
                sender: this.wallet.account.address,
                txOptions: request.txOptions
              });
            case 5:
              _yield$contractCallWi2 = _context5.v;
              txHash = _yield$contractCallWi2.txHash;
              receipt = _yield$contractCallWi2.receipt;
              if (receipt) {
                _context5.n = 6;
                break;
              }
              return _context5.a(2, {
                txHash
              });
            case 6:
              return _context5.a(2, {
                txHash,
                receipt
              });
            case 7:
              _context5.p = 7;
              _t6 = _context5.v;
              return _context5.a(2, handleError(_t6, "Failed to dispute assertion"));
          }
        }, _callee5, this, [[0, 7]]);
      }));
      function disputeAssertion(_x5) {
        return _disputeAssertion.apply(this, arguments);
      }
      return disputeAssertion;
    }()
  }, {
    key: "disputeIdToAssertionId",
    value: function() {
      var _disputeIdToAssertionId = _asyncToGenerator(_regenerator().m(function _callee6(disputeId) {
        var assertionId;
        return _regenerator().w(function(_context6) {
          while (1) switch (_context6.n) {
            case 0:
              _context6.n = 1;
              return this.arbitrationPolicyUmaClient.disputeIdToAssertionId({
                disputeId: BigInt(disputeId)
              });
            case 1:
              assertionId = _context6.v;
              return _context6.a(2, assertionId);
          }
        }, _callee6, this);
      }));
      function disputeIdToAssertionId(_x6) {
        return _disputeIdToAssertionId.apply(this, arguments);
      }
      return disputeIdToAssertionId;
    }()
  }]);
}();
var RevShareType = function(RevShareType2) {
  RevShareType2["COMMERCIAL_REVENUE_SHARE"] = "CommercialRevShare";
  RevShareType2["MAX_REVENUE_SHARE"] = "MaxRevenueShare";
  RevShareType2["MAX_ALLOWED_REWARD_SHARE"] = "MaxAllowedRewardShare";
  return RevShareType2;
}({});
var AccessPermission = function(AccessPermission2) {
  AccessPermission2[AccessPermission2["ABSTAIN"] = 0] = "ABSTAIN";
  AccessPermission2[AccessPermission2["ALLOW"] = 1] = "ALLOW";
  AccessPermission2[AccessPermission2["DENY"] = 2] = "DENY";
  return AccessPermission2;
}({});
var getFunctionSignature = function getFunctionSignature2(abi, methodName, overloadIndex) {
  var functions = abi.filter(function(x) {
    return x.type === "function" && x.name === methodName;
  });
  if (functions.length === 0) {
    throw new Error("Method ".concat(methodName, " not found in ABI."));
  }
  if (functions.length > 1 && overloadIndex === void 0) {
    throw new Error("Method ".concat(methodName, " has ").concat(functions.length, " overloads. Please specify overloadIndex (0-").concat(functions.length - 1, ")."));
  }
  var func = functions[0];
  var _getTypeString = function getTypeString(input) {
    if (input.type.startsWith("tuple")) {
      var _input$components;
      var components = (_input$components = input.components) === null || _input$components === void 0 ? void 0 : _input$components.map(function(comp) {
        return _getTypeString(comp);
      }).join(",");
      return "(".concat(components, ")");
    }
    return input.type;
  };
  var inputs = func.inputs.map(function(input) {
    return _getTypeString(input);
  }).join(",");
  return "".concat(methodName, "(").concat(inputs, ")");
};
var getIpMetadataForWorkflow = function getIpMetadataForWorkflow2(ipMetadata) {
  return {
    ipMetadataURI: (ipMetadata === null || ipMetadata === void 0 ? void 0 : ipMetadata.ipMetadataURI) || "",
    ipMetadataHash: (ipMetadata === null || ipMetadata === void 0 ? void 0 : ipMetadata.ipMetadataHash) || zeroHash,
    nftMetadataURI: (ipMetadata === null || ipMetadata === void 0 ? void 0 : ipMetadata.nftMetadataURI) || "",
    nftMetadataHash: (ipMetadata === null || ipMetadata === void 0 ? void 0 : ipMetadata.nftMetadataHash) || zeroHash
  };
};
var PIL_TYPE = function(PIL_TYPE2) {
  PIL_TYPE2[PIL_TYPE2["NON_COMMERCIAL_REMIX"] = 0] = "NON_COMMERCIAL_REMIX";
  PIL_TYPE2[PIL_TYPE2["COMMERCIAL_USE"] = 1] = "COMMERCIAL_USE";
  PIL_TYPE2[PIL_TYPE2["COMMERCIAL_REMIX"] = 2] = "COMMERCIAL_REMIX";
  PIL_TYPE2[PIL_TYPE2["CREATIVE_COMMONS_ATTRIBUTION"] = 3] = "CREATIVE_COMMONS_ATTRIBUTION";
  return PIL_TYPE2;
}({});
var getLicenseTermByType = function getLicenseTermByType2(type, term) {
  var licenseTerms = {
    transferable: true,
    royaltyPolicy: zeroAddress,
    defaultMintingFee: BigInt(0),
    expiration: BigInt(0),
    commercialUse: false,
    commercialAttribution: false,
    commercializerChecker: zeroAddress,
    commercializerCheckerData: zeroAddress,
    commercialRevShare: 0,
    commercialRevCeiling: BigInt(0),
    derivativesAllowed: true,
    derivativesAttribution: true,
    derivativesApproval: false,
    derivativesReciprocal: true,
    derivativeRevCeiling: BigInt(0),
    currency: zeroAddress,
    uri: ""
  };
  if (type === PIL_TYPE.NON_COMMERCIAL_REMIX) {
    licenseTerms.commercializerCheckerData = "0x";
    licenseTerms.uri = "https://github.com/piplabs/pil-document/blob/998c13e6ee1d04eb817aefd1fe16dfe8be3cd7a2/off-chain-terms/NCSR.json";
    return licenseTerms;
  } else if (type === PIL_TYPE.COMMERCIAL_USE) {
    if (!term || term.defaultMintingFee === void 0 || term.currency === void 0) {
      throw new Error("DefaultMintingFee, currency are required for commercial use PIL.");
    }
    licenseTerms.royaltyPolicy = validateAddress(term.royaltyPolicyAddress);
    licenseTerms.defaultMintingFee = BigInt(term.defaultMintingFee);
    licenseTerms.commercialUse = true;
    licenseTerms.commercialAttribution = true;
    licenseTerms.derivativesReciprocal = false;
    licenseTerms.currency = validateAddress(term.currency);
    licenseTerms.uri = "https://github.com/piplabs/pil-document/blob/9a1f803fcf8101a8a78f1dcc929e6014e144ab56/off-chain-terms/CommercialUse.json";
    licenseTerms.derivativesAllowed = false;
    licenseTerms.derivativesAttribution = false;
    return licenseTerms;
  } else if (type === PIL_TYPE.CREATIVE_COMMONS_ATTRIBUTION) {
    if (!term || !term.royaltyPolicyAddress || !term.currency) {
      throw new Error("royaltyPolicyAddress and currency are required for creative commons attribution PIL.");
    }
    licenseTerms.royaltyPolicy = validateAddress(term.royaltyPolicyAddress);
    licenseTerms.currency = validateAddress(term.currency);
    licenseTerms.commercialUse = true;
    licenseTerms.commercialAttribution = true;
    licenseTerms.uri = "https://github.com/piplabs/pil-document/blob/998c13e6ee1d04eb817aefd1fe16dfe8be3cd7a2/off-chain-terms/CC-BY.json";
    return licenseTerms;
  } else {
    if (!term || term.defaultMintingFee === void 0 || term.currency === void 0 || term.commercialRevShare === void 0) {
      throw new Error("DefaultMintingFee, currency and commercialRevShare are required for commercial remix PIL.");
    }
    licenseTerms.royaltyPolicy = validateAddress(term.royaltyPolicyAddress);
    licenseTerms.defaultMintingFee = BigInt(term.defaultMintingFee);
    licenseTerms.commercialUse = true;
    licenseTerms.commercialAttribution = true;
    licenseTerms.uri = "https://github.com/piplabs/pil-document/blob/ad67bb632a310d2557f8abcccd428e4c9c798db1/off-chain-terms/CommercialRemix.json";
    licenseTerms.commercialRevShare = getRevenueShare(term.commercialRevShare);
    licenseTerms.derivativesReciprocal = true;
    licenseTerms.currency = validateAddress(term.currency);
    return licenseTerms;
  }
};
var validateLicenseTerms = function() {
  var _ref = _asyncToGenerator(_regenerator().m(function _callee(params, rpcClient) {
    var royaltyPolicy, currency, royaltyModuleReadOnlyClient, isWhitelistedArbitrationPolicy, isWhitelistedRoyaltyToken, object;
    return _regenerator().w(function(_context) {
      while (1) switch (_context.n) {
        case 0:
          royaltyPolicy = params.royaltyPolicy, currency = params.currency;
          royaltyModuleReadOnlyClient = new RoyaltyModuleReadOnlyClient(rpcClient);
          if (!(validateAddress(royaltyPolicy) !== zeroAddress)) {
            _context.n = 2;
            break;
          }
          _context.n = 1;
          return royaltyModuleReadOnlyClient.isWhitelistedRoyaltyPolicy({
            royaltyPolicy
          });
        case 1:
          isWhitelistedArbitrationPolicy = _context.v;
          if (isWhitelistedArbitrationPolicy) {
            _context.n = 2;
            break;
          }
          throw new Error("The royalty policy is not whitelisted.");
        case 2:
          if (!(validateAddress(currency) !== zeroAddress)) {
            _context.n = 4;
            break;
          }
          _context.n = 3;
          return royaltyModuleReadOnlyClient.isWhitelistedRoyaltyToken({
            token: currency
          });
        case 3:
          isWhitelistedRoyaltyToken = _context.v;
          if (isWhitelistedRoyaltyToken) {
            _context.n = 4;
            break;
          }
          throw new Error("The currency token is not whitelisted.");
        case 4:
          if (!(royaltyPolicy !== zeroAddress && currency === zeroAddress)) {
            _context.n = 5;
            break;
          }
          throw new Error("Royalty policy requires currency token.");
        case 5:
          object = _objectSpread2(_objectSpread2({}, params), {}, {
            defaultMintingFee: BigInt(params.defaultMintingFee),
            expiration: BigInt(params.expiration),
            commercialRevCeiling: BigInt(params.commercialRevCeiling),
            derivativeRevCeiling: BigInt(params.derivativeRevCeiling)
          });
          if (!(object.defaultMintingFee < 0)) {
            _context.n = 6;
            break;
          }
          throw new Error("DefaultMintingFee should be greater than or equal to 0.");
        case 6:
          if (!(object.defaultMintingFee > 0 && object.royaltyPolicy === zeroAddress)) {
            _context.n = 7;
            break;
          }
          throw new Error("Royalty policy is required when defaultMintingFee is greater than 0.");
        case 7:
          verifyCommercialUse(object);
          verifyDerivatives(object);
          if (!(object.commercialRevShare < 0 || object.commercialRevShare > 100)) {
            _context.n = 8;
            break;
          }
          throw new Error("CommercialRevShare should be between 0 and 100.");
        case 8:
          object.commercialRevShare = object.commercialRevShare / 100 * 1e8;
        case 9:
          return _context.a(2, object);
      }
    }, _callee);
  }));
  return function validateLicenseTerms2(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
var verifyCommercialUse = function verifyCommercialUse2(terms) {
  if (!terms.commercialUse) {
    if (terms.commercialAttribution) {
      throw new Error("Cannot add commercial attribution when commercial use is disabled.");
    }
    if (terms.commercializerChecker !== zeroAddress) {
      throw new Error("Cannot add commercializerChecker when commercial use is disabled.");
    }
    if (terms.commercialRevShare > 0) {
      throw new Error("Cannot add commercial revenue share when commercial use is disabled.");
    }
    if (terms.commercialRevCeiling > 0) {
      throw new Error("Cannot add commercial revenue ceiling when commercial use is disabled.");
    }
    if (terms.derivativeRevCeiling > 0) {
      throw new Error("Cannot add derivative revenue ceiling share when commercial use is disabled.");
    }
    if (terms.royaltyPolicy !== zeroAddress) {
      throw new Error("Cannot add commercial royalty policy when commercial use is disabled.");
    }
  } else {
    if (terms.royaltyPolicy === zeroAddress) {
      throw new Error("Royalty policy is required when commercial use is enabled.");
    }
  }
};
var verifyDerivatives = function verifyDerivatives2(terms) {
  if (!terms.derivativesAllowed) {
    if (terms.derivativesAttribution) {
      throw new Error("Cannot add derivative attribution when derivative use is disabled.");
    }
    if (terms.derivativesApproval) {
      throw new Error("Cannot add derivative approval when derivative use is disabled.");
    }
    if (terms.derivativesReciprocal) {
      throw new Error("Cannot add derivative reciprocal when derivative use is disabled.");
    }
    if (terms.derivativeRevCeiling > 0) {
      throw new Error("Cannot add derivative revenue ceiling when derivative use is disabled.");
    }
  }
};
var getRevenueShare = function getRevenueShare2(revShare) {
  var type = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : RevShareType.COMMERCIAL_REVENUE_SHARE;
  var revShareNumber = Number(revShare);
  if (isNaN(revShareNumber)) {
    throw new Error("".concat(type, " must be a valid number."));
  }
  if (revShareNumber < 0 || revShareNumber > 100) {
    throw new Error("".concat(type, " must be between 0 and 100."));
  }
  return revShareNumber / 100 * MAX_ROYALTY_TOKEN;
};
var getPermissionSignature = function() {
  var _ref = _asyncToGenerator(_regenerator().m(function _callee(param) {
    var ipId, deadline, state, wallet, chainId, permissions, accessAddress, isBatchPermissionFunction, data;
    return _regenerator().w(function(_context) {
      while (1) switch (_context.n) {
        case 0:
          ipId = param.ipId, deadline = param.deadline, state = param.state, wallet = param.wallet, chainId = param.chainId, permissions = param.permissions;
          accessAddress = accessControllerAddress[chainId];
          isBatchPermissionFunction = permissions.length >= 2;
          data = encodeFunctionData({
            abi: accessControllerAbi,
            functionName: isBatchPermissionFunction ? "setBatchTransientPermissions" : "setTransientPermission",
            args: isBatchPermissionFunction ? [permissions.map(function(item) {
              return {
                ipAccount: validateAddress(item.ipId),
                signer: validateAddress(item.signer),
                to: validateAddress(item.to),
                func: item.func ? toFunctionSelector(item.func) : defaultFunctionSelector,
                permission: item.permission
              };
            })] : [validateAddress(permissions[0].ipId), validateAddress(permissions[0].signer), validateAddress(permissions[0].to), permissions[0].func ? toFunctionSelector(permissions[0].func) : defaultFunctionSelector, permissions[0].permission]
          });
          _context.n = 1;
          return getSignature({
            state,
            to: accessAddress,
            encodeData: data,
            wallet,
            verifyingContract: ipId,
            deadline,
            chainId
          });
        case 1:
          return _context.a(2, _context.v);
      }
    }, _callee);
  }));
  return function getPermissionSignature2(_x) {
    return _ref.apply(this, arguments);
  };
}();
var getDeadline = function getDeadline2(unixTimestamp, deadline) {
  if (deadline && (isNaN(Number(deadline)) || BigInt(deadline) < 0n)) {
    throw new Error("Invalid deadline value.");
  }
  return deadline ? unixTimestamp + BigInt(deadline) : unixTimestamp + 1000n;
};
var getSignature = function() {
  var _ref3 = _asyncToGenerator(_regenerator().m(function _callee2(_ref2) {
    var state, to, encodeData, wallet, verifyingContract, deadline, chainId, nonce, signature;
    return _regenerator().w(function(_context2) {
      while (1) switch (_context2.n) {
        case 0:
          state = _ref2.state, to = _ref2.to, encodeData = _ref2.encodeData, wallet = _ref2.wallet, verifyingContract = _ref2.verifyingContract, deadline = _ref2.deadline, chainId = _ref2.chainId;
          if (wallet.signTypedData) {
            _context2.n = 1;
            break;
          }
          throw new Error("The wallet client does not support signTypedData, please try again.");
        case 1:
          if (wallet.account) {
            _context2.n = 2;
            break;
          }
          throw new Error("The wallet client does not have an account, please try again.");
        case 2:
          nonce = keccak256(encodeAbiParameters([{
            name: "",
            type: "bytes32"
          }, {
            name: "",
            type: "bytes"
          }], [state, encodeFunctionData({
            abi: ipAccountImplAbi,
            functionName: "execute",
            args: [to, 0n, encodeData]
          })]));
          _context2.n = 3;
          return wallet.signTypedData({
            account: wallet.account,
            domain: {
              name: "Story Protocol IP Account",
              version: "1",
              chainId,
              verifyingContract
            },
            types: {
              Execute: [{
                name: "to",
                type: "address"
              }, {
                name: "value",
                type: "uint256"
              }, {
                name: "data",
                type: "bytes"
              }, {
                name: "nonce",
                type: "bytes32"
              }, {
                name: "deadline",
                type: "uint256"
              }]
            },
            primaryType: "Execute",
            message: {
              to,
              value: BigInt(0),
              data: encodeData,
              nonce,
              deadline: BigInt(deadline)
            }
          });
        case 3:
          signature = _context2.v;
          return _context2.a(2, {
            signature,
            nonce
          });
      }
    }, _callee2);
  }));
  return function getSignature2(_x2) {
    return _ref3.apply(this, arguments);
  };
}();
var validateLicenseConfig = function validateLicenseConfig2(licensingConfig) {
  if (!licensingConfig) {
    return {
      isSet: false,
      mintingFee: 0n,
      licensingHook: zeroAddress,
      hookData: zeroHash,
      commercialRevShare: 0,
      disabled: false,
      expectMinimumGroupRewardShare: 0,
      expectGroupRewardPool: zeroAddress
    };
  }
  var licenseConfig = {
    expectMinimumGroupRewardShare: Number(licensingConfig.expectMinimumGroupRewardShare),
    commercialRevShare: getRevenueShare(licensingConfig.commercialRevShare),
    mintingFee: BigInt(licensingConfig.mintingFee),
    expectGroupRewardPool: validateAddress(licensingConfig.expectGroupRewardPool),
    licensingHook: validateAddress(licensingConfig.licensingHook),
    hookData: licensingConfig.hookData,
    isSet: licensingConfig.isSet,
    disabled: licensingConfig.disabled
  };
  if (isNaN(licenseConfig.expectMinimumGroupRewardShare)) {
    throw new Error("The expectMinimumGroupRewardShare must be a valid number.");
  }
  if (licenseConfig.expectMinimumGroupRewardShare < 0 || licenseConfig.expectMinimumGroupRewardShare > 100) {
    throw new Error("The expectMinimumGroupRewardShare must be greater than 0 and less than 100.");
  }
  if (licenseConfig.mintingFee < 0) {
    throw new Error("The mintingFee must be greater than 0.");
  }
  return licenseConfig;
};
var GroupClient = function() {
  function GroupClient2(rpcClient, wallet, chainId) {
    _classCallCheck(this, GroupClient2);
    this.rpcClient = rpcClient;
    this.wallet = wallet;
    this.chainId = chainId;
    this.groupingWorkflowsClient = new GroupingWorkflowsClient(rpcClient, wallet);
    this.groupingModuleEventClient = new GroupingModuleEventClient(rpcClient);
    this.licenseTemplateClient = new PiLicenseTemplateClient(rpcClient, wallet);
    this.licenseTokenReadOnlyClient = new LicenseTokenReadOnlyClient(rpcClient);
    this.ipAssetRegistryClient = new IpAssetRegistryClient(rpcClient, wallet);
    this.groupingModuleClient = new GroupingModuleClient(rpcClient, wallet);
    this.coreMetadataModuleClient = new CoreMetadataModuleClient(rpcClient, wallet);
    this.licensingModuleClient = new LicensingModuleClient(rpcClient, wallet);
    this.licenseRegistryReadOnlyClient = new LicenseRegistryReadOnlyClient(rpcClient);
    this.royaltyModuleEventClient = new RoyaltyModuleEventClient(rpcClient);
  }
  return _createClass(GroupClient2, [{
    key: "registerGroup",
    value: function() {
      var _registerGroup = _asyncToGenerator(_regenerator().m(function _callee(request) {
        var _request$txOptions, object, txHash, txReceipt, groupId, _t;
        return _regenerator().w(function(_context) {
          while (1) switch (_context.n) {
            case 0:
              _context.p = 0;
              object = {
                groupPool: validateAddress(request.groupPool)
              };
              if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.encodedTxDataOnly)) {
                _context.n = 1;
                break;
              }
              return _context.a(2, {
                encodedTxData: this.groupingModuleClient.registerGroupEncode(object)
              });
            case 1:
              _context.n = 2;
              return this.groupingModuleClient.registerGroup(object);
            case 2:
              txHash = _context.v;
              _context.n = 3;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 3:
              txReceipt = _context.v;
              groupId = this.groupingModuleEventClient.parseTxIpGroupRegisteredEvent(txReceipt)[0].groupId;
              return _context.a(2, {
                txHash,
                groupId
              });
            case 4:
              _context.n = 6;
              break;
            case 5:
              _context.p = 5;
              _t = _context.v;
              return _context.a(2, handleError(_t, "Failed to register group"));
            case 6:
              return _context.a(2);
          }
        }, _callee, this, [[0, 5]]);
      }));
      function registerGroup(_x) {
        return _registerGroup.apply(this, arguments);
      }
      return registerGroup;
    }()
  }, {
    key: "mintAndRegisterIpAndAttachLicenseAndAddToGroup",
    value: function() {
      var _mintAndRegisterIpAndAttachLicenseAndAddToGroup = _asyncToGenerator(_regenerator().m(function _callee2(request) {
        var _request$txOptions2, groupId, recipient, spgNftContract, deadline, isRegistered, ipAccount, _yield$ipAccount$stat, state, blockTimestamp, calculatedDeadline, _yield$getPermissionS, sigAddToGroupSignature, object, txHash, receipt, log, _t2;
        return _regenerator().w(function(_context2) {
          while (1) switch (_context2.n) {
            case 0:
              _context2.p = 0;
              groupId = request.groupId, recipient = request.recipient, spgNftContract = request.spgNftContract, deadline = request.deadline;
              _context2.n = 1;
              return this.ipAssetRegistryClient.isRegistered({
                id: validateAddress(groupId)
              });
            case 1:
              isRegistered = _context2.v;
              if (isRegistered) {
                _context2.n = 2;
                break;
              }
              throw new Error("Group IP ".concat(groupId, " is not registered."));
            case 2:
              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, groupId);
              _context2.n = 3;
              return ipAccount.state();
            case 3:
              _yield$ipAccount$stat = _context2.v;
              state = _yield$ipAccount$stat.result;
              _context2.n = 4;
              return this.rpcClient.getBlock();
            case 4:
              blockTimestamp = _context2.v.timestamp;
              calculatedDeadline = getDeadline(blockTimestamp, deadline);
              _context2.n = 5;
              return getPermissionSignature({
                ipId: groupId,
                deadline: calculatedDeadline,
                state,
                wallet: this.wallet,
                chainId: this.chainId,
                permissions: [{
                  ipId: groupId,
                  signer: validateAddress(this.groupingWorkflowsClient.address),
                  to: validateAddress(this.groupingModuleClient.address),
                  permission: AccessPermission.ALLOW,
                  func: getFunctionSignature(groupingModuleAbi, "addIp")
                }]
              });
            case 5:
              _yield$getPermissionS = _context2.v;
              sigAddToGroupSignature = _yield$getPermissionS.signature;
              object = _objectSpread2(_objectSpread2({}, request), {}, {
                allowDuplicates: request.allowDuplicates || true,
                spgNftContract: validateAddress(spgNftContract),
                recipient: validateAddress(recipient || this.wallet.account.address),
                maxAllowedRewardShare: BigInt(getRevenueShare(request.maxAllowedRewardShare, RevShareType.MAX_ALLOWED_REWARD_SHARE)),
                licensesData: this.getLicenseData(request.licenseData),
                ipMetadata: getIpMetadataForWorkflow(request.ipMetadata),
                sigAddToGroup: {
                  signer: validateAddress(this.wallet.account.address),
                  deadline: calculatedDeadline,
                  signature: sigAddToGroupSignature
                }
              });
              if (!((_request$txOptions2 = request.txOptions) !== null && _request$txOptions2 !== void 0 && _request$txOptions2.encodedTxDataOnly)) {
                _context2.n = 6;
                break;
              }
              return _context2.a(2, {
                encodedTxData: this.groupingWorkflowsClient.mintAndRegisterIpAndAttachLicenseAndAddToGroupEncode(object)
              });
            case 6:
              _context2.n = 7;
              return this.groupingWorkflowsClient.mintAndRegisterIpAndAttachLicenseAndAddToGroup(object);
            case 7:
              txHash = _context2.v;
              _context2.n = 8;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 8:
              receipt = _context2.v;
              log = this.ipAssetRegistryClient.parseTxIpRegisteredEvent(receipt)[0];
              return _context2.a(2, {
                txHash,
                ipId: log.ipId,
                tokenId: log.tokenId
              });
            case 9:
              _context2.n = 11;
              break;
            case 10:
              _context2.p = 10;
              _t2 = _context2.v;
              return _context2.a(2, handleError(_t2, "Failed to mint and register IP and attach license and add to group"));
            case 11:
              return _context2.a(2);
          }
        }, _callee2, this, [[0, 10]]);
      }));
      function mintAndRegisterIpAndAttachLicenseAndAddToGroup(_x2) {
        return _mintAndRegisterIpAndAttachLicenseAndAddToGroup.apply(this, arguments);
      }
      return mintAndRegisterIpAndAttachLicenseAndAddToGroup;
    }()
  }, {
    key: "registerIpAndAttachLicenseAndAddToGroup",
    value: function() {
      var _registerIpAndAttachLicenseAndAddToGroup = _asyncToGenerator(_regenerator().m(function _callee3(request) {
        var _request$txOptions3, ipIdAddress, isRegistered, ipAccount, _yield$ipAccount$stat2, state, blockTimestamp, calculatedDeadline, _yield$getPermissionS2, sigAddToGroupSignature, _yield$getPermissionS3, sigMetadataAndAttachSignature, object, txHash, receipt, log, _t3;
        return _regenerator().w(function(_context3) {
          while (1) switch (_context3.n) {
            case 0:
              _context3.p = 0;
              _context3.n = 1;
              return this.ipAssetRegistryClient.ipId({
                chainId: BigInt(this.chainId),
                tokenContract: validateAddress(request.nftContract),
                tokenId: BigInt(request.tokenId)
              });
            case 1:
              ipIdAddress = _context3.v;
              _context3.n = 2;
              return this.ipAssetRegistryClient.isRegistered({
                id: validateAddress(request.groupId)
              });
            case 2:
              isRegistered = _context3.v;
              if (isRegistered) {
                _context3.n = 3;
                break;
              }
              throw new Error("Group IP ".concat(request.groupId, " is not registered."));
            case 3:
              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, request.groupId);
              _context3.n = 4;
              return ipAccount.state();
            case 4:
              _yield$ipAccount$stat2 = _context3.v;
              state = _yield$ipAccount$stat2.result;
              _context3.n = 5;
              return this.rpcClient.getBlock();
            case 5:
              blockTimestamp = _context3.v.timestamp;
              calculatedDeadline = getDeadline(blockTimestamp, request.deadline);
              _context3.n = 6;
              return getPermissionSignature({
                ipId: request.groupId,
                deadline: calculatedDeadline,
                state,
                wallet: this.wallet,
                chainId: this.chainId,
                permissions: [{
                  ipId: request.groupId,
                  signer: this.groupingWorkflowsClient.address,
                  to: this.groupingModuleClient.address,
                  permission: AccessPermission.ALLOW,
                  func: getFunctionSignature(groupingModuleAbi, "addIp")
                }]
              });
            case 6:
              _yield$getPermissionS2 = _context3.v;
              sigAddToGroupSignature = _yield$getPermissionS2.signature;
              _context3.n = 7;
              return getPermissionSignature({
                ipId: ipIdAddress,
                deadline: calculatedDeadline,
                state: toHex(0, {
                  size: 32
                }),
                wallet: this.wallet,
                chainId: this.chainId,
                permissions: [{
                  ipId: ipIdAddress,
                  signer: this.groupingWorkflowsClient.address,
                  to: validateAddress(this.coreMetadataModuleClient.address),
                  permission: AccessPermission.ALLOW,
                  func: getFunctionSignature(coreMetadataModuleAbi, "setAll")
                }, {
                  ipId: ipIdAddress,
                  signer: this.groupingWorkflowsClient.address,
                  to: validateAddress(this.licensingModuleClient.address),
                  permission: AccessPermission.ALLOW,
                  func: getFunctionSignature(licensingModuleAbi, "attachLicenseTerms")
                }, {
                  ipId: ipIdAddress,
                  signer: this.groupingWorkflowsClient.address,
                  to: this.licensingModuleClient.address,
                  permission: AccessPermission.ALLOW,
                  func: getFunctionSignature(licensingModuleAbi, "setLicensingConfig")
                }]
              });
            case 7:
              _yield$getPermissionS3 = _context3.v;
              sigMetadataAndAttachSignature = _yield$getPermissionS3.signature;
              object = {
                nftContract: request.nftContract,
                groupId: request.groupId,
                licensesData: this.getLicenseData(request.licenseData),
                ipMetadata: getIpMetadataForWorkflow(request.ipMetadata),
                tokenId: BigInt(request.tokenId),
                maxAllowedRewardShare: BigInt(getRevenueShare(request.maxAllowedRewardShare, RevShareType.MAX_ALLOWED_REWARD_SHARE)),
                sigAddToGroup: {
                  signer: validateAddress(this.wallet.account.address),
                  deadline: calculatedDeadline,
                  signature: sigAddToGroupSignature
                },
                sigMetadataAndAttachAndConfig: {
                  signer: this.wallet.account.address,
                  deadline: calculatedDeadline,
                  signature: sigMetadataAndAttachSignature
                }
              };
              if (!((_request$txOptions3 = request.txOptions) !== null && _request$txOptions3 !== void 0 && _request$txOptions3.encodedTxDataOnly)) {
                _context3.n = 8;
                break;
              }
              return _context3.a(2, {
                encodedTxData: this.groupingWorkflowsClient.registerIpAndAttachLicenseAndAddToGroupEncode(object)
              });
            case 8:
              _context3.n = 9;
              return this.groupingWorkflowsClient.registerIpAndAttachLicenseAndAddToGroup(object);
            case 9:
              txHash = _context3.v;
              _context3.n = 10;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 10:
              receipt = _context3.v;
              log = this.ipAssetRegistryClient.parseTxIpRegisteredEvent(receipt)[0];
              return _context3.a(2, {
                txHash,
                ipId: log.ipId,
                tokenId: log.tokenId
              });
            case 11:
              _context3.p = 11;
              _t3 = _context3.v;
              return _context3.a(2, handleError(_t3, "Failed to register IP and attach license and add to group"));
          }
        }, _callee3, this, [[0, 11]]);
      }));
      function registerIpAndAttachLicenseAndAddToGroup(_x3) {
        return _registerIpAndAttachLicenseAndAddToGroup.apply(this, arguments);
      }
      return registerIpAndAttachLicenseAndAddToGroup;
    }()
  }, {
    key: "registerGroupAndAttachLicense",
    value: function() {
      var _registerGroupAndAttachLicense = _asyncToGenerator(_regenerator().m(function _callee4(request) {
        var _request$txOptions4, object, txHash, txReceipt, groupId, _t4;
        return _regenerator().w(function(_context4) {
          while (1) switch (_context4.n) {
            case 0:
              _context4.p = 0;
              object = {
                groupPool: validateAddress(request.groupPool),
                licenseData: this.getLicenseData(request.licenseData)[0]
              };
              if (!((_request$txOptions4 = request.txOptions) !== null && _request$txOptions4 !== void 0 && _request$txOptions4.encodedTxDataOnly)) {
                _context4.n = 1;
                break;
              }
              return _context4.a(2, {
                encodedTxData: this.groupingWorkflowsClient.registerGroupAndAttachLicenseEncode(object)
              });
            case 1:
              _context4.n = 2;
              return this.groupingWorkflowsClient.registerGroupAndAttachLicense(object);
            case 2:
              txHash = _context4.v;
              _context4.n = 3;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 3:
              txReceipt = _context4.v;
              groupId = this.groupingModuleEventClient.parseTxIpGroupRegisteredEvent(txReceipt)[0].groupId;
              return _context4.a(2, {
                txHash,
                groupId
              });
            case 4:
              _context4.p = 4;
              _t4 = _context4.v;
              return _context4.a(2, handleError(_t4, "Failed to register group and attach license"));
          }
        }, _callee4, this, [[0, 4]]);
      }));
      function registerGroupAndAttachLicense(_x4) {
        return _registerGroupAndAttachLicense.apply(this, arguments);
      }
      return registerGroupAndAttachLicense;
    }()
  }, {
    key: "registerGroupAndAttachLicenseAndAddIps",
    value: function() {
      var _registerGroupAndAttachLicenseAndAddIps = _asyncToGenerator(_regenerator().m(function _callee5(request) {
        var _request$txOptions5, object, i, isRegistered, _i, isAttachedLicenseTerms, txHash, txReceipt, groupId, _t5;
        return _regenerator().w(function(_context5) {
          while (1) switch (_context5.n) {
            case 0:
              _context5.p = 0;
              object = {
                groupPool: validateAddress(request.groupPool),
                ipIds: request.ipIds,
                licenseData: this.getLicenseData(request.licenseData)[0],
                maxAllowedRewardShare: BigInt(getRevenueShare(request.maxAllowedRewardShare))
              };
              i = 0;
            case 1:
              if (!(i < request.ipIds.length)) {
                _context5.n = 4;
                break;
              }
              _context5.n = 2;
              return this.ipAssetRegistryClient.isRegistered({
                id: validateAddress(request.ipIds[i])
              });
            case 2:
              isRegistered = _context5.v;
              if (isRegistered) {
                _context5.n = 3;
                break;
              }
              throw new Error("IP ".concat(request.ipIds[i], " is not registered."));
            case 3:
              i++;
              _context5.n = 1;
              break;
            case 4:
              _i = 0;
            case 5:
              if (!(_i < request.ipIds.length)) {
                _context5.n = 8;
                break;
              }
              _context5.n = 6;
              return this.licenseRegistryReadOnlyClient.hasIpAttachedLicenseTerms({
                ipId: request.ipIds[_i],
                licenseTemplate: object.licenseData.licenseTemplate,
                licenseTermsId: object.licenseData.licenseTermsId
              });
            case 6:
              isAttachedLicenseTerms = _context5.v;
              if (isAttachedLicenseTerms) {
                _context5.n = 7;
                break;
              }
              throw new Error("License terms must be attached to IP ".concat(request.ipIds[_i], " before adding to group."));
            case 7:
              _i++;
              _context5.n = 5;
              break;
            case 8:
              if (!((_request$txOptions5 = request.txOptions) !== null && _request$txOptions5 !== void 0 && _request$txOptions5.encodedTxDataOnly)) {
                _context5.n = 9;
                break;
              }
              return _context5.a(2, {
                encodedTxData: this.groupingWorkflowsClient.registerGroupAndAttachLicenseAndAddIpsEncode(object)
              });
            case 9:
              _context5.n = 10;
              return this.groupingWorkflowsClient.registerGroupAndAttachLicenseAndAddIps(object);
            case 10:
              txHash = _context5.v;
              _context5.n = 11;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 11:
              txReceipt = _context5.v;
              groupId = this.groupingModuleEventClient.parseTxIpGroupRegisteredEvent(txReceipt)[0].groupId;
              return _context5.a(2, {
                txHash,
                groupId
              });
            case 12:
              _context5.p = 12;
              _t5 = _context5.v;
              return _context5.a(2, handleError(_t5, "Failed to register group and attach license and add ips"));
          }
        }, _callee5, this, [[0, 12]]);
      }));
      function registerGroupAndAttachLicenseAndAddIps(_x5) {
        return _registerGroupAndAttachLicenseAndAddIps.apply(this, arguments);
      }
      return registerGroupAndAttachLicenseAndAddIps;
    }()
  }, {
    key: "collectAndDistributeGroupRoyalties",
    value: function() {
      var _collectAndDistributeGroupRoyalties = _asyncToGenerator(_regenerator().m(function _callee7(_ref) {
        var _this = this;
        var groupIpId, currencyTokens, memberIpIds, txOptions, collectAndClaimParams, isGroupRegistered, txHash, _yield$waitForTxRecei, receipt, collectedRoyalties, royaltiesDistributed, _t6;
        return _regenerator().w(function(_context7) {
          while (1) switch (_context7.n) {
            case 0:
              groupIpId = _ref.groupIpId, currencyTokens = _ref.currencyTokens, memberIpIds = _ref.memberIpIds, txOptions = _ref.txOptions;
              _context7.p = 1;
              if (currencyTokens.length) {
                _context7.n = 2;
                break;
              }
              throw new Error("At least one currency token is required.");
            case 2:
              if (memberIpIds.length) {
                _context7.n = 3;
                break;
              }
              throw new Error("At least one member IP ID is required.");
            case 3:
              if (!currencyTokens.some(function(token) {
                return token === zeroAddress;
              })) {
                _context7.n = 4;
                break;
              }
              throw new Error("Currency token cannot be the zero address.");
            case 4:
              collectAndClaimParams = {
                groupIpId: validateAddress(groupIpId),
                currencyTokens: validateAddresses(currencyTokens),
                memberIpIds: validateAddresses(memberIpIds)
              };
              _context7.n = 5;
              return this.ipAssetRegistryClient.isRegistered({
                id: collectAndClaimParams.groupIpId
              });
            case 5:
              isGroupRegistered = _context7.v;
              if (isGroupRegistered) {
                _context7.n = 6;
                break;
              }
              throw new Error("The group IP with ID ".concat(collectAndClaimParams.groupIpId, " is not registered."));
            case 6:
              _context7.n = 7;
              return Promise.all(collectAndClaimParams.memberIpIds.map(function() {
                var _ref2 = _asyncToGenerator(_regenerator().m(function _callee6(ipId) {
                  var isMemberRegistered;
                  return _regenerator().w(function(_context6) {
                    while (1) switch (_context6.n) {
                      case 0:
                        _context6.n = 1;
                        return _this.ipAssetRegistryClient.isRegistered({
                          id: ipId
                        });
                      case 1:
                        isMemberRegistered = _context6.v;
                        if (isMemberRegistered) {
                          _context6.n = 2;
                          break;
                        }
                        throw new Error("Member IP with ID ".concat(ipId, " is not registered ."));
                      case 2:
                        return _context6.a(2);
                    }
                  }, _callee6);
                }));
                return function(_x7) {
                  return _ref2.apply(this, arguments);
                };
              }()));
            case 7:
              _context7.n = 8;
              return this.groupingWorkflowsClient.collectRoyaltiesAndClaimReward(collectAndClaimParams);
            case 8:
              txHash = _context7.v;
              _context7.n = 9;
              return waitForTxReceipt({
                txHash,
                txOptions,
                rpcClient: this.rpcClient
              });
            case 9:
              _yield$waitForTxRecei = _context7.v;
              receipt = _yield$waitForTxRecei.receipt;
              if (receipt) {
                _context7.n = 10;
                break;
              }
              return _context7.a(2, {
                txHash
              });
            case 10:
              collectedRoyalties = this.groupingModuleEventClient.parseTxCollectedRoyaltiesToGroupPoolEvent(receipt).map(function(_ref3) {
                var groupId = _ref3.groupId, amount = _ref3.amount, token = _ref3.token;
                return {
                  groupId,
                  amount,
                  token
                };
              });
              royaltiesDistributed = this.royaltyModuleEventClient.parseTxRoyaltyPaidEvent(receipt).map(function(_ref4) {
                var receiverIpId = _ref4.receiverIpId, amount = _ref4.amount, token = _ref4.token, amountAfterFee = _ref4.amountAfterFee;
                return {
                  ipId: receiverIpId,
                  amount,
                  token,
                  amountAfterFee
                };
              });
              return _context7.a(2, {
                txHash,
                collectedRoyalties,
                royaltiesDistributed
              });
            case 11:
              _context7.p = 11;
              _t6 = _context7.v;
              return _context7.a(2, handleError(_t6, "Failed to collect and distribute group royalties"));
          }
        }, _callee7, this, [[1, 11]]);
      }));
      function collectAndDistributeGroupRoyalties(_x6) {
        return _collectAndDistributeGroupRoyalties.apply(this, arguments);
      }
      return collectAndDistributeGroupRoyalties;
    }()
  }, {
    key: "addIpsToGroup",
    value: function() {
      var _addIpsToGroup = _asyncToGenerator(_regenerator().m(function _callee8(_ref5) {
        var groupIpId, ipIds, maxAllowedRewardSharePercentage, txOptions, addIpParam, txHash, _t7;
        return _regenerator().w(function(_context8) {
          while (1) switch (_context8.n) {
            case 0:
              groupIpId = _ref5.groupIpId, ipIds = _ref5.ipIds, maxAllowedRewardSharePercentage = _ref5.maxAllowedRewardSharePercentage, txOptions = _ref5.txOptions;
              _context8.p = 1;
              addIpParam = {
                groupIpId: validateAddress(groupIpId),
                ipIds: validateAddresses(ipIds),
                maxAllowedRewardShare: BigInt(getRevenueShare(maxAllowedRewardSharePercentage || 100, RevShareType.MAX_ALLOWED_REWARD_SHARE))
              };
              _context8.n = 2;
              return this.groupingModuleClient.addIp(addIpParam);
            case 2:
              txHash = _context8.v;
              _context8.n = 3;
              return waitForTxReceipt({
                txHash,
                txOptions,
                rpcClient: this.rpcClient
              });
            case 3:
              return _context8.a(2, _context8.v);
            case 4:
              _context8.p = 4;
              _t7 = _context8.v;
              return _context8.a(2, handleError(_t7, "Failed to add IP to group"));
          }
        }, _callee8, this, [[1, 4]]);
      }));
      function addIpsToGroup(_x8) {
        return _addIpsToGroup.apply(this, arguments);
      }
      return addIpsToGroup;
    }()
  }, {
    key: "getClaimableReward",
    value: function() {
      var _getClaimableReward = _asyncToGenerator(_regenerator().m(function _callee9(_ref6) {
        var groupIpId, currencyToken, memberIpIds, claimableReward, _t8;
        return _regenerator().w(function(_context9) {
          while (1) switch (_context9.n) {
            case 0:
              groupIpId = _ref6.groupIpId, currencyToken = _ref6.currencyToken, memberIpIds = _ref6.memberIpIds;
              _context9.p = 1;
              _context9.n = 2;
              return this.groupingModuleClient.getClaimableReward({
                groupId: validateAddress(groupIpId),
                ipIds: validateAddresses(memberIpIds),
                token: validateAddress(currencyToken)
              });
            case 2:
              claimableReward = _context9.v;
              return _context9.a(2, claimableReward);
            case 3:
              _context9.p = 3;
              _t8 = _context9.v;
              return _context9.a(2, handleError(_t8, "Failed to get claimable reward"));
          }
        }, _callee9, this, [[1, 3]]);
      }));
      function getClaimableReward(_x9) {
        return _getClaimableReward.apply(this, arguments);
      }
      return getClaimableReward;
    }()
  }, {
    key: "removeIpsFromGroup",
    value: function() {
      var _removeIpsFromGroup = _asyncToGenerator(_regenerator().m(function _callee0(_ref7) {
        var groupIpId, ipIds, txOptions, removeIpParam, txHash, _t9;
        return _regenerator().w(function(_context0) {
          while (1) switch (_context0.n) {
            case 0:
              groupIpId = _ref7.groupIpId, ipIds = _ref7.ipIds, txOptions = _ref7.txOptions;
              _context0.p = 1;
              removeIpParam = {
                groupIpId: validateAddress(groupIpId),
                ipIds: validateAddresses(ipIds)
              };
              _context0.n = 2;
              return this.groupingModuleClient.removeIp(removeIpParam);
            case 2:
              txHash = _context0.v;
              _context0.n = 3;
              return waitForTxReceipt({
                txHash,
                txOptions,
                rpcClient: this.rpcClient
              });
            case 3:
              return _context0.a(2, _context0.v);
            case 4:
              _context0.p = 4;
              _t9 = _context0.v;
              return _context0.a(2, handleError(_t9, "Failed to remove IPs from group"));
          }
        }, _callee0, this, [[1, 4]]);
      }));
      function removeIpsFromGroup(_x0) {
        return _removeIpsFromGroup.apply(this, arguments);
      }
      return removeIpsFromGroup;
    }()
  }, {
    key: "claimReward",
    value: function() {
      var _claimReward = _asyncToGenerator(_regenerator().m(function _callee1(_ref8) {
        var groupIpId, currencyToken, memberIpIds, txOptions, claimRewardParam, txHash, _yield$waitForTxRecei2, receipt, claimedReward, _t0;
        return _regenerator().w(function(_context1) {
          while (1) switch (_context1.n) {
            case 0:
              groupIpId = _ref8.groupIpId, currencyToken = _ref8.currencyToken, memberIpIds = _ref8.memberIpIds, txOptions = _ref8.txOptions;
              _context1.p = 1;
              claimRewardParam = {
                groupId: validateAddress(groupIpId),
                ipIds: validateAddresses(memberIpIds),
                token: validateAddress(currencyToken)
              };
              _context1.n = 2;
              return this.groupingModuleClient.claimReward(claimRewardParam);
            case 2:
              txHash = _context1.v;
              _context1.n = 3;
              return waitForTxReceipt({
                txHash,
                txOptions,
                rpcClient: this.rpcClient
              });
            case 3:
              _yield$waitForTxRecei2 = _context1.v;
              receipt = _yield$waitForTxRecei2.receipt;
              if (receipt) {
                _context1.n = 4;
                break;
              }
              return _context1.a(2, {
                txHash
              });
            case 4:
              claimedReward = this.groupingModuleEventClient.parseTxClaimedRewardEvent(receipt);
              return _context1.a(2, {
                txHash,
                claimedReward
              });
            case 5:
              _context1.p = 5;
              _t0 = _context1.v;
              return _context1.a(2, handleError(_t0, "Failed to claim reward"));
          }
        }, _callee1, this, [[1, 5]]);
      }));
      function claimReward(_x1) {
        return _claimReward.apply(this, arguments);
      }
      return claimReward;
    }()
  }, {
    key: "collectRoyalties",
    value: function() {
      var _collectRoyalties = _asyncToGenerator(_regenerator().m(function _callee10(_ref9) {
        var groupIpId, currencyToken, txOptions, collectRoyaltiesParam, txHash, _yield$waitForTxRecei3, receipt, collectedRoyalties, _t1;
        return _regenerator().w(function(_context10) {
          while (1) switch (_context10.n) {
            case 0:
              groupIpId = _ref9.groupIpId, currencyToken = _ref9.currencyToken, txOptions = _ref9.txOptions;
              _context10.p = 1;
              collectRoyaltiesParam = {
                groupId: validateAddress(groupIpId),
                token: validateAddress(currencyToken)
              };
              _context10.n = 2;
              return this.groupingModuleClient.collectRoyalties(collectRoyaltiesParam);
            case 2:
              txHash = _context10.v;
              _context10.n = 3;
              return waitForTxReceipt({
                txHash,
                txOptions,
                rpcClient: this.rpcClient
              });
            case 3:
              _yield$waitForTxRecei3 = _context10.v;
              receipt = _yield$waitForTxRecei3.receipt;
              if (receipt) {
                _context10.n = 4;
                break;
              }
              return _context10.a(2, {
                txHash
              });
            case 4:
              collectedRoyalties = this.groupingModuleEventClient.parseTxCollectedRoyaltiesToGroupPoolEvent(receipt)[0].amount;
              return _context10.a(2, {
                txHash,
                collectedRoyalties
              });
            case 5:
              _context10.p = 5;
              _t1 = _context10.v;
              return _context10.a(2, handleError(_t1, "Failed to collect royalties"));
          }
        }, _callee10, this, [[1, 5]]);
      }));
      function collectRoyalties(_x10) {
        return _collectRoyalties.apply(this, arguments);
      }
      return collectRoyalties;
    }()
  }, {
    key: "getLicenseData",
    value: function getLicenseData(licenseData) {
      var _this2 = this;
      var isArray = Array.isArray(licenseData);
      if (isArray && licenseData.length === 0 || !licenseData) {
        throw new Error("License data is required.");
      }
      var licenseDataArray = isArray ? licenseData : [licenseData];
      return licenseDataArray.map(function(item) {
        return {
          licenseTemplate: validateAddress(item.licenseTemplate || _this2.licenseTemplateClient.address),
          licenseTermsId: BigInt(item.licenseTermsId),
          licensingConfig: validateLicenseConfig(item.licensingConfig)
        };
      });
    }
  }]);
}();
var IPAccountClient = function() {
  function IPAccountClient2(rpcClient, wallet, chainId) {
    _classCallCheck(this, IPAccountClient2);
    this.wallet = wallet;
    this.rpcClient = rpcClient;
    this.chainId = chainId;
    this.wrappedIpClient = new WrappedIpClient(rpcClient, wallet);
    this.erc20Client = new Erc20Client(rpcClient, wallet);
  }
  return _createClass(IPAccountClient2, [{
    key: "execute",
    value: function() {
      var _execute = _asyncToGenerator(_regenerator().m(function _callee(request) {
        var _request$txOptions, ipAccountClient, req, txHash, _t;
        return _regenerator().w(function(_context) {
          while (1) switch (_context.n) {
            case 0:
              _context.p = 0;
              ipAccountClient = new IpAccountImplClient(this.rpcClient, this.wallet, validateAddress(request.ipId));
              req = {
                to: request.to,
                value: BigInt(0),
                data: request.data
              };
              if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.encodedTxDataOnly)) {
                _context.n = 1;
                break;
              }
              return _context.a(2, {
                encodedTxData: ipAccountClient.executeEncode(_objectSpread2(_objectSpread2({}, req), {}, {
                  operation: 0
                }))
              });
            case 1:
              _context.n = 2;
              return ipAccountClient.execute(_objectSpread2(_objectSpread2({}, req), {}, {
                operation: 0
              }));
            case 2:
              txHash = _context.v;
              _context.n = 3;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 3:
              return _context.a(2, {
                txHash
              });
            case 4:
              _context.n = 6;
              break;
            case 5:
              _context.p = 5;
              _t = _context.v;
              return _context.a(2, handleError(_t, "Failed to execute the IP Account transaction"));
            case 6:
              return _context.a(2);
          }
        }, _callee, this, [[0, 5]]);
      }));
      function execute(_x) {
        return _execute.apply(this, arguments);
      }
      return execute;
    }()
  }, {
    key: "executeWithSig",
    value: function() {
      var _executeWithSig = _asyncToGenerator(_regenerator().m(function _callee2(request) {
        var _request$txOptions2, ipAccountClient, req, txHash, _t2;
        return _regenerator().w(function(_context2) {
          while (1) switch (_context2.n) {
            case 0:
              _context2.p = 0;
              ipAccountClient = new IpAccountImplClient(this.rpcClient, this.wallet, validateAddress(request.ipId));
              req = {
                to: validateAddress(request.to),
                value: BigInt(request.value || 0),
                data: request.data,
                signer: validateAddress(request.signer),
                deadline: BigInt(request.deadline),
                signature: request.signature
              };
              if (!((_request$txOptions2 = request.txOptions) !== null && _request$txOptions2 !== void 0 && _request$txOptions2.encodedTxDataOnly)) {
                _context2.n = 1;
                break;
              }
              return _context2.a(2, {
                encodedTxData: ipAccountClient.executeWithSigEncode(req)
              });
            case 1:
              _context2.n = 2;
              return ipAccountClient.executeWithSig(req);
            case 2:
              txHash = _context2.v;
              _context2.n = 3;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 3:
              return _context2.a(2, {
                txHash
              });
            case 4:
              _context2.n = 6;
              break;
            case 5:
              _context2.p = 5;
              _t2 = _context2.v;
              return _context2.a(2, handleError(_t2, "Failed to execute with signature for the IP Account transaction"));
            case 6:
              return _context2.a(2);
          }
        }, _callee2, this, [[0, 5]]);
      }));
      function executeWithSig(_x2) {
        return _executeWithSig.apply(this, arguments);
      }
      return executeWithSig;
    }()
  }, {
    key: "getIpAccountNonce",
    value: function() {
      var _getIpAccountNonce = _asyncToGenerator(_regenerator().m(function _callee3(ipId) {
        var ipAccount, _yield$ipAccount$stat, state, _t3;
        return _regenerator().w(function(_context3) {
          while (1) switch (_context3.n) {
            case 0:
              _context3.p = 0;
              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, validateAddress(ipId));
              _context3.n = 1;
              return ipAccount.state();
            case 1:
              _yield$ipAccount$stat = _context3.v;
              state = _yield$ipAccount$stat.result;
              return _context3.a(2, state);
            case 2:
              _context3.p = 2;
              _t3 = _context3.v;
              return _context3.a(2, handleError(_t3, "Failed to get the IP Account nonce"));
          }
        }, _callee3, this, [[0, 2]]);
      }));
      function getIpAccountNonce(_x3) {
        return _getIpAccountNonce.apply(this, arguments);
      }
      return getIpAccountNonce;
    }()
  }, {
    key: "getToken",
    value: function() {
      var _getToken = _asyncToGenerator(_regenerator().m(function _callee4(ipId) {
        var ipAccount, _yield$ipAccount$toke, _yield$ipAccount$toke2, chainId, tokenContract, tokenId, _t4;
        return _regenerator().w(function(_context4) {
          while (1) switch (_context4.n) {
            case 0:
              _context4.p = 0;
              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, validateAddress(ipId));
              _context4.n = 1;
              return ipAccount.token();
            case 1:
              _yield$ipAccount$toke = _context4.v;
              _yield$ipAccount$toke2 = _slicedToArray(_yield$ipAccount$toke, 3);
              chainId = _yield$ipAccount$toke2[0];
              tokenContract = _yield$ipAccount$toke2[1];
              tokenId = _yield$ipAccount$toke2[2];
              return _context4.a(2, {
                chainId,
                tokenContract,
                tokenId
              });
            case 2:
              _context4.p = 2;
              _t4 = _context4.v;
              return _context4.a(2, handleError(_t4, "Failed to get the token"));
          }
        }, _callee4, this, [[0, 2]]);
      }));
      function getToken(_x4) {
        return _getToken.apply(this, arguments);
      }
      return getToken;
    }()
  }, {
    key: "setIpMetadata",
    value: function() {
      var _setIpMetadata = _asyncToGenerator(_regenerator().m(function _callee5(_ref) {
        var ipId, metadataURI, metadataHash, txOptions, data, _yield$this$execute, txHash, _t5;
        return _regenerator().w(function(_context5) {
          while (1) switch (_context5.n) {
            case 0:
              ipId = _ref.ipId, metadataURI = _ref.metadataURI, metadataHash = _ref.metadataHash, txOptions = _ref.txOptions;
              _context5.p = 1;
              data = encodeFunctionData({
                abi: coreMetadataModuleAbi,
                functionName: "setMetadataURI",
                args: [validateAddress(ipId), metadataURI, metadataHash]
              });
              _context5.n = 2;
              return this.execute({
                ipId,
                to: coreMetadataModuleAddress[this.chainId],
                data,
                value: 0,
                txOptions: _objectSpread2(_objectSpread2({}, txOptions), {}, {
                  encodedTxDataOnly: false
                })
              });
            case 2:
              _yield$this$execute = _context5.v;
              txHash = _yield$this$execute.txHash;
              return _context5.a(2, txHash);
            case 3:
              _context5.p = 3;
              _t5 = _context5.v;
              return _context5.a(2, handleError(_t5, "Failed to set the IP metadata"));
          }
        }, _callee5, this, [[1, 3]]);
      }));
      function setIpMetadata(_x5) {
        return _setIpMetadata.apply(this, arguments);
      }
      return setIpMetadata;
    }()
  }, {
    key: "transferErc20",
    value: function() {
      var _transferErc = _asyncToGenerator(_regenerator().m(function _callee6(_ref2) {
        var _this = this;
        var ipId, tokens, txOptions, ipAccount, calls, txHash, _t6;
        return _regenerator().w(function(_context6) {
          while (1) switch (_context6.n) {
            case 0:
              ipId = _ref2.ipId, tokens = _ref2.tokens, txOptions = _ref2.txOptions;
              _context6.p = 1;
              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, validateAddress(ipId));
              calls = tokens.map(function(_ref3) {
                var token = _ref3.address, target = _ref3.target, amount = _ref3.amount;
                var encodedData;
                if (validateAddress(token) === WIP_TOKEN_ADDRESS) {
                  encodedData = _this.wrappedIpClient.transferEncode({
                    to: validateAddress(target),
                    amount: BigInt(amount)
                  }).data;
                } else {
                  encodedData = _this.erc20Client.transferEncode({
                    to: validateAddress(target),
                    value: BigInt(amount)
                  }).data;
                }
                return {
                  target: token,
                  data: encodedData,
                  value: 0n
                };
              });
              _context6.n = 2;
              return ipAccount.executeBatch({
                calls,
                operation: 0
              });
            case 2:
              txHash = _context6.v;
              return _context6.a(2, waitForTxReceipt({
                txHash,
                txOptions,
                rpcClient: this.rpcClient
              }));
            case 3:
              _context6.p = 3;
              _t6 = _context6.v;
              return _context6.a(2, handleError(_t6, "Failed to transfer Erc20"));
          }
        }, _callee6, this, [[1, 3]]);
      }));
      function transferErc20(_x6) {
        return _transferErc.apply(this, arguments);
      }
      return transferErc20;
    }()
  }]);
}();
var SignatureMethodType = function(SignatureMethodType2) {
  SignatureMethodType2["REGISTER_IP_AND_MAKE_DERIVATIVE_AND_DEPLOY_ROYALTY_VAULT"] = "registerIpAndMakeDerivativeAndDeployRoyaltyVault";
  SignatureMethodType2["DISTRIBUTE_ROYALTY_TOKENS"] = "distributeRoyaltyTokens";
  SignatureMethodType2["REGISTER_DERIVATIVE_IP"] = "registerDerivativeIp";
  SignatureMethodType2["REGISTER_IP_AND_ATTACH_PIL_TERMS_AND_DEPLOY_ROYALTY_VAULT"] = "registerIpAndAttachPilTermsAndDeployRoyaltyVault";
  SignatureMethodType2["REGISTER_IP_AND_ATTACH_PIL_TERMS"] = "registerIpAndAttachPilTerms";
  SignatureMethodType2["REGISTER_IP_AND_MAKE_DERIVATIVE_WITH_LICENSE_TOKENS"] = "registerIpAndMakeDerivativeWithLicenseTokens";
  SignatureMethodType2["REGISTER_PIL_TERMS_AND_ATTACH"] = "registerPilTermsAndAttach";
  SignatureMethodType2["REGISTER"] = "register";
  SignatureMethodType2["BATCH_REGISTER_DERIVATIVE"] = "batchRegisterDerivative";
  return SignatureMethodType2;
}({});
var predictMintingLicenseFee = function() {
  var _ref2 = _asyncToGenerator(_regenerator().m(function _callee(_ref) {
    var predictMintingFeeRequest, rpcClient, chainId, walletAddress, result;
    return _regenerator().w(function(_context) {
      while (1) switch (_context.n) {
        case 0:
          predictMintingFeeRequest = _ref.predictMintingFeeRequest, rpcClient = _ref.rpcClient, chainId = _ref.chainId, walletAddress = _ref.walletAddress;
          _context.n = 1;
          return rpcClient.readContract({
            abi: licensingModuleAbi,
            address: licensingModuleAddress[chainId],
            functionName: "predictMintingLicenseFee",
            args: [predictMintingFeeRequest.licensorIpId, predictMintingFeeRequest.licenseTemplate, predictMintingFeeRequest.licenseTermsId, predictMintingFeeRequest.amount, predictMintingFeeRequest.receiver, predictMintingFeeRequest.royaltyContext],
            account: walletAddress
          });
        case 1:
          result = _context.v;
          return _context.a(2, {
            currencyToken: result[0],
            tokenAmount: result[1]
          });
      }
    }, _callee);
  }));
  return function predictMintingLicenseFee2(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var calculateDerivativeMintingFee = function() {
  var _ref4 = _asyncToGenerator(_regenerator().m(function _callee2(_ref3) {
    var derivData, rpcClient, chainId, wallet, sender, walletAddress, totalDerivativeMintingFee, i, derivativeMintingFee;
    return _regenerator().w(function(_context2) {
      while (1) switch (_context2.n) {
        case 0:
          derivData = _ref3.derivData, rpcClient = _ref3.rpcClient, chainId = _ref3.chainId, wallet = _ref3.wallet, sender = _ref3.sender;
          walletAddress = sender || wallet.account.address;
          totalDerivativeMintingFee = 0n;
          i = 0;
        case 1:
          if (!(i < derivData.parentIpIds.length)) {
            _context2.n = 4;
            break;
          }
          _context2.n = 2;
          return calculateLicenseWipMintFee({
            predictMintingFeeRequest: {
              licensorIpId: derivData.parentIpIds[i],
              licenseTemplate: derivData.licenseTemplate,
              licenseTermsId: derivData.licenseTermsIds[i],
              receiver: walletAddress,
              amount: 1n,
              royaltyContext: zeroAddress
            },
            rpcClient,
            chainId,
            walletAddress
          });
        case 2:
          derivativeMintingFee = _context2.v;
          totalDerivativeMintingFee += derivativeMintingFee;
        case 3:
          i++;
          _context2.n = 1;
          break;
        case 4:
          return _context2.a(2, totalDerivativeMintingFee);
      }
    }, _callee2);
  }));
  return function calculateDerivativeMintingFee2(_x2) {
    return _ref4.apply(this, arguments);
  };
}();
var calculateLicenseWipMintFee = function() {
  var _ref6 = _asyncToGenerator(_regenerator().m(function _callee3(_ref5) {
    var predictMintingFeeRequest, rpcClient, chainId, walletAddress, fee;
    return _regenerator().w(function(_context3) {
      while (1) switch (_context3.n) {
        case 0:
          predictMintingFeeRequest = _ref5.predictMintingFeeRequest, rpcClient = _ref5.rpcClient, chainId = _ref5.chainId, walletAddress = _ref5.walletAddress;
          _context3.n = 1;
          return predictMintingLicenseFee({
            predictMintingFeeRequest,
            rpcClient,
            chainId,
            walletAddress
          });
        case 1:
          fee = _context3.v;
          if (!(fee.currencyToken !== WIP_TOKEN_ADDRESS)) {
            _context3.n = 2;
            break;
          }
          return _context3.a(2, 0n);
        case 2:
          return _context3.a(2, fee.tokenAmount);
      }
    }, _callee3);
  }));
  return function calculateLicenseWipMintFee2(_x3) {
    return _ref6.apply(this, arguments);
  };
}();
var calculateSPGWipMintFee = function() {
  var _ref7 = _asyncToGenerator(_regenerator().m(function _callee4(spgNftClient) {
    var token;
    return _regenerator().w(function(_context4) {
      while (1) switch (_context4.n) {
        case 0:
          _context4.n = 1;
          return spgNftClient.mintFeeToken();
        case 1:
          token = _context4.v;
          if (!(token !== WIP_TOKEN_ADDRESS)) {
            _context4.n = 2;
            break;
          }
          return _context4.a(2, 0n);
        case 2:
          _context4.n = 3;
          return spgNftClient.mintFee();
        case 3:
          return _context4.a(2, _context4.v);
      }
    }, _callee4);
  }));
  return function calculateSPGWipMintFee2(_x4) {
    return _ref7.apply(this, arguments);
  };
}();
var generateOperationSignature = function() {
  var _ref2 = _asyncToGenerator(_regenerator().m(function _callee(_ref) {
    var deadline, ipIdAddress, methodType, ipRoyaltyVault, totalAmount, state, encodeData, wallet, chainId, baseConfig, royaltyTokenDistributionWorkflowsAddr, coreMetadataModuleAddr, licensingModuleAddr, derivativeWorkflowsAddr, licenseAttachmentWorkflowsAddr, registrationWorkflowsAddr, signatureConfigs, signatureRequest, _yield$getSignature, signature, _yield$getPermissionS, _signature;
    return _regenerator().w(function(_context) {
      while (1) switch (_context.n) {
        case 0:
          deadline = _ref.deadline, ipIdAddress = _ref.ipIdAddress, methodType = _ref.methodType, ipRoyaltyVault = _ref.ipRoyaltyVault, totalAmount = _ref.totalAmount, state = _ref.state, encodeData = _ref.encodeData, wallet = _ref.wallet, chainId = _ref.chainId;
          baseConfig = {
            ipId: ipIdAddress,
            deadline,
            state: toHex(0, {
              size: 32
            }),
            wallet,
            chainId: chain2[chainId]
          };
          if (!(methodType === SignatureMethodType.DISTRIBUTE_ROYALTY_TOKENS && (!ipRoyaltyVault || !state || !totalAmount || !encodeData))) {
            _context.n = 1;
            break;
          }
          throw new Error("ipRoyaltyVault, state, totalAmount, and encodeData are required for distributing royalty tokens.");
        case 1:
          if (!(methodType === SignatureMethodType.REGISTER_PIL_TERMS_AND_ATTACH && !state)) {
            _context.n = 2;
            break;
          }
          throw new Error("State is required for registering PIL terms and attaching.");
        case 2:
          if (!(methodType === SignatureMethodType.BATCH_REGISTER_DERIVATIVE && (!state || !encodeData))) {
            _context.n = 3;
            break;
          }
          throw new Error("State and encodeData are required for batch registering derivative.");
        case 3:
          royaltyTokenDistributionWorkflowsAddr = royaltyTokenDistributionWorkflowsAddress[chainId];
          coreMetadataModuleAddr = coreMetadataModuleAddress[chainId];
          licensingModuleAddr = licensingModuleAddress[chainId];
          derivativeWorkflowsAddr = derivativeWorkflowsAddress[chainId];
          licenseAttachmentWorkflowsAddr = licenseAttachmentWorkflowsAddress[chainId];
          registrationWorkflowsAddr = registrationWorkflowsAddress[chainId];
          signatureConfigs = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, SignatureMethodType.REGISTER_IP_AND_MAKE_DERIVATIVE_AND_DEPLOY_ROYALTY_VAULT, _objectSpread2(_objectSpread2({}, baseConfig), {}, {
            permissions: [{
              ipId: ipIdAddress,
              signer: royaltyTokenDistributionWorkflowsAddr,
              to: coreMetadataModuleAddr,
              permission: AccessPermission.ALLOW,
              func: getFunctionSignature(coreMetadataModuleAbi, "setAll")
            }, {
              ipId: ipIdAddress,
              signer: royaltyTokenDistributionWorkflowsAddr,
              to: licensingModuleAddr,
              permission: AccessPermission.ALLOW,
              func: getFunctionSignature(licensingModuleAbi, "registerDerivative")
            }]
          })), SignatureMethodType.DISTRIBUTE_ROYALTY_TOKENS, _objectSpread2(_objectSpread2({}, baseConfig), {}, {
            verifyingContract: ipIdAddress,
            deadline,
            state,
            to: ipRoyaltyVault,
            encodeData
          })), SignatureMethodType.REGISTER_DERIVATIVE_IP, _objectSpread2(_objectSpread2({}, baseConfig), {}, {
            permissions: [{
              ipId: ipIdAddress,
              signer: derivativeWorkflowsAddr,
              to: coreMetadataModuleAddr,
              permission: AccessPermission.ALLOW,
              func: getFunctionSignature(coreMetadataModuleAbi, "setAll")
            }, {
              ipId: ipIdAddress,
              signer: derivativeWorkflowsAddr,
              to: licensingModuleAddr,
              permission: AccessPermission.ALLOW,
              func: getFunctionSignature(licensingModuleAbi, "registerDerivative")
            }]
          })), SignatureMethodType.REGISTER_IP_AND_ATTACH_PIL_TERMS_AND_DEPLOY_ROYALTY_VAULT, _objectSpread2(_objectSpread2({}, baseConfig), {}, {
            permissions: [{
              ipId: ipIdAddress,
              signer: royaltyTokenDistributionWorkflowsAddr,
              to: coreMetadataModuleAddr,
              permission: AccessPermission.ALLOW,
              func: getFunctionSignature(coreMetadataModuleAbi, "setAll")
            }, {
              ipId: ipIdAddress,
              signer: royaltyTokenDistributionWorkflowsAddr,
              to: licensingModuleAddr,
              permission: AccessPermission.ALLOW,
              func: getFunctionSignature(licensingModuleAbi, "attachLicenseTerms")
            }, {
              ipId: ipIdAddress,
              signer: royaltyTokenDistributionWorkflowsAddr,
              to: licensingModuleAddr,
              permission: AccessPermission.ALLOW,
              func: getFunctionSignature(licensingModuleAbi, "setLicensingConfig")
            }]
          })), SignatureMethodType.REGISTER_IP_AND_ATTACH_PIL_TERMS, _objectSpread2(_objectSpread2({}, baseConfig), {}, {
            permissions: [{
              ipId: ipIdAddress,
              signer: licenseAttachmentWorkflowsAddr,
              to: coreMetadataModuleAddr,
              permission: AccessPermission.ALLOW,
              func: getFunctionSignature(coreMetadataModuleAbi, "setAll")
            }, {
              ipId: ipIdAddress,
              signer: licenseAttachmentWorkflowsAddr,
              to: licensingModuleAddr,
              permission: AccessPermission.ALLOW,
              func: getFunctionSignature(licensingModuleAbi, "attachLicenseTerms")
            }, {
              ipId: ipIdAddress,
              signer: licenseAttachmentWorkflowsAddr,
              to: licensingModuleAddr,
              permission: AccessPermission.ALLOW,
              func: getFunctionSignature(licensingModuleAbi, "setLicensingConfig")
            }]
          })), SignatureMethodType.REGISTER_IP_AND_MAKE_DERIVATIVE_WITH_LICENSE_TOKENS, _objectSpread2(_objectSpread2({}, baseConfig), {}, {
            permissions: [{
              ipId: ipIdAddress,
              signer: derivativeWorkflowsAddr,
              to: coreMetadataModuleAddr,
              permission: AccessPermission.ALLOW,
              func: getFunctionSignature(coreMetadataModuleAbi, "setAll")
            }, {
              ipId: ipIdAddress,
              signer: derivativeWorkflowsAddr,
              to: licensingModuleAddr,
              permission: AccessPermission.ALLOW,
              func: getFunctionSignature(licensingModuleAbi, "registerDerivativeWithLicenseTokens")
            }]
          })), SignatureMethodType.REGISTER_PIL_TERMS_AND_ATTACH, _objectSpread2(_objectSpread2({}, baseConfig), {}, {
            state,
            permissions: [{
              ipId: ipIdAddress,
              signer: licenseAttachmentWorkflowsAddr,
              to: licensingModuleAddr,
              permission: AccessPermission.ALLOW,
              func: getFunctionSignature(licensingModuleAbi, "attachLicenseTerms")
            }, {
              ipId: ipIdAddress,
              signer: licenseAttachmentWorkflowsAddr,
              to: licensingModuleAddr,
              permission: AccessPermission.ALLOW,
              func: getFunctionSignature(licensingModuleAbi, "setLicensingConfig")
            }]
          })), SignatureMethodType.REGISTER, _objectSpread2(_objectSpread2({}, baseConfig), {}, {
            permissions: [{
              ipId: ipIdAddress,
              signer: registrationWorkflowsAddr,
              to: coreMetadataModuleAddr,
              permission: AccessPermission.ALLOW,
              func: getFunctionSignature(coreMetadataModuleAbi, "setAll")
            }]
          })), SignatureMethodType.BATCH_REGISTER_DERIVATIVE, _objectSpread2(_objectSpread2({}, baseConfig), {}, {
            state,
            to: licensingModuleAddr,
            encodeData,
            verifyingContract: ipIdAddress
          }));
          signatureRequest = signatureConfigs[methodType];
          if (!((methodType === SignatureMethodType.DISTRIBUTE_ROYALTY_TOKENS || methodType === SignatureMethodType.BATCH_REGISTER_DERIVATIVE) && signatureRequest)) {
            _context.n = 5;
            break;
          }
          _context.n = 4;
          return getSignature(signatureRequest);
        case 4:
          _yield$getSignature = _context.v;
          signature = _yield$getSignature.signature;
          return _context.a(2, signature);
        case 5:
          _context.n = 6;
          return getPermissionSignature(signatureRequest);
        case 6:
          _yield$getPermissionS = _context.v;
          _signature = _yield$getPermissionS.signature;
          return _context.a(2, _signature);
        case 7:
          return _context.a(2);
      }
    }, _callee);
  }));
  return function generateOperationSignature2(_x) {
    return _ref2.apply(this, arguments);
  };
}();
function _regeneratorValues(e) {
  if (null != e) {
    var t = e["function" == typeof Symbol && Symbol.iterator || "@@iterator"], r = 0;
    if (t) return t.call(e);
    if ("function" == typeof e.next) return e;
    if (!isNaN(e.length)) return {
      next: function() {
        return e && r >= e.length && (e = void 0), {
          value: e && e[r++],
          done: !e
        };
      }
    };
  }
  throw new TypeError(typeof e + " is not iterable");
}
function _regeneratorKeys(e) {
  var n = Object(e), r = [];
  for (var t in n) r.unshift(t);
  return function e2() {
    for (; r.length; ) if ((t = r.pop()) in n) return e2.value = t, e2.done = false, e2;
    return e2.done = true, e2;
  };
}
var getPublicMinting = function() {
  var _ref = _asyncToGenerator(_regenerator().m(function _callee(spgNftContract, rpcClient) {
    var spgNftContractImpl;
    return _regenerator().w(function(_context) {
      while (1) switch (_context.n) {
        case 0:
          spgNftContractImpl = new SpgnftImplReadOnlyClient(rpcClient, spgNftContract);
          _context.n = 1;
          return spgNftContractImpl.publicMinting();
        case 1:
          return _context.a(2, _context.v);
      }
    }, _callee);
  }));
  return function getPublicMinting2(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
var validateLicenseTermsData = function() {
  var _ref2 = _asyncToGenerator(_regenerator().m(function _callee2(licenseTermsData, rpcClient) {
    var licenseTerms, processedLicenseTermsData, i, licenseTerm, licensingConfig;
    return _regenerator().w(function(_context2) {
      while (1) switch (_context2.n) {
        case 0:
          licenseTerms = [];
          processedLicenseTermsData = [];
          i = 0;
        case 1:
          if (!(i < licenseTermsData.length)) {
            _context2.n = 5;
            break;
          }
          _context2.n = 2;
          return validateLicenseTerms(licenseTermsData[i].terms, rpcClient);
        case 2:
          licenseTerm = _context2.v;
          licensingConfig = validateLicenseConfig(licenseTermsData[i].licensingConfig);
          if (!(licensingConfig.mintingFee > 0 && licenseTerm.royaltyPolicy === zeroAddress)) {
            _context2.n = 3;
            break;
          }
          throw new Error("A royalty policy must be provided when the minting fee is greater than 0.");
        case 3:
          licenseTerms.push(licenseTerm);
          processedLicenseTermsData.push({
            terms: licenseTerm,
            licensingConfig
          });
        case 4:
          i++;
          _context2.n = 1;
          break;
        case 5:
          return _context2.a(2, {
            licenseTerms,
            licenseTermsData: processedLicenseTermsData
          });
      }
    }, _callee2);
  }));
  return function validateLicenseTermsData2(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
var getRoyaltyShares = function getRoyaltyShares2(royaltyShares) {
  var actualTotal = 0;
  var sum = 0;
  var shares = royaltyShares.map(function(share) {
    if (share.percentage <= 0) {
      throw new Error("The percentage of the royalty shares must be greater than 0.");
    }
    if (share.percentage > 100) {
      throw new Error("The percentage of the royalty shares must be less than or equal to 100.");
    }
    sum += share.percentage;
    if (sum > 100) {
      throw new Error("The sum of the royalty shares cannot exceeds 100.");
    }
    var value = share.percentage / 100 * royaltySharesTotalSupply;
    actualTotal += value;
    return _objectSpread2(_objectSpread2({}, share), {}, {
      percentage: value
    });
  });
  return {
    royaltyShares: shares,
    totalAmount: actualTotal
  };
};
var validateDerivativeData = function() {
  var _ref4 = _asyncToGenerator(_regenerator().m(function _callee3(_ref3) {
    var derivativeDataInput, rpcClient, wallet, chainId, licenseTemplateAddress, ipAssetRegistryClient, licenseRegistryReadOnlyClient, derivativeData, i, parentId, isParentIpRegistered, isAttachedLicenseTerms, _yield$licenseRegistr, royaltyPercent;
    return _regenerator().w(function(_context3) {
      while (1) switch (_context3.n) {
        case 0:
          derivativeDataInput = _ref3.derivativeDataInput, rpcClient = _ref3.rpcClient, wallet = _ref3.wallet, chainId = _ref3.chainId;
          licenseTemplateAddress = piLicenseTemplateAddress[chainId];
          ipAssetRegistryClient = new IpAssetRegistryClient(rpcClient, wallet);
          licenseRegistryReadOnlyClient = new LicenseRegistryReadOnlyClient(rpcClient);
          derivativeData = {
            parentIpIds: derivativeDataInput.parentIpIds,
            licenseTermsIds: derivativeDataInput.licenseTermsIds.map(function(id) {
              return BigInt(id);
            }),
            licenseTemplate: validateAddress(derivativeDataInput.licenseTemplate || licenseTemplateAddress),
            royaltyContext: zeroAddress,
            maxMintingFee: BigInt(derivativeDataInput.maxMintingFee || 0),
            maxRts: Number(derivativeDataInput.maxRts || MAX_ROYALTY_TOKEN),
            maxRevenueShare: getRevenueShare(derivativeDataInput.maxRevenueShare || 100, RevShareType.MAX_REVENUE_SHARE)
          };
          if (!(derivativeData.parentIpIds.length === 0)) {
            _context3.n = 1;
            break;
          }
          throw new Error("The parent IP IDs must be provided.");
        case 1:
          if (!(derivativeData.licenseTermsIds.length === 0)) {
            _context3.n = 2;
            break;
          }
          throw new Error("The license terms IDs must be provided.");
        case 2:
          if (!(derivativeData.parentIpIds.length !== derivativeData.licenseTermsIds.length)) {
            _context3.n = 3;
            break;
          }
          throw new Error("The number of parent IP IDs must match the number of license terms IDs.");
        case 3:
          if (!(derivativeData.maxMintingFee < 0)) {
            _context3.n = 4;
            break;
          }
          throw new Error("The maxMintingFee must be greater than 0.");
        case 4:
          validateMaxRts(derivativeData.maxRts);
          i = 0;
        case 5:
          if (!(i < derivativeData.parentIpIds.length)) {
            _context3.n = 12;
            break;
          }
          parentId = derivativeData.parentIpIds[i];
          _context3.n = 6;
          return ipAssetRegistryClient.isRegistered({
            id: validateAddress(parentId)
          });
        case 6:
          isParentIpRegistered = _context3.v;
          if (isParentIpRegistered) {
            _context3.n = 7;
            break;
          }
          throw new Error("The parent IP with id ".concat(parentId, " is not registered."));
        case 7:
          _context3.n = 8;
          return licenseRegistryReadOnlyClient.hasIpAttachedLicenseTerms({
            ipId: parentId,
            licenseTemplate: derivativeData.licenseTemplate,
            licenseTermsId: derivativeData.licenseTermsIds[i]
          });
        case 8:
          isAttachedLicenseTerms = _context3.v;
          if (isAttachedLicenseTerms) {
            _context3.n = 9;
            break;
          }
          throw new Error("License terms id ".concat(derivativeData.licenseTermsIds[i], " must be attached to the parent ipId ").concat(derivativeData.parentIpIds[i], " before registering derivative."));
        case 9:
          _context3.n = 10;
          return licenseRegistryReadOnlyClient.getRoyaltyPercent({
            ipId: parentId,
            licenseTemplate: derivativeData.licenseTemplate,
            licenseTermsId: derivativeData.licenseTermsIds[i]
          });
        case 10:
          _yield$licenseRegistr = _context3.v;
          royaltyPercent = _yield$licenseRegistr.royaltyPercent;
          if (!(derivativeData.maxRevenueShare !== 0 && royaltyPercent > derivativeData.maxRevenueShare)) {
            _context3.n = 11;
            break;
          }
          throw new Error("The royalty percent for the parent IP with id ".concat(parentId, " is greater than the maximum revenue share ").concat(derivativeData.maxRevenueShare, "."));
        case 11:
          i++;
          _context3.n = 5;
          break;
        case 12:
          return _context3.a(2, derivativeData);
      }
    }, _callee3);
  }));
  return function validateDerivativeData2(_x5) {
    return _ref4.apply(this, arguments);
  };
}();
var validateMaxRts = function validateMaxRts2(maxRts) {
  if (isNaN(maxRts)) {
    throw new Error("The maxRts must be a number.");
  }
  if (maxRts < 0 || maxRts > MAX_ROYALTY_TOKEN) {
    throw new Error("The maxRts must be greater than 0 and less than ".concat(MAX_ROYALTY_TOKEN, "."));
  }
};
var getIpIdAddress = function() {
  var _ref6 = _asyncToGenerator(_regenerator().m(function _callee4(_ref5) {
    var nftContract, tokenId, rpcClient, wallet, chainId, ipAssetRegistryClient, ipId;
    return _regenerator().w(function(_context4) {
      while (1) switch (_context4.n) {
        case 0:
          nftContract = _ref5.nftContract, tokenId = _ref5.tokenId, rpcClient = _ref5.rpcClient, wallet = _ref5.wallet, chainId = _ref5.chainId;
          ipAssetRegistryClient = new IpAssetRegistryClient(rpcClient, wallet);
          _context4.n = 1;
          return ipAssetRegistryClient.ipId({
            chainId: BigInt(chain2[chainId]),
            tokenContract: validateAddress(nftContract),
            tokenId: BigInt(tokenId)
          });
        case 1:
          ipId = _context4.v;
          return _context4.a(2, ipId);
      }
    }, _callee4);
  }));
  return function getIpIdAddress2(_x6) {
    return _ref6.apply(this, arguments);
  };
}();
var getCalculatedDeadline = function() {
  var _ref7 = _asyncToGenerator(_regenerator().m(function _callee5(rpcClient, requestDeadline) {
    var blockTimestamp;
    return _regenerator().w(function(_context5) {
      while (1) switch (_context5.n) {
        case 0:
          _context5.n = 1;
          return rpcClient.getBlock();
        case 1:
          blockTimestamp = _context5.v.timestamp;
          return _context5.a(2, getDeadline(blockTimestamp, requestDeadline));
      }
    }, _callee5);
  }));
  return function getCalculatedDeadline2(_x7, _x8) {
    return _ref7.apply(this, arguments);
  };
}();
var mergeSpenders = function mergeSpenders2(previousSpenders, newSpenders) {
  if (!newSpenders || newSpenders.length === 0) {
    return previousSpenders;
  }
  return newSpenders.reduce(function(acc, spender) {
    if (!spender || !spender.address) {
      return acc;
    }
    var existingSpender = acc.find(function(s) {
      return s.address === spender.address;
    });
    if (!existingSpender) {
      acc.push(_objectSpread2(_objectSpread2({}, spender), {}, {
        amount: spender.amount || 0n
      }));
    } else {
      existingSpender.amount = (existingSpender.amount || 0n) + (spender.amount || 0n);
    }
    return acc;
  }, _toConsumableArray(previousSpenders));
};
var aggregateTransformIpRegistrationWorkflow = function aggregateTransformIpRegistrationWorkflow2(transferWorkflowResponses, multicall3Address2, disableMulticallWhenPossible) {
  var aggregateRegistrationRequest = {};
  var _iterator = _createForOfIteratorHelper(transferWorkflowResponses), _step;
  try {
    var _loop = function _loop2() {
      var res = _step.value;
      var spenders = res.spenders, totalFees = res.totalFees, encodedTxData = res.encodedTxData, workflowClient = res.workflowClient, isUseMulticall3 = res.isUseMulticall3;
      var shouldUseMulticall = isUseMulticall3;
      if (disableMulticallWhenPossible) {
        shouldUseMulticall = false;
      }
      var targetAddress = shouldUseMulticall ? multicall3Address2 : workflowClient.address;
      if (!aggregateRegistrationRequest[targetAddress]) {
        aggregateRegistrationRequest[targetAddress] = {
          spenders: [],
          totalFees: 0n,
          encodedTxData: [],
          contractCall: []
        };
      }
      var currentRequest = aggregateRegistrationRequest[targetAddress];
      currentRequest.spenders = mergeSpenders(currentRequest.spenders, spenders || []);
      currentRequest.totalFees += totalFees || 0n;
      currentRequest.encodedTxData = currentRequest.encodedTxData.concat(encodedTxData);
      if (isUseMulticall3 || disableMulticallWhenPossible) {
        currentRequest.contractCall = currentRequest.contractCall.concat(res.contractCall);
      } else {
        currentRequest.contractCall = [function() {
          return workflowClient.multicall({
            data: currentRequest.encodedTxData.map(function(tx) {
              return tx.data;
            })
          });
        }];
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return aggregateRegistrationRequest;
};
var handleMulticall = function() {
  var _ref2 = _asyncToGenerator(_regenerator().m(function _callee2(_ref) {
    var transferWorkflowResponses, multicall3Address2, wipOptions, rpcClient, wallet, walletAddress, aggregateRegistrationRequest, txResponses, _loop2, key, _t2, _t3;
    return _regenerator().w(function(_context3) {
      while (1) switch (_context3.n) {
        case 0:
          transferWorkflowResponses = _ref.transferWorkflowResponses, multicall3Address2 = _ref.multicall3Address, wipOptions = _ref.wipOptions, rpcClient = _ref.rpcClient, wallet = _ref.wallet, walletAddress = _ref.walletAddress;
          aggregateRegistrationRequest = aggregateTransformIpRegistrationWorkflow(transferWorkflowResponses, multicall3Address2, (wipOptions === null || wipOptions === void 0 ? void 0 : wipOptions.useMulticallWhenPossible) === false);
          txResponses = [];
          _loop2 = _regenerator().m(function _loop22() {
            var _aggregateRegistratio, spenders, totalFees, encodedTxData, contractCall, contractCalls, useMulticallWhenPossible, txResponse;
            return _regenerator().w(function(_context2) {
              while (1) switch (_context2.n) {
                case 0:
                  _aggregateRegistratio = aggregateRegistrationRequest[key], spenders = _aggregateRegistratio.spenders, totalFees = _aggregateRegistratio.totalFees, encodedTxData = _aggregateRegistratio.encodedTxData, contractCall = _aggregateRegistratio.contractCall;
                  contractCalls = function() {
                    var _ref3 = _asyncToGenerator(_regenerator().m(function _callee() {
                      var txHashes, _iterator2, _step2, call, txHash, _t;
                      return _regenerator().w(function(_context) {
                        while (1) switch (_context.n) {
                          case 0:
                            txHashes = [];
                            _iterator2 = _createForOfIteratorHelper(contractCall);
                            _context.p = 1;
                            _iterator2.s();
                          case 2:
                            if ((_step2 = _iterator2.n()).done) {
                              _context.n = 5;
                              break;
                            }
                            call = _step2.value;
                            _context.n = 3;
                            return call();
                          case 3:
                            txHash = _context.v;
                            txHashes.push(txHash);
                          case 4:
                            _context.n = 2;
                            break;
                          case 5:
                            _context.n = 7;
                            break;
                          case 6:
                            _context.p = 6;
                            _t = _context.v;
                            _iterator2.e(_t);
                          case 7:
                            _context.p = 7;
                            _iterator2.f();
                            return _context.f(7);
                          case 8:
                            return _context.a(2, txHashes);
                        }
                      }, _callee, null, [[1, 6, 7, 8]]);
                    }));
                    return function contractCalls2() {
                      return _ref3.apply(this, arguments);
                    };
                  }();
                  useMulticallWhenPossible = key === multicall3Address2 ? true : false;
                  _context2.n = 1;
                  return contractCallWithFees({
                    totalFees,
                    options: {
                      wipOptions: _objectSpread2(_objectSpread2({}, wipOptions), {}, {
                        useMulticallWhenPossible
                      })
                    },
                    multicall3Address: multicall3Address2,
                    rpcClient,
                    tokenSpenders: spenders,
                    contractCall: contractCalls,
                    sender: walletAddress,
                    wallet,
                    encodedTxs: encodedTxData
                  });
                case 1:
                  txResponse = _context2.v;
                  txResponses.push.apply(txResponses, _toConsumableArray(Array.isArray(txResponse) ? txResponse : [txResponse]));
                case 2:
                  return _context2.a(2);
              }
            }, _loop22);
          });
          _t2 = _regeneratorKeys(aggregateRegistrationRequest);
        case 1:
          if ((_t3 = _t2()).done) {
            _context3.n = 3;
            break;
          }
          key = _t3.value;
          return _context3.d(_regeneratorValues(_loop2()), 2);
        case 2:
          _context3.n = 1;
          break;
        case 3:
          return _context3.a(2, txResponses);
      }
    }, _callee2);
  }));
  return function handleMulticall2(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var transformRegistrationRequest = function() {
  var _ref2 = _asyncToGenerator(_regenerator().m(function _callee(_ref) {
    var request, rpcClient, wallet, chainId;
    return _regenerator().w(function(_context) {
      while (1) switch (_context.n) {
        case 0:
          request = _ref.request, rpcClient = _ref.rpcClient, wallet = _ref.wallet, chainId = _ref.chainId;
          if (!("spgNftContract" in request)) {
            _context.n = 1;
            break;
          }
          return _context.a(2, handleMintAndRegisterRequest({
            request,
            rpcClient,
            wallet,
            chainId
          }));
        case 1:
          if (!("nftContract" in request && "tokenId" in request)) {
            _context.n = 2;
            break;
          }
          return _context.a(2, handleRegisterRequest({
            request,
            rpcClient,
            wallet,
            chainId
          }));
        case 2:
          throw new Error("Invalid registration request type");
        case 3:
          return _context.a(2);
      }
    }, _callee);
  }));
  return function transformRegistrationRequest2(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var handleRegisterRequest = function() {
  var _ref4 = _asyncToGenerator(_regenerator().m(function _callee2(_ref3) {
    var request, rpcClient, wallet, chainId, ipIdAddress, baseRequest, calculatedDeadline, royaltyTokenDistributionWorkflowsClient, licenseAttachmentWorkflowsClient, derivativeWorkflowsClient, _yield$validateLicens, licenseTermsData, requestWithTerms, derivData, totalFees;
    return _regenerator().w(function(_context2) {
      while (1) switch (_context2.n) {
        case 0:
          request = _ref3.request, rpcClient = _ref3.rpcClient, wallet = _ref3.wallet, chainId = _ref3.chainId;
          _context2.n = 1;
          return getIpIdAddress({
            nftContract: validateAddress(request.nftContract),
            tokenId: BigInt(request.tokenId),
            rpcClient,
            wallet,
            chainId
          });
        case 1:
          ipIdAddress = _context2.v;
          baseRequest = {
            nftContract: validateAddress(request.nftContract),
            tokenId: BigInt(request.tokenId),
            ipMetadata: getIpMetadataForWorkflow(request.ipMetadata)
          };
          _context2.n = 2;
          return getCalculatedDeadline(rpcClient, request.deadline);
        case 2:
          calculatedDeadline = _context2.v;
          royaltyTokenDistributionWorkflowsClient = new RoyaltyTokenDistributionWorkflowsClient(rpcClient, wallet);
          licenseAttachmentWorkflowsClient = new LicenseAttachmentWorkflowsClient(rpcClient, wallet);
          derivativeWorkflowsClient = new DerivativeWorkflowsClient(rpcClient, wallet);
          if (!("licenseTermsData" in request)) {
            _context2.n = 7;
            break;
          }
          _context2.n = 3;
          return validateLicenseTermsData(request.licenseTermsData, rpcClient);
        case 3:
          _yield$validateLicens = _context2.v;
          licenseTermsData = _yield$validateLicens.licenseTermsData;
          requestWithTerms = _objectSpread2(_objectSpread2({}, baseRequest), {}, {
            licenseTermsData
          });
          if (!("royaltyShares" in request)) {
            _context2.n = 5;
            break;
          }
          _context2.n = 4;
          return transferRegisterIpAndAttachPilTermsAndDeployRoyaltyVaultRequest({
            request: requestWithTerms,
            royaltyTokenDistributionWorkflowsClient,
            chainId,
            wallet,
            calculatedDeadline,
            ipIdAddress,
            royaltyShares: request.royaltyShares
          });
        case 4:
          return _context2.a(2, _context2.v);
        case 5:
          _context2.n = 6;
          return transferRegisterIpAndAttachPilTermsRequest({
            request: requestWithTerms,
            licenseAttachmentWorkflowsClient,
            calculatedDeadline,
            ipIdAddress,
            wallet,
            chainId
          });
        case 6:
          return _context2.a(2, _context2.v);
        case 7:
          if (!("derivData" in request)) {
            _context2.n = 13;
            break;
          }
          _context2.n = 8;
          return validateDerivativeData({
            derivativeDataInput: request.derivData,
            rpcClient,
            chainId,
            wallet
          });
        case 8:
          derivData = _context2.v;
          _context2.n = 9;
          return calculateDerivativeMintingFee({
            derivData,
            rpcClient,
            chainId,
            wallet
          });
        case 9:
          totalFees = _context2.v;
          if (!("royaltyShares" in request)) {
            _context2.n = 11;
            break;
          }
          _context2.n = 10;
          return transferRegisterIpAndMakeDerivativeAndDeployRoyaltyVaultRequest({
            request: _objectSpread2(_objectSpread2({}, baseRequest), {}, {
              derivData
            }),
            calculatedDeadline,
            ipIdAddress,
            wallet,
            chainId,
            royaltyTokenDistributionWorkflowsClient,
            totalFees,
            royaltyShares: request.royaltyShares
          });
        case 10:
          return _context2.a(2, _context2.v);
        case 11:
          _context2.n = 12;
          return transferRegisterDerivativeIpRequest({
            request: _objectSpread2(_objectSpread2({}, baseRequest), {}, {
              derivData
            }),
            calculatedDeadline,
            ipIdAddress,
            wallet,
            chainId,
            derivativeWorkflowsClient,
            totalFees
          });
        case 12:
          return _context2.a(2, _context2.v);
        case 13:
          throw new Error("Invalid register request type");
        case 14:
          return _context2.a(2);
      }
    }, _callee2);
  }));
  return function handleRegisterRequest2(_x2) {
    return _ref4.apply(this, arguments);
  };
}();
var transferRegisterDerivativeIpRequest = function() {
  var _ref6 = _asyncToGenerator(_regenerator().m(function _callee3(_ref5) {
    var request, calculatedDeadline, ipIdAddress, wallet, chainId, derivativeWorkflowsClient, totalFees, signature, transformRequest;
    return _regenerator().w(function(_context3) {
      while (1) switch (_context3.n) {
        case 0:
          request = _ref5.request, calculatedDeadline = _ref5.calculatedDeadline, ipIdAddress = _ref5.ipIdAddress, wallet = _ref5.wallet, chainId = _ref5.chainId, derivativeWorkflowsClient = _ref5.derivativeWorkflowsClient, totalFees = _ref5.totalFees;
          _context3.n = 1;
          return generateOperationSignature({
            ipIdAddress,
            methodType: SignatureMethodType.REGISTER_DERIVATIVE_IP,
            deadline: calculatedDeadline,
            wallet,
            chainId
          });
        case 1:
          signature = _context3.v;
          transformRequest = _objectSpread2(_objectSpread2({}, request), {}, {
            sigMetadataAndRegister: {
              signer: wallet.account.address,
              deadline: calculatedDeadline,
              signature
            }
          });
          return _context3.a(2, {
            // The `TransformIpRegistrationWorkflowResponse` is a union of all the possible requests, so we need to explicitly cast the type.
            transformRequest,
            isUseMulticall3: false,
            spenders: [{
              address: derivativeWorkflowsClient.address,
              amount: totalFees
            }],
            totalFees,
            contractCall: function contractCall() {
              return derivativeWorkflowsClient.registerIpAndMakeDerivative(transformRequest);
            },
            workflowClient: derivativeWorkflowsClient,
            encodedTxData: {
              to: derivativeWorkflowsClient.address,
              data: encodeFunctionData({
                abi: derivativeWorkflowsAbi,
                functionName: "registerIpAndMakeDerivative",
                args: [transformRequest.nftContract, transformRequest.tokenId, transformRequest.derivData, transformRequest.ipMetadata, transformRequest.sigMetadataAndRegister]
              })
            }
          });
      }
    }, _callee3);
  }));
  return function transferRegisterDerivativeIpRequest2(_x3) {
    return _ref6.apply(this, arguments);
  };
}();
var transferRegisterIpAndAttachPilTermsAndDeployRoyaltyVaultRequest = function() {
  var _ref8 = _asyncToGenerator(_regenerator().m(function _callee4(_ref7) {
    var request, royaltyTokenDistributionWorkflowsClient, chainId, wallet, calculatedDeadline, ipIdAddress, royaltyShares, signature, transformRequest;
    return _regenerator().w(function(_context4) {
      while (1) switch (_context4.n) {
        case 0:
          request = _ref7.request, royaltyTokenDistributionWorkflowsClient = _ref7.royaltyTokenDistributionWorkflowsClient, chainId = _ref7.chainId, wallet = _ref7.wallet, calculatedDeadline = _ref7.calculatedDeadline, ipIdAddress = _ref7.ipIdAddress, royaltyShares = _ref7.royaltyShares;
          _context4.n = 1;
          return generateOperationSignature({
            ipIdAddress,
            methodType: SignatureMethodType.REGISTER_IP_AND_ATTACH_PIL_TERMS_AND_DEPLOY_ROYALTY_VAULT,
            deadline: calculatedDeadline,
            wallet,
            chainId
          });
        case 1:
          signature = _context4.v;
          transformRequest = _objectSpread2(_objectSpread2({}, request), {}, {
            sigMetadataAndAttachAndConfig: {
              signer: wallet.account.address,
              deadline: calculatedDeadline,
              signature
            }
          });
          return _context4.a(2, {
            // The `TransformIpRegistrationWorkflowResponse` is a union of all the possible requests, so we need to explicitly cast the type.
            transformRequest,
            isUseMulticall3: false,
            contractCall: function contractCall() {
              return royaltyTokenDistributionWorkflowsClient.registerIpAndAttachPilTermsAndDeployRoyaltyVault(transformRequest);
            },
            workflowClient: royaltyTokenDistributionWorkflowsClient,
            encodedTxData: {
              to: royaltyTokenDistributionWorkflowsClient.address,
              data: encodeFunctionData({
                abi: royaltyTokenDistributionWorkflowsAbi,
                functionName: "registerIpAndAttachPILTermsAndDeployRoyaltyVault",
                args: [transformRequest.nftContract, transformRequest.tokenId, transformRequest.ipMetadata, transformRequest.licenseTermsData, transformRequest.sigMetadataAndAttachAndConfig]
              })
            },
            extraData: {
              royaltyShares,
              deadline: calculatedDeadline
            }
          });
      }
    }, _callee4);
  }));
  return function transferRegisterIpAndAttachPilTermsAndDeployRoyaltyVaultRequest2(_x4) {
    return _ref8.apply(this, arguments);
  };
}();
var transferRegisterIpAndAttachPilTermsRequest = function() {
  var _ref0 = _asyncToGenerator(_regenerator().m(function _callee5(_ref9) {
    var request, licenseAttachmentWorkflowsClient, calculatedDeadline, ipIdAddress, wallet, chainId, signature, transformRequest;
    return _regenerator().w(function(_context5) {
      while (1) switch (_context5.n) {
        case 0:
          request = _ref9.request, licenseAttachmentWorkflowsClient = _ref9.licenseAttachmentWorkflowsClient, calculatedDeadline = _ref9.calculatedDeadline, ipIdAddress = _ref9.ipIdAddress, wallet = _ref9.wallet, chainId = _ref9.chainId;
          _context5.n = 1;
          return generateOperationSignature({
            ipIdAddress,
            methodType: SignatureMethodType.REGISTER_IP_AND_ATTACH_PIL_TERMS,
            deadline: calculatedDeadline,
            wallet,
            chainId
          });
        case 1:
          signature = _context5.v;
          transformRequest = _objectSpread2(_objectSpread2({}, request), {}, {
            sigMetadataAndAttachAndConfig: {
              signer: wallet.account.address,
              deadline: calculatedDeadline,
              signature
            }
          });
          return _context5.a(2, {
            // The `TransformIpRegistrationWorkflowResponse` is a union of all the possible requests, so we need to explicitly cast the type.
            transformRequest,
            isUseMulticall3: false,
            contractCall: function contractCall() {
              return licenseAttachmentWorkflowsClient.registerIpAndAttachPilTerms(transformRequest);
            },
            workflowClient: licenseAttachmentWorkflowsClient,
            encodedTxData: {
              to: licenseAttachmentWorkflowsClient.address,
              data: encodeFunctionData({
                abi: licenseAttachmentWorkflowsAbi,
                functionName: "registerIpAndAttachPILTerms",
                args: [transformRequest.nftContract, transformRequest.tokenId, transformRequest.ipMetadata, transformRequest.licenseTermsData, transformRequest.sigMetadataAndAttachAndConfig]
              })
            }
          });
      }
    }, _callee5);
  }));
  return function transferRegisterIpAndAttachPilTermsRequest2(_x5) {
    return _ref0.apply(this, arguments);
  };
}();
var transferRegisterIpAndMakeDerivativeAndDeployRoyaltyVaultRequest = function() {
  var _ref10 = _asyncToGenerator(_regenerator().m(function _callee6(_ref1) {
    var request, calculatedDeadline, ipIdAddress, wallet, chainId, royaltyTokenDistributionWorkflowsClient, totalFees, royaltyShares, signature, transformRequest;
    return _regenerator().w(function(_context6) {
      while (1) switch (_context6.n) {
        case 0:
          request = _ref1.request, calculatedDeadline = _ref1.calculatedDeadline, ipIdAddress = _ref1.ipIdAddress, wallet = _ref1.wallet, chainId = _ref1.chainId, royaltyTokenDistributionWorkflowsClient = _ref1.royaltyTokenDistributionWorkflowsClient, totalFees = _ref1.totalFees, royaltyShares = _ref1.royaltyShares;
          _context6.n = 1;
          return generateOperationSignature({
            ipIdAddress,
            methodType: SignatureMethodType.REGISTER_IP_AND_MAKE_DERIVATIVE_AND_DEPLOY_ROYALTY_VAULT,
            deadline: calculatedDeadline,
            wallet,
            chainId
          });
        case 1:
          signature = _context6.v;
          transformRequest = _objectSpread2(_objectSpread2({}, request), {}, {
            sigMetadataAndRegister: {
              signer: wallet.account.address,
              deadline: calculatedDeadline,
              signature
            }
          });
          return _context6.a(2, {
            // The `TransformIpRegistrationWorkflowResponse` is a union of all the possible requests, so we need to explicitly cast the type.
            transformRequest,
            isUseMulticall3: false,
            spenders: [{
              address: royaltyTokenDistributionWorkflowsClient.address,
              amount: totalFees
            }],
            totalFees,
            contractCall: function contractCall() {
              return royaltyTokenDistributionWorkflowsClient.registerIpAndMakeDerivativeAndDeployRoyaltyVault(transformRequest);
            },
            workflowClient: royaltyTokenDistributionWorkflowsClient,
            encodedTxData: {
              to: royaltyTokenDistributionWorkflowsClient.address,
              data: encodeFunctionData({
                abi: royaltyTokenDistributionWorkflowsAbi,
                functionName: "registerIpAndMakeDerivativeAndDeployRoyaltyVault",
                args: [transformRequest.nftContract, transformRequest.tokenId, transformRequest.ipMetadata, transformRequest.derivData, transformRequest.sigMetadataAndRegister]
              })
            },
            extraData: {
              royaltyShares,
              deadline: calculatedDeadline
            }
          });
      }
    }, _callee6);
  }));
  return function transferRegisterIpAndMakeDerivativeAndDeployRoyaltyVaultRequest2(_x6) {
    return _ref10.apply(this, arguments);
  };
}();
var handleMintAndRegisterRequest = function() {
  var _ref12 = _asyncToGenerator(_regenerator().m(function _callee7(_ref11) {
    var _request$allowDuplica;
    var request, rpcClient, wallet, chainId, royaltyTokenDistributionWorkflowsClient, licenseAttachmentWorkflowsClient, derivativeWorkflowsClient, isPublicMinting, nftMintFee, baseRequest, _yield$validateLicens2, licenseTermsData, requestWithTerms, derivData, totalDerivativeMintingFee, requestWithDeriv;
    return _regenerator().w(function(_context7) {
      while (1) switch (_context7.n) {
        case 0:
          request = _ref11.request, rpcClient = _ref11.rpcClient, wallet = _ref11.wallet, chainId = _ref11.chainId;
          royaltyTokenDistributionWorkflowsClient = new RoyaltyTokenDistributionWorkflowsClient(rpcClient, wallet);
          licenseAttachmentWorkflowsClient = new LicenseAttachmentWorkflowsClient(rpcClient, wallet);
          derivativeWorkflowsClient = new DerivativeWorkflowsClient(rpcClient, wallet);
          _context7.n = 1;
          return getPublicMinting(request.spgNftContract, rpcClient);
        case 1:
          isPublicMinting = _context7.v;
          _context7.n = 2;
          return calculateSPGWipMintFee(new SpgnftImplReadOnlyClient(rpcClient, request.spgNftContract));
        case 2:
          nftMintFee = _context7.v;
          baseRequest = {
            spgNftContract: validateAddress(request.spgNftContract),
            recipient: validateAddress(request.recipient || wallet.account.address),
            ipMetadata: getIpMetadataForWorkflow(request.ipMetadata),
            allowDuplicates: (_request$allowDuplica = request.allowDuplicates) !== null && _request$allowDuplica !== void 0 ? _request$allowDuplica : true
          };
          if (!("licenseTermsData" in request)) {
            _context7.n = 5;
            break;
          }
          _context7.n = 3;
          return validateLicenseTermsData(request.licenseTermsData, rpcClient);
        case 3:
          _yield$validateLicens2 = _context7.v;
          licenseTermsData = _yield$validateLicens2.licenseTermsData;
          requestWithTerms = _objectSpread2(_objectSpread2({}, baseRequest), {}, {
            licenseTermsData
          });
          if (!("royaltyShares" in request)) {
            _context7.n = 4;
            break;
          }
          return _context7.a(2, transformMintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensRequest({
            request: _objectSpread2(_objectSpread2({}, requestWithTerms), {}, {
              royaltyShares: request.royaltyShares
            }),
            royaltyTokenDistributionWorkflowsClient,
            nftMintFee
          }));
        case 4:
          return _context7.a(2, transferMintAndRegisterIpAssetWithPilTermsRequest({
            request: _objectSpread2(_objectSpread2({}, requestWithTerms), {}, {
              licenseTermsData
            }),
            licenseAttachmentWorkflowsClient,
            nftMintFee,
            isPublicMinting
          }));
        case 5:
          if (!("derivData" in request)) {
            _context7.n = 9;
            break;
          }
          _context7.n = 6;
          return validateDerivativeData({
            derivativeDataInput: request.derivData,
            rpcClient,
            wallet,
            chainId
          });
        case 6:
          derivData = _context7.v;
          _context7.n = 7;
          return calculateDerivativeMintingFee({
            derivData,
            rpcClient,
            chainId,
            wallet
          });
        case 7:
          totalDerivativeMintingFee = _context7.v;
          requestWithDeriv = _objectSpread2(_objectSpread2({}, baseRequest), {}, {
            derivData
          });
          if (!("royaltyShares" in request)) {
            _context7.n = 8;
            break;
          }
          return _context7.a(2, transferMintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest({
            request: _objectSpread2(_objectSpread2({}, requestWithDeriv), {}, {
              royaltyShares: request.royaltyShares
            }),
            nftMintFee,
            isPublicMinting,
            totalDerivativeMintingFee,
            royaltyTokenDistributionWorkflowsClient
          }));
        case 8:
          return _context7.a(2, transferMintAndRegisterIpAndMakeDerivativeRequest({
            request: _objectSpread2(_objectSpread2({}, requestWithDeriv), {}, {
              derivData
            }),
            derivativeWorkflowsClient,
            nftMintFee,
            isPublicMinting,
            totalDerivativeMintingFee
          }));
        case 9:
          throw new Error("Invalid mint and register request type");
        case 10:
          return _context7.a(2);
      }
    }, _callee7);
  }));
  return function handleMintAndRegisterRequest2(_x7) {
    return _ref12.apply(this, arguments);
  };
}();
var transformMintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensRequest = function transformMintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensRequest2(_ref13) {
  var request = _ref13.request, royaltyTokenDistributionWorkflowsClient = _ref13.royaltyTokenDistributionWorkflowsClient, nftMintFee = _ref13.nftMintFee;
  var _getRoyaltyShares = getRoyaltyShares(request.royaltyShares), royaltyShares = _getRoyaltyShares.royaltyShares;
  var transformRequest = _objectSpread2(_objectSpread2({}, request), {}, {
    royaltyShares
  });
  return {
    // The `TransformIpRegistrationWorkflowResponse` is a union of all the possible requests, so we need to explicitly cast the type.
    transformRequest,
    // Because mint tokens is given `msg.sender` as the recipient, so we need to set `useMulticall3` to false.
    isUseMulticall3: false,
    contractCall: function contractCall() {
      return royaltyTokenDistributionWorkflowsClient.mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens(transformRequest);
    },
    spenders: [{
      address: transformRequest.spgNftContract,
      amount: nftMintFee
    }],
    totalFees: nftMintFee,
    encodedTxData: {
      to: royaltyTokenDistributionWorkflowsClient.address,
      data: encodeFunctionData({
        abi: royaltyTokenDistributionWorkflowsAbi,
        functionName: "mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens",
        args: [transformRequest.spgNftContract, transformRequest.recipient, transformRequest.ipMetadata, transformRequest.licenseTermsData, transformRequest.royaltyShares, transformRequest.allowDuplicates]
      })
    },
    workflowClient: royaltyTokenDistributionWorkflowsClient
  };
};
var transferMintAndRegisterIpAssetWithPilTermsRequest = function transferMintAndRegisterIpAssetWithPilTermsRequest2(_ref14) {
  var request = _ref14.request, licenseAttachmentWorkflowsClient = _ref14.licenseAttachmentWorkflowsClient, nftMintFee = _ref14.nftMintFee, isPublicMinting = _ref14.isPublicMinting;
  return {
    // The `TransformIpRegistrationWorkflowResponse` is a union of all the possible requests, so we need to explicitly cast the type.
    transformRequest: request,
    isUseMulticall3: isPublicMinting,
    spenders: [{
      address: request.spgNftContract,
      amount: nftMintFee
    }],
    totalFees: nftMintFee,
    encodedTxData: {
      to: licenseAttachmentWorkflowsClient.address,
      data: encodeFunctionData({
        abi: licenseAttachmentWorkflowsAbi,
        functionName: "mintAndRegisterIpAndAttachPILTerms",
        args: [request.spgNftContract, request.recipient, request.ipMetadata, request.licenseTermsData, request.allowDuplicates]
      })
    },
    contractCall: function contractCall() {
      return licenseAttachmentWorkflowsClient.mintAndRegisterIpAndAttachPilTerms(request);
    },
    workflowClient: licenseAttachmentWorkflowsClient
  };
};
var transferMintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest = function transferMintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest2(_ref15) {
  var request = _ref15.request, nftMintFee = _ref15.nftMintFee, isPublicMinting = _ref15.isPublicMinting, totalDerivativeMintingFee = _ref15.totalDerivativeMintingFee, royaltyTokenDistributionWorkflowsClient = _ref15.royaltyTokenDistributionWorkflowsClient;
  var _getRoyaltyShares2 = getRoyaltyShares(request.royaltyShares), royaltyShares = _getRoyaltyShares2.royaltyShares;
  var transformRequest = _objectSpread2(_objectSpread2({}, request), {}, {
    royaltyShares
  });
  return {
    // The `TransformIpRegistrationWorkflowResponse` is a union of all the possible requests, so we need to explicitly cast the type.
    transformRequest,
    isUseMulticall3: isPublicMinting,
    spenders: [{
      address: royaltyTokenDistributionWorkflowsClient.address,
      amount: totalDerivativeMintingFee
    }, {
      address: request.spgNftContract,
      amount: nftMintFee
    }],
    totalFees: totalDerivativeMintingFee + nftMintFee,
    encodedTxData: {
      to: royaltyTokenDistributionWorkflowsClient.address,
      data: encodeFunctionData({
        abi: royaltyTokenDistributionWorkflowsAbi,
        functionName: "mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens",
        args: [request.spgNftContract, request.recipient, request.ipMetadata, request.derivData, request.royaltyShares, request.allowDuplicates]
      })
    },
    workflowClient: royaltyTokenDistributionWorkflowsClient,
    contractCall: function contractCall() {
      return royaltyTokenDistributionWorkflowsClient.mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens(transformRequest);
    }
  };
};
var transferMintAndRegisterIpAndMakeDerivativeRequest = function transferMintAndRegisterIpAndMakeDerivativeRequest2(_ref16) {
  var request = _ref16.request, derivativeWorkflowsClient = _ref16.derivativeWorkflowsClient, nftMintFee = _ref16.nftMintFee, isPublicMinting = _ref16.isPublicMinting, totalDerivativeMintingFee = _ref16.totalDerivativeMintingFee;
  return {
    // The `TransformIpRegistrationWorkflowResponse` is a union of all the possible requests, so we need to explicitly cast the type.
    transformRequest: request,
    isUseMulticall3: isPublicMinting,
    spenders: [{
      address: derivativeWorkflowsClient.address,
      amount: totalDerivativeMintingFee
    }, {
      address: request.spgNftContract,
      amount: nftMintFee
    }],
    totalFees: totalDerivativeMintingFee + nftMintFee,
    encodedTxData: {
      to: derivativeWorkflowsClient.address,
      data: encodeFunctionData({
        abi: derivativeWorkflowsAbi,
        functionName: "mintAndRegisterIpAndMakeDerivative",
        args: [request.spgNftContract, request.derivData, request.ipMetadata, request.recipient, request.allowDuplicates]
      })
    },
    contractCall: function contractCall() {
      return derivativeWorkflowsClient.mintAndRegisterIpAndMakeDerivative(request);
    },
    workflowClient: derivativeWorkflowsClient
  };
};
var transferDistributeRoyaltyTokensRequest = function() {
  var _ref18 = _asyncToGenerator(_regenerator().m(function _callee8(_ref17) {
    var request, rpcClient, wallet, chainId, ipId, deadline, ipRoyaltyVault, totalAmount, calculatedDeadline, ipRoyaltyVaultImpl, balance, royaltyTokenDistributionWorkflowsClient, ipAccount, _yield$ipAccount$stat, state, signatureApproveRoyaltyTokens, transformRequest;
    return _regenerator().w(function(_context8) {
      while (1) switch (_context8.n) {
        case 0:
          request = _ref17.request, rpcClient = _ref17.rpcClient, wallet = _ref17.wallet, chainId = _ref17.chainId;
          ipId = request.ipId, deadline = request.deadline, ipRoyaltyVault = request.ipRoyaltyVault, totalAmount = request.totalAmount;
          _context8.n = 1;
          return getCalculatedDeadline(rpcClient, deadline);
        case 1:
          calculatedDeadline = _context8.v;
          ipRoyaltyVaultImpl = new IpRoyaltyVaultImplReadOnlyClient(rpcClient, ipRoyaltyVault);
          _context8.n = 2;
          return ipRoyaltyVaultImpl.balanceOf({
            account: ipId
          });
        case 2:
          balance = _context8.v;
          royaltyTokenDistributionWorkflowsClient = new RoyaltyTokenDistributionWorkflowsClient(rpcClient, wallet);
          if (!(BigInt(balance) < BigInt(totalAmount))) {
            _context8.n = 3;
            break;
          }
          throw new Error("The balance of the IP account in the IP Royalty Vault is insufficient to distribute the royalty tokens.");
        case 3:
          ipAccount = new IpAccountImplClient(rpcClient, wallet, validateAddress(ipId));
          _context8.n = 4;
          return ipAccount.state();
        case 4:
          _yield$ipAccount$stat = _context8.v;
          state = _yield$ipAccount$stat.result;
          _context8.n = 5;
          return generateOperationSignature({
            ipIdAddress: ipId,
            methodType: SignatureMethodType.DISTRIBUTE_ROYALTY_TOKENS,
            deadline: calculatedDeadline,
            ipRoyaltyVault,
            totalAmount,
            state,
            encodeData: encodeFunctionData({
              abi: ipRoyaltyVaultImplAbi,
              functionName: "approve",
              args: [royaltyTokenDistributionWorkflowsAddress[chainId], BigInt(totalAmount)]
            }),
            wallet,
            chainId
          });
        case 5:
          signatureApproveRoyaltyTokens = _context8.v;
          transformRequest = {
            ipId,
            royaltyShares: request.royaltyShares,
            sigApproveRoyaltyTokens: {
              signer: wallet.account.address,
              deadline: calculatedDeadline,
              signature: signatureApproveRoyaltyTokens
            }
          };
          return _context8.a(2, {
            // The `TransformIpRegistrationWorkflowResponse` is a union of all the possible requests, so we need to explicitly cast the type.
            transformRequest,
            isUseMulticall3: false,
            contractCall: function contractCall() {
              return royaltyTokenDistributionWorkflowsClient.distributeRoyaltyTokens(transformRequest);
            },
            workflowClient: royaltyTokenDistributionWorkflowsClient,
            encodedTxData: {
              to: royaltyTokenDistributionWorkflowsAddress[chainId],
              data: encodeFunctionData({
                abi: royaltyTokenDistributionWorkflowsAbi,
                functionName: "distributeRoyaltyTokens",
                args: [transformRequest.ipId, transformRequest.royaltyShares, transformRequest.sigApproveRoyaltyTokens]
              })
            }
          });
      }
    }, _callee8);
  }));
  return function transferDistributeRoyaltyTokensRequest2(_x8) {
    return _ref18.apply(this, arguments);
  };
}();
var prepareRoyaltyTokensDistributionRequests = function() {
  var _ref20 = _asyncToGenerator(_regenerator().m(function _callee9(_ref19) {
    var royaltyDistributionRequests, ipRegisteredLog, ipRoyaltyVault, rpcClient, wallet, chainId, results, _iterator, _step, _loop, _t;
    return _regenerator().w(function(_context0) {
      while (1) switch (_context0.n) {
        case 0:
          royaltyDistributionRequests = _ref19.royaltyDistributionRequests, ipRegisteredLog = _ref19.ipRegisteredLog, ipRoyaltyVault = _ref19.ipRoyaltyVault, rpcClient = _ref19.rpcClient, wallet = _ref19.wallet, chainId = _ref19.chainId;
          if (!(royaltyDistributionRequests.length === 0)) {
            _context0.n = 1;
            break;
          }
          return _context0.a(2, []);
        case 1:
          results = [];
          _iterator = _createForOfIteratorHelper(royaltyDistributionRequests);
          _context0.p = 2;
          _loop = _regenerator().m(function _loop2() {
            var req, filterIpIdAndTokenId, _req$royaltyShares, _getRoyaltyShares3, royaltyShares, totalAmount, calculatedDeadline, response;
            return _regenerator().w(function(_context9) {
              while (1) switch (_context9.n) {
                case 0:
                  req = _step.value;
                  filterIpIdAndTokenId = ipRegisteredLog.find(function(_ref21) {
                    var tokenContract = _ref21.tokenContract, tokenId = _ref21.tokenId;
                    return tokenContract === req.nftContract && tokenId === req.tokenId;
                  });
                  if (!filterIpIdAndTokenId) {
                    _context9.n = 3;
                    break;
                  }
                  _getRoyaltyShares3 = getRoyaltyShares((_req$royaltyShares = req.royaltyShares) !== null && _req$royaltyShares !== void 0 ? _req$royaltyShares : []), royaltyShares = _getRoyaltyShares3.royaltyShares, totalAmount = _getRoyaltyShares3.totalAmount;
                  _context9.n = 1;
                  return getCalculatedDeadline(rpcClient, req.deadline);
                case 1:
                  calculatedDeadline = _context9.v;
                  _context9.n = 2;
                  return transferDistributeRoyaltyTokensRequest({
                    request: {
                      ipId: filterIpIdAndTokenId.ipId,
                      ipRoyaltyVault: ipRoyaltyVault.find(function(item) {
                        return item.ipId === filterIpIdAndTokenId.ipId;
                      }).ipRoyaltyVault,
                      royaltyShares,
                      totalAmount,
                      deadline: calculatedDeadline
                    },
                    rpcClient,
                    wallet,
                    chainId
                  });
                case 2:
                  response = _context9.v;
                  results.push(response);
                case 3:
                  return _context9.a(2);
              }
            }, _loop2);
          });
          _iterator.s();
        case 3:
          if ((_step = _iterator.n()).done) {
            _context0.n = 5;
            break;
          }
          return _context0.d(_regeneratorValues(_loop()), 4);
        case 4:
          _context0.n = 3;
          break;
        case 5:
          _context0.n = 7;
          break;
        case 6:
          _context0.p = 6;
          _t = _context0.v;
          _iterator.e(_t);
        case 7:
          _context0.p = 7;
          _iterator.f();
          return _context0.f(7);
        case 8:
          return _context0.a(2, results);
      }
    }, _callee9, null, [[2, 6, 7, 8]]);
  }));
  return function prepareRoyaltyTokensDistributionRequests2(_x9) {
    return _ref20.apply(this, arguments);
  };
}();
var IPAssetClient = function() {
  function IPAssetClient2(rpcClient, wallet, chainId) {
    _classCallCheck(this, IPAssetClient2);
    this.licensingModuleClient = new LicensingModuleClient(rpcClient, wallet);
    this.ipAssetRegistryClient = new IpAssetRegistryClient(rpcClient, wallet);
    this.licenseTemplateClient = new PiLicenseTemplateClient(rpcClient, wallet);
    this.licenseRegistryReadOnlyClient = new LicenseRegistryReadOnlyClient(rpcClient);
    this.licenseTokenReadOnlyClient = new LicenseTokenReadOnlyClient(rpcClient);
    this.accessControllerClient = new AccessControllerClient(rpcClient, wallet);
    this.coreMetadataModuleClient = new CoreMetadataModuleClient(rpcClient, wallet);
    this.registrationWorkflowsClient = new RegistrationWorkflowsClient(rpcClient, wallet);
    this.licenseAttachmentWorkflowsClient = new LicenseAttachmentWorkflowsClient(rpcClient, wallet);
    this.derivativeWorkflowsClient = new DerivativeWorkflowsClient(rpcClient, wallet);
    this.royaltyTokenDistributionWorkflowsClient = new RoyaltyTokenDistributionWorkflowsClient(rpcClient, wallet);
    this.royaltyModuleEventClient = new RoyaltyModuleEventClient(rpcClient);
    this.wipClient = new WrappedIpClient(rpcClient, wallet);
    this.multicall3Client = new Multicall3Client(rpcClient, wallet);
    this.spgNftClient = new SpgnftImplReadOnlyClient(rpcClient);
    this.rpcClient = rpcClient;
    this.wallet = wallet;
    this.chainId = chainId;
    this.walletAddress = this.wallet.account.address;
  }
  return _createClass(IPAssetClient2, [{
    key: "generateCreatorMetadata",
    value: function generateCreatorMetadata(creator) {
      return creator;
    }
  }, {
    key: "generateIpMetadata",
    value: function generateIpMetadata(metadata) {
      return metadata;
    }
    /**
     * Registers an NFT as IP, creating a corresponding IP record.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.
     */
  }, {
    key: "register",
    value: function() {
      var _register = _asyncToGenerator(_regenerator().m(function _callee(request) {
        var _request$txOptions, tokenId, ipIdAddress, isRegistered, object, calculatedDeadline, signature, txHash, txReceipt, log, _t;
        return _regenerator().w(function(_context) {
          while (1) switch (_context.n) {
            case 0:
              _context.p = 0;
              tokenId = BigInt(request.tokenId);
              _context.n = 1;
              return getIpIdAddress({
                nftContract: request.nftContract,
                tokenId,
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 1:
              ipIdAddress = _context.v;
              _context.n = 2;
              return this.isRegistered(ipIdAddress);
            case 2:
              isRegistered = _context.v;
              if (!isRegistered) {
                _context.n = 3;
                break;
              }
              return _context.a(2, {
                ipId: ipIdAddress
              });
            case 3:
              object = {
                tokenId,
                nftContract: validateAddress(request.nftContract),
                ipMetadata: getIpMetadataForWorkflow(request.ipMetadata),
                sigMetadata: {
                  signer: zeroAddress,
                  deadline: BigInt(0),
                  signature: zeroHash
                }
              };
              if (!request.ipMetadata) {
                _context.n = 6;
                break;
              }
              _context.n = 4;
              return getCalculatedDeadline(this.rpcClient, request.deadline);
            case 4:
              calculatedDeadline = _context.v;
              _context.n = 5;
              return generateOperationSignature({
                ipIdAddress,
                methodType: SignatureMethodType.REGISTER,
                deadline: calculatedDeadline,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 5:
              signature = _context.v;
              object.sigMetadata = {
                signer: validateAddress(this.walletAddress),
                deadline: calculatedDeadline,
                signature
              };
            case 6:
              if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.encodedTxDataOnly)) {
                _context.n = 9;
                break;
              }
              if (!request.ipMetadata) {
                _context.n = 7;
                break;
              }
              return _context.a(2, {
                encodedTxData: this.registrationWorkflowsClient.registerIpEncode(object)
              });
            case 7:
              return _context.a(2, {
                encodedTxData: this.ipAssetRegistryClient.registerEncode({
                  tokenContract: object.nftContract,
                  tokenId: object.tokenId,
                  chainid: BigInt(this.chainId)
                })
              });
            case 8:
              _context.n = 15;
              break;
            case 9:
              if (!request.ipMetadata) {
                _context.n = 11;
                break;
              }
              _context.n = 10;
              return this.registrationWorkflowsClient.registerIp(object);
            case 10:
              txHash = _context.v;
              _context.n = 13;
              break;
            case 11:
              _context.n = 12;
              return this.ipAssetRegistryClient.register({
                tokenContract: object.nftContract,
                tokenId: object.tokenId,
                chainid: BigInt(this.chainId)
              });
            case 12:
              txHash = _context.v;
            case 13:
              _context.n = 14;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 14:
              txReceipt = _context.v;
              log = this.getIpIdAndTokenIdsFromEvent(txReceipt)[0];
              return _context.a(2, _objectSpread2({
                txHash
              }, log));
            case 15:
              _context.n = 17;
              break;
            case 16:
              _context.p = 16;
              _t = _context.v;
              return _context.a(2, handleError(_t, "Failed to register IP"));
            case 17:
              return _context.a(2);
          }
        }, _callee, this, [[0, 16]]);
      }));
      function register(_x) {
        return _register.apply(this, arguments);
      }
      return register;
    }()
  }, {
    key: "batchRegister",
    value: function() {
      var _batchRegister = _asyncToGenerator(_regenerator().m(function _callee3(request) {
        var _this = this;
        var contracts, spgContracts, encodedTxData, _iterator, _step, arg, result, spgTxHash, txHash, results, processTransaction, _t2, _t3, _t4;
        return _regenerator().w(function(_context3) {
          while (1) switch (_context3.n) {
            case 0:
              _context3.p = 0;
              contracts = [];
              spgContracts = [];
              _iterator = _createForOfIteratorHelper(request.args);
              _context3.p = 1;
              _iterator.s();
            case 2:
              if ((_step = _iterator.n()).done) {
                _context3.n = 8;
                break;
              }
              arg = _step.value;
              _context3.p = 3;
              _context3.n = 4;
              return this.register(_objectSpread2(_objectSpread2({}, arg), {}, {
                txOptions: {
                  encodedTxDataOnly: true
                }
              }));
            case 4:
              result = _context3.v;
              encodedTxData = result.encodedTxData.data;
              _context3.n = 6;
              break;
            case 5:
              _context3.p = 5;
              _t2 = _context3.v;
              throw new Error(_t2.message.replace("Failed to register IP:", "").trim());
            case 6:
              if (arg.ipMetadata) {
                spgContracts.push(encodedTxData);
              } else {
                contracts.push({
                  target: this.ipAssetRegistryClient.address,
                  allowFailure: false,
                  callData: encodedTxData
                });
              }
            case 7:
              _context3.n = 2;
              break;
            case 8:
              _context3.n = 10;
              break;
            case 9:
              _context3.p = 9;
              _t3 = _context3.v;
              _iterator.e(_t3);
            case 10:
              _context3.p = 10;
              _iterator.f();
              return _context3.f(10);
            case 11:
              if (!(spgContracts.length > 0)) {
                _context3.n = 13;
                break;
              }
              _context3.n = 12;
              return this.registrationWorkflowsClient.multicall({
                data: spgContracts
              });
            case 12:
              spgTxHash = _context3.v;
            case 13:
              if (!(contracts.length > 0)) {
                _context3.n = 15;
                break;
              }
              _context3.n = 14;
              return this.multicall3Client.aggregate3({
                calls: contracts
              });
            case 14:
              txHash = _context3.v;
            case 15:
              results = [];
              processTransaction = function() {
                var _ref = _asyncToGenerator(_regenerator().m(function _callee2(hash, contractType) {
                  var txReceipt, eventResults;
                  return _regenerator().w(function(_context2) {
                    while (1) switch (_context2.n) {
                      case 0:
                        _context2.n = 1;
                        return _this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                          hash
                        }));
                      case 1:
                        txReceipt = _context2.v;
                        eventResults = _this.getIpIdAndTokenIdsFromEvent(txReceipt, contractType);
                        results.push.apply(results, _toConsumableArray(eventResults));
                      case 2:
                        return _context2.a(2);
                    }
                  }, _callee2);
                }));
                return function processTransaction2(_x3, _x4) {
                  return _ref.apply(this, arguments);
                };
              }();
              if (!txHash) {
                _context3.n = 16;
                break;
              }
              _context3.n = 16;
              return processTransaction(txHash, "nftContract");
            case 16:
              if (!spgTxHash) {
                _context3.n = 17;
                break;
              }
              _context3.n = 17;
              return processTransaction(spgTxHash, "spgNftContract");
            case 17:
              return _context3.a(2, {
                txHash,
                spgTxHash,
                results
              });
            case 18:
              _context3.p = 18;
              _t4 = _context3.v;
              return _context3.a(2, handleError(_t4, "Failed to batch register IP"));
          }
        }, _callee3, this, [[3, 5], [1, 9, 10, 11], [0, 18]]);
      }));
      function batchRegister(_x2) {
        return _batchRegister.apply(this, arguments);
      }
      return batchRegister;
    }()
  }, {
    key: "registerDerivative",
    value: function() {
      var _registerDerivative = _asyncToGenerator(_regenerator().m(function _callee4(request) {
        var _this2 = this;
        var _request$txOptions2, isChildIpIdRegistered, derivativeData, object, encodedTxData, _request$options, contractCall, _t5;
        return _regenerator().w(function(_context4) {
          while (1) switch (_context4.n) {
            case 0:
              _context4.p = 0;
              _context4.n = 1;
              return this.isRegistered(request.childIpId);
            case 1:
              isChildIpIdRegistered = _context4.v;
              if (isChildIpIdRegistered) {
                _context4.n = 2;
                break;
              }
              throw new Error("The child IP with id ".concat(request.childIpId, " is not registered."));
            case 2:
              _context4.n = 3;
              return validateDerivativeData({
                derivativeDataInput: request,
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 3:
              derivativeData = _context4.v;
              object = _objectSpread2({
                childIpId: request.childIpId
              }, derivativeData);
              encodedTxData = this.licensingModuleClient.registerDerivativeEncode(object);
              if (!((_request$txOptions2 = request.txOptions) !== null && _request$txOptions2 !== void 0 && _request$txOptions2.encodedTxDataOnly)) {
                _context4.n = 4;
                break;
              }
              return _context4.a(2, {
                encodedTxData
              });
            case 4:
              contractCall = function contractCall2() {
                return _this2.licensingModuleClient.registerDerivative(object);
              };
              return _context4.a(2, this.handleRegistrationWithFees({
                sender: this.walletAddress,
                derivData: object,
                contractCall,
                txOptions: request.txOptions,
                encodedTxs: [encodedTxData],
                spgSpenderAddress: this.royaltyModuleEventClient.address,
                wipOptions: _objectSpread2(_objectSpread2({}, (_request$options = request.options) === null || _request$options === void 0 ? void 0 : _request$options.wipOptions), {}, {
                  useMulticallWhenPossible: false
                })
              }));
            case 5:
              _context4.n = 7;
              break;
            case 6:
              _context4.p = 6;
              _t5 = _context4.v;
              return _context4.a(2, handleError(_t5, "Failed to register derivative"));
            case 7:
              return _context4.a(2);
          }
        }, _callee4, this, [[0, 6]]);
      }));
      function registerDerivative(_x5) {
        return _registerDerivative.apply(this, arguments);
      }
      return registerDerivative;
    }()
  }, {
    key: "batchRegisterDerivative",
    value: function() {
      var _batchRegisterDerivative = _asyncToGenerator(_regenerator().m(function _callee5(request) {
        var contracts, licenseModuleAddress, _iterator2, _step2, arg, calculatedDeadline, ipAccount, data, _yield$ipAccount$stat, state, signature, txHash, _t6, _t7, _t8;
        return _regenerator().w(function(_context5) {
          while (1) switch (_context5.n) {
            case 0:
              _context5.p = 0;
              contracts = [];
              licenseModuleAddress = validateAddress(this.licensingModuleClient.address);
              _iterator2 = _createForOfIteratorHelper(request.args);
              _context5.p = 1;
              _iterator2.s();
            case 2:
              if ((_step2 = _iterator2.n()).done) {
                _context5.n = 11;
                break;
              }
              arg = _step2.value;
              _context5.p = 3;
              _context5.n = 4;
              return this.registerDerivative(_objectSpread2(_objectSpread2({}, arg), {}, {
                txOptions: {
                  encodedTxDataOnly: true
                }
              }));
            case 4:
              _context5.n = 6;
              break;
            case 5:
              _context5.p = 5;
              _t6 = _context5.v;
              throw new Error(_t6.message.replace("Failed to register derivative:", "").trim());
            case 6:
              _context5.n = 7;
              return getCalculatedDeadline(this.rpcClient, request.deadline);
            case 7:
              calculatedDeadline = _context5.v;
              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, validateAddress(arg.childIpId));
              data = encodeFunctionData({
                abi: licensingModuleAbi,
                functionName: "registerDerivative",
                args: [arg.childIpId, arg.parentIpIds, arg.licenseTermsIds.map(function(id) {
                  return BigInt(id);
                }), arg.licenseTemplate || this.licenseTemplateClient.address, zeroAddress, BigInt(arg.maxMintingFee || 0), Number(arg.maxRts || MAX_ROYALTY_TOKEN), getRevenueShare(arg.maxRevenueShare || 100, RevShareType.MAX_REVENUE_SHARE)]
              });
              _context5.n = 8;
              return ipAccount.state();
            case 8:
              _yield$ipAccount$stat = _context5.v;
              state = _yield$ipAccount$stat.result;
              _context5.n = 9;
              return generateOperationSignature({
                ipIdAddress: arg.childIpId,
                methodType: SignatureMethodType.BATCH_REGISTER_DERIVATIVE,
                state,
                encodeData: data,
                deadline: calculatedDeadline,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 9:
              signature = _context5.v;
              contracts.push({
                target: arg.childIpId,
                allowFailure: false,
                callData: encodeFunctionData({
                  abi: ipAccountImplAbi,
                  functionName: "executeWithSig",
                  args: [licenseModuleAddress, BigInt(0), data, this.wallet.account.address, calculatedDeadline, signature]
                })
              });
            case 10:
              _context5.n = 2;
              break;
            case 11:
              _context5.n = 13;
              break;
            case 12:
              _context5.p = 12;
              _t7 = _context5.v;
              _iterator2.e(_t7);
            case 13:
              _context5.p = 13;
              _iterator2.f();
              return _context5.f(13);
            case 14:
              _context5.n = 15;
              return this.multicall3Client.aggregate3({
                calls: contracts
              });
            case 15:
              txHash = _context5.v;
              _context5.n = 16;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 16:
              return _context5.a(2, {
                txHash
              });
            case 17:
              _context5.p = 17;
              _t8 = _context5.v;
              return _context5.a(2, handleError(_t8, "Failed to batch register derivative"));
          }
        }, _callee5, this, [[3, 5], [1, 12, 13, 14], [0, 17]]);
      }));
      function batchRegisterDerivative(_x6) {
        return _batchRegisterDerivative.apply(this, arguments);
      }
      return batchRegisterDerivative;
    }()
  }, {
    key: "registerDerivativeWithLicenseTokens",
    value: function() {
      var _registerDerivativeWithLicenseTokens = _asyncToGenerator(_regenerator().m(function _callee6(request) {
        var _request$txOptions3, req, isChildIpIdRegistered, txHash, _t9;
        return _regenerator().w(function(_context6) {
          while (1) switch (_context6.n) {
            case 0:
              _context6.p = 0;
              req = {
                childIpId: validateAddress(request.childIpId),
                licenseTokenIds: request.licenseTokenIds.map(function(id) {
                  return BigInt(id);
                }),
                royaltyContext: zeroAddress,
                maxRts: Number(request.maxRts)
              };
              validateMaxRts(req.maxRts);
              _context6.n = 1;
              return this.isRegistered(request.childIpId);
            case 1:
              isChildIpIdRegistered = _context6.v;
              if (isChildIpIdRegistered) {
                _context6.n = 2;
                break;
              }
              throw new Error("The child IP with id ".concat(request.childIpId, " is not registered."));
            case 2:
              if (!(request.licenseTokenIds.length === 0)) {
                _context6.n = 3;
                break;
              }
              throw new Error("The licenseTokenIds must be provided.");
            case 3:
              _context6.n = 4;
              return this.validateLicenseTokenIds(request.licenseTokenIds);
            case 4:
              request.licenseTokenIds = _context6.v;
              if (!((_request$txOptions3 = request.txOptions) !== null && _request$txOptions3 !== void 0 && _request$txOptions3.encodedTxDataOnly)) {
                _context6.n = 5;
                break;
              }
              return _context6.a(2, {
                encodedTxData: this.licensingModuleClient.registerDerivativeWithLicenseTokensEncode(req)
              });
            case 5:
              _context6.n = 6;
              return this.licensingModuleClient.registerDerivativeWithLicenseTokens(req);
            case 6:
              txHash = _context6.v;
              _context6.n = 7;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 7:
              return _context6.a(2, {
                txHash
              });
            case 8:
              _context6.n = 10;
              break;
            case 9:
              _context6.p = 9;
              _t9 = _context6.v;
              return _context6.a(2, handleError(_t9, "Failed to register derivative with license tokens"));
            case 10:
              return _context6.a(2);
          }
        }, _callee6, this, [[0, 9]]);
      }));
      function registerDerivativeWithLicenseTokens(_x7) {
        return _registerDerivativeWithLicenseTokens.apply(this, arguments);
      }
      return registerDerivativeWithLicenseTokens;
    }()
  }, {
    key: "mintAndRegisterIpAssetWithPilTerms",
    value: function() {
      var _mintAndRegisterIpAssetWithPilTerms = _asyncToGenerator(_regenerator().m(function _callee7(request) {
        var _this3 = this;
        var _request$txOptions4, _request$options2, _yield$validateLicens, licenseTerms, _yield$transformRegis, transformRequest, encodedTxData, contractCall, rsp, licenseTermsIds, _t0;
        return _regenerator().w(function(_context7) {
          while (1) switch (_context7.n) {
            case 0:
              _context7.p = 0;
              _context7.n = 1;
              return validateLicenseTermsData(request.licenseTermsData, this.rpcClient);
            case 1:
              _yield$validateLicens = _context7.v;
              licenseTerms = _yield$validateLicens.licenseTerms;
              _context7.n = 2;
              return transformRegistrationRequest({
                request,
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 2:
              _yield$transformRegis = _context7.v;
              transformRequest = _yield$transformRegis.transformRequest;
              encodedTxData = this.licenseAttachmentWorkflowsClient.mintAndRegisterIpAndAttachPilTermsEncode(transformRequest);
              if (!((_request$txOptions4 = request.txOptions) !== null && _request$txOptions4 !== void 0 && _request$txOptions4.encodedTxDataOnly)) {
                _context7.n = 3;
                break;
              }
              return _context7.a(2, {
                encodedTxData
              });
            case 3:
              contractCall = function contractCall2() {
                return _this3.licenseAttachmentWorkflowsClient.mintAndRegisterIpAndAttachPilTerms(transformRequest);
              };
              _context7.n = 4;
              return this.handleRegistrationWithFees({
                wipOptions: (_request$options2 = request.options) === null || _request$options2 === void 0 ? void 0 : _request$options2.wipOptions,
                sender: this.walletAddress,
                spgNftContract: transformRequest.spgNftContract,
                spgSpenderAddress: this.royaltyTokenDistributionWorkflowsClient.address,
                encodedTxs: [encodedTxData],
                contractCall,
                txOptions: request.txOptions
              });
            case 4:
              rsp = _context7.v;
              if (!rsp.receipt) {
                _context7.n = 6;
                break;
              }
              _context7.n = 5;
              return this.getLicenseTermsId(licenseTerms);
            case 5:
              licenseTermsIds = _context7.v;
              return _context7.a(2, _objectSpread2(_objectSpread2({}, rsp), {}, {
                licenseTermsIds
              }));
            case 6:
              return _context7.a(2, rsp);
            case 7:
              _context7.n = 9;
              break;
            case 8:
              _context7.p = 8;
              _t0 = _context7.v;
              return _context7.a(2, handleError(_t0, "Failed to mint and register IP and attach PIL terms"));
            case 9:
              return _context7.a(2);
          }
        }, _callee7, this, [[0, 8]]);
      }));
      function mintAndRegisterIpAssetWithPilTerms(_x8) {
        return _mintAndRegisterIpAssetWithPilTerms.apply(this, arguments);
      }
      return mintAndRegisterIpAssetWithPilTerms;
    }()
  }, {
    key: "batchMintAndRegisterIpAssetWithPilTerms",
    value: function() {
      var _batchMintAndRegisterIpAssetWithPilTerms = _asyncToGenerator(_regenerator().m(function _callee8(request) {
        var calldata, _iterator3, _step3, arg, result, txHash, txReceipt, results, j, licenseTerms, licenseTermsData, i, licenseTerm, licenseTermsIds, _t1, _t10;
        return _regenerator().w(function(_context8) {
          while (1) switch (_context8.n) {
            case 0:
              _context8.p = 0;
              calldata = [];
              _iterator3 = _createForOfIteratorHelper(request.args);
              _context8.p = 1;
              _iterator3.s();
            case 2:
              if ((_step3 = _iterator3.n()).done) {
                _context8.n = 5;
                break;
              }
              arg = _step3.value;
              _context8.n = 3;
              return this.mintAndRegisterIpAssetWithPilTerms(_objectSpread2(_objectSpread2({}, arg), {}, {
                txOptions: {
                  encodedTxDataOnly: true
                }
              }));
            case 3:
              result = _context8.v;
              calldata.push(result.encodedTxData.data);
            case 4:
              _context8.n = 2;
              break;
            case 5:
              _context8.n = 7;
              break;
            case 6:
              _context8.p = 6;
              _t1 = _context8.v;
              _iterator3.e(_t1);
            case 7:
              _context8.p = 7;
              _iterator3.f();
              return _context8.f(7);
            case 8:
              _context8.n = 9;
              return this.licenseAttachmentWorkflowsClient.multicall({
                data: calldata
              });
            case 9:
              txHash = _context8.v;
              _context8.n = 10;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 10:
              txReceipt = _context8.v;
              results = this.ipAssetRegistryClient.parseTxIpRegisteredEvent(txReceipt).map(function(log) {
                return {
                  ipId: log.ipId,
                  tokenId: log.tokenId,
                  spgNftContract: log.tokenContract,
                  licenseTermsIds: []
                };
              });
              j = 0;
            case 11:
              if (!(j < request.args.length)) {
                _context8.n = 18;
                break;
              }
              licenseTerms = [];
              licenseTermsData = request.args[j].licenseTermsData;
              i = 0;
            case 12:
              if (!(i < licenseTermsData.length)) {
                _context8.n = 15;
                break;
              }
              _context8.n = 13;
              return validateLicenseTerms(licenseTermsData[i].terms, this.rpcClient);
            case 13:
              licenseTerm = _context8.v;
              licenseTerms.push(licenseTerm);
            case 14:
              i++;
              _context8.n = 12;
              break;
            case 15:
              _context8.n = 16;
              return this.getLicenseTermsId(licenseTerms);
            case 16:
              licenseTermsIds = _context8.v;
              results[j].licenseTermsIds = licenseTermsIds;
            case 17:
              j++;
              _context8.n = 11;
              break;
            case 18:
              return _context8.a(2, {
                txHash,
                results
              });
            case 19:
              _context8.p = 19;
              _t10 = _context8.v;
              return _context8.a(2, handleError(_t10, "Failed to batch mint and register IP and attach PIL terms"));
          }
        }, _callee8, this, [[1, 6, 7, 8], [0, 19]]);
      }));
      function batchMintAndRegisterIpAssetWithPilTerms(_x9) {
        return _batchMintAndRegisterIpAssetWithPilTerms.apply(this, arguments);
      }
      return batchMintAndRegisterIpAssetWithPilTerms;
    }()
  }, {
    key: "registerIpAndAttachPilTerms",
    value: function() {
      var _registerIpAndAttachPilTerms = _asyncToGenerator(_regenerator().m(function _callee9(request) {
        var _request$txOptions5, ipIdAddress, isRegistered, _yield$validateLicens2, licenseTerms, _yield$transformRegis2, _transformRequest, txHash, txReceipt, log, _t11, _t12, _t13, _t14, _t15, _t16;
        return _regenerator().w(function(_context9) {
          while (1) switch (_context9.n) {
            case 0:
              _context9.p = 0;
              request.tokenId = BigInt(request.tokenId);
              _context9.n = 1;
              return getIpIdAddress({
                nftContract: request.nftContract,
                tokenId: request.tokenId,
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 1:
              ipIdAddress = _context9.v;
              _context9.n = 2;
              return this.isRegistered(ipIdAddress);
            case 2:
              isRegistered = _context9.v;
              if (!isRegistered) {
                _context9.n = 3;
                break;
              }
              throw new Error("The NFT with id ".concat(request.tokenId, " is already registered as IP."));
            case 3:
              _context9.n = 4;
              return validateLicenseTermsData(request.licenseTermsData, this.rpcClient);
            case 4:
              _yield$validateLicens2 = _context9.v;
              licenseTerms = _yield$validateLicens2.licenseTerms;
              _context9.n = 5;
              return transformRegistrationRequest({
                request,
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 5:
              _yield$transformRegis2 = _context9.v;
              _transformRequest = _yield$transformRegis2.transformRequest;
              if (!((_request$txOptions5 = request.txOptions) !== null && _request$txOptions5 !== void 0 && _request$txOptions5.encodedTxDataOnly)) {
                _context9.n = 6;
                break;
              }
              return _context9.a(2, {
                encodedTxData: this.licenseAttachmentWorkflowsClient.registerIpAndAttachPilTermsEncode(_transformRequest)
              });
            case 6:
              _context9.n = 7;
              return this.licenseAttachmentWorkflowsClient.registerIpAndAttachPilTerms(_transformRequest);
            case 7:
              txHash = _context9.v;
              _context9.n = 8;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 8:
              txReceipt = _context9.v;
              log = this.getIpIdAndTokenIdsFromEvent(txReceipt)[0];
              _t11 = _objectSpread2;
              _t12 = txHash;
              _context9.n = 9;
              return this.getLicenseTermsId(licenseTerms);
            case 9:
              _t13 = _context9.v;
              _t14 = {
                txHash: _t12,
                licenseTermsIds: _t13
              };
              _t15 = log;
              return _context9.a(2, _t11(_t14, _t15));
            case 10:
              _context9.n = 12;
              break;
            case 11:
              _context9.p = 11;
              _t16 = _context9.v;
              return _context9.a(2, handleError(_t16, "Failed to register IP and attach PIL terms"));
            case 12:
              return _context9.a(2);
          }
        }, _callee9, this, [[0, 11]]);
      }));
      function registerIpAndAttachPilTerms(_x0) {
        return _registerIpAndAttachPilTerms.apply(this, arguments);
      }
      return registerIpAndAttachPilTerms;
    }()
  }, {
    key: "registerDerivativeIp",
    value: function() {
      var _registerDerivativeIp = _asyncToGenerator(_regenerator().m(function _callee0(request) {
        var _this4 = this;
        var _request$txOptions6, _request$options3, tokenId, ipIdAddress, isRegistered, _yield$transformRegis3, _transformRequest2, encodedTxData, contractCall, _t17;
        return _regenerator().w(function(_context0) {
          while (1) switch (_context0.n) {
            case 0:
              _context0.p = 0;
              tokenId = BigInt(request.tokenId);
              _context0.n = 1;
              return getIpIdAddress({
                nftContract: request.nftContract,
                tokenId,
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 1:
              ipIdAddress = _context0.v;
              _context0.n = 2;
              return this.isRegistered(ipIdAddress);
            case 2:
              isRegistered = _context0.v;
              if (!isRegistered) {
                _context0.n = 3;
                break;
              }
              throw new Error("The NFT with id ".concat(tokenId, " is already registered as IP."));
            case 3:
              _context0.n = 4;
              return transformRegistrationRequest({
                request,
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 4:
              _yield$transformRegis3 = _context0.v;
              _transformRequest2 = _yield$transformRegis3.transformRequest;
              encodedTxData = this.derivativeWorkflowsClient.registerIpAndMakeDerivativeEncode(_transformRequest2);
              if (!((_request$txOptions6 = request.txOptions) !== null && _request$txOptions6 !== void 0 && _request$txOptions6.encodedTxDataOnly)) {
                _context0.n = 5;
                break;
              }
              return _context0.a(2, {
                encodedTxData
              });
            case 5:
              contractCall = function contractCall2() {
                return _this4.derivativeWorkflowsClient.registerIpAndMakeDerivative(_transformRequest2);
              };
              return _context0.a(2, this.handleRegistrationWithFees({
                wipOptions: _objectSpread2(_objectSpread2({}, (_request$options3 = request.options) === null || _request$options3 === void 0 ? void 0 : _request$options3.wipOptions), {}, {
                  useMulticallWhenPossible: false
                }),
                sender: this.walletAddress,
                spgSpenderAddress: this.derivativeWorkflowsClient.address,
                derivData: _transformRequest2.derivData,
                encodedTxs: [encodedTxData],
                contractCall,
                txOptions: request.txOptions
              }));
            case 6:
              _context0.p = 6;
              _t17 = _context0.v;
              return _context0.a(2, handleError(_t17, "Failed to register derivative IP"));
          }
        }, _callee0, this, [[0, 6]]);
      }));
      function registerDerivativeIp(_x1) {
        return _registerDerivativeIp.apply(this, arguments);
      }
      return registerDerivativeIp;
    }()
  }, {
    key: "mintAndRegisterIpAndMakeDerivative",
    value: function() {
      var _mintAndRegisterIpAndMakeDerivative = _asyncToGenerator(_regenerator().m(function _callee1(request) {
        var _this5 = this;
        var _request$txOptions7, _request$options4, spgNftContract, _yield$transformRegis4, _transformRequest3, encodedTxData, contractCall, _t18;
        return _regenerator().w(function(_context1) {
          while (1) switch (_context1.n) {
            case 0:
              _context1.p = 0;
              spgNftContract = validateAddress(request.spgNftContract);
              _context1.n = 1;
              return transformRegistrationRequest({
                request,
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 1:
              _yield$transformRegis4 = _context1.v;
              _transformRequest3 = _yield$transformRegis4.transformRequest;
              encodedTxData = this.derivativeWorkflowsClient.mintAndRegisterIpAndMakeDerivativeEncode(_transformRequest3);
              if (!((_request$txOptions7 = request.txOptions) !== null && _request$txOptions7 !== void 0 && _request$txOptions7.encodedTxDataOnly)) {
                _context1.n = 2;
                break;
              }
              return _context1.a(2, {
                encodedTxData
              });
            case 2:
              contractCall = function contractCall2() {
                return _this5.derivativeWorkflowsClient.mintAndRegisterIpAndMakeDerivative(_transformRequest3);
              };
              return _context1.a(2, this.handleRegistrationWithFees({
                wipOptions: (_request$options4 = request.options) === null || _request$options4 === void 0 ? void 0 : _request$options4.wipOptions,
                sender: this.walletAddress,
                spgSpenderAddress: this.derivativeWorkflowsClient.address,
                spgNftContract,
                derivData: _transformRequest3.derivData,
                encodedTxs: [encodedTxData],
                contractCall,
                txOptions: request.txOptions
              }));
            case 3:
              _context1.p = 3;
              _t18 = _context1.v;
              return _context1.a(2, handleError(_t18, "Failed to mint and register IP and make derivative"));
          }
        }, _callee1, this, [[0, 3]]);
      }));
      function mintAndRegisterIpAndMakeDerivative(_x10) {
        return _mintAndRegisterIpAndMakeDerivative.apply(this, arguments);
      }
      return mintAndRegisterIpAndMakeDerivative;
    }()
  }, {
    key: "batchMintAndRegisterIpAndMakeDerivative",
    value: function() {
      var _batchMintAndRegisterIpAndMakeDerivative = _asyncToGenerator(_regenerator().m(function _callee10(request) {
        var calldata, _iterator4, _step4, arg, result, txHash, txReceipt, _t19, _t20, _t21;
        return _regenerator().w(function(_context10) {
          while (1) switch (_context10.n) {
            case 0:
              _context10.p = 0;
              calldata = [];
              _iterator4 = _createForOfIteratorHelper(request.args);
              _context10.p = 1;
              _iterator4.s();
            case 2:
              if ((_step4 = _iterator4.n()).done) {
                _context10.n = 7;
                break;
              }
              arg = _step4.value;
              _context10.p = 3;
              _context10.n = 4;
              return this.mintAndRegisterIpAndMakeDerivative(_objectSpread2(_objectSpread2({}, arg), {}, {
                txOptions: {
                  encodedTxDataOnly: true
                }
              }));
            case 4:
              result = _context10.v;
              calldata.push(result.encodedTxData.data);
              _context10.n = 6;
              break;
            case 5:
              _context10.p = 5;
              _t19 = _context10.v;
              throw new Error(_t19.message.replace("Failed to mint and register IP and make derivative: ", "").trim());
            case 6:
              _context10.n = 2;
              break;
            case 7:
              _context10.n = 9;
              break;
            case 8:
              _context10.p = 8;
              _t20 = _context10.v;
              _iterator4.e(_t20);
            case 9:
              _context10.p = 9;
              _iterator4.f();
              return _context10.f(9);
            case 10:
              _context10.n = 11;
              return this.derivativeWorkflowsClient.multicall({
                data: calldata
              });
            case 11:
              txHash = _context10.v;
              _context10.n = 12;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 12:
              txReceipt = _context10.v;
              return _context10.a(2, {
                txHash,
                results: this.getIpIdAndTokenIdsFromEvent(txReceipt, "spgNftContract")
              });
            case 13:
              _context10.p = 13;
              _t21 = _context10.v;
              return _context10.a(2, handleError(_t21, "Failed to batch mint and register IP and make derivative"));
          }
        }, _callee10, this, [[3, 5], [1, 8, 9, 10], [0, 13]]);
      }));
      function batchMintAndRegisterIpAndMakeDerivative(_x11) {
        return _batchMintAndRegisterIpAndMakeDerivative.apply(this, arguments);
      }
      return batchMintAndRegisterIpAndMakeDerivative;
    }()
  }, {
    key: "mintAndRegisterIp",
    value: function() {
      var _mintAndRegisterIp = _asyncToGenerator(_regenerator().m(function _callee11(request) {
        var _this6 = this;
        var _request$txOptions8, _request$options5, _object, encodedTxData, contractCall, _t22;
        return _regenerator().w(function(_context11) {
          while (1) switch (_context11.n) {
            case 0:
              _context11.p = 0;
              _object = {
                spgNftContract: validateAddress(request.spgNftContract),
                recipient: validateAddress(request.recipient || this.walletAddress),
                ipMetadata: getIpMetadataForWorkflow(request.ipMetadata),
                allowDuplicates: request.allowDuplicates || true
              };
              encodedTxData = this.registrationWorkflowsClient.mintAndRegisterIpEncode(_object);
              if (!((_request$txOptions8 = request.txOptions) !== null && _request$txOptions8 !== void 0 && _request$txOptions8.encodedTxDataOnly)) {
                _context11.n = 1;
                break;
              }
              return _context11.a(2, {
                encodedTxData
              });
            case 1:
              contractCall = function contractCall2() {
                return _this6.registrationWorkflowsClient.mintAndRegisterIp(_object);
              };
              return _context11.a(2, this.handleRegistrationWithFees({
                sender: this.walletAddress,
                spgSpenderAddress: this.registrationWorkflowsClient.address,
                encodedTxs: [encodedTxData],
                contractCall,
                spgNftContract: _object.spgNftContract,
                txOptions: request.txOptions,
                wipOptions: _objectSpread2(_objectSpread2({}, (_request$options5 = request.options) === null || _request$options5 === void 0 ? void 0 : _request$options5.wipOptions), {}, {
                  useMulticallWhenPossible: false
                })
              }));
            case 2:
              _context11.p = 2;
              _t22 = _context11.v;
              return _context11.a(2, handleError(_t22, "Failed to mint and register IP"));
          }
        }, _callee11, this, [[0, 2]]);
      }));
      function mintAndRegisterIp(_x12) {
        return _mintAndRegisterIp.apply(this, arguments);
      }
      return mintAndRegisterIp;
    }()
  }, {
    key: "registerPilTermsAndAttach",
    value: function() {
      var _registerPilTermsAndAttach = _asyncToGenerator(_regenerator().m(function _callee12(request) {
        var _request$txOptions9, ipId, isRegistered, _yield$validateLicens3, licenseTerms, licenseTermsData, calculatedDeadline, ipAccount, _yield$ipAccount$stat2, state, signature, _object2, txHash, licenseTermsIds, _t23;
        return _regenerator().w(function(_context12) {
          while (1) switch (_context12.n) {
            case 0:
              _context12.p = 0;
              ipId = request.ipId;
              _context12.n = 1;
              return this.isRegistered(ipId);
            case 1:
              isRegistered = _context12.v;
              if (isRegistered) {
                _context12.n = 2;
                break;
              }
              throw new Error("The IP with id ".concat(ipId, " is not registered."));
            case 2:
              _context12.n = 3;
              return validateLicenseTermsData(request.licenseTermsData, this.rpcClient);
            case 3:
              _yield$validateLicens3 = _context12.v;
              licenseTerms = _yield$validateLicens3.licenseTerms;
              licenseTermsData = _yield$validateLicens3.licenseTermsData;
              _context12.n = 4;
              return getCalculatedDeadline(this.rpcClient, request.deadline);
            case 4:
              calculatedDeadline = _context12.v;
              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, ipId);
              _context12.n = 5;
              return ipAccount.state();
            case 5:
              _yield$ipAccount$stat2 = _context12.v;
              state = _yield$ipAccount$stat2.result;
              _context12.n = 6;
              return generateOperationSignature({
                ipIdAddress: ipId,
                methodType: SignatureMethodType.REGISTER_PIL_TERMS_AND_ATTACH,
                deadline: calculatedDeadline,
                state,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 6:
              signature = _context12.v;
              _object2 = {
                ipId,
                licenseTermsData,
                sigAttachAndConfig: {
                  signer: validateAddress(this.walletAddress),
                  deadline: calculatedDeadline,
                  signature
                }
              };
              if (!((_request$txOptions9 = request.txOptions) !== null && _request$txOptions9 !== void 0 && _request$txOptions9.encodedTxDataOnly)) {
                _context12.n = 7;
                break;
              }
              return _context12.a(2, {
                encodedTxData: this.licenseAttachmentWorkflowsClient.registerPilTermsAndAttachEncode(_object2)
              });
            case 7:
              _context12.n = 8;
              return this.licenseAttachmentWorkflowsClient.registerPilTermsAndAttach(_object2);
            case 8:
              txHash = _context12.v;
              _context12.n = 9;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 9:
              _context12.n = 10;
              return this.getLicenseTermsId(licenseTerms);
            case 10:
              licenseTermsIds = _context12.v;
              return _context12.a(2, {
                txHash,
                licenseTermsIds
              });
            case 11:
              _context12.n = 13;
              break;
            case 12:
              _context12.p = 12;
              _t23 = _context12.v;
              return _context12.a(2, handleError(_t23, "Failed to register PIL terms and attach"));
            case 13:
              return _context12.a(2);
          }
        }, _callee12, this, [[0, 12]]);
      }));
      function registerPilTermsAndAttach(_x13) {
        return _registerPilTermsAndAttach.apply(this, arguments);
      }
      return registerPilTermsAndAttach;
    }()
  }, {
    key: "mintAndRegisterIpAndMakeDerivativeWithLicenseTokens",
    value: function() {
      var _mintAndRegisterIpAndMakeDerivativeWithLicenseTokens = _asyncToGenerator(_regenerator().m(function _callee14(request) {
        var _this7 = this;
        var _request$txOptions0, _request$options6, licenseTokenIds, _object3, encodedTxData, contractCall, _t24;
        return _regenerator().w(function(_context14) {
          while (1) switch (_context14.n) {
            case 0:
              _context14.p = 0;
              _context14.n = 1;
              return this.validateLicenseTokenIds(request.licenseTokenIds);
            case 1:
              licenseTokenIds = _context14.v;
              _object3 = {
                spgNftContract: validateAddress(request.spgNftContract),
                recipient: validateAddress(request.recipient || this.walletAddress),
                ipMetadata: getIpMetadataForWorkflow(request.ipMetadata),
                licenseTokenIds,
                royaltyContext: zeroAddress,
                maxRts: Number(request.maxRts),
                allowDuplicates: request.allowDuplicates || true
              };
              validateMaxRts(_object3.maxRts);
              encodedTxData = this.derivativeWorkflowsClient.mintAndRegisterIpAndMakeDerivativeWithLicenseTokensEncode(_object3);
              if (!((_request$txOptions0 = request.txOptions) !== null && _request$txOptions0 !== void 0 && _request$txOptions0.encodedTxDataOnly)) {
                _context14.n = 2;
                break;
              }
              return _context14.a(2, {
                encodedTxData
              });
            case 2:
              contractCall = function() {
                var _ref2 = _asyncToGenerator(_regenerator().m(function _callee13() {
                  return _regenerator().w(function(_context13) {
                    while (1) switch (_context13.n) {
                      case 0:
                        return _context13.a(2, _this7.derivativeWorkflowsClient.mintAndRegisterIpAndMakeDerivativeWithLicenseTokens(_object3));
                    }
                  }, _callee13);
                }));
                return function contractCall2() {
                  return _ref2.apply(this, arguments);
                };
              }();
              return _context14.a(2, this.handleRegistrationWithFees({
                wipOptions: _objectSpread2(_objectSpread2({}, (_request$options6 = request.options) === null || _request$options6 === void 0 ? void 0 : _request$options6.wipOptions), {}, {
                  // need to disable multicall to avoid needing to transfer the license
                  // token to the multicall contract.
                  useMulticallWhenPossible: false
                }),
                sender: this.walletAddress,
                spgNftContract: _object3.spgNftContract,
                spgSpenderAddress: this.derivativeWorkflowsClient.address,
                encodedTxs: [encodedTxData],
                contractCall,
                txOptions: request.txOptions
              }));
            case 3:
              _context14.p = 3;
              _t24 = _context14.v;
              return _context14.a(2, handleError(_t24, "Failed to mint and register IP and make derivative with license tokens"));
          }
        }, _callee14, this, [[0, 3]]);
      }));
      function mintAndRegisterIpAndMakeDerivativeWithLicenseTokens(_x14) {
        return _mintAndRegisterIpAndMakeDerivativeWithLicenseTokens.apply(this, arguments);
      }
      return mintAndRegisterIpAndMakeDerivativeWithLicenseTokens;
    }()
  }, {
    key: "registerIpAndMakeDerivativeWithLicenseTokens",
    value: function() {
      var _registerIpAndMakeDerivativeWithLicenseTokens = _asyncToGenerator(_regenerator().m(function _callee15(request) {
        var _request$txOptions1, tokenId, ipIdAddress, isRegistered, licenseTokenIds, calculatedDeadline, signature, _object4, txHash, receipt, log, _t25;
        return _regenerator().w(function(_context15) {
          while (1) switch (_context15.n) {
            case 0:
              _context15.p = 0;
              tokenId = BigInt(request.tokenId);
              _context15.n = 1;
              return getIpIdAddress({
                nftContract: request.nftContract,
                tokenId,
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 1:
              ipIdAddress = _context15.v;
              _context15.n = 2;
              return this.isRegistered(ipIdAddress);
            case 2:
              isRegistered = _context15.v;
              if (!isRegistered) {
                _context15.n = 3;
                break;
              }
              throw new Error("The NFT with id ".concat(tokenId, " is already registered as IP."));
            case 3:
              _context15.n = 4;
              return this.validateLicenseTokenIds(request.licenseTokenIds);
            case 4:
              licenseTokenIds = _context15.v;
              _context15.n = 5;
              return getCalculatedDeadline(this.rpcClient, request.deadline);
            case 5:
              calculatedDeadline = _context15.v;
              _context15.n = 6;
              return generateOperationSignature({
                ipIdAddress,
                methodType: SignatureMethodType.REGISTER_IP_AND_MAKE_DERIVATIVE_WITH_LICENSE_TOKENS,
                deadline: calculatedDeadline,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 6:
              signature = _context15.v;
              _object4 = _objectSpread2(_objectSpread2({}, request), {}, {
                tokenId,
                licenseTokenIds,
                royaltyContext: zeroAddress,
                ipMetadata: getIpMetadataForWorkflow(request.ipMetadata),
                sigMetadataAndRegister: {
                  signer: validateAddress(this.walletAddress),
                  deadline: calculatedDeadline,
                  signature
                },
                maxRts: Number(request.maxRts)
              });
              validateMaxRts(_object4.maxRts);
              if (!((_request$txOptions1 = request.txOptions) !== null && _request$txOptions1 !== void 0 && _request$txOptions1.encodedTxDataOnly)) {
                _context15.n = 7;
                break;
              }
              return _context15.a(2, {
                encodedTxData: this.derivativeWorkflowsClient.registerIpAndMakeDerivativeWithLicenseTokensEncode(_object4)
              });
            case 7:
              _context15.n = 8;
              return this.derivativeWorkflowsClient.registerIpAndMakeDerivativeWithLicenseTokens(_object4);
            case 8:
              txHash = _context15.v;
              _context15.n = 9;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 9:
              receipt = _context15.v;
              log = this.getIpIdAndTokenIdsFromEvent(receipt)[0];
              return _context15.a(2, _objectSpread2({
                txHash
              }, log));
            case 10:
              _context15.n = 12;
              break;
            case 11:
              _context15.p = 11;
              _t25 = _context15.v;
              return _context15.a(2, handleError(_t25, "Failed to register IP and make derivative with license tokens"));
            case 12:
              return _context15.a(2);
          }
        }, _callee15, this, [[0, 11]]);
      }));
      function registerIpAndMakeDerivativeWithLicenseTokens(_x15) {
        return _registerIpAndMakeDerivativeWithLicenseTokens.apply(this, arguments);
      }
      return registerIpAndMakeDerivativeWithLicenseTokens;
    }()
  }, {
    key: "registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens",
    value: function() {
      var _registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens = _asyncToGenerator(_regenerator().m(function _callee16(request) {
        var _getRoyaltyShares, royaltyShares, totalAmount, _yield$validateLicens4, licenseTerms, calculatedDeadline, ipIdAddress, isRegistered, _yield$transformRegis5, _transformRequest4, registerIpAndAttachPilTermsAndDeployRoyaltyVaultTxHash, txReceipt, ipId, licenseTermsIds, ipRoyaltyVault, distributeRoyaltyTokensTxHash, _t26;
        return _regenerator().w(function(_context16) {
          while (1) switch (_context16.n) {
            case 0:
              _context16.p = 0;
              _getRoyaltyShares = getRoyaltyShares(request.royaltyShares), royaltyShares = _getRoyaltyShares.royaltyShares, totalAmount = _getRoyaltyShares.totalAmount;
              _context16.n = 1;
              return validateLicenseTermsData(request.licenseTermsData, this.rpcClient);
            case 1:
              _yield$validateLicens4 = _context16.v;
              licenseTerms = _yield$validateLicens4.licenseTerms;
              _context16.n = 2;
              return getCalculatedDeadline(this.rpcClient, request.deadline);
            case 2:
              calculatedDeadline = _context16.v;
              _context16.n = 3;
              return getIpIdAddress({
                nftContract: validateAddress(request.nftContract),
                tokenId: BigInt(request.tokenId),
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 3:
              ipIdAddress = _context16.v;
              _context16.n = 4;
              return this.isRegistered(ipIdAddress);
            case 4:
              isRegistered = _context16.v;
              if (!isRegistered) {
                _context16.n = 5;
                break;
              }
              throw new Error("The NFT with id ".concat(request.tokenId, " is already registered as IP."));
            case 5:
              _context16.n = 6;
              return transformRegistrationRequest({
                request,
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 6:
              _yield$transformRegis5 = _context16.v;
              _transformRequest4 = _yield$transformRegis5.transformRequest;
              _context16.n = 7;
              return this.royaltyTokenDistributionWorkflowsClient.registerIpAndAttachPilTermsAndDeployRoyaltyVault(_transformRequest4);
            case 7:
              registerIpAndAttachPilTermsAndDeployRoyaltyVaultTxHash = _context16.v;
              _context16.n = 8;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: registerIpAndAttachPilTermsAndDeployRoyaltyVaultTxHash
              }));
            case 8:
              txReceipt = _context16.v;
              ipId = this.getIpIdAndTokenIdsFromEvent(txReceipt)[0].ipId;
              _context16.n = 9;
              return this.getLicenseTermsId(licenseTerms);
            case 9:
              licenseTermsIds = _context16.v;
              ipRoyaltyVault = this.royaltyModuleEventClient.parseTxIpRoyaltyVaultDeployedEvent(txReceipt)[0].ipRoyaltyVault;
              _context16.n = 10;
              return this.distributeRoyaltyTokens({
                ipId,
                deadline: calculatedDeadline,
                ipRoyaltyVault,
                royaltyShares,
                totalAmount,
                txOptions: request.txOptions
              });
            case 10:
              distributeRoyaltyTokensTxHash = _context16.v;
              _context16.n = 11;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: distributeRoyaltyTokensTxHash
              }));
            case 11:
              return _context16.a(2, {
                registerIpAndAttachPilTermsAndDeployRoyaltyVaultTxHash,
                distributeRoyaltyTokensTxHash,
                ipId,
                licenseTermsIds,
                ipRoyaltyVault
              });
            case 12:
              _context16.p = 12;
              _t26 = _context16.v;
              return _context16.a(2, handleError(_t26, "Failed to register IP and attach license terms and distribute royalty tokens"));
          }
        }, _callee16, this, [[0, 12]]);
      }));
      function registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens(_x16) {
        return _registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens.apply(this, arguments);
      }
      return registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens;
    }()
  }, {
    key: "registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens",
    value: function() {
      var _registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens = _asyncToGenerator(_regenerator().m(function _callee17(request) {
        var _this8 = this;
        var _request$options7, ipIdAddress, _yield$transformRegis6, _transformRequest5, _getRoyaltyShares2, royaltyShares, totalAmount, isRegistered, encodedTxData, contractCall, _yield$this$handleReg, txHash, ipId, tokenId, receipt, ipRoyaltyVault, distributeRoyaltyTokensTxHash, _t27;
        return _regenerator().w(function(_context17) {
          while (1) switch (_context17.n) {
            case 0:
              _context17.p = 0;
              _context17.n = 1;
              return getIpIdAddress({
                nftContract: validateAddress(request.nftContract),
                tokenId: BigInt(request.tokenId),
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 1:
              ipIdAddress = _context17.v;
              _context17.n = 2;
              return transformRegistrationRequest({
                request,
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 2:
              _yield$transformRegis6 = _context17.v;
              _transformRequest5 = _yield$transformRegis6.transformRequest;
              _getRoyaltyShares2 = getRoyaltyShares(request.royaltyShares), royaltyShares = _getRoyaltyShares2.royaltyShares, totalAmount = _getRoyaltyShares2.totalAmount;
              _context17.n = 3;
              return this.isRegistered(ipIdAddress);
            case 3:
              isRegistered = _context17.v;
              if (!isRegistered) {
                _context17.n = 4;
                break;
              }
              throw new Error("The NFT with id ".concat(request.tokenId, " is already registered as IP."));
            case 4:
              encodedTxData = this.royaltyTokenDistributionWorkflowsClient.registerIpAndMakeDerivativeAndDeployRoyaltyVaultEncode(_transformRequest5);
              contractCall = function contractCall2() {
                return _this8.royaltyTokenDistributionWorkflowsClient.registerIpAndMakeDerivativeAndDeployRoyaltyVault(_transformRequest5);
              };
              _context17.n = 5;
              return this.handleRegistrationWithFees({
                wipOptions: _objectSpread2(_objectSpread2({}, (_request$options7 = request.options) === null || _request$options7 === void 0 ? void 0 : _request$options7.wipOptions), {}, {
                  useMulticallWhenPossible: false
                }),
                sender: this.walletAddress,
                spgSpenderAddress: this.royaltyTokenDistributionWorkflowsClient.address,
                derivData: _transformRequest5.derivData,
                encodedTxs: [encodedTxData],
                contractCall,
                txOptions: _objectSpread2({}, request.txOptions)
              });
            case 5:
              _yield$this$handleReg = _context17.v;
              txHash = _yield$this$handleReg.txHash;
              ipId = _yield$this$handleReg.ipId;
              tokenId = _yield$this$handleReg.tokenId;
              receipt = _yield$this$handleReg.receipt;
              if (!(tokenId === void 0 || !ipId || !receipt)) {
                _context17.n = 6;
                break;
              }
              throw new Error("Failed to register derivative ip and deploy royalty vault.");
            case 6:
              ipRoyaltyVault = this.royaltyModuleEventClient.parseTxIpRoyaltyVaultDeployedEvent(receipt).filter(function(item) {
                return item.ipId === ipId;
              })[0].ipRoyaltyVault;
              _context17.n = 7;
              return this.distributeRoyaltyTokens({
                ipId,
                deadline: request.deadline,
                ipRoyaltyVault,
                royaltyShares,
                totalAmount,
                txOptions: request.txOptions
              });
            case 7:
              distributeRoyaltyTokensTxHash = _context17.v;
              _context17.n = 8;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: distributeRoyaltyTokensTxHash
              }));
            case 8:
              return _context17.a(2, {
                registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokensTxHash: txHash,
                distributeRoyaltyTokensTxHash,
                ipId,
                tokenId,
                ipRoyaltyVault
              });
            case 9:
              _context17.p = 9;
              _t27 = _context17.v;
              return _context17.a(2, handleError(_t27, "Failed to register derivative IP and attach license terms and distribute royalty tokens"));
          }
        }, _callee17, this, [[0, 9]]);
      }));
      function registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens(_x17) {
        return _registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens.apply(this, arguments);
      }
      return registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens;
    }()
  }, {
    key: "mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens",
    value: function() {
      var _mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens = _asyncToGenerator(_regenerator().m(function _callee18(request) {
        var _this9 = this;
        var _request$options8, _yield$validateLicens5, licenseTerms, _yield$transformRegis7, _transformRequest6, encodedTxData, contractCall, _yield$this$handleReg2, txHash, ipId, tokenId, receipt, licenseTermsIds, ipRoyaltyVault, _t28;
        return _regenerator().w(function(_context18) {
          while (1) switch (_context18.n) {
            case 0:
              _context18.p = 0;
              _context18.n = 1;
              return validateLicenseTermsData(request.licenseTermsData, this.rpcClient);
            case 1:
              _yield$validateLicens5 = _context18.v;
              licenseTerms = _yield$validateLicens5.licenseTerms;
              _context18.n = 2;
              return transformRegistrationRequest({
                request,
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 2:
              _yield$transformRegis7 = _context18.v;
              _transformRequest6 = _yield$transformRegis7.transformRequest;
              encodedTxData = this.royaltyTokenDistributionWorkflowsClient.mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensEncode(_transformRequest6);
              contractCall = function contractCall2() {
                return _this9.royaltyTokenDistributionWorkflowsClient.mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens(_transformRequest6);
              };
              _context18.n = 3;
              return this.handleRegistrationWithFees({
                wipOptions: (_request$options8 = request.options) === null || _request$options8 === void 0 ? void 0 : _request$options8.wipOptions,
                sender: this.walletAddress,
                spgNftContract: _transformRequest6.spgNftContract,
                spgSpenderAddress: this.royaltyTokenDistributionWorkflowsClient.address,
                encodedTxs: [encodedTxData],
                contractCall,
                txOptions: request.txOptions
              });
            case 3:
              _yield$this$handleReg2 = _context18.v;
              txHash = _yield$this$handleReg2.txHash;
              ipId = _yield$this$handleReg2.ipId;
              tokenId = _yield$this$handleReg2.tokenId;
              receipt = _yield$this$handleReg2.receipt;
              if (receipt) {
                _context18.n = 4;
                break;
              }
              return _context18.a(2, {
                txHash
              });
            case 4:
              _context18.n = 5;
              return this.getLicenseTermsId(licenseTerms);
            case 5:
              licenseTermsIds = _context18.v;
              ipRoyaltyVault = this.royaltyModuleEventClient.parseTxIpRoyaltyVaultDeployedEvent(receipt)[0].ipRoyaltyVault;
              return _context18.a(2, {
                txHash,
                ipId,
                licenseTermsIds,
                ipRoyaltyVault,
                tokenId
              });
            case 6:
              _context18.p = 6;
              _t28 = _context18.v;
              return _context18.a(2, handleError(_t28, "Failed to mint and register IP and attach PIL terms and distribute royalty tokens"));
          }
        }, _callee18, this, [[0, 6]]);
      }));
      function mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens(_x18) {
        return _mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens.apply(this, arguments);
      }
      return mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens;
    }()
  }, {
    key: "mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens",
    value: function() {
      var _mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens = _asyncToGenerator(_regenerator().m(function _callee19(request) {
        var _this0 = this;
        var _request$options9, _yield$transformRegis8, _transformRequest7, encodedTxData, contractCall, _t29;
        return _regenerator().w(function(_context19) {
          while (1) switch (_context19.n) {
            case 0:
              _context19.p = 0;
              _context19.n = 1;
              return transformRegistrationRequest({
                request,
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 1:
              _yield$transformRegis8 = _context19.v;
              _transformRequest7 = _yield$transformRegis8.transformRequest;
              encodedTxData = this.royaltyTokenDistributionWorkflowsClient.mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensEncode(_transformRequest7);
              contractCall = function contractCall2() {
                return _this0.royaltyTokenDistributionWorkflowsClient.mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens(_transformRequest7);
              };
              _context19.n = 2;
              return this.handleRegistrationWithFees({
                spgNftContract: _transformRequest7.spgNftContract,
                wipOptions: (_request$options9 = request.options) === null || _request$options9 === void 0 ? void 0 : _request$options9.wipOptions,
                sender: this.walletAddress,
                spgSpenderAddress: this.royaltyTokenDistributionWorkflowsClient.address,
                derivData: _transformRequest7.derivData,
                encodedTxs: [encodedTxData],
                contractCall,
                txOptions: request.txOptions
              });
            case 2:
              return _context19.a(2, _context19.v);
            case 3:
              _context19.p = 3;
              _t29 = _context19.v;
              return _context19.a(2, handleError(_t29, "Failed to mint and register IP and make derivative and distribute royalty tokens"));
          }
        }, _callee19, this, [[0, 3]]);
      }));
      function mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens(_x19) {
        return _mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens.apply(this, arguments);
      }
      return mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens;
    }()
  }, {
    key: "distributeRoyaltyTokens",
    value: function() {
      var _distributeRoyaltyTokens = _asyncToGenerator(_regenerator().m(function _callee20(request) {
        var _yield$transferDistri, transformRequest, txHash;
        return _regenerator().w(function(_context20) {
          while (1) switch (_context20.n) {
            case 0:
              _context20.n = 1;
              return transferDistributeRoyaltyTokensRequest({
                request,
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 1:
              _yield$transferDistri = _context20.v;
              transformRequest = _yield$transferDistri.transformRequest;
              _context20.n = 2;
              return this.royaltyTokenDistributionWorkflowsClient.distributeRoyaltyTokens(transformRequest);
            case 2:
              txHash = _context20.v;
              _context20.n = 3;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 3:
              return _context20.a(2, txHash);
          }
        }, _callee20, this);
      }));
      function distributeRoyaltyTokens(_x20) {
        return _distributeRoyaltyTokens.apply(this, arguments);
      }
      return distributeRoyaltyTokens;
    }()
  }, {
    key: "isRegistered",
    value: function() {
      var _isRegistered = _asyncToGenerator(_regenerator().m(function _callee21(ipId) {
        return _regenerator().w(function(_context21) {
          while (1) switch (_context21.n) {
            case 0:
              _context21.n = 1;
              return this.ipAssetRegistryClient.isRegistered({
                id: validateAddress(ipId)
              });
            case 1:
              return _context21.a(2, _context21.v);
          }
        }, _callee21, this);
      }));
      function isRegistered(_x21) {
        return _isRegistered.apply(this, arguments);
      }
      return isRegistered;
    }()
    /**
     * Batch register multiple IP assets in optimized transactions, supporting various registration methods:
     * - {@link mintAndRegisterIpAndMakeDerivative}
     * - {@link mintAndRegisterIpAssetWithPilTerms}
     * - {@link mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens}
     * - {@link mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens}
     * - {@link registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens}
     * - {@link registerIpAndAttachPilTerms}
     * - {@link registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens}
     * - {@link registerDerivativeIp}
     *
     * This method optimizes transaction processing by:
     * 1. Transforming all requests into appropriate workflow formats
     * 2. Grouping related workflow requests together
     * 3. Intelligently selecting between multicall3 and SPG's multicall based on compatibility
     *
     * The batching strategy significantly reduces gas costs and improves transaction throughput
     * by minimizing the number of separate blockchain transactions. It also handles complex
     * workflows like royalty token distribution automatically.
     *
     * The method supports automatic token handling for minting fees:
     * - If the wallet's IP token balance is insufficient to cover minting fees, it automatically wraps native IP tokens into WIP tokens.
     * - It checks allowances for all required spenders and automatically approves them if their current allowance is lower than needed.
     * - These automatic processes can be configured through the `wipOptions` parameter to control behavior like multicall usage and approval settings.
     *
     * @remark Multicall selection logic:
     *
     * 1. For `mintAndRegister*` methods:
     *    - When `spgNftContract` has public minting disabled: Uses SPG's multicall
     *    - When `spgNftContract` has public minting enabled: Uses multicall3
     *    - Exception: {@link mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens} always uses
     *      SPG's multicall due to contract logic
     *
     * 2. For `register*` methods:
     *    - Always uses SPG's multicall for batching registration operations
     */
  }, {
    key: "batchRegisterIpAssetsWithOptimizedWorkflows",
    value: function() {
      var _batchRegisterIpAssetsWithOptimizedWorkflows = _asyncToGenerator(_regenerator().m(function _callee22(request) {
        var _request$options0, transferWorkflowResponses, _iterator5, _step5, req, res, royaltyDistributionRequests, txResponses, responses, prepareRoyaltyTokensDistributionResponses, _iterator6, _step6, _step6$value, txHash, receipt, iPRegisteredLog, ipRoyaltyVaultEvent, response, distributeRoyaltyTokensTxHashes, _request$options1, txResponse, _t30, _t31, _t32;
        return _regenerator().w(function(_context22) {
          while (1) switch (_context22.n) {
            case 0:
              _context22.p = 0;
              transferWorkflowResponses = [];
              _iterator5 = _createForOfIteratorHelper(request.requests);
              _context22.p = 1;
              _iterator5.s();
            case 2:
              if ((_step5 = _iterator5.n()).done) {
                _context22.n = 5;
                break;
              }
              req = _step5.value;
              _context22.n = 3;
              return transformRegistrationRequest({
                request: req,
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 3:
              res = _context22.v;
              transferWorkflowResponses.push(res);
            case 4:
              _context22.n = 2;
              break;
            case 5:
              _context22.n = 7;
              break;
            case 6:
              _context22.p = 6;
              _t30 = _context22.v;
              _iterator5.e(_t30);
            case 7:
              _context22.p = 7;
              _iterator5.f();
              return _context22.f(7);
            case 8:
              royaltyDistributionRequests = transferWorkflowResponses.filter(function(res2) {
                var _res$extraData;
                return (_res$extraData = res2.extraData) === null || _res$extraData === void 0 ? void 0 : _res$extraData.royaltyShares;
              }).map(function(res2) {
                return {
                  nftContract: res2.transformRequest.nftContract,
                  tokenId: res2.transformRequest.tokenId,
                  royaltyShares: res2.extraData.royaltyShares,
                  deadline: res2.extraData.deadline
                };
              });
              _context22.n = 9;
              return handleMulticall({
                transferWorkflowResponses,
                multicall3Address: this.multicall3Client.address,
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                walletAddress: this.walletAddress,
                wipOptions: (_request$options0 = request.options) === null || _request$options0 === void 0 ? void 0 : _request$options0.wipOptions,
                chainId: this.chainId
              });
            case 9:
              txResponses = _context22.v;
              responses = [];
              prepareRoyaltyTokensDistributionResponses = [];
              _iterator6 = _createForOfIteratorHelper(txResponses);
              _context22.p = 10;
              _iterator6.s();
            case 11:
              if ((_step6 = _iterator6.n()).done) {
                _context22.n = 14;
                break;
              }
              _step6$value = _step6.value, txHash = _step6$value.txHash, receipt = _step6$value.receipt;
              iPRegisteredLog = this.ipAssetRegistryClient.parseTxIpRegisteredEvent(receipt);
              ipRoyaltyVaultEvent = this.royaltyModuleEventClient.parseTxIpRoyaltyVaultDeployedEvent(receipt);
              _context22.n = 12;
              return prepareRoyaltyTokensDistributionRequests({
                royaltyDistributionRequests,
                ipRegisteredLog: iPRegisteredLog,
                ipRoyaltyVault: ipRoyaltyVaultEvent,
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                chainId: this.chainId
              });
            case 12:
              response = _context22.v;
              prepareRoyaltyTokensDistributionResponses.push.apply(prepareRoyaltyTokensDistributionResponses, _toConsumableArray(response));
              responses.push({
                txHash,
                receipt,
                ipIdAndTokenId: iPRegisteredLog.map(function(log) {
                  return {
                    ipId: log.ipId,
                    tokenId: log.tokenId
                  };
                })
              });
            case 13:
              _context22.n = 11;
              break;
            case 14:
              _context22.n = 16;
              break;
            case 15:
              _context22.p = 15;
              _t31 = _context22.v;
              _iterator6.e(_t31);
            case 16:
              _context22.p = 16;
              _iterator6.f();
              return _context22.f(16);
            case 17:
              if (!(prepareRoyaltyTokensDistributionResponses.length > 0)) {
                _context22.n = 19;
                break;
              }
              _context22.n = 18;
              return handleMulticall({
                transferWorkflowResponses: prepareRoyaltyTokensDistributionResponses,
                multicall3Address: this.multicall3Client.address,
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                walletAddress: this.walletAddress,
                wipOptions: (_request$options1 = request.options) === null || _request$options1 === void 0 ? void 0 : _request$options1.wipOptions,
                chainId: this.chainId
              });
            case 18:
              txResponse = _context22.v;
              distributeRoyaltyTokensTxHashes = txResponse.map(function(tx) {
                return tx.txHash;
              });
            case 19:
              return _context22.a(2, _objectSpread2({
                registrationResults: responses
              }, distributeRoyaltyTokensTxHashes && {
                distributeRoyaltyTokensTxHashes
              }));
            case 20:
              _context22.p = 20;
              _t32 = _context22.v;
              return _context22.a(2, handleError(_t32, "Failed to batch register IP assets with optimized workflows"));
          }
        }, _callee22, this, [[10, 15, 16, 17], [1, 6, 7, 8], [0, 20]]);
      }));
      function batchRegisterIpAssetsWithOptimizedWorkflows(_x22) {
        return _batchRegisterIpAssetsWithOptimizedWorkflows.apply(this, arguments);
      }
      return batchRegisterIpAssetsWithOptimizedWorkflows;
    }()
  }, {
    key: "getLicenseTermsId",
    value: function() {
      var _getLicenseTermsId = _asyncToGenerator(_regenerator().m(function _callee23(licenseTerms) {
        var licenseTermsIds, _iterator7, _step7, licenseTerm, licenseRes, _t33;
        return _regenerator().w(function(_context23) {
          while (1) switch (_context23.n) {
            case 0:
              licenseTermsIds = [];
              _iterator7 = _createForOfIteratorHelper(licenseTerms);
              _context23.p = 1;
              _iterator7.s();
            case 2:
              if ((_step7 = _iterator7.n()).done) {
                _context23.n = 5;
                break;
              }
              licenseTerm = _step7.value;
              _context23.n = 3;
              return this.licenseTemplateClient.getLicenseTermsId({
                terms: licenseTerm
              });
            case 3:
              licenseRes = _context23.v;
              licenseTermsIds.push(licenseRes.selectedLicenseTermsId);
            case 4:
              _context23.n = 2;
              break;
            case 5:
              _context23.n = 7;
              break;
            case 6:
              _context23.p = 6;
              _t33 = _context23.v;
              _iterator7.e(_t33);
            case 7:
              _context23.p = 7;
              _iterator7.f();
              return _context23.f(7);
            case 8:
              return _context23.a(2, licenseTermsIds);
          }
        }, _callee23, this, [[1, 6, 7, 8]]);
      }));
      function getLicenseTermsId(_x23) {
        return _getLicenseTermsId.apply(this, arguments);
      }
      return getLicenseTermsId;
    }()
  }, {
    key: "validateLicenseTokenIds",
    value: function() {
      var _validateLicenseTokenIds = _asyncToGenerator(_regenerator().m(function _callee24(licenseTokenIds) {
        var newLicenseTokenIds, _iterator8, _step8, licenseTokenId, tokenOwnerAddress, _t34;
        return _regenerator().w(function(_context24) {
          while (1) switch (_context24.n) {
            case 0:
              if (!(licenseTokenIds.length === 0)) {
                _context24.n = 1;
                break;
              }
              throw new Error("License token IDs must be provided.");
            case 1:
              newLicenseTokenIds = licenseTokenIds.map(function(id) {
                return BigInt(id);
              });
              _iterator8 = _createForOfIteratorHelper(newLicenseTokenIds);
              _context24.p = 2;
              _iterator8.s();
            case 3:
              if ((_step8 = _iterator8.n()).done) {
                _context24.n = 6;
                break;
              }
              licenseTokenId = _step8.value;
              _context24.n = 4;
              return this.licenseTokenReadOnlyClient.ownerOf({
                tokenId: licenseTokenId
              });
            case 4:
              tokenOwnerAddress = _context24.v;
              if (tokenOwnerAddress) {
                _context24.n = 5;
                break;
              }
              throw new Error("License token id ".concat(licenseTokenId, " must be owned by the caller."));
            case 5:
              _context24.n = 3;
              break;
            case 6:
              _context24.n = 8;
              break;
            case 7:
              _context24.p = 7;
              _t34 = _context24.v;
              _iterator8.e(_t34);
            case 8:
              _context24.p = 8;
              _iterator8.f();
              return _context24.f(8);
            case 9:
              return _context24.a(2, newLicenseTokenIds);
          }
        }, _callee24, this, [[2, 7, 8, 9]]);
      }));
      function validateLicenseTokenIds(_x24) {
        return _validateLicenseTokenIds.apply(this, arguments);
      }
      return validateLicenseTokenIds;
    }()
  }, {
    key: "getIpIdAndTokenIdsFromEvent",
    value: function getIpIdAndTokenIdsFromEvent(txReceipt, key) {
      var ipRegisteredLog = this.ipAssetRegistryClient.parseTxIpRegisteredEvent(txReceipt);
      return ipRegisteredLog.map(function(log) {
        var baseResult = {
          ipId: log.ipId,
          tokenId: log.tokenId
        };
        if (key) {
          return _objectSpread2(_objectSpread2({}, baseResult), {}, _defineProperty({}, key, log.tokenContract));
        }
        return baseResult;
      });
    }
  }, {
    key: "handleRegistrationWithFees",
    value: function() {
      var _handleRegistrationWithFees = _asyncToGenerator(_regenerator().m(function _callee25(_ref3) {
        var _wipOptions$useMultic;
        var sender, derivData, spgNftContract, spgSpenderAddress, txOptions, wipOptions, encodedTxs, contractCall, totalFees, wipSpenders, useMulticallWhenPossible, nftMintFee, publicMinting, totalDerivativeMintingFee, _yield$contractCallWi, txHash, receipt, _this$getIpIdAndToken, _event$ipId, _event$tokenId, event;
        return _regenerator().w(function(_context25) {
          while (1) switch (_context25.n) {
            case 0:
              sender = _ref3.sender, derivData = _ref3.derivData, spgNftContract = _ref3.spgNftContract, spgSpenderAddress = _ref3.spgSpenderAddress, txOptions = _ref3.txOptions, wipOptions = _ref3.wipOptions, encodedTxs = _ref3.encodedTxs, contractCall = _ref3.contractCall;
              totalFees = 0n;
              wipSpenders = [];
              useMulticallWhenPossible = (_wipOptions$useMultic = wipOptions === null || wipOptions === void 0 ? void 0 : wipOptions.useMulticallWhenPossible) !== null && _wipOptions$useMultic !== void 0 ? _wipOptions$useMultic : true;
              if (!spgNftContract) {
                _context25.n = 3;
                break;
              }
              _context25.n = 1;
              return calculateSPGWipMintFee(new SpgnftImplReadOnlyClient(this.rpcClient, spgNftContract));
            case 1:
              nftMintFee = _context25.v;
              _context25.n = 2;
              return getPublicMinting(spgNftContract, this.rpcClient);
            case 2:
              publicMinting = _context25.v;
              if (!publicMinting) {
                useMulticallWhenPossible = false;
              }
              totalFees += nftMintFee;
              wipSpenders.push({
                address: spgNftContract,
                amount: nftMintFee
              });
            case 3:
              if (!derivData) {
                _context25.n = 5;
                break;
              }
              _context25.n = 4;
              return calculateDerivativeMintingFee({
                derivData,
                rpcClient: this.rpcClient,
                wallet: this.wallet,
                chainId: this.chainId,
                sender
              });
            case 4:
              totalDerivativeMintingFee = _context25.v;
              totalFees += totalDerivativeMintingFee;
              if (totalDerivativeMintingFee > 0) {
                wipSpenders.push({
                  address: spgSpenderAddress,
                  amount: totalDerivativeMintingFee
                });
              }
            case 5:
              if (!(totalFees < 0)) {
                _context25.n = 6;
                break;
              }
              throw new Error("Total fees for registering derivative should never be negative: ".concat(totalFees));
            case 6:
              _context25.n = 7;
              return contractCallWithFees({
                totalFees,
                options: {
                  wipOptions: _objectSpread2(_objectSpread2({}, wipOptions), {}, {
                    useMulticallWhenPossible
                  })
                },
                multicall3Address: this.multicall3Client.address,
                rpcClient: this.rpcClient,
                tokenSpenders: wipSpenders,
                contractCall,
                sender,
                wallet: this.wallet,
                txOptions,
                encodedTxs
              });
            case 7:
              _yield$contractCallWi = _context25.v;
              txHash = _yield$contractCallWi.txHash;
              receipt = _yield$contractCallWi.receipt;
              if (!receipt) {
                _context25.n = 8;
                break;
              }
              event = (_this$getIpIdAndToken = this.getIpIdAndTokenIdsFromEvent(receipt)) === null || _this$getIpIdAndToken === void 0 ? void 0 : _this$getIpIdAndToken[0];
              return _context25.a(2, _objectSpread2({
                txHash,
                receipt
              }, event && {
                ipId: (_event$ipId = event.ipId) !== null && _event$ipId !== void 0 ? _event$ipId : void 0,
                tokenId: (_event$tokenId = event.tokenId) !== null && _event$tokenId !== void 0 ? _event$tokenId : void 0
              }));
            case 8:
              return _context25.a(2, {
                txHash
              });
          }
        }, _callee25, this);
      }));
      function handleRegistrationWithFees(_x25) {
        return _handleRegistrationWithFees.apply(this, arguments);
      }
      return handleRegistrationWithFees;
    }()
  }]);
}();
var LicenseClient = function() {
  function LicenseClient2(rpcClient, wallet, chainId) {
    _classCallCheck(this, LicenseClient2);
    this.licensingModuleClient = new LicensingModuleClient(rpcClient, wallet);
    this.piLicenseTemplateReadOnlyClient = new PiLicenseTemplateReadOnlyClient(rpcClient);
    this.licenseTemplateClient = new PiLicenseTemplateClient(rpcClient, wallet);
    this.licenseRegistryReadOnlyClient = new LicenseRegistryReadOnlyClient(rpcClient);
    this.ipAssetRegistryClient = new IpAssetRegistryClient(rpcClient, wallet);
    this.moduleRegistryReadOnlyClient = new ModuleRegistryReadOnlyClient(rpcClient);
    this.multicall3Client = new Multicall3Client(rpcClient, wallet);
    this.wipClient = new WrappedIpClient(rpcClient, wallet);
    this.rpcClient = rpcClient;
    this.wallet = wallet;
    this.chainId = chainId;
    this.walletAddress = wallet.account.address;
  }
  return _createClass(LicenseClient2, [{
    key: "registerPILTerms",
    value: function() {
      var _registerPILTerms = _asyncToGenerator(_regenerator().m(function _callee(request) {
        var object, licenseTermsId, _t;
        return _regenerator().w(function(_context) {
          while (1) switch (_context.n) {
            case 0:
              _context.p = 0;
              _context.n = 1;
              return validateLicenseTerms(request, this.rpcClient);
            case 1:
              object = _context.v;
              _context.n = 2;
              return this.getLicenseTermsId(object);
            case 2:
              licenseTermsId = _context.v;
              if (!(licenseTermsId !== 0n)) {
                _context.n = 3;
                break;
              }
              return _context.a(2, {
                licenseTermsId
              });
            case 3:
              _context.n = 4;
              return this.registerPILTermsHelper(object, request.txOptions);
            case 4:
              return _context.a(2, _context.v);
            case 5:
              _context.p = 5;
              _t = _context.v;
              return _context.a(2, handleError(_t, "Failed to register license terms"));
          }
        }, _callee, this, [[0, 5]]);
      }));
      function registerPILTerms(_x) {
        return _registerPILTerms.apply(this, arguments);
      }
      return registerPILTerms;
    }()
  }, {
    key: "registerNonComSocialRemixingPIL",
    value: function() {
      var _registerNonComSocialRemixingPIL = _asyncToGenerator(_regenerator().m(function _callee2(request) {
        var licenseTerms, _t2;
        return _regenerator().w(function(_context2) {
          while (1) switch (_context2.n) {
            case 0:
              _context2.p = 0;
              licenseTerms = getLicenseTermByType(PIL_TYPE.NON_COMMERCIAL_REMIX);
              _context2.n = 1;
              return this.registerPILTermsHelper(licenseTerms, request === null || request === void 0 ? void 0 : request.txOptions);
            case 1:
              return _context2.a(2, _context2.v);
            case 2:
              _context2.p = 2;
              _t2 = _context2.v;
              return _context2.a(2, handleError(_t2, "Failed to register non commercial social remixing PIL"));
          }
        }, _callee2, this, [[0, 2]]);
      }));
      function registerNonComSocialRemixingPIL(_x2) {
        return _registerNonComSocialRemixingPIL.apply(this, arguments);
      }
      return registerNonComSocialRemixingPIL;
    }()
  }, {
    key: "registerCommercialUsePIL",
    value: function() {
      var _registerCommercialUsePIL = _asyncToGenerator(_regenerator().m(function _callee3(request) {
        var licenseTerms, _t3;
        return _regenerator().w(function(_context3) {
          while (1) switch (_context3.n) {
            case 0:
              _context3.p = 0;
              licenseTerms = getLicenseTermByType(PIL_TYPE.COMMERCIAL_USE, {
                defaultMintingFee: request.defaultMintingFee,
                currency: request.currency,
                royaltyPolicyAddress: validateAddress(request.royaltyPolicyAddress || royaltyPolicyLapAddress[this.chainId])
              });
              _context3.n = 1;
              return this.registerPILTermsHelper(licenseTerms, request.txOptions);
            case 1:
              return _context3.a(2, _context3.v);
            case 2:
              _context3.p = 2;
              _t3 = _context3.v;
              return _context3.a(2, handleError(_t3, "Failed to register commercial use PIL"));
          }
        }, _callee3, this, [[0, 2]]);
      }));
      function registerCommercialUsePIL(_x3) {
        return _registerCommercialUsePIL.apply(this, arguments);
      }
      return registerCommercialUsePIL;
    }()
  }, {
    key: "registerCommercialRemixPIL",
    value: function() {
      var _registerCommercialRemixPIL = _asyncToGenerator(_regenerator().m(function _callee4(request) {
        var licenseTerms, _t4;
        return _regenerator().w(function(_context4) {
          while (1) switch (_context4.n) {
            case 0:
              _context4.p = 0;
              licenseTerms = getLicenseTermByType(PIL_TYPE.COMMERCIAL_REMIX, {
                defaultMintingFee: request.defaultMintingFee,
                currency: request.currency,
                royaltyPolicyAddress: validateAddress(request.royaltyPolicyAddress || royaltyPolicyLapAddress[this.chainId]),
                commercialRevShare: request.commercialRevShare
              });
              _context4.n = 1;
              return this.registerPILTermsHelper(licenseTerms, request.txOptions);
            case 1:
              return _context4.a(2, _context4.v);
            case 2:
              _context4.p = 2;
              _t4 = _context4.v;
              return _context4.a(2, handleError(_t4, "Failed to register commercial remix PIL"));
          }
        }, _callee4, this, [[0, 2]]);
      }));
      function registerCommercialRemixPIL(_x4) {
        return _registerCommercialRemixPIL.apply(this, arguments);
      }
      return registerCommercialRemixPIL;
    }()
  }, {
    key: "registerCreativeCommonsAttributionPIL",
    value: function() {
      var _registerCreativeCommonsAttributionPIL = _asyncToGenerator(_regenerator().m(function _callee5(_ref) {
        var currency, royaltyPolicyAddress, txOptions, _t5;
        return _regenerator().w(function(_context5) {
          while (1) switch (_context5.n) {
            case 0:
              currency = _ref.currency, royaltyPolicyAddress = _ref.royaltyPolicyAddress, txOptions = _ref.txOptions;
              _context5.p = 1;
              _context5.n = 2;
              return this.registerPILTermsHelper(getLicenseTermByType(PIL_TYPE.CREATIVE_COMMONS_ATTRIBUTION, {
                currency,
                royaltyPolicyAddress: royaltyPolicyAddress || royaltyPolicyLapAddress[this.chainId]
              }), txOptions);
            case 2:
              return _context5.a(2, _context5.v);
            case 3:
              _context5.p = 3;
              _t5 = _context5.v;
              return _context5.a(2, handleError(_t5, "Failed to register creative commons attribution PIL"));
          }
        }, _callee5, this, [[1, 3]]);
      }));
      function registerCreativeCommonsAttributionPIL(_x5) {
        return _registerCreativeCommonsAttributionPIL.apply(this, arguments);
      }
      return registerCreativeCommonsAttributionPIL;
    }()
  }, {
    key: "attachLicenseTerms",
    value: function() {
      var _attachLicenseTerms = _asyncToGenerator(_regenerator().m(function _callee6(request) {
        var _request$txOptions, isRegistered, isExisted, isAttachedLicenseTerms, req, txHash, _t6;
        return _regenerator().w(function(_context6) {
          while (1) switch (_context6.n) {
            case 0:
              _context6.p = 0;
              request.licenseTermsId = BigInt(request.licenseTermsId);
              _context6.n = 1;
              return this.ipAssetRegistryClient.isRegistered({
                id: validateAddress(request.ipId)
              });
            case 1:
              isRegistered = _context6.v;
              if (isRegistered) {
                _context6.n = 2;
                break;
              }
              throw new Error("The IP with id ".concat(request.ipId, " is not registered."));
            case 2:
              _context6.n = 3;
              return this.piLicenseTemplateReadOnlyClient.exists({
                licenseTermsId: request.licenseTermsId
              });
            case 3:
              isExisted = _context6.v;
              if (isExisted) {
                _context6.n = 4;
                break;
              }
              throw new Error("License terms id ".concat(request.licenseTermsId, " do not exist."));
            case 4:
              _context6.n = 5;
              return this.licenseRegistryReadOnlyClient.hasIpAttachedLicenseTerms({
                ipId: request.ipId,
                licenseTemplate: validateAddress(request.licenseTemplate || this.licenseTemplateClient.address),
                licenseTermsId: request.licenseTermsId
              });
            case 5:
              isAttachedLicenseTerms = _context6.v;
              if (!isAttachedLicenseTerms) {
                _context6.n = 6;
                break;
              }
              return _context6.a(2, {
                success: false
              });
            case 6:
              req = {
                ipId: request.ipId,
                licenseTemplate: request.licenseTemplate || this.licenseTemplateClient.address,
                licenseTermsId: request.licenseTermsId
              };
              if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.encodedTxDataOnly)) {
                _context6.n = 7;
                break;
              }
              return _context6.a(2, {
                encodedTxData: this.licensingModuleClient.attachLicenseTermsEncode(req)
              });
            case 7:
              _context6.n = 8;
              return this.licensingModuleClient.attachLicenseTerms(req);
            case 8:
              txHash = _context6.v;
              _context6.n = 9;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 9:
              return _context6.a(2, {
                txHash,
                success: true
              });
            case 10:
              _context6.n = 12;
              break;
            case 11:
              _context6.p = 11;
              _t6 = _context6.v;
              return _context6.a(2, handleError(_t6, "Failed to attach license terms"));
            case 12:
              return _context6.a(2);
          }
        }, _callee6, this, [[0, 11]]);
      }));
      function attachLicenseTerms(_x6) {
        return _attachLicenseTerms.apply(this, arguments);
      }
      return attachLicenseTerms;
    }()
  }, {
    key: "mintLicenseTokens",
    value: function() {
      var _mintLicenseTokens = _asyncToGenerator(_regenerator().m(function _callee7(request) {
        var _this = this;
        var _request$txOptions2, _request$options, receiver, req, isLicenseIpIdRegistered, isExisted, ipAccount, ipOwner, isAttachedLicenseTerms, encodedTxData, licenseMintingFee, wipSpenders, _yield$contractCallWi, txHash, receipt, targetLogs, startLicenseTokenId, licenseTokenIds, i, _t7;
        return _regenerator().w(function(_context7) {
          while (1) switch (_context7.n) {
            case 0:
              _context7.p = 0;
              receiver = validateAddress(request.receiver || this.walletAddress);
              req = {
                licensorIpId: validateAddress(request.licensorIpId),
                licenseTemplate: validateAddress(request.licenseTemplate || this.licenseTemplateClient.address),
                licenseTermsId: BigInt(request.licenseTermsId),
                amount: BigInt(request.amount || 1),
                receiver,
                royaltyContext: zeroAddress,
                maxMintingFee: BigInt(request.maxMintingFee),
                maxRevenueShare: getRevenueShare(request.maxRevenueShare, RevShareType.MAX_REVENUE_SHARE)
              };
              if (!(req.maxMintingFee < 0)) {
                _context7.n = 1;
                break;
              }
              throw new Error("The maxMintingFee must be greater than 0.");
            case 1:
              _context7.n = 2;
              return this.ipAssetRegistryClient.isRegistered({
                id: validateAddress(request.licensorIpId)
              });
            case 2:
              isLicenseIpIdRegistered = _context7.v;
              if (isLicenseIpIdRegistered) {
                _context7.n = 3;
                break;
              }
              throw new Error("The licensor IP with id ".concat(request.licensorIpId, " is not registered."));
            case 3:
              _context7.n = 4;
              return this.piLicenseTemplateReadOnlyClient.exists({
                licenseTermsId: req.licenseTermsId
              });
            case 4:
              isExisted = _context7.v;
              if (isExisted) {
                _context7.n = 5;
                break;
              }
              throw new Error("License terms id ".concat(request.licenseTermsId, " do not exist."));
            case 5:
              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, req.licensorIpId);
              _context7.n = 6;
              return ipAccount.owner();
            case 6:
              ipOwner = _context7.v;
              if (!(ipOwner !== this.walletAddress)) {
                _context7.n = 8;
                break;
              }
              _context7.n = 7;
              return this.licenseRegistryReadOnlyClient.hasIpAttachedLicenseTerms({
                ipId: req.licensorIpId,
                licenseTemplate: req.licenseTemplate,
                licenseTermsId: req.licenseTermsId
              });
            case 7:
              isAttachedLicenseTerms = _context7.v;
              if (isAttachedLicenseTerms) {
                _context7.n = 8;
                break;
              }
              throw new Error("License terms id ".concat(req.licenseTermsId, " is not attached to the IP with id ").concat(req.licensorIpId, "."));
            case 8:
              encodedTxData = this.licensingModuleClient.mintLicenseTokensEncode(req);
              if (!((_request$txOptions2 = request.txOptions) !== null && _request$txOptions2 !== void 0 && _request$txOptions2.encodedTxDataOnly)) {
                _context7.n = 9;
                break;
              }
              return _context7.a(2, {
                encodedTxData
              });
            case 9:
              _context7.n = 10;
              return calculateLicenseWipMintFee({
                predictMintingFeeRequest: req,
                rpcClient: this.rpcClient,
                chainId: this.chainId,
                walletAddress: this.walletAddress
              });
            case 10:
              licenseMintingFee = _context7.v;
              wipSpenders = [];
              if (licenseMintingFee > 0n) {
                wipSpenders.push({
                  address: royaltyModuleAddress[this.chainId],
                  amount: licenseMintingFee
                });
              }
              _context7.n = 11;
              return contractCallWithFees({
                totalFees: licenseMintingFee,
                options: {
                  wipOptions: (_request$options = request.options) === null || _request$options === void 0 ? void 0 : _request$options.wipOptions
                },
                multicall3Address: this.multicall3Client.address,
                rpcClient: this.rpcClient,
                tokenSpenders: wipSpenders,
                contractCall: function contractCall() {
                  return _this.licensingModuleClient.mintLicenseTokens(req);
                },
                wallet: this.wallet,
                sender: this.walletAddress,
                txOptions: request.txOptions,
                encodedTxs: [encodedTxData]
              });
            case 11:
              _yield$contractCallWi = _context7.v;
              txHash = _yield$contractCallWi.txHash;
              receipt = _yield$contractCallWi.receipt;
              if (receipt) {
                _context7.n = 12;
                break;
              }
              return _context7.a(2, {
                txHash
              });
            case 12:
              targetLogs = this.licensingModuleClient.parseTxLicenseTokensMintedEvent(receipt);
              startLicenseTokenId = targetLogs[0].startLicenseTokenId;
              licenseTokenIds = [];
              for (i = 0; i < req.amount; i++) {
                licenseTokenIds.push(startLicenseTokenId + BigInt(i));
              }
              return _context7.a(2, {
                txHash,
                licenseTokenIds,
                receipt
              });
            case 13:
              _context7.p = 13;
              _t7 = _context7.v;
              return _context7.a(2, handleError(_t7, "Failed to mint license tokens"));
          }
        }, _callee7, this, [[0, 13]]);
      }));
      function mintLicenseTokens(_x7) {
        return _mintLicenseTokens.apply(this, arguments);
      }
      return mintLicenseTokens;
    }()
  }, {
    key: "getLicenseTerms",
    value: function() {
      var _getLicenseTerms = _asyncToGenerator(_regenerator().m(function _callee8(selectedLicenseTermsId) {
        var _t8;
        return _regenerator().w(function(_context8) {
          while (1) switch (_context8.n) {
            case 0:
              _context8.p = 0;
              _context8.n = 1;
              return this.piLicenseTemplateReadOnlyClient.getLicenseTerms({
                selectedLicenseTermsId: BigInt(selectedLicenseTermsId)
              });
            case 1:
              return _context8.a(2, _context8.v);
            case 2:
              _context8.p = 2;
              _t8 = _context8.v;
              return _context8.a(2, handleError(_t8, "Failed to get license terms"));
          }
        }, _callee8, this, [[0, 2]]);
      }));
      function getLicenseTerms(_x8) {
        return _getLicenseTerms.apply(this, arguments);
      }
      return getLicenseTerms;
    }()
  }, {
    key: "predictMintingLicenseFee",
    value: function() {
      var _predictMintingLicenseFee2 = _asyncToGenerator(_regenerator().m(function _callee9(request) {
        var isLicenseIpIdRegistered, licenseTermsId, isExisted, object, _t9;
        return _regenerator().w(function(_context9) {
          while (1) switch (_context9.n) {
            case 0:
              _context9.p = 0;
              _context9.n = 1;
              return this.ipAssetRegistryClient.isRegistered({
                id: validateAddress(request.licensorIpId)
              });
            case 1:
              isLicenseIpIdRegistered = _context9.v;
              if (isLicenseIpIdRegistered) {
                _context9.n = 2;
                break;
              }
              throw new Error("The licensor IP with id ".concat(request.licensorIpId, " is not registered."));
            case 2:
              licenseTermsId = BigInt(request.licenseTermsId);
              _context9.n = 3;
              return this.piLicenseTemplateReadOnlyClient.exists({
                licenseTermsId
              });
            case 3:
              isExisted = _context9.v;
              if (isExisted) {
                _context9.n = 4;
                break;
              }
              throw new Error("License terms id ".concat(request.licenseTermsId, " do not exist."));
            case 4:
              object = _objectSpread2(_objectSpread2({}, request), {}, {
                receiver: validateAddress(request.receiver || this.walletAddress),
                amount: BigInt(request.amount),
                royaltyContext: zeroAddress,
                licenseTemplate: validateAddress(request.licenseTemplate || this.licenseTemplateClient.address),
                licenseTermsId
              });
              _context9.n = 5;
              return predictMintingLicenseFee({
                predictMintingFeeRequest: object,
                rpcClient: this.rpcClient,
                chainId: this.chainId,
                walletAddress: this.walletAddress
              });
            case 5:
              return _context9.a(2, _context9.v);
            case 6:
              _context9.p = 6;
              _t9 = _context9.v;
              return _context9.a(2, handleError(_t9, "Failed to predict minting license fee"));
          }
        }, _callee9, this, [[0, 6]]);
      }));
      function predictMintingLicenseFee$1(_x9) {
        return _predictMintingLicenseFee2.apply(this, arguments);
      }
      return predictMintingLicenseFee$1;
    }()
  }, {
    key: "setLicensingConfig",
    value: function() {
      var _setLicensingConfig = _asyncToGenerator(_regenerator().m(function _callee0(request) {
        var _request$txOptions3, req, isLicenseIpIdRegistered, isExisted, isRegistered, txHash, _t0;
        return _regenerator().w(function(_context0) {
          while (1) switch (_context0.n) {
            case 0:
              _context0.p = 0;
              req = {
                ipId: request.ipId,
                licenseTemplate: validateAddress(request.licenseTemplate || this.licenseTemplateClient.address),
                licenseTermsId: BigInt(request.licenseTermsId),
                licensingConfig: validateLicenseConfig(request.licensingConfig)
              };
              if (!(req.licenseTemplate === zeroAddress && req.licensingConfig.commercialRevShare !== 0)) {
                _context0.n = 1;
                break;
              }
              throw new Error("The license template cannot be zero address if commercial revenue share is not zero.");
            case 1:
              _context0.n = 2;
              return this.ipAssetRegistryClient.isRegistered({
                id: validateAddress(req.ipId)
              });
            case 2:
              isLicenseIpIdRegistered = _context0.v;
              if (isLicenseIpIdRegistered) {
                _context0.n = 3;
                break;
              }
              throw new Error("The licensor IP with id ".concat(req.ipId, " is not registered."));
            case 3:
              _context0.n = 4;
              return this.piLicenseTemplateReadOnlyClient.exists({
                licenseTermsId: req.licenseTermsId
              });
            case 4:
              isExisted = _context0.v;
              if (isExisted) {
                _context0.n = 5;
                break;
              }
              throw new Error("License terms id ".concat(req.licenseTermsId, " do not exist."));
            case 5:
              if (!(req.licensingConfig.licensingHook !== zeroAddress)) {
                _context0.n = 7;
                break;
              }
              _context0.n = 6;
              return this.moduleRegistryReadOnlyClient.isRegistered({
                moduleAddress: req.licensingConfig.licensingHook
              });
            case 6:
              isRegistered = _context0.v;
              if (isRegistered) {
                _context0.n = 7;
                break;
              }
              throw new Error("The licensing hook is not registered.");
            case 7:
              if (!(req.licenseTemplate === zeroAddress && req.licenseTermsId !== 0n)) {
                _context0.n = 8;
                break;
              }
              throw new Error("The license template is zero address but license terms id is not zero.");
            case 8:
              if (!((_request$txOptions3 = request.txOptions) !== null && _request$txOptions3 !== void 0 && _request$txOptions3.encodedTxDataOnly)) {
                _context0.n = 9;
                break;
              }
              return _context0.a(2, {
                encodedTxData: this.licensingModuleClient.setLicensingConfigEncode(req)
              });
            case 9:
              _context0.n = 10;
              return this.licensingModuleClient.setLicensingConfig(req);
            case 10:
              txHash = _context0.v;
              _context0.n = 11;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 11:
              return _context0.a(2, {
                txHash,
                success: true
              });
            case 12:
              _context0.n = 14;
              break;
            case 13:
              _context0.p = 13;
              _t0 = _context0.v;
              return _context0.a(2, handleError(_t0, "Failed to set licensing config"));
            case 14:
              return _context0.a(2);
          }
        }, _callee0, this, [[0, 13]]);
      }));
      function setLicensingConfig(_x0) {
        return _setLicensingConfig.apply(this, arguments);
      }
      return setLicensingConfig;
    }()
  }, {
    key: "getLicensingConfig",
    value: function() {
      var _getLicensingConfig = _asyncToGenerator(_regenerator().m(function _callee1(request) {
        var licensingConfigParam, _t1;
        return _regenerator().w(function(_context1) {
          while (1) switch (_context1.n) {
            case 0:
              _context1.p = 0;
              licensingConfigParam = {
                ipId: validateAddress(request.ipId),
                licenseTemplate: validateAddress(request.licenseTemplate || this.licenseTemplateClient.address),
                licenseTermsId: BigInt(request.licenseTermsId)
              };
              _context1.n = 1;
              return this.licenseRegistryReadOnlyClient.getLicensingConfig(licensingConfigParam);
            case 1:
              return _context1.a(2, _context1.v);
            case 2:
              _context1.p = 2;
              _t1 = _context1.v;
              return _context1.a(2, handleError(_t1, "Failed to get licensing config"));
          }
        }, _callee1, this, [[0, 2]]);
      }));
      function getLicensingConfig(_x1) {
        return _getLicensingConfig.apply(this, arguments);
      }
      return getLicensingConfig;
    }()
  }, {
    key: "getLicenseTermsId",
    value: function() {
      var _getLicenseTermsId = _asyncToGenerator(_regenerator().m(function _callee10(request) {
        var licenseRes;
        return _regenerator().w(function(_context10) {
          while (1) switch (_context10.n) {
            case 0:
              _context10.n = 1;
              return this.licenseTemplateClient.getLicenseTermsId({
                terms: request
              });
            case 1:
              licenseRes = _context10.v;
              return _context10.a(2, licenseRes.selectedLicenseTermsId);
          }
        }, _callee10, this);
      }));
      function getLicenseTermsId(_x10) {
        return _getLicenseTermsId.apply(this, arguments);
      }
      return getLicenseTermsId;
    }()
  }, {
    key: "registerPILTermsHelper",
    value: function() {
      var _registerPILTermsHelper = _asyncToGenerator(_regenerator().m(function _callee11(licenseTerms, txOptions) {
        var licenseTermsId, txHash, _yield$waitForTxRecei, receipt, targetLogs;
        return _regenerator().w(function(_context11) {
          while (1) switch (_context11.n) {
            case 0:
              if (!(txOptions !== null && txOptions !== void 0 && txOptions.encodedTxDataOnly)) {
                _context11.n = 1;
                break;
              }
              return _context11.a(2, {
                encodedTxData: this.licenseTemplateClient.registerLicenseTermsEncode({
                  terms: licenseTerms
                })
              });
            case 1:
              _context11.n = 2;
              return this.getLicenseTermsId(licenseTerms);
            case 2:
              licenseTermsId = _context11.v;
              if (!(licenseTermsId !== 0n)) {
                _context11.n = 3;
                break;
              }
              return _context11.a(2, {
                licenseTermsId
              });
            case 3:
              _context11.n = 4;
              return this.licenseTemplateClient.registerLicenseTerms({
                terms: licenseTerms
              });
            case 4:
              txHash = _context11.v;
              _context11.n = 5;
              return waitForTxReceipt({
                txOptions,
                rpcClient: this.rpcClient,
                txHash
              });
            case 5:
              _yield$waitForTxRecei = _context11.v;
              receipt = _yield$waitForTxRecei.receipt;
              if (receipt) {
                _context11.n = 6;
                break;
              }
              return _context11.a(2, {
                txHash
              });
            case 6:
              targetLogs = this.licenseTemplateClient.parseTxLicenseTermsRegisteredEvent(receipt);
              return _context11.a(2, {
                txHash,
                licenseTermsId: targetLogs[0].licenseTermsId
              });
            case 7:
              return _context11.a(2);
          }
        }, _callee11, this);
      }));
      function registerPILTermsHelper(_x11, _x12) {
        return _registerPILTermsHelper.apply(this, arguments);
      }
      return registerPILTermsHelper;
    }()
  }]);
}();
var NftClient = function() {
  function NftClient2(rpcClient, wallet) {
    _classCallCheck(this, NftClient2);
    this.rpcClient = rpcClient;
    this.wallet = wallet;
    this.registrationWorkflowsClient = new RegistrationWorkflowsClient(rpcClient, wallet);
  }
  return _createClass(NftClient2, [{
    key: "createNFTCollection",
    value: function() {
      var _createNFTCollection = _asyncToGenerator(_regenerator().m(function _callee(request) {
        var _request$baseURI, _request$maxSupply, _request$mintFee, _request$mintFeeToken, _request$txOptions, object, txHash, txReceipt, targetLogs, _t;
        return _regenerator().w(function(_context) {
          while (1) switch (_context.n) {
            case 0:
              _context.p = 0;
              if (!(request.mintFee !== void 0 && (request.mintFee < 0n || request.mintFeeToken === zeroAddress || !isAddress(request.mintFeeToken || "")))) {
                _context.n = 1;
                break;
              }
              throw new Error("Invalid mint fee token address, mint fee is greater than 0.");
            case 1:
              object = {
                spgNftInitParams: {
                  name: request.name,
                  symbol: request.symbol,
                  baseURI: (_request$baseURI = request.baseURI) !== null && _request$baseURI !== void 0 ? _request$baseURI : "",
                  maxSupply: (_request$maxSupply = request.maxSupply) !== null && _request$maxSupply !== void 0 ? _request$maxSupply : Number(maxUint32),
                  mintFee: (_request$mintFee = request.mintFee) !== null && _request$mintFee !== void 0 ? _request$mintFee : 0n,
                  mintFeeToken: (_request$mintFeeToken = request.mintFeeToken) !== null && _request$mintFeeToken !== void 0 ? _request$mintFeeToken : zeroAddress,
                  owner: validateAddress(request.owner || this.wallet.account.address),
                  mintFeeRecipient: validateAddress(request.mintFeeRecipient),
                  mintOpen: request.mintOpen,
                  isPublicMinting: request.isPublicMinting,
                  contractURI: request.contractURI
                }
              };
              if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.encodedTxDataOnly)) {
                _context.n = 2;
                break;
              }
              return _context.a(2, {
                encodedTxData: this.registrationWorkflowsClient.createCollectionEncode(object)
              });
            case 2:
              _context.n = 3;
              return this.registrationWorkflowsClient.createCollection(object);
            case 3:
              txHash = _context.v;
              _context.n = 4;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 4:
              txReceipt = _context.v;
              targetLogs = this.registrationWorkflowsClient.parseTxCollectionCreatedEvent(txReceipt);
              return _context.a(2, {
                txHash,
                spgNftContract: targetLogs[0].spgNftContract
              });
            case 5:
              _context.n = 7;
              break;
            case 6:
              _context.p = 6;
              _t = _context.v;
              return _context.a(2, handleError(_t, "Failed to create an SPG NFT collection"));
            case 7:
              return _context.a(2);
          }
        }, _callee, this, [[0, 6]]);
      }));
      function createNFTCollection(_x) {
        return _createNFTCollection.apply(this, arguments);
      }
      return createNFTCollection;
    }()
  }, {
    key: "getMintFeeToken",
    value: function() {
      var _getMintFeeToken = _asyncToGenerator(_regenerator().m(function _callee2(spgNftContract) {
        var spgNftClient;
        return _regenerator().w(function(_context2) {
          while (1) switch (_context2.n) {
            case 0:
              spgNftClient = new SpgnftImplReadOnlyClient(this.rpcClient, validateAddress(spgNftContract));
              return _context2.a(2, spgNftClient.mintFeeToken());
          }
        }, _callee2, this);
      }));
      function getMintFeeToken(_x2) {
        return _getMintFeeToken.apply(this, arguments);
      }
      return getMintFeeToken;
    }()
  }, {
    key: "getMintFee",
    value: function() {
      var _getMintFee = _asyncToGenerator(_regenerator().m(function _callee3(spgNftContract) {
        var spgNftClient;
        return _regenerator().w(function(_context3) {
          while (1) switch (_context3.n) {
            case 0:
              spgNftClient = new SpgnftImplReadOnlyClient(this.rpcClient, validateAddress(spgNftContract));
              return _context3.a(2, spgNftClient.mintFee());
          }
        }, _callee3, this);
      }));
      function getMintFee(_x3) {
        return _getMintFee.apply(this, arguments);
      }
      return getMintFee;
    }()
  }, {
    key: "setTokenURI",
    value: function() {
      var _setTokenURI = _asyncToGenerator(_regenerator().m(function _callee4(_ref) {
        var tokenId, tokenURI, spgNftContract, txOptions, spgNftClient, txHash, _t2;
        return _regenerator().w(function(_context4) {
          while (1) switch (_context4.n) {
            case 0:
              tokenId = _ref.tokenId, tokenURI = _ref.tokenURI, spgNftContract = _ref.spgNftContract, txOptions = _ref.txOptions;
              _context4.p = 1;
              spgNftClient = new SpgnftImplClient(this.rpcClient, this.wallet, validateAddress(spgNftContract));
              _context4.n = 2;
              return spgNftClient.setTokenUri({
                tokenId: BigInt(tokenId),
                tokenUri: tokenURI
              });
            case 2:
              txHash = _context4.v;
              return _context4.a(2, waitForTxReceipt({
                txHash,
                txOptions,
                rpcClient: this.rpcClient
              }));
            case 3:
              _context4.p = 3;
              _t2 = _context4.v;
              return _context4.a(2, handleError(_t2, "Failed to set token URI"));
          }
        }, _callee4, this, [[1, 3]]);
      }));
      function setTokenURI(_x4) {
        return _setTokenURI.apply(this, arguments);
      }
      return setTokenURI;
    }()
  }, {
    key: "getTokenURI",
    value: function() {
      var _getTokenURI = _asyncToGenerator(_regenerator().m(function _callee5(_ref2) {
        var tokenId, spgNftContract, spgNftClient;
        return _regenerator().w(function(_context5) {
          while (1) switch (_context5.n) {
            case 0:
              tokenId = _ref2.tokenId, spgNftContract = _ref2.spgNftContract;
              spgNftClient = new SpgnftImplReadOnlyClient(this.rpcClient, spgNftContract);
              _context5.n = 1;
              return spgNftClient.tokenUri({
                tokenId: BigInt(tokenId)
              });
            case 1:
              return _context5.a(2, _context5.v);
          }
        }, _callee5, this);
      }));
      function getTokenURI(_x5) {
        return _getTokenURI.apply(this, arguments);
      }
      return getTokenURI;
    }()
  }]);
}();
var PermissionClient = function() {
  function PermissionClient2(rpcClient, wallet, chainId) {
    _classCallCheck(this, PermissionClient2);
    this.rpcClient = rpcClient;
    this.wallet = wallet;
    this.chainId = chainId;
    this.accessControllerClient = new AccessControllerClient(this.rpcClient, this.wallet);
    this.ipAssetRegistryClient = new IpAssetRegistryClient(this.rpcClient, this.wallet);
    this.coreMetadataModuleClient = new CoreMetadataModuleClient(this.rpcClient, this.wallet);
  }
  return _createClass(PermissionClient2, [{
    key: "setPermission",
    value: function() {
      var _setPermission = _asyncToGenerator(_regenerator().m(function _callee(request) {
        var _request$txOptions, req, txHash, _t;
        return _regenerator().w(function(_context) {
          while (1) switch (_context.n) {
            case 0:
              _context.p = 0;
              _context.n = 1;
              return this.checkIsRegistered(request.ipId);
            case 1:
              req = {
                ipAccount: request.ipId,
                signer: request.signer,
                to: request.to,
                func: request.func ? toFunctionSelector(request.func) : defaultFunctionSelector,
                permission: request.permission
              };
              if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.encodedTxDataOnly)) {
                _context.n = 2;
                break;
              }
              return _context.a(2, {
                encodedTxData: this.accessControllerClient.setPermissionEncode(req)
              });
            case 2:
              _context.n = 3;
              return this.accessControllerClient.setPermission(req);
            case 3:
              txHash = _context.v;
              _context.n = 4;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 4:
              return _context.a(2, {
                txHash,
                success: true
              });
            case 5:
              _context.n = 7;
              break;
            case 6:
              _context.p = 6;
              _t = _context.v;
              return _context.a(2, handleError(_t, "Failed to set permissions"));
            case 7:
              return _context.a(2);
          }
        }, _callee, this, [[0, 6]]);
      }));
      function setPermission(_x) {
        return _setPermission.apply(this, arguments);
      }
      return setPermission;
    }()
  }, {
    key: "createSetPermissionSignature",
    value: function() {
      var _createSetPermissionSignature = _asyncToGenerator(_regenerator().m(function _callee2(request) {
        var _request$txOptions2, ipId, signer, to, txOptions, func, permission, deadline, ipAccountClient, data, _yield$ipAccountClien, state, blockTimestamp, calculatedDeadline, _yield$getPermissionS, signature, req, txHash, _t2;
        return _regenerator().w(function(_context2) {
          while (1) switch (_context2.n) {
            case 0:
              _context2.p = 0;
              ipId = request.ipId, signer = request.signer, to = request.to, txOptions = request.txOptions, func = request.func, permission = request.permission, deadline = request.deadline;
              _context2.n = 1;
              return this.checkIsRegistered(ipId);
            case 1:
              ipAccountClient = new IpAccountImplClient(this.rpcClient, this.wallet, ipId);
              data = encodeFunctionData({
                abi: accessControllerAbi,
                functionName: "setTransientPermission",
                args: [ipId, validateAddress(signer), validateAddress(to), func ? toFunctionSelector(func) : defaultFunctionSelector, permission]
              });
              _context2.n = 2;
              return ipAccountClient.state();
            case 2:
              _yield$ipAccountClien = _context2.v;
              state = _yield$ipAccountClien.result;
              _context2.n = 3;
              return this.rpcClient.getBlock();
            case 3:
              blockTimestamp = _context2.v.timestamp;
              calculatedDeadline = getDeadline(blockTimestamp, deadline);
              _context2.n = 4;
              return getPermissionSignature({
                ipId,
                deadline: calculatedDeadline,
                state,
                permissions: [{
                  ipId,
                  signer,
                  to,
                  permission,
                  func
                }],
                chainId: this.chainId,
                wallet: this.wallet
              });
            case 4:
              _yield$getPermissionS = _context2.v;
              signature = _yield$getPermissionS.signature;
              req = {
                to: validateAddress(this.accessControllerClient.address),
                value: BigInt(0),
                data,
                signer,
                deadline: calculatedDeadline,
                signature
              };
              if (!((_request$txOptions2 = request.txOptions) !== null && _request$txOptions2 !== void 0 && _request$txOptions2.encodedTxDataOnly)) {
                _context2.n = 5;
                break;
              }
              return _context2.a(2, {
                encodedTxData: ipAccountClient.executeWithSigEncode(req)
              });
            case 5:
              _context2.n = 6;
              return ipAccountClient.executeWithSig(req);
            case 6:
              txHash = _context2.v;
              _context2.n = 7;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, txOptions), {}, {
                hash: txHash
              }));
            case 7:
              return _context2.a(2, {
                txHash,
                success: true
              });
            case 8:
              _context2.n = 10;
              break;
            case 9:
              _context2.p = 9;
              _t2 = _context2.v;
              return _context2.a(2, handleError(_t2, "Failed to create set permission signature"));
            case 10:
              return _context2.a(2);
          }
        }, _callee2, this, [[0, 9]]);
      }));
      function createSetPermissionSignature(_x2) {
        return _createSetPermissionSignature.apply(this, arguments);
      }
      return createSetPermissionSignature;
    }()
  }, {
    key: "setAllPermissions",
    value: function() {
      var _setAllPermissions = _asyncToGenerator(_regenerator().m(function _callee3(request) {
        var _request$txOptions3, req, txHash, _t3;
        return _regenerator().w(function(_context3) {
          while (1) switch (_context3.n) {
            case 0:
              _context3.p = 0;
              _context3.n = 1;
              return this.checkIsRegistered(request.ipId);
            case 1:
              req = {
                ipAccount: request.ipId,
                signer: request.signer,
                permission: request.permission
              };
              if (!((_request$txOptions3 = request.txOptions) !== null && _request$txOptions3 !== void 0 && _request$txOptions3.encodedTxDataOnly)) {
                _context3.n = 2;
                break;
              }
              return _context3.a(2, {
                encodedTxData: this.accessControllerClient.setAllPermissionsEncode(req)
              });
            case 2:
              _context3.n = 3;
              return this.accessControllerClient.setAllPermissions(req);
            case 3:
              txHash = _context3.v;
              _context3.n = 4;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {
                hash: txHash
              }));
            case 4:
              return _context3.a(2, {
                txHash,
                success: true
              });
            case 5:
              _context3.n = 7;
              break;
            case 6:
              _context3.p = 6;
              _t3 = _context3.v;
              return _context3.a(2, handleError(_t3, "Failed to set all permissions"));
            case 7:
              return _context3.a(2);
          }
        }, _callee3, this, [[0, 6]]);
      }));
      function setAllPermissions(_x3) {
        return _setAllPermissions.apply(this, arguments);
      }
      return setAllPermissions;
    }()
  }, {
    key: "setBatchPermissions",
    value: function() {
      var _setBatchPermissions = _asyncToGenerator(_regenerator().m(function _callee4(request) {
        var _request$txOptions4, permissions, txOptions, _iterator, _step, permission, req, txHash, _t4, _t5;
        return _regenerator().w(function(_context4) {
          while (1) switch (_context4.n) {
            case 0:
              _context4.p = 0;
              permissions = request.permissions, txOptions = request.txOptions;
              _iterator = _createForOfIteratorHelper(permissions);
              _context4.p = 1;
              _iterator.s();
            case 2:
              if ((_step = _iterator.n()).done) {
                _context4.n = 4;
                break;
              }
              permission = _step.value;
              _context4.n = 3;
              return this.checkIsRegistered(permission.ipId);
            case 3:
              _context4.n = 2;
              break;
            case 4:
              _context4.n = 6;
              break;
            case 5:
              _context4.p = 5;
              _t4 = _context4.v;
              _iterator.e(_t4);
            case 6:
              _context4.p = 6;
              _iterator.f();
              return _context4.f(6);
            case 7:
              req = {
                permissions: permissions.map(function(permission2) {
                  return {
                    ipAccount: permission2.ipId,
                    signer: permission2.signer,
                    to: permission2.to,
                    func: permission2.func ? toFunctionSelector(permission2.func) : defaultFunctionSelector,
                    permission: permission2.permission
                  };
                })
              };
              if (!((_request$txOptions4 = request.txOptions) !== null && _request$txOptions4 !== void 0 && _request$txOptions4.encodedTxDataOnly)) {
                _context4.n = 8;
                break;
              }
              return _context4.a(2, {
                encodedTxData: this.accessControllerClient.setBatchPermissionsEncode(req)
              });
            case 8:
              _context4.n = 9;
              return this.accessControllerClient.setBatchPermissions(req);
            case 9:
              txHash = _context4.v;
              _context4.n = 10;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, txOptions), {}, {
                hash: txHash
              }));
            case 10:
              return _context4.a(2, {
                txHash,
                success: true
              });
            case 11:
              _context4.n = 13;
              break;
            case 12:
              _context4.p = 12;
              _t5 = _context4.v;
              return _context4.a(2, handleError(_t5, "Failed to set batch permissions"));
            case 13:
              return _context4.a(2);
          }
        }, _callee4, this, [[1, 5, 6, 7], [0, 12]]);
      }));
      function setBatchPermissions(_x4) {
        return _setBatchPermissions.apply(this, arguments);
      }
      return setBatchPermissions;
    }()
  }, {
    key: "createBatchPermissionSignature",
    value: function() {
      var _createBatchPermissionSignature = _asyncToGenerator(_regenerator().m(function _callee5(request) {
        var _request$txOptions5, permissions, deadline, ipId, txOptions, _iterator2, _step2, permission, ipAccountClient, data, _yield$ipAccountClien2, state, blockTimestamp, calculatedDeadline, _yield$getPermissionS2, signature, req, txHash, _t6, _t7;
        return _regenerator().w(function(_context5) {
          while (1) switch (_context5.n) {
            case 0:
              _context5.p = 0;
              permissions = request.permissions, deadline = request.deadline, ipId = request.ipId, txOptions = request.txOptions;
              _iterator2 = _createForOfIteratorHelper(permissions);
              _context5.p = 1;
              _iterator2.s();
            case 2:
              if ((_step2 = _iterator2.n()).done) {
                _context5.n = 4;
                break;
              }
              permission = _step2.value;
              _context5.n = 3;
              return this.checkIsRegistered(permission.ipId);
            case 3:
              _context5.n = 2;
              break;
            case 4:
              _context5.n = 6;
              break;
            case 5:
              _context5.p = 5;
              _t6 = _context5.v;
              _iterator2.e(_t6);
            case 6:
              _context5.p = 6;
              _iterator2.f();
              return _context5.f(6);
            case 7:
              ipAccountClient = new IpAccountImplClient(this.rpcClient, this.wallet, ipId);
              data = encodeFunctionData({
                abi: accessControllerAbi,
                functionName: "setBatchTransientPermissions",
                args: [permissions.map(function(permission2) {
                  return {
                    ipAccount: permission2.ipId,
                    signer: permission2.signer,
                    to: permission2.to,
                    func: permission2.func ? toFunctionSelector(permission2.func) : defaultFunctionSelector,
                    permission: permission2.permission
                  };
                })]
              });
              _context5.n = 8;
              return ipAccountClient.state();
            case 8:
              _yield$ipAccountClien2 = _context5.v;
              state = _yield$ipAccountClien2.result;
              _context5.n = 9;
              return this.rpcClient.getBlock();
            case 9:
              blockTimestamp = _context5.v.timestamp;
              calculatedDeadline = getDeadline(blockTimestamp, deadline);
              _context5.n = 10;
              return getPermissionSignature({
                ipId,
                deadline: calculatedDeadline,
                state,
                permissions,
                chainId: this.chainId,
                wallet: this.wallet
              });
            case 10:
              _yield$getPermissionS2 = _context5.v;
              signature = _yield$getPermissionS2.signature;
              req = {
                to: validateAddress(this.accessControllerClient.address),
                value: BigInt(0),
                data,
                signer: validateAddress(this.wallet.account.address),
                deadline: calculatedDeadline,
                signature
              };
              if (!((_request$txOptions5 = request.txOptions) !== null && _request$txOptions5 !== void 0 && _request$txOptions5.encodedTxDataOnly)) {
                _context5.n = 11;
                break;
              }
              return _context5.a(2, {
                encodedTxData: ipAccountClient.executeWithSigEncode(req)
              });
            case 11:
              _context5.n = 12;
              return ipAccountClient.executeWithSig(req);
            case 12:
              txHash = _context5.v;
              _context5.n = 13;
              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, txOptions), {}, {
                hash: txHash
              }));
            case 13:
              return _context5.a(2, {
                txHash,
                success: true
              });
            case 14:
              _context5.n = 16;
              break;
            case 15:
              _context5.p = 15;
              _t7 = _context5.v;
              return _context5.a(2, handleError(_t7, "Failed to create batch permission signature"));
            case 16:
              return _context5.a(2);
          }
        }, _callee5, this, [[1, 5, 6, 7], [0, 15]]);
      }));
      function createBatchPermissionSignature(_x5) {
        return _createBatchPermissionSignature.apply(this, arguments);
      }
      return createBatchPermissionSignature;
    }()
  }, {
    key: "checkIsRegistered",
    value: function() {
      var _checkIsRegistered = _asyncToGenerator(_regenerator().m(function _callee6(ipId) {
        var isRegistered;
        return _regenerator().w(function(_context6) {
          while (1) switch (_context6.n) {
            case 0:
              _context6.n = 1;
              return this.ipAssetRegistryClient.isRegistered({
                id: validateAddress(ipId)
              });
            case 1:
              isRegistered = _context6.v;
              if (isRegistered) {
                _context6.n = 2;
                break;
              }
              throw new Error("IP id with ".concat(ipId, " is not registered."));
            case 2:
              return _context6.a(2);
          }
        }, _callee6, this);
      }));
      function checkIsRegistered(_x6) {
        return _checkIsRegistered.apply(this, arguments);
      }
      return checkIsRegistered;
    }()
  }]);
}();
var NativeRoyaltyPolicy = function(NativeRoyaltyPolicy2) {
  NativeRoyaltyPolicy2[NativeRoyaltyPolicy2["LAP"] = 0] = "LAP";
  NativeRoyaltyPolicy2[NativeRoyaltyPolicy2["LRP"] = 1] = "LRP";
  return NativeRoyaltyPolicy2;
}({});
var royaltyPolicyInputToAddress = function royaltyPolicyInputToAddress2(input, chainId) {
  switch (input) {
    case NativeRoyaltyPolicy.LAP:
      return royaltyPolicyLapAddress[chain2[chainId]];
    case NativeRoyaltyPolicy.LRP:
      return royaltyPolicyLrpAddress[chain2[chainId]];
    default:
      return validateAddress(input);
  }
};
var RoyaltyClient = function() {
  function RoyaltyClient2(rpcClient, wallet, chainId) {
    _classCallCheck(this, RoyaltyClient2);
    this.royaltyModuleClient = new RoyaltyModuleClient(rpcClient, wallet);
    this.ipAssetRegistryClient = new IpAssetRegistryClient(rpcClient, wallet);
    this.ipRoyaltyVaultImplReadOnlyClient = new IpRoyaltyVaultImplReadOnlyClient(rpcClient);
    this.ipRoyaltyVaultImplEventClient = new IpRoyaltyVaultImplEventClient(rpcClient);
    this.royaltyWorkflowsClient = new RoyaltyWorkflowsClient(rpcClient, wallet);
    this.multicall3Client = new Multicall3Client(rpcClient, wallet);
    this.wrappedIpClient = new WrappedIpClient(rpcClient, wallet);
    this.rpcClient = rpcClient;
    this.wallet = wallet;
    this.chainId = chainId;
    this.walletAddress = wallet.account.address;
  }
  return _createClass(RoyaltyClient2, [{
    key: "claimAllRevenue",
    value: function() {
      var _claimAllRevenue = _asyncToGenerator(_regenerator().m(function _callee(req) {
        var _req$claimOptions, _req$claimOptions2, ancestorIpId, claimer, childIpIds, royaltyPolicies, currencyTokens, txHashes, txHash, receipt, _yield$this$getClaime, ownsClaimer, isClaimerIp, ipAccount, claimedTokens, autoTransfer, autoUnwrapIp, hashes, _hashes, _t;
        return _regenerator().w(function(_context) {
          while (1) switch (_context.n) {
            case 0:
              _context.p = 0;
              ancestorIpId = validateAddress(req.ancestorIpId);
              claimer = validateAddress(req.claimer);
              childIpIds = validateAddresses(req.childIpIds);
              royaltyPolicies = validateAddresses(req.royaltyPolicies);
              currencyTokens = validateAddresses(req.currencyTokens);
              txHashes = [];
              _context.n = 1;
              return this.royaltyWorkflowsClient.claimAllRevenue({
                ancestorIpId,
                claimer,
                childIpIds,
                royaltyPolicies,
                currencyTokens
              });
            case 1:
              txHash = _context.v;
              _context.n = 2;
              return this.rpcClient.waitForTransactionReceipt({
                hash: txHash
              });
            case 2:
              receipt = _context.v;
              txHashes.push(txHash);
              _context.n = 3;
              return this.getClaimerInfo(claimer);
            case 3:
              _yield$this$getClaime = _context.v;
              ownsClaimer = _yield$this$getClaime.ownsClaimer;
              isClaimerIp = _yield$this$getClaime.isClaimerIp;
              ipAccount = _yield$this$getClaime.ipAccount;
              claimedTokens = this.ipRoyaltyVaultImplEventClient.parseTxRevenueTokenClaimedEvent(receipt);
              autoTransfer = ((_req$claimOptions = req.claimOptions) === null || _req$claimOptions === void 0 ? void 0 : _req$claimOptions.autoTransferAllClaimedTokensFromIp) !== false;
              autoUnwrapIp = ((_req$claimOptions2 = req.claimOptions) === null || _req$claimOptions2 === void 0 ? void 0 : _req$claimOptions2.autoUnwrapIpTokens) !== false;
              if (!(autoTransfer && isClaimerIp && ownsClaimer)) {
                _context.n = 5;
                break;
              }
              _context.n = 4;
              return this.transferClaimedTokensFromIpToWallet({
                ipAccount,
                claimedTokens
              });
            case 4:
              hashes = _context.v;
              txHashes.push.apply(txHashes, _toConsumableArray(hashes));
            case 5:
              if (!(autoUnwrapIp && ownsClaimer)) {
                _context.n = 7;
                break;
              }
              _context.n = 6;
              return this.unwrapWipTokens(claimedTokens);
            case 6:
              _hashes = _context.v;
              if (_hashes) {
                txHashes.push(_hashes);
              }
            case 7:
              return _context.a(2, {
                receipt,
                claimedTokens,
                txHashes
              });
            case 8:
              _context.p = 8;
              _t = _context.v;
              return _context.a(2, handleError(_t, "Failed to claim all revenue"));
          }
        }, _callee, this, [[0, 8]]);
      }));
      function claimAllRevenue(_x) {
        return _claimAllRevenue.apply(this, arguments);
      }
      return claimAllRevenue;
    }()
  }, {
    key: "batchClaimAllRevenue",
    value: function() {
      var _batchClaimAllRevenue = _asyncToGenerator(_regenerator().m(function _callee2(request) {
        var _this = this;
        var _request$options, _request$claimOptions, _request$claimOptions2, txHashes, receipts, claimedTokens, useMulticallWhenPossible, _iterator, _step, ancestorIp, result, encodedTxs, txHash, receipt, claimedTokenLogs, aggregatedClaimedTokens, claimers, autoTransfer, autoUnwrapIp, wipClaimableAmounts, _iterator2, _step2, _loop, hash, _t2, _t3, _t4;
        return _regenerator().w(function(_context3) {
          while (1) switch (_context3.n) {
            case 0:
              _context3.p = 0;
              txHashes = [];
              receipts = [];
              claimedTokens = [];
              useMulticallWhenPossible = ((_request$options = request.options) === null || _request$options === void 0 ? void 0 : _request$options.useMulticallWhenPossible) !== false;
              if (!(request.ancestorIps.length === 1 || !useMulticallWhenPossible)) {
                _context3.n = 9;
                break;
              }
              _iterator = _createForOfIteratorHelper(request.ancestorIps);
              _context3.p = 1;
              _iterator.s();
            case 2:
              if ((_step = _iterator.n()).done) {
                _context3.n = 5;
                break;
              }
              ancestorIp = _step.value;
              _context3.n = 3;
              return this.claimAllRevenue(_objectSpread2(_objectSpread2({}, ancestorIp), {}, {
                ancestorIpId: ancestorIp.ipId,
                claimOptions: {
                  autoTransferAllClaimedTokensFromIp: false,
                  autoUnwrapIpTokens: false
                }
              }));
            case 3:
              result = _context3.v;
              txHashes.push.apply(txHashes, _toConsumableArray(result.txHashes));
              receipts.push(result.receipt);
              if (result.claimedTokens) {
                claimedTokens.push.apply(claimedTokens, _toConsumableArray(result.claimedTokens));
              }
            case 4:
              _context3.n = 2;
              break;
            case 5:
              _context3.n = 7;
              break;
            case 6:
              _context3.p = 6;
              _t2 = _context3.v;
              _iterator.e(_t2);
            case 7:
              _context3.p = 7;
              _iterator.f();
              return _context3.f(7);
            case 8:
              _context3.n = 12;
              break;
            case 9:
              encodedTxs = request.ancestorIps.map(function(_ref) {
                var ipId = _ref.ipId, claimer = _ref.claimer, childIpIds = _ref.childIpIds, royaltyPolicies = _ref.royaltyPolicies, currencyTokens = _ref.currencyTokens;
                var claim = {
                  ancestorIpId: validateAddress(ipId),
                  claimer: validateAddress(claimer),
                  childIpIds: validateAddresses(childIpIds),
                  royaltyPolicies: validateAddresses(royaltyPolicies),
                  currencyTokens: validateAddresses(currencyTokens)
                };
                return _this.royaltyWorkflowsClient.claimAllRevenueEncode(claim).data;
              });
              _context3.n = 10;
              return this.royaltyWorkflowsClient.multicall({
                data: encodedTxs
              });
            case 10:
              txHash = _context3.v;
              _context3.n = 11;
              return this.rpcClient.waitForTransactionReceipt({
                hash: txHash
              });
            case 11:
              receipt = _context3.v;
              txHashes.push(txHash);
              receipts.push(receipt);
              claimedTokenLogs = this.ipRoyaltyVaultImplEventClient.parseTxRevenueTokenClaimedEvent(receipt);
              claimedTokens.push.apply(claimedTokens, _toConsumableArray(claimedTokenLogs));
            case 12:
              aggregatedClaimedTokens = Object.values(claimedTokens.reduce(function(acc, curr) {
                var key = "".concat(curr.claimer, "_").concat(curr.token);
                if (!acc[key]) {
                  acc[key] = _objectSpread2({}, curr);
                } else {
                  acc[key].amount += curr.amount;
                }
                return acc;
              }, {}));
              claimers = _toConsumableArray(new Set(request.ancestorIps.map(function(_ref2) {
                var claimer = _ref2.claimer;
                return claimer;
              })));
              autoTransfer = ((_request$claimOptions = request.claimOptions) === null || _request$claimOptions === void 0 ? void 0 : _request$claimOptions.autoTransferAllClaimedTokensFromIp) !== false;
              autoUnwrapIp = ((_request$claimOptions2 = request.claimOptions) === null || _request$claimOptions2 === void 0 ? void 0 : _request$claimOptions2.autoUnwrapIpTokens) !== false;
              wipClaimableAmounts = 0n;
              _iterator2 = _createForOfIteratorHelper(claimers);
              _context3.p = 13;
              _loop = _regenerator().m(function _loop2() {
                var claimer, _yield$_this$getClaim, ownsClaimer, isClaimerIp, ipAccount, filterClaimedTokens, hashes;
                return _regenerator().w(function(_context2) {
                  while (1) switch (_context2.n) {
                    case 0:
                      claimer = _step2.value;
                      _context2.n = 1;
                      return _this.getClaimerInfo(claimer);
                    case 1:
                      _yield$_this$getClaim = _context2.v;
                      ownsClaimer = _yield$_this$getClaim.ownsClaimer;
                      isClaimerIp = _yield$_this$getClaim.isClaimerIp;
                      ipAccount = _yield$_this$getClaim.ipAccount;
                      if (ownsClaimer) {
                        _context2.n = 2;
                        break;
                      }
                      return _context2.a(2, 1);
                    case 2:
                      filterClaimedTokens = aggregatedClaimedTokens.filter(function(item) {
                        return item.claimer === claimer;
                      });
                      if (!(autoTransfer && isClaimerIp && ownsClaimer)) {
                        _context2.n = 4;
                        break;
                      }
                      _context2.n = 3;
                      return _this.transferClaimedTokensFromIpToWallet({
                        ipAccount,
                        claimedTokens: filterClaimedTokens
                      });
                    case 3:
                      hashes = _context2.v;
                      txHashes.push.apply(txHashes, _toConsumableArray(hashes));
                    case 4:
                      wipClaimableAmounts += filterClaimedTokens.reduce(function(acc, curr) {
                        if (curr.token === WIP_TOKEN_ADDRESS) {
                          return acc + curr.amount;
                        }
                        return acc;
                      }, 0n);
                    case 5:
                      return _context2.a(2);
                  }
                }, _loop2);
              });
              _iterator2.s();
            case 14:
              if ((_step2 = _iterator2.n()).done) {
                _context3.n = 17;
                break;
              }
              return _context3.d(_regeneratorValues(_loop()), 15);
            case 15:
              if (!_context3.v) {
                _context3.n = 16;
                break;
              }
              return _context3.a(3, 16);
            case 16:
              _context3.n = 14;
              break;
            case 17:
              _context3.n = 19;
              break;
            case 18:
              _context3.p = 18;
              _t3 = _context3.v;
              _iterator2.e(_t3);
            case 19:
              _context3.p = 19;
              _iterator2.f();
              return _context3.f(19);
            case 20:
              if (!(wipClaimableAmounts > 0n && autoUnwrapIp)) {
                _context3.n = 22;
                break;
              }
              _context3.n = 21;
              return this.unwrapWipTokens([{
                token: WIP_TOKEN_ADDRESS,
                amount: wipClaimableAmounts,
                claimer: this.walletAddress
              }]);
            case 21:
              hash = _context3.v;
              if (hash) {
                txHashes.push(hash);
              }
            case 22:
              return _context3.a(2, {
                receipts,
                claimedTokens: aggregatedClaimedTokens,
                txHashes
              });
            case 23:
              _context3.p = 23;
              _t4 = _context3.v;
              return _context3.a(2, handleError(new Error(_t4.message.replace("Failed to claim all revenue: ", "").trim()), "Failed to batch claim all revenue"));
          }
        }, _callee2, this, [[13, 18, 19, 20], [1, 6, 7, 8], [0, 23]]);
      }));
      function batchClaimAllRevenue(_x2) {
        return _batchClaimAllRevenue.apply(this, arguments);
      }
      return batchClaimAllRevenue;
    }()
  }, {
    key: "payRoyaltyOnBehalf",
    value: function() {
      var _payRoyaltyOnBehalf = _asyncToGenerator(_regenerator().m(function _callee3(request) {
        var _this2 = this;
        var _request$txOptions, receiverIpId, payerIpId, token, amount, _request$options2, _request$options3, erc20Options, wipOptions, txOptions, sender, payAmount, isReceiverRegistered, isPayerRegistered, req, encodedTxData, contractCall, tokenSpenders, _t5;
        return _regenerator().w(function(_context4) {
          while (1) switch (_context4.n) {
            case 0:
              _context4.p = 0;
              receiverIpId = request.receiverIpId, payerIpId = request.payerIpId, token = request.token, amount = request.amount, _request$options2 = request.options, _request$options3 = _request$options2 === void 0 ? {} : _request$options2, erc20Options = _request$options3.erc20Options, wipOptions = _request$options3.wipOptions, txOptions = request.txOptions;
              sender = this.wallet.account.address;
              payAmount = BigInt(amount);
              if (!(payAmount <= 0n)) {
                _context4.n = 1;
                break;
              }
              throw new Error("The amount to pay must be number greater than 0.");
            case 1:
              _context4.n = 2;
              return this.ipAssetRegistryClient.isRegistered({
                id: validateAddress(receiverIpId)
              });
            case 2:
              isReceiverRegistered = _context4.v;
              if (isReceiverRegistered) {
                _context4.n = 3;
                break;
              }
              throw new Error("The receiver IP with id ".concat(receiverIpId, " is not registered."));
            case 3:
              if (!(validateAddress(payerIpId) && payerIpId !== zeroAddress)) {
                _context4.n = 5;
                break;
              }
              _context4.n = 4;
              return this.ipAssetRegistryClient.isRegistered({
                id: payerIpId
              });
            case 4:
              isPayerRegistered = _context4.v;
              if (isPayerRegistered) {
                _context4.n = 5;
                break;
              }
              throw new Error("The payer IP with id ".concat(request.payerIpId, " is not registered."));
            case 5:
              req = {
                receiverIpId,
                payerIpId,
                token: validateAddress(token),
                amount: BigInt(amount)
              };
              encodedTxData = this.royaltyModuleClient.payRoyaltyOnBehalfEncode(req);
              if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.encodedTxDataOnly)) {
                _context4.n = 6;
                break;
              }
              return _context4.a(2, {
                encodedTxData
              });
            case 6:
              contractCall = function contractCall2() {
                return _this2.royaltyModuleClient.payRoyaltyOnBehalf(req);
              };
              tokenSpenders = [{
                address: this.royaltyModuleClient.address,
                amount: payAmount
              }];
              _context4.n = 7;
              return contractCallWithFees({
                totalFees: payAmount,
                options: {
                  erc20Options,
                  wipOptions
                },
                multicall3Address: this.multicall3Client.address,
                rpcClient: this.rpcClient,
                tokenSpenders,
                contractCall,
                sender,
                token,
                wallet: this.wallet,
                txOptions,
                encodedTxs: [encodedTxData]
              });
            case 7:
              return _context4.a(2, _context4.v);
            case 8:
              _context4.p = 8;
              _t5 = _context4.v;
              return _context4.a(2, handleError(_t5, "Failed to pay royalty on behalf"));
          }
        }, _callee3, this, [[0, 8]]);
      }));
      function payRoyaltyOnBehalf(_x3) {
        return _payRoyaltyOnBehalf.apply(this, arguments);
      }
      return payRoyaltyOnBehalf;
    }()
  }, {
    key: "claimableRevenue",
    value: function() {
      var _claimableRevenue = _asyncToGenerator(_regenerator().m(function _callee4(request) {
        var proxyAddress, ipRoyaltyVault, _t6;
        return _regenerator().w(function(_context5) {
          while (1) switch (_context5.n) {
            case 0:
              _context5.p = 0;
              _context5.n = 1;
              return this.getRoyaltyVaultAddress(validateAddress(request.ipId));
            case 1:
              proxyAddress = _context5.v;
              ipRoyaltyVault = new IpRoyaltyVaultImplReadOnlyClient(this.rpcClient, proxyAddress);
              _context5.n = 2;
              return ipRoyaltyVault.claimableRevenue({
                claimer: validateAddress(request.claimer),
                token: validateAddress(request.token)
              });
            case 2:
              return _context5.a(2, _context5.v);
            case 3:
              _context5.p = 3;
              _t6 = _context5.v;
              return _context5.a(2, handleError(_t6, "Failed to calculate claimable revenue"));
          }
        }, _callee4, this, [[0, 3]]);
      }));
      function claimableRevenue(_x4) {
        return _claimableRevenue.apply(this, arguments);
      }
      return claimableRevenue;
    }()
  }, {
    key: "getRoyaltyVaultAddress",
    value: function() {
      var _getRoyaltyVaultAddress = _asyncToGenerator(_regenerator().m(function _callee5(ipId) {
        var isRoyaltyVaultIpIdRegistered;
        return _regenerator().w(function(_context6) {
          while (1) switch (_context6.n) {
            case 0:
              _context6.n = 1;
              return this.ipAssetRegistryClient.isRegistered({
                id: validateAddress(ipId)
              });
            case 1:
              isRoyaltyVaultIpIdRegistered = _context6.v;
              if (isRoyaltyVaultIpIdRegistered) {
                _context6.n = 2;
                break;
              }
              throw new Error("The royalty vault IP with id ".concat(ipId, " is not registered."));
            case 2:
              _context6.n = 3;
              return this.royaltyModuleClient.ipRoyaltyVaults({
                ipId
              });
            case 3:
              return _context6.a(2, _context6.v);
          }
        }, _callee5, this);
      }));
      function getRoyaltyVaultAddress(_x5) {
        return _getRoyaltyVaultAddress.apply(this, arguments);
      }
      return getRoyaltyVaultAddress;
    }()
  }, {
    key: "transferToVault",
    value: function() {
      var _transferToVault = _asyncToGenerator(_regenerator().m(function _callee6(_ref3) {
        var txOptions, ipId, royaltyPolicy, ancestorIpId, token, royaltyPolicyAddress, protocolArgs, _yield$this$rpcClient, call, txHash;
        return _regenerator().w(function(_context7) {
          while (1) switch (_context7.n) {
            case 0:
              txOptions = _ref3.txOptions, ipId = _ref3.ipId, royaltyPolicy = _ref3.royaltyPolicy, ancestorIpId = _ref3.ancestorIpId, token = _ref3.token;
              royaltyPolicyAddress = royaltyPolicyInputToAddress(royaltyPolicy, this.chainId);
              protocolArgs = [validateAddress(ipId), validateAddress(ancestorIpId), validateAddress(token)];
              _context7.n = 1;
              return this.rpcClient.simulateContract({
                abi: royaltyPolicyLrpAbi,
                // same abi for all royalty policies
                address: royaltyPolicyAddress,
                functionName: "transferToVault",
                account: this.wallet.account,
                args: protocolArgs
              });
            case 1:
              _yield$this$rpcClient = _context7.v;
              call = _yield$this$rpcClient.request;
              _context7.n = 2;
              return this.wallet.writeContract(call);
            case 2:
              txHash = _context7.v;
              return _context7.a(2, waitForTxReceipt({
                txHash,
                rpcClient: this.rpcClient,
                txOptions
              }));
          }
        }, _callee6, this);
      }));
      function transferToVault(_x6) {
        return _transferToVault.apply(this, arguments);
      }
      return transferToVault;
    }()
  }, {
    key: "transferClaimedTokensFromIpToWallet",
    value: function() {
      var _transferClaimedTokensFromIpToWallet = _asyncToGenerator(_regenerator().m(function _callee7(_ref4) {
        var ipAccount, claimedTokens, txHashes, calls, _iterator3, _step3, _step3$value, token, amount, hash;
        return _regenerator().w(function(_context8) {
          while (1) switch (_context8.n) {
            case 0:
              ipAccount = _ref4.ipAccount, claimedTokens = _ref4.claimedTokens;
              txHashes = [];
              calls = [];
              _iterator3 = _createForOfIteratorHelper(claimedTokens);
              try {
                for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                  _step3$value = _step3.value, token = _step3$value.token, amount = _step3$value.amount;
                  calls.push({
                    target: token,
                    value: BigInt(0),
                    data: encodeFunctionData({
                      abi: erc20Abi,
                      functionName: "transfer",
                      args: [this.walletAddress, amount]
                    })
                  });
                }
              } catch (err) {
                _iterator3.e(err);
              } finally {
                _iterator3.f();
              }
              _context8.n = 1;
              return ipAccount.executeBatch({
                calls,
                operation: 0
              });
            case 1:
              hash = _context8.v;
              _context8.n = 2;
              return this.rpcClient.waitForTransactionReceipt({
                hash
              });
            case 2:
              txHashes.push(hash);
              return _context8.a(2, txHashes);
          }
        }, _callee7, this);
      }));
      function transferClaimedTokensFromIpToWallet(_x7) {
        return _transferClaimedTokensFromIpToWallet.apply(this, arguments);
      }
      return transferClaimedTokensFromIpToWallet;
    }()
  }, {
    key: "getClaimerInfo",
    value: function() {
      var _getClaimerInfo = _asyncToGenerator(_regenerator().m(function _callee8(claimer) {
        var isClaimerIp, ipAccount, ownsClaimer, ipOwner;
        return _regenerator().w(function(_context9) {
          while (1) switch (_context9.n) {
            case 0:
              _context9.n = 1;
              return this.ipAssetRegistryClient.isRegistered({
                id: claimer
              });
            case 1:
              isClaimerIp = _context9.v;
              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, claimer);
              ownsClaimer = claimer === this.walletAddress;
              if (!isClaimerIp) {
                _context9.n = 3;
                break;
              }
              _context9.n = 2;
              return ipAccount.owner();
            case 2:
              ipOwner = _context9.v;
              ownsClaimer = ipOwner === this.walletAddress;
            case 3:
              return _context9.a(2, {
                ownsClaimer,
                isClaimerIp,
                ipAccount
              });
          }
        }, _callee8, this);
      }));
      function getClaimerInfo(_x8) {
        return _getClaimerInfo.apply(this, arguments);
      }
      return getClaimerInfo;
    }()
    /**
     * Unwraps WIP tokens back to their underlying IP tokens. Only accepts a single WIP token entry
     * in the claimed tokens array. Throws an error if multiple WIP tokens are found.
     */
  }, {
    key: "unwrapWipTokens",
    value: function() {
      var _unwrapWipTokens = _asyncToGenerator(_regenerator().m(function _callee9(claimedTokens) {
        var wipTokens, wipToken, hash;
        return _regenerator().w(function(_context0) {
          while (1) switch (_context0.n) {
            case 0:
              wipTokens = claimedTokens.filter(function(token) {
                return token.token === WIP_TOKEN_ADDRESS;
              });
              if (!(wipTokens.length > 1)) {
                _context0.n = 1;
                break;
              }
              throw new Error("Multiple WIP tokens found in the claimed tokens.");
            case 1:
              wipToken = wipTokens[0];
              if (!(!wipToken || wipToken.amount <= 0n)) {
                _context0.n = 2;
                break;
              }
              return _context0.a(2);
            case 2:
              _context0.n = 3;
              return this.wrappedIpClient.withdraw({
                value: wipToken.amount
              });
            case 3:
              hash = _context0.v;
              _context0.n = 4;
              return this.rpcClient.waitForTransactionReceipt({
                hash
              });
            case 4:
              return _context0.a(2, hash);
          }
        }, _callee9, this);
      }));
      function unwrapWipTokens(_x9) {
        return _unwrapWipTokens.apply(this, arguments);
      }
      return unwrapWipTokens;
    }()
  }]);
}();
var WipClient = function() {
  function WipClient2(rpcClient, wallet) {
    _classCallCheck(this, WipClient2);
    this.wrappedIpClient = new WrappedIpClient(rpcClient, wallet, WIP_TOKEN_ADDRESS);
    this.rpcClient = rpcClient;
    this.wallet = wallet;
  }
  return _createClass(WipClient2, [{
    key: "deposit",
    value: function() {
      var _deposit = _asyncToGenerator(_regenerator().m(function _callee(_ref) {
        var amount, txOptions, _yield$this$rpcClient, call, txHash, _t;
        return _regenerator().w(function(_context) {
          while (1) switch (_context.n) {
            case 0:
              amount = _ref.amount, txOptions = _ref.txOptions;
              _context.p = 1;
              if (!(amount <= 0)) {
                _context.n = 2;
                break;
              }
              throw new Error("WIP deposit amount must be greater than 0.");
            case 2:
              _context.n = 3;
              return this.rpcClient.simulateContract({
                abi: wrappedIpAbi,
                address: WIP_TOKEN_ADDRESS,
                functionName: "deposit",
                account: this.wallet.account,
                value: BigInt(amount)
              });
            case 3:
              _yield$this$rpcClient = _context.v;
              call = _yield$this$rpcClient.request;
              _context.n = 4;
              return this.wallet.writeContract(call);
            case 4:
              txHash = _context.v;
              return _context.a(2, waitForTxReceipt({
                txHash,
                txOptions,
                rpcClient: this.rpcClient
              }));
            case 5:
              _context.p = 5;
              _t = _context.v;
              return _context.a(2, handleError(_t, "Failed to deposit IP for WIP"));
          }
        }, _callee, this, [[1, 5]]);
      }));
      function deposit(_x) {
        return _deposit.apply(this, arguments);
      }
      return deposit;
    }()
  }, {
    key: "withdraw",
    value: function() {
      var _withdraw = _asyncToGenerator(_regenerator().m(function _callee2(_ref2) {
        var amount, txOptions, targetAmt, txHash, _t2;
        return _regenerator().w(function(_context2) {
          while (1) switch (_context2.n) {
            case 0:
              amount = _ref2.amount, txOptions = _ref2.txOptions;
              _context2.p = 1;
              targetAmt = BigInt(amount);
              if (!(targetAmt <= 0)) {
                _context2.n = 2;
                break;
              }
              throw new Error("WIP withdraw amount must be greater than 0.");
            case 2:
              _context2.n = 3;
              return this.wrappedIpClient.withdraw({
                value: targetAmt
              });
            case 3:
              txHash = _context2.v;
              return _context2.a(2, waitForTxReceipt({
                txHash,
                txOptions,
                rpcClient: this.rpcClient
              }));
            case 4:
              _context2.p = 4;
              _t2 = _context2.v;
              return _context2.a(2, handleError(_t2, "Failed to withdraw WIP"));
          }
        }, _callee2, this, [[1, 4]]);
      }));
      function withdraw(_x2) {
        return _withdraw.apply(this, arguments);
      }
      return withdraw;
    }()
  }, {
    key: "approve",
    value: function() {
      var _approve = _asyncToGenerator(_regenerator().m(function _callee3(req) {
        var amount, spender, txHash, _t3;
        return _regenerator().w(function(_context3) {
          while (1) switch (_context3.n) {
            case 0:
              _context3.p = 0;
              amount = BigInt(req.amount);
              if (!(amount <= 0)) {
                _context3.n = 1;
                break;
              }
              throw new Error("WIP approve amount must be greater than 0.");
            case 1:
              spender = validateAddress(req.spender);
              _context3.n = 2;
              return this.wrappedIpClient.approve({
                spender,
                amount
              });
            case 2:
              txHash = _context3.v;
              return _context3.a(2, waitForTxReceipt({
                txHash,
                txOptions: req.txOptions,
                rpcClient: this.rpcClient
              }));
            case 3:
              _context3.p = 3;
              _t3 = _context3.v;
              return _context3.a(2, handleError(_t3, "Failed to approve WIP"));
          }
        }, _callee3, this, [[0, 3]]);
      }));
      function approve(_x3) {
        return _approve.apply(this, arguments);
      }
      return approve;
    }()
  }, {
    key: "balanceOf",
    value: function() {
      var _balanceOf = _asyncToGenerator(_regenerator().m(function _callee4(addr) {
        var owner, ret;
        return _regenerator().w(function(_context4) {
          while (1) switch (_context4.n) {
            case 0:
              owner = validateAddress(addr);
              _context4.n = 1;
              return this.wrappedIpClient.balanceOf({
                owner
              });
            case 1:
              ret = _context4.v;
              return _context4.a(2, ret.result);
          }
        }, _callee4, this);
      }));
      function balanceOf(_x4) {
        return _balanceOf.apply(this, arguments);
      }
      return balanceOf;
    }()
  }, {
    key: "transfer",
    value: function() {
      var _transfer = _asyncToGenerator(_regenerator().m(function _callee5(request) {
        var amount, txHash, _t4;
        return _regenerator().w(function(_context5) {
          while (1) switch (_context5.n) {
            case 0:
              _context5.p = 0;
              amount = BigInt(request.amount);
              if (!(amount <= 0)) {
                _context5.n = 1;
                break;
              }
              throw new Error("WIP transfer amount must be greater than 0.");
            case 1:
              _context5.n = 2;
              return this.wrappedIpClient.transfer({
                to: validateAddress(request.to),
                amount
              });
            case 2:
              txHash = _context5.v;
              return _context5.a(2, waitForTxReceipt({
                txHash,
                txOptions: request.txOptions,
                rpcClient: this.rpcClient
              }));
            case 3:
              _context5.p = 3;
              _t4 = _context5.v;
              return _context5.a(2, handleError(_t4, "Failed to transfer WIP"));
          }
        }, _callee5, this, [[0, 3]]);
      }));
      function transfer(_x5) {
        return _transfer.apply(this, arguments);
      }
      return transfer;
    }()
  }, {
    key: "transferFrom",
    value: function() {
      var _transferFrom = _asyncToGenerator(_regenerator().m(function _callee6(request) {
        var amount, txHash, _t5;
        return _regenerator().w(function(_context6) {
          while (1) switch (_context6.n) {
            case 0:
              _context6.p = 0;
              amount = BigInt(request.amount);
              if (!(amount <= 0)) {
                _context6.n = 1;
                break;
              }
              throw new Error("WIP transfer amount must be greater than 0.");
            case 1:
              _context6.n = 2;
              return this.wrappedIpClient.transferFrom({
                to: validateAddress(request.to),
                amount,
                from: validateAddress(request.from)
              });
            case 2:
              txHash = _context6.v;
              return _context6.a(2, waitForTxReceipt({
                txHash,
                txOptions: request.txOptions,
                rpcClient: this.rpcClient
              }));
            case 3:
              _context6.p = 3;
              _t5 = _context6.v;
              return _context6.a(2, handleError(_t5, "Failed to transfer WIP"));
          }
        }, _callee6, this, [[0, 3]]);
      }));
      function transferFrom(_x6) {
        return _transferFrom.apply(this, arguments);
      }
      return transferFrom;
    }()
  }]);
}();
if (typeof process !== "undefined") {
  dotenv.config();
}
var StoryClient = function() {
  function StoryClient2(config2) {
    _classCallCheck(this, StoryClient2);
    _defineProperty(this, "_ipAsset", null);
    _defineProperty(this, "_permission", null);
    _defineProperty(this, "_license", null);
    _defineProperty(this, "_dispute", null);
    _defineProperty(this, "_ipAccount", null);
    _defineProperty(this, "_royalty", null);
    _defineProperty(this, "_nftClient", null);
    _defineProperty(this, "_group", null);
    _defineProperty(this, "_wip", null);
    this.config = _objectSpread2(_objectSpread2({}, config2), {}, {
      chainId: chain2[config2.chainId || 1315]
    });
    if (!this.config.transport) {
      throw new Error("transport is null, please pass in a valid RPC Provider URL as the transport.");
    }
    var clientConfig = {
      chain: chainStringToViemChain(this.chainId),
      transport: this.config.transport
    };
    this.rpcClient = createPublicClient(clientConfig);
    if (this.config.wallet) {
      this.wallet = this.config.wallet;
    } else if (this.config.account) {
      var account = this.config.account;
      this.wallet = createWalletClient(_objectSpread2(_objectSpread2({}, clientConfig), {}, {
        account
      }));
    } else {
      throw new Error("must specify a wallet or account");
    }
  }
  return _createClass(StoryClient2, [{
    key: "chainId",
    get: function get() {
      return this.config.chainId;
    }
    /**
     * Factory method for creating an SDK client with a signer.
     *
     */
  }, {
    key: "ipAsset",
    get: (
      /**
       * Getter for the ip asset client. The client is lazily created when
       * this method is called.
       */
      function get() {
        if (this._ipAsset === null) {
          this._ipAsset = new IPAssetClient(this.rpcClient, this.wallet, this.chainId);
        }
        return this._ipAsset;
      }
    )
    /**
     * Getter for the permission client. The client is lazily created when
     * this method is called.
     */
  }, {
    key: "permission",
    get: function get() {
      if (this._permission === null) {
        this._permission = new PermissionClient(this.rpcClient, this.wallet, this.chainId);
      }
      return this._permission;
    }
    /**
     * Getter for the license client. The client is lazily created when
     * this method is called.
     */
  }, {
    key: "license",
    get: function get() {
      if (this._license === null) {
        this._license = new LicenseClient(this.rpcClient, this.wallet, this.chainId);
      }
      return this._license;
    }
    /**
     * Getter for the dispute client. The client is lazily created when
     * this method is called.
     */
  }, {
    key: "dispute",
    get: function get() {
      if (this._dispute === null) {
        this._dispute = new DisputeClient(this.rpcClient, this.wallet, this.chainId);
      }
      return this._dispute;
    }
    /**
     * Getter for the ip account client. The client is lazily created when
     * this method is called.
     */
  }, {
    key: "ipAccount",
    get: function get() {
      if (this._ipAccount === null) {
        this._ipAccount = new IPAccountClient(this.rpcClient, this.wallet, this.chainId);
      }
      return this._ipAccount;
    }
    /**
     * Getter for the royalty client. The client is lazily created when
     * this method is called.
     */
  }, {
    key: "royalty",
    get: function get() {
      if (this._royalty === null) {
        this._royalty = new RoyaltyClient(this.rpcClient, this.wallet, this.chainId);
      }
      return this._royalty;
    }
    /**
     * Getter for the NFT client. The client is lazily created when
     * this method is called.
     */
  }, {
    key: "nftClient",
    get: function get() {
      if (this._nftClient === null) {
        this._nftClient = new NftClient(this.rpcClient, this.wallet);
      }
      return this._nftClient;
    }
    /**
     * Getter for the group client. The client is lazily created when
     * this method is called.
     */
  }, {
    key: "groupClient",
    get: function get() {
      if (this._group === null) {
        this._group = new GroupClient(this.rpcClient, this.wallet, this.chainId);
      }
      return this._group;
    }
  }, {
    key: "wipClient",
    get: function get() {
      if (this._wip === null) {
        this._wip = new WipClient(this.rpcClient, this.wallet);
      }
      return this._wip;
    }
  }, {
    key: "getWalletBalance",
    value: function() {
      var _getWalletBalance = _asyncToGenerator(_regenerator().m(function _callee() {
        return _regenerator().w(function(_context) {
          while (1) switch (_context.n) {
            case 0:
              if (this.wallet.account) {
                _context.n = 1;
                break;
              }
              throw new Error("No account found in wallet");
            case 1:
              _context.n = 2;
              return this.getBalance(this.wallet.account.address);
            case 2:
              return _context.a(2, _context.v);
          }
        }, _callee, this);
      }));
      function getWalletBalance() {
        return _getWalletBalance.apply(this, arguments);
      }
      return getWalletBalance;
    }()
  }, {
    key: "getBalance",
    value: function() {
      var _getBalance = _asyncToGenerator(_regenerator().m(function _callee2(address) {
        var validAddress;
        return _regenerator().w(function(_context2) {
          while (1) switch (_context2.n) {
            case 0:
              validAddress = validateAddress(address);
              _context2.n = 1;
              return this.rpcClient.getBalance({
                address: validAddress
              });
            case 1:
              return _context2.a(2, _context2.v);
          }
        }, _callee2, this);
      }));
      function getBalance(_x) {
        return _getBalance.apply(this, arguments);
      }
      return getBalance;
    }()
  }], [{
    key: "newClient",
    value: function newClient(config2) {
      return new StoryClient2(config2);
    }
    /**
     * Factory method for creating an SDK client with a signer.
     */
  }, {
    key: "newClientUseWallet",
    value: function newClientUseWallet(config2) {
      return new StoryClient2({
        chainId: config2.chainId,
        transport: config2.transport,
        wallet: config2.wallet
      });
    }
    /**
     * Factory method for creating an SDK client with a signer.
     */
  }, {
    key: "newClientUseAccount",
    value: function newClientUseAccount(config2) {
      return new StoryClient2({
        account: config2.account,
        chainId: config2.chainId,
        transport: config2.transport
      });
    }
  }]);
}();
var StoryRelationship = function(StoryRelationship2) {
  StoryRelationship2["APPEARS_IN"] = "APPEARS_IN";
  StoryRelationship2["BELONGS_TO"] = "BELONGS_TO";
  StoryRelationship2["PART_OF"] = "PART_OF";
  StoryRelationship2["CONTINUES_FROM"] = "CONTINUES_FROM";
  StoryRelationship2["LEADS_TO"] = "LEADS_TO";
  StoryRelationship2["FORESHADOWS"] = "FORESHADOWS";
  StoryRelationship2["CONFLICTS_WITH"] = "CONFLICTS_WITH";
  StoryRelationship2["RESULTS_IN"] = "RESULTS_IN";
  StoryRelationship2["DEPENDS_ON"] = "DEPENDS_ON";
  StoryRelationship2["SETS_UP"] = "SETS_UP";
  StoryRelationship2["FOLLOWS_FROM"] = "FOLLOWS_FROM";
  StoryRelationship2["REVEALS_THAT"] = "REVEALS_THAT";
  StoryRelationship2["DEVELOPS_OVER"] = "DEVELOPS_OVER";
  StoryRelationship2["INTRODUCES"] = "INTRODUCES";
  StoryRelationship2["RESOLVES_IN"] = "RESOLVES_IN";
  StoryRelationship2["CONNECTS_TO"] = "CONNECTS_TO";
  StoryRelationship2["RELATES_TO"] = "RELATES_TO";
  StoryRelationship2["TRANSITIONS_FROM"] = "TRANSITIONS_FROM";
  StoryRelationship2["INTERACTED_WITH"] = "INTERACTED_WITH";
  StoryRelationship2["LEADS_INTO"] = "LEADS_INTO";
  StoryRelationship2["PARALLEL"] = "PARALLEL";
  return StoryRelationship2;
}({});
var AIRelationship = function(AIRelationship2) {
  AIRelationship2["TRAINED_ON"] = "TRAINED_ON";
  AIRelationship2["FINETUNED_FROM"] = "FINETUNED_FROM";
  AIRelationship2["GENERATED_FROM"] = "GENERATED_FROM";
  AIRelationship2["REQUIRES_DATA"] = "REQUIRES_DATA";
  AIRelationship2["BASED_ON"] = "BASED_ON";
  AIRelationship2["INFLUENCES"] = "INFLUENCES";
  AIRelationship2["CREATES"] = "CREATES";
  AIRelationship2["UTILIZES"] = "UTILIZES";
  AIRelationship2["DERIVED_FROM"] = "DERIVED_FROM";
  AIRelationship2["PRODUCES"] = "PRODUCES";
  AIRelationship2["MODIFIES"] = "MODIFIES";
  AIRelationship2["REFERENCES"] = "REFERENCES";
  AIRelationship2["OPTIMIZED_BY"] = "OPTIMIZED_BY";
  AIRelationship2["INHERITS"] = "INHERITS";
  AIRelationship2["APPLIES_TO"] = "APPLIES_TO";
  AIRelationship2["COMBINES"] = "COMBINES";
  AIRelationship2["GENERATES_VARIANTS"] = "GENERATES_VARIANTS";
  AIRelationship2["EXPANDS_ON"] = "EXPANDS_ON";
  AIRelationship2["CONFIGURES"] = "CONFIGURES";
  AIRelationship2["ADAPTS_TO"] = "ADAPTS_TO";
  return AIRelationship2;
}({});
var DisputeTargetTag = function(DisputeTargetTag2) {
  DisputeTargetTag2["IMPROPER_REGISTRATION"] = "IMPROPER_REGISTRATION";
  DisputeTargetTag2["IMPROPER_USAGE"] = "IMPROPER_USAGE";
  DisputeTargetTag2["IMPROPER_PAYMENT"] = "IMPROPER_PAYMENT";
  DisputeTargetTag2["CONTENT_STANDARDS_VIOLATION"] = "CONTENT_STANDARDS_VIOLATION";
  DisputeTargetTag2["IN_DISPUTE"] = "IN_DISPUTE";
  return DisputeTargetTag2;
}({});
export {
  AIRelationship,
  AccessPermission,
  DisputeClient,
  DisputeTargetTag,
  GroupClient,
  IPAccountClient,
  IPAssetClient,
  LicenseClient,
  NativeRoyaltyPolicy,
  NftClient,
  PIL_TYPE,
  PermissionClient,
  RevShareType,
  RoyaltyClient,
  StoryClient,
  StoryRelationship,
  WIP_TOKEN_ADDRESS,
  WipClient,
  aeneid,
  convertCIDtoHashIPFS,
  convertHashIPFStoCID,
  getPermissionSignature,
  getSignature,
  mainnet,
  royaltyPolicyLapAddress,
  royaltyPolicyLrpAddress,
  settleAssertion
};
/*! Bundled license information:

@scure/base/lib/esm/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@scure/bip32/lib/esm/index.js:
  (*! scure-bip32 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) *)

@scure/bip39/esm/index.js:
  (*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) *)

@story-protocol/core-sdk/dist/story-protocol-core-sdk.esm.js:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE *)
*/
//# sourceMappingURL=@story-protocol_core-sdk.js.map
