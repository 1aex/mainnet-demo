{
  "version": 3,
  "sources": ["../../hashlru/index.js", "../../netmask/lib/netmask.js", "../../timestamp-nano/dist/timestamp.min.js", "../../truncate-utf8-bytes/lib/truncate.js", "../../utf8-byte-length/browser.js", "../../truncate-utf8-bytes/browser.js", "../../sanitize-filename/index.js", "../../retry/lib/retry_operation.js", "../../retry/lib/retry.js", "../../retry/index.js", "../../event-iterator/lib/event-iterator.js", "../../event-iterator/lib/dom.js", "../../@multiformats/dns/src/utils/get-types.ts", "../../@multiformats/dns/src/utils/to-dns-response.ts", "../../@multiformats/dns/src/resolvers/dns-json-over-https.ts", "../../@multiformats/dns/src/resolvers/default.browser.ts", "../../@multiformats/dns/src/utils/cache.ts", "../../@multiformats/dns/src/dns.ts", "../../@multiformats/dns/src/index.ts", "../../race-event/src/index.ts", "../../@libp2p/utils/src/debounce.ts", "../../@libp2p/utils/src/errors.ts", "../../@libp2p/utils/src/queue/recipient.ts", "../../@libp2p/utils/src/queue/job.ts", "../../@libp2p/utils/src/queue/index.ts", "../../@helia/utils/node_modules/multiformats/src/bytes.ts", "../../@helia/utils/node_modules/multiformats/src/vendor/base-x.js", "../../@helia/utils/node_modules/multiformats/src/bases/base.ts", "../../@helia/utils/node_modules/multiformats/src/bases/base36.ts", "../../@helia/utils/node_modules/multiformats/src/bases/base32.ts", "../../@helia/utils/node_modules/multiformats/src/bases/base58.ts", "../../@helia/utils/node_modules/multiformats/src/vendor/varint.js", "../../@helia/utils/node_modules/multiformats/src/varint.ts", "../../@helia/utils/node_modules/multiformats/src/hashes/digest.ts", "../../@helia/utils/node_modules/multiformats/src/cid.ts", "../../@helia/utils/node_modules/multiformats/src/hashes/hasher.ts", "../../@helia/utils/node_modules/multiformats/src/block.ts", "../../@helia/utils/src/pins.ts", "../../@helia/interface/src/blocks.ts", "../../@helia/interface/src/errors.ts", "../../@libp2p/utils/src/peer-queue.ts", "../../@helia/utils/src/routing.ts", "../../abort-error/src/index.ts", "../../it-queue/src/errors.ts", "../../it-queue/src/recipient.ts", "../../it-queue/src/job.ts", "../../it-queue/src/utils.ts", "../../it-queue/src/index.ts", "../../mortice/src/constants.ts", "../../mortice/src/main/channel.ts", "../../mortice/src/utils.ts", "../../mortice/src/workers/channel.ts", "../../mortice/src/browser.ts", "../../mortice/src/mortice.ts", "../../mortice/src/index.ts", "../../@helia/utils/src/storage.ts", "../../@helia/utils/src/utils/datastore-version.ts", "../../@helia/utils/node_modules/multiformats/src/codecs/json.ts", "../../@helia/utils/node_modules/multiformats/src/codecs/raw.ts", "../../@helia/utils/src/utils/is-promise.ts", "../../@helia/utils/src/utils/get-codec.ts", "../../@helia/utils/node_modules/multiformats/src/hashes/identity.ts", "../../@helia/utils/node_modules/multiformats/src/hashes/sha2-browser.ts", "../../@helia/utils/src/utils/get-hasher.ts", "../../any-signal/src/index.ts", "../../blockstore-core/src/identity.ts", "../../it-foreach/src/index.ts", "../../@helia/utils/src/utils/networked-storage.ts", "../../@helia/utils/node_modules/multiformats/src/bases/base64.ts", "../../@helia/utils/src/abstract-session.ts", "../../@helia/utils/src/index.ts", "../../helia/src/helia-p2p.ts", "../../it-length-prefixed/src/constants.ts", "../../it-length-prefixed/src/errors.ts", "../../it-length-prefixed/src/utils.ts", "../../it-length-prefixed/src/encode.ts", "../../it-length-prefixed/src/decode.ts", "../../@helia/bitswap/src/constants.ts", "../../@helia/bitswap/src/pb/message.ts", "../../@helia/bitswap/src/utils/merge-messages.ts", "../../@helia/bitswap/src/errors.ts", "../../@helia/bitswap/src/utils/split-message.ts", "../../@helia/bitswap/src/network.ts", "../../@libp2p/peer-id/node_modules/multiformats/src/bytes.ts", "../../@libp2p/peer-id/node_modules/multiformats/src/vendor/base-x.js", "../../@libp2p/peer-id/node_modules/multiformats/src/bases/base.ts", "../../@libp2p/peer-id/node_modules/multiformats/src/bases/base58.ts", "../../@libp2p/peer-id/node_modules/multiformats/src/bases/base32.ts", "../../@libp2p/peer-id/node_modules/multiformats/src/bases/base36.ts", "../../@libp2p/peer-id/node_modules/multiformats/src/vendor/varint.js", "../../@libp2p/peer-id/node_modules/multiformats/src/varint.ts", "../../@libp2p/peer-id/node_modules/multiformats/src/hashes/digest.ts", "../../@libp2p/peer-id/node_modules/multiformats/src/cid.ts", "../../@libp2p/peer-id/node_modules/multiformats/src/hashes/identity.ts", "../../@libp2p/peer-id/node_modules/multiformats/src/hashes/hasher.ts", "../../@libp2p/peer-id/node_modules/multiformats/src/hashes/sha2-browser.ts", "../../@libp2p/peer-id/src/peer-id.ts", "../../@libp2p/peer-id/src/index.ts", "../../@libp2p/peer-collections/node_modules/multiformats/src/bytes.ts", "../../@libp2p/peer-collections/node_modules/multiformats/src/vendor/base-x.js", "../../@libp2p/peer-collections/node_modules/multiformats/src/bases/base.ts", "../../@libp2p/peer-collections/node_modules/multiformats/src/bases/base58.ts", "../../@libp2p/peer-collections/node_modules/multiformats/src/vendor/varint.js", "../../@libp2p/peer-collections/node_modules/multiformats/src/varint.ts", "../../@libp2p/peer-collections/node_modules/multiformats/src/hashes/digest.ts", "../../@libp2p/peer-collections/src/util.ts", "../../@libp2p/peer-collections/src/map.ts", "../../@libp2p/peer-collections/src/set.ts", "../../@libp2p/peer-collections/src/filter.ts", "../../@libp2p/peer-collections/src/tracked-map.ts", "../../@helia/bitswap/node_modules/multiformats/src/bytes.ts", "../../@helia/bitswap/node_modules/multiformats/src/vendor/base-x.js", "../../@helia/bitswap/node_modules/multiformats/src/bases/base.ts", "../../@helia/bitswap/node_modules/multiformats/src/bases/base32.ts", "../../@helia/bitswap/node_modules/multiformats/src/bases/base36.ts", "../../@helia/bitswap/node_modules/multiformats/src/bases/base58.ts", "../../@helia/bitswap/node_modules/multiformats/src/vendor/varint.js", "../../@helia/bitswap/node_modules/multiformats/src/varint.ts", "../../@helia/bitswap/node_modules/multiformats/src/hashes/digest.ts", "../../@helia/bitswap/node_modules/multiformats/src/cid.ts", "../../@helia/bitswap/node_modules/multiformats/src/bases/base64.ts", "../../@helia/bitswap/src/utils/bitswap-message.ts", "../../@helia/bitswap/src/utils/varint-encoder.ts", "../../@helia/bitswap/src/utils/cid-prefix.ts", "../../@helia/bitswap/src/peer-want-lists/ledger.ts", "../../@helia/bitswap/src/peer-want-lists/index.ts", "../../@helia/bitswap/src/session.ts", "../../@helia/bitswap/src/stats.ts", "../../@libp2p/utils/src/tracked-map.ts", "../../@helia/bitswap/node_modules/multiformats/src/hashes/hasher.ts", "../../@helia/bitswap/node_modules/multiformats/src/hashes/sha2-browser.ts", "../../@helia/bitswap/src/utils/varint-decoder.ts", "../../@helia/bitswap/src/want-list.ts", "../../@helia/bitswap/src/bitswap.ts", "../../@helia/bitswap/src/index.ts", "../../@helia/block-brokers/src/bitswap.ts", "../../@multiformats/multiaddr-to-uri/src/index.ts", "../../@helia/block-brokers/node_modules/multiformats/src/bytes.ts", "../../@helia/block-brokers/node_modules/multiformats/src/bases/base.ts", "../../@helia/block-brokers/node_modules/multiformats/src/bases/base64.ts", "../../@helia/block-brokers/src/trustless-gateway/trustless-gateway.ts", "../../@libp2p/utils/src/private-ip.ts", "../../@multiformats/multiaddr-matcher/node_modules/multiformats/src/bytes.ts", "../../@multiformats/multiaddr-matcher/node_modules/multiformats/src/vendor/base-x.js", "../../@multiformats/multiaddr-matcher/node_modules/multiformats/src/bases/base.ts", "../../@multiformats/multiaddr-matcher/node_modules/multiformats/src/bases/base58.ts", "../../@multiformats/multiaddr-matcher/node_modules/multiformats/src/bases/base64.ts", "../../@multiformats/multiaddr-matcher/src/utils.ts", "../../@multiformats/multiaddr-matcher/src/index.ts", "../../@helia/block-brokers/src/trustless-gateway/utils.ts", "../../@helia/block-brokers/src/trustless-gateway/session.ts", "../../@helia/block-brokers/src/trustless-gateway/broker.ts", "../../@helia/block-brokers/src/trustless-gateway/index.ts", "../../browser-readablestream-to-it/src/index.ts", "../../ipns/src/index.ts", "../../ipns/src/errors.ts", "../../ipns/src/pb/ipns.ts", "../../ipns/node_modules/multiformats/src/bytes.ts", "../../ipns/node_modules/multiformats/src/vendor/base-x.js", "../../ipns/node_modules/multiformats/src/bases/base.ts", "../../ipns/node_modules/multiformats/src/bases/base36.ts", "../../ipns/node_modules/multiformats/src/bases/base32.ts", "../../ipns/node_modules/multiformats/src/bases/base58.ts", "../../ipns/node_modules/multiformats/src/vendor/varint.js", "../../ipns/node_modules/multiformats/src/varint.ts", "../../ipns/node_modules/multiformats/src/hashes/digest.ts", "../../ipns/node_modules/multiformats/src/cid.ts", "../../ipns/src/utils.ts", "../../ipns/src/validator.ts", "../../it-ndjson/src/errors.ts", "../../it-ndjson/src/parse.ts", "../../@helia/delegated-routing-v1-http-api-client/src/errors.ts", "../../@helia/delegated-routing-v1-http-api-client/node_modules/multiformats/src/bytes.ts", "../../@helia/delegated-routing-v1-http-api-client/node_modules/multiformats/src/vendor/base-x.js", "../../@helia/delegated-routing-v1-http-api-client/node_modules/multiformats/src/bases/base.ts", "../../@helia/delegated-routing-v1-http-api-client/node_modules/multiformats/src/bases/base32.ts", "../../@helia/delegated-routing-v1-http-api-client/node_modules/multiformats/src/bases/base36.ts", "../../@helia/delegated-routing-v1-http-api-client/node_modules/multiformats/src/bases/base58.ts", "../../@helia/delegated-routing-v1-http-api-client/node_modules/multiformats/src/vendor/varint.js", "../../@helia/delegated-routing-v1-http-api-client/node_modules/multiformats/src/varint.ts", "../../@helia/delegated-routing-v1-http-api-client/node_modules/multiformats/src/hashes/digest.ts", "../../@helia/delegated-routing-v1-http-api-client/node_modules/multiformats/src/cid.ts", "../../@helia/delegated-routing-v1-http-api-client/src/routings.ts", "../../@helia/delegated-routing-v1-http-api-client/src/client.ts", "../../@helia/delegated-routing-v1-http-api-client/src/index.ts", "../../@helia/routers/node_modules/multiformats/src/bytes.ts", "../../@helia/routers/node_modules/multiformats/src/vendor/base-x.js", "../../@helia/routers/node_modules/multiformats/src/bases/base.ts", "../../@helia/routers/node_modules/multiformats/src/bases/base32.ts", "../../@helia/routers/node_modules/multiformats/src/bases/base36.ts", "../../@helia/routers/node_modules/multiformats/src/bases/base58.ts", "../../@helia/routers/node_modules/multiformats/src/vendor/varint.js", "../../@helia/routers/node_modules/multiformats/src/varint.ts", "../../@helia/routers/node_modules/multiformats/src/hashes/digest.ts", "../../@helia/routers/node_modules/multiformats/src/cid.ts", "../../@helia/routers/src/utils/delegated-http-routing-defaults.browser.ts", "../../@helia/routers/src/delegated-http-routing.ts", "../../ip-regex/index.js", "../../function-timeout/browser.js", "../../is-regexp/index.js", "../../clone-regexp/index.js", "../../super-regex/index.js", "../../is-ip/index.js", "../../@multiformats/uri-to-multiaddr/src/index.ts", "../../@helia/routers/node_modules/multiformats/src/hashes/identity.ts", "../../@helia/routers/src/http-gateway-routing.ts", "../../@helia/routers/src/libp2p-routing.ts", "../../@libp2p/keychain/node_modules/multiformats/src/bytes.ts", "../../@libp2p/keychain/node_modules/multiformats/src/vendor/base-x.js", "../../@libp2p/keychain/node_modules/multiformats/src/bases/base.ts", "../../@libp2p/keychain/node_modules/multiformats/src/bases/base58.ts", "../../@libp2p/keychain/node_modules/multiformats/src/vendor/varint.js", "../../@libp2p/keychain/node_modules/multiformats/src/varint.ts", "../../@libp2p/keychain/node_modules/multiformats/src/hashes/digest.ts", "../../@libp2p/keychain/node_modules/multiformats/src/hashes/hasher.ts", "../../@libp2p/keychain/node_modules/multiformats/src/hashes/sha2-browser.ts", "../../@libp2p/keychain/src/keychain.ts", "../../@libp2p/crypto/src/ciphers/aes-gcm.browser.ts", "../../asn1js/build/index.es.js", "../../pvtsutils/build/index.es.js", "../../pvutils/build/utils.es.js", "../../@libp2p/keychain/node_modules/multiformats/src/bases/base64.ts", "../../@libp2p/keychain/src/utils/constants.ts", "../../@libp2p/keychain/src/utils/export.ts", "../../@libp2p/keychain/src/utils/import.ts", "../../@libp2p/keychain/src/index.ts", "../../@libp2p/config/src/load-private-key.ts", "../../libp2p/src/connection-manager/resolvers/dnsaddr.ts", "../../libp2p/src/config.ts", "../../@libp2p/peer-record/src/envelope/envelope.ts", "../../@libp2p/peer-record/src/envelope/errors.ts", "../../@libp2p/peer-record/src/envelope/index.ts", "../../@libp2p/utils/src/array-equals.ts", "../../@libp2p/peer-record/node_modules/multiformats/src/bytes.ts", "../../@libp2p/peer-record/node_modules/multiformats/src/vendor/varint.js", "../../@libp2p/peer-record/node_modules/multiformats/src/varint.ts", "../../@libp2p/peer-record/node_modules/multiformats/src/hashes/digest.ts", "../../@libp2p/peer-record/src/peer-record/consts.ts", "../../@libp2p/peer-record/src/peer-record/peer-record.ts", "../../@libp2p/peer-record/src/peer-record/index.ts", "../../@libp2p/peer-store/node_modules/multiformats/src/bytes.ts", "../../@libp2p/peer-store/node_modules/multiformats/src/vendor/base-x.js", "../../@libp2p/peer-store/node_modules/multiformats/src/bases/base.ts", "../../@libp2p/peer-store/node_modules/multiformats/src/bases/base32.ts", "../../@libp2p/peer-store/node_modules/multiformats/src/bases/base36.ts", "../../@libp2p/peer-store/node_modules/multiformats/src/bases/base58.ts", "../../@libp2p/peer-store/node_modules/multiformats/src/vendor/varint.js", "../../@libp2p/peer-store/node_modules/multiformats/src/varint.ts", "../../@libp2p/peer-store/node_modules/multiformats/src/hashes/digest.ts", "../../@libp2p/peer-store/node_modules/multiformats/src/cid.ts", "../../@libp2p/peer-store/src/constants.ts", "../../@libp2p/peer-store/src/pb/peer.ts", "../../@libp2p/peer-store/src/utils/bytes-to-peer.ts", "../../@libp2p/peer-store/src/utils/peer-equals.ts", "../../@libp2p/peer-store/src/utils/peer-id-to-datastore-key.ts", "../../@libp2p/peer-store/src/utils/dedupe-addresses.ts", "../../@libp2p/peer-store/src/utils/to-peer-pb.ts", "../../@libp2p/peer-store/src/store.ts", "../../@libp2p/peer-store/src/index.ts", "../../libp2p/node_modules/@multiformats/multiaddr-matcher/src/utils.ts", "../../libp2p/node_modules/@multiformats/multiaddr-matcher/src/index.ts", "../../libp2p/src/address-manager/dns-mappings.ts", "../../libp2p/src/address-manager/ip-mappings.ts", "../../@libp2p/utils/src/multiaddr/is-link-local.ts", "../../@libp2p/utils/src/multiaddr/is-ip-based.ts", "../../@libp2p/utils/src/multiaddr/is-private.ts", "../../libp2p/src/address-manager/observed-addresses.ts", "../../@libp2p/utils/src/multiaddr/is-network-address.ts", "../../libp2p/src/address-manager/transport-addresses.ts", "../../libp2p/src/address-manager/index.ts", "../../libp2p/src/errors.ts", "../../libp2p/src/components.ts", "../../libp2p/src/config/connection-gater.browser.ts", "../../delay/index.js", "../../@libp2p/utils/src/rate-limiter.ts", "../../libp2p/src/get-peer.ts", "../../@libp2p/utils/src/close.ts", "../../libp2p/src/connection-manager/utils.ts", "../../libp2p/src/connection-manager/connection-pruner.ts", "../../libp2p/src/connection-manager/constants.defaults.ts", "../../libp2p/src/connection-manager/constants.browser.ts", "../../@libp2p/utils/src/priority-queue.ts", "../../is-loopback-addr/src/index.ts", "../../@libp2p/utils/src/multiaddr/is-loopback.ts", "../../libp2p/src/connection-manager/address-sorter.ts", "../../libp2p/src/connection-manager/resolvers/index.ts", "../../libp2p/src/connection-manager/dial-queue.ts", "../../p-retry/index.js", "../../is-network-error/index.js", "../../libp2p/src/connection-manager/reconnect-queue.ts", "../../libp2p/src/connection-manager/index.ts", "../../@libp2p/utils/src/moving-average.ts", "../../@libp2p/utils/src/adaptive-timeout.ts", "../../it-byte-stream/src/errors.ts", "../../it-byte-stream/src/index.ts", "../../libp2p/src/connection-monitor.ts", "../../libp2p/src/content-routing.ts", "../../libp2p/src/peer-routing.ts", "../../libp2p/src/random-walk.ts", "../../libp2p/src/registrar.ts", "../../libp2p/src/transport-manager.ts", "../../@libp2p/multistream-select/src/constants.ts", "../../it-length-prefixed-stream/src/errors.ts", "../../it-length-prefixed-stream/src/index.ts", "../../@libp2p/multistream-select/src/multistream.ts", "../../@libp2p/multistream-select/src/select.ts", "../../@libp2p/multistream-select/src/handle.ts", "../../libp2p/src/connection/index.ts", "../../libp2p/src/upgrader.ts", "../../libp2p/src/version.ts", "../../libp2p/src/user-agent.browser.ts", "../../libp2p/src/libp2p.ts", "../../libp2p/src/index.ts", "../../it-pair/src/index.ts", "../../it-pair/src/duplex.ts", "../../@chainsafe/libp2p-noise/src/constants.ts", "../../@noble/ciphers/src/utils.ts", "../../@noble/ciphers/src/_arx.ts", "../../@noble/ciphers/src/_poly1305.ts", "../../@noble/ciphers/src/chacha.ts", "../../@noble/hashes/src/hkdf.ts", "../../@chainsafe/libp2p-noise/src/crypto/js.ts", "../../@chainsafe/libp2p-noise/src/crypto/index.browser.ts", "../../@chainsafe/libp2p-noise/src/crypto.ts", "../../@chainsafe/libp2p-noise/src/encoder.ts", "../../@chainsafe/libp2p-noise/src/metrics.ts", "../../@chainsafe/libp2p-noise/src/logger.ts", "../../uint8arrays/src/xor.ts", "../../@chainsafe/libp2p-noise/src/errors.ts", "../../@chainsafe/libp2p-noise/src/nonce.ts", "../../@chainsafe/libp2p-noise/src/protocol.ts", "../../@chainsafe/libp2p-noise/src/proto/payload.ts", "../../@chainsafe/libp2p-noise/src/utils.ts", "../../@chainsafe/libp2p-noise/src/performHandshake.ts", "../../@chainsafe/libp2p-noise/src/streaming.ts", "../../@chainsafe/libp2p-noise/src/noise.ts", "../../@chainsafe/libp2p-noise/src/index.ts", "../../get-iterator/src/index.ts", "../../@chainsafe/libp2p-yamux/src/errors.ts", "../../@chainsafe/libp2p-yamux/src/constants.ts", "../../@chainsafe/libp2p-yamux/src/config.ts", "../../@chainsafe/libp2p-yamux/src/frame.ts", "../../@chainsafe/libp2p-yamux/src/decode.ts", "../../@chainsafe/libp2p-yamux/src/encode.ts", "../../@libp2p/utils/src/is-promise.ts", "../../@libp2p/utils/src/close-source.ts", "../../@libp2p/utils/src/abstract-stream.ts", "../../@chainsafe/libp2p-yamux/src/stream.ts", "../../@chainsafe/libp2p-yamux/src/muxer.ts", "../../@chainsafe/libp2p-yamux/src/index.ts", "../../@libp2p/utils/src/multiaddr/is-global-unicast.ts", "../../@libp2p/utils/src/repeating-task.ts", "../../it-protobuf-stream/src/index.ts", "../../@libp2p/autonat/node_modules/multiformats/src/bytes.ts", "../../@libp2p/autonat/node_modules/multiformats/src/vendor/varint.js", "../../@libp2p/autonat/node_modules/multiformats/src/varint.ts", "../../@libp2p/autonat/node_modules/multiformats/src/hashes/digest.ts", "../../@libp2p/autonat/src/constants.ts", "../../@libp2p/autonat/src/pb/index.ts", "../../@libp2p/autonat/src/autonat.ts", "../../@libp2p/autonat/src/index.ts", "../../@libp2p/bootstrap/src/index.ts", "../../@libp2p/circuit-relay-v2/node_modules/multiformats/src/bytes.ts", "../../@libp2p/circuit-relay-v2/node_modules/multiformats/src/vendor/varint.js", "../../@libp2p/circuit-relay-v2/node_modules/multiformats/src/varint.ts", "../../@libp2p/circuit-relay-v2/node_modules/multiformats/src/hashes/digest.ts", "../../@libp2p/circuit-relay-v2/src/constants.ts", "../../@libp2p/circuit-relay-v2/src/pb/index.ts", "../../@libp2p/circuit-relay-v2/node_modules/@multiformats/multiaddr-matcher/src/utils.ts", "../../@libp2p/circuit-relay-v2/node_modules/@multiformats/multiaddr-matcher/src/index.ts", "../../@libp2p/circuit-relay-v2/node_modules/multiformats/src/vendor/base-x.js", "../../@libp2p/circuit-relay-v2/node_modules/multiformats/src/bases/base.ts", "../../@libp2p/circuit-relay-v2/node_modules/multiformats/src/bases/base32.ts", "../../@libp2p/circuit-relay-v2/node_modules/multiformats/src/bases/base36.ts", "../../@libp2p/circuit-relay-v2/node_modules/multiformats/src/bases/base58.ts", "../../@libp2p/circuit-relay-v2/node_modules/multiformats/src/cid.ts", "../../@libp2p/circuit-relay-v2/node_modules/multiformats/src/hashes/hasher.ts", "../../@libp2p/circuit-relay-v2/node_modules/multiformats/src/hashes/sha2-browser.ts", "../../@libp2p/circuit-relay-v2/src/errors.ts", "../../@libp2p/circuit-relay-v2/src/utils.ts", "../../@libp2p/utils/src/stream-to-ma-conn.ts", "../../@libp2p/circuit-relay-v2/src/transport/discovery.ts", "../../@libp2p/circuit-relay-v2/src/transport/listener.ts", "../../@libp2p/circuit-relay-v2/node_modules/nanoid/url-alphabet/index.js", "../../@libp2p/circuit-relay-v2/node_modules/nanoid/index.browser.js", "../../@libp2p/circuit-relay-v2/src/transport/reservation-store.ts", "../../@libp2p/circuit-relay-v2/src/transport/transport.ts", "../../@libp2p/circuit-relay-v2/src/transport/index.ts", "../../@libp2p/dcutr/node_modules/@multiformats/multiaddr-matcher/src/utils.ts", "../../@libp2p/dcutr/node_modules/@multiformats/multiaddr-matcher/src/index.ts", "../../@libp2p/dcutr/src/pb/message.ts", "../../@libp2p/dcutr/src/utils.ts", "../../@libp2p/dcutr/src/dcutr.ts", "../../@libp2p/dcutr/src/index.ts", "../../@libp2p/identify/src/consts.ts", "../../@libp2p/identify/src/pb/message.ts", "../../@libp2p/identify/src/utils.ts", "../../@libp2p/identify/src/identify-push.ts", "../../@libp2p/identify/node_modules/@multiformats/multiaddr-matcher/src/utils.ts", "../../@libp2p/identify/node_modules/@multiformats/multiaddr-matcher/src/index.ts", "../../@libp2p/identify/src/identify.ts", "../../@libp2p/identify/src/index.ts", "../../@libp2p/kad-dht/src/constants.ts", "../../@libp2p/record/src/record.ts", "../../@libp2p/record/src/utils.ts", "../../@libp2p/record/src/index.ts", "../../@libp2p/kad-dht/src/errors.ts", "../../@libp2p/kad-dht/src/message/dht.ts", "../../@libp2p/kad-dht/src/query/events.ts", "../../@libp2p/kad-dht/src/record/selectors.ts", "../../@libp2p/kad-dht/src/record/validators.ts", "../../@libp2p/kad-dht/node_modules/multiformats/src/bytes.ts", "../../@libp2p/kad-dht/node_modules/multiformats/src/vendor/base-x.js", "../../@libp2p/kad-dht/node_modules/multiformats/src/bases/base.ts", "../../@libp2p/kad-dht/node_modules/multiformats/src/bases/base32.ts", "../../@libp2p/kad-dht/node_modules/multiformats/src/bases/base36.ts", "../../@libp2p/kad-dht/node_modules/multiformats/src/bases/base58.ts", "../../@libp2p/kad-dht/node_modules/multiformats/src/vendor/varint.js", "../../@libp2p/kad-dht/node_modules/multiformats/src/varint.ts", "../../@libp2p/kad-dht/node_modules/multiformats/src/hashes/digest.ts", "../../@libp2p/kad-dht/node_modules/multiformats/src/cid.ts", "../../@libp2p/kad-dht/node_modules/multiformats/src/codecs/raw.ts", "../../@libp2p/kad-dht/node_modules/multiformats/src/hashes/hasher.ts", "../../@libp2p/kad-dht/node_modules/multiformats/src/hashes/sha2-browser.ts", "../../@libp2p/kad-dht/src/utils.ts", "../../@libp2p/kad-dht/src/content-fetching/index.ts", "../../@libp2p/kad-dht/src/message/utils.ts", "../../@libp2p/kad-dht/src/content-routing/index.ts", "../../@libp2p/kad-dht/src/network.ts", "../../uint8arrays/src/xor-compare.ts", "../../@libp2p/kad-dht/src/peer-distance-list.ts", "../../@libp2p/kad-dht/src/peer-routing/index.ts", "../../@libp2p/kad-dht/src/providers.ts", "../../p-event/index.js", "../../@libp2p/kad-dht/src/query/query-path.ts", "../../@libp2p/kad-dht/src/query/manager.ts", "../../it-length/src/index.ts", "../../@libp2p/kad-dht/src/query-self.ts", "../../@libp2p/kad-dht/src/reprovider.ts", "../../@libp2p/kad-dht/src/routing-table/closest-peers.ts", "../../@libp2p/kad-dht/src/routing-table/k-bucket.ts", "../../@libp2p/kad-dht/src/routing-table/index.ts", "../../@libp2p/kad-dht/src/routing-table/generated-prefix-list-browser.ts", "../../@libp2p/kad-dht/src/routing-table/refresh.ts", "../../@libp2p/kad-dht/src/rpc/handlers/add-provider.ts", "../../@libp2p/kad-dht/src/rpc/handlers/find-node.ts", "../../@libp2p/kad-dht/src/rpc/handlers/get-providers.ts", "../../@libp2p/kad-dht/src/rpc/handlers/get-value.ts", "../../@libp2p/kad-dht/src/rpc/handlers/ping.ts", "../../@libp2p/kad-dht/src/rpc/handlers/put-value.ts", "../../@libp2p/kad-dht/src/rpc/index.ts", "../../@libp2p/kad-dht/src/topology-listener.ts", "../../@libp2p/kad-dht/src/kad-dht.ts", "../../@libp2p/kad-dht/src/index.ts", "../../@libp2p/mplex/src/message-types.ts", "../../@libp2p/mplex/src/decode.ts", "../../@libp2p/mplex/src/encode.ts", "../../@libp2p/mplex/src/errors.ts", "../../@libp2p/mplex/src/stream.ts", "../../@libp2p/mplex/src/mplex.ts", "../../@libp2p/mplex/src/index.ts", "../../@libp2p/ping/src/constants.ts", "../../@libp2p/ping/src/ping.ts", "../../@libp2p/ping/src/index.ts", "../../@libp2p/webrtc/node_modules/@multiformats/multiaddr-matcher/src/utils.ts", "../../@libp2p/webrtc/node_modules/@multiformats/multiaddr-matcher/src/index.ts", "../../@libp2p/webrtc/src/private-to-public/pb/message.ts", "../../@libp2p/webrtc/src/constants.ts", "../../@libp2p/webrtc/src/util.ts", "../../@libp2p/webrtc/src/maconn.ts", "../../@libp2p/webrtc/src/stream.ts", "../../@libp2p/webrtc/src/muxer.ts", "../../@libp2p/webrtc/src/webrtc/index.browser.ts", "../../@libp2p/webrtc/src/error.ts", "../../@libp2p/webrtc/src/private-to-private/pb/message.ts", "../../@libp2p/webrtc/src/private-to-private/util.ts", "../../@libp2p/webrtc/src/private-to-private/initiate-connection.ts", "../../@libp2p/webrtc/src/private-to-private/listener.ts", "../../@libp2p/webrtc/src/private-to-private/signaling-stream-handler.ts", "../../@libp2p/webrtc/src/private-to-private/transport.ts", "../../reflect-metadata/Reflect.js", "../../@peculiar/asn1-schema/build/es2015/enums.js", "../../@peculiar/asn1-schema/build/es2015/types/bit_string.js", "../../@peculiar/asn1-schema/build/es2015/types/octet_string.js", "../../@peculiar/asn1-schema/build/es2015/converters.js", "../../@peculiar/asn1-schema/build/es2015/helper.js", "../../@peculiar/asn1-schema/build/es2015/schema.js", "../../@peculiar/asn1-schema/build/es2015/storage.js", "../../@peculiar/asn1-schema/build/es2015/decorators.js", "../../@peculiar/asn1-schema/build/es2015/errors/schema_validation.js", "../../@peculiar/asn1-schema/build/es2015/parser.js", "../../@peculiar/asn1-schema/build/es2015/serializer.js", "../../@peculiar/asn1-schema/build/es2015/objects.js", "../../@peculiar/asn1-schema/build/es2015/convert.js", "../../@peculiar/asn1-x509/node_modules/tslib/tslib.es6.mjs", "../../@peculiar/asn1-x509/build/es2015/ip_converter.js", "../../@peculiar/asn1-x509/build/es2015/name.js", "../../@peculiar/asn1-x509/build/es2015/general_name.js", "../../@peculiar/asn1-x509/build/es2015/object_identifiers.js", "../../@peculiar/asn1-x509/build/es2015/extensions/authority_information_access.js", "../../@peculiar/asn1-x509/build/es2015/extensions/authority_key_identifier.js", "../../@peculiar/asn1-x509/build/es2015/extensions/basic_constraints.js", "../../@peculiar/asn1-x509/build/es2015/general_names.js", "../../@peculiar/asn1-x509/build/es2015/extensions/certificate_issuer.js", "../../@peculiar/asn1-x509/build/es2015/extensions/certificate_policies.js", "../../@peculiar/asn1-x509/build/es2015/extensions/crl_number.js", "../../@peculiar/asn1-x509/build/es2015/extensions/crl_delta_indicator.js", "../../@peculiar/asn1-x509/build/es2015/extensions/crl_distribution_points.js", "../../@peculiar/asn1-x509/build/es2015/extensions/crl_freshest.js", "../../@peculiar/asn1-x509/build/es2015/extensions/crl_issuing_distribution_point.js", "../../@peculiar/asn1-x509/build/es2015/extensions/crl_reason.js", "../../@peculiar/asn1-x509/build/es2015/extensions/extended_key_usage.js", "../../@peculiar/asn1-x509/build/es2015/extensions/inhibit_any_policy.js", "../../@peculiar/asn1-x509/build/es2015/extensions/invalidity_date.js", "../../@peculiar/asn1-x509/build/es2015/extensions/issuer_alternative_name.js", "../../@peculiar/asn1-x509/build/es2015/extensions/key_usage.js", "../../@peculiar/asn1-x509/build/es2015/extensions/name_constraints.js", "../../@peculiar/asn1-x509/build/es2015/extensions/policy_constraints.js", "../../@peculiar/asn1-x509/build/es2015/extensions/policy_mappings.js", "../../@peculiar/asn1-x509/build/es2015/extensions/subject_alternative_name.js", "../../@peculiar/asn1-x509/build/es2015/attribute.js", "../../@peculiar/asn1-x509/build/es2015/extensions/subject_directory_attributes.js", "../../@peculiar/asn1-x509/build/es2015/extensions/subject_key_identifier.js", "../../@peculiar/asn1-x509/build/es2015/extensions/private_key_usage_period.js", "../../@peculiar/asn1-x509/build/es2015/extensions/entrust_version_info.js", "../../@peculiar/asn1-x509/build/es2015/extensions/subject_info_access.js", "../../@peculiar/asn1-x509/build/es2015/algorithm_identifier.js", "../../@peculiar/asn1-x509/build/es2015/subject_public_key_info.js", "../../@peculiar/asn1-x509/build/es2015/time.js", "../../@peculiar/asn1-x509/build/es2015/validity.js", "../../@peculiar/asn1-x509/build/es2015/extension.js", "../../@peculiar/asn1-x509/build/es2015/types.js", "../../@peculiar/asn1-x509/build/es2015/tbs_certificate.js", "../../@peculiar/asn1-x509/build/es2015/certificate.js", "../../@peculiar/asn1-x509/build/es2015/tbs_cert_list.js", "../../@peculiar/asn1-x509/build/es2015/certificate_list.js", "../../@peculiar/asn1-cms/node_modules/tslib/tslib.es6.mjs", "../../@peculiar/asn1-cms/build/es2015/issuer_and_serial_number.js", "../../@peculiar/asn1-cms/build/es2015/signer_identifier.js", "../../@peculiar/asn1-cms/build/es2015/types.js", "../../@peculiar/asn1-cms/build/es2015/attribute.js", "../../@peculiar/asn1-cms/build/es2015/signer_info.js", "../../@peculiar/asn1-cms/build/es2015/attributes.js", "../../@peculiar/asn1-x509-attr/node_modules/tslib/tslib.es6.mjs", "../../@peculiar/asn1-x509-attr/build/es2015/aa_clear_attrs.js", "../../@peculiar/asn1-x509-attr/build/es2015/attr_spec.js", "../../@peculiar/asn1-x509-attr/build/es2015/aa_controls.js", "../../@peculiar/asn1-x509-attr/build/es2015/issuer_serial.js", "../../@peculiar/asn1-x509-attr/build/es2015/object_digest_info.js", "../../@peculiar/asn1-x509-attr/build/es2015/v2_form.js", "../../@peculiar/asn1-x509-attr/build/es2015/attr_cert_issuer.js", "../../@peculiar/asn1-x509-attr/build/es2015/attr_cert_validity_period.js", "../../@peculiar/asn1-x509-attr/build/es2015/holder.js", "../../@peculiar/asn1-x509-attr/build/es2015/attribute_certificate_info.js", "../../@peculiar/asn1-x509-attr/build/es2015/attribute_certificate.js", "../../@peculiar/asn1-x509-attr/build/es2015/class_list.js", "../../@peculiar/asn1-x509-attr/build/es2015/security_category.js", "../../@peculiar/asn1-x509-attr/build/es2015/clearance.js", "../../@peculiar/asn1-x509-attr/build/es2015/ietf_attr_syntax.js", "../../@peculiar/asn1-x509-attr/build/es2015/object_identifiers.js", "../../@peculiar/asn1-x509-attr/build/es2015/target.js", "../../@peculiar/asn1-x509-attr/build/es2015/proxy_info.js", "../../@peculiar/asn1-x509-attr/build/es2015/role_syntax.js", "../../@peculiar/asn1-x509-attr/build/es2015/svce_auth_info.js", "../../@peculiar/asn1-cms/build/es2015/certificate_choices.js", "../../@peculiar/asn1-cms/build/es2015/content_info.js", "../../@peculiar/asn1-cms/build/es2015/encapsulated_content_info.js", "../../@peculiar/asn1-cms/build/es2015/encrypted_content_info.js", "../../@peculiar/asn1-cms/build/es2015/other_key_attribute.js", "../../@peculiar/asn1-cms/build/es2015/key_agree_recipient_info.js", "../../@peculiar/asn1-cms/build/es2015/key_trans_recipient_info.js", "../../@peculiar/asn1-cms/build/es2015/kek_recipient_info.js", "../../@peculiar/asn1-cms/build/es2015/password_recipient_info.js", "../../@peculiar/asn1-cms/build/es2015/recipient_info.js", "../../@peculiar/asn1-cms/build/es2015/recipient_infos.js", "../../@peculiar/asn1-cms/build/es2015/revocation_info_choice.js", "../../@peculiar/asn1-cms/build/es2015/originator_info.js", "../../@peculiar/asn1-cms/build/es2015/enveloped_data.js", "../../@peculiar/asn1-cms/build/es2015/object_identifiers.js", "../../@peculiar/asn1-cms/build/es2015/signed_data.js", "../../@peculiar/asn1-ecc/build/es2015/object_identifiers.js", "../../@peculiar/asn1-ecc/build/es2015/algorithms.js", "../../@peculiar/asn1-ecc/node_modules/tslib/tslib.es6.mjs", "../../@peculiar/asn1-ecc/build/es2015/rfc3279.js", "../../@peculiar/asn1-ecc/build/es2015/ec_parameters.js", "../../@peculiar/asn1-ecc/build/es2015/ec_private_key.js", "../../@peculiar/asn1-ecc/build/es2015/ec_signature_value.js", "../../@peculiar/asn1-rsa/node_modules/tslib/tslib.es6.mjs", "../../@peculiar/asn1-rsa/build/es2015/object_identifiers.js", "../../@peculiar/asn1-rsa/build/es2015/algorithms.js", "../../@peculiar/asn1-rsa/build/es2015/parameters/rsaes_oaep.js", "../../@peculiar/asn1-rsa/build/es2015/parameters/rsassa_pss.js", "../../@peculiar/asn1-rsa/build/es2015/parameters/rsassa_pkcs1_v1_5.js", "../../@peculiar/asn1-rsa/build/es2015/other_prime_info.js", "../../@peculiar/asn1-rsa/build/es2015/rsa_private_key.js", "../../@peculiar/asn1-rsa/build/es2015/rsa_public_key.js", "../../@peculiar/x509/node_modules/tslib/tslib.es6.mjs", "../../tsyringe/dist/esm5/types/lifecycle.js", "../../tsyringe/node_modules/tslib/tslib.es6.js", "../../tsyringe/dist/esm5/reflection-helpers.js", "../../tsyringe/dist/esm5/providers/class-provider.js", "../../tsyringe/dist/esm5/providers/factory-provider.js", "../../tsyringe/dist/esm5/lazy-helpers.js", "../../tsyringe/dist/esm5/providers/injection-token.js", "../../tsyringe/dist/esm5/providers/token-provider.js", "../../tsyringe/dist/esm5/providers/value-provider.js", "../../tsyringe/dist/esm5/providers/provider.js", "../../tsyringe/dist/esm5/registry-base.js", "../../tsyringe/dist/esm5/registry.js", "../../tsyringe/dist/esm5/resolution-context.js", "../../tsyringe/dist/esm5/error-helpers.js", "../../tsyringe/dist/esm5/types/disposable.js", "../../tsyringe/dist/esm5/interceptors.js", "../../tsyringe/dist/esm5/dependency-container.js", "../../tsyringe/dist/esm5/decorators/injectable.js", "../../tsyringe/dist/esm5/index.js", "../../@peculiar/asn1-pkcs9/node_modules/tslib/tslib.es6.mjs", "../../@peculiar/asn1-pfx/node_modules/tslib/tslib.es6.mjs", "../../@peculiar/asn1-pfx/build/es2015/attribute.js", "../../@peculiar/asn1-pfx/build/es2015/authenticated_safe.js", "../../@peculiar/asn1-pfx/build/es2015/object_identifiers.js", "../../@peculiar/asn1-pfx/build/es2015/bags/types.js", "../../@peculiar/asn1-pfx/build/es2015/bags/cert_bag.js", "../../@peculiar/asn1-pfx/build/es2015/bags/crl_bag.js", "../../@peculiar/asn1-pkcs8/node_modules/tslib/tslib.es6.mjs", "../../@peculiar/asn1-pkcs8/build/es2015/encrypted_private_key_info.js", "../../@peculiar/asn1-pkcs8/build/es2015/private_key_info.js", "../../@peculiar/asn1-pfx/build/es2015/bags/key_bag.js", "../../@peculiar/asn1-pfx/build/es2015/bags/pkcs8_shrouded_key_bag.js", "../../@peculiar/asn1-pfx/build/es2015/bags/secret_bag.js", "../../@peculiar/asn1-pfx/build/es2015/mac_data.js", "../../@peculiar/asn1-pfx/build/es2015/pfx.js", "../../@peculiar/asn1-pfx/build/es2015/safe_bag.js", "../../@peculiar/asn1-pkcs9/build/es2015/index.js", "../../@peculiar/asn1-csr/node_modules/tslib/tslib.es6.mjs", "../../@peculiar/asn1-csr/build/es2015/attributes.js", "../../@peculiar/asn1-csr/build/es2015/certification_request_info.js", "../../@peculiar/asn1-csr/build/es2015/certification_request.js", "../../@peculiar/x509/build/x509.es.js", "../../@libp2p/webrtc/node_modules/multiformats/src/bases/base64.ts", "../../@libp2p/webrtc/node_modules/multiformats/src/bytes.ts", "../../@libp2p/webrtc/node_modules/multiformats/src/vendor/base-x.js", "../../@libp2p/webrtc/node_modules/multiformats/src/bases/base.ts", "../../@libp2p/webrtc/node_modules/multiformats/src/hashes/sha2-browser.ts", "../../@libp2p/webrtc/node_modules/multiformats/src/hashes/digest.ts", "../../@libp2p/webrtc/node_modules/multiformats/src/vendor/varint.js", "../../@libp2p/webrtc/node_modules/multiformats/src/varint.ts", "../../@libp2p/webrtc/node_modules/multiformats/src/hashes/hasher.ts", "../../@libp2p/webrtc/src/private-to-public/listener.browser.ts", "../../@libp2p/webrtc/node_modules/multiformats/src/bases/base10.ts", "../../@libp2p/webrtc/node_modules/multiformats/src/bases/base16.ts", "../../@libp2p/webrtc/node_modules/multiformats/src/bases/base2.ts", "../../@libp2p/webrtc/node_modules/multiformats/src/bases/base256emoji.ts", "../../@libp2p/webrtc/node_modules/multiformats/src/bases/base32.ts", "../../@libp2p/webrtc/node_modules/multiformats/src/bases/base36.ts", "../../@libp2p/webrtc/node_modules/multiformats/src/bases/base58.ts", "../../@libp2p/webrtc/node_modules/multiformats/src/bases/base8.ts", "../../@libp2p/webrtc/node_modules/multiformats/src/bases/identity.ts", "../../@libp2p/webrtc/node_modules/multiformats/src/codecs/json.ts", "../../@libp2p/webrtc/node_modules/multiformats/src/hashes/identity.ts", "../../@libp2p/webrtc/node_modules/multiformats/src/cid.ts", "../../@libp2p/webrtc/node_modules/multiformats/src/basics.ts", "../../@libp2p/webrtc/src/private-to-public/utils/sdp.ts", "../../@libp2p/webrtc/src/private-to-public/utils/generate-noise-prologue.ts", "../../@libp2p/webrtc/src/private-to-public/utils/connect.ts", "../../@libp2p/webrtc/src/private-to-public/utils/get-rtcpeerconnection.browser.ts", "../../@libp2p/webrtc/src/private-to-public/utils/pem.ts", "../../@libp2p/webrtc/src/private-to-public/transport.ts", "../../@libp2p/webrtc/src/index.ts", "../../it-ws/src/ready.ts", "../../it-ws/src/sink.ts", "../../it-ws/src/source.ts", "../../it-ws/src/duplex.ts", "../../it-ws/src/web-socket.browser.ts", "../../it-ws/src/ws-url.ts", "../../it-ws/src/client.ts", "../../@libp2p/websockets/node_modules/@multiformats/multiaddr-matcher/src/utils.ts", "../../@libp2p/websockets/node_modules/@multiformats/multiaddr-matcher/src/index.ts", "../../@libp2p/websockets/src/filters.ts", "../../@libp2p/websockets/src/listener.browser.ts", "../../@libp2p/websockets/src/constants.ts", "../../@libp2p/websockets/src/socket-to-conn.ts", "../../@libp2p/websockets/src/index.ts", "../../ipns/src/selector.ts", "../../helia/src/version.ts", "../../helia/src/utils/bootstrappers.ts", "../../helia/src/utils/libp2p-defaults.browser.ts", "../../helia/src/utils/libp2p.ts", "../../helia/src/utils/helia-defaults.ts", "../../helia/src/index.ts"],
  "sourcesContent": ["module.exports = function (max) {\n\n  if (!max) throw Error('hashlru must have a max value, of type number, greater than 0')\n\n  var size = 0, cache = Object.create(null), _cache = Object.create(null)\n\n  function update (key, value) {\n    cache[key] = value\n    size ++\n    if(size >= max) {\n      size = 0\n      _cache = cache\n      cache = Object.create(null)\n    }\n  }\n\n  return {\n    has: function (key) {\n      return cache[key] !== undefined || _cache[key] !== undefined\n    },\n    remove: function (key) {\n      if(cache[key] !== undefined)\n        cache[key] = undefined\n      if(_cache[key] !== undefined)\n        _cache[key] = undefined\n    },\n    get: function (key) {\n      var v = cache[key]\n      if(v !== undefined) return v\n      if((v = _cache[key]) !== undefined) {\n        update(key, v)\n        return v\n      }\n    },\n    set: function (key, value) {\n      if(cache[key] !== undefined) cache[key] = value\n      else update(key, value)\n    },\n    clear: function () {\n      cache = Object.create(null)\n      _cache = Object.create(null)\n    }\n  }\n}\n\n\n\n\n\n\n\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Netmask, atob, chr, chr0, chrA, chra, ip2long, long2ip;\n\n  long2ip = function(long) {\n    var a, b, c, d;\n    a = (long & (0xff << 24)) >>> 24;\n    b = (long & (0xff << 16)) >>> 16;\n    c = (long & (0xff << 8)) >>> 8;\n    d = long & 0xff;\n    return [a, b, c, d].join('.');\n  };\n\n  ip2long = function(ip) {\n    var b, c, i, j, n, ref;\n    b = [];\n    for (i = j = 0; j <= 3; i = ++j) {\n      if (ip.length === 0) {\n        break;\n      }\n      if (i > 0) {\n        if (ip[0] !== '.') {\n          throw new Error('Invalid IP');\n        }\n        ip = ip.substring(1);\n      }\n      ref = atob(ip), n = ref[0], c = ref[1];\n      ip = ip.substring(c);\n      b.push(n);\n    }\n    if (ip.length !== 0) {\n      throw new Error('Invalid IP');\n    }\n    switch (b.length) {\n      case 1:\n        if (b[0] > 0xFFFFFFFF) {\n          throw new Error('Invalid IP');\n        }\n        return b[0] >>> 0;\n      case 2:\n        if (b[0] > 0xFF || b[1] > 0xFFFFFF) {\n          throw new Error('Invalid IP');\n        }\n        return (b[0] << 24 | b[1]) >>> 0;\n      case 3:\n        if (b[0] > 0xFF || b[1] > 0xFF || b[2] > 0xFFFF) {\n          throw new Error('Invalid IP');\n        }\n        return (b[0] << 24 | b[1] << 16 | b[2]) >>> 0;\n      case 4:\n        if (b[0] > 0xFF || b[1] > 0xFF || b[2] > 0xFF || b[3] > 0xFF) {\n          throw new Error('Invalid IP');\n        }\n        return (b[0] << 24 | b[1] << 16 | b[2] << 8 | b[3]) >>> 0;\n      default:\n        throw new Error('Invalid IP');\n    }\n  };\n\n  chr = function(b) {\n    return b.charCodeAt(0);\n  };\n\n  chr0 = chr('0');\n\n  chra = chr('a');\n\n  chrA = chr('A');\n\n  atob = function(s) {\n    var base, dmax, i, n, start;\n    n = 0;\n    base = 10;\n    dmax = '9';\n    i = 0;\n    if (s.length > 1 && s[i] === '0') {\n      if (s[i + 1] === 'x' || s[i + 1] === 'X') {\n        i += 2;\n        base = 16;\n      } else if ('0' <= s[i + 1] && s[i + 1] <= '9') {\n        i++;\n        base = 8;\n        dmax = '7';\n      }\n    }\n    start = i;\n    while (i < s.length) {\n      if ('0' <= s[i] && s[i] <= dmax) {\n        n = (n * base + (chr(s[i]) - chr0)) >>> 0;\n      } else if (base === 16) {\n        if ('a' <= s[i] && s[i] <= 'f') {\n          n = (n * base + (10 + chr(s[i]) - chra)) >>> 0;\n        } else if ('A' <= s[i] && s[i] <= 'F') {\n          n = (n * base + (10 + chr(s[i]) - chrA)) >>> 0;\n        } else {\n          break;\n        }\n      } else {\n        break;\n      }\n      if (n > 0xFFFFFFFF) {\n        throw new Error('too large');\n      }\n      i++;\n    }\n    if (i === start) {\n      throw new Error('empty octet');\n    }\n    return [n, i];\n  };\n\n  Netmask = (function() {\n    function Netmask(net, mask) {\n      var error, i, j, ref;\n      if (typeof net !== 'string') {\n        throw new Error(\"Missing `net' parameter\");\n      }\n      if (!mask) {\n        ref = net.split('/', 2), net = ref[0], mask = ref[1];\n      }\n      if (!mask) {\n        mask = 32;\n      }\n      if (typeof mask === 'string' && mask.indexOf('.') > -1) {\n        try {\n          this.maskLong = ip2long(mask);\n        } catch (error1) {\n          error = error1;\n          throw new Error(\"Invalid mask: \" + mask);\n        }\n        for (i = j = 32; j >= 0; i = --j) {\n          if (this.maskLong === (0xffffffff << (32 - i)) >>> 0) {\n            this.bitmask = i;\n            break;\n          }\n        }\n      } else if (mask || mask === 0) {\n        this.bitmask = parseInt(mask, 10);\n        this.maskLong = 0;\n        if (this.bitmask > 0) {\n          this.maskLong = (0xffffffff << (32 - this.bitmask)) >>> 0;\n        }\n      } else {\n        throw new Error(\"Invalid mask: empty\");\n      }\n      try {\n        this.netLong = (ip2long(net) & this.maskLong) >>> 0;\n      } catch (error1) {\n        error = error1;\n        throw new Error(\"Invalid net address: \" + net);\n      }\n      if (!(this.bitmask <= 32)) {\n        throw new Error(\"Invalid mask for ip4: \" + mask);\n      }\n      this.size = Math.pow(2, 32 - this.bitmask);\n      this.base = long2ip(this.netLong);\n      this.mask = long2ip(this.maskLong);\n      this.hostmask = long2ip(~this.maskLong);\n      this.first = this.bitmask <= 30 ? long2ip(this.netLong + 1) : this.base;\n      this.last = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 2) : long2ip(this.netLong + this.size - 1);\n      this.broadcast = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 1) : void 0;\n    }\n\n    Netmask.prototype.contains = function(ip) {\n      if (typeof ip === 'string' && (ip.indexOf('/') > 0 || ip.split('.').length !== 4)) {\n        ip = new Netmask(ip);\n      }\n      if (ip instanceof Netmask) {\n        return this.contains(ip.base) && this.contains(ip.broadcast || ip.last);\n      } else {\n        return (ip2long(ip) & this.maskLong) >>> 0 === (this.netLong & this.maskLong) >>> 0;\n      }\n    };\n\n    Netmask.prototype.next = function(count) {\n      if (count == null) {\n        count = 1;\n      }\n      return new Netmask(long2ip(this.netLong + (this.size * count)), this.mask);\n    };\n\n    Netmask.prototype.forEach = function(fn) {\n      var index, lastLong, long;\n      long = ip2long(this.first);\n      lastLong = ip2long(this.last);\n      index = 0;\n      while (long <= lastLong) {\n        fn(long2ip(long), long, index);\n        index++;\n        long++;\n      }\n    };\n\n    Netmask.prototype.toString = function() {\n      return this.base + \"/\" + this.bitmask;\n    };\n\n    return Netmask;\n\n  })();\n\n  exports.ip2long = ip2long;\n\n  exports.long2ip = long2ip;\n\n  exports.Netmask = Netmask;\n\n}).call(this);\n", "var Timestamp=function(){\"undefined\"!=typeof module&&(module.exports=d);var l=86400,s=3200,T=146097*s/400,e=l*T,f=1e3*e,c=864e13,g=4294967296,h=1e6,u=\"000000000\",m=Math.trunc||function(n){var t=n-n%1;return 0==t&&(n<0||0===n&&1/n!=1/0)?-0:t},n=d.prototype,o=(d.fromDate=function(n){return new d(+n)},d.fromInt64BE=r(0,1,2,3,0,4),d.fromInt64LE=r(3,2,1,0,4,0),d.fromString=function(n){var e,r=new d,n=(n+=\"\").replace(/^\\s*[+\\-]?\\d+/,function(n){var n=+n,t=1970+(n-1970)%400;return r.year=n-t,t}).replace(/(?:Z|([+\\-]\\d{2}):?(\\d{2}))$/,function(n,t,r){return t<0&&(r*=-1),e=6e4*(60*+t+ +r),\"\"}).replace(/\\.\\d+$/,function(n){return r.nano=+(n+u).substr(1,9),\"\"}).split(/\\D+/);1<n.length?n[1]--:n[1]=0;if(r.time=e=Date.UTC.apply(Date,n)-(e||0),isNaN(e))throw new TypeError(\"Invalid Date\");return p(r)},d.fromTimeT=function(n){return y(n,0)},n.year=0,n.time=0,n.nano=0,n.addNano=function(n){return this.nano+=+n||0,this},n.getNano=function(){var n=p(this);return(n.time%1e3*h+ +n.nano+1e9)%1e9},n.getTimeT=function(){var n=p(this),t=Math.floor(n.time/1e3),n=n.year;n&&(t+=n*T*l/s);return t},n.getYear=function(){return this.toDate().getUTCFullYear()+this.year},n.toDate=function(){return M(p(this).time)},n.toJSON=function(){return this.toString().replace(/0{1,6}Z$/,\"Z\")},n.toString=function(n){var t=this,r=t.toDate(),u={H:function(){return C(r.getUTCHours())},L:function(){return D(r.getUTCMilliseconds(),3)},M:function(){return C(r.getUTCMinutes())},N:function(){return D(t.getNano(),9)},S:function(){return C(r.getUTCSeconds())},Y:function(){var n=t.getYear();return 999999<n?\"+\"+n:9999<n?\"+\"+D(n,6):0<=n?D(n,4):-999999<=n?\"-\"+D(-n,6):n},a:function(){return a[r.getUTCDay()]},b:function(){return i[r.getUTCMonth()]},d:function(){return C(r.getUTCDate())},e:function(){return function(n){return(9<n?\"\":\" \")+(0|n)}(r.getUTCDate())},m:function(){return C(r.getUTCMonth()+1)}};return function e(n){return n.replace(/%./g,function(n){var t=n[1],r=v[t],t=u[t];return r?e(r):t?t():n})}(n||o)},n.writeInt64BE=t(0,1,2,3,0,4),n.writeInt64LE=t(3,2,1,0,4,0),\"%Y-%m-%dT%H:%M:%S.%NZ\"),i=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],a=[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],v={\"%\":\"%\",F:\"%Y-%m-%d\",n:\"\\n\",R:\"%H:%M\",T:\"%H:%M:%S\",t:\"\\t\",X:\"%T\",Z:\"GMT\",z:\"+0000\"};return d;function d(n,t,r){var e=this;if(!(e instanceof d))return new d(n,t,r);e.time=+n||0,e.nano=+t||0,e.year=+r||0,p(e)}function p(n){var t,r,e,u=n.year,o=n.time,i=n.nano,a=((i<0||h<=i)&&(i-=(r=Math.floor(i/h))*h,o+=r,r=1),u%s);return(o<-c||c<o||a)&&((t=m(o/f))&&(u+=t*s,o-=t*f),(e=M(o)).setUTCFullYear(a+e.getUTCFullYear()),e=(o=+e)+(t=m((u-=a)/s))*f,t&&-c<=e&&e<=c&&(u-=t*s,o=e),r=1),r&&(n.year=u,n.time=o,n.nano=i),n}function M(n){var t=new Date(0);return t.setTime(n),t}function y(n,t){n=+n||0;var r=m((t=(t|0)*g)/e)+m(n/e),t=t%e+n%e,n=m(t/e);return n&&(r+=n,t-=n*e),new d(1e3*t,0,r*s)}function t(e,u,o,i,a,f){return function(n,t){var r=p(this);n=n||new Array(8);w(n,t|=0);var e=Math.floor(r.time/1e3),r=r.year*(T*l/s),u=m(r/g)+m(e/g),r=r%g+e%g,e=Math.floor(r/g);e&&(u+=e,r-=e*g);return c(n,t+a,u),c(n,t+f,r),n};function c(n,t,r){n[t+e]=r>>24&255,n[t+u]=r>>16&255,n[t+o]=r>>8&255,n[t+i]=255&r}}function r(r,e,u,o,i,a){return function(n,t){w(n,t|=0);var r=f(n,t+i);return y(f(n,t+a),r)};function f(n,t){return 16777216*n[t+r]+(n[t+e]<<16|n[t+u]<<8|n[t+o])}}function w(n,t){n=n&&n.length;if(null==n)throw new TypeError(\"Invalid Buffer\");if(n<t+8)throw new RangeError(\"Out of range\")}function C(n){return(9<n?\"\":\"0\")+(0|n)}function D(n,t){return(u+(0|n)).substr(-t)}}();", "'use strict';\n\nfunction isHighSurrogate(codePoint) {\n  return codePoint >= 0xd800 && codePoint <= 0xdbff;\n}\n\nfunction isLowSurrogate(codePoint) {\n  return codePoint >= 0xdc00 && codePoint <= 0xdfff;\n}\n\n// Truncate string by size in bytes\nmodule.exports = function truncate(getLength, string, byteLength) {\n  if (typeof string !== \"string\") {\n    throw new Error(\"Input must be string\");\n  }\n\n  var charLength = string.length;\n  var curByteLength = 0;\n  var codePoint;\n  var segment;\n\n  for (var i = 0; i < charLength; i += 1) {\n    codePoint = string.charCodeAt(i);\n    segment = string[i];\n\n    if (isHighSurrogate(codePoint) && isLowSurrogate(string.charCodeAt(i + 1))) {\n      i += 1;\n      segment += string[i];\n    }\n\n    curByteLength += getLength(segment);\n\n    if (curByteLength === byteLength) {\n      return string.slice(0, i + 1);\n    }\n    else if (curByteLength > byteLength) {\n      return string.slice(0, i - segment.length + 1);\n    }\n  }\n\n  return string;\n};\n\n", "'use strict';\n\nfunction isHighSurrogate(codePoint) {\n  return codePoint >= 0xd800 && codePoint <= 0xdbff;\n}\n\nfunction isLowSurrogate(codePoint) {\n  return codePoint >= 0xdc00 && codePoint <= 0xdfff;\n}\n\n// Truncate string by size in bytes\nmodule.exports = function getByteLength(string) {\n  if (typeof string !== \"string\") {\n    throw new Error(\"Input must be string\");\n  }\n\n  var charLength = string.length;\n  var byteLength = 0;\n  var codePoint = null;\n  var prevCodePoint = null;\n  for (var i = 0; i < charLength; i++) {\n    codePoint = string.charCodeAt(i);\n    // handle 4-byte non-BMP chars\n    // low surrogate\n    if (isLowSurrogate(codePoint)) {\n      // when parsing previous hi-surrogate, 3 is added to byteLength\n      if (prevCodePoint != null && isHighSurrogate(prevCodePoint)) {\n        byteLength += 1;\n      }\n      else {\n        byteLength += 3;\n      }\n    }\n    else if (codePoint <= 0x7f ) {\n      byteLength += 1;\n    }\n    else if (codePoint >= 0x80 && codePoint <= 0x7ff) {\n      byteLength += 2;\n    }\n    else if (codePoint >= 0x800 && codePoint <= 0xffff) {\n      byteLength += 3;\n    }\n    prevCodePoint = codePoint;\n  }\n\n  return byteLength;\n};\n", "'use strict';\n\nvar truncate = require(\"./lib/truncate\");\nvar getLength = require(\"utf8-byte-length/browser\");\nmodule.exports = truncate.bind(null, getLength);\n", "/*jshint node:true*/\n'use strict';\n\n/**\n * Replaces characters in strings that are illegal/unsafe for filenames.\n * Unsafe characters are either removed or replaced by a substitute set\n * in the optional `options` object.\n *\n * Illegal Characters on Various Operating Systems\n * / ? < > \\ : * | \"\n * https://kb.acronis.com/content/39790\n *\n * Unicode Control codes\n * C0 0x00-0x1f & C1 (0x80-0x9f)\n * http://en.wikipedia.org/wiki/C0_and_C1_control_codes\n *\n * Reserved filenames on Unix-based systems (\".\", \"..\")\n * Reserved filenames in Windows (\"CON\", \"PRN\", \"AUX\", \"NUL\", \"COM1\",\n * \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\",\n * \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", and\n * \"LPT9\") case-insesitively and with or without filename extensions.\n *\n * Capped at 255 characters in length.\n * http://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs\n *\n * @param  {String} input   Original filename\n * @param  {Object} options {replacement: String | Function }\n * @return {String}         Sanitized filename\n */\n\nvar truncate = require(\"truncate-utf8-bytes\");\n\nvar illegalRe = /[\\/\\?<>\\\\:\\*\\|\"]/g;\nvar controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\nvar reservedRe = /^\\.+$/;\nvar windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\nvar windowsTrailingRe = /[\\. ]+$/;\n\nfunction sanitize(input, replacement) {\n  if (typeof input !== 'string') {\n    throw new Error('Input must be string');\n  }\n  var sanitized = input\n    .replace(illegalRe, replacement)\n    .replace(controlRe, replacement)\n    .replace(reservedRe, replacement)\n    .replace(windowsReservedRe, replacement)\n    .replace(windowsTrailingRe, replacement);\n  return truncate(sanitized, 255);\n}\n\nmodule.exports = function (input, options) {\n  var replacement = (options && options.replacement) || '';\n  var output = sanitize(input, replacement);\n  if (replacement === '') {\n    return output;\n  }\n  return sanitize(output, '');\n};\n", "function RetryOperation(timeouts, options) {\n  // Compatibility for the old (timeouts, retryForever) signature\n  if (typeof options === 'boolean') {\n    options = { forever: options };\n  }\n\n  this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));\n  this._timeouts = timeouts;\n  this._options = options || {};\n  this._maxRetryTime = options && options.maxRetryTime || Infinity;\n  this._fn = null;\n  this._errors = [];\n  this._attempts = 1;\n  this._operationTimeout = null;\n  this._operationTimeoutCb = null;\n  this._timeout = null;\n  this._operationStart = null;\n  this._timer = null;\n\n  if (this._options.forever) {\n    this._cachedTimeouts = this._timeouts.slice(0);\n  }\n}\nmodule.exports = RetryOperation;\n\nRetryOperation.prototype.reset = function() {\n  this._attempts = 1;\n  this._timeouts = this._originalTimeouts.slice(0);\n}\n\nRetryOperation.prototype.stop = function() {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n  if (this._timer) {\n    clearTimeout(this._timer);\n  }\n\n  this._timeouts       = [];\n  this._cachedTimeouts = null;\n};\n\nRetryOperation.prototype.retry = function(err) {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n\n  if (!err) {\n    return false;\n  }\n  var currentTime = new Date().getTime();\n  if (err && currentTime - this._operationStart >= this._maxRetryTime) {\n    this._errors.push(err);\n    this._errors.unshift(new Error('RetryOperation timeout occurred'));\n    return false;\n  }\n\n  this._errors.push(err);\n\n  var timeout = this._timeouts.shift();\n  if (timeout === undefined) {\n    if (this._cachedTimeouts) {\n      // retry forever, only keep last error\n      this._errors.splice(0, this._errors.length - 1);\n      timeout = this._cachedTimeouts.slice(-1);\n    } else {\n      return false;\n    }\n  }\n\n  var self = this;\n  this._timer = setTimeout(function() {\n    self._attempts++;\n\n    if (self._operationTimeoutCb) {\n      self._timeout = setTimeout(function() {\n        self._operationTimeoutCb(self._attempts);\n      }, self._operationTimeout);\n\n      if (self._options.unref) {\n          self._timeout.unref();\n      }\n    }\n\n    self._fn(self._attempts);\n  }, timeout);\n\n  if (this._options.unref) {\n      this._timer.unref();\n  }\n\n  return true;\n};\n\nRetryOperation.prototype.attempt = function(fn, timeoutOps) {\n  this._fn = fn;\n\n  if (timeoutOps) {\n    if (timeoutOps.timeout) {\n      this._operationTimeout = timeoutOps.timeout;\n    }\n    if (timeoutOps.cb) {\n      this._operationTimeoutCb = timeoutOps.cb;\n    }\n  }\n\n  var self = this;\n  if (this._operationTimeoutCb) {\n    this._timeout = setTimeout(function() {\n      self._operationTimeoutCb();\n    }, self._operationTimeout);\n  }\n\n  this._operationStart = new Date().getTime();\n\n  this._fn(this._attempts);\n};\n\nRetryOperation.prototype.try = function(fn) {\n  console.log('Using RetryOperation.try() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = function(fn) {\n  console.log('Using RetryOperation.start() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = RetryOperation.prototype.try;\n\nRetryOperation.prototype.errors = function() {\n  return this._errors;\n};\n\nRetryOperation.prototype.attempts = function() {\n  return this._attempts;\n};\n\nRetryOperation.prototype.mainError = function() {\n  if (this._errors.length === 0) {\n    return null;\n  }\n\n  var counts = {};\n  var mainError = null;\n  var mainErrorCount = 0;\n\n  for (var i = 0; i < this._errors.length; i++) {\n    var error = this._errors[i];\n    var message = error.message;\n    var count = (counts[message] || 0) + 1;\n\n    counts[message] = count;\n\n    if (count >= mainErrorCount) {\n      mainError = error;\n      mainErrorCount = count;\n    }\n  }\n\n  return mainError;\n};\n", "var RetryOperation = require('./retry_operation');\n\nexports.operation = function(options) {\n  var timeouts = exports.timeouts(options);\n  return new RetryOperation(timeouts, {\n      forever: options && (options.forever || options.retries === Infinity),\n      unref: options && options.unref,\n      maxRetryTime: options && options.maxRetryTime\n  });\n};\n\nexports.timeouts = function(options) {\n  if (options instanceof Array) {\n    return [].concat(options);\n  }\n\n  var opts = {\n    retries: 10,\n    factor: 2,\n    minTimeout: 1 * 1000,\n    maxTimeout: Infinity,\n    randomize: false\n  };\n  for (var key in options) {\n    opts[key] = options[key];\n  }\n\n  if (opts.minTimeout > opts.maxTimeout) {\n    throw new Error('minTimeout is greater than maxTimeout');\n  }\n\n  var timeouts = [];\n  for (var i = 0; i < opts.retries; i++) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  if (options && options.forever && !timeouts.length) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  // sort the array numerically ascending\n  timeouts.sort(function(a,b) {\n    return a - b;\n  });\n\n  return timeouts;\n};\n\nexports.createTimeout = function(attempt, opts) {\n  var random = (opts.randomize)\n    ? (Math.random() + 1)\n    : 1;\n\n  var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));\n  timeout = Math.min(timeout, opts.maxTimeout);\n\n  return timeout;\n};\n\nexports.wrap = function(obj, options, methods) {\n  if (options instanceof Array) {\n    methods = options;\n    options = null;\n  }\n\n  if (!methods) {\n    methods = [];\n    for (var key in obj) {\n      if (typeof obj[key] === 'function') {\n        methods.push(key);\n      }\n    }\n  }\n\n  for (var i = 0; i < methods.length; i++) {\n    var method   = methods[i];\n    var original = obj[method];\n\n    obj[method] = function retryWrapper(original) {\n      var op       = exports.operation(options);\n      var args     = Array.prototype.slice.call(arguments, 1);\n      var callback = args.pop();\n\n      args.push(function(err) {\n        if (op.retry(err)) {\n          return;\n        }\n        if (err) {\n          arguments[0] = op.mainError();\n        }\n        callback.apply(this, arguments);\n      });\n\n      op.attempt(function() {\n        original.apply(obj, args);\n      });\n    }.bind(obj, original);\n    obj[method].options = options;\n  }\n};\n", "module.exports = require('./lib/retry');", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass EventQueue {\n    constructor() {\n        this.pullQueue = [];\n        this.pushQueue = [];\n        this.eventHandlers = {};\n        this.isPaused = false;\n        this.isStopped = false;\n    }\n    push(value) {\n        if (this.isStopped)\n            return;\n        const resolution = { value, done: false };\n        if (this.pullQueue.length) {\n            const placeholder = this.pullQueue.shift();\n            if (placeholder)\n                placeholder.resolve(resolution);\n        }\n        else {\n            this.pushQueue.push(Promise.resolve(resolution));\n            if (this.highWaterMark !== undefined &&\n                this.pushQueue.length >= this.highWaterMark &&\n                !this.isPaused) {\n                this.isPaused = true;\n                if (this.eventHandlers.highWater) {\n                    this.eventHandlers.highWater();\n                }\n                else if (console) {\n                    console.warn(`EventIterator queue reached ${this.pushQueue.length} items`);\n                }\n            }\n        }\n    }\n    stop() {\n        if (this.isStopped)\n            return;\n        this.isStopped = true;\n        this.remove();\n        for (const placeholder of this.pullQueue) {\n            placeholder.resolve({ value: undefined, done: true });\n        }\n        this.pullQueue.length = 0;\n    }\n    fail(error) {\n        if (this.isStopped)\n            return;\n        this.isStopped = true;\n        this.remove();\n        if (this.pullQueue.length) {\n            for (const placeholder of this.pullQueue) {\n                placeholder.reject(error);\n            }\n            this.pullQueue.length = 0;\n        }\n        else {\n            const rejection = Promise.reject(error);\n            /* Attach error handler to avoid leaking an unhandled promise rejection. */\n            rejection.catch(() => { });\n            this.pushQueue.push(rejection);\n        }\n    }\n    remove() {\n        Promise.resolve().then(() => {\n            if (this.removeCallback)\n                this.removeCallback();\n        });\n    }\n    [Symbol.asyncIterator]() {\n        return {\n            next: (value) => {\n                const result = this.pushQueue.shift();\n                if (result) {\n                    if (this.lowWaterMark !== undefined &&\n                        this.pushQueue.length <= this.lowWaterMark &&\n                        this.isPaused) {\n                        this.isPaused = false;\n                        if (this.eventHandlers.lowWater) {\n                            this.eventHandlers.lowWater();\n                        }\n                    }\n                    return result;\n                }\n                else if (this.isStopped) {\n                    return Promise.resolve({ value: undefined, done: true });\n                }\n                else {\n                    return new Promise((resolve, reject) => {\n                        this.pullQueue.push({ resolve, reject });\n                    });\n                }\n            },\n            return: () => {\n                this.isStopped = true;\n                this.pushQueue.length = 0;\n                this.remove();\n                return Promise.resolve({ value: undefined, done: true });\n            },\n        };\n    }\n}\nclass EventIterator {\n    constructor(listen, { highWaterMark = 100, lowWaterMark = 1 } = {}) {\n        const queue = new EventQueue();\n        queue.highWaterMark = highWaterMark;\n        queue.lowWaterMark = lowWaterMark;\n        queue.removeCallback =\n            listen({\n                push: value => queue.push(value),\n                stop: () => queue.stop(),\n                fail: error => queue.fail(error),\n                on: (event, fn) => {\n                    queue.eventHandlers[event] = fn;\n                },\n            }) || (() => { });\n        this[Symbol.asyncIterator] = () => queue[Symbol.asyncIterator]();\n        Object.freeze(this);\n    }\n}\nexports.EventIterator = EventIterator;\nexports.default = EventIterator;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst event_iterator_1 = require(\"./event-iterator\");\nexports.EventIterator = event_iterator_1.EventIterator;\nfunction subscribe(event, options, evOptions) {\n    return new event_iterator_1.EventIterator(({ push }) => {\n        this.addEventListener(event, push, options);\n        return () => this.removeEventListener(event, push, options);\n    }, evOptions);\n}\nexports.subscribe = subscribe;\nexports.default = event_iterator_1.EventIterator;\n", "import { RecordType } from '../index.js'\n\nexport function getTypes (types?: RecordType | RecordType[]): RecordType[] {\n  const DEFAULT_TYPES = [\n    RecordType.A\n  ]\n\n  if (types == null) {\n    return DEFAULT_TYPES\n  }\n\n  if (Array.isArray(types)) {\n    if (types.length === 0) {\n      return DEFAULT_TYPES\n    }\n\n    return types\n  }\n\n  return [\n    types\n  ]\n}\n", "import { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { RecordType, type DNSResponse } from '../index.js'\n\n/**\n * This TTL will be used if the remote service does not return one\n */\nexport const DEFAULT_TTL = 60\n\nexport function toDNSResponse (obj: any): DNSResponse {\n  return {\n    Status: obj.Status ?? 0,\n    TC: obj.TC ?? obj.flag_tc ?? false,\n    RD: obj.RD ?? obj.flag_rd ?? false,\n    RA: obj.RA ?? obj.flag_ra ?? false,\n    AD: obj.AD ?? obj.flag_ad ?? false,\n    CD: obj.CD ?? obj.flag_cd ?? false,\n    Question: (obj.Question ?? obj.questions ?? []).map((question: any) => {\n      return {\n        name: question.name,\n        type: RecordType[question.type]\n      }\n    }),\n    Answer: (obj.Answer ?? obj.answers ?? []).map((answer: any) => {\n      return {\n        name: answer.name,\n        type: RecordType[answer.type],\n        TTL: (answer.TTL ?? answer.ttl ?? DEFAULT_TTL),\n        data: answer.data instanceof Uint8Array ? uint8ArrayToString(answer.data) : answer.data\n      }\n    })\n  }\n}\n", "/* eslint-env browser */\n\nimport PQueue from 'p-queue'\nimport { CustomProgressEvent } from 'progress-events'\nimport { RecordType, type DNSResponse } from '../index.js'\nimport { getTypes } from '../utils/get-types.js'\nimport { toDNSResponse } from '../utils/to-dns-response.js'\nimport type { DNSResolver } from './index.js'\n\n/**\n * Browsers limit concurrent connections per host (~6), we don't want to exhaust\n * the limit so this value controls how many DNS queries can be in flight at\n * once.\n */\nexport const DEFAULT_QUERY_CONCURRENCY = 4\n\nexport interface DNSJSONOverHTTPSOptions {\n  queryConcurrency?: number\n}\n\n/**\n * Uses the RFC 8427 'application/dns-json' content-type to resolve DNS queries.\n *\n * Supports and server that uses the same schema as Google's DNS over HTTPS\n * resolver.\n *\n * This resolver needs fewer dependencies than the regular DNS-over-HTTPS\n * resolver so can result in a smaller bundle size and consequently is preferred\n * for browser use.\n *\n * @see https://developers.cloudflare.com/1.1.1.1/encryption/dns-over-https/make-api-requests/dns-json/\n * @see https://github.com/curl/curl/wiki/DNS-over-HTTPS#publicly-available-servers\n * @see https://dnsprivacy.org/public_resolvers/\n * @see https://datatracker.ietf.org/doc/html/rfc8427\n */\nexport function dnsJsonOverHttps (url: string, init: DNSJSONOverHTTPSOptions = {}): DNSResolver {\n  const httpQueue = new PQueue({\n    concurrency: init.queryConcurrency ?? DEFAULT_QUERY_CONCURRENCY\n  })\n\n  return async (fqdn, options = {}) => {\n    const searchParams = new URLSearchParams()\n    searchParams.set('name', fqdn)\n\n    getTypes(options.types).forEach(type => {\n      // We pass record type as a string to the server because cloudflare DNS bug. see https://github.com/ipfs/helia/issues/474\n      searchParams.append('type', RecordType[type])\n    })\n\n    options.onProgress?.(new CustomProgressEvent<string>('dns:query', { detail: fqdn }))\n\n    // query DNS-JSON over HTTPS server\n    const response = await httpQueue.add(async () => {\n      const res = await fetch(`${url}?${searchParams}`, {\n        headers: {\n          accept: 'application/dns-json'\n        },\n        signal: options?.signal\n      })\n\n      if (res.status !== 200) {\n        throw new Error(`Unexpected HTTP status: ${res.status} - ${res.statusText}`)\n      }\n\n      const response = toDNSResponse(await res.json())\n\n      options.onProgress?.(new CustomProgressEvent<DNSResponse>('dns:response', { detail: response }))\n\n      return response\n    }, {\n      signal: options.signal\n    })\n\n    if (response == null) {\n      throw new Error('No DNS response received')\n    }\n\n    return response\n  }\n}\n", "import { dnsJsonOverHttps } from './dns-json-over-https.js'\nimport type { DNSResolver } from './index.js'\n\nexport function defaultResolver (): DNSResolver[] {\n  return [\n    dnsJsonOverHttps('https://cloudflare-dns.com/dns-query'),\n    dnsJsonOverHttps('https://dns.google/resolve')\n  ]\n}\n", "import hashlru from 'hashlru'\nimport { RecordType } from '../index.js'\nimport { DEFAULT_TTL, toDNSResponse } from './to-dns-response.js'\nimport type { Answer, DNSResponse } from '../index.js'\n\ninterface CachedAnswer {\n  expires: number\n  value: Answer\n}\n\nexport interface AnswerCache {\n  get (fqdn: string, types: RecordType[]): DNSResponse | undefined\n  add (domain: string, answer: Answer): void\n  remove (domain: string, type: ResponseType): void\n  clear (): void\n}\n\n/**\n * Time Aware Least Recent Used Cache\n *\n * @see https://arxiv.org/pdf/1801.00390\n */\nclass CachedAnswers {\n  private readonly lru: ReturnType<typeof hashlru>\n\n  constructor (maxSize: number) {\n    this.lru = hashlru(maxSize)\n  }\n\n  get (fqdn: string, types: RecordType[]): DNSResponse | undefined {\n    let foundAllAnswers = true\n    const answers: Answer[] = []\n\n    for (const type of types) {\n      const cached = this.getAnswers(fqdn, type)\n\n      if (cached.length === 0) {\n        foundAllAnswers = false\n        break\n      }\n\n      answers.push(...cached)\n    }\n\n    if (foundAllAnswers) {\n      return toDNSResponse({ answers })\n    }\n  }\n\n  private getAnswers (domain: string, type: RecordType): Answer[] {\n    const key = `${domain.toLowerCase()}-${type}`\n    const answers: CachedAnswer[] = this.lru.get(key)\n\n    if (answers != null) {\n      const cachedAnswers = answers\n        .filter((entry) => {\n          return entry.expires > Date.now()\n        })\n        .map(({ expires, value }) => ({\n          ...value,\n          TTL: Math.round((expires - Date.now()) / 1000),\n          type: RecordType[value.type]\n        }))\n\n      if (cachedAnswers.length === 0) {\n        this.lru.remove(key)\n      }\n\n      // @ts-expect-error hashlru stringifies stored types which turns enums\n      // into strings, we convert back into enums above but tsc doesn't know\n      return cachedAnswers\n    }\n\n    return []\n  }\n\n  add (domain: string, answer: Answer): void {\n    const key = `${domain.toLowerCase()}-${answer.type}`\n\n    const answers: CachedAnswer[] = this.lru.get(key) ?? []\n    answers.push({\n      expires: Date.now() + ((answer.TTL ?? DEFAULT_TTL) * 1000),\n      value: answer\n    })\n\n    this.lru.set(key, answers)\n  }\n\n  remove (domain: string, type: ResponseType): void {\n    const key = `${domain.toLowerCase()}-${type}`\n\n    this.lru.remove(key)\n  }\n\n  clear (): void {\n    this.lru.clear()\n  }\n}\n\n/**\n * Avoid sending multiple queries for the same hostname by caching results\n */\nexport function cache (size: number): AnswerCache {\n  return new CachedAnswers(size)\n}\n", "import { CustomProgressEvent } from 'progress-events'\nimport { defaultResolver } from './resolvers/default.js'\nimport { cache } from './utils/cache.js'\nimport { getTypes } from './utils/get-types.js'\nimport type { DNS as DNSInterface, DNSInit, DNSResponse, QueryOptions } from './index.js'\nimport type { DNSResolver } from './resolvers/index.js'\nimport type { AnswerCache } from './utils/cache.js'\n\nconst DEFAULT_ANSWER_CACHE_SIZE = 1000\n\nexport class DNS implements DNSInterface {\n  private readonly resolvers: Record<string, DNSResolver[]>\n  private readonly cache: AnswerCache\n\n  constructor (init: DNSInit) {\n    this.resolvers = {}\n    this.cache = cache(init.cacheSize ?? DEFAULT_ANSWER_CACHE_SIZE)\n\n    Object.entries(init.resolvers ?? {}).forEach(([tld, resolver]) => {\n      if (!Array.isArray(resolver)) {\n        resolver = [resolver]\n      }\n\n      // convert `com` -> `com.`\n      if (!tld.endsWith('.')) {\n        tld = `${tld}.`\n      }\n\n      this.resolvers[tld] = resolver\n    })\n\n    // configure default resolver if none specified\n    if (this.resolvers['.'] == null) {\n      this.resolvers['.'] = defaultResolver()\n    }\n  }\n\n  /**\n   * Queries DNS resolvers for the passed record types for the passed domain.\n   *\n   * If cached records exist for all desired types they will be returned\n   * instead.\n   *\n   * Any new responses will be added to the cache for subsequent requests.\n   */\n  async query (domain: string, options: QueryOptions = {}): Promise<DNSResponse> {\n    const types = getTypes(options.types)\n    const cached = options.cached !== false ? this.cache.get(domain, types) : undefined\n\n    if (cached != null) {\n      options.onProgress?.(new CustomProgressEvent<string>('dns:cache', { detail: cached }))\n\n      return cached\n    }\n\n    const tld = `${domain.split('.').pop()}.`\n    const resolvers = (this.resolvers[tld] ?? this.resolvers['.']).sort(() => {\n      return (Math.random() > 0.5) ? -1 : 1\n    })\n\n    const errors: Error[] = []\n\n    for (const resolver of resolvers) {\n      // skip further resolutions if the user aborted the signal\n      if (options.signal?.aborted === true) {\n        break\n      }\n\n      try {\n        const result = await resolver(domain, {\n          ...options,\n          types\n        })\n\n        for (const answer of result.Answer) {\n          this.cache.add(domain, answer)\n        }\n\n        return result\n      } catch (err: any) {\n        errors.push(err)\n        options.onProgress?.(new CustomProgressEvent<Error>('dns:error', { detail: err }))\n      }\n    }\n\n    if (errors.length === 1) {\n      throw errors[0]\n    }\n\n    throw new AggregateError(errors, `DNS lookup of ${domain} ${types} failed`)\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * Query DNS records using `node:dns`, DNS over HTTP and/or DNSJSON over HTTP.\n *\n * A list of publicly accessible servers can be found [here](https://github.com/curl/curl/wiki/DNS-over-HTTPS#publicly-available-servers).\n *\n * @example Using the default resolver\n *\n * ```TypeScript\n * import { dns } from '@multiformats/dns'\n *\n * const resolver = dns()\n *\n * // resolve A records with a 5s timeout\n * const result = await dns.query('google.com', {\n *   signal: AbortSignal.timeout(5000)\n * })\n * ```\n *\n * @example Using per-TLD resolvers\n *\n * ```TypeScript\n * import { dns } from '@multiformats/dns'\n * import { dnsJsonOverHttps } from '@multiformats/dns/resolvers'\n *\n * const resolver = dns({\n *   resolvers: {\n *     // will only be used to resolve `.com` addresses\n *     'com.': dnsJsonOverHttps('https://cloudflare-dns.com/dns-query'),\n *\n *     // this can also be an array, resolvers will be shuffled and tried in\n *     // series\n *     'net.': [\n *       dnsJsonOverHttps('https://dns.google/resolve'),\n *       dnsJsonOverHttps('https://dns.pub/dns-query')\n *     ],\n *\n *     // will only be used to resolve all other addresses\n *     '.': dnsJsonOverHttps('https://dnsforge.de/dns-query'),\n *   }\n * })\n * ```\n *\n * @example Query for specific record types\n *\n * ```TypeScript\n * import { dns, RecordType } from '@multiformats/dns'\n *\n * const resolver = dns()\n *\n * // resolve only TXT records\n * const result = await dns.query('google.com', {\n *   types: [\n *     RecordType.TXT\n *   ]\n * })\n * ```\n *\n * ## Caching\n *\n * Individual Aanswers are cached so. If you make a request, for which all\n * record types are cached, all values will be pulled from the cache.\n *\n * If any of the record types are not cached, a new request will be resolved as\n * if none of the records were cached, and the cache will be updated to include\n * the new results.\n *\n * @example Ignoring the cache\n *\n * ```TypeScript\n * import { dns, RecordType } from '@multiformats/dns'\n *\n * const resolver = dns()\n *\n * // do not used cached results, always resolve a new query\n * const result = await dns.query('google.com', {\n *   cached: false\n * })\n * ```\n */\n\nimport { DNS as DNSClass } from './dns.js'\nimport type { DNSResolver } from './resolvers/index.js'\nimport type { ProgressEvent, ProgressOptions } from 'progress-events'\n\n/**\n * A subset of DNS Record Types\n *\n * @see https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4.\n */\nexport enum RecordType {\n  A = 1,\n  CNAME = 5,\n  TXT = 16,\n  AAAA = 28\n}\n\nexport interface Question {\n  /**\n   * The record name requested.\n   */\n  name: string\n\n  /**\n   * The type of DNS record requested.\n   *\n   * @see https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4.\n   */\n  type: RecordType\n}\n\nexport interface Answer {\n  /**\n   * The record owner.\n   */\n  name: string\n\n  /**\n   * The type of DNS record.\n   *\n   * @see https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4\n   */\n  type: RecordType\n\n  /**\n   * The number of seconds the answer can be stored in cache before it is\n   * considered stale.\n   */\n  TTL: number\n\n  /**\n   * The value of the DNS record for the given name and type. The data will be\n   * in text for standardized record types and in hex for unknown types.\n   */\n  data: string\n}\n\nexport interface DNSResponse {\n  /**\n   * The Response Code of the DNS Query.\n   *\n   * @see https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6\n   */\n  Status: number\n\n  /**\n   * If true, it means the truncated bit was set. This happens when the DNS\n   * answer is larger than a single UDP or TCP packet.\n   */\n  TC: boolean\n\n  /**\n   * If true, it means the Recursive Desired bit was set.\n   */\n  RD: boolean\n\n  /**\n   * If true, it means the Recursion Available bit was set.\n   */\n  RA: boolean\n\n  /**\n   * If true, it means that every record in the answer was verified with DNSSEC.\n   */\n  AD: boolean\n\n  /**\n   * If true, the client asked to disable DNSSEC validation.\n   */\n  CD: boolean\n\n  /**\n   * The records that were requested.\n   */\n  Question: Question[]\n\n  /**\n   * Values for the records that were requested.\n   */\n  Answer: Answer[]\n}\n\n/**\n * The default maximum amount of recursion allowed during a query\n */\nexport const MAX_RECURSIVE_DEPTH = 32\n\nexport interface QueryOptions extends ProgressOptions<ResolveDnsProgressEvents> {\n  signal?: AbortSignal\n\n  /**\n   * Do not use cached DNS entries\n   *\n   * @default false\n   */\n  cached?: boolean\n\n  /**\n   * The type or types of DNS records to resolve\n   *\n   * @default [RecordType.A, RecordType.AAAA]\n   */\n  types?: RecordType | RecordType[]\n}\n\nexport interface DNS {\n  query(fqdn: string, options?: QueryOptions): Promise<DNSResponse>\n}\n\nexport type ResolveDnsProgressEvents =\n  ProgressEvent<'dns:cache', string> |\n  ProgressEvent<'dns:query', string> |\n  ProgressEvent<'dns:response', DNSResponse> |\n  ProgressEvent<'dns:error', Error>\n\nexport type DNSResolvers = Record<string, DNSResolver | DNSResolver[]>\n\nexport interface DNSInit {\n  /**\n   * A set of resolvers used to answer DNS queries\n   *\n   * String keys control which resolvers are used for which TLDs.\n   *\n   * @example\n   *\n   * ```TypeScript\n   * import { dns } from '@multiformats/dns'\n   * import { dnsOverHttps } from '@multiformats/dns'\n   *\n   * const resolver = dns({\n   *   resolvers: {\n   *     // only used for .com domains\n   *     'com.': dnsOverHttps('https://example-1.com'),\n   *\n   *     // only used for .net domains, can be an array\n   *     'net.': [\n   *       dnsOverHttps('https://example-2.com'),\n   *       dnsOverHttps('https://example-3.com'),\n   *     ],\n   *\n   *     // used for everything else (can be an array)\n   *     '.': dnsOverHttps('https://example-4.com')\n   *   }\n   * })\n   * ```\n   */\n  resolvers?: DNSResolvers\n\n  /**\n   * To avoid repeating DNS lookups, successful answers are cached according to\n   * their TTL. To avoid exhausting memory, this option controls how many\n   * answers to cache.\n   *\n   * @default 1000\n   */\n  cacheSize?: number\n}\n\nexport function dns (init: DNSInit = {}): DNS {\n  return new DNSClass(init)\n}\n", "/**\n * @packageDocumentation\n *\n * Race an event against an AbortSignal, taking care to remove any event\n * listeners that were added.\n *\n * @example Getting started\n *\n * ```TypeScript\n * import { raceEvent } from 'race-event'\n *\n * const controller = new AbortController()\n * const emitter = new EventTarget()\n *\n * setTimeout(() => {\n *   controller.abort()\n * }, 500)\n *\n * setTimeout(() => {\n *   // too late\n *   emitter.dispatchEvent(new CustomEvent('event'))\n * }, 1000)\n *\n * // throws an AbortError\n * const resolve = await raceEvent(emitter, 'event', controller.signal)\n * ```\n *\n * @example Aborting the promise with an error event\n *\n * ```TypeScript\n * import { raceEvent } from 'race-event'\n *\n * const emitter = new EventTarget()\n *\n * setTimeout(() => {\n *   emitter.dispatchEvent(new CustomEvent('failure', {\n *     detail: new Error('Oh no!')\n *   }))\n * }, 1000)\n *\n * // throws 'Oh no!' error\n * const resolve = await raceEvent(emitter, 'success', AbortSignal.timeout(5000), {\n *   errorEvent: 'failure'\n * })\n * ```\n *\n * @example Customising the thrown AbortError\n *\n * The error message and `.code` property of the thrown `AbortError` can be\n * specified by passing options:\n *\n * ```TypeScript\n * import { raceEvent } from 'race-event'\n *\n * const controller = new AbortController()\n * const emitter = new EventTarget()\n *\n * setTimeout(() => {\n *   controller.abort()\n * }, 500)\n *\n * // throws a Error: Oh no!\n * const resolve = await raceEvent(emitter, 'event', controller.signal, {\n *   errorMessage: 'Oh no!',\n *   errorCode: 'ERR_OH_NO'\n * })\n * ```\n *\n * @example Only resolving on specific events\n *\n * Where multiple events with the same type are emitted, a `filter` function can\n * be passed to only resolve on one of them:\n *\n * ```TypeScript\n * import { raceEvent } from 'race-event'\n *\n * const controller = new AbortController()\n * const emitter = new EventTarget()\n *\n * // throws a Error: Oh no!\n * const resolve = await raceEvent(emitter, 'event', controller.signal, {\n *   filter: (evt: Event) => {\n *     return evt.detail.foo === 'bar'\n *   }\n * })\n * ```\n *\n * @example Terminating early by throwing from the filter\n *\n * You can cause listening for the event to cease and all event listeners to be\n * removed by throwing from the filter:\n *\n * ```TypeScript\n * import { raceEvent } from 'race-event'\n *\n * const controller = new AbortController()\n * const emitter = new EventTarget()\n *\n * // throws Error: Cannot continue\n * const resolve = await raceEvent(emitter, 'event', controller.signal, {\n *   filter: (evt) => {\n *     if (...reasons) {\n *       throw new Error('Cannot continue')\n *     }\n *\n *     return true\n *   }\n * })\n * ```\n */\n\n/**\n * An abort error class that extends error\n */\nexport class AbortError extends Error {\n  public type: string\n  public code: string | string\n\n  constructor (message?: string, code?: string) {\n    super(message ?? 'The operation was aborted')\n    this.type = 'aborted'\n    this.name = 'AbortError'\n    this.code = code ?? 'ABORT_ERR'\n  }\n}\n\nexport interface RaceEventOptions<T> {\n  /**\n   * The message for the error thrown if the signal aborts\n   */\n  errorMessage?: string\n\n  /**\n   * The code for the error thrown if the signal aborts\n   */\n  errorCode?: string\n\n  /**\n   * The name of an event emitted on the emitter that should cause the returned\n   * promise to reject. The rejection reason will be the `.detail` field of the\n   * event.\n   */\n  errorEvent?: string\n\n  /**\n   * When multiple events with the same name may be emitted, pass a filter\n   * function here to allow ignoring ones that should not cause the returned\n   * promise to resolve.\n   */\n  filter?(evt: T): boolean\n}\n\n/**\n * Race a promise against an abort signal\n */\nexport async function raceEvent <T> (emitter: EventTarget, eventName: string, signal?: AbortSignal, opts?: RaceEventOptions<T>): Promise<T> {\n  // create the error here so we have more context in the stack trace\n  const error = new AbortError(opts?.errorMessage, opts?.errorCode)\n\n  if (signal?.aborted === true) {\n    return Promise.reject(error)\n  }\n\n  return new Promise((resolve, reject) => {\n    function removeListeners (): void {\n      signal?.removeEventListener('abort', abortListener)\n      emitter.removeEventListener(eventName, eventListener)\n\n      if (opts?.errorEvent != null) {\n        emitter.removeEventListener(opts.errorEvent, errorEventListener)\n      }\n    }\n\n    const eventListener = (evt: any): void => {\n      try {\n        if (opts?.filter?.(evt) === false) {\n          return\n        }\n      } catch (err: any) {\n        removeListeners()\n        reject(err)\n        return\n      }\n\n      removeListeners()\n      resolve(evt)\n    }\n\n    const errorEventListener = (evt: any): void => {\n      removeListeners()\n      reject(evt.detail)\n    }\n\n    const abortListener = (): void => {\n      removeListeners()\n      reject(error)\n    }\n\n    signal?.addEventListener('abort', abortListener)\n    emitter.addEventListener(eventName, eventListener)\n\n    if (opts?.errorEvent != null) {\n      emitter.addEventListener(opts.errorEvent, errorEventListener)\n    }\n  })\n}\n", "import type { Startable } from '@libp2p/interface'\n\nexport interface DebouncedFunction extends Startable {\n  (): void\n}\n\n/**\n * Returns a function wrapper that will only call the passed function once\n *\n * Important - the passed function should not throw or reject\n */\nexport function debounce (func: () => void | Promise<void>, wait: number): DebouncedFunction {\n  let timeout: ReturnType<typeof setTimeout> | undefined\n\n  const output = function (): void {\n    const later = function (): void {\n      timeout = undefined\n      void func()\n    }\n\n    clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n  }\n  output.start = (): void => {}\n  output.stop = (): void => {\n    clearTimeout(timeout)\n  }\n\n  return output\n}\n", "import type { RateLimiterResult } from './rate-limiter.js'\n\n/**\n * A rate limit was hit\n */\nexport class RateLimitError extends Error {\n  remainingPoints: number\n  msBeforeNext: number\n  consumedPoints: number\n  isFirstInDuration: boolean\n\n  constructor (message = 'Rate limit exceeded', props: RateLimiterResult) {\n    super(message)\n    this.name = 'RateLimitError'\n    this.remainingPoints = props.remainingPoints\n    this.msBeforeNext = props.msBeforeNext\n    this.consumedPoints = props.consumedPoints\n    this.isFirstInDuration = props.isFirstInDuration\n  }\n}\n\nexport class QueueFullError extends Error {\n  static name = 'QueueFullError'\n\n  constructor (message: string = 'The queue was full') {\n    super(message)\n    this.name = 'QueueFullError'\n  }\n}\n", "import { AbortError } from '@libp2p/interface'\nimport pDefer from 'p-defer'\nimport type { DeferredPromise } from 'p-defer'\n\nexport class JobRecipient<JobReturnType> {\n  public deferred: DeferredPromise<JobReturnType>\n  public signal?: AbortSignal\n\n  constructor (signal?: AbortSignal) {\n    this.signal = signal\n    this.deferred = pDefer()\n\n    this.onAbort = this.onAbort.bind(this)\n    this.signal?.addEventListener('abort', this.onAbort)\n  }\n\n  onAbort (): void {\n    this.deferred.reject(this.signal?.reason ?? new AbortError())\n  }\n\n  cleanup (): void {\n    this.signal?.removeEventListener('abort', this.onAbort)\n  }\n}\n", "import { AbortError } from '@libp2p/interface'\nimport { setMaxListeners } from 'main-event'\nimport { raceSignal } from 'race-signal'\nimport { JobRecipient } from './recipient.js'\nimport type { JobStatus } from './index.js'\nimport type { AbortOptions } from '@libp2p/interface'\n\n/**\n * Returns a random string\n */\nfunction randomId (): string {\n  return `${(parseInt(String(Math.random() * 1e9), 10)).toString()}${Date.now()}`\n}\n\nexport interface JobTimeline {\n  created: number\n  started?: number\n  finished?: number\n}\n\nexport class Job <JobOptions extends AbortOptions = AbortOptions, JobReturnType = unknown> {\n  public id: string\n  public fn: (options: JobOptions) => Promise<JobReturnType>\n  public options: JobOptions\n  public recipients: Array<JobRecipient<JobReturnType>>\n  public status: JobStatus\n  public readonly timeline: JobTimeline\n  private readonly controller: AbortController\n\n  constructor (fn: (options: JobOptions) => Promise<JobReturnType>, options: any) {\n    this.id = randomId()\n    this.status = 'queued'\n    this.fn = fn\n    this.options = options\n    this.recipients = []\n    this.timeline = {\n      created: Date.now()\n    }\n\n    this.controller = new AbortController()\n    setMaxListeners(Infinity, this.controller.signal)\n\n    this.onAbort = this.onAbort.bind(this)\n  }\n\n  abort (err: Error): void {\n    this.controller.abort(err)\n  }\n\n  onAbort (): void {\n    const allAborted = this.recipients.reduce((acc, curr) => {\n      return acc && (curr.signal?.aborted === true)\n    }, true)\n\n    // if all recipients have aborted the job, actually abort the job\n    if (allAborted) {\n      this.controller.abort(new AbortError())\n      this.cleanup()\n    }\n  }\n\n  async join (options: AbortOptions = {}): Promise<JobReturnType> {\n    const recipient = new JobRecipient<JobReturnType>(options.signal)\n    this.recipients.push(recipient)\n\n    options.signal?.addEventListener('abort', this.onAbort)\n\n    return recipient.deferred.promise\n  }\n\n  async run (): Promise<void> {\n    this.status = 'running'\n    this.timeline.started = Date.now()\n\n    try {\n      this.controller.signal.throwIfAborted()\n\n      const result = await raceSignal(this.fn({\n        ...(this.options ?? {}),\n        signal: this.controller.signal\n      }), this.controller.signal)\n\n      this.recipients.forEach(recipient => {\n        recipient.deferred.resolve(result)\n      })\n\n      this.status = 'complete'\n    } catch (err) {\n      this.recipients.forEach(recipient => {\n        recipient.deferred.reject(err)\n      })\n\n      this.status = 'errored'\n    } finally {\n      this.timeline.finished = Date.now()\n      this.cleanup()\n    }\n  }\n\n  cleanup (): void {\n    this.recipients.forEach(recipient => {\n      recipient.cleanup()\n      recipient.signal?.removeEventListener('abort', this.onAbort)\n    })\n  }\n}\n", "import { AbortError } from '@libp2p/interface'\nimport { pushable } from 'it-pushable'\nimport { TypedEventEmitter } from 'main-event'\nimport { raceEvent } from 'race-event'\nimport { debounce } from '../debounce.js'\nimport { QueueFullError } from '../errors.js'\nimport { Job } from './job.js'\nimport type { AbortOptions, Metrics } from '@libp2p/interface'\n\nexport type { Job, JobTimeline } from './job.js'\nexport type { JobRecipient } from './recipient.js'\n\nexport interface Comparator<T> {\n  (a: T, b: T): -1 | 0 | 1\n}\n\nexport interface QueueInit<JobReturnType, JobOptions extends AbortOptions = AbortOptions> {\n  /**\n   * Concurrency limit.\n   *\n   * Minimum: `1`.\n   *\n   * @default Infinity\n   */\n  concurrency?: number\n\n  /**\n   * If the queue size grows to larger than this number the promise returned\n   * from the add function will reject\n   *\n   * @default Infinity\n   */\n  maxSize?: number\n\n  /**\n   * The name of the metric for the queue length\n   */\n  metricName?: string\n\n  /**\n   * An implementation of the libp2p Metrics interface\n   */\n  metrics?: Metrics\n\n  /**\n   * An optional function that will sort the queue after a job has been added\n   */\n  sort?: Comparator<Job<JobOptions, JobReturnType>>\n}\n\nexport type JobStatus = 'queued' | 'running' | 'errored' | 'complete'\n\nexport interface RunFunction<Options extends AbortOptions = AbortOptions, ReturnType = void> {\n  (options: Options): Promise<ReturnType>\n}\n\nexport interface JobMatcher<JobOptions extends AbortOptions = AbortOptions> {\n  (options?: Partial<JobOptions>): boolean\n}\n\nexport interface QueueJobSuccess<JobReturnType, JobOptions extends AbortOptions = AbortOptions> {\n  job: Job<JobOptions, JobReturnType>\n  result: JobReturnType\n}\n\nexport interface QueueJobFailure<JobReturnType, JobOptions extends AbortOptions = AbortOptions> {\n  job: Job<JobOptions, JobReturnType>\n  error: Error\n}\n\nexport interface QueueEvents<JobReturnType, JobOptions extends AbortOptions = AbortOptions> {\n  /**\n   * A job is about to start running\n   */\n  active: CustomEvent\n\n  /**\n   * All jobs have finished and the queue is empty\n   */\n  idle: CustomEvent\n\n  /**\n   * The queue is empty, jobs may be running\n   */\n  empty: CustomEvent\n\n  /**\n   * A job was added to the queue\n   */\n  add: CustomEvent\n\n  /**\n   * A job has finished or failed\n   */\n  next: CustomEvent\n\n  /**\n   * A job has finished successfully\n   */\n  completed: CustomEvent<JobReturnType>\n\n  /**\n   * A job has failed\n   */\n  error: CustomEvent<Error>\n\n  /**\n   * Emitted just after `\"completed\", a job has finished successfully - this\n   * event gives access to the job and it's result\n   */\n  success: CustomEvent<QueueJobSuccess<JobReturnType, JobOptions>>\n\n  /**\n   * Emitted just after `\"error\", a job has failed - this event gives access to\n   * the job and the thrown error\n   */\n  failure: CustomEvent<QueueJobFailure<JobReturnType, JobOptions>>\n}\n\n/**\n * Heavily influence by `p-queue` with the following differences:\n *\n * 1. Items remain at the head of the queue while they are running so `queue.size` includes `queue.pending` items - this is so interested parties can join the results of a queue item while it is running\n * 2. The options for a job are stored separately to the job in order for them to be modified while they are still in the queue\n */\nexport class Queue<JobReturnType = unknown, JobOptions extends AbortOptions = AbortOptions> extends TypedEventEmitter<QueueEvents<JobReturnType, JobOptions>> {\n  public concurrency: number\n  public maxSize: number\n  public queue: Array<Job<JobOptions, JobReturnType>>\n  private pending: number\n  private readonly sort?: Comparator<Job<JobOptions, JobReturnType>>\n\n  constructor (init: QueueInit<JobReturnType, JobOptions> = {}) {\n    super()\n\n    this.concurrency = init.concurrency ?? Number.POSITIVE_INFINITY\n    this.maxSize = init.maxSize ?? Number.POSITIVE_INFINITY\n    this.pending = 0\n\n    if (init.metricName != null) {\n      init.metrics?.registerMetricGroup(init.metricName, {\n        calculate: () => {\n          return {\n            size: this.queue.length,\n            running: this.pending,\n            queued: this.queue.length - this.pending\n          }\n        }\n      })\n    }\n\n    this.sort = init.sort\n    this.queue = []\n\n    this.emitEmpty = debounce(this.emitEmpty.bind(this), 1)\n    this.emitIdle = debounce(this.emitIdle.bind(this), 1)\n  }\n\n  emitEmpty (): void {\n    if (this.size !== 0) {\n      return\n    }\n\n    this.safeDispatchEvent('empty')\n  }\n\n  emitIdle (): void {\n    if (this.running !== 0) {\n      return\n    }\n\n    this.safeDispatchEvent('idle')\n  }\n\n  private tryToStartAnother (): boolean {\n    if (this.size === 0) {\n      this.emitEmpty()\n\n      if (this.running === 0) {\n        this.emitIdle()\n      }\n\n      return false\n    }\n\n    if (this.pending < this.concurrency) {\n      let job: Job<JobOptions, JobReturnType> | undefined\n\n      for (const j of this.queue) {\n        if (j.status === 'queued') {\n          job = j\n          break\n        }\n      }\n\n      if (job == null) {\n        return false\n      }\n\n      this.safeDispatchEvent('active')\n\n      this.pending++\n\n      void job.run()\n        .finally(() => {\n          // remove the job from the queue\n          for (let i = 0; i < this.queue.length; i++) {\n            if (this.queue[i] === job) {\n              this.queue.splice(i, 1)\n              break\n            }\n          }\n\n          this.pending--\n          this.tryToStartAnother()\n          this.safeDispatchEvent('next')\n        })\n\n      return true\n    }\n\n    return false\n  }\n\n  private enqueue (job: Job<JobOptions, JobReturnType>): void {\n    this.queue.push(job)\n\n    if (this.sort != null) {\n      this.queue.sort(this.sort)\n    }\n  }\n\n  /**\n   * Adds a sync or async task to the queue. Always returns a promise.\n   */\n  async add (fn: RunFunction<JobOptions, JobReturnType>, options?: JobOptions): Promise<JobReturnType> {\n    options?.signal?.throwIfAborted()\n\n    if (this.size === this.maxSize) {\n      throw new QueueFullError()\n    }\n\n    const job = new Job<JobOptions, JobReturnType>(fn, options)\n    this.enqueue(job)\n    this.safeDispatchEvent('add')\n    this.tryToStartAnother()\n\n    return job.join(options)\n      .then(result => {\n        this.safeDispatchEvent('completed', { detail: result })\n        this.safeDispatchEvent('success', { detail: { job, result } })\n\n        return result\n      })\n      .catch(err => {\n        if (job.status === 'queued') {\n          // job was aborted before it started - remove the job from the queue\n          for (let i = 0; i < this.queue.length; i++) {\n            if (this.queue[i] === job) {\n              this.queue.splice(i, 1)\n              break\n            }\n          }\n        }\n\n        this.safeDispatchEvent('error', { detail: err })\n        this.safeDispatchEvent('failure', { detail: { job, error: err } })\n\n        throw err\n      })\n  }\n\n  /**\n   * Clear the queue\n   */\n  clear (): void {\n    this.queue.splice(0, this.queue.length)\n  }\n\n  /**\n   * Abort all jobs in the queue and clear it\n   */\n  abort (): void {\n    this.queue.forEach(job => {\n      job.abort(new AbortError())\n    })\n\n    this.clear()\n  }\n\n  /**\n   * Can be called multiple times. Useful if you for example add additional items at a later time.\n   *\n   * @returns A promise that settles when the queue becomes empty.\n   */\n  async onEmpty (options?: AbortOptions): Promise<void> {\n    // Instantly resolve if the queue is empty\n    if (this.size === 0) {\n      return\n    }\n\n    await raceEvent(this, 'empty', options?.signal)\n  }\n\n  /**\n   * @returns A promise that settles when the queue size is less than the given\n   * limit: `queue.size < limit`.\n   *\n   * If you want to avoid having the queue grow beyond a certain size you can\n   * `await queue.onSizeLessThan()` before adding a new item.\n   *\n   * Note that this only limits the number of items waiting to start. There\n   * could still be up to `concurrency` jobs already running that this call does\n   * not include in its calculation.\n   */\n  async onSizeLessThan (limit: number, options?: AbortOptions): Promise<void> {\n    // Instantly resolve if the queue is empty.\n    if (this.size < limit) {\n      return\n    }\n\n    await raceEvent(this, 'next', options?.signal, {\n      filter: () => this.size < limit\n    })\n  }\n\n  /**\n   * The difference with `.onEmpty` is that `.onIdle` guarantees that all work\n   * from the queue has finished. `.onEmpty` merely signals that the queue is\n   * empty, but it could mean that some promises haven't completed yet.\n   *\n   * @returns A promise that settles when the queue becomes empty, and all\n   * promises have completed; `queue.size === 0 && queue.pending === 0`.\n   */\n  async onIdle (options?: AbortOptions): Promise<void> {\n    // Instantly resolve if none pending and if nothing else is queued\n    if (this.pending === 0 && this.size === 0) {\n      return\n    }\n\n    await raceEvent(this, 'idle', options?.signal)\n  }\n\n  /**\n   * Size of the queue including running items\n   */\n  get size (): number {\n    return this.queue.length\n  }\n\n  /**\n   * The number of queued items waiting to run.\n   */\n  get queued (): number {\n    return this.queue.length - this.pending\n  }\n\n  /**\n   * The number of items currently running.\n   */\n  get running (): number {\n    return this.pending\n  }\n\n  /**\n   * Returns an async generator that makes it easy to iterate over the results\n   * of jobs added to the queue.\n   *\n   * The generator will end when the queue becomes idle, that is there are no\n   * jobs running and no jobs that have yet to run.\n   *\n   * If you need to keep the queue open indefinitely, consider using it-pushable\n   * instead.\n   */\n  async * toGenerator (options?: AbortOptions): AsyncGenerator<JobReturnType, void, unknown> {\n    options?.signal?.throwIfAborted()\n\n    const stream = pushable<JobReturnType>({\n      objectMode: true\n    })\n\n    const cleanup = (err?: Error): void => {\n      if (err != null) {\n        this.abort()\n      } else {\n        this.clear()\n      }\n\n      stream.end(err)\n    }\n\n    const onQueueJobComplete = (evt: CustomEvent<JobReturnType>): void => {\n      if (evt.detail != null) {\n        stream.push(evt.detail)\n      }\n    }\n\n    const onQueueError = (evt: CustomEvent<Error>): void => {\n      cleanup(evt.detail)\n    }\n\n    const onQueueIdle = (): void => {\n      cleanup()\n    }\n\n    // clear the queue and throw if the query is aborted\n    const onSignalAbort = (): void => {\n      cleanup(new AbortError('Queue aborted'))\n    }\n\n    // add listeners\n    this.addEventListener('completed', onQueueJobComplete)\n    this.addEventListener('error', onQueueError)\n    this.addEventListener('idle', onQueueIdle)\n    options?.signal?.addEventListener('abort', onSignalAbort)\n\n    try {\n      yield * stream\n    } finally {\n      // remove listeners\n      this.removeEventListener('completed', onQueueJobComplete)\n      this.removeEventListener('error', onQueueError)\n      this.removeEventListener('idle', onQueueIdle)\n      options?.signal?.removeEventListener('abort', onSignalAbort)\n\n      // empty the queue for when the user has broken out of a loop early\n      cleanup()\n    }\n  }\n}\n", "export const empty = new Uint8Array(0)\n\nexport function toHex (d: Uint8Array): string {\n  return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n}\n\nexport function fromHex (hex: string): Uint8Array {\n  const hexes = hex.match(/../g)\n  return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\nexport function equals (aa: Uint8Array, bb: Uint8Array): boolean {\n  if (aa === bb) { return true }\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function coerce (o: ArrayBufferView | ArrayBuffer | Uint8Array): Uint8Array {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') { return o }\n  if (o instanceof ArrayBuffer) { return new Uint8Array(o) }\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\nexport function isBinary (o: unknown): o is ArrayBuffer | ArrayBufferView {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n}\n\nexport function fromString (str: string): Uint8Array {\n  return new TextEncoder().encode(str)\n}\n\nexport function toString (b: Uint8Array): string {\n  return new TextDecoder().decode(b)\n}\n", "/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  /**\n   * @param {any[] | Iterable<number>} source\n   */\n  function encode (source) {\n    // @ts-ignore\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  /**\n   * @param {string | string[]} source\n   */\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  /**\n   * @param {string | string[]} string\n   */\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n", "import { coerce } from '../bytes.js'\nimport basex from '../vendor/base-x.js'\nimport type { BaseCodec, BaseDecoder, BaseEncoder, CombobaseDecoder, Multibase, MultibaseCodec, MultibaseDecoder, MultibaseEncoder, UnibaseDecoder } from './interface.js'\n\ninterface EncodeFn { (bytes: Uint8Array): string }\ninterface DecodeFn { (text: string): Uint8Array }\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder<Base extends string, Prefix extends string> implements MultibaseEncoder<Prefix>, BaseEncoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  encode (bytes: Uint8Array): Multibase<Prefix> {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder<Base extends string, Prefix extends string> implements MultibaseDecoder<Prefix>, UnibaseDecoder<Prefix>, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseDecode: DecodeFn\n  private readonly prefixCodePoint: number\n\n  constructor (name: Base, prefix: Prefix, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    const prefixCodePoint = prefix.codePointAt(0)\n    /* c8 ignore next 3 */\n    if (prefixCodePoint === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    this.prefixCodePoint = prefixCodePoint\n    this.baseDecode = baseDecode\n  }\n\n  decode (text: string): Uint8Array {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  or<OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n}\n\ntype Decoders<Prefix extends string> = Record<Prefix, UnibaseDecoder<Prefix>>\n\nclass ComposedDecoder<Prefix extends string> implements MultibaseDecoder<Prefix>, CombobaseDecoder<Prefix> {\n  readonly decoders: Decoders<Prefix>\n\n  constructor (decoders: Decoders<Prefix>) {\n    this.decoders = decoders\n  }\n\n  or <OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n\n  decode (input: string): Uint8Array {\n    const prefix = input[0] as Prefix\n    const decoder = this.decoders[prefix]\n    if (decoder != null) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\nexport function or <L extends string, R extends string> (left: UnibaseDecoder<L> | CombobaseDecoder<L>, right: UnibaseDecoder<R> | CombobaseDecoder<R>): ComposedDecoder<L | R> {\n  return new ComposedDecoder({\n    ...(left.decoders ?? { [(left as UnibaseDecoder<L>).prefix]: left }),\n    ...(right.decoders ?? { [(right as UnibaseDecoder<R>).prefix]: right })\n  } as Decoders<L | R>)\n}\n\nexport class Codec<Base extends string, Prefix extends string> implements MultibaseCodec<Prefix>, MultibaseEncoder<Prefix>, MultibaseDecoder<Prefix>, BaseCodec, BaseEncoder, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n  readonly baseDecode: DecodeFn\n  readonly encoder: Encoder<Base, Prefix>\n  readonly decoder: Decoder<Base, Prefix>\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  encode (input: Uint8Array): string {\n    return this.encoder.encode(input)\n  }\n\n  decode (input: string): Uint8Array {\n    return this.decoder.decode(input)\n  }\n}\n\nexport function from <Base extends string, Prefix extends string> ({ name, prefix, encode, decode }: { name: Base, prefix: Prefix, encode: EncodeFn, decode: DecodeFn }): Codec<Base, Prefix> {\n  return new Codec(name, prefix, encode, decode)\n}\n\nexport function baseX <Base extends string, Prefix extends string> ({ name, prefix, alphabet }: { name: Base, prefix: Prefix, alphabet: string }): Codec<Base, Prefix> {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: (text: string): Uint8Array => coerce(decode(text))\n  })\n}\n\nfunction decode (string: string, alphabetIdx: Record<string, number>, bitsPerChar: number, name: string): Uint8Array {\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = alphabetIdx[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\nfunction encode (data: Uint8Array, alphabet: string, bitsPerChar: number): string {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits !== 0) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (((out.length * bitsPerChar) & 7) !== 0) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\nfunction createAlphabetIdx (alphabet: string): Record<string, number> {\n  // Build the character lookup table:\n  const alphabetIdx: Record<string, number> = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    alphabetIdx[alphabet[i]] = i\n  }\n  return alphabetIdx\n}\n\n/**\n * RFC4648 Factory\n */\nexport function rfc4648 <Base extends string, Prefix extends string> ({ name, prefix, bitsPerChar, alphabet }: { name: Base, prefix: Prefix, bitsPerChar: number, alphabet: string }): Codec<Base, Prefix> {\n  const alphabetIdx = createAlphabetIdx(alphabet)\n  return from({\n    prefix,\n    name,\n    encode (input: Uint8Array): string {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input: string): Uint8Array {\n      return decode(input, alphabetIdx, bitsPerChar, name)\n    }\n  })\n}\n", "import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n", "import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n", "import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n", "/* eslint-disable */\nvar encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  // @ts-ignore\n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      // @ts-ignore\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  // @ts-ignore\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (/** @type {number} */ value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n", "import varint from './vendor/varint.js'\n\nexport function decode (data: Uint8Array, offset = 0): [number, number] {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\nexport function encodeTo (int: number, target: Uint8Array, offset = 0): Uint8Array {\n  varint.encode(int, target, offset)\n  return target\n}\n\nexport function encodingLength (int: number): number {\n  return varint.encodingLength(int)\n}\n", "import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\nimport type { MultihashDigest } from './interface.js'\n\n/**\n * Creates a multihash digest.\n */\nexport function create <Code extends number> (code: Code, digest: Uint8Array): Digest<Code, number> {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode (multihash: Uint8Array): MultihashDigest {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\nexport function equals (a: MultihashDigest, b: unknown): b is MultihashDigest {\n  if (a === b) {\n    return true\n  } else {\n    const data = b as { code?: unknown, size?: unknown, bytes?: unknown }\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest<Code extends number, Size extends number> implements MultihashDigest {\n  readonly code: Code\n  readonly size: Size\n  readonly digest: Uint8Array\n  readonly bytes: Uint8Array\n\n  /**\n   * Creates a multihash digest.\n   */\n  constructor (code: Code, size: Size, digest: Uint8Array, bytes: Uint8Array) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n\n/**\n * Used to check that the passed multihash has the passed code\n */\nexport function hasCode <T extends number> (digest: MultihashDigest, code: T): digest is MultihashDigest<T> {\n  return digest.code === code\n}\n", "import { base32 } from './bases/base32.js'\nimport { base36 } from './bases/base36.js'\nimport { base58btc } from './bases/base58.js'\nimport { coerce } from './bytes.js'\nimport * as Digest from './hashes/digest.js'\nimport * as varint from './varint.js'\nimport type * as API from './link/interface.js'\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\nexport function format <T extends API.Link<unknown, number, number, API.Version>, Prefix extends string> (link: T, base?: API.MultibaseEncoder<Prefix>): API.ToString<T, Prefix> {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        base as API.MultibaseEncoder<'z'> ?? base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        (base ?? base32.encoder) as API.MultibaseEncoder<Prefix>\n      )\n  }\n}\n\nexport function toJSON <Link extends API.UnknownLink> (link: Link): API.LinkJSON<Link> {\n  return {\n    '/': format(link)\n  }\n}\n\nexport function fromJSON <Link extends API.UnknownLink> (json: API.LinkJSON<Link>): CID<unknown, number, number, API.Version> {\n  return CID.parse(json['/'])\n}\n\nconst cache = new WeakMap<API.UnknownLink, Map<string, string>>()\n\nfunction baseCache (cid: API.UnknownLink): Map<string, string> {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\nexport class CID<Data = unknown, Format extends number = number, Alg extends number = number, Version extends API.Version = API.Version> implements API.Link<Data, Format, Alg, Version> {\n  readonly code: Format\n  readonly version: Version\n  readonly multihash: API.MultihashDigest<Alg>\n  readonly bytes: Uint8Array\n  readonly '/': Uint8Array\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param multihash - (Multi)hash of the of the content.\n   */\n  constructor (version: Version, code: Format, multihash: API.MultihashDigest<Alg>, bytes: Uint8Array) {\n    this.code = code\n    this.version = version\n    this.multihash = multihash\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID (): this {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset (): number {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength (): number {\n    return this.bytes.byteLength\n  }\n\n  toV0 (): CID<Data, API.DAG_PB, API.SHA_256, 0> {\n    switch (this.version) {\n      case 0: {\n        return this as CID<Data, API.DAG_PB, API.SHA_256, 0>\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return (\n          CID.createV0(\n            multihash as API.MultihashDigest<API.SHA_256>\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  toV1 (): CID<Data, Format, Alg, 1> {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return this as CID<Data, Format, Alg, 1>\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  equals (other: unknown): other is CID<Data, Format, Alg, Version> {\n    return CID.equals(this, other)\n  }\n\n  static equals <Data, Format extends number, Alg extends number, Version extends API.Version>(self: API.Link<Data, Format, Alg, Version>, other: unknown): other is CID {\n    const unknown = other as { code?: unknown, version?: unknown, multihash?: unknown }\n    return (\n      unknown != null &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  toString (base?: API.MultibaseEncoder<string>): string {\n    return format(this, base)\n  }\n\n  toJSON (): API.LinkJSON<this> {\n    return { '/': format(this) }\n  }\n\n  link (): this {\n    return this\n  }\n\n  readonly [Symbol.toStringTag] = 'CID';\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] (): string {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   */\n  static asCID <Data, Format extends number, Alg extends number, Version extends API.Version, U>(input: API.Link<Data, Format, Alg, Version> | U): CID<Data, Format, Alg, Version> | null {\n    if (input == null) {\n      return null\n    }\n\n    const value = input as any\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        multihash as API.MultihashDigest<Alg>,\n        bytes ?? encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest = Digest.decode(multihash) as API.MultihashDigest<Alg>\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param digest - (Multi)hash of the of the content.\n   */\n  static create <Data, Format extends number, Alg extends number, Version extends API.Version>(version: Version, code: Format, digest: API.MultihashDigest<Alg>): CID<Data, Format, Alg, Version> {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   */\n  static createV0 <T = unknown>(digest: API.MultihashDigest<typeof SHA_256_CODE>): CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0> {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @param code - Content encoding format code.\n   * @param digest - Multihash of the content.\n   */\n  static createV1 <Data, Code extends number, Alg extends number>(code: Code, digest: API.MultihashDigest<Alg>): CID<Data, Code, Alg, 1> {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   */\n  static decode <Data, Code extends number, Alg extends number, Version extends API.Version>(bytes: API.ByteView<API.Link<Data, Code, Alg, Version>>): CID<Data, Code, Alg, Version> {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length !== 0) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   */\n  static decodeFirst <T, C extends number, A extends number, V extends API.Version>(bytes: API.ByteView<API.Link<T, C, A, V>>): [CID<T, C, A, V>, Uint8Array] {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(digest as API.MultihashDigest<API.SHA_256>)\n        : CID.createV1(specs.codec, digest)\n    return [cid as CID<T, C, A, V>, bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   */\n  static inspectBytes <T, C extends number, A extends number, V extends API.Version>(initialBytes: API.ByteView<API.Link<T, C, A, V>>): { version: V, codec: C, multihashCode: A, digestSize: number, multihashSize: number, size: number } {\n    let offset = 0\n    const next = (): number => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = next() as V\n    let codec = DAG_PB_CODE as C\n    if (version as number === 18) {\n      // CIDv0\n      version = 0 as V\n      offset = 0\n    } else {\n      codec = next() as C\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = next() as A // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   */\n  static parse <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version>(source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): CID<Data, Code, Alg, Version> {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\nfunction parseCIDtoBytes <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version> (source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): [Prefix, API.ByteView<API.Link<Data, Code, Alg, Version>>] {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base ?? base58btc\n      return [\n        base58btc.prefix as Prefix,\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base ?? base58btc\n      return [base58btc.prefix as Prefix, decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base ?? base32\n      return [base32.prefix as Prefix, decoder.decode(source)]\n    }\n    case base36.prefix: {\n      const decoder = base ?? base36\n      return [base36.prefix as Prefix, decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [source[0] as Prefix, base.decode(source)]\n    }\n  }\n}\n\nfunction toStringV0 (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<'z'>): string {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nfunction toStringV1 <Prefix extends string> (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<Prefix>): string {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\nfunction encodeCID (version: API.Version, code: number, multihash: Uint8Array): Uint8Array {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n", "import * as Digest from './digest.js'\nimport type { MultihashHasher } from './interface.js'\n\ntype Await<T> = Promise<T> | T\n\nexport function from <Name extends string, Code extends number> ({ name, code, encode }: { name: Name, code: Code, encode(input: Uint8Array): Await<Uint8Array> }): Hasher<Name, Code> {\n  return new Hasher(name, code, encode)\n}\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n */\nexport class Hasher<Name extends string, Code extends number> implements MultihashHasher<Code> {\n  readonly name: Name\n  readonly code: Code\n  readonly encode: (input: Uint8Array) => Await<Uint8Array>\n\n  constructor (name: Name, code: Code, encode: (input: Uint8Array) => Await<Uint8Array>) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  digest (input: Uint8Array): Await<Digest.Digest<Code, number>> {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n", "import { bytes as binary, CID } from './index.js'\nimport type * as API from './interface.js'\n\nfunction readonly ({ enumerable = true, configurable = false } = {}): { enumerable: boolean, configurable: boolean, writable: false } {\n  return { enumerable, configurable, writable: false }\n}\n\nfunction * linksWithin (path: [string | number, string], value: any): Iterable<[string, CID]> {\n  if (value != null && typeof value === 'object') {\n    if (Array.isArray(value)) {\n      for (const [index, element] of value.entries()) {\n        const elementPath = [...path, index]\n        const cid = CID.asCID(element)\n        if (cid != null) {\n          yield [elementPath.join('/'), cid]\n        } else if (typeof element === 'object') {\n          yield * links(element, elementPath)\n        }\n      }\n    } else {\n      const cid = CID.asCID(value)\n      if (cid != null) {\n        yield [path.join('/'), cid]\n      } else {\n        yield * links(value, path)\n      }\n    }\n  }\n}\n\nfunction * links <T> (source: T, base: Array<string | number>): Iterable<[string, CID]> {\n  if (source == null || source instanceof Uint8Array) {\n    return\n  }\n  const cid = CID.asCID(source)\n  if (cid != null) {\n    yield [base.join('/'), cid]\n  }\n  for (const [key, value] of Object.entries(source)) {\n    const path = [...base, key] as [string | number, string]\n    yield * linksWithin(path, value)\n  }\n}\n\nfunction * treeWithin (path: [string | number, string], value: any): Iterable<string> {\n  if (Array.isArray(value)) {\n    for (const [index, element] of value.entries()) {\n      const elementPath = [...path, index]\n      yield elementPath.join('/')\n      if (typeof element === 'object' && (CID.asCID(element) == null)) {\n        yield * tree(element, elementPath)\n      }\n    }\n  } else {\n    yield * tree(value, path)\n  }\n}\n\nfunction * tree <T> (source: T, base: Array<string | number>): Iterable<string> {\n  if (source == null || typeof source !== 'object') {\n    return\n  }\n  for (const [key, value] of Object.entries(source)) {\n    const path = [...base, key] as [string | number, string]\n    yield path.join('/')\n    if (value != null && !(value instanceof Uint8Array) && typeof value === 'object' && (CID.asCID(value) == null)) {\n      yield * treeWithin(path, value)\n    }\n  }\n}\n\nfunction get <T> (source: T, path: string[]): API.BlockCursorView<unknown> {\n  let node = source as Record<string, any>\n  for (const [index, key] of path.entries()) {\n    node = node[key]\n    if (node == null) {\n      throw new Error(`Object has no property at ${path.slice(0, index + 1).map(part => `[${JSON.stringify(part)}]`).join('')}`)\n    }\n    const cid = CID.asCID(node)\n    if (cid != null) {\n      return { value: cid, remaining: path.slice(index + 1).join('/') }\n    }\n  }\n  return { value: node }\n}\n\n/**\n * @template T - Logical type of the data encoded in the block\n * @template C - multicodec code corresponding to codec used to encode the block\n * @template A - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template V - CID version\n */\nexport class Block<T, C extends number, A extends number, V extends API.Version> implements API.BlockView<T, C, A, V> {\n  readonly cid: CID<T, C, A, V>\n  readonly bytes: API.ByteView<T>\n  readonly value: T\n  readonly asBlock: this\n\n  constructor ({ cid, bytes, value }: { cid: CID<T, C, A, V>, bytes: API.ByteView<T>, value: T }) {\n    if (cid == null || bytes == null || typeof value === 'undefined') { throw new Error('Missing required argument') }\n\n    this.cid = cid\n    this.bytes = bytes\n    this.value = value\n    this.asBlock = this\n\n    // Mark all the properties immutable\n    Object.defineProperties(this, {\n      cid: readonly(),\n      bytes: readonly(),\n      value: readonly(),\n      asBlock: readonly()\n    })\n  }\n\n  links (): Iterable<[string, CID<unknown, number, number, API.Version>]> {\n    return links(this.value, [])\n  }\n\n  tree (): Iterable<string> {\n    return tree(this.value, [])\n  }\n\n  get (path = '/'): API.BlockCursorView<unknown> {\n    return get(this.value, path.split('/').filter(Boolean))\n  }\n}\n\ninterface EncodeInput <T, Code extends number, Alg extends number> {\n  value: T\n  codec: API.BlockEncoder<Code, T>\n  hasher: API.MultihashHasher<Alg>\n}\n\n/**\n * @template T - Logical type of the data encoded in the block\n * @template Code - multicodec code corresponding to codec used to encode the block\n * @template Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n */\nexport async function encode <T, Code extends number, Alg extends number> ({ value, codec, hasher }: EncodeInput<T, Code, Alg>): Promise<API.BlockView<T, Code, Alg>> {\n  if (typeof value === 'undefined') { throw new Error('Missing required argument \"value\"') }\n  if (codec == null || hasher == null) { throw new Error('Missing required argument: codec or hasher') }\n\n  const bytes = codec.encode(value)\n  const hash = await hasher.digest(bytes)\n\n  const cid = CID.create(\n    1,\n    codec.code,\n    hash\n  ) as CID<T, Code, Alg, 1>\n\n  return new Block({ value, bytes, cid })\n}\n\ninterface DecodeInput <T, Code extends number, Alg extends number> {\n  bytes: API.ByteView<T>\n  codec: API.BlockDecoder<Code, T>\n  hasher: API.MultihashHasher<Alg>\n}\n\n/**\n * @template T - Logical type of the data encoded in the block\n * @template Code - multicodec code corresponding to codec used to encode the block\n * @template Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n */\nexport async function decode <T, Code extends number, Alg extends number> ({ bytes, codec, hasher }: DecodeInput<T, Code, Alg>): Promise<API.BlockView<T, Code, Alg>> {\n  if (bytes == null) { throw new Error('Missing required argument \"bytes\"') }\n  if (codec == null || hasher == null) { throw new Error('Missing required argument: codec or hasher') }\n\n  const value = codec.decode(bytes)\n  const hash = await hasher.digest(bytes)\n\n  const cid = CID.create(1, codec.code, hash) as CID<T, Code, Alg, 1>\n\n  return new Block({ value, bytes, cid })\n}\n\ntype CreateUnsafeInput <T, Code extends number, Alg extends number, V extends API.Version> = {\n  cid: API.Link<T, Code, Alg, V>\n  value: T\n  codec?: API.BlockDecoder<Code, T>\n  bytes: API.ByteView<T>\n} | {\n  cid: API.Link<T, Code, Alg, V>\n  value?: undefined\n  codec: API.BlockDecoder<Code, T>\n  bytes: API.ByteView<T>\n}\n\n/**\n * @template T - Logical type of the data encoded in the block\n * @template Code - multicodec code corresponding to codec used to encode the block\n * @template Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template V - CID version\n */\nexport function createUnsafe <T, Code extends number, Alg extends number, V extends API.Version> ({ bytes, cid, value: maybeValue, codec }: CreateUnsafeInput<T, Code, Alg, V>): API.BlockView<T, Code, Alg, V> {\n  const value = maybeValue !== undefined\n    ? maybeValue\n    : (codec?.decode(bytes))\n\n  if (value === undefined) { throw new Error('Missing required argument, must either provide \"value\" or \"codec\"') }\n\n  return new Block({\n    cid: cid as CID<T, Code, Alg, V>,\n    bytes,\n    value\n  })\n}\n\ninterface CreateInput <T, Code extends number, Alg extends number, V extends API.Version> {\n  bytes: API.ByteView<T>\n  cid: API.Link<T, Code, Alg, V>\n  hasher: API.MultihashHasher<Alg>\n  codec: API.BlockDecoder<Code, T>\n}\n\n/**\n * @template T - Logical type of the data encoded in the block\n * @template Code - multicodec code corresponding to codec used to encode the block\n * @template Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template V - CID version\n */\nexport async function create <T, Code extends number, Alg extends number, V extends API.Version> ({ bytes, cid, hasher, codec }: CreateInput<T, Code, Alg, V>): Promise<API.BlockView<T, Code, Alg, V>> {\n  if (bytes == null) { throw new Error('Missing required argument \"bytes\"') }\n  if (hasher == null) { throw new Error('Missing required argument \"hasher\"') }\n  const value = codec.decode(bytes)\n  const hash = await hasher.digest(bytes)\n  if (!binary.equals(cid.multihash.bytes, hash.bytes)) {\n    throw new Error('CID hash does not match bytes')\n  }\n\n  return createUnsafe({\n    bytes,\n    cid,\n    value,\n    codec\n  })\n}\n", "import { Queue } from '@libp2p/utils/queue'\nimport * as cborg from 'cborg'\nimport { Key } from 'interface-datastore'\nimport { base36 } from 'multiformats/bases/base36'\nimport { createUnsafe } from 'multiformats/block'\nimport { CID } from 'multiformats/cid'\nimport { CustomProgressEvent } from 'progress-events'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport type { CodecLoader } from '@helia/interface'\nimport type { GetBlockProgressEvents } from '@helia/interface/blocks'\nimport type { AddOptions, AddPinEvents, IsPinnedOptions, LsOptions, Pin, Pins, RmOptions } from '@helia/interface/pins'\nimport type { AbortOptions } from '@libp2p/interface'\nimport type { Blockstore } from 'interface-blockstore'\nimport type { Datastore } from 'interface-datastore'\nimport type { Version } from 'multiformats/cid'\nimport type { ProgressOptions } from 'progress-events'\n\ninterface DatastorePin {\n  /**\n   * 0 for a direct pin or an arbitrary (+ve, whole) number or Infinity\n   */\n  depth: number\n\n  /**\n   * User-specific metadata for the pin\n   */\n  metadata: Record<string, string | number | boolean>\n}\n\ninterface DatastorePinnedBlock {\n  pinCount: number\n  pinnedBy: Uint8Array[]\n}\n\n/**\n * Callback for updating a {@link DatastorePinnedBlock}'s properties when\n * calling `#updatePinnedBlock`\n *\n * The callback should return `false` to prevent any pinning modifications to\n * the block, and true in all other cases.\n */\ninterface WithPinnedBlockCallback {\n  (pinnedBlock: DatastorePinnedBlock): boolean\n}\n\nconst DATASTORE_PIN_PREFIX = '/pin/'\nconst DATASTORE_BLOCK_PREFIX = '/pinned-block/'\nconst DATASTORE_ENCODING = base36\nconst DAG_WALK_QUEUE_CONCURRENCY = 1\n\ninterface WalkDagOptions extends AbortOptions, ProgressOptions<GetBlockProgressEvents | AddPinEvents> {\n  depth: number\n}\n\nfunction toDSKey (cid: CID): Key {\n  if (cid.version === 0) {\n    cid = cid.toV1()\n  }\n\n  return new Key(`${DATASTORE_PIN_PREFIX}${cid.toString(DATASTORE_ENCODING)}`)\n}\n\nexport class PinsImpl implements Pins {\n  private readonly datastore: Datastore\n  private readonly blockstore: Blockstore\n  private readonly getCodec: CodecLoader\n\n  constructor (datastore: Datastore, blockstore: Blockstore, getCodec: CodecLoader) {\n    this.datastore = datastore\n    this.blockstore = blockstore\n    this.getCodec = getCodec\n  }\n\n  async * add (cid: CID<unknown, number, number, Version>, options: AddOptions = {}): AsyncGenerator<CID, void, undefined> {\n    const pinKey = toDSKey(cid)\n\n    if (await this.datastore.has(pinKey)) {\n      throw new Error('Already pinned')\n    }\n\n    const depth = Math.round(options.depth ?? Infinity)\n\n    if (depth < 0) {\n      throw new Error('Depth must be greater than or equal to 0')\n    }\n\n    // use a queue to walk the DAG instead of recursion so we can traverse very large DAGs\n    const queue = new Queue<AsyncGenerator<CID>>({\n      concurrency: DAG_WALK_QUEUE_CONCURRENCY\n    })\n\n    for await (const childCid of this.#walkDag(cid, queue, {\n      ...options,\n      depth\n    })) {\n      await this.#updatePinnedBlock(childCid, (pinnedBlock: DatastorePinnedBlock) => {\n        // do not update pinned block if this block is already pinned by this CID\n        if (pinnedBlock.pinnedBy.find(c => uint8ArrayEquals(c, cid.bytes)) != null) {\n          return false\n        }\n\n        pinnedBlock.pinCount++\n        pinnedBlock.pinnedBy.push(cid.bytes)\n        return true\n      }, options)\n\n      yield childCid\n    }\n\n    const pin: DatastorePin = {\n      depth,\n      metadata: options.metadata ?? {}\n    }\n\n    await this.datastore.put(pinKey, cborg.encode(pin), options)\n  }\n\n  /**\n   * Walk a DAG in an iterable fashion\n   */\n  async * #walkDag (cid: CID, queue: Queue<AsyncGenerator<CID>>, options: WalkDagOptions): AsyncGenerator<CID> {\n    if (options.depth === -1) {\n      return\n    }\n\n    const codec = await this.getCodec(cid.code)\n    const bytes = await this.blockstore.get(cid, options)\n    const block = createUnsafe({ bytes, cid, codec })\n\n    yield cid\n\n    // walk dag, ensure all blocks are present\n    for (const [,cid] of block.links()) {\n      yield * await queue.add(async () => {\n        return this.#walkDag(cid, queue, {\n          ...options,\n          depth: options.depth - 1\n        })\n      })\n    }\n  }\n\n  /**\n   * Update the pin count for the CID\n   */\n  async #updatePinnedBlock (cid: CID, withPinnedBlock: WithPinnedBlockCallback, options: AddOptions): Promise<void> {\n    const blockKey = new Key(`${DATASTORE_BLOCK_PREFIX}${DATASTORE_ENCODING.encode(cid.multihash.bytes)}`)\n\n    let pinnedBlock: DatastorePinnedBlock = {\n      pinCount: 0,\n      pinnedBy: []\n    }\n\n    try {\n      pinnedBlock = cborg.decode(await this.datastore.get(blockKey, options))\n    } catch (err: any) {\n      if (err.name !== 'NotFoundError') {\n        throw err\n      }\n    }\n\n    const shouldContinue = withPinnedBlock(pinnedBlock)\n\n    if (!shouldContinue) {\n      return\n    }\n\n    if (pinnedBlock.pinCount === 0) {\n      if (await this.datastore.has(blockKey)) {\n        await this.datastore.delete(blockKey)\n        return\n      }\n    }\n\n    await this.datastore.put(blockKey, cborg.encode(pinnedBlock), options)\n    options.onProgress?.(new CustomProgressEvent<CID>('helia:pin:add', cid))\n  }\n\n  async * rm (cid: CID<unknown, number, number, Version>, options: RmOptions = {}): AsyncGenerator<CID, void, undefined> {\n    const pinKey = toDSKey(cid)\n    const buf = await this.datastore.get(pinKey, options)\n    const pin = cborg.decode(buf)\n\n    await this.datastore.delete(pinKey, options)\n\n    // use a queue to walk the DAG instead of recursion so we can traverse very large DAGs\n    const queue = new Queue<AsyncGenerator<CID>>({\n      concurrency: DAG_WALK_QUEUE_CONCURRENCY\n    })\n\n    for await (const childCid of this.#walkDag(cid, queue, {\n      ...options,\n      depth: pin.depth\n    })) {\n      await this.#updatePinnedBlock(childCid, (pinnedBlock): boolean => {\n        pinnedBlock.pinCount--\n        pinnedBlock.pinnedBy = pinnedBlock.pinnedBy.filter(c => uint8ArrayEquals(c, cid.bytes))\n        return true\n      }, {\n        ...options,\n        depth: pin.depth\n      })\n\n      yield childCid\n    }\n  }\n\n  async * ls (options: LsOptions = {}): AsyncGenerator<Pin, void, undefined> {\n    for await (const { key, value } of this.datastore.query({\n      prefix: DATASTORE_PIN_PREFIX + (options.cid != null ? `${options.cid.toString(base36)}` : '')\n    }, options)) {\n      const cid = CID.parse(key.toString().substring(5), base36)\n      const pin = cborg.decode(value)\n\n      yield {\n        cid,\n        ...pin\n      }\n    }\n  }\n\n  async isPinned (cid: CID, options: IsPinnedOptions = {}): Promise<boolean> {\n    const blockKey = new Key(`${DATASTORE_BLOCK_PREFIX}${DATASTORE_ENCODING.encode(cid.multihash.bytes)}`)\n\n    return this.datastore.has(blockKey, options)\n  }\n\n  async get (cid: CID, options?: AbortOptions): Promise<Pin> {\n    const pinKey = toDSKey(cid)\n    const buf = await this.datastore.get(pinKey, options)\n\n    return cborg.decode(buf)\n  }\n\n  async setMetadata (cid: CID, metadata: Record<string, string | number | boolean> | undefined, options?: AbortOptions): Promise<void> {\n    const pinKey = toDSKey(cid)\n    const buf = await this.datastore.get(pinKey, options)\n    const pin: DatastorePin = cborg.decode(buf)\n\n    pin.metadata = metadata ?? {}\n\n    await this.datastore.put(pinKey, cborg.encode(pin), options)\n  }\n}\n", "import type { PeerId } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { Blockstore } from 'interface-blockstore'\nimport type { AbortOptions } from 'interface-store'\nimport type { CID } from 'multiformats/cid'\nimport type { ProgressEvent, ProgressOptions } from 'progress-events'\n\nexport interface Pair {\n  cid: CID\n  block: Uint8Array\n}\n\nexport interface ProviderOptions {\n  /**\n   * An optional list of peers known to host at least the root block of the DAG\n   * that will be fetched.\n   *\n   * If this list is omitted, or if the peers cannot supply the root or any\n   * child blocks, a `findProviders` routing query will be run to find peers\n   * that can supply the blocks.\n   */\n  providers?: Array<PeerId | Multiaddr | Multiaddr[]>\n}\n\nexport type HasBlockProgressEvents =\n  ProgressEvent<'blocks:put:duplicate', CID> |\n  ProgressEvent<'blocks:put:providers:notify', CID> |\n  ProgressEvent<'blocks:put:blockstore:put', CID>\n\nexport type PutBlockProgressEvents =\n  ProgressEvent<'blocks:put:duplicate', CID> |\n  ProgressEvent<'blocks:put:providers:notify', CID> |\n  ProgressEvent<'blocks:put:blockstore:put', CID>\n\nexport type PutManyBlocksProgressEvents =\n  ProgressEvent<'blocks:put-many:duplicate', CID> |\n  ProgressEvent<'blocks:put-many:providers:notify', CID> |\n  ProgressEvent<'blocks:put-many:blockstore:put-many'>\n\nexport type GetBlockProgressEvents =\n  ProgressEvent<'blocks:get:providers:want', CID> |\n  ProgressEvent<'blocks:get:blockstore:get', CID> |\n  ProgressEvent<'blocks:get:blockstore:put', CID>\n\nexport type GetManyBlocksProgressEvents =\n  ProgressEvent<'blocks:get-many:blockstore:get-many'> |\n  ProgressEvent<'blocks:get-many:providers:want', CID> |\n  ProgressEvent<'blocks:get-many:blockstore:put', CID>\n\nexport type GetAllBlocksProgressEvents =\n  ProgressEvent<'blocks:get-all:blockstore:get-many'>\n\nexport type DeleteBlockProgressEvents =\n  ProgressEvent<'blocks:delete:blockstore:delete', CID>\n\nexport type DeleteManyBlocksProgressEvents =\n  ProgressEvent<'blocks:delete-many:blockstore:delete-many'>\n\nexport interface GetOfflineOptions {\n  /**\n   * If true, do not attempt to fetch any missing blocks from the network\n   *\n   * @default false\n   */\n  offline?: boolean\n}\n\nexport interface Blocks extends Blockstore<ProgressOptions<HasBlockProgressEvents>,\nProgressOptions<PutBlockProgressEvents>, ProgressOptions<PutManyBlocksProgressEvents>,\nGetOfflineOptions & ProviderOptions & ProgressOptions<GetBlockProgressEvents>,\nGetOfflineOptions & ProviderOptions & ProgressOptions<GetManyBlocksProgressEvents>,\nProgressOptions<GetAllBlocksProgressEvents>,\nProgressOptions<DeleteBlockProgressEvents>, ProgressOptions<DeleteManyBlocksProgressEvents>\n> {\n  /**\n   * A blockstore session only fetches blocks from a subset of network peers to\n   * reduce network traffic and improve performance.\n   *\n   * The initial set of peers can be specified, alternatively a `findProviders`\n   * routing query will occur to populate the set instead.\n   */\n  createSession(root: CID, options?: CreateSessionOptions<GetOfflineOptions & ProviderOptions & GetBlockProgressEvents>): SessionBlockstore\n}\n\n/**\n * A session blockstore is a special blockstore that only pulls content from a\n * subset of network peers which respond as having the block for the initial\n * root CID.\n *\n * Any blocks written to the blockstore as part of the session will propagate\n * to the blockstore the session was created from.\n *\n */\nexport interface SessionBlockstore extends Blockstore<ProgressOptions<HasBlockProgressEvents>,\nProgressOptions<PutBlockProgressEvents>, ProgressOptions<PutManyBlocksProgressEvents>,\nGetOfflineOptions & ProgressOptions<GetBlockProgressEvents>, GetOfflineOptions & ProgressOptions<GetManyBlocksProgressEvents>, ProgressOptions<GetAllBlocksProgressEvents>,\nProgressOptions<DeleteBlockProgressEvents>, ProgressOptions<DeleteManyBlocksProgressEvents>\n> {\n  /**\n   * Any in-progress operations will be aborted.\n   */\n  close(): void\n}\n\nexport interface BlockRetrievalOptions <ProgressEvents extends ProgressEvent<any, any> = ProgressEvent<any, any>> extends AbortOptions, ProgressOptions<ProgressEvents>, ProviderOptions {\n  /**\n   * A function that blockBrokers should call prior to returning a block to ensure it can maintain control\n   * of the block request flow. e.g. TrustedGatewayBlockBroker will use this to ensure that the block\n   * is valid from one of the gateways before assuming its work is done. If the block is not valid, it should try another gateway\n   * and WILL consider the gateway that returned the invalid blocks completely unreliable.\n   */\n  validateFn?(block: Uint8Array): Promise<void>\n}\n\nexport interface BlockAnnounceOptions <ProgressEvents extends ProgressEvent<any, any> = ProgressEvent<any, any>> extends AbortOptions, ProgressOptions<ProgressEvents> {\n\n}\n\nexport interface CreateSessionOptions <ProgressEvents extends ProgressEvent<any, any> = ProgressEvent<any, any>> extends AbortOptions, ProgressOptions<ProgressEvents>, ProviderOptions {\n  /**\n   * The minimum number of providers for the root CID that are required for\n   * successful session creation.\n   *\n   * The session will become usable once this many providers have been\n   * discovered, up to `maxProviders` providers will continue to be added.\n   *\n   * @default 1\n   */\n  minProviders?: number\n\n  /**\n   * The maximum number of providers for the root CID to be added to a session.\n   *\n   * @default 5\n   */\n  maxProviders?: number\n}\n\nexport interface BlockBroker<RetrieveProgressEvents extends ProgressEvent<any, any> = ProgressEvent<any, any>, AnnounceProgressEvents extends ProgressEvent<any, any> = ProgressEvent<any, any>> {\n  /**\n   * Retrieve a block from a source\n   */\n  retrieve?(cid: CID, options?: BlockRetrievalOptions<RetrieveProgressEvents>): Promise<Uint8Array>\n\n  /**\n   * Make a new block available to peers\n   */\n  announce?(cid: CID, block: Uint8Array, options?: BlockAnnounceOptions<AnnounceProgressEvents>): Promise<void>\n\n  /**\n   * Create a new session\n   */\n  createSession?(options?: CreateSessionOptions<RetrieveProgressEvents>): BlockBroker<RetrieveProgressEvents, AnnounceProgressEvents>\n}\n\nexport const DEFAULT_SESSION_MIN_PROVIDERS = 1\nexport const DEFAULT_SESSION_MAX_PROVIDERS = 5\n", "export class InsufficientProvidersError extends Error {\n  static name = 'InsufficientProvidersError'\n\n  constructor (message = 'Insufficient providers found') {\n    super(message)\n    this.name = 'InsufficientProvidersError'\n  }\n}\n\nexport class NoRoutersAvailableError extends Error {\n  static name = 'NoRoutersAvailableError'\n\n  constructor (message = 'No routers available') {\n    super(message)\n    this.name = 'NoRoutersAvailableError'\n  }\n}\n\nexport class UnknownHashAlgorithmError extends Error {\n  static name = 'UnknownHashAlgorithmError'\n\n  constructor (message = 'Unknown hash algorithm') {\n    super(message)\n    this.name = 'UnknownHashAlgorithmError'\n  }\n}\n\nexport class UnknownCodecError extends Error {\n  static name = 'UnknownCodecError'\n\n  constructor (message = 'Unknown codec') {\n    super(message)\n    this.name = 'UnknownCodecError'\n  }\n}\n", "import { Queue } from './queue/index.js'\nimport type { Job } from './queue/job.js'\nimport type { AbortOptions, PeerId } from '@libp2p/interface'\n\nexport interface PeerQueueJobOptions extends AbortOptions {\n  peerId: PeerId\n}\n\n/**\n * Extends Queue to add support for querying queued jobs by peer id\n */\nexport class PeerQueue<JobReturnType = void, JobOptions extends PeerQueueJobOptions = PeerQueueJobOptions> extends Queue<JobReturnType, JobOptions> {\n  has (peerId: PeerId): boolean {\n    return this.find(peerId) != null\n  }\n\n  find (peerId: PeerId): Job<JobOptions, JobReturnType> | undefined {\n    return this.queue.find(job => {\n      return peerId.equals(job.options.peerId)\n    })\n  }\n}\n", "import { NoRoutersAvailableError } from '@helia/interface'\nimport { NotFoundError, start, stop } from '@libp2p/interface'\nimport { PeerQueue } from '@libp2p/utils/peer-queue'\nimport merge from 'it-merge'\nimport type { Routing as RoutingInterface, Provider, RoutingOptions } from '@helia/interface'\nimport type { AbortOptions, ComponentLogger, Logger, Metrics, PeerId, PeerInfo, Startable } from '@libp2p/interface'\nimport type { CID } from 'multiformats/cid'\n\nconst DEFAULT_PROVIDER_LOOKUP_CONCURRENCY = 5\n\nexport interface RoutingInit {\n  routers: Array<Partial<RoutingInterface>>\n  providerLookupConcurrency?: number\n}\n\nexport interface RoutingComponents {\n  logger: ComponentLogger\n  metrics?: Metrics\n}\n\nexport class Routing implements RoutingInterface, Startable {\n  private readonly log: Logger\n  private readonly routers: Array<Partial<RoutingInterface>>\n  private readonly providerLookupConcurrency: number\n\n  constructor (components: RoutingComponents, init: RoutingInit) {\n    this.log = components.logger.forComponent('helia:routing')\n    this.routers = init.routers ?? []\n    this.providerLookupConcurrency = init.providerLookupConcurrency ?? DEFAULT_PROVIDER_LOOKUP_CONCURRENCY\n\n    this.findProviders = components.metrics?.traceFunction('helia.routing.findProviders', this.findProviders.bind(this), {\n      optionsIndex: 1\n    }) ?? this.findProviders\n    this.provide = components.metrics?.traceFunction('helia.routing.provide', this.provide.bind(this), {\n      optionsIndex: 1\n    }) ?? this.provide\n    this.cancelReprovide = components.metrics?.traceFunction('helia.routing.cancelReprovide', this.cancelReprovide.bind(this), {\n      optionsIndex: 1\n    }) ?? this.cancelReprovide\n    this.put = components.metrics?.traceFunction('helia.routing.put', this.put.bind(this), {\n      optionsIndex: 2\n    }) ?? this.put\n    this.get = components.metrics?.traceFunction('helia.routing.get', this.get.bind(this), {\n      optionsIndex: 1\n    }) ?? this.get\n    this.findPeer = components.metrics?.traceFunction('helia.routing.findPeer', this.findPeer.bind(this), {\n      optionsIndex: 1\n    }) ?? this.findPeer\n    this.getClosestPeers = components.metrics?.traceFunction('helia.routing.getClosestPeers', this.getClosestPeers.bind(this), {\n      optionsIndex: 1\n    }) ?? this.getClosestPeers\n  }\n\n  async start (): Promise<void> {\n    await start(...this.routers)\n  }\n\n  async stop (): Promise<void> {\n    await stop(...this.routers)\n  }\n\n  /**\n   * Iterates over all content routers in parallel to find providers of the\n   * given key\n   */\n  async * findProviders (key: CID, options: RoutingOptions = {}): AsyncIterable<Provider> {\n    if (this.routers.length === 0) {\n      throw new NoRoutersAvailableError('No content routers available')\n    }\n\n    // provider multiaddrs are only cached for a limited time, so they can come\n    // back as an empty array - when this happens we have to do a FIND_PEER\n    // query to get updated addresses, but we shouldn't block on this so use a\n    // separate bounded queue to perform this lookup\n    const queue = new PeerQueue<Provider | null>({\n      concurrency: this.providerLookupConcurrency\n    })\n    queue.addEventListener('error', () => {})\n\n    for await (const peer of merge(\n      queue.toGenerator(),\n      ...supports(this.routers, 'findProviders')\n        .map(router => router.findProviders(key, options))\n    )) {\n      // the peer was yielded by a content router without multiaddrs and we\n      // failed to load them\n      if (peer == null) {\n        continue\n      }\n\n      // have to refresh peer info for this peer to get updated multiaddrs\n      if (peer.multiaddrs.length === 0) {\n        // already looking this peer up\n        if (queue.find(peer.id) != null) {\n          continue\n        }\n\n        queue.add(async () => {\n          try {\n            const provider = await this.findPeer(peer.id, options)\n\n            if (provider.multiaddrs.length === 0) {\n              return null\n            }\n\n            return provider\n          } catch (err) {\n            this.log.error('could not load multiaddrs for peer %p', peer.id, err)\n            return null\n          }\n        }, {\n          peerId: peer.id,\n          signal: options.signal\n        })\n          .catch(err => {\n            this.log.error('could not load multiaddrs for peer %p', peer.id, err)\n          })\n      }\n\n      yield peer\n    }\n  }\n\n  /**\n   * Iterates over all content routers in parallel to notify it is\n   * a provider of the given key\n   */\n  async provide (key: CID, options: AbortOptions = {}): Promise<void> {\n    if (this.routers.length === 0) {\n      throw new NoRoutersAvailableError('No content routers available')\n    }\n\n    await Promise.all(\n      supports(this.routers, 'provide')\n        .map(async (router) => {\n          await router.provide(key, options)\n        })\n    )\n  }\n\n  async cancelReprovide (key: CID, options: AbortOptions = {}): Promise<void> {\n    await Promise.all(\n      supports(this.routers, 'cancelReprovide')\n        .map(async (router) => {\n          await router.cancelReprovide(key, options)\n        })\n    )\n  }\n\n  /**\n   * Store the given key/value pair in the available content routings\n   */\n  async put (key: Uint8Array, value: Uint8Array, options?: AbortOptions): Promise<void> {\n    await Promise.all(\n      supports(this.routers, 'put')\n        .map(async (router) => {\n          await router.put(key, value, options)\n        })\n    )\n  }\n\n  /**\n   * Get the value to the given key.\n   * Times out after 1 minute by default.\n   */\n  async get (key: Uint8Array, options?: AbortOptions): Promise<Uint8Array> {\n    return Promise.any(\n      supports(this.routers, 'get')\n        .map(async (router) => {\n          return router.get(key, options)\n        })\n    )\n  }\n\n  /**\n   * Iterates over all peer routers in parallel to find the given peer\n   */\n  async findPeer (id: PeerId, options?: RoutingOptions): Promise<PeerInfo> {\n    if (this.routers.length === 0) {\n      throw new NoRoutersAvailableError('No peer routers available')\n    }\n\n    const self = this\n    const source = merge(\n      ...supports(this.routers, 'findPeer')\n        .map(router => (async function * () {\n          try {\n            yield await router.findPeer(id, options)\n          } catch (err) {\n            self.log.error(err)\n          }\n        })())\n    )\n\n    for await (const peer of source) {\n      if (peer == null) {\n        continue\n      }\n\n      return peer\n    }\n\n    throw new NotFoundError('Could not find peer in routing')\n  }\n\n  /**\n   * Attempt to find the closest peers on the network to the given key\n   */\n  async * getClosestPeers (key: Uint8Array, options: RoutingOptions = {}): AsyncIterable<PeerInfo> {\n    if (this.routers.length === 0) {\n      throw new NoRoutersAvailableError('No peer routers available')\n    }\n\n    for await (const peer of merge(\n      ...supports(this.routers, 'getClosestPeers')\n        .map(router => router.getClosestPeers(key, options))\n    )) {\n      if (peer == null) {\n        continue\n      }\n\n      yield peer\n    }\n  }\n}\n\nfunction supports <Operation extends keyof Routing> (routers: any[], key: Operation): Array<Pick<Routing, Operation>> {\n  return routers.filter(router => router[key] != null)\n}\n", "/**\n * @packageDocumentation\n *\n * A simple error class and options interface that seems to get copied from\n * project to project.\n *\n * @example Using `AbortError`\n *\n * ```JavaScript\n * import { AbortError } from 'abort-error'\n *\n * // a promise that will be settled later\n * const deferred = Promise.withResolvers()\n *\n * const signal = AbortSignal.timeout(1000)\n * signal.addEventListener('abort', () => {\n *   deferred.reject(new AbortError())\n * })\n * ```\n *\n * @example Using `AbortOptions`\n *\n * ```TypeScript\n * import type { AbortOptions } from 'abort-error'\n *\n * async function myFunction (options?: AbortOptions) {\n *   return fetch('https://example.com', {\n *     signal: options?.signal\n *   })\n * }\n * ```\n */\n\nexport interface AbortOptions {\n  signal?: AbortSignal\n}\n\nexport class AbortError extends Error {\n  static name = 'AbortError'\n  name = 'AbortError'\n\n  constructor (message: string = 'The operation was aborted', ...rest: any[]) {\n    super(message, ...rest)\n  }\n}\n", "export class QueueFullError extends Error {\n  static name = 'QueueFullError'\n\n  constructor (message: string = 'The queue was full') {\n    super(message)\n    this.name = 'QueueFullError'\n  }\n}\n", "import { AbortError } from 'abort-error'\n\nexport class JobRecipient<JobReturnType> {\n  public deferred: PromiseWithResolvers<JobReturnType>\n  public signal?: AbortSignal\n\n  constructor (signal?: AbortSignal) {\n    this.signal = signal\n    this.deferred = Promise.withResolvers()\n\n    this.onAbort = this.onAbort.bind(this)\n    this.signal?.addEventListener('abort', this.onAbort)\n  }\n\n  onAbort (): void {\n    this.deferred.reject(this.signal?.reason ?? new AbortError())\n  }\n\n  cleanup (): void {\n    this.signal?.removeEventListener('abort', this.onAbort)\n  }\n}\n", "import { AbortError } from 'abort-error'\nimport { setMaxListeners } from 'main-event'\nimport { raceSignal } from 'race-signal'\nimport { JobRecipient } from './recipient.js'\nimport type { JobStatus } from './index.js'\nimport type { AbortOptions } from 'abort-error'\n\n/**\n * Returns a random string\n */\nfunction randomId (): string {\n  return `${(parseInt(String(Math.random() * 1e9), 10)).toString()}${Date.now()}`\n}\n\nexport interface JobTimeline {\n  created: number\n  started?: number\n  finished?: number\n}\n\nexport class Job <JobOptions extends AbortOptions = AbortOptions, JobReturnType = unknown> {\n  public id: string\n  public fn: (options: JobOptions) => Promise<JobReturnType>\n  public options: JobOptions\n  public recipients: Array<JobRecipient<JobReturnType>>\n  public status: JobStatus\n  public readonly timeline: JobTimeline\n  private readonly controller: AbortController\n\n  constructor (fn: (options: JobOptions) => Promise<JobReturnType>, options: any) {\n    this.id = randomId()\n    this.status = 'queued'\n    this.fn = fn\n    this.options = options\n    this.recipients = []\n    this.timeline = {\n      created: Date.now()\n    }\n\n    this.controller = new AbortController()\n    setMaxListeners(Infinity, this.controller.signal)\n\n    this.onAbort = this.onAbort.bind(this)\n  }\n\n  abort (err: Error): void {\n    this.controller.abort(err)\n  }\n\n  onAbort (): void {\n    const allAborted = this.recipients.reduce((acc, curr) => {\n      return acc && (curr.signal?.aborted === true)\n    }, true)\n\n    // if all recipients have aborted the job, actually abort the job\n    if (allAborted) {\n      this.controller.abort(new AbortError())\n      this.cleanup()\n    }\n  }\n\n  async join (options: AbortOptions = {}): Promise<JobReturnType> {\n    const recipient = new JobRecipient<JobReturnType>(options.signal)\n    this.recipients.push(recipient)\n\n    options.signal?.addEventListener('abort', this.onAbort)\n\n    return recipient.deferred.promise\n  }\n\n  async run (): Promise<void> {\n    this.status = 'running'\n    this.timeline.started = Date.now()\n\n    try {\n      this.controller.signal.throwIfAborted()\n\n      const result = await raceSignal(this.fn({\n        ...(this.options ?? {}),\n        signal: this.controller.signal\n      }), this.controller.signal)\n\n      this.recipients.forEach(recipient => {\n        recipient.deferred.resolve(result)\n      })\n\n      this.status = 'complete'\n    } catch (err) {\n      this.recipients.forEach(recipient => {\n        recipient.deferred.reject(err)\n      })\n\n      this.status = 'errored'\n    } finally {\n      this.timeline.finished = Date.now()\n      this.cleanup()\n    }\n  }\n\n  cleanup (): void {\n    this.recipients.forEach(recipient => {\n      recipient.cleanup()\n      recipient.signal?.removeEventListener('abort', this.onAbort)\n    })\n  }\n}\n", "/**\n * A function with additional start/stop methods\n */\nexport interface DebouncedFunction {\n  (): void\n\n  start(): void\n  stop(): void\n}\n\n/**\n * Returns a function wrapper that will only call the passed function once\n *\n * Important - the passed function should not throw or reject\n */\nexport function debounce (func: () => void | Promise<void>, wait: number): DebouncedFunction {\n  let timeout: ReturnType<typeof setTimeout> | undefined\n\n  const output = function (): void {\n    const later = function (): void {\n      timeout = undefined\n      void func()\n    }\n\n    clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n  }\n  output.start = (): void => {}\n  output.stop = (): void => {\n    clearTimeout(timeout)\n  }\n\n  return output\n}\n", "/**\n * @packageDocumentation\n *\n * Based on `p-queue` but with access to the underlying queue, aborting a task\n * removes it from the queue and you can iterate over the queue results.\n *\n * @example\n *\n * ```ts\n * import all from 'it-all'\n * import { Queue } from 'it-queue'\n *\n * const queue = new Queue({\n *   concurrency: Infinity\n * })\n * void queue.add(async () => {\n *   return 'hello'\n * })\n * void queue.add(async () => {\n *   return 'world'\n * })\n *\n * const results = await all(queue)\n * // ['hello', 'world']\n *\n * // how many items are in the queue (includes running items)\n * console.info(queue.size)\n *\n * // how many items are running\n * console.info(queue.running)\n *\n * // how many items have not started running yet\n * console.info(queue.queued)\n * ```\n */\n\nimport { AbortError } from 'abort-error'\nimport { pushable } from 'it-pushable'\nimport { TypedEventEmitter } from 'main-event'\nimport { raceEvent } from 'race-event'\nimport { QueueFullError } from './errors.js'\nimport { Job } from './job.js'\nimport { debounce } from './utils.js'\nimport type { AbortOptions } from 'abort-error'\nexport type { Job, JobTimeline } from './job.js'\nexport type { JobRecipient } from './recipient.js'\n\nexport interface Comparator<T> {\n  (a: T, b: T): -1 | 0 | 1\n}\n\nexport interface QueueInit<JobReturnType, JobOptions extends AbortOptions = AbortOptions> {\n  /**\n   * Concurrency limit.\n   *\n   * Minimum: `1`.\n   *\n   * @default Infinity\n   */\n  concurrency?: number\n\n  /**\n   * If the queue size grows to larger than this number the promise returned\n   * from the add function will reject\n   *\n   * @default Infinity\n   */\n  maxSize?: number\n\n  /**\n   * An optional function that will sort the queue after a job has been added\n   */\n  sort?: Comparator<Job<JobOptions, JobReturnType>>\n\n  /**\n   * If false, `.start` will need to be called to start processing jobs\n   *\n   * @default true\n   */\n  autoStart?: boolean\n}\n\nexport type JobStatus = 'queued' | 'running' | 'errored' | 'complete'\n\nexport interface RunFunction<Options extends AbortOptions = AbortOptions, ReturnType = void> {\n  (options: Options): Promise<ReturnType>\n}\n\nexport interface JobMatcher<JobOptions extends AbortOptions = AbortOptions> {\n  (options?: Partial<JobOptions>): boolean\n}\n\nexport interface QueueJobSuccess<JobReturnType, JobOptions extends AbortOptions = AbortOptions> {\n  job: Job<JobOptions, JobReturnType>\n  result: JobReturnType\n}\n\nexport interface QueueJobFailure<JobReturnType, JobOptions extends AbortOptions = AbortOptions> {\n  job: Job<JobOptions, JobReturnType>\n  error: Error\n}\n\nexport interface QueueEvents<JobReturnType, JobOptions extends AbortOptions = AbortOptions> {\n  /**\n   * A job is about to start running\n   */\n  active: CustomEvent\n\n  /**\n   * All jobs have finished and the queue is empty\n   */\n  idle: CustomEvent\n\n  /**\n   * The queue is empty, jobs may be running\n   */\n  empty: CustomEvent\n\n  /**\n   * A job was added to the queue\n   */\n  add: CustomEvent\n\n  /**\n   * A job has finished or failed\n   */\n  next: CustomEvent\n\n  /**\n   * Emitted just after `\"completed\", a job has finished successfully - this\n   * event gives access to the job and it's result\n   */\n  success: CustomEvent<QueueJobSuccess<JobReturnType, JobOptions>>\n\n  /**\n   * A job has failed - this event gives access to the job and the thrown error\n   */\n  failure: CustomEvent<QueueJobFailure<JobReturnType, JobOptions>>\n}\n\n/**\n * Heavily influence by `p-queue` with the following differences:\n *\n * 1. Items remain at the head of the queue while they are running so `queue.size` includes `queue.pending` items - this is so interested parties can join the results of a queue item while it is running\n * 2. The options for a job are stored separately to the job in order for them to be modified while they are still in the queue\n * 3. If a job's abort signal fires before execution begins, it is removed from the queue immediately\n * 4. 'success'/'failure' events are emitted instead of 'error'/'complete'\n */\nexport class Queue<JobReturnType = unknown, JobOptions extends AbortOptions = AbortOptions> extends TypedEventEmitter<QueueEvents<JobReturnType, JobOptions>> {\n  public concurrency: number\n  public maxSize: number\n  public queue: Array<Job<JobOptions, JobReturnType>>\n  private pending: number\n  private readonly sort?: Comparator<Job<JobOptions, JobReturnType>>\n  private autoStart: boolean\n\n  constructor (init: QueueInit<JobReturnType, JobOptions> = {}) {\n    super()\n\n    this.concurrency = init.concurrency ?? Number.POSITIVE_INFINITY\n    this.maxSize = init.maxSize ?? Number.POSITIVE_INFINITY\n    this.pending = 0\n    this.autoStart = init.autoStart ?? true\n\n    this.sort = init.sort\n    this.queue = []\n\n    this.emitEmpty = debounce(this.emitEmpty.bind(this), 1)\n    this.emitIdle = debounce(this.emitIdle.bind(this), 1)\n  }\n\n  [Symbol.asyncIterator] (): AsyncGenerator<JobReturnType, void, unknown> {\n    return this.toGenerator()\n  }\n\n  emitEmpty (): void {\n    if (this.size !== 0) {\n      return\n    }\n\n    this.safeDispatchEvent('empty')\n  }\n\n  emitIdle (): void {\n    if (this.running !== 0) {\n      return\n    }\n\n    this.safeDispatchEvent('idle')\n  }\n\n  private tryToStartAnother (): boolean {\n    if (this.size === 0) {\n      this.emitEmpty()\n\n      if (this.running === 0) {\n        this.emitIdle()\n      }\n\n      return false\n    }\n\n    if (this.pending < this.concurrency) {\n      let job: Job<JobOptions, JobReturnType> | undefined\n\n      for (const j of this.queue) {\n        if (j.status === 'queued') {\n          job = j\n          break\n        }\n      }\n\n      if (job == null) {\n        return false\n      }\n\n      this.safeDispatchEvent('active')\n\n      this.pending++\n\n      void job.run()\n        .finally(() => {\n          // remove the job from the queue\n          for (let i = 0; i < this.queue.length; i++) {\n            if (this.queue[i] === job) {\n              this.queue.splice(i, 1)\n              break\n            }\n          }\n\n          this.pending--\n          this.safeDispatchEvent('next')\n          if (this.autoStart) {\n            this.tryToStartAnother()\n          }\n        })\n\n      return true\n    }\n\n    return false\n  }\n\n  private enqueue (job: Job<JobOptions, JobReturnType>): void {\n    this.queue.push(job)\n\n    if (this.sort != null) {\n      this.queue.sort(this.sort)\n    }\n  }\n\n  /**\n   * Start the queue. If the `autoStart` parameter passed to the constructor was\n   * not `false` this is a no-op\n   */\n  start (): void {\n    if (this.autoStart !== false) {\n      return\n    }\n\n    this.autoStart = true\n    this.tryToStartAnother()\n  }\n\n  /**\n   * Prevent further jobs from running - call `.start` to start the queue again\n   */\n  pause (): void {\n    this.autoStart = false\n  }\n\n  /**\n   * Adds a sync or async task to the queue. Always returns a promise.\n   */\n  async add (fn: RunFunction<JobOptions, JobReturnType>, options?: JobOptions): Promise<JobReturnType> {\n    options?.signal?.throwIfAborted()\n\n    if (this.size === this.maxSize) {\n      throw new QueueFullError()\n    }\n\n    const job = new Job<JobOptions, JobReturnType>(fn, options)\n    this.enqueue(job)\n    this.safeDispatchEvent('add')\n\n    if (this.autoStart) {\n      this.tryToStartAnother()\n    }\n\n    return job.join(options)\n      .then(result => {\n        this.safeDispatchEvent('success', { detail: { job, result } })\n\n        return result\n      })\n      .catch(err => {\n        if (job.status === 'queued') {\n          // job was aborted before it started - remove the job from the queue\n          for (let i = 0; i < this.queue.length; i++) {\n            if (this.queue[i] === job) {\n              this.queue.splice(i, 1)\n              break\n            }\n          }\n        }\n\n        this.safeDispatchEvent('failure', { detail: { job, error: err } })\n\n        throw err\n      })\n  }\n\n  /**\n   * Clear the queue\n   */\n  clear (): void {\n    this.queue.splice(0, this.queue.length)\n  }\n\n  /**\n   * Abort all jobs in the queue and clear it\n   */\n  abort (): void {\n    this.queue.forEach(job => {\n      job.abort(new AbortError())\n    })\n\n    this.clear()\n  }\n\n  /**\n   * Can be called multiple times. Useful if you for example add additional items at a later time.\n   *\n   * @returns A promise that settles when the queue becomes empty.\n   */\n  async onEmpty (options?: AbortOptions): Promise<void> {\n    // Instantly resolve if the queue is empty\n    if (this.size === 0) {\n      return\n    }\n\n    await raceEvent(this, 'empty', options?.signal)\n  }\n\n  /**\n   * @returns A promise that settles when the queue size is less than the given\n   * limit: `queue.size < limit`.\n   *\n   * If you want to avoid having the queue grow beyond a certain size you can\n   * `await queue.onSizeLessThan()` before adding a new item.\n   *\n   * Note that this only limits the number of items waiting to start. There\n   * could still be up to `concurrency` jobs already running that this call does\n   * not include in its calculation.\n   */\n  async onSizeLessThan (limit: number, options?: AbortOptions): Promise<void> {\n    // Instantly resolve if the queue is empty.\n    if (this.size < limit) {\n      return\n    }\n\n    await raceEvent(this, 'next', options?.signal, {\n      filter: () => this.size < limit\n    })\n  }\n\n  /**\n   * The difference with `.onEmpty` is that `.onIdle` guarantees that all work\n   * from the queue has finished. `.onEmpty` merely signals that the queue is\n   * empty, but it could mean that some promises haven't completed yet.\n   *\n   * @returns A promise that settles when the queue becomes empty, and all\n   * promises have completed; `queue.size === 0 && queue.pending === 0`.\n   */\n  async onIdle (options?: AbortOptions): Promise<void> {\n    // Instantly resolve if none pending and if nothing else is queued\n    if (this.pending === 0 && this.size === 0) {\n      return\n    }\n\n    await raceEvent(this, 'idle', options?.signal)\n  }\n\n  /**\n   * Size of the queue including running items\n   */\n  get size (): number {\n    return this.queue.length\n  }\n\n  /**\n   * The number of queued items waiting to run.\n   */\n  get queued (): number {\n    return this.queue.length - this.pending\n  }\n\n  /**\n   * The number of items currently running.\n   */\n  get running (): number {\n    return this.pending\n  }\n\n  /**\n   * Returns an async generator that makes it easy to iterate over the results\n   * of jobs added to the queue.\n   *\n   * The generator will end when the queue becomes idle, that is there are no\n   * jobs running and no jobs that have yet to run.\n   *\n   * If you need to keep the queue open indefinitely, consider using it-pushable\n   * instead.\n   */\n  async * toGenerator (options?: AbortOptions): AsyncGenerator<JobReturnType, void, unknown> {\n    options?.signal?.throwIfAborted()\n\n    const stream = pushable<JobReturnType>({\n      objectMode: true\n    })\n\n    const cleanup = (err?: Error): void => {\n      if (err != null) {\n        this.abort()\n      } else {\n        this.clear()\n      }\n\n      stream.end(err)\n    }\n\n    const onQueueJobComplete = (evt: CustomEvent<QueueJobSuccess<JobReturnType, JobOptions>>): void => {\n      if (evt.detail != null) {\n        stream.push(evt.detail.result)\n      }\n    }\n\n    const onQueueError = (evt: CustomEvent<QueueJobFailure<JobReturnType, JobOptions>>): void => {\n      cleanup(evt.detail.error)\n    }\n\n    const onQueueIdle = (): void => {\n      cleanup()\n    }\n\n    // clear the queue and throw if the query is aborted\n    const onSignalAbort = (): void => {\n      cleanup(new AbortError('Queue aborted'))\n    }\n\n    // add listeners\n    this.addEventListener('success', onQueueJobComplete)\n    this.addEventListener('failure', onQueueError)\n    this.addEventListener('idle', onQueueIdle)\n    options?.signal?.addEventListener('abort', onSignalAbort)\n\n    try {\n      yield * stream\n    } finally {\n      // remove listeners\n      this.removeEventListener('success', onQueueJobComplete)\n      this.removeEventListener('failure', onQueueError)\n      this.removeEventListener('idle', onQueueIdle)\n      options?.signal?.removeEventListener('abort', onSignalAbort)\n\n      // empty the queue for when the user has broken out of a loop early\n      cleanup()\n    }\n  }\n}\n", "export const WORKER_REQUEST_READ_LOCK = 'lock:worker:request-read'\nexport const WORKER_ABORT_READ_LOCK_REQUEST = 'lock:worker:abort-read-request'\nexport const WORKER_RELEASE_READ_LOCK = 'lock:worker:release-read'\nexport const MASTER_GRANT_READ_LOCK = 'lock:master:grant-read'\nexport const MASTER_READ_LOCK_ERROR = 'lock:master:error-read'\n\nexport const WORKER_REQUEST_WRITE_LOCK = 'lock:worker:request-write'\nexport const WORKER_ABORT_WRITE_LOCK_REQUEST = 'lock:worker:abort-write-request'\nexport const WORKER_RELEASE_WRITE_LOCK = 'lock:worker:release-write'\nexport const MASTER_GRANT_WRITE_LOCK = 'lock:master:grant-write'\nexport const MASTER_WRITE_LOCK_ERROR = 'lock:master:error-write'\n\nexport const WORKER_FINALIZE = 'lock:worker:finalize'\n\nexport const BROADCAST_CHANNEL_NAME = 'mortice'\n\nexport const defaultOptions = {\n  singleProcess: false\n}\n", "import {\n  WORKER_FINALIZE\n} from '../constants.js'\nimport type { AbortEventData, AbortRequestType, FinalizeEventData, MorticeEvents, RequestType } from '../mortice.js'\nimport type { TypedEventTarget } from 'main-event'\n\nexport const handleChannelWorkerLockRequest = (emitter: TypedEventTarget<MorticeEvents>, channel: BroadcastChannel, masterEvent: RequestType, abortMasterEvent: AbortRequestType, requestType: string, abortType: string, errorType: string, releaseType: string, grantType: string) => {\n  return (event: MessageEvent) => {\n    if (event.data == null) {\n      return\n    }\n\n    const requestEvent = {\n      type: event.data.type,\n      name: event.data.name,\n      identifier: event.data.identifier\n    }\n\n    // worker is requesting lock\n    if (requestEvent.type === requestType) {\n      emitter.safeDispatchEvent(masterEvent, {\n        detail: {\n          name: requestEvent.name,\n          identifier: requestEvent.identifier,\n          handler: async (): Promise<void> => {\n            // grant lock to worker\n            channel.postMessage({\n              type: grantType,\n              name: requestEvent.name,\n              identifier: requestEvent.identifier\n            })\n\n            // wait for worker to finish\n            await new Promise<void>((resolve) => {\n              const releaseEventListener = (event: MessageEvent): void => {\n                if (event?.data == null) {\n                  return\n                }\n\n                const releaseEvent = {\n                  type: event.data.type,\n                  name: event.data.name,\n                  identifier: event.data.identifier\n                }\n\n                if (releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {\n                  channel.removeEventListener('message', releaseEventListener)\n                  resolve()\n                }\n              }\n\n              channel.addEventListener('message', releaseEventListener)\n            })\n          },\n          onError: (err: Error) => {\n            // send error to worker\n            channel.postMessage({\n              type: errorType,\n              name: requestEvent.name,\n              identifier: requestEvent.identifier,\n              error: {\n                message: err.message,\n                name: err.name,\n                stack: err.stack\n              }\n            })\n          }\n        }\n      })\n    }\n\n    // worker is no longer interested in requesting the lock\n    if (requestEvent.type === abortType) {\n      emitter.safeDispatchEvent<AbortEventData>(abortMasterEvent, {\n        detail: {\n          name: requestEvent.name,\n          identifier: requestEvent.identifier\n        }\n      })\n    }\n\n    // worker is done with lock\n    if (requestEvent.type === WORKER_FINALIZE) {\n      emitter.safeDispatchEvent<FinalizeEventData>('finalizeRequest', {\n        detail: {\n          name: requestEvent.name\n        }\n      })\n    }\n  }\n}\n", "export const nanoid = (size: number = 10): string => {\n  return Math.random().toString().substring(2, size + 2)\n}\n", "import {\n  WORKER_REQUEST_READ_LOCK,\n  WORKER_RELEASE_READ_LOCK,\n  MASTER_GRANT_READ_LOCK,\n  WORKER_REQUEST_WRITE_LOCK,\n  WORKER_RELEASE_WRITE_LOCK,\n  MASTER_GRANT_WRITE_LOCK,\n  WORKER_ABORT_READ_LOCK_REQUEST,\n  WORKER_ABORT_WRITE_LOCK_REQUEST,\n  MASTER_READ_LOCK_ERROR,\n  MASTER_WRITE_LOCK_ERROR,\n  WORKER_FINALIZE,\n  BROADCAST_CHANNEL_NAME\n} from '../constants.js'\nimport { nanoid } from '../utils.js'\nimport type { Mortice, Release } from '../index.js'\nimport type { AbortOptions } from 'abort-error'\n\nexport class MorticeChannelWorker implements Mortice {\n  private name: string\n  private channel: BroadcastChannel\n\n  constructor (name: string) {\n    this.name = name\n    this.channel = new BroadcastChannel(BROADCAST_CHANNEL_NAME)\n  }\n\n  readLock (options?: AbortOptions): Promise<Release> {\n    return this.sendRequest(\n      WORKER_REQUEST_READ_LOCK,\n      WORKER_ABORT_READ_LOCK_REQUEST,\n      MASTER_GRANT_READ_LOCK,\n      MASTER_READ_LOCK_ERROR,\n      WORKER_RELEASE_READ_LOCK,\n      options\n    )\n  }\n\n  writeLock (options?: AbortOptions): Promise<Release> {\n    return this.sendRequest(\n      WORKER_REQUEST_WRITE_LOCK,\n      WORKER_ABORT_WRITE_LOCK_REQUEST,\n      MASTER_GRANT_WRITE_LOCK,\n      MASTER_WRITE_LOCK_ERROR,\n      WORKER_RELEASE_WRITE_LOCK,\n      options\n    )\n  }\n\n  finalize (): void {\n    this.channel.postMessage({\n      type: WORKER_FINALIZE,\n      name: this.name\n    })\n\n    this.channel.close()\n  }\n\n  private async sendRequest (requestType: string, abortType: string, grantType: string, errorType: string, releaseType: string, options?: AbortOptions): Promise<Release> {\n    options?.signal?.throwIfAborted()\n    const id = nanoid()\n\n    this.channel.postMessage({\n      type: requestType,\n      identifier: id,\n      name: this.name\n    })\n\n    return new Promise<Release>((resolve, reject) => {\n      const abortListener = (): void => {\n        this.channel.postMessage({\n          type: abortType,\n          identifier: id,\n          name: this.name\n        })\n      }\n\n      options?.signal?.addEventListener('abort', abortListener, {\n        once: true\n      })\n\n      const listener = (event: MessageEvent): void => {\n        if (event.data?.identifier !== id) {\n          return\n        }\n\n        if (event.data?.type === grantType) {\n          this.channel.removeEventListener('message', listener)\n          options?.signal?.removeEventListener('abort', abortListener)\n\n          // lock granted\n          resolve(() => {\n            // release lock\n            this.channel.postMessage({\n              type: releaseType,\n              identifier: id,\n              name: this.name\n            })\n          })\n        }\n\n        if (event.data.type === errorType) {\n          this.channel.removeEventListener('message', listener)\n          options?.signal?.removeEventListener('abort', abortListener)\n\n          // error while waiting for grant of lock\n          const err = new Error()\n\n          if (event.data.error != null) {\n            err.message = event.data.error.message\n            err.name = event.data.error.name\n            err.stack = event.data.error.stack\n          }\n\n          reject(err)\n        }\n      }\n\n      this.channel.addEventListener('message', listener)\n    })\n  }\n}\n", "import { TypedEventEmitter } from 'main-event'\nimport {\n  WORKER_REQUEST_READ_LOCK,\n  WORKER_RELEASE_READ_LOCK,\n  MASTER_GRANT_READ_LOCK,\n  WORKER_REQUEST_WRITE_LOCK,\n  WORKER_RELEASE_WRITE_LOCK,\n  MASTER_GRANT_WRITE_LOCK,\n  WORKER_ABORT_READ_LOCK_REQUEST,\n  WORKER_ABORT_WRITE_LOCK_REQUEST,\n  MASTER_READ_LOCK_ERROR,\n  MASTER_WRITE_LOCK_ERROR,\n  BROADCAST_CHANNEL_NAME,\n  defaultOptions\n} from './constants.js'\nimport { handleChannelWorkerLockRequest } from './main/channel.ts'\nimport { MorticeChannelWorker } from './workers/channel.ts'\nimport type { Mortice, MorticeOptions } from './index.js'\nimport type { MorticeEvents } from './mortice.js'\nimport type { TypedEventTarget } from 'main-event'\n\nexport default (options: Required<MorticeOptions>): Mortice | TypedEventTarget<MorticeEvents> => {\n  options = Object.assign({}, defaultOptions, options)\n  const isPrimary = Boolean(globalThis.document) || options.singleProcess\n\n  if (isPrimary) {\n    const channel = new BroadcastChannel(BROADCAST_CHANNEL_NAME)\n    const emitter = new TypedEventEmitter<MorticeEvents>()\n\n    channel.addEventListener('message', handleChannelWorkerLockRequest(\n      emitter,\n      channel,\n      'requestReadLock',\n      'abortReadLockRequest',\n      WORKER_REQUEST_READ_LOCK,\n      WORKER_ABORT_READ_LOCK_REQUEST,\n      MASTER_READ_LOCK_ERROR,\n      WORKER_RELEASE_READ_LOCK,\n      MASTER_GRANT_READ_LOCK\n    ))\n    channel.addEventListener('message', handleChannelWorkerLockRequest(\n      emitter,\n      channel,\n      'requestWriteLock',\n      'abortWriteLockRequest',\n      WORKER_REQUEST_WRITE_LOCK,\n      WORKER_ABORT_WRITE_LOCK_REQUEST,\n      MASTER_WRITE_LOCK_ERROR,\n      WORKER_RELEASE_WRITE_LOCK,\n      MASTER_GRANT_WRITE_LOCK\n    ))\n\n    return emitter\n  }\n\n  return new MorticeChannelWorker(options.name)\n}\n", "import { AbortError } from 'abort-error'\nimport { Queue } from 'it-queue'\nimport impl from './node.js'\nimport type { Mortice, MorticeOptions, Release } from './index.js'\nimport type { AbortOptions } from 'abort-error'\nimport type { TypedEventTarget } from 'main-event'\n\nexport type RequestType = 'requestReadLock' | 'requestWriteLock'\nexport type AbortRequestType = 'abortReadLockRequest' | 'abortWriteLockRequest'\nexport type FinalizeRequestType = 'finalizeRequest'\n\nexport interface RequestEventData {\n  name: string\n  identifier: string\n  handler(): Promise<void>\n  onError(err: Error): void\n}\n\nexport interface RequestEvent {\n  type: string\n  identifier: string\n  name: string,\n  error?: {\n    name: string\n    message: string\n    stack: string\n  }\n}\n\nexport interface AbortEventData {\n  name: string\n  identifier: string\n}\n\nexport interface FinalizeEventData {\n  name: string\n}\n\nexport interface MorticeEvents {\n  requestReadLock: CustomEvent<RequestEventData>\n  abortReadLockRequest: CustomEvent<AbortEventData>\n  requestWriteLock: CustomEvent<RequestEventData>\n  abortWriteLockRequest: CustomEvent<AbortEventData>\n  finalizeRequest: CustomEvent<FinalizeEventData>\n}\n\nconst mutexes: Map<string, Mortice> = new Map()\nlet implementation: Mortice | TypedEventTarget<MorticeEvents>\n\nexport function isMortice (obj?: any): obj is Mortice {\n  return typeof obj?.readLock === 'function' && typeof obj?.writeLock === 'function'\n}\n\nexport function getImplementation (opts: Required<MorticeOptions>): Mortice | TypedEventTarget<MorticeEvents> {\n  if (implementation == null) {\n    implementation = impl(opts)\n\n    if (!isMortice(implementation)) {\n      const emitter = implementation\n\n      // we are master, set up worker requests\n      emitter.addEventListener('requestReadLock', (event: CustomEvent<RequestEventData>) => {\n        const mutexName = event.detail.name\n        const identifier = event.detail.identifier\n        const mutex = mutexes.get(mutexName)\n\n        if (mutex == null) {\n          return\n        }\n\n        const abortController = new AbortController()\n\n        const abortListener = (event: CustomEvent<AbortEventData>): void => {\n          if (event.detail.name !== mutexName || event.detail.identifier !== identifier) {\n            return\n          }\n\n          abortController.abort()\n        }\n\n        emitter.addEventListener('abortReadLockRequest', abortListener)\n\n        void mutex.readLock({\n          signal: abortController.signal\n        })\n          .then(async release => {\n            await event.detail.handler()\n              .finally(() => {\n                release()\n              })\n          })\n          .catch(err => {\n            event.detail.onError(err)\n          })\n          .finally(() => {\n            emitter.removeEventListener('abortReadLockRequest', abortListener)\n          })\n      })\n\n      emitter.addEventListener('requestWriteLock', (event: CustomEvent<RequestEventData>) => {\n        const mutexName = event.detail.name\n        const identifier = event.detail.identifier\n        const mutex = mutexes.get(mutexName)\n\n        if (mutex == null) {\n          return\n        }\n\n        const abortController = new AbortController()\n\n        const abortListener = (event: CustomEvent<AbortEventData>): void => {\n          if (event.detail.name !== mutexName || event.detail.identifier !== identifier) {\n            return\n          }\n\n          abortController.abort()\n        }\n\n        emitter.addEventListener('abortWriteLockRequest', abortListener)\n\n        void mutex.writeLock({\n          signal: abortController.signal\n        })\n          .then(async release => {\n            await event.detail.handler()\n              .finally(() => {\n                release()\n              })\n          })\n          .catch(err => {\n            event.detail.onError(err)\n          })\n          .finally(() => {\n            emitter.removeEventListener('abortWriteLockRequest', abortListener)\n          })\n      })\n\n      emitter.addEventListener('finalizeRequest', (event: CustomEvent<FinalizeEventData>): void => {\n        const mutexName = event.detail.name\n        const mutex = mutexes.get(mutexName)\n\n        if (mutex == null) {\n          return\n        }\n\n        mutex.finalize()\n      })\n    }\n  }\n\n  return implementation\n}\n\nasync function createReleasable (queue: Queue, options?: AbortOptions): Promise<Release> {\n  let res: (release: Release) => void\n  let rej: (err: Error) => void\n\n  const p = new Promise<Release>((resolve, reject) => {\n    res = resolve\n    rej = reject\n  })\n\n  const listener = (): void => {\n    rej(new AbortError())\n  }\n\n  options?.signal?.addEventListener('abort', listener, {\n    once: true\n  })\n\n  queue.add(async () => {\n    await new Promise<void>((resolve) => {\n      res(() => {\n        options?.signal?.removeEventListener('abort', listener)\n        resolve()\n      })\n    })\n  }, {\n    signal: options?.signal\n  })\n    .catch((err) => {\n      rej(err)\n    })\n\n  return p\n}\n\nexport const createMutex = (name: string, options: Required<MorticeOptions>): Mortice => {\n  let mutex = mutexes.get(name)\n\n  if (mutex != null) {\n    return mutex\n  }\n\n  const implementation = getImplementation(options)\n\n  // a Mortice instance will be returned if we are a worker, otherwise if we are\n  // primary an event target will be returned that fires events when workers\n  // request a lock\n  if (isMortice(implementation)) {\n    mutex = implementation\n\n    mutexes.set(name, mutex)\n\n    return mutex\n  }\n\n  const masterQueue = new Queue({\n    concurrency: 1\n  })\n  let readQueue: Queue | null\n\n  mutex = {\n    async readLock (opts?: AbortOptions) {\n      // If there's already a read queue, just add the task to it\n      if (readQueue != null) {\n        return createReleasable(readQueue, opts)\n      }\n\n      // Create a new read queue\n      readQueue = new Queue({\n        concurrency: options.concurrency,\n        autoStart: false\n      })\n      const localReadQueue = readQueue\n\n      // Add the task to the read queue\n      const readPromise = createReleasable(readQueue, opts)\n\n      void masterQueue.add(async () => {\n        // Start the task only once the master queue has completed processing\n        // any previous tasks\n        localReadQueue.start()\n\n        // Once all the tasks in the read queue have completed, remove it so\n        // that the next read lock will occur after any write locks that were\n        // started in the interim\n        await localReadQueue.onIdle()\n          .then(() => {\n            if (readQueue === localReadQueue) {\n              readQueue = null\n            }\n          })\n      })\n\n      return readPromise\n    },\n    async writeLock (opts?: AbortOptions) {\n      // Remove the read queue reference, so that any later read locks will be\n      // added to a new queue that starts after this write lock has been\n      // released\n      readQueue = null\n\n      return createReleasable(masterQueue, opts)\n    },\n    finalize: () => {\n      mutexes.delete(name)\n    },\n    queue: masterQueue\n  }\n\n  mutexes.set(name, mutex)\n\n  // if requested, finalize the lock once the last lock holder has released it\n  if (options.autoFinalize === true) {\n    masterQueue.addEventListener('idle', () => {\n      mutex.finalize()\n    }, {\n      once: true\n    })\n  }\n\n  return mutex\n}\n", "/**\n * @packageDocumentation\n *\n * - Reads occur concurrently\n * - Writes occur one at a time\n * - No reads occur while a write operation is in progress\n * - Locks can be created with different names\n * - Reads/writes can time out\n *\n * @example\n *\n * ```ts\n * import mortice from 'mortice'\n * import delay from 'delay'\n *\n * // the lock name & options objects are both optional\n * const mutex = mortice()\n *\n * Promise.all([\n *   (async () => {\n *     const release = await mutex.readLock()\n *\n *     try {\n *       console.info('read 1')\n *     } finally {\n *       release()\n *     }\n *   })(),\n *   (async () => {\n *     const release = await mutex.readLock()\n *\n *     try {\n *       console.info('read 2')\n *     } finally {\n *       release()\n *     }\n *   })(),\n *   (async () => {\n *     const release = await mutex.writeLock()\n *\n *     try {\n *       await delay(1000)\n *\n *       console.info('write 1')\n *     } finally {\n *       release()\n *     }\n *   })(),\n *   (async () => {\n *     const release = await mutex.readLock()\n *\n *     try {\n *       console.info('read 3')\n *     } finally {\n *       release()\n *     }\n *   })()\n * ])\n * ```\n *\n *     read 1\n *     read 2\n *     <small pause>\n *     write 1\n *     read 3\n *\n * ## Clean up\n *\n * Mutexes are stored globally reference by name, this is so you can obtain the\n * same lock from different contexts, including workers.\n *\n * When a mutex is no longer required, the `.finalize` function should be called\n * to remove any internal references to it.\n *\n * ```ts\n * import mortice from 'mortice'\n *\n * const mutex = mortice()\n *\n * // ...some time later\n *\n * mutex.finalize()\n * ```\n *\n * ## Auto clean up\n *\n * If your app generates a lot of short-lived mutexes and you want to clean them\n * up after the last lock has been released, pass the `autoFinalize` option to\n * mortice in the owning context:\n *\n ```ts\n * import mortice from 'mortice'\n *\n * const mutex = mortice({\n *   autoFinalize: true\n * })\n *\n * const release = await mutex.readLock()\n * // ...some time later\n *\n * release()\n *\n * // mutex will be freed soon after\n * ```\n *\n * ## React native support\n *\n * This module should run on react native but it only supports single-process\n * concurrency as it's not clear to the author (disclaimer - not a react native\n * dev) what the officially supported process concurrency model is.\n *\n * Please open an issue if this is a feature you would like to see added.\n */\n\nimport { Queue } from 'it-queue'\nimport { createMutex } from './mortice.ts'\nimport type { AbortOptions } from 'abort-error'\n\nexport interface MorticeOptions {\n  /**\n   * An optional name for the lock\n   */\n  name?: string\n\n  /**\n   * How many read operations are executed concurrently\n   *\n   * @default Infinity\n   */\n  concurrency?: number\n\n  /**\n   * By default the the lock will be held on the main thread and child/worker\n   * processes will coordinate to share the lock.\n   *\n   * Set this to true if each main/child/worker thread should maintain it's own\n   * lock with no coordination between them.\n   *\n   * @default false\n   */\n  singleProcess?: boolean\n\n  /**\n   * If true, the lock will be finalized after the last reader/writer releases\n   * it.\n   *\n   * @default false\n   */\n  autoFinalize?: boolean\n}\n\nexport interface Mortice {\n  /**\n   * Acquire a read lock. Multiple reads will occur simultaneously up to the\n   * concurrency limit passed to the constructor.\n   */\n  readLock(options?: AbortOptions): Promise<Release>\n\n  /**\n   * Acquire a write lock. The write lock will wait for any in-flight reads to\n   * complete, then prevent any further reads or writes until the lock is\n   * released.\n   */\n  writeLock(options?: AbortOptions): Promise<Release>\n\n  /**\n   * Removes this mutex from the global state, after invoking this method it\n   * cannot be used any more.\n   */\n  finalize(): void\n\n  /**\n   * If this is the main thread, the state of the read/write queue may be\n   * inspected here\n   */\n  queue?: Queue\n}\n\nexport interface Release {\n  (): void\n}\n\nconst defaultOptions = {\n  name: 'lock',\n  concurrency: Infinity,\n  singleProcess: false,\n  autoFinalize: false\n}\n\nexport default function createMortice (options?: MorticeOptions): Mortice {\n  const opts: Required<MorticeOptions> = Object.assign({}, defaultOptions, options)\n\n  return createMutex(opts.name, opts)\n}\n", "import { start, stop } from '@libp2p/interface'\nimport createMortice from 'mortice'\nimport type { Blocks, Pair, DeleteManyBlocksProgressEvents, DeleteBlockProgressEvents, GetBlockProgressEvents, GetManyBlocksProgressEvents, PutManyBlocksProgressEvents, PutBlockProgressEvents, GetAllBlocksProgressEvents, GetOfflineOptions, SessionBlockstore } from '@helia/interface/blocks'\nimport type { Pins } from '@helia/interface/pins'\nimport type { AbortOptions, Startable } from '@libp2p/interface'\nimport type { Blockstore } from 'interface-blockstore'\nimport type { AwaitIterable } from 'interface-store'\nimport type { Mortice } from 'mortice'\nimport type { CID } from 'multiformats/cid'\nimport type { ProgressOptions } from 'progress-events'\n\nexport interface BlockStorageInit {\n  holdGcLock?: boolean\n}\n\nexport interface GetOptions extends AbortOptions {\n  progress?(evt: Event): void\n}\n\n/**\n * BlockStorage is a hybrid blockstore that puts/gets blocks from a configured\n * blockstore (that may be on disk, s3, or something else). If the blocks are\n * not present Bitswap will be used to fetch them from network peers.\n */\nexport class BlockStorage implements Blocks, Startable {\n  public lock: Mortice\n  private readonly child: Blocks\n  private readonly pins: Pins\n  private started: boolean\n\n  /**\n   * Create a new BlockStorage\n   */\n  constructor (blockstore: Blocks, pins: Pins, options: BlockStorageInit = {}) {\n    this.child = blockstore\n    this.pins = pins\n    this.lock = createMortice({\n      singleProcess: options.holdGcLock\n    })\n    this.started = false\n  }\n\n  isStarted (): boolean {\n    return this.started\n  }\n\n  async start (): Promise<void> {\n    await start(this.child)\n    this.started = true\n  }\n\n  async stop (): Promise<void> {\n    await stop(this.child)\n    this.started = false\n  }\n\n  unwrap (): Blockstore {\n    return this.child\n  }\n\n  /**\n   * Put a block to the underlying datastore\n   */\n  async put (cid: CID, block: Uint8Array, options: AbortOptions & ProgressOptions<PutBlockProgressEvents> = {}): Promise<CID> {\n    options?.signal?.throwIfAborted()\n    const releaseLock = await this.lock.readLock()\n\n    try {\n      return await this.child.put(cid, block, options)\n    } finally {\n      releaseLock()\n    }\n  }\n\n  /**\n   * Put a multiple blocks to the underlying datastore\n   */\n  async * putMany (blocks: AwaitIterable<{ cid: CID, block: Uint8Array }>, options: AbortOptions & ProgressOptions<PutManyBlocksProgressEvents> = {}): AsyncIterable<CID> {\n    options?.signal?.throwIfAborted()\n    const releaseLock = await this.lock.readLock()\n\n    try {\n      yield * this.child.putMany(blocks, options)\n    } finally {\n      releaseLock()\n    }\n  }\n\n  /**\n   * Get a block by cid\n   */\n  async get (cid: CID, options: GetOfflineOptions & AbortOptions & ProgressOptions<GetBlockProgressEvents> = {}): Promise<Uint8Array> {\n    options?.signal?.throwIfAborted()\n    const releaseLock = await this.lock.readLock()\n\n    try {\n      return await this.child.get(cid, options)\n    } finally {\n      releaseLock()\n    }\n  }\n\n  /**\n   * Get multiple blocks back from an (async) iterable of cids\n   */\n  async * getMany (cids: AwaitIterable<CID>, options: GetOfflineOptions & AbortOptions & ProgressOptions<GetManyBlocksProgressEvents> = {}): AsyncIterable<Pair> {\n    options?.signal?.throwIfAborted()\n    const releaseLock = await this.lock.readLock()\n\n    try {\n      yield * this.child.getMany(cids, options)\n    } finally {\n      releaseLock()\n    }\n  }\n\n  /**\n   * Delete a block from the blockstore\n   */\n  async delete (cid: CID, options: AbortOptions & ProgressOptions<DeleteBlockProgressEvents> = {}): Promise<void> {\n    options?.signal?.throwIfAborted()\n    const releaseLock = await this.lock.writeLock()\n\n    try {\n      if (await this.pins.isPinned(cid)) {\n        throw new Error('CID was pinned')\n      }\n\n      await this.child.delete(cid, options)\n    } finally {\n      releaseLock()\n    }\n  }\n\n  /**\n   * Delete multiple blocks from the blockstore\n   */\n  async * deleteMany (cids: AwaitIterable<CID>, options: AbortOptions & ProgressOptions<DeleteManyBlocksProgressEvents> = {}): AsyncIterable<CID> {\n    options?.signal?.throwIfAborted()\n    const releaseLock = await this.lock.writeLock()\n\n    try {\n      const storage = this\n\n      yield * this.child.deleteMany((async function * (): AsyncGenerator<CID> {\n        for await (const cid of cids) {\n          if (await storage.pins.isPinned(cid)) {\n            throw new Error('CID was pinned')\n          }\n\n          yield cid\n        }\n      }()), options)\n    } finally {\n      releaseLock()\n    }\n  }\n\n  async has (cid: CID, options: AbortOptions = {}): Promise<boolean> {\n    options?.signal?.throwIfAborted()\n    const releaseLock = await this.lock.readLock()\n\n    try {\n      return await this.child.has(cid, options)\n    } finally {\n      releaseLock()\n    }\n  }\n\n  async * getAll (options: AbortOptions & ProgressOptions<GetAllBlocksProgressEvents> = {}): AsyncIterable<Pair> {\n    options?.signal?.throwIfAborted()\n    const releaseLock = await this.lock.readLock()\n\n    try {\n      yield * this.child.getAll(options)\n    } finally {\n      releaseLock()\n    }\n  }\n\n  createSession (root: CID, options?: AbortOptions): SessionBlockstore {\n    options?.signal?.throwIfAborted()\n    return this.child.createSession(root, options)\n  }\n}\n", "import { Key } from 'interface-datastore'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport type { Datastore } from 'interface-datastore'\n\nconst DS_VERSION_KEY = new Key('/version')\nconst CURRENT_VERSION = 1\n\nexport async function assertDatastoreVersionIsCurrent (datastore: Datastore): Promise<void> {\n  if (!(await datastore.has(DS_VERSION_KEY))) {\n    await datastore.put(DS_VERSION_KEY, uint8ArrayFromString(`${CURRENT_VERSION}`))\n\n    return\n  }\n\n  const buf = await datastore.get(DS_VERSION_KEY)\n  const str = uint8ArrayToString(buf)\n  const version = parseInt(str, 10)\n\n  if (version !== CURRENT_VERSION) {\n    // TODO: write migrations when we break compatibility - for an example, see https://github.com/ipfs/js-ipfs-repo/tree/master/packages/ipfs-repo-migrations\n    throw new Error('Unknown datastore version, a datastore migration may be required')\n  }\n}\n", "import type { ArrayBufferView, ByteView } from './interface.js'\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\nexport function encode <T> (node: T): ByteView<T> {\n  return textEncoder.encode(JSON.stringify(node))\n}\n\nexport function decode <T> (data: ByteView<T> | ArrayBufferView<T>): T {\n  return JSON.parse(textDecoder.decode(data))\n}\n", "import { coerce } from '../bytes.js'\nimport type { ArrayBufferView, ByteView } from './interface.js'\n\nexport const name = 'raw'\nexport const code = 0x55\n\nexport function encode (node: Uint8Array): ByteView<Uint8Array> {\n  return coerce(node)\n}\n\nexport function decode (data: ByteView<Uint8Array> | ArrayBufferView<Uint8Array>): Uint8Array {\n  return coerce(data)\n}\n", "export function isPromise <T> (p?: any): p is Promise<T> {\n  return p?.then != null\n}\n", "/* eslint max-depth: [\"error\", 7] */\n\nimport { UnknownCodecError } from '@helia/interface'\nimport * as dagCbor from '@ipld/dag-cbor'\nimport * as dagJson from '@ipld/dag-json'\nimport * as dagPb from '@ipld/dag-pb'\nimport * as json from 'multiformats/codecs/json'\nimport * as raw from 'multiformats/codecs/raw'\nimport { isPromise } from './is-promise.js'\nimport type { Await } from '@helia/interface'\nimport type { BlockCodec } from 'multiformats/codecs/interface'\n\nexport function getCodec <T = any, Code extends number = any> (initialCodecs: Array<BlockCodec<any, any>> = [], loadCodec?: (code: number) => Await<BlockCodec<any, any>>): (code: Code) => Await<BlockCodec<Code, T>> {\n  const codecs: Record<number, BlockCodec<any, any>> = {\n    [dagPb.code]: dagPb,\n    [raw.code]: raw,\n    [dagCbor.code]: dagCbor,\n    [dagJson.code]: dagJson,\n    [json.code]: json\n  }\n\n  initialCodecs.forEach(codec => {\n    codecs[codec.code] = codec\n  })\n\n  return async (code) => {\n    let codec = codecs[code]\n\n    if (codec == null && loadCodec != null) {\n      const res = loadCodec(code)\n\n      if (isPromise(res)) {\n        codec = await res\n      } else {\n        codec = res\n      }\n\n      codecs[codec.code] = codec\n    }\n\n    if (codec != null) {\n      return codec\n    }\n\n    throw new UnknownCodecError(`Could not load codec for ${code}`)\n  }\n}\n", "import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code: 0x0 = 0x0\nconst name = 'identity'\n\nconst encode: (input: Uint8Array) => Uint8Array = coerce\n\nfunction digest (input: Uint8Array): Digest.Digest<typeof code, number> {\n  return Digest.create(code, encode(input))\n}\n\nexport const identity = { code, name, encode, digest }\n", "/* global crypto */\n\nimport { from } from './hasher.js'\n\nfunction sha (name: AlgorithmIdentifier): (data: Uint8Array) => Promise<Uint8Array> {\n  return async data => new Uint8Array(await crypto.subtle.digest(name, data))\n}\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n", "import { UnknownHashAlgorithmError } from '@helia/interface'\nimport { identity } from 'multiformats/hashes/identity'\nimport { sha256, sha512 } from 'multiformats/hashes/sha2'\nimport { isPromise } from './is-promise.js'\nimport type { Await } from '@helia/interface'\nimport type { MultihashHasher } from 'multiformats/hashes/interface'\n\nexport function getHasher (initialHashers: MultihashHasher[] = [], loadHasher?: (code: number) => Await<MultihashHasher>): (code: number) => Await<MultihashHasher> {\n  const hashers: Record<number, MultihashHasher> = {\n    [sha256.code]: sha256,\n    [sha512.code]: sha512,\n    [identity.code]: identity\n  }\n\n  initialHashers.forEach(hasher => {\n    hashers[hasher.code] = hasher\n  })\n\n  return async (code) => {\n    let hasher = hashers[code]\n\n    if (hasher == null && loadHasher != null) {\n      const res = loadHasher(code)\n\n      if (isPromise(res)) {\n        hasher = await res\n      } else {\n        hasher = res\n      }\n\n      hashers[hasher.code] = hasher\n    }\n\n    if (hasher != null) {\n      return hasher\n    }\n\n    throw new UnknownHashAlgorithmError(`No hasher configured for multihash code 0x${code.toString(16)}, please configure one. You can look up which hash this is at https://github.com/multiformats/multicodec/blob/master/table.csv`)\n  }\n}\n", "\nexport interface ClearableSignal extends AbortSignal {\n  clear: () => void\n}\n\n/**\n * Takes an array of AbortSignals and returns a single signal.\n * If any signals are aborted, the returned signal will be aborted.\n */\nexport function anySignal (signals: Array<AbortSignal | undefined | null>): ClearableSignal {\n  const controller = new globalThis.AbortController()\n\n  function onAbort (): void {\n    controller.abort()\n\n    for (const signal of signals) {\n      if (signal?.removeEventListener != null) {\n        signal.removeEventListener('abort', onAbort)\n      }\n    }\n  }\n\n  for (const signal of signals) {\n    if (signal?.aborted === true) {\n      onAbort()\n      break\n    }\n\n    if (signal?.addEventListener != null) {\n      signal.addEventListener('abort', onAbort)\n    }\n  }\n\n  function clear (): void {\n    for (const signal of signals) {\n      if (signal?.removeEventListener != null) {\n        signal.removeEventListener('abort', onAbort)\n      }\n    }\n  }\n\n  const signal = controller.signal as ClearableSignal\n  signal.clear = clear\n\n  return signal\n}\n", "import { NotFoundError } from 'interface-store'\nimport { BaseBlockstore } from './base.js'\nimport type { Blockstore, Pair } from 'interface-blockstore'\nimport type { AbortOptions, Await, AwaitIterable } from 'interface-store'\nimport type { CID } from 'multiformats/cid'\n\n// https://github.com/multiformats/multicodec/blob/d06fc6194710e8909bac64273c43f16b56ca4c34/table.csv#L2\nconst IDENTITY_CODEC = 0x00\n\nexport class IdentityBlockstore extends BaseBlockstore {\n  private readonly child?: Blockstore\n\n  constructor (child?: Blockstore) {\n    super()\n\n    this.child = child\n  }\n\n  put (key: CID, block: Uint8Array, options?: AbortOptions): Await<CID> {\n    if (key.multihash.code === IDENTITY_CODEC) {\n      options?.signal?.throwIfAborted()\n      return key\n    }\n\n    if (this.child == null) {\n      options?.signal?.throwIfAborted()\n      return key\n    }\n\n    return this.child.put(key, block, options)\n  }\n\n  get (key: CID, options?: AbortOptions): Await<Uint8Array> {\n    if (key.multihash.code === IDENTITY_CODEC) {\n      options?.signal?.throwIfAborted()\n      return key.multihash.digest\n    }\n\n    if (this.child == null) {\n      options?.signal?.throwIfAborted()\n      throw new NotFoundError()\n    }\n\n    return this.child.get(key, options)\n  }\n\n  has (key: CID, options?: AbortOptions): Await<boolean> {\n    if (key.multihash.code === IDENTITY_CODEC) {\n      options?.signal?.throwIfAborted()\n      return true\n    }\n\n    if (this.child == null) {\n      options?.signal?.throwIfAborted()\n      return false\n    }\n\n    return this.child.has(key, options)\n  }\n\n  delete (key: CID, options?: AbortOptions): Await<void> {\n    if (key.code === IDENTITY_CODEC) {\n      options?.signal?.throwIfAborted()\n      return\n    }\n\n    if (this.child != null) {\n      return this.child.delete(key, options)\n    }\n  }\n\n  getAll (options?: AbortOptions): AwaitIterable<Pair> {\n    if (this.child != null) {\n      return this.child.getAll(options)\n    }\n\n    options?.signal?.throwIfAborted()\n    return []\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * Calls a function for each value in an (async)iterable.\n *\n * The function can be sync or async.\n *\n * Async functions can be awaited on so may slow down processing of the (async)iterable.\n *\n * @example\n *\n * ```javascript\n * import each from 'it-foreach'\n * import drain from 'it-drain'\n *\n * // This can also be an iterator, generator, etc\n * const values = [0, 1, 2, 3, 4]\n *\n * // prints [0, 0], [1, 1], [2, 2], [3, 3], [4, 4]\n * const arr = drain(\n *   each(values, console.info)\n * )\n * ```\n *\n * Async sources and callbacks must be awaited:\n *\n * ```javascript\n * import each from 'it-foreach'\n * import drain from 'it-drain'\n *\n * const values = async function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * // prints [0, 0], [1, 1], [2, 2], [3, 3], [4, 4]\n * const arr = await drain(\n *   each(values(), console.info)\n * )\n * ```\n */\n\nimport peek from 'it-peekable'\n\nfunction isAsyncIterable <T> (thing: any): thing is AsyncIterable<T> {\n  return thing[Symbol.asyncIterator] != null\n}\n\nfunction isPromise <T = unknown> (thing: any): thing is Promise<T> {\n  return thing?.then != null\n}\n\n/**\n * Invokes the passed function for each item in an iterable\n */\nfunction forEach <T> (source: Iterable<T>, fn: (thing: T, index: number) => Promise<void>): AsyncGenerator<T, void, undefined>\nfunction forEach <T> (source: Iterable<T>, fn: (thing: T, index: number) => void): Generator<T, void, undefined>\nfunction forEach <T> (source: Iterable<T> | AsyncIterable<T>, fn: (thing: T, index: number) => void | Promise<void>): AsyncGenerator<T, void, undefined>\nfunction forEach <T> (source: Iterable<T> | AsyncIterable<T>, fn: (thing: T, index: number) => void | Promise<void>): AsyncGenerator<T, void, undefined> | Generator<T, void, undefined> {\n  let index = 0\n\n  if (isAsyncIterable(source)) {\n    return (async function * () {\n      for await (const val of source) {\n        const res = fn(val, index++)\n\n        if (isPromise(res)) {\n          await res\n        }\n\n        yield val\n      }\n    })()\n  }\n\n  // if fn function returns a promise we have to return an async generator\n  const peekable = peek(source)\n  const { value, done } = peekable.next()\n\n  if (done === true) {\n    return (function * () {}())\n  }\n\n  const res = fn(value, index++)\n\n  if (typeof res?.then === 'function') {\n    return (async function * () {\n      yield value\n\n      for (const val of peekable) {\n        const res = fn(val, index++)\n\n        if (isPromise(res)) {\n          await res\n        }\n\n        yield val\n      }\n    })()\n  }\n\n  const func = fn as (val: T, index: number) => void\n\n  return (function * () {\n    yield value\n\n    for (const val of peekable) {\n      func(val, index++)\n      yield val\n    }\n  })()\n}\n\nexport default forEach\n", "import { InvalidMultihashError, InvalidParametersError, setMaxListeners, start, stop } from '@libp2p/interface'\nimport { anySignal } from 'any-signal'\nimport { IdentityBlockstore } from 'blockstore-core/identity'\nimport filter from 'it-filter'\nimport forEach from 'it-foreach'\nimport { CustomProgressEvent } from 'progress-events'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { isPromise } from './is-promise.js'\nimport type { HasherLoader } from '@helia/interface'\nimport type { BlockBroker, Blocks, Pair, DeleteManyBlocksProgressEvents, DeleteBlockProgressEvents, GetBlockProgressEvents, GetManyBlocksProgressEvents, PutManyBlocksProgressEvents, PutBlockProgressEvents, GetAllBlocksProgressEvents, GetOfflineOptions, BlockRetrievalOptions, CreateSessionOptions, SessionBlockstore } from '@helia/interface/blocks'\nimport type { AbortOptions, ComponentLogger, Logger, LoggerOptions, Startable } from '@libp2p/interface'\nimport type { Blockstore } from 'interface-blockstore'\nimport type { AwaitIterable } from 'interface-store'\nimport type { CID } from 'multiformats/cid'\nimport type { MultihashDigest, MultihashHasher } from 'multiformats/hashes/interface'\nimport type { ProgressOptions } from 'progress-events'\n\nexport interface GetOptions extends AbortOptions {\n  progress?(evt: Event): void\n}\n\nexport interface StorageComponents {\n  blockstore: Blockstore\n  logger: ComponentLogger\n  blockBrokers: BlockBroker[]\n  getHasher: HasherLoader\n}\n\nclass Storage implements Blockstore {\n  protected readonly child: Blockstore\n  protected readonly getHasher: HasherLoader\n  protected log: Logger\n  protected readonly logger: ComponentLogger\n  protected readonly components: StorageComponents\n\n  /**\n   * Create a new BlockStorage\n   */\n  constructor (components: StorageComponents) {\n    this.log = components.logger.forComponent('helia:networked-storage')\n    this.logger = components.logger\n    this.components = components\n    this.child = new IdentityBlockstore(components.blockstore)\n    this.getHasher = components.getHasher\n  }\n\n  /**\n   * Put a block to the underlying datastore\n   */\n  async put (cid: CID, block: Uint8Array, options: AbortOptions & ProgressOptions<PutBlockProgressEvents> = {}): Promise<CID> {\n    if (await this.child.has(cid, options)) {\n      options.onProgress?.(new CustomProgressEvent<CID>('blocks:put:duplicate', cid))\n      return cid\n    }\n\n    options.onProgress?.(new CustomProgressEvent<CID>('blocks:put:providers:notify', cid))\n\n    await Promise.all(\n      this.components.blockBrokers.map(async broker => broker.announce?.(cid, block, options))\n    )\n\n    options.onProgress?.(new CustomProgressEvent<CID>('blocks:put:blockstore:put', cid))\n\n    return this.child.put(cid, block, options)\n  }\n\n  /**\n   * Put a multiple blocks to the underlying datastore\n   */\n  async * putMany (blocks: AwaitIterable<{ cid: CID, block: Uint8Array }>, options: AbortOptions & ProgressOptions<PutManyBlocksProgressEvents> = {}): AsyncIterable<CID> {\n    const missingBlocks = filter(blocks, async ({ cid }): Promise<boolean> => {\n      const has = await this.child.has(cid, options)\n\n      if (has) {\n        options.onProgress?.(new CustomProgressEvent<CID>('blocks:put-many:duplicate', cid))\n      }\n\n      return !has\n    })\n\n    const notifyEach = forEach(missingBlocks, async ({ cid, block }): Promise<void> => {\n      options.onProgress?.(new CustomProgressEvent<CID>('blocks:put-many:providers:notify', cid))\n      await Promise.all(\n        this.components.blockBrokers.map(async broker => broker.announce?.(cid, block, options))\n      )\n    })\n\n    options.onProgress?.(new CustomProgressEvent('blocks:put-many:blockstore:put-many'))\n    yield * this.child.putMany(notifyEach, options)\n  }\n\n  /**\n   * Get a block by cid\n   */\n  async get (cid: CID, options: GetOfflineOptions & AbortOptions & ProgressOptions<GetBlockProgressEvents> = {}): Promise<Uint8Array> {\n    if (options.offline !== true && !(await this.child.has(cid, options))) {\n      const hasher = await this.getHasher(cid.multihash.code)\n\n      // we do not have the block locally, get it from a block provider\n      options.onProgress?.(new CustomProgressEvent<CID>('blocks:get:providers:get', cid))\n      const block = await raceBlockRetrievers(cid, this.components.blockBrokers, hasher, {\n        ...options,\n        log: this.log\n      })\n      options.onProgress?.(new CustomProgressEvent<CID>('blocks:get:blockstore:put', cid))\n      await this.child.put(cid, block, options)\n\n      // notify other block providers of the new block\n      options.onProgress?.(new CustomProgressEvent<CID>('blocks:get:providers:notify', cid))\n      await Promise.all(\n        this.components.blockBrokers.map(async broker => broker.announce?.(cid, block, options))\n      )\n\n      return block\n    }\n\n    options.onProgress?.(new CustomProgressEvent<CID>('blocks:get:blockstore:get', cid))\n\n    return this.child.get(cid, options)\n  }\n\n  /**\n   * Get multiple blocks back from an (async) iterable of cids\n   */\n  async * getMany (cids: AwaitIterable<CID>, options: GetOfflineOptions & AbortOptions & ProgressOptions<GetManyBlocksProgressEvents> = {}): AsyncIterable<Pair> {\n    options.onProgress?.(new CustomProgressEvent('blocks:get-many:blockstore:get-many'))\n\n    yield * this.child.getMany(forEach(cids, async (cid): Promise<void> => {\n      if (options.offline !== true && !(await this.child.has(cid, options))) {\n        const hasher = await this.getHasher(cid.multihash.code)\n\n        // we do not have the block locally, get it from a block provider\n        options.onProgress?.(new CustomProgressEvent<CID>('blocks:get-many:providers:get', cid))\n        const block = await raceBlockRetrievers(cid, this.components.blockBrokers, hasher, {\n          ...options,\n          log: this.log\n        })\n        options.onProgress?.(new CustomProgressEvent<CID>('blocks:get-many:blockstore:put', cid))\n        await this.child.put(cid, block, options)\n\n        // notify other block providers of the new block\n        options.onProgress?.(new CustomProgressEvent<CID>('blocks:get-many:providers:notify', cid))\n        await Promise.all(\n          this.components.blockBrokers.map(async broker => broker.announce?.(cid, block, options))\n        )\n      }\n    }))\n  }\n\n  /**\n   * Delete a block from the blockstore\n   */\n  async delete (cid: CID, options: AbortOptions & ProgressOptions<DeleteBlockProgressEvents> = {}): Promise<void> {\n    options.onProgress?.(new CustomProgressEvent<CID>('blocks:delete:blockstore:delete', cid))\n\n    await this.child.delete(cid, options)\n  }\n\n  /**\n   * Delete multiple blocks from the blockstore\n   */\n  async * deleteMany (cids: AwaitIterable<CID>, options: AbortOptions & ProgressOptions<DeleteManyBlocksProgressEvents> = {}): AsyncIterable<CID> {\n    options.onProgress?.(new CustomProgressEvent('blocks:delete-many:blockstore:delete-many'))\n    yield * this.child.deleteMany((async function * (): AsyncGenerator<CID> {\n      for await (const cid of cids) {\n        yield cid\n      }\n    }()), options)\n  }\n\n  async has (cid: CID, options: AbortOptions = {}): Promise<boolean> {\n    return this.child.has(cid, options)\n  }\n\n  async * getAll (options: AbortOptions & ProgressOptions<GetAllBlocksProgressEvents> = {}): AwaitIterable<Pair> {\n    options.onProgress?.(new CustomProgressEvent('blocks:get-all:blockstore:get-many'))\n    yield * this.child.getAll(options)\n  }\n}\n\nexport type NetworkedStorageComponents = StorageComponents\n\n/**\n * Networked storage wraps a regular blockstore - when getting blocks if the\n * blocks are not present, the configured BlockBrokers will be used to fetch them.\n */\nexport class NetworkedStorage extends Storage implements Blocks, Startable {\n  private started: boolean\n\n  /**\n   * Create a new BlockStorage\n   */\n  constructor (components: NetworkedStorageComponents) {\n    super(components)\n\n    this.started = false\n  }\n\n  isStarted (): boolean {\n    return this.started\n  }\n\n  async start (): Promise<void> {\n    await start(this.child, ...this.components.blockBrokers)\n    this.started = true\n  }\n\n  async stop (): Promise<void> {\n    await stop(this.child, ...this.components.blockBrokers)\n    this.started = false\n  }\n\n  unwrap (): Blockstore {\n    return this.child\n  }\n\n  createSession (root: CID, options?: CreateSessionOptions): SessionBlockstore {\n    const blockBrokers = this.components.blockBrokers.map(broker => {\n      if (broker.createSession == null) {\n        return broker\n      }\n\n      return broker.createSession(options)\n    })\n\n    return new SessionStorage({\n      blockstore: this.child,\n      blockBrokers,\n      getHasher: this.getHasher,\n      logger: this.logger\n    }, {\n      root\n    })\n  }\n}\n\ninterface SessionStorageInit {\n  root: CID\n}\n\n/**\n * Storage subclass that can cancel any ongoing operation at any point.\n */\nclass SessionStorage extends Storage implements SessionBlockstore {\n  private readonly closeController: AbortController\n\n  constructor (components: StorageComponents, init: SessionStorageInit) {\n    super(components)\n\n    // because brokers are allowed to continue searching for providers after the\n    // session has been created, we need a way to tell them that the user has\n    // finished using the session any in-flight requests should be cancelled\n    this.closeController = new AbortController()\n    setMaxListeners(Infinity, this.closeController.signal)\n\n    this.log = components.logger.forComponent(`helia:session-storage:${init.root}`)\n  }\n\n  close (): void {\n    this.closeController.abort()\n  }\n\n  /**\n   * Put a block to the underlying datastore\n   */\n  async put (cid: CID, block: Uint8Array, options: AbortOptions & ProgressOptions<PutBlockProgressEvents> = {}): Promise<CID> {\n    const signal = anySignal([this.closeController.signal, options.signal])\n    setMaxListeners(Infinity, signal)\n\n    try {\n      return await super.put(cid, block, {\n        ...options,\n        signal\n      })\n    } finally {\n      signal.clear()\n    }\n  }\n\n  /**\n   * Put a multiple blocks to the underlying datastore\n   */\n  async * putMany (blocks: AwaitIterable<{ cid: CID, block: Uint8Array }>, options: AbortOptions & ProgressOptions<PutManyBlocksProgressEvents> = {}): AsyncIterable<CID> {\n    const signal = anySignal([this.closeController.signal, options.signal])\n    setMaxListeners(Infinity, signal)\n\n    try {\n      yield * super.putMany(blocks, {\n        ...options,\n        signal\n      })\n    } finally {\n      signal.clear()\n    }\n  }\n\n  /**\n   * Get a block by cid\n   */\n  async get (cid: CID, options: GetOfflineOptions & AbortOptions & ProgressOptions<GetBlockProgressEvents> = {}): Promise<Uint8Array> {\n    const signal = anySignal([this.closeController.signal, options.signal])\n    setMaxListeners(Infinity, signal)\n\n    try {\n      return await super.get(cid, {\n        ...options,\n        signal\n      })\n    } finally {\n      signal.clear()\n    }\n  }\n\n  /**\n   * Get multiple blocks back from an (async) iterable of cids\n   */\n  async * getMany (cids: AwaitIterable<CID>, options: GetOfflineOptions & AbortOptions & ProgressOptions<GetManyBlocksProgressEvents> = {}): AsyncIterable<Pair> {\n    const signal = anySignal([this.closeController.signal, options.signal])\n    setMaxListeners(Infinity, signal)\n\n    try {\n      yield * super.getMany(cids, {\n        ...options,\n        signal\n      })\n    } finally {\n      signal.clear()\n    }\n  }\n\n  /**\n   * Delete a block from the blockstore\n   */\n  async delete (cid: CID, options: AbortOptions & ProgressOptions<DeleteBlockProgressEvents> = {}): Promise<void> {\n    const signal = anySignal([this.closeController.signal, options.signal])\n    setMaxListeners(Infinity, signal)\n\n    try {\n      await super.delete(cid, {\n        ...options,\n        signal\n      })\n    } finally {\n      signal.clear()\n    }\n  }\n\n  /**\n   * Delete multiple blocks from the blockstore\n   */\n  async * deleteMany (cids: AwaitIterable<CID>, options: AbortOptions & ProgressOptions<DeleteManyBlocksProgressEvents> = {}): AsyncIterable<CID> {\n    const signal = anySignal([this.closeController.signal, options.signal])\n    setMaxListeners(Infinity, signal)\n\n    try {\n      yield * super.deleteMany(cids, {\n        ...options,\n        signal\n      })\n    } finally {\n      signal.clear()\n    }\n  }\n\n  async has (cid: CID, options: AbortOptions = {}): Promise<boolean> {\n    const signal = anySignal([this.closeController.signal, options.signal])\n    setMaxListeners(Infinity, signal)\n\n    try {\n      return await super.has(cid, {\n        ...options,\n        signal\n      })\n    } finally {\n      signal.clear()\n    }\n  }\n\n  async * getAll (options: AbortOptions & ProgressOptions<GetAllBlocksProgressEvents> = {}): AwaitIterable<Pair> {\n    const signal = anySignal([this.closeController.signal, options.signal])\n    setMaxListeners(Infinity, signal)\n\n    try {\n      yield * super.getAll({\n        ...options,\n        signal\n      })\n    } finally {\n      signal.clear()\n    }\n  }\n}\n\nfunction isRetrievingBlockBroker (broker: BlockBroker): broker is Required<Pick<BlockBroker, 'retrieve'>> {\n  return typeof broker.retrieve === 'function'\n}\n\nexport const getCidBlockVerifierFunction = (cid: CID, hasher: MultihashHasher): Required<BlockRetrievalOptions>['validateFn'] => {\n  if (hasher == null) {\n    throw new InvalidParametersError(`No hasher configured for multihash code 0x${cid.multihash.code.toString(16)}, please configure one. You can look up which hash this is at https://github.com/multiformats/multicodec/blob/master/table.csv`)\n  }\n\n  return async (block: Uint8Array): Promise<void> => {\n    // verify block\n    let hash: MultihashDigest<number>\n    const res = hasher.digest(block)\n\n    if (isPromise(res)) {\n      hash = await res\n    } else {\n      hash = res\n    }\n\n    if (!uint8ArrayEquals(hash.digest, cid.multihash.digest)) {\n      // if a hash mismatch occurs for a TrustlessGatewayBlockBroker, we should try another gateway\n      throw new InvalidMultihashError('Hash of downloaded block did not match multihash from passed CID')\n    }\n  }\n}\n\n/**\n * Race block providers cancelling any pending requests once the block has been\n * found.\n */\nasync function raceBlockRetrievers (cid: CID, blockBrokers: BlockBroker[], hasher: MultihashHasher, options: AbortOptions & LoggerOptions): Promise<Uint8Array> {\n  const validateFn = getCidBlockVerifierFunction(cid, hasher)\n\n  const controller = new AbortController()\n  const signal = anySignal([controller.signal, options.signal])\n  setMaxListeners(Infinity, controller.signal, signal)\n\n  const retrievers: Array<Required<Pick<BlockBroker, 'retrieve'>>> = []\n\n  for (const broker of blockBrokers) {\n    if (isRetrievingBlockBroker(broker)) {\n      retrievers.push(broker)\n    }\n  }\n\n  try {\n    return await Promise.any(\n      retrievers\n        .map(async retriever => {\n          try {\n            let blocksWereValidated = false\n            const block = await retriever.retrieve(cid, {\n              ...options,\n              signal,\n              validateFn: async (block: Uint8Array): Promise<void> => {\n                await validateFn(block)\n                blocksWereValidated = true\n              }\n            })\n\n            if (!blocksWereValidated) {\n              // the blockBroker either did not throw an error when attempting to validate the block\n              // or did not call the validateFn at all. We should validate the block ourselves\n              await validateFn(block)\n            }\n\n            return block\n          } catch (err) {\n            options.log.error('could not retrieve verified block for %c', cid, err)\n            throw err\n          }\n        })\n    )\n  } finally {\n    // we have the block from the fastest block retriever, abort any still\n    // in-flight retrieve attempts\n    controller.abort()\n    signal.clear()\n  }\n}\n", "import { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n", "import { DEFAULT_SESSION_MIN_PROVIDERS, DEFAULT_SESSION_MAX_PROVIDERS, InsufficientProvidersError } from '@helia/interface'\nimport { AbortError, TypedEventEmitter, setMaxListeners } from '@libp2p/interface'\nimport { createScalableCuckooFilter } from '@libp2p/utils/filters'\nimport { Queue } from '@libp2p/utils/queue'\nimport { base64 } from 'multiformats/bases/base64'\nimport pDefer from 'p-defer'\nimport type { BlockBroker, BlockRetrievalOptions, CreateSessionOptions } from '@helia/interface'\nimport type { AbortOptions, ComponentLogger, Logger, PeerId } from '@libp2p/interface'\nimport type { Filter } from '@libp2p/utils/filters'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { CID } from 'multiformats/cid'\nimport type { DeferredPromise } from 'p-defer'\nimport type { ProgressEvent } from 'progress-events'\n\nexport interface AbstractSessionComponents {\n  logger: ComponentLogger\n}\n\nexport interface AbstractCreateSessionOptions extends CreateSessionOptions {\n  name: string\n}\n\nexport interface BlockstoreSessionEvents<Provider> {\n  provider: CustomEvent<Provider>\n}\n\nexport abstract class AbstractSession<Provider, RetrieveBlockProgressEvents extends ProgressEvent> extends TypedEventEmitter<BlockstoreSessionEvents<Provider>> implements BlockBroker<RetrieveBlockProgressEvents> {\n  private initialPeerSearchComplete?: Promise<void>\n  private readonly requests: Map<string, Promise<Uint8Array>>\n  private readonly name: string\n  protected log: Logger\n  protected logger: ComponentLogger\n  private readonly minProviders: number\n  private readonly maxProviders: number\n  public readonly providers: Provider[]\n  private readonly evictionFilter: Filter\n  private readonly initialProviders: Array<PeerId | Multiaddr | Multiaddr[]>\n\n  constructor (components: AbstractSessionComponents, init: AbstractCreateSessionOptions) {\n    super()\n\n    setMaxListeners(Infinity, this)\n    this.name = init.name\n    this.logger = components.logger\n    this.log = components.logger.forComponent(this.name)\n    this.requests = new Map()\n    this.minProviders = init.minProviders ?? DEFAULT_SESSION_MIN_PROVIDERS\n    this.maxProviders = init.maxProviders ?? DEFAULT_SESSION_MAX_PROVIDERS\n    this.providers = []\n    this.evictionFilter = createScalableCuckooFilter(this.maxProviders)\n    this.initialProviders = init.providers ?? []\n  }\n\n  async retrieve (cid: CID, options: BlockRetrievalOptions<RetrieveBlockProgressEvents> = {}): Promise<Uint8Array> {\n    // see if we are already requesting this CID in this session\n    const cidStr = base64.encode(cid.multihash.bytes)\n    const existingJob = this.requests.get(cidStr)\n\n    if (existingJob != null) {\n      this.log('join existing request for %c', cid)\n      return existingJob\n    }\n\n    const deferred: DeferredPromise<Uint8Array> = pDefer()\n    this.requests.set(cidStr, deferred.promise)\n\n    if (this.providers.length === 0) {\n      let first = false\n\n      if (this.initialPeerSearchComplete == null) {\n        first = true\n        this.log = this.logger.forComponent(`${this.name}:${cid}`)\n        this.initialPeerSearchComplete = this.findProviders(cid, this.minProviders, options)\n      }\n\n      await this.initialPeerSearchComplete\n\n      if (first) {\n        this.log('found initial session peers for %c', cid)\n      }\n    }\n\n    let foundBlock = false\n\n    // this queue manages outgoing requests - as new peers are added to the\n    // session they will be added to the queue so we can request the current\n    // block from multiple peers as they are discovered\n    const queue = new Queue<Uint8Array, { provider: Provider, priority?: number } & AbortOptions>({\n      concurrency: this.maxProviders\n    })\n    queue.addEventListener('error', () => {})\n    queue.addEventListener('failure', (evt) => {\n      this.log.error('error querying provider %o, evicting from session', evt.detail.job.options.provider, evt.detail.error)\n      this.evict(evt.detail.job.options.provider)\n    })\n    queue.addEventListener('success', (evt) => {\n      // peer has sent block, return it to the caller\n      foundBlock = true\n      deferred.resolve(evt.detail.result)\n    })\n    queue.addEventListener('idle', () => {\n      if (foundBlock || options.signal?.aborted === true) {\n        this.log.trace('session idle, found block')\n        // we either found the block or the user gave up\n        return\n      }\n\n      // find more session peers and retry\n      Promise.resolve()\n        .then(async () => {\n          this.log('no session peers had block for for %c, finding new providers', cid)\n\n          // evict this.minProviders random providers to make room for more\n          for (let i = 0; i < this.minProviders; i++) {\n            if (this.providers.length === 0) {\n              break\n            }\n\n            const provider = this.providers[Math.floor(Math.random() * this.providers.length)]\n            this.evict(provider)\n          }\n\n          // find new providers for the CID\n          await this.findProviders(cid, this.minProviders, options)\n\n          // keep trying until the abort signal fires\n          this.log('found new providers re-retrieving %c', cid)\n          this.requests.delete(cidStr)\n          deferred.resolve(await this.retrieve(cid, options))\n        })\n        .catch(err => {\n          this.log.error('could not find new providers for %c', cid, err)\n          deferred.reject(err)\n        })\n    })\n\n    const peerAddedToSessionListener = (event: CustomEvent<Provider>): void => {\n      queue.add(async () => {\n        return this.queryProvider(cid, event.detail, options)\n      }, {\n        provider: event.detail\n      })\n        .catch(err => {\n          if (options.signal?.aborted === true) {\n            // skip logging error if signal was aborted because abort can happen\n            // on success (e.g. another session found the block)\n            return\n          }\n\n          this.log.error('error retrieving session block for %c', cid, err)\n        })\n    }\n\n    // add new session peers to query as they are discovered\n    this.addEventListener('provider', peerAddedToSessionListener)\n\n    // query each session peer directly\n    Promise.all([...this.providers].map(async (provider) => {\n      return queue.add(async () => {\n        return this.queryProvider(cid, provider, options)\n      }, {\n        provider\n      })\n    }))\n      .catch(err => {\n        if (options.signal?.aborted === true) {\n          // skip logging error if signal was aborted because abort can happen\n          // on success (e.g. another session found the block)\n          return\n        }\n\n        this.log.error('error retrieving session block for %c', cid, err)\n      })\n\n    const signalAbortedListener = (): void => {\n      deferred.reject(new AbortError(options.signal?.reason ?? 'Session aborted'))\n      queue.abort()\n    }\n\n    options.signal?.addEventListener('abort', signalAbortedListener)\n\n    try {\n      return await deferred.promise\n    } finally {\n      this.removeEventListener('provider', peerAddedToSessionListener)\n      options.signal?.removeEventListener('abort', signalAbortedListener)\n      queue.clear()\n      this.requests.delete(cidStr)\n    }\n  }\n\n  evict (provider: Provider): void {\n    this.evictionFilter.add(this.toEvictionKey(provider))\n    const index = this.providers.findIndex(prov => this.equals(prov, provider))\n\n    if (index === -1) {\n      return\n    }\n\n    this.providers.splice(index, 1)\n  }\n\n  isEvicted (provider: Provider): boolean {\n    return this.evictionFilter.has(this.toEvictionKey(provider))\n  }\n\n  hasProvider (provider: Provider): boolean {\n    // dedupe existing gateways\n    if (this.providers.find(prov => this.equals(prov, provider)) != null) {\n      return true\n    }\n\n    // dedupe failed session peers\n    if (this.isEvicted(provider)) {\n      return true\n    }\n\n    return false\n  }\n\n  private async findProviders (cid: CID, count: number, options: AbortOptions): Promise<void> {\n    const deferred: DeferredPromise<void> = pDefer()\n    let found = 0\n\n    // run async to resolve the deferred promise when `count` providers are\n    // found but continue util this.providers reaches this.maxProviders\n    void Promise.resolve()\n      .then(async () => {\n        this.log('finding %d-%d new provider(s) for %c', count, this.maxProviders, cid)\n\n        // process any specific providers for this session\n        if (this.initialProviders.length > 0) {\n          while (found < count && this.initialProviders.length > 0) {\n            const prov = this.initialProviders.pop()\n\n            if (prov == null) {\n              break\n            }\n\n            const provider = await this.convertToProvider(prov, options)\n\n            if (options.signal?.aborted === true) {\n              break\n            }\n\n            if (provider == null) {\n              continue\n            }\n\n            if (this.hasProvider(provider)) {\n              continue\n            }\n\n            this.log('found %d/%d new providers', found, this.maxProviders)\n            this.providers.push(provider)\n\n            // let the new peer join current queries\n            this.safeDispatchEvent('provider', {\n              detail: provider\n            })\n\n            found++\n\n            if (found === count) {\n              this.log('session is ready')\n              deferred.resolve()\n              // continue finding peers until we reach this.maxProviders\n            }\n\n            if (this.providers.length === this.maxProviders) {\n              this.log('found max session peers', found)\n              break\n            }\n          }\n        }\n\n        // still not got enough providers, search routing for more\n        if (found < this.maxProviders) {\n          for await (const provider of this.findNewProviders(cid, options)) {\n            if (found === this.maxProviders || options.signal?.aborted === true) {\n              break\n            }\n\n            if (this.hasProvider(provider)) {\n              continue\n            }\n\n            this.log('found %d/%d new providers', found, this.maxProviders)\n            this.providers.push(provider)\n\n            // let the new peer join current queries\n            this.safeDispatchEvent('provider', {\n              detail: provider\n            })\n\n            found++\n\n            if (found === count) {\n              this.log('session is ready')\n              deferred.resolve()\n              // continue finding peers until we reach this.maxProviders\n            }\n\n            if (this.providers.length === this.maxProviders) {\n              this.log('found max session peers', found)\n              break\n            }\n          }\n        }\n\n        this.log('found %d/%d new session peers', found, this.maxProviders)\n\n        if (found < count) {\n          throw new InsufficientProvidersError(`Found ${found} of ${count} ${this.name} providers for ${cid}`)\n        }\n      })\n      .catch(err => {\n        this.log.error('error searching routing for potential session peers for %c', cid, err.errors ?? err)\n        deferred.reject(err)\n      })\n\n    return deferred.promise\n  }\n\n  /**\n   * If this session was created with specific providers, convert one of them\n   * into the format required or return `undefined` if the provider is not\n   * compatible with this session implementation\n   */\n  abstract convertToProvider (provider: PeerId | Multiaddr | Multiaddr[], options?: AbortOptions): Promise<Provider | undefined>\n\n  /**\n   * This method should search for new providers and yield them.\n   */\n  abstract findNewProviders (cid: CID, options: AbortOptions): AsyncGenerator<Provider>\n\n  /**\n   * The subclass should contact the provider and request the block from it.\n   *\n   * If the provider cannot provide the block an error should be thrown.\n   *\n   * The provider will then be excluded from ongoing queries.\n   */\n  abstract queryProvider (cid: CID, provider: Provider, options: AbortOptions): Promise<Uint8Array>\n\n  /**\n   * Turn a provider into a concise Uint8Array representation for use in a Bloom\n   * filter\n   */\n  abstract toEvictionKey (provider: Provider): Uint8Array | string\n\n  /**\n   * Return `true` if we consider one provider to be the same as another\n   */\n  abstract equals (providerA: Provider, providerB: Provider): boolean\n}\n", "/**\n * @packageDocumentation\n *\n * Exports a `Helia` class that implements the Helia API.\n *\n * In general you should use the `helia` or `@helia/http` modules instead which\n * pre-configure Helia for certain use-cases (p2p or pure-HTTP).\n *\n * @example\n *\n * ```typescript\n * import { Helia } from '@helia/utils'\n * import type { HeliaInit } from '@helia/utils'\n *\n * const node = new Helia({\n *   // ...options\n * } as HeliaInit)\n * ```\n */\n\nimport { contentRoutingSymbol, peerRoutingSymbol, start, stop } from '@libp2p/interface'\nimport { defaultLogger } from '@libp2p/logger'\nimport { dns } from '@multiformats/dns'\nimport drain from 'it-drain'\nimport { CustomProgressEvent } from 'progress-events'\nimport { PinsImpl } from './pins.js'\nimport { Routing as RoutingClass } from './routing.js'\nimport { BlockStorage } from './storage.js'\nimport { assertDatastoreVersionIsCurrent } from './utils/datastore-version.js'\nimport { getCodec } from './utils/get-codec.js'\nimport { getHasher } from './utils/get-hasher.js'\nimport { NetworkedStorage } from './utils/networked-storage.js'\nimport type { BlockStorageInit } from './storage.js'\nimport type { Await, CodecLoader, GCOptions, HasherLoader, Helia as HeliaInterface, Routing } from '@helia/interface'\nimport type { BlockBroker } from '@helia/interface/blocks'\nimport type { Pins } from '@helia/interface/pins'\nimport type { ComponentLogger, Logger, Metrics } from '@libp2p/interface'\nimport type { DNS } from '@multiformats/dns'\nimport type { Blockstore } from 'interface-blockstore'\nimport type { Datastore } from 'interface-datastore'\nimport type { BlockCodec } from 'multiformats'\nimport type { CID } from 'multiformats/cid'\nimport type { MultihashHasher } from 'multiformats/hashes/interface'\n\nexport { AbstractSession } from './abstract-session.js'\nexport type { AbstractCreateSessionOptions, BlockstoreSessionEvents, AbstractSessionComponents } from './abstract-session.js'\n\nexport type { BlockStorage, BlockStorageInit }\n\n/**\n * Options used to create a Helia node.\n */\nexport interface HeliaInit {\n  /**\n   * The blockstore is where blocks are stored\n   */\n  blockstore: Blockstore\n\n  /**\n   * The datastore is where data is stored\n   */\n  datastore: Datastore\n\n  /**\n   * By default sha256, sha512 and identity hashes are supported for\n   * bitswap operations. To bitswap blocks with CIDs using other hashes\n   * pass appropriate MultihashHashers here.\n   */\n  hashers?: MultihashHasher[]\n\n  /**\n   * An optional function that can load a MultihashHasher on demand. May return\n   * a promise.\n   */\n  loadHasher?(code: number): Await<MultihashHasher>\n\n  /**\n   * In order to pin CIDs that correspond to a DAG, it's necessary to know\n   * how to traverse that DAG.  DAGWalkers take a block and yield any CIDs\n   * encoded within that block.\n   */\n  codecs?: Array<BlockCodec<any, any>>\n\n  /**\n   * An optional function that can load a BlockCodec on demand. May return a\n   * promise.\n   */\n  loadCodec?(code: number): Await<BlockCodec<any, any>>\n\n  /**\n   * A list of strategies used to fetch blocks when they are not present in\n   * the local blockstore\n   */\n  blockBrokers: Array<(components: any) => BlockBroker>\n\n  /**\n   * Garbage collection requires preventing blockstore writes during searches\n   * for unpinned blocks as DAGs are typically pinned after they've been\n   * imported - without locking this could lead to the deletion of blocks while\n   * they are being added to the blockstore.\n   *\n   * By default this lock is held on the current process and other processes\n   * will contact this process for access.\n   *\n   * If Helia is being run in multiple processes, one process must hold the GC\n   * lock so use this option to control which process that is.\n   *\n   * @default true\n   */\n  holdGcLock?: boolean\n\n  /**\n   * An optional logging component to pass to libp2p. If not specified the\n   * default implementation from libp2p will be used.\n   */\n  logger?: ComponentLogger\n\n  /**\n   * Routers perform operations such as looking up content providers,\n   * information about network peers or getting/putting records.\n   */\n  routers?: Array<Partial<Routing>>\n\n  /**\n   * During provider lookups, peers can be returned from routing implementations\n   * with no multiaddrs.\n   *\n   * This can happen when they've been retrieved from network peers that only\n   * store multiaddrs for a limited amount of time.\n   *\n   * When this happens the peer's info has to be looked up with a further query.\n   *\n   * To not have this query block the yielding of other providers returned with\n   * multiaddrs, a separate queue is used to perform this lookup.\n   *\n   * This config value controls the concurrency of that queue.\n   *\n   * @default 5\n   */\n  providerLookupConcurrency?: number\n\n  /**\n   * Components used by subclasses\n   */\n  components?: Record<string, any>\n\n  /**\n   * An optional DNS implementation used to perform queries for DNS records.\n   */\n  dns?: DNS\n\n  /**\n   * A metrics object that can be used to collected arbitrary stats about node\n   * usage.\n   */\n  metrics?: Metrics\n}\n\ninterface Components {\n  blockstore: Blockstore\n  datastore: Datastore\n  logger: ComponentLogger\n  blockBrokers: BlockBroker[]\n  routing: Routing\n  dns: DNS\n  metrics?: Metrics\n  getCodec: CodecLoader\n  getHasher: HasherLoader\n}\n\nexport class Helia implements HeliaInterface {\n  public blockstore: BlockStorage\n  public datastore: Datastore\n  public pins: Pins\n  public logger: ComponentLogger\n  public routing: Routing\n  public getCodec: CodecLoader\n  public getHasher: HasherLoader\n  public dns: DNS\n  public metrics?: Metrics\n  private readonly log: Logger\n\n  constructor (init: HeliaInit) {\n    this.logger = init.logger ?? defaultLogger()\n    this.log = this.logger.forComponent('helia')\n    this.getHasher = getHasher(init.hashers, init.loadHasher)\n    this.getCodec = getCodec(init.codecs, init.loadCodec)\n    this.dns = init.dns ?? dns()\n    this.metrics = init.metrics\n\n    // @ts-expect-error routing is not set\n    const components: Components = {\n      blockstore: init.blockstore,\n      datastore: init.datastore,\n      logger: this.logger,\n      blockBrokers: [],\n      getHasher: this.getHasher,\n      getCodec: this.getCodec,\n      dns: this.dns,\n      metrics: this.metrics,\n      ...(init.components ?? {})\n    }\n\n    this.routing = components.routing = new RoutingClass(components, {\n      routers: (init.routers ?? []).flatMap((router: any) => {\n        // if the router itself is a router\n        const routers = [\n          router\n        ]\n\n        // if the router provides a libp2p-style ContentRouter\n        if (router[contentRoutingSymbol] != null) {\n          routers.push(router[contentRoutingSymbol])\n        }\n\n        // if the router provides a libp2p-style PeerRouter\n        if (router[peerRoutingSymbol] != null) {\n          routers.push(router[peerRoutingSymbol])\n        }\n\n        return routers\n      }),\n      providerLookupConcurrency: init.providerLookupConcurrency\n    })\n\n    const networkedStorage = new NetworkedStorage(components)\n    this.pins = new PinsImpl(init.datastore, networkedStorage, this.getCodec)\n    this.blockstore = new BlockStorage(networkedStorage, this.pins, {\n      holdGcLock: init.holdGcLock ?? true\n    })\n    this.datastore = init.datastore\n\n    components.blockBrokers = init.blockBrokers.map((fn) => {\n      return fn(components)\n    })\n  }\n\n  async start (): Promise<void> {\n    await assertDatastoreVersionIsCurrent(this.datastore)\n    await start(\n      this.blockstore,\n      this.datastore,\n      this.routing\n    )\n  }\n\n  async stop (): Promise<void> {\n    await stop(\n      this.blockstore,\n      this.datastore,\n      this.routing\n    )\n  }\n\n  async gc (options: GCOptions = {}): Promise<void> {\n    const releaseLock = await this.blockstore.lock.writeLock()\n\n    try {\n      const helia = this\n      const blockstore = this.blockstore.unwrap()\n\n      this.log('gc start')\n\n      await drain(blockstore.deleteMany((async function * (): AsyncGenerator<CID> {\n        for await (const { cid } of blockstore.getAll()) {\n          try {\n            if (await helia.pins.isPinned(cid, options)) {\n              continue\n            }\n\n            yield cid\n\n            options.onProgress?.(new CustomProgressEvent<CID>('helia:gc:deleted', cid))\n          } catch (err: any) {\n            helia.log.error('Error during gc', err)\n            options.onProgress?.(new CustomProgressEvent<Error>('helia:gc:error', err))\n          }\n        }\n      }())))\n    } finally {\n      releaseLock()\n    }\n\n    this.log('gc finished')\n  }\n}\n", "import { Helia } from '@helia/utils'\nimport type { BlockBroker } from './index.js'\nimport type { HeliaInit } from '@helia/utils'\nimport type { Libp2p } from '@libp2p/interface'\nimport type { Blockstore } from 'interface-blockstore'\nimport type { Datastore } from 'interface-datastore'\n\nexport interface HeliaP2PInit<T extends Libp2p = Libp2p> extends HeliaInit {\n  libp2p: T\n  blockstore: Blockstore\n  datastore: Datastore\n  blockBrokers: Array<(components: any) => BlockBroker>\n}\n\nexport class HeliaP2P<T extends Libp2p> extends Helia {\n  public libp2p: T\n\n  constructor (init: HeliaP2PInit<T>) {\n    super({\n      ...init,\n      components: {\n        libp2p: init.libp2p\n      }\n    })\n\n    this.libp2p = init.libp2p\n  }\n\n  async start (): Promise<void> {\n    await super.start()\n    await this.libp2p.start()\n  }\n\n  async stop (): Promise<void> {\n    await super.stop()\n    await this.libp2p.stop()\n  }\n}\n", "// Maximum length of the length section of the message\nexport const MAX_LENGTH_LENGTH = 8 // Varint.encode(Number.MAX_SAFE_INTEGER).length\n// Maximum length of the data section of the message\nexport const MAX_DATA_LENGTH = 1024 * 1024 * 4\n", "/**\n * The reported length of the next data message was not a positive integer\n */\nexport class InvalidMessageLengthError extends Error {\n  name = 'InvalidMessageLengthError'\n  code = 'ERR_INVALID_MSG_LENGTH'\n}\n\n/**\n * The reported length of the next data message was larger than the configured\n * max allowable value\n */\nexport class InvalidDataLengthError extends Error {\n  name = 'InvalidDataLengthError'\n  code = 'ERR_MSG_DATA_TOO_LONG'\n}\n\n/**\n * The varint used to specify the length of the next data message contained more\n * bytes than the configured max allowable value\n */\nexport class InvalidDataLengthLengthError extends Error {\n  name = 'InvalidDataLengthLengthError'\n  code = 'ERR_MSG_LENGTH_TOO_LONG'\n}\n\n/**\n * The incoming stream ended before the expected number of bytes were read\n */\nexport class UnexpectedEOFError extends Error {\n  name = 'UnexpectedEOFError'\n  code = 'ERR_UNEXPECTED_EOF'\n}\n", "export function isAsyncIterable <T> (thing: any): thing is AsyncIterable<T> {\n  return thing[Symbol.asyncIterator] != null\n}\n", "import * as varint from 'uint8-varint'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { allocUnsafe } from 'uint8arrays/alloc'\nimport { MAX_DATA_LENGTH } from './constants.js'\nimport { InvalidDataLengthError } from './errors.js'\nimport { isAsyncIterable } from './utils.js'\nimport type { EncoderOptions, LengthEncoderFunction } from './index.js'\nimport type { Source } from 'it-stream-types'\n\n// Helper function to validate the chunk size against maxDataLength\nfunction validateMaxDataLength (chunk: Uint8Array | Uint8ArrayList, maxDataLength: number): void {\n  if (chunk.byteLength > maxDataLength) {\n    throw new InvalidDataLengthError('Message length too long')\n  }\n}\n\nconst defaultEncoder: LengthEncoderFunction = (length) => {\n  const lengthLength = varint.encodingLength(length)\n  const lengthBuf = allocUnsafe(lengthLength)\n\n  varint.encode(length, lengthBuf)\n\n  defaultEncoder.bytes = lengthLength\n\n  return lengthBuf\n}\ndefaultEncoder.bytes = 0\n\nexport function encode (source: Iterable<Uint8ArrayList | Uint8Array>, options?: EncoderOptions): Generator<Uint8Array, void, undefined>\nexport function encode (source: Source<Uint8ArrayList | Uint8Array>, options?: EncoderOptions): AsyncGenerator<Uint8Array, void, undefined>\nexport function encode (source: Source<Uint8ArrayList | Uint8Array>, options?: EncoderOptions): Generator<Uint8Array, void, undefined> | AsyncGenerator<Uint8Array, void, undefined> {\n  options = options ?? {}\n\n  const encodeLength = options.lengthEncoder ?? defaultEncoder\n  const maxDataLength = options?.maxDataLength ?? MAX_DATA_LENGTH\n\n  function * maybeYield (chunk: Uint8Array | Uint8ArrayList): Generator<Uint8Array, void, undefined> {\n    validateMaxDataLength(chunk, maxDataLength)\n\n    // length + data\n    const length = encodeLength(chunk.byteLength)\n\n    // yield only Uint8Arrays\n    if (length instanceof Uint8Array) {\n      yield length\n    } else {\n      yield * length\n    }\n\n    // yield only Uint8Arrays\n    if (chunk instanceof Uint8Array) {\n      yield chunk\n    } else {\n      yield * chunk\n    }\n  }\n\n  if (isAsyncIterable(source)) {\n    return (async function * () {\n      for await (const chunk of source) {\n        yield * maybeYield(chunk)\n      }\n    })()\n  }\n\n  return (function * () {\n    for (const chunk of source) {\n      yield * maybeYield(chunk)\n    }\n  })()\n}\n\nencode.single = (chunk: Uint8ArrayList | Uint8Array, options?: EncoderOptions) => {\n  options = options ?? {}\n  const encodeLength = options.lengthEncoder ?? defaultEncoder\n  const maxDataLength = options?.maxDataLength ?? MAX_DATA_LENGTH\n\n  validateMaxDataLength(chunk, maxDataLength)\n\n  return new Uint8ArrayList(\n    encodeLength(chunk.byteLength),\n    chunk\n  )\n}\n", "/* eslint max-depth: [\"error\", 6] */\n\nimport * as varint from 'uint8-varint'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { MAX_DATA_LENGTH, MAX_LENGTH_LENGTH } from './constants.js'\nimport { InvalidDataLengthError, InvalidDataLengthLengthError, InvalidMessageLengthError, UnexpectedEOFError } from './errors.js'\nimport { isAsyncIterable } from './utils.js'\nimport type { DecoderOptions, LengthDecoderFunction } from './index.js'\nimport type { Reader } from 'it-reader'\nimport type { Source } from 'it-stream-types'\n\nenum ReadMode {\n  LENGTH,\n  DATA\n}\n\nconst defaultDecoder: LengthDecoderFunction = (buf) => {\n  const length = varint.decode(buf)\n  defaultDecoder.bytes = varint.encodingLength(length)\n\n  return length\n}\ndefaultDecoder.bytes = 0\n\nexport function decode (source: Iterable<Uint8ArrayList | Uint8Array>, options?: DecoderOptions): Generator<Uint8ArrayList, void, unknown>\nexport function decode (source: Source<Uint8ArrayList | Uint8Array>, options?: DecoderOptions): AsyncGenerator<Uint8ArrayList, void, unknown>\nexport function decode (source: Source<Uint8ArrayList | Uint8Array>, options?: DecoderOptions): Generator<Uint8ArrayList, void, unknown> | AsyncGenerator<Uint8ArrayList, void, unknown> {\n  const buffer = new Uint8ArrayList()\n  let mode = ReadMode.LENGTH\n  let dataLength = -1\n\n  const lengthDecoder = options?.lengthDecoder ?? defaultDecoder\n  const maxLengthLength = options?.maxLengthLength ?? MAX_LENGTH_LENGTH\n  const maxDataLength = options?.maxDataLength ?? MAX_DATA_LENGTH\n\n  function * maybeYield (): Generator<Uint8ArrayList> {\n    while (buffer.byteLength > 0) {\n      if (mode === ReadMode.LENGTH) {\n        // read length, ignore errors for short reads\n        try {\n          dataLength = lengthDecoder(buffer)\n\n          if (dataLength < 0) {\n            throw new InvalidMessageLengthError('Invalid message length')\n          }\n\n          if (dataLength > maxDataLength) {\n            throw new InvalidDataLengthError('Message length too long')\n          }\n\n          const dataLengthLength = lengthDecoder.bytes\n          buffer.consume(dataLengthLength)\n\n          if (options?.onLength != null) {\n            options.onLength(dataLength)\n          }\n\n          mode = ReadMode.DATA\n        } catch (err: any) {\n          if (err instanceof RangeError) {\n            if (buffer.byteLength > maxLengthLength) {\n              throw new InvalidDataLengthLengthError('Message length length too long')\n            }\n\n            break\n          }\n\n          throw err\n        }\n      }\n\n      if (mode === ReadMode.DATA) {\n        if (buffer.byteLength < dataLength) {\n          // not enough data, wait for more\n          break\n        }\n\n        const data = buffer.sublist(0, dataLength)\n        buffer.consume(dataLength)\n\n        if (options?.onData != null) {\n          options.onData(data)\n        }\n\n        yield data\n\n        mode = ReadMode.LENGTH\n      }\n    }\n  }\n\n  if (isAsyncIterable(source)) {\n    return (async function * () {\n      for await (const buf of source) {\n        buffer.append(buf)\n\n        yield * maybeYield()\n      }\n\n      if (buffer.byteLength > 0) {\n        throw new UnexpectedEOFError('Unexpected end of input')\n      }\n    })()\n  }\n\n  return (function * () {\n    for (const buf of source) {\n      buffer.append(buf)\n\n      yield * maybeYield()\n    }\n\n    if (buffer.byteLength > 0) {\n      throw new UnexpectedEOFError('Unexpected end of input')\n    }\n  })()\n}\n\ndecode.fromReader = (reader: Reader, options?: DecoderOptions) => {\n  let byteLength = 1 // Read single byte chunks until the length is known\n\n  const varByteSource = (async function * () {\n    while (true) {\n      try {\n        const { done, value } = await reader.next(byteLength)\n\n        if (done === true) {\n          return\n        }\n\n        if (value != null) {\n          yield value\n        }\n      } catch (err: any) {\n        if (err.code === 'ERR_UNDER_READ') {\n          return { done: true, value: null }\n        }\n        throw err\n      } finally {\n        // Reset the byteLength so we continue to check for varints\n        byteLength = 1\n      }\n    }\n  }())\n\n  /**\n   * Once the length has been parsed, read chunk for that length\n   */\n  const onLength = (l: number): void => { byteLength = l }\n  return decode(varByteSource, {\n    ...(options ?? {}),\n    onLength\n  })\n}\n", "export const BITSWAP_120 = '/ipfs/bitswap/1.2.0'\nexport const DEFAULT_MAX_SIZE_REPLACE_HAS_WITH_BLOCK = 1024\nexport const DEFAULT_MAX_INBOUND_STREAMS = 1024\nexport const DEFAULT_MAX_OUTBOUND_STREAMS = 1024\nexport const DEFAULT_MESSAGE_RECEIVE_TIMEOUT = 5000\nexport const DEFAULT_MESSAGE_SEND_DELAY = 10\nexport const DEFAULT_MESSAGE_SEND_TIMEOUT = 5000\nexport const DEFAULT_MESSAGE_SEND_CONCURRENCY = 50\nexport const DEFAULT_RUN_ON_TRANSIENT_CONNECTIONS = false\nexport const DEFAULT_SESSION_ROOT_PRIORITY = 1\nexport const DEFAULT_MAX_PROVIDERS_PER_REQUEST = 3\nexport const DEFAULT_MAX_OUTGOING_MESSAGE_SIZE = 1024 * 1024 * 4\nexport const DEFAULT_MAX_INCOMING_MESSAGE_SIZE = DEFAULT_MAX_OUTGOING_MESSAGE_SIZE\n", "import { decodeMessage, encodeMessage, enumeration, MaxLengthError, message } from 'protons-runtime'\nimport { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc'\nimport type { Codec, DecodeOptions } from 'protons-runtime'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport enum WantType {\n  WantBlock = 'WantBlock',\n  WantHave = 'WantHave'\n}\n\nenum __WantTypeValues {\n  WantBlock = 0,\n  WantHave = 1\n}\n\nexport namespace WantType {\n  export const codec = (): Codec<WantType> => {\n    return enumeration<WantType>(__WantTypeValues)\n  }\n}\nexport interface WantlistEntry {\n  cid: Uint8Array\n  priority: number\n  cancel?: boolean\n  wantType?: WantType\n  sendDontHave?: boolean\n}\n\nexport namespace WantlistEntry {\n  let _codec: Codec<WantlistEntry>\n\n  export const codec = (): Codec<WantlistEntry> => {\n    if (_codec == null) {\n      _codec = message<WantlistEntry>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if ((obj.cid != null && obj.cid.byteLength > 0)) {\n          w.uint32(10)\n          w.bytes(obj.cid)\n        }\n\n        if ((obj.priority != null && obj.priority !== 0)) {\n          w.uint32(16)\n          w.int32(obj.priority)\n        }\n\n        if (obj.cancel != null) {\n          w.uint32(24)\n          w.bool(obj.cancel)\n        }\n\n        if (obj.wantType != null) {\n          w.uint32(32)\n          WantType.codec().encode(obj.wantType, w)\n        }\n\n        if (obj.sendDontHave != null) {\n          w.uint32(40)\n          w.bool(obj.sendDontHave)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          cid: uint8ArrayAlloc(0),\n          priority: 0\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.cid = reader.bytes()\n              break\n            }\n            case 2: {\n              obj.priority = reader.int32()\n              break\n            }\n            case 3: {\n              obj.cancel = reader.bool()\n              break\n            }\n            case 4: {\n              obj.wantType = WantType.codec().decode(reader)\n              break\n            }\n            case 5: {\n              obj.sendDontHave = reader.bool()\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<WantlistEntry>): Uint8Array => {\n    return encodeMessage(obj, WantlistEntry.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<WantlistEntry>): WantlistEntry => {\n    return decodeMessage(buf, WantlistEntry.codec(), opts)\n  }\n}\n\nexport interface Wantlist {\n  entries: WantlistEntry[]\n  full?: boolean\n}\n\nexport namespace Wantlist {\n  let _codec: Codec<Wantlist>\n\n  export const codec = (): Codec<Wantlist> => {\n    if (_codec == null) {\n      _codec = message<Wantlist>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.entries != null) {\n          for (const value of obj.entries) {\n            w.uint32(10)\n            WantlistEntry.codec().encode(value, w)\n          }\n        }\n\n        if (obj.full != null) {\n          w.uint32(16)\n          w.bool(obj.full)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          entries: []\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              if (opts.limits?.entries != null && obj.entries.length === opts.limits.entries) {\n                throw new MaxLengthError('Decode error - map field \"entries\" had too many elements')\n              }\n\n              obj.entries.push(WantlistEntry.codec().decode(reader, reader.uint32(), {\n                limits: opts.limits?.entries$\n              }))\n              break\n            }\n            case 2: {\n              obj.full = reader.bool()\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Wantlist>): Uint8Array => {\n    return encodeMessage(obj, Wantlist.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Wantlist>): Wantlist => {\n    return decodeMessage(buf, Wantlist.codec(), opts)\n  }\n}\n\nexport interface Block {\n  prefix: Uint8Array\n  data: Uint8Array\n}\n\nexport namespace Block {\n  let _codec: Codec<Block>\n\n  export const codec = (): Codec<Block> => {\n    if (_codec == null) {\n      _codec = message<Block>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if ((obj.prefix != null && obj.prefix.byteLength > 0)) {\n          w.uint32(10)\n          w.bytes(obj.prefix)\n        }\n\n        if ((obj.data != null && obj.data.byteLength > 0)) {\n          w.uint32(18)\n          w.bytes(obj.data)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          prefix: uint8ArrayAlloc(0),\n          data: uint8ArrayAlloc(0)\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.prefix = reader.bytes()\n              break\n            }\n            case 2: {\n              obj.data = reader.bytes()\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Block>): Uint8Array => {\n    return encodeMessage(obj, Block.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Block>): Block => {\n    return decodeMessage(buf, Block.codec(), opts)\n  }\n}\n\nexport enum BlockPresenceType {\n  HaveBlock = 'HaveBlock',\n  DoNotHaveBlock = 'DoNotHaveBlock'\n}\n\nenum __BlockPresenceTypeValues {\n  HaveBlock = 0,\n  DoNotHaveBlock = 1\n}\n\nexport namespace BlockPresenceType {\n  export const codec = (): Codec<BlockPresenceType> => {\n    return enumeration<BlockPresenceType>(__BlockPresenceTypeValues)\n  }\n}\nexport interface BlockPresence {\n  cid: Uint8Array\n  type: BlockPresenceType\n}\n\nexport namespace BlockPresence {\n  let _codec: Codec<BlockPresence>\n\n  export const codec = (): Codec<BlockPresence> => {\n    if (_codec == null) {\n      _codec = message<BlockPresence>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if ((obj.cid != null && obj.cid.byteLength > 0)) {\n          w.uint32(10)\n          w.bytes(obj.cid)\n        }\n\n        if (obj.type != null && __BlockPresenceTypeValues[obj.type] !== 0) {\n          w.uint32(16)\n          BlockPresenceType.codec().encode(obj.type, w)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          cid: uint8ArrayAlloc(0),\n          type: BlockPresenceType.HaveBlock\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.cid = reader.bytes()\n              break\n            }\n            case 2: {\n              obj.type = BlockPresenceType.codec().decode(reader)\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<BlockPresence>): Uint8Array => {\n    return encodeMessage(obj, BlockPresence.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<BlockPresence>): BlockPresence => {\n    return decodeMessage(buf, BlockPresence.codec(), opts)\n  }\n}\n\nexport interface BitswapMessage {\n  wantlist?: Wantlist\n  blocks: Block[]\n  blockPresences: BlockPresence[]\n  pendingBytes: number\n}\n\nexport namespace BitswapMessage {\n  let _codec: Codec<BitswapMessage>\n\n  export const codec = (): Codec<BitswapMessage> => {\n    if (_codec == null) {\n      _codec = message<BitswapMessage>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.wantlist != null) {\n          w.uint32(10)\n          Wantlist.codec().encode(obj.wantlist, w)\n        }\n\n        if (obj.blocks != null) {\n          for (const value of obj.blocks) {\n            w.uint32(26)\n            Block.codec().encode(value, w)\n          }\n        }\n\n        if (obj.blockPresences != null) {\n          for (const value of obj.blockPresences) {\n            w.uint32(34)\n            BlockPresence.codec().encode(value, w)\n          }\n        }\n\n        if ((obj.pendingBytes != null && obj.pendingBytes !== 0)) {\n          w.uint32(40)\n          w.int32(obj.pendingBytes)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          blocks: [],\n          blockPresences: [],\n          pendingBytes: 0\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.wantlist = Wantlist.codec().decode(reader, reader.uint32(), {\n                limits: opts.limits?.wantlist\n              })\n              break\n            }\n            case 3: {\n              if (opts.limits?.blocks != null && obj.blocks.length === opts.limits.blocks) {\n                throw new MaxLengthError('Decode error - map field \"blocks\" had too many elements')\n              }\n\n              obj.blocks.push(Block.codec().decode(reader, reader.uint32(), {\n                limits: opts.limits?.blocks$\n              }))\n              break\n            }\n            case 4: {\n              if (opts.limits?.blockPresences != null && obj.blockPresences.length === opts.limits.blockPresences) {\n                throw new MaxLengthError('Decode error - map field \"blockPresences\" had too many elements')\n              }\n\n              obj.blockPresences.push(BlockPresence.codec().decode(reader, reader.uint32(), {\n                limits: opts.limits?.blockPresences$\n              }))\n              break\n            }\n            case 5: {\n              obj.pendingBytes = reader.int32()\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<BitswapMessage>): Uint8Array => {\n    return encodeMessage(obj, BitswapMessage.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<BitswapMessage>): BitswapMessage => {\n    return decodeMessage(buf, BitswapMessage.codec(), opts)\n  }\n}\n", "import type { QueuedBitswapMessage } from './bitswap-message.js'\n\nexport function mergeMessages (existingMessage: QueuedBitswapMessage, newMessage: QueuedBitswapMessage): QueuedBitswapMessage {\n  for (const [key, entry] of newMessage.wantlist.entries()) {\n    const existingEntry = existingMessage.wantlist.get(key)\n\n    if (existingEntry != null) {\n      // take highest priority\n      if (existingEntry.priority > entry.priority) {\n        entry.priority = existingEntry.priority\n      }\n\n      // take later values if passed, otherwise use earlier ones\n      entry.cancel = entry.cancel ?? existingEntry.cancel\n      entry.wantType = entry.wantType ?? existingEntry.wantType\n      entry.sendDontHave = entry.sendDontHave ?? existingEntry.sendDontHave\n    }\n\n    existingMessage.wantlist.set(key, entry)\n  }\n\n  for (const [key, blockPresence] of newMessage.blockPresences.entries()) {\n    // override earlier block presence with later one as if duplicated it is\n    // likely to be more accurate since it is more recent\n    existingMessage.blockPresences.set(key, blockPresence)\n  }\n\n  for (const [key, block] of newMessage.blocks.entries()) {\n    existingMessage.blocks.set(key, block)\n  }\n\n  if (newMessage.full && !existingMessage.full) {\n    existingMessage.full = true\n  }\n\n  return existingMessage\n}\n", "export class BlockTooLargeError extends Error {\n  static name = 'BlockTooLargeError'\n\n  constructor (message = 'Block too large') {\n    super(message)\n    this.name = 'BlockTooLargeError'\n  }\n}\n", "import { encodingLength } from 'uint8-varint'\nimport { BlockTooLargeError } from '../errors.js'\nimport { BitswapMessage, Block, BlockPresence, WantlistEntry } from '../pb/message.js'\nimport type { QueuedBitswapMessage } from './bitswap-message.js'\n\n/**\n * https://github.com/ipfs/kubo/issues/4473#issuecomment-350390693\n */\nexport const MAX_BLOCK_SIZE = 4193648\nconst MAX_ENCODED_BLOCK_SIZE = MAX_BLOCK_SIZE + 16\n\n/**\n * Split the passed Bitswap message into multiple smaller messages that when\n * serialized will be under the maximum message size.\n *\n * Since blocks are the largest thing to send, we first try to fit as many\n * blocks as possible into the message, then add (smaller) block presences and\n * wants until the max size is reached.\n *\n * If a block is encountered that is larger than the max message size an error\n * will be thrown.\n */\nexport function * splitMessage (message: QueuedBitswapMessage, maxSize: number): Generator<Uint8Array> {\n  const wantListEntries = [...message.wantlist.values()]\n  const blockPresences = [...message.blockPresences.values()]\n  const blocks = [...message.blocks.values()]\n\n  let wantListIndex = 0\n  let blockPresencesIndex = 0\n  let blocksIndex = 0\n  let doneSending = false\n\n  while (true) {\n    const subMessage: Required<BitswapMessage> = {\n      wantlist: {\n        full: message.full ?? false,\n        entries: []\n      },\n      blockPresences: [],\n      blocks: [],\n      pendingBytes: 0\n    }\n\n    let size = BitswapMessage.encode(subMessage).byteLength\n\n    let { added, hasMore, newSize } = addToMessage(blocks, subMessage.blocks, blocksIndex, maxSize, size, calculateEncodedBlockSize)\n\n    blocksIndex += added\n    size = newSize\n    const haveMoreBlocks = hasMore\n\n    ;({ added, hasMore, newSize } = addToMessage(blockPresences, subMessage.blockPresences, blockPresencesIndex, maxSize, size, calculateEncodedBlockPresenceSize))\n\n    blockPresencesIndex += added\n    size = newSize\n    const haveMorePresences = hasMore\n\n    ;({ added, hasMore, newSize } = addToMessage(wantListEntries, subMessage.wantlist.entries, wantListIndex, maxSize, size, calculateEncodedWantlistEntrySize))\n\n    wantListIndex += added\n    size = newSize\n    const haveMoreWantlistEntries = hasMore\n\n    doneSending = !haveMoreBlocks && !haveMorePresences && !haveMoreWantlistEntries\n\n    // if we're sending multiple messages this is no longer the full wantlist\n    if (!doneSending) {\n      subMessage.wantlist.full = false\n    }\n\n    yield BitswapMessage.encode(subMessage)\n\n    if (doneSending) {\n      break\n    }\n  }\n}\n\ninterface AddResult {\n  hasMore: boolean\n  added: number\n  newSize: number\n}\n\nfunction addToMessage <T> (input: T[], output: T[], start: number, maxSize: number, size: number, calculateSize: (arg: T) => number): AddResult {\n  let added = 0\n  let hasMore = false\n\n  // try to send as many blocks as possible\n  for (let i = start; i < input.length; i++) {\n    const item = input[i]\n    const itemSize = calculateSize(item)\n\n    if (itemSize > MAX_ENCODED_BLOCK_SIZE) {\n      throw new BlockTooLargeError('Cannot send block as after encoding it is over the max message size')\n    }\n\n    const newSize = size + itemSize\n\n    if (newSize > maxSize) {\n      hasMore = true\n      break\n    }\n\n    output.push(item)\n    added++\n    size = newSize\n  }\n\n  return { hasMore, added, newSize: size }\n}\n\nfunction calculateEncodedBlockSize (block: Block): number {\n  // 3 is the \"blocks\" field number in message.proto\n  return calculateLength(3, Block.encode(block))\n}\n\nfunction calculateEncodedBlockPresenceSize (blockPresence: BlockPresence): number {\n  // 4 is the \"blockPresences\" field number in message.proto\n  return calculateLength(4, BlockPresence.encode(blockPresence))\n}\n\nfunction calculateEncodedWantlistEntrySize (entry: WantlistEntry): number {\n  // 1 is the \"entries\" field number in message.proto\n  return calculateLength(1, WantlistEntry.encode(entry))\n}\n\nfunction calculateLength (fieldNumber: number, data: Uint8Array): number {\n  const fieldNumberLength = encodingLength(fieldNumber)\n  const dataLengthLength = encodingLength(data.byteLength)\n\n  return fieldNumberLength + dataLengthLength + data.byteLength\n}\n", "import { InvalidParametersError, NotStartedError, TimeoutError, TypedEventEmitter, UnsupportedProtocolError, setMaxListeners } from '@libp2p/interface'\nimport { PeerQueue } from '@libp2p/utils/peer-queue'\nimport drain from 'it-drain'\nimport * as lp from 'it-length-prefixed'\nimport map from 'it-map'\nimport { pipe } from 'it-pipe'\nimport take from 'it-take'\nimport { CustomProgressEvent } from 'progress-events'\nimport { raceEvent } from 'race-event'\nimport { BITSWAP_120, DEFAULT_MAX_INBOUND_STREAMS, DEFAULT_MAX_INCOMING_MESSAGE_SIZE, DEFAULT_MAX_OUTBOUND_STREAMS, DEFAULT_MAX_OUTGOING_MESSAGE_SIZE, DEFAULT_MAX_PROVIDERS_PER_REQUEST, DEFAULT_MESSAGE_RECEIVE_TIMEOUT, DEFAULT_MESSAGE_SEND_CONCURRENCY, DEFAULT_RUN_ON_TRANSIENT_CONNECTIONS } from './constants.js'\nimport { BitswapMessage } from './pb/message.js'\nimport { mergeMessages } from './utils/merge-messages.js'\nimport { splitMessage } from './utils/split-message.js'\nimport type { WantOptions } from './bitswap.js'\nimport type { MultihashHasherLoader } from './index.js'\nimport type { Block } from './pb/message.js'\nimport type { QueuedBitswapMessage } from './utils/bitswap-message.js'\nimport type { Provider, Routing } from '@helia/interface/routing'\nimport type { Libp2p, AbortOptions, Connection, PeerId, IncomingStreamData, Topology, ComponentLogger, IdentifyResult, Counter, Metrics } from '@libp2p/interface'\nimport type { Logger } from '@libp2p/logger'\nimport type { PeerQueueJobOptions } from '@libp2p/utils/peer-queue'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { CID } from 'multiformats/cid'\nimport type { ProgressEvent, ProgressOptions } from 'progress-events'\n\nexport type BitswapNetworkProgressEvents =\n  ProgressEvent<'bitswap:network:dial', PeerId | Multiaddr | Multiaddr[]>\n\nexport type BitswapNetworkWantProgressEvents =\n  ProgressEvent<'bitswap:network:send-wantlist', PeerId> |\n  ProgressEvent<'bitswap:network:send-wantlist:error', { peer: PeerId, error: Error }> |\n  ProgressEvent<'bitswap:network:find-providers', CID> |\n  BitswapNetworkProgressEvents\n\nexport type BitswapNetworkNotifyProgressEvents =\n  BitswapNetworkProgressEvents |\n  ProgressEvent<'bitswap:network:send-block', PeerId>\n\nexport interface NetworkInit {\n  hashLoader?: MultihashHasherLoader\n  maxInboundStreams?: number\n  maxOutboundStreams?: number\n  messageReceiveTimeout?: number\n  messageSendConcurrency?: number\n  protocols?: string[]\n  runOnLimitedConnections?: boolean\n  maxOutgoingMessageSize?: number\n  maxIncomingMessageSize?: number\n}\n\nexport interface NetworkComponents {\n  routing: Routing\n  logger: ComponentLogger\n  libp2p: Libp2p\n  metrics?: Metrics\n}\n\nexport interface BitswapMessageEventDetail {\n  peer: PeerId\n  message: BitswapMessage\n}\n\nexport interface NetworkEvents {\n  'bitswap:message': CustomEvent<{ peer: PeerId, message: BitswapMessage }>\n  'peer:connected': CustomEvent<PeerId>\n  'peer:disconnected': CustomEvent<PeerId>\n}\n\ninterface SendMessageJobOptions extends AbortOptions, ProgressOptions, PeerQueueJobOptions {\n  message: QueuedBitswapMessage\n}\n\nexport class Network extends TypedEventEmitter<NetworkEvents> {\n  private readonly log: Logger\n  private readonly libp2p: Libp2p\n  private readonly routing: Routing\n  private readonly protocols: string[]\n  private running: boolean\n  private readonly maxInboundStreams: number\n  private readonly maxOutboundStreams: number\n  private readonly messageReceiveTimeout: number\n  private registrarIds: string[]\n  private readonly metrics: { blocksSent?: Counter, dataSent?: Counter }\n  private readonly sendQueue: PeerQueue<void, SendMessageJobOptions>\n  private readonly runOnLimitedConnections: boolean\n  private readonly maxOutgoingMessageSize: number\n  private readonly maxIncomingMessageSize: number\n\n  constructor (components: NetworkComponents, init: NetworkInit = {}) {\n    super()\n\n    this.log = components.logger.forComponent('helia:bitswap:network')\n    this.libp2p = components.libp2p\n    this.routing = components.routing\n    this.protocols = init.protocols ?? [BITSWAP_120]\n    this.registrarIds = []\n    this.running = false\n\n    // bind event listeners\n    this._onStream = this._onStream.bind(this)\n    this.maxInboundStreams = init.maxInboundStreams ?? DEFAULT_MAX_INBOUND_STREAMS\n    this.maxOutboundStreams = init.maxOutboundStreams ?? DEFAULT_MAX_OUTBOUND_STREAMS\n    this.messageReceiveTimeout = init.messageReceiveTimeout ?? DEFAULT_MESSAGE_RECEIVE_TIMEOUT\n    this.runOnLimitedConnections = init.runOnLimitedConnections ?? DEFAULT_RUN_ON_TRANSIENT_CONNECTIONS\n    this.maxIncomingMessageSize = init.maxIncomingMessageSize ?? DEFAULT_MAX_OUTGOING_MESSAGE_SIZE\n    this.maxOutgoingMessageSize = init.maxOutgoingMessageSize ?? init.maxIncomingMessageSize ?? DEFAULT_MAX_INCOMING_MESSAGE_SIZE\n    this.metrics = {\n      blocksSent: components.metrics?.registerCounter('helia_bitswap_sent_blocks_total'),\n      dataSent: components.metrics?.registerCounter('helia_bitswap_sent_data_bytes_total')\n    }\n\n    this.sendQueue = new PeerQueue({\n      concurrency: init.messageSendConcurrency ?? DEFAULT_MESSAGE_SEND_CONCURRENCY,\n      metrics: components.metrics,\n      metricName: 'helia_bitswap_message_send_queue'\n    })\n    this.sendQueue.addEventListener('error', (evt) => {\n      this.log.error('error sending wantlist to peer', evt.detail)\n    })\n  }\n\n  async start (): Promise<void> {\n    if (this.running) {\n      return\n    }\n\n    this.running = true\n\n    await this.libp2p.handle(this.protocols, this._onStream, {\n      maxInboundStreams: this.maxInboundStreams,\n      maxOutboundStreams: this.maxOutboundStreams,\n      runOnLimitedConnection: this.runOnLimitedConnections\n    })\n\n    // register protocol with topology\n    const topology: Topology = {\n      onConnect: (peerId: PeerId) => {\n        this.safeDispatchEvent('peer:connected', {\n          detail: peerId\n        })\n      },\n      onDisconnect: (peerId: PeerId) => {\n        this.safeDispatchEvent('peer:disconnected', {\n          detail: peerId\n        })\n      }\n    }\n\n    this.registrarIds = []\n\n    for (const protocol of this.protocols) {\n      this.registrarIds.push(await this.libp2p.register(protocol, topology))\n    }\n\n    // All existing connections are like new ones for us\n    this.libp2p.getConnections().forEach(conn => {\n      this.safeDispatchEvent('peer:connected', {\n        detail: conn.remotePeer\n      })\n    })\n  }\n\n  async stop (): Promise<void> {\n    this.running = false\n\n    // Unhandle both, libp2p doesn't care if it's not already handled\n    await this.libp2p.unhandle(this.protocols)\n\n    // unregister protocol and handlers\n    if (this.registrarIds != null) {\n      for (const id of this.registrarIds) {\n        this.libp2p.unregister(id)\n      }\n\n      this.registrarIds = []\n    }\n  }\n\n  /**\n   * Handles incoming bitswap messages\n   */\n  _onStream (info: IncomingStreamData): void {\n    if (!this.running) {\n      return\n    }\n\n    const { stream, connection } = info\n\n    Promise.resolve().then(async () => {\n      this.log('incoming new bitswap %s stream from %p', stream.protocol, connection.remotePeer)\n      const abortListener = (): void => {\n        if (stream.status === 'open') {\n          stream.abort(new TimeoutError(`Incoming Bitswap stream timed out after ${this.messageReceiveTimeout}ms`))\n        } else {\n          this.log('stream aborted with status %s', stream.status)\n        }\n      }\n\n      let signal = AbortSignal.timeout(this.messageReceiveTimeout)\n      setMaxListeners(Infinity, signal)\n      signal.addEventListener('abort', abortListener)\n\n      await stream.closeWrite()\n\n      await pipe(\n        stream,\n        (source) => lp.decode(source, {\n          maxDataLength: this.maxIncomingMessageSize\n        }),\n        async (source) => {\n          for await (const data of source) {\n            try {\n              const message = BitswapMessage.decode(data)\n              this.log('incoming new bitswap %s message from %p on stream', stream.protocol, connection.remotePeer, stream.id)\n\n              this.safeDispatchEvent('bitswap:message', {\n                detail: {\n                  peer: connection.remotePeer,\n                  message\n                }\n              })\n\n              // we have received some data so reset the timeout controller\n              signal.removeEventListener('abort', abortListener)\n              signal = AbortSignal.timeout(this.messageReceiveTimeout)\n              setMaxListeners(Infinity, signal)\n              signal.addEventListener('abort', abortListener)\n            } catch (err: any) {\n              this.log.error('error reading incoming bitswap message from %p on stream', connection.remotePeer, stream.id, err)\n              stream.abort(err)\n              break\n            }\n          }\n        }\n      )\n    })\n      .catch(err => {\n        this.log.error('error handling incoming stream from %p', connection.remotePeer, err)\n        stream.abort(err)\n      })\n  }\n\n  /**\n   * Find bitswap providers for a given `cid`.\n   */\n  async * findProviders (cid: CID, options?: AbortOptions & ProgressOptions<BitswapNetworkWantProgressEvents>): AsyncIterable<Provider> {\n    options?.onProgress?.(new CustomProgressEvent<CID>('bitswap:network:find-providers', cid))\n\n    for await (const provider of this.routing.findProviders(cid, options)) {\n      // make sure we can dial the provider\n      const dialable = await this.libp2p.isDialable(provider.multiaddrs, {\n        runOnLimitedConnection: this.runOnLimitedConnections\n      })\n\n      if (!dialable) {\n        continue\n      }\n\n      yield provider\n    }\n  }\n\n  /**\n   * Find the providers of a given `cid` and connect to them.\n   */\n  async findAndConnect (cid: CID, options?: WantOptions): Promise<void> {\n    // connect to initial session providers if supplied\n    if (options?.providers != null) {\n      await Promise.all(\n        options.providers.map(async prov => this.connectTo(prov)\n          .catch(err => {\n            this.log.error('could not connect to supplied provider - %e', err)\n          }))\n      )\n    }\n\n    // make a routing query to find additional providers\n    await drain(\n      map(\n        take(this.findProviders(cid, options), options?.maxProviders ?? DEFAULT_MAX_PROVIDERS_PER_REQUEST),\n        async provider => this.connectTo(provider.id, options)\n      )\n    )\n      .catch(err => {\n        this.log.error(err)\n      })\n  }\n\n  /**\n   * Connect to the given peer\n   * Send the given msg (instance of Message) to the given peer\n   */\n  async sendMessage (peerId: PeerId, message: QueuedBitswapMessage, options?: AbortOptions & ProgressOptions<BitswapNetworkWantProgressEvents>): Promise<void> {\n    if (!this.running) {\n      throw new Error('network isn\\'t running')\n    }\n\n    const existingJob = this.sendQueue.queue.find(job => {\n      return peerId.equals(job.options.peerId) && job.status === 'queued'\n    })\n\n    if (existingJob != null) {\n      existingJob.options.message = mergeMessages(existingJob.options.message, message)\n\n      await existingJob.join({\n        signal: options?.signal\n      })\n\n      return\n    }\n\n    await this.sendQueue.add(async (options) => {\n      const message = options?.message\n\n      if (message == null) {\n        throw new InvalidParametersError('No message to send')\n      }\n\n      this.log('sendMessage to %p', peerId)\n\n      options?.onProgress?.(new CustomProgressEvent<PeerId>('bitswap:network:send-wantlist', peerId))\n\n      const stream = await this.libp2p.dialProtocol(peerId, BITSWAP_120, options)\n      await stream.closeRead()\n\n      try {\n        await pipe(\n          splitMessage(message, this.maxOutgoingMessageSize),\n          (source) => lp.encode(source),\n          stream\n        )\n\n        await stream.close(options)\n      } catch (err: any) {\n        options?.onProgress?.(new CustomProgressEvent<{ peer: PeerId, error: Error }>('bitswap:network:send-wantlist:error', { peer: peerId, error: err }))\n        this.log.error('error sending message to %p', peerId, err)\n        stream.abort(err)\n      }\n\n      this._updateSentStats(message.blocks)\n    }, {\n      peerId,\n      signal: options?.signal,\n      message\n    })\n  }\n\n  /**\n   * Connects to another peer\n   */\n  async connectTo (peer: PeerId | Multiaddr | Multiaddr[], options?: AbortOptions & ProgressOptions<BitswapNetworkProgressEvents>): Promise<Connection> {\n    if (!this.running) {\n      throw new NotStartedError('Network isn\\'t running')\n    }\n\n    options?.onProgress?.(new CustomProgressEvent<PeerId | Multiaddr | Multiaddr[]>('bitswap:network:dial', peer))\n\n    // dial and wait for identify - this is to avoid opening a protocol stream\n    // that we are not going to use but depends on the remote node running the\n    // identify protocol\n    const [\n      connection\n    ] = await Promise.all([\n      this.libp2p.dial(peer, options),\n      raceEvent(this.libp2p, 'peer:identify', options?.signal, {\n        filter: (evt: CustomEvent<IdentifyResult>): boolean => {\n          if (!evt.detail.peerId.equals(peer)) {\n            return false\n          }\n\n          if (evt.detail.protocols.includes(BITSWAP_120)) {\n            return true\n          }\n\n          throw new UnsupportedProtocolError(`${peer} did not support ${BITSWAP_120}`)\n        }\n      })\n    ])\n\n    return connection\n  }\n\n  _updateSentStats (blocks: Map<string, Block>): void {\n    let bytes = 0\n\n    for (const block of blocks.values()) {\n      bytes += block.data.byteLength\n    }\n\n    this.metrics.dataSent?.increment(bytes)\n    this.metrics.blocksSent?.increment(blocks.size)\n  }\n}\n", "export const empty = new Uint8Array(0)\n\nexport function toHex (d: Uint8Array): string {\n  return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n}\n\nexport function fromHex (hex: string): Uint8Array {\n  const hexes = hex.match(/../g)\n  return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\nexport function equals (aa: Uint8Array, bb: Uint8Array): boolean {\n  if (aa === bb) { return true }\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function coerce (o: ArrayBufferView | ArrayBuffer | Uint8Array): Uint8Array {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') { return o }\n  if (o instanceof ArrayBuffer) { return new Uint8Array(o) }\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\nexport function isBinary (o: unknown): o is ArrayBuffer | ArrayBufferView {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n}\n\nexport function fromString (str: string): Uint8Array {\n  return new TextEncoder().encode(str)\n}\n\nexport function toString (b: Uint8Array): string {\n  return new TextDecoder().decode(b)\n}\n", "/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  /**\n   * @param {any[] | Iterable<number>} source\n   */\n  function encode (source) {\n    // @ts-ignore\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  /**\n   * @param {string | string[]} source\n   */\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  /**\n   * @param {string | string[]} string\n   */\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n", "import { coerce } from '../bytes.js'\nimport basex from '../vendor/base-x.js'\nimport type { BaseCodec, BaseDecoder, BaseEncoder, CombobaseDecoder, Multibase, MultibaseCodec, MultibaseDecoder, MultibaseEncoder, UnibaseDecoder } from './interface.js'\n\ninterface EncodeFn { (bytes: Uint8Array): string }\ninterface DecodeFn { (text: string): Uint8Array }\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder<Base extends string, Prefix extends string> implements MultibaseEncoder<Prefix>, BaseEncoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  encode (bytes: Uint8Array): Multibase<Prefix> {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder<Base extends string, Prefix extends string> implements MultibaseDecoder<Prefix>, UnibaseDecoder<Prefix>, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseDecode: DecodeFn\n  private readonly prefixCodePoint: number\n\n  constructor (name: Base, prefix: Prefix, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    const prefixCodePoint = prefix.codePointAt(0)\n    /* c8 ignore next 3 */\n    if (prefixCodePoint === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    this.prefixCodePoint = prefixCodePoint\n    this.baseDecode = baseDecode\n  }\n\n  decode (text: string): Uint8Array {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  or<OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n}\n\ntype Decoders<Prefix extends string> = Record<Prefix, UnibaseDecoder<Prefix>>\n\nclass ComposedDecoder<Prefix extends string> implements MultibaseDecoder<Prefix>, CombobaseDecoder<Prefix> {\n  readonly decoders: Decoders<Prefix>\n\n  constructor (decoders: Decoders<Prefix>) {\n    this.decoders = decoders\n  }\n\n  or <OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n\n  decode (input: string): Uint8Array {\n    const prefix = input[0] as Prefix\n    const decoder = this.decoders[prefix]\n    if (decoder != null) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\nexport function or <L extends string, R extends string> (left: UnibaseDecoder<L> | CombobaseDecoder<L>, right: UnibaseDecoder<R> | CombobaseDecoder<R>): ComposedDecoder<L | R> {\n  return new ComposedDecoder({\n    ...(left.decoders ?? { [(left as UnibaseDecoder<L>).prefix]: left }),\n    ...(right.decoders ?? { [(right as UnibaseDecoder<R>).prefix]: right })\n  } as Decoders<L | R>)\n}\n\nexport class Codec<Base extends string, Prefix extends string> implements MultibaseCodec<Prefix>, MultibaseEncoder<Prefix>, MultibaseDecoder<Prefix>, BaseCodec, BaseEncoder, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n  readonly baseDecode: DecodeFn\n  readonly encoder: Encoder<Base, Prefix>\n  readonly decoder: Decoder<Base, Prefix>\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  encode (input: Uint8Array): string {\n    return this.encoder.encode(input)\n  }\n\n  decode (input: string): Uint8Array {\n    return this.decoder.decode(input)\n  }\n}\n\nexport function from <Base extends string, Prefix extends string> ({ name, prefix, encode, decode }: { name: Base, prefix: Prefix, encode: EncodeFn, decode: DecodeFn }): Codec<Base, Prefix> {\n  return new Codec(name, prefix, encode, decode)\n}\n\nexport function baseX <Base extends string, Prefix extends string> ({ name, prefix, alphabet }: { name: Base, prefix: Prefix, alphabet: string }): Codec<Base, Prefix> {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: (text: string): Uint8Array => coerce(decode(text))\n  })\n}\n\nfunction decode (string: string, alphabetIdx: Record<string, number>, bitsPerChar: number, name: string): Uint8Array {\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = alphabetIdx[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\nfunction encode (data: Uint8Array, alphabet: string, bitsPerChar: number): string {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits !== 0) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (((out.length * bitsPerChar) & 7) !== 0) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\nfunction createAlphabetIdx (alphabet: string): Record<string, number> {\n  // Build the character lookup table:\n  const alphabetIdx: Record<string, number> = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    alphabetIdx[alphabet[i]] = i\n  }\n  return alphabetIdx\n}\n\n/**\n * RFC4648 Factory\n */\nexport function rfc4648 <Base extends string, Prefix extends string> ({ name, prefix, bitsPerChar, alphabet }: { name: Base, prefix: Prefix, bitsPerChar: number, alphabet: string }): Codec<Base, Prefix> {\n  const alphabetIdx = createAlphabetIdx(alphabet)\n  return from({\n    prefix,\n    name,\n    encode (input: Uint8Array): string {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input: string): Uint8Array {\n      return decode(input, alphabetIdx, bitsPerChar, name)\n    }\n  })\n}\n", "import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n", "import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n", "import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n", "/* eslint-disable */\nvar encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  // @ts-ignore\n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      // @ts-ignore\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  // @ts-ignore\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (/** @type {number} */ value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n", "import varint from './vendor/varint.js'\n\nexport function decode (data: Uint8Array, offset = 0): [number, number] {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\nexport function encodeTo (int: number, target: Uint8Array, offset = 0): Uint8Array {\n  varint.encode(int, target, offset)\n  return target\n}\n\nexport function encodingLength (int: number): number {\n  return varint.encodingLength(int)\n}\n", "import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\nimport type { MultihashDigest } from './interface.js'\n\n/**\n * Creates a multihash digest.\n */\nexport function create <Code extends number> (code: Code, digest: Uint8Array): Digest<Code, number> {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode (multihash: Uint8Array): MultihashDigest {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\nexport function equals (a: MultihashDigest, b: unknown): b is MultihashDigest {\n  if (a === b) {\n    return true\n  } else {\n    const data = b as { code?: unknown, size?: unknown, bytes?: unknown }\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest<Code extends number, Size extends number> implements MultihashDigest {\n  readonly code: Code\n  readonly size: Size\n  readonly digest: Uint8Array\n  readonly bytes: Uint8Array\n\n  /**\n   * Creates a multihash digest.\n   */\n  constructor (code: Code, size: Size, digest: Uint8Array, bytes: Uint8Array) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n\n/**\n * Used to check that the passed multihash has the passed code\n */\nexport function hasCode <T extends number> (digest: MultihashDigest, code: T): digest is MultihashDigest<T> {\n  return digest.code === code\n}\n", "import { base32 } from './bases/base32.js'\nimport { base36 } from './bases/base36.js'\nimport { base58btc } from './bases/base58.js'\nimport { coerce } from './bytes.js'\nimport * as Digest from './hashes/digest.js'\nimport * as varint from './varint.js'\nimport type * as API from './link/interface.js'\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\nexport function format <T extends API.Link<unknown, number, number, API.Version>, Prefix extends string> (link: T, base?: API.MultibaseEncoder<Prefix>): API.ToString<T, Prefix> {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        base as API.MultibaseEncoder<'z'> ?? base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        (base ?? base32.encoder) as API.MultibaseEncoder<Prefix>\n      )\n  }\n}\n\nexport function toJSON <Link extends API.UnknownLink> (link: Link): API.LinkJSON<Link> {\n  return {\n    '/': format(link)\n  }\n}\n\nexport function fromJSON <Link extends API.UnknownLink> (json: API.LinkJSON<Link>): CID<unknown, number, number, API.Version> {\n  return CID.parse(json['/'])\n}\n\nconst cache = new WeakMap<API.UnknownLink, Map<string, string>>()\n\nfunction baseCache (cid: API.UnknownLink): Map<string, string> {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\nexport class CID<Data = unknown, Format extends number = number, Alg extends number = number, Version extends API.Version = API.Version> implements API.Link<Data, Format, Alg, Version> {\n  readonly code: Format\n  readonly version: Version\n  readonly multihash: API.MultihashDigest<Alg>\n  readonly bytes: Uint8Array\n  readonly '/': Uint8Array\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param multihash - (Multi)hash of the of the content.\n   */\n  constructor (version: Version, code: Format, multihash: API.MultihashDigest<Alg>, bytes: Uint8Array) {\n    this.code = code\n    this.version = version\n    this.multihash = multihash\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID (): this {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset (): number {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength (): number {\n    return this.bytes.byteLength\n  }\n\n  toV0 (): CID<Data, API.DAG_PB, API.SHA_256, 0> {\n    switch (this.version) {\n      case 0: {\n        return this as CID<Data, API.DAG_PB, API.SHA_256, 0>\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return (\n          CID.createV0(\n            multihash as API.MultihashDigest<API.SHA_256>\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  toV1 (): CID<Data, Format, Alg, 1> {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return this as CID<Data, Format, Alg, 1>\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  equals (other: unknown): other is CID<Data, Format, Alg, Version> {\n    return CID.equals(this, other)\n  }\n\n  static equals <Data, Format extends number, Alg extends number, Version extends API.Version>(self: API.Link<Data, Format, Alg, Version>, other: unknown): other is CID {\n    const unknown = other as { code?: unknown, version?: unknown, multihash?: unknown }\n    return (\n      unknown != null &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  toString (base?: API.MultibaseEncoder<string>): string {\n    return format(this, base)\n  }\n\n  toJSON (): API.LinkJSON<this> {\n    return { '/': format(this) }\n  }\n\n  link (): this {\n    return this\n  }\n\n  readonly [Symbol.toStringTag] = 'CID';\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] (): string {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   */\n  static asCID <Data, Format extends number, Alg extends number, Version extends API.Version, U>(input: API.Link<Data, Format, Alg, Version> | U): CID<Data, Format, Alg, Version> | null {\n    if (input == null) {\n      return null\n    }\n\n    const value = input as any\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        multihash as API.MultihashDigest<Alg>,\n        bytes ?? encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest = Digest.decode(multihash) as API.MultihashDigest<Alg>\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param digest - (Multi)hash of the of the content.\n   */\n  static create <Data, Format extends number, Alg extends number, Version extends API.Version>(version: Version, code: Format, digest: API.MultihashDigest<Alg>): CID<Data, Format, Alg, Version> {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   */\n  static createV0 <T = unknown>(digest: API.MultihashDigest<typeof SHA_256_CODE>): CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0> {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @param code - Content encoding format code.\n   * @param digest - Multihash of the content.\n   */\n  static createV1 <Data, Code extends number, Alg extends number>(code: Code, digest: API.MultihashDigest<Alg>): CID<Data, Code, Alg, 1> {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   */\n  static decode <Data, Code extends number, Alg extends number, Version extends API.Version>(bytes: API.ByteView<API.Link<Data, Code, Alg, Version>>): CID<Data, Code, Alg, Version> {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length !== 0) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   */\n  static decodeFirst <T, C extends number, A extends number, V extends API.Version>(bytes: API.ByteView<API.Link<T, C, A, V>>): [CID<T, C, A, V>, Uint8Array] {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(digest as API.MultihashDigest<API.SHA_256>)\n        : CID.createV1(specs.codec, digest)\n    return [cid as CID<T, C, A, V>, bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   */\n  static inspectBytes <T, C extends number, A extends number, V extends API.Version>(initialBytes: API.ByteView<API.Link<T, C, A, V>>): { version: V, codec: C, multihashCode: A, digestSize: number, multihashSize: number, size: number } {\n    let offset = 0\n    const next = (): number => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = next() as V\n    let codec = DAG_PB_CODE as C\n    if (version as number === 18) {\n      // CIDv0\n      version = 0 as V\n      offset = 0\n    } else {\n      codec = next() as C\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = next() as A // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   */\n  static parse <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version>(source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): CID<Data, Code, Alg, Version> {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\nfunction parseCIDtoBytes <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version> (source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): [Prefix, API.ByteView<API.Link<Data, Code, Alg, Version>>] {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base ?? base58btc\n      return [\n        base58btc.prefix as Prefix,\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base ?? base58btc\n      return [base58btc.prefix as Prefix, decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base ?? base32\n      return [base32.prefix as Prefix, decoder.decode(source)]\n    }\n    case base36.prefix: {\n      const decoder = base ?? base36\n      return [base36.prefix as Prefix, decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [source[0] as Prefix, base.decode(source)]\n    }\n  }\n}\n\nfunction toStringV0 (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<'z'>): string {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nfunction toStringV1 <Prefix extends string> (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<Prefix>): string {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\nfunction encodeCID (version: API.Version, code: number, multihash: Uint8Array): Uint8Array {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n", "import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code: 0x0 = 0x0\nconst name = 'identity'\n\nconst encode: (input: Uint8Array) => Uint8Array = coerce\n\nfunction digest (input: Uint8Array): Digest.Digest<typeof code, number> {\n  return Digest.create(code, encode(input))\n}\n\nexport const identity = { code, name, encode, digest }\n", "import * as Digest from './digest.js'\nimport type { MultihashHasher } from './interface.js'\n\ntype Await<T> = Promise<T> | T\n\nexport function from <Name extends string, Code extends number> ({ name, code, encode }: { name: Name, code: Code, encode(input: Uint8Array): Await<Uint8Array> }): Hasher<Name, Code> {\n  return new Hasher(name, code, encode)\n}\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n */\nexport class Hasher<Name extends string, Code extends number> implements MultihashHasher<Code> {\n  readonly name: Name\n  readonly code: Code\n  readonly encode: (input: Uint8Array) => Await<Uint8Array>\n\n  constructor (name: Name, code: Code, encode: (input: Uint8Array) => Await<Uint8Array>) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  digest (input: Uint8Array): Await<Digest.Digest<Code, number>> {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n", "/* global crypto */\n\nimport { from } from './hasher.js'\n\nfunction sha (name: AlgorithmIdentifier): (data: Uint8Array) => Promise<Uint8Array> {\n  return async data => new Uint8Array(await crypto.subtle.digest(name, data))\n}\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n", "/**\n * @packageDocumentation\n *\n * An implementation of a peer id\n *\n * @example\n *\n * ```TypeScript\n * import { peerIdFromString } from '@libp2p/peer-id'\n * const peer = peerIdFromString('k51qzi5uqu5dkwkqm42v9j9kqcam2jiuvloi16g72i4i4amoo2m8u3ol3mqu6s')\n *\n * console.log(peer.toCID()) // CID(bafzaa...)\n * console.log(peer.toString()) // \"12D3K...\"\n * ```\n */\n\nimport { peerIdSymbol } from '@libp2p/interface'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { CID } from 'multiformats/cid'\nimport { identity } from 'multiformats/hashes/identity'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport type { Ed25519PeerId as Ed25519PeerIdInterface, PeerIdType, RSAPeerId as RSAPeerIdInterface, URLPeerId as URLPeerIdInterface, Secp256k1PeerId as Secp256k1PeerIdInterface, PeerId, PublicKey, Ed25519PublicKey, Secp256k1PublicKey, RSAPublicKey } from '@libp2p/interface'\nimport type { MultihashDigest } from 'multiformats/hashes/interface'\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\n\n// these values are from https://github.com/multiformats/multicodec/blob/master/table.csv\nconst LIBP2P_KEY_CODE = 0x72\n\ninterface PeerIdInit <DigestCode extends number> {\n  type: PeerIdType\n  multihash: MultihashDigest<DigestCode>\n}\n\ninterface RSAPeerIdInit {\n  multihash: MultihashDigest<0x12>\n  publicKey?: RSAPublicKey\n}\n\ninterface Ed25519PeerIdInit {\n  multihash: MultihashDigest<0x0>\n  publicKey: Ed25519PublicKey\n}\n\ninterface Secp256k1PeerIdInit {\n  multihash: MultihashDigest<0x0>\n  publicKey: Secp256k1PublicKey\n}\n\nclass PeerIdImpl <DigestCode extends number> {\n  public type: PeerIdType\n  private readonly multihash: MultihashDigest<DigestCode>\n  public readonly publicKey?: PublicKey\n  private string?: string\n\n  constructor (init: PeerIdInit<DigestCode>) {\n    this.type = init.type\n    this.multihash = init.multihash\n\n    // mark string cache as non-enumerable\n    Object.defineProperty(this, 'string', {\n      enumerable: false,\n      writable: true\n    })\n  }\n\n  get [Symbol.toStringTag] (): string {\n    return `PeerId(${this.toString()})`\n  }\n\n  readonly [peerIdSymbol] = true\n\n  toString (): string {\n    if (this.string == null) {\n      this.string = base58btc.encode(this.multihash.bytes).slice(1)\n    }\n\n    return this.string\n  }\n\n  toMultihash (): MultihashDigest<DigestCode> {\n    return this.multihash\n  }\n\n  // return self-describing String representation\n  // in default format from RFC 0001: https://github.com/libp2p/specs/pull/209\n  toCID (): CID<Uint8Array, 0x72, DigestCode, 1> {\n    return CID.createV1(LIBP2P_KEY_CODE, this.multihash)\n  }\n\n  toJSON (): string {\n    return this.toString()\n  }\n\n  /**\n   * Checks the equality of `this` peer against a given PeerId\n   */\n  equals (id?: PeerId | Uint8Array | string): boolean {\n    if (id == null) {\n      return false\n    }\n\n    if (id instanceof Uint8Array) {\n      return uint8ArrayEquals(this.multihash.bytes, id)\n    } else if (typeof id === 'string') {\n      return this.toString() === id\n    } else if (id?.toMultihash()?.bytes != null) {\n      return uint8ArrayEquals(this.multihash.bytes, id.toMultihash().bytes)\n    } else {\n      throw new Error('not valid Id')\n    }\n  }\n\n  /**\n   * Returns PeerId as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```TypeScript\n   * import { peerIdFromString } from '@libp2p/peer-id'\n   *\n   * console.info(peerIdFromString('QmFoo'))\n   * // 'PeerId(QmFoo)'\n   * ```\n   */\n  [inspect] (): string {\n    return `PeerId(${this.toString()})`\n  }\n}\n\nexport class RSAPeerId extends PeerIdImpl<0x12> implements RSAPeerIdInterface {\n  public readonly type = 'RSA'\n  public readonly publicKey?: RSAPublicKey\n\n  constructor (init: RSAPeerIdInit) {\n    super({ ...init, type: 'RSA' })\n\n    this.publicKey = init.publicKey\n  }\n}\n\nexport class Ed25519PeerId extends PeerIdImpl<0x0> implements Ed25519PeerIdInterface {\n  public readonly type = 'Ed25519'\n  public readonly publicKey: Ed25519PublicKey\n\n  constructor (init: Ed25519PeerIdInit) {\n    super({ ...init, type: 'Ed25519' })\n\n    this.publicKey = init.publicKey\n  }\n}\n\nexport class Secp256k1PeerId extends PeerIdImpl<0x0> implements Secp256k1PeerIdInterface {\n  public readonly type = 'secp256k1'\n  public readonly publicKey: Secp256k1PublicKey\n\n  constructor (init: Secp256k1PeerIdInit) {\n    super({ ...init, type: 'secp256k1' })\n\n    this.publicKey = init.publicKey\n  }\n}\n\n// these values are from https://github.com/multiformats/multicodec/blob/master/table.csv\nconst TRANSPORT_IPFS_GATEWAY_HTTP_CODE = 0x0920\n\nexport class URLPeerId implements URLPeerIdInterface {\n  readonly type = 'url'\n  readonly multihash: MultihashDigest<0x0>\n  readonly publicKey: undefined\n  readonly url: string\n\n  constructor (url: URL) {\n    this.url = url.toString()\n    this.multihash = identity.digest(uint8ArrayFromString(this.url))\n  }\n\n  [inspect] (): string {\n    return `PeerId(${this.url})`\n  }\n\n  readonly [peerIdSymbol] = true\n\n  toString (): string {\n    return this.toCID().toString()\n  }\n\n  toMultihash (): MultihashDigest<0x0> {\n    return this.multihash\n  }\n\n  toCID (): CID<Uint8Array, 0x0920, 0x0, 1> {\n    return CID.createV1(TRANSPORT_IPFS_GATEWAY_HTTP_CODE, this.toMultihash())\n  }\n\n  toJSON (): string {\n    return this.toString()\n  }\n\n  equals (other?: PeerId | Uint8Array | string): boolean {\n    if (other == null) {\n      return false\n    }\n\n    if (other instanceof Uint8Array) {\n      other = uint8ArrayToString(other)\n    }\n\n    return other.toString() === this.toString()\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * An implementation of a peer id\n *\n * @example\n *\n * ```TypeScript\n * import { peerIdFromString } from '@libp2p/peer-id'\n * const peer = peerIdFromString('12D3KooWKnDdG3iXw9eTFijk3EWSunZcFi54Zka4wmtqtt6rPxc8')\n *\n * console.log(peer.toCID()) // CID(bafzaa...)\n * console.log(peer.toString()) // \"12D3K...\"\n * ```\n */\n\nimport { publicKeyFromMultihash } from '@libp2p/crypto/keys'\nimport { InvalidCIDError, InvalidMultihashError, InvalidParametersError, UnsupportedKeyTypeError } from '@libp2p/interface'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { CID } from 'multiformats/cid'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { identity } from 'multiformats/hashes/identity'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { RSAPeerId as RSAPeerIdClass, Ed25519PeerId as Ed25519PeerIdClass, Secp256k1PeerId as Secp256k1PeerIdClass, URLPeerId as URLPeerIdClass } from './peer-id.js'\nimport type { Ed25519PeerId, RSAPeerId, URLPeerId, Secp256k1PeerId, PeerId, PublicKey, Ed25519PublicKey, Secp256k1PublicKey, RSAPublicKey, Ed25519PrivateKey, Secp256k1PrivateKey, RSAPrivateKey, PrivateKey } from '@libp2p/interface'\nimport type { MultibaseDecoder } from 'multiformats/cid'\nimport type { MultihashDigest } from 'multiformats/hashes/interface'\n\n// these values are from https://github.com/multiformats/multicodec/blob/master/table.csv\nconst LIBP2P_KEY_CODE = 0x72\nconst TRANSPORT_IPFS_GATEWAY_HTTP_CODE = 0x0920\n\nexport function peerIdFromString (str: string, decoder?: MultibaseDecoder<any>): Ed25519PeerId | Secp256k1PeerId | RSAPeerId | URLPeerId {\n  let multihash: MultihashDigest\n\n  if (str.charAt(0) === '1' || str.charAt(0) === 'Q') {\n    // identity hash ed25519/secp256k1 key or sha2-256 hash of\n    // rsa public key - base58btc encoded either way\n    multihash = Digest.decode(base58btc.decode(`z${str}`))\n  } else if (str.startsWith('k51qzi5uqu5') || str.startsWith('kzwfwjn5ji4') || str.startsWith('k2k4r8') || str.startsWith('bafz')) {\n    // base36 encoded CIDv1 with libp2p-key and identity hash (for ed25519/secp256k1/rsa) or base32 encoded CIDv1 with libp2p-key and identity hash (for ed25519/secp256k1/rsa)\n    return peerIdFromCID(CID.parse(str))\n  } else {\n    if (decoder == null) {\n      throw new InvalidParametersError('Please pass a multibase decoder for strings that do not start with \"1\" or \"Q\"')\n    }\n\n    multihash = Digest.decode(decoder.decode(str))\n  }\n\n  return peerIdFromMultihash(multihash)\n}\n\nexport function peerIdFromPublicKey (publicKey: Ed25519PublicKey): Ed25519PeerId\nexport function peerIdFromPublicKey (publicKey: Secp256k1PublicKey): Secp256k1PeerId\nexport function peerIdFromPublicKey (publicKey: RSAPublicKey): RSAPeerId\nexport function peerIdFromPublicKey (publicKey: PublicKey): PeerId\nexport function peerIdFromPublicKey (publicKey: PublicKey): PeerId {\n  if (publicKey.type === 'Ed25519') {\n    return new Ed25519PeerIdClass({\n      multihash: publicKey.toCID().multihash,\n      publicKey\n    })\n  } else if (publicKey.type === 'secp256k1') {\n    return new Secp256k1PeerIdClass({\n      multihash: publicKey.toCID().multihash,\n      publicKey\n    })\n  } else if (publicKey.type === 'RSA') {\n    return new RSAPeerIdClass({\n      multihash: publicKey.toCID().multihash,\n      publicKey\n    })\n  }\n\n  throw new UnsupportedKeyTypeError()\n}\n\nexport function peerIdFromPrivateKey (privateKey: Ed25519PrivateKey): Ed25519PeerId\nexport function peerIdFromPrivateKey (privateKey: Secp256k1PrivateKey): Secp256k1PeerId\nexport function peerIdFromPrivateKey (privateKey: RSAPrivateKey): RSAPeerId\nexport function peerIdFromPrivateKey (privateKey: PrivateKey): PeerId\nexport function peerIdFromPrivateKey (privateKey: PrivateKey): PeerId {\n  return peerIdFromPublicKey(privateKey.publicKey)\n}\n\nexport function peerIdFromMultihash (multihash: MultihashDigest): PeerId {\n  if (isSha256Multihash(multihash)) {\n    return new RSAPeerIdClass({ multihash })\n  } else if (isIdentityMultihash(multihash)) {\n    try {\n      const publicKey = publicKeyFromMultihash(multihash)\n\n      if (publicKey.type === 'Ed25519') {\n        return new Ed25519PeerIdClass({ multihash, publicKey })\n      } else if (publicKey.type === 'secp256k1') {\n        return new Secp256k1PeerIdClass({ multihash, publicKey })\n      }\n    } catch (err) {\n      // was not Ed or secp key, try URL\n      const url = uint8ArrayToString(multihash.digest)\n\n      return new URLPeerIdClass(new URL(url))\n    }\n  }\n\n  throw new InvalidMultihashError('Supplied PeerID Multihash is invalid')\n}\n\nexport function peerIdFromCID (cid: CID): Ed25519PeerId | Secp256k1PeerId | RSAPeerId | URLPeerId {\n  if (cid?.multihash == null || cid.version == null || (cid.version === 1 && (cid.code !== LIBP2P_KEY_CODE) && cid.code !== TRANSPORT_IPFS_GATEWAY_HTTP_CODE)) {\n    throw new InvalidCIDError('Supplied PeerID CID is invalid')\n  }\n\n  if (cid.code === TRANSPORT_IPFS_GATEWAY_HTTP_CODE) {\n    const url = uint8ArrayToString(cid.multihash.digest)\n\n    return new URLPeerIdClass(new URL(url))\n  }\n\n  return peerIdFromMultihash(cid.multihash)\n}\n\nfunction isIdentityMultihash (multihash: MultihashDigest): multihash is MultihashDigest<0x0> {\n  return multihash.code === identity.code\n}\n\nfunction isSha256Multihash (multihash: MultihashDigest): multihash is MultihashDigest<0x12> {\n  return multihash.code === sha256.code\n}\n", "export const empty = new Uint8Array(0)\n\nexport function toHex (d: Uint8Array): string {\n  return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n}\n\nexport function fromHex (hex: string): Uint8Array {\n  const hexes = hex.match(/../g)\n  return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\nexport function equals (aa: Uint8Array, bb: Uint8Array): boolean {\n  if (aa === bb) { return true }\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function coerce (o: ArrayBufferView | ArrayBuffer | Uint8Array): Uint8Array {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') { return o }\n  if (o instanceof ArrayBuffer) { return new Uint8Array(o) }\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\nexport function isBinary (o: unknown): o is ArrayBuffer | ArrayBufferView {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n}\n\nexport function fromString (str: string): Uint8Array {\n  return new TextEncoder().encode(str)\n}\n\nexport function toString (b: Uint8Array): string {\n  return new TextDecoder().decode(b)\n}\n", "/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  /**\n   * @param {any[] | Iterable<number>} source\n   */\n  function encode (source) {\n    // @ts-ignore\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  /**\n   * @param {string | string[]} source\n   */\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  /**\n   * @param {string | string[]} string\n   */\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n", "import { coerce } from '../bytes.js'\nimport basex from '../vendor/base-x.js'\nimport type { BaseCodec, BaseDecoder, BaseEncoder, CombobaseDecoder, Multibase, MultibaseCodec, MultibaseDecoder, MultibaseEncoder, UnibaseDecoder } from './interface.js'\n\ninterface EncodeFn { (bytes: Uint8Array): string }\ninterface DecodeFn { (text: string): Uint8Array }\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder<Base extends string, Prefix extends string> implements MultibaseEncoder<Prefix>, BaseEncoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  encode (bytes: Uint8Array): Multibase<Prefix> {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder<Base extends string, Prefix extends string> implements MultibaseDecoder<Prefix>, UnibaseDecoder<Prefix>, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseDecode: DecodeFn\n  private readonly prefixCodePoint: number\n\n  constructor (name: Base, prefix: Prefix, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    const prefixCodePoint = prefix.codePointAt(0)\n    /* c8 ignore next 3 */\n    if (prefixCodePoint === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    this.prefixCodePoint = prefixCodePoint\n    this.baseDecode = baseDecode\n  }\n\n  decode (text: string): Uint8Array {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  or<OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n}\n\ntype Decoders<Prefix extends string> = Record<Prefix, UnibaseDecoder<Prefix>>\n\nclass ComposedDecoder<Prefix extends string> implements MultibaseDecoder<Prefix>, CombobaseDecoder<Prefix> {\n  readonly decoders: Decoders<Prefix>\n\n  constructor (decoders: Decoders<Prefix>) {\n    this.decoders = decoders\n  }\n\n  or <OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n\n  decode (input: string): Uint8Array {\n    const prefix = input[0] as Prefix\n    const decoder = this.decoders[prefix]\n    if (decoder != null) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\nexport function or <L extends string, R extends string> (left: UnibaseDecoder<L> | CombobaseDecoder<L>, right: UnibaseDecoder<R> | CombobaseDecoder<R>): ComposedDecoder<L | R> {\n  return new ComposedDecoder({\n    ...(left.decoders ?? { [(left as UnibaseDecoder<L>).prefix]: left }),\n    ...(right.decoders ?? { [(right as UnibaseDecoder<R>).prefix]: right })\n  } as Decoders<L | R>)\n}\n\nexport class Codec<Base extends string, Prefix extends string> implements MultibaseCodec<Prefix>, MultibaseEncoder<Prefix>, MultibaseDecoder<Prefix>, BaseCodec, BaseEncoder, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n  readonly baseDecode: DecodeFn\n  readonly encoder: Encoder<Base, Prefix>\n  readonly decoder: Decoder<Base, Prefix>\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  encode (input: Uint8Array): string {\n    return this.encoder.encode(input)\n  }\n\n  decode (input: string): Uint8Array {\n    return this.decoder.decode(input)\n  }\n}\n\nexport function from <Base extends string, Prefix extends string> ({ name, prefix, encode, decode }: { name: Base, prefix: Prefix, encode: EncodeFn, decode: DecodeFn }): Codec<Base, Prefix> {\n  return new Codec(name, prefix, encode, decode)\n}\n\nexport function baseX <Base extends string, Prefix extends string> ({ name, prefix, alphabet }: { name: Base, prefix: Prefix, alphabet: string }): Codec<Base, Prefix> {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: (text: string): Uint8Array => coerce(decode(text))\n  })\n}\n\nfunction decode (string: string, alphabetIdx: Record<string, number>, bitsPerChar: number, name: string): Uint8Array {\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = alphabetIdx[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\nfunction encode (data: Uint8Array, alphabet: string, bitsPerChar: number): string {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits !== 0) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (((out.length * bitsPerChar) & 7) !== 0) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\nfunction createAlphabetIdx (alphabet: string): Record<string, number> {\n  // Build the character lookup table:\n  const alphabetIdx: Record<string, number> = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    alphabetIdx[alphabet[i]] = i\n  }\n  return alphabetIdx\n}\n\n/**\n * RFC4648 Factory\n */\nexport function rfc4648 <Base extends string, Prefix extends string> ({ name, prefix, bitsPerChar, alphabet }: { name: Base, prefix: Prefix, bitsPerChar: number, alphabet: string }): Codec<Base, Prefix> {\n  const alphabetIdx = createAlphabetIdx(alphabet)\n  return from({\n    prefix,\n    name,\n    encode (input: Uint8Array): string {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input: string): Uint8Array {\n      return decode(input, alphabetIdx, bitsPerChar, name)\n    }\n  })\n}\n", "import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n", "/* eslint-disable */\nvar encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  // @ts-ignore\n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      // @ts-ignore\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  // @ts-ignore\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (/** @type {number} */ value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n", "import varint from './vendor/varint.js'\n\nexport function decode (data: Uint8Array, offset = 0): [number, number] {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\nexport function encodeTo (int: number, target: Uint8Array, offset = 0): Uint8Array {\n  varint.encode(int, target, offset)\n  return target\n}\n\nexport function encodingLength (int: number): number {\n  return varint.encodingLength(int)\n}\n", "import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\nimport type { MultihashDigest } from './interface.js'\n\n/**\n * Creates a multihash digest.\n */\nexport function create <Code extends number> (code: Code, digest: Uint8Array): Digest<Code, number> {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode (multihash: Uint8Array): MultihashDigest {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\nexport function equals (a: MultihashDigest, b: unknown): b is MultihashDigest {\n  if (a === b) {\n    return true\n  } else {\n    const data = b as { code?: unknown, size?: unknown, bytes?: unknown }\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest<Code extends number, Size extends number> implements MultihashDigest {\n  readonly code: Code\n  readonly size: Size\n  readonly digest: Uint8Array\n  readonly bytes: Uint8Array\n\n  /**\n   * Creates a multihash digest.\n   */\n  constructor (code: Code, size: Size, digest: Uint8Array, bytes: Uint8Array) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n\n/**\n * Used to check that the passed multihash has the passed code\n */\nexport function hasCode <T extends number> (digest: MultihashDigest, code: T): digest is MultihashDigest<T> {\n  return digest.code === code\n}\n", "import { peerIdFromMultihash } from '@libp2p/peer-id'\nimport { base58btc } from 'multiformats/bases/base58'\nimport * as Digest from 'multiformats/hashes/digest'\nimport type { PeerId } from '@libp2p/interface'\n\n/**\n * Calls the passed map function on every entry of the passed iterable iterator\n */\nexport function mapIterable <T, R> (iter: IterableIterator<T>, map: (val: T) => R): IterableIterator<R> {\n  const iterator: IterableIterator<R> = {\n    [Symbol.iterator]: () => {\n      return iterator\n    },\n    next: () => {\n      const next = iter.next()\n      const val = next.value\n\n      if (next.done === true || val == null) {\n        const result: IteratorReturnResult<any> = {\n          done: true,\n          value: undefined\n        }\n\n        return result\n      }\n\n      return {\n        done: false,\n        value: map(val)\n      }\n    }\n  }\n\n  return iterator\n}\n\nexport function peerIdFromString (str: string): PeerId {\n  const multihash = Digest.decode(base58btc.decode(`z${str}`))\n  return peerIdFromMultihash(multihash)\n}\n", "import { mapIterable } from './util.js'\nimport type { PeerId } from '@libp2p/interface'\n\n/**\n * We can't use PeerIds as map keys because map keys are\n * compared using same-value-zero equality, so this is just\n * a map that stringifies the PeerIds before storing them.\n *\n * PeerIds cache stringified versions of themselves so this\n * should be a cheap operation.\n *\n * @example\n *\n * ```TypeScript\n * import { peerMap } from '@libp2p/peer-collections'\n *\n * const map = peerMap<string>()\n * map.set(peerId, 'value')\n * ```\n */\nexport class PeerMap <T> {\n  private readonly map: Map<string, { key: PeerId, value: T }>\n\n  constructor (map?: PeerMap<T>) {\n    this.map = new Map()\n\n    if (map != null) {\n      for (const [key, value] of map.entries()) {\n        this.map.set(key.toString(), { key, value })\n      }\n    }\n  }\n\n  [Symbol.iterator] (): IterableIterator<[PeerId, T]> {\n    return this.entries()\n  }\n\n  clear (): void {\n    this.map.clear()\n  }\n\n  delete (peer: PeerId): boolean {\n    return this.map.delete(peer.toString())\n  }\n\n  entries (): IterableIterator<[PeerId, T]> {\n    return mapIterable<[string, { key: PeerId, value: T }], [PeerId, T]>(\n      this.map.entries(),\n      (val) => {\n        return [val[1].key, val[1].value]\n      }\n    )\n  }\n\n  forEach (fn: (value: T, key: PeerId, map: PeerMap<T>) => void): void {\n    this.map.forEach((value, key) => {\n      fn(value.value, value.key, this)\n    })\n  }\n\n  get (peer: PeerId): T | undefined {\n    return this.map.get(peer.toString())?.value\n  }\n\n  has (peer: PeerId): boolean {\n    return this.map.has(peer.toString())\n  }\n\n  set (peer: PeerId, value: T): void {\n    this.map.set(peer.toString(), { key: peer, value })\n  }\n\n  keys (): IterableIterator<PeerId> {\n    return mapIterable<{ key: PeerId, value: T }, PeerId>(\n      this.map.values(),\n      (val) => {\n        return val.key\n      }\n    )\n  }\n\n  values (): IterableIterator<T> {\n    return mapIterable(this.map.values(), (val) => val.value)\n  }\n\n  get size (): number {\n    return this.map.size\n  }\n}\n\nexport function peerMap <T> (): PeerMap<T> {\n  return new PeerMap<T>()\n}\n", "import { mapIterable, peerIdFromString } from './util.js'\nimport type { PeerId } from '@libp2p/interface'\n\n/**\n * We can't use PeerIds as set entries because set entries are\n * compared using same-value-zero equality, so this is just\n * a map that stringifies the PeerIds before storing them.\n *\n * PeerIds cache stringified versions of themselves so this\n * should be a cheap operation.\n *\n * @example\n *\n * ```TypeScript\n * import { peerSet } from '@libp2p/peer-collections'\n *\n * const set = peerSet()\n * set.add(peerId)\n * ```\n */\nexport class PeerSet {\n  private readonly set: Set<string>\n\n  constructor (set?: PeerSet | Iterable<PeerId>) {\n    this.set = new Set()\n\n    if (set != null) {\n      for (const key of set) {\n        this.set.add(key.toString())\n      }\n    }\n  }\n\n  get size (): number {\n    return this.set.size\n  }\n\n  [Symbol.iterator] (): IterableIterator<PeerId> {\n    return this.values()\n  }\n\n  add (peer: PeerId): void {\n    this.set.add(peer.toString())\n  }\n\n  clear (): void {\n    this.set.clear()\n  }\n\n  delete (peer: PeerId): void {\n    this.set.delete(peer.toString())\n  }\n\n  entries (): IterableIterator<[PeerId, PeerId]> {\n    return mapIterable<[string, string], [PeerId, PeerId]>(\n      this.set.entries(),\n      (val) => {\n        const peerId = peerIdFromString(val[0])\n\n        return [peerId, peerId]\n      }\n    )\n  }\n\n  forEach (predicate: (peerId: PeerId, index: PeerId, set: PeerSet) => void): void {\n    this.set.forEach((str) => {\n      const peerId = peerIdFromString(str)\n\n      predicate(peerId, peerId, this)\n    })\n  }\n\n  has (peer: PeerId): boolean {\n    return this.set.has(peer.toString())\n  }\n\n  values (): IterableIterator<PeerId> {\n    return mapIterable<string, PeerId>(\n      this.set.values(),\n      (val) => {\n        return peerIdFromString(val)\n      }\n    )\n  }\n\n  intersection (other: PeerSet): PeerSet {\n    const output = new PeerSet()\n\n    for (const peerId of other) {\n      if (this.has(peerId)) {\n        output.add(peerId)\n      }\n    }\n\n    return output\n  }\n\n  difference (other: PeerSet): PeerSet {\n    const output = new PeerSet()\n\n    for (const peerId of this) {\n      if (!other.has(peerId)) {\n        output.add(peerId)\n      }\n    }\n\n    return output\n  }\n\n  union (other: PeerSet): PeerSet {\n    const output = new PeerSet()\n\n    for (const peerId of other) {\n      output.add(peerId)\n    }\n\n    for (const peerId of this) {\n      output.add(peerId)\n    }\n\n    return output\n  }\n}\n\nexport function peerSet (): PeerSet {\n  return new PeerSet()\n}\n", "import { createScalableCuckooFilter } from '@libp2p/utils/filters'\nimport type { PeerId } from '@libp2p/interface'\nimport type { Filter } from '@libp2p/utils/filters'\n\n/**\n * Uses a Cuckoo filter to implement a mechanism for deduplicating PeerIds in a\n * way that uses a smaller amount of memory than a PeerSet.\n */\nexport class PeerFilter {\n  private readonly filter: Filter\n\n  constructor (size: number, errorRate?: number) {\n    this.filter = createScalableCuckooFilter(size, errorRate)\n  }\n\n  has (peerId: PeerId): boolean {\n    return this.filter.has(peerId.toMultihash().bytes)\n  }\n\n  add (peerId: PeerId): void {\n    this.filter.add(peerId.toMultihash().bytes)\n  }\n\n  remove (peerId: PeerId): void {\n    this.filter.remove?.(peerId.toMultihash().bytes)\n  }\n}\n\n/**\n * Create and return a PeerFilter. This can be used by topologies to prevent\n * them receiving duplicate notifications for a peer that connects repeatedly.\n *\n * @example\n *\n * ```TypeScript\n * import { peerFilter } from '@libp2p/peer-collections'\n * import type { Registrar } from '@libp2p/interface-internal'\n *\n * const registrar: Registrar\n *\n * registrar.register('/my/protocol/1.0.0', {\n *   filter: peerFilter(),\n *   onConnect: (peerId) => {\n *     // will only be invoked for a given peerId once\n *   }\n * })\n * ```\n *\n * @param size - The maximum number of peers expected to be added to the filter\n * @param errorRate - The acceptable error rate\n */\nexport function peerFilter (size: number, errorRate: number = 0.001): PeerFilter {\n  return new PeerFilter(size, errorRate)\n}\n", "import { PeerMap } from './map.js'\nimport type { Metric, Metrics, PeerId } from '@libp2p/interface'\n\nexport interface TrackedPeerMapInit {\n  name: string\n  metrics?: Metrics\n}\n\nclass TrackedPeerMap<V> extends PeerMap<V> {\n  private readonly metric: Metric\n\n  constructor (init: Required<TrackedPeerMapInit>) {\n    super()\n\n    const { name, metrics } = init\n\n    this.metric = metrics.registerMetric(name)\n    this.updateComponentMetric()\n  }\n\n  set (key: PeerId, value: V): this {\n    super.set(key, value)\n    this.updateComponentMetric()\n    return this\n  }\n\n  delete (key: PeerId): boolean {\n    const deleted = super.delete(key)\n    this.updateComponentMetric()\n    return deleted\n  }\n\n  clear (): void {\n    super.clear()\n    this.updateComponentMetric()\n  }\n\n  private updateComponentMetric (): void {\n    this.metric.update(this.size)\n  }\n}\n\n/**\n * Creates a PeerMap that reports it's size to the libp2p Metrics service\n *\n * @example\n *\n * ```Typescript\n * import { trackedPeerMap } from '@libp2p/peer-collections'\n * import { createLibp2p } from 'libp2p'\n *\n * const libp2p = await createLibp2p()\n *\n * const list = trackedPeerMap({ name: 'my_metric_name', metrics: libp2p.metrics })\n * map.set(peerId, 'value')\n * ```\n */\nexport function trackedPeerMap <V> (config: TrackedPeerMapInit): PeerMap<V> {\n  const { name, metrics } = config\n  let map: PeerMap<V>\n\n  if (metrics != null) {\n    map = new TrackedPeerMap<V>({ name, metrics })\n  } else {\n    map = new PeerMap<V>()\n  }\n\n  return map\n}\n", "export const empty = new Uint8Array(0)\n\nexport function toHex (d: Uint8Array): string {\n  return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n}\n\nexport function fromHex (hex: string): Uint8Array {\n  const hexes = hex.match(/../g)\n  return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\nexport function equals (aa: Uint8Array, bb: Uint8Array): boolean {\n  if (aa === bb) { return true }\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function coerce (o: ArrayBufferView | ArrayBuffer | Uint8Array): Uint8Array {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') { return o }\n  if (o instanceof ArrayBuffer) { return new Uint8Array(o) }\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\nexport function isBinary (o: unknown): o is ArrayBuffer | ArrayBufferView {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n}\n\nexport function fromString (str: string): Uint8Array {\n  return new TextEncoder().encode(str)\n}\n\nexport function toString (b: Uint8Array): string {\n  return new TextDecoder().decode(b)\n}\n", "/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  /**\n   * @param {any[] | Iterable<number>} source\n   */\n  function encode (source) {\n    // @ts-ignore\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  /**\n   * @param {string | string[]} source\n   */\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  /**\n   * @param {string | string[]} string\n   */\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n", "import { coerce } from '../bytes.js'\nimport basex from '../vendor/base-x.js'\nimport type { BaseCodec, BaseDecoder, BaseEncoder, CombobaseDecoder, Multibase, MultibaseCodec, MultibaseDecoder, MultibaseEncoder, UnibaseDecoder } from './interface.js'\n\ninterface EncodeFn { (bytes: Uint8Array): string }\ninterface DecodeFn { (text: string): Uint8Array }\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder<Base extends string, Prefix extends string> implements MultibaseEncoder<Prefix>, BaseEncoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  encode (bytes: Uint8Array): Multibase<Prefix> {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder<Base extends string, Prefix extends string> implements MultibaseDecoder<Prefix>, UnibaseDecoder<Prefix>, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseDecode: DecodeFn\n  private readonly prefixCodePoint: number\n\n  constructor (name: Base, prefix: Prefix, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    const prefixCodePoint = prefix.codePointAt(0)\n    /* c8 ignore next 3 */\n    if (prefixCodePoint === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    this.prefixCodePoint = prefixCodePoint\n    this.baseDecode = baseDecode\n  }\n\n  decode (text: string): Uint8Array {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  or<OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n}\n\ntype Decoders<Prefix extends string> = Record<Prefix, UnibaseDecoder<Prefix>>\n\nclass ComposedDecoder<Prefix extends string> implements MultibaseDecoder<Prefix>, CombobaseDecoder<Prefix> {\n  readonly decoders: Decoders<Prefix>\n\n  constructor (decoders: Decoders<Prefix>) {\n    this.decoders = decoders\n  }\n\n  or <OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n\n  decode (input: string): Uint8Array {\n    const prefix = input[0] as Prefix\n    const decoder = this.decoders[prefix]\n    if (decoder != null) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\nexport function or <L extends string, R extends string> (left: UnibaseDecoder<L> | CombobaseDecoder<L>, right: UnibaseDecoder<R> | CombobaseDecoder<R>): ComposedDecoder<L | R> {\n  return new ComposedDecoder({\n    ...(left.decoders ?? { [(left as UnibaseDecoder<L>).prefix]: left }),\n    ...(right.decoders ?? { [(right as UnibaseDecoder<R>).prefix]: right })\n  } as Decoders<L | R>)\n}\n\nexport class Codec<Base extends string, Prefix extends string> implements MultibaseCodec<Prefix>, MultibaseEncoder<Prefix>, MultibaseDecoder<Prefix>, BaseCodec, BaseEncoder, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n  readonly baseDecode: DecodeFn\n  readonly encoder: Encoder<Base, Prefix>\n  readonly decoder: Decoder<Base, Prefix>\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  encode (input: Uint8Array): string {\n    return this.encoder.encode(input)\n  }\n\n  decode (input: string): Uint8Array {\n    return this.decoder.decode(input)\n  }\n}\n\nexport function from <Base extends string, Prefix extends string> ({ name, prefix, encode, decode }: { name: Base, prefix: Prefix, encode: EncodeFn, decode: DecodeFn }): Codec<Base, Prefix> {\n  return new Codec(name, prefix, encode, decode)\n}\n\nexport function baseX <Base extends string, Prefix extends string> ({ name, prefix, alphabet }: { name: Base, prefix: Prefix, alphabet: string }): Codec<Base, Prefix> {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: (text: string): Uint8Array => coerce(decode(text))\n  })\n}\n\nfunction decode (string: string, alphabetIdx: Record<string, number>, bitsPerChar: number, name: string): Uint8Array {\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = alphabetIdx[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\nfunction encode (data: Uint8Array, alphabet: string, bitsPerChar: number): string {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits !== 0) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (((out.length * bitsPerChar) & 7) !== 0) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\nfunction createAlphabetIdx (alphabet: string): Record<string, number> {\n  // Build the character lookup table:\n  const alphabetIdx: Record<string, number> = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    alphabetIdx[alphabet[i]] = i\n  }\n  return alphabetIdx\n}\n\n/**\n * RFC4648 Factory\n */\nexport function rfc4648 <Base extends string, Prefix extends string> ({ name, prefix, bitsPerChar, alphabet }: { name: Base, prefix: Prefix, bitsPerChar: number, alphabet: string }): Codec<Base, Prefix> {\n  const alphabetIdx = createAlphabetIdx(alphabet)\n  return from({\n    prefix,\n    name,\n    encode (input: Uint8Array): string {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input: string): Uint8Array {\n      return decode(input, alphabetIdx, bitsPerChar, name)\n    }\n  })\n}\n", "import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n", "import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n", "import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n", "/* eslint-disable */\nvar encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  // @ts-ignore\n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      // @ts-ignore\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  // @ts-ignore\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (/** @type {number} */ value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n", "import varint from './vendor/varint.js'\n\nexport function decode (data: Uint8Array, offset = 0): [number, number] {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\nexport function encodeTo (int: number, target: Uint8Array, offset = 0): Uint8Array {\n  varint.encode(int, target, offset)\n  return target\n}\n\nexport function encodingLength (int: number): number {\n  return varint.encodingLength(int)\n}\n", "import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\nimport type { MultihashDigest } from './interface.js'\n\n/**\n * Creates a multihash digest.\n */\nexport function create <Code extends number> (code: Code, digest: Uint8Array): Digest<Code, number> {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode (multihash: Uint8Array): MultihashDigest {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\nexport function equals (a: MultihashDigest, b: unknown): b is MultihashDigest {\n  if (a === b) {\n    return true\n  } else {\n    const data = b as { code?: unknown, size?: unknown, bytes?: unknown }\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest<Code extends number, Size extends number> implements MultihashDigest {\n  readonly code: Code\n  readonly size: Size\n  readonly digest: Uint8Array\n  readonly bytes: Uint8Array\n\n  /**\n   * Creates a multihash digest.\n   */\n  constructor (code: Code, size: Size, digest: Uint8Array, bytes: Uint8Array) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n\n/**\n * Used to check that the passed multihash has the passed code\n */\nexport function hasCode <T extends number> (digest: MultihashDigest, code: T): digest is MultihashDigest<T> {\n  return digest.code === code\n}\n", "import { base32 } from './bases/base32.js'\nimport { base36 } from './bases/base36.js'\nimport { base58btc } from './bases/base58.js'\nimport { coerce } from './bytes.js'\nimport * as Digest from './hashes/digest.js'\nimport * as varint from './varint.js'\nimport type * as API from './link/interface.js'\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\nexport function format <T extends API.Link<unknown, number, number, API.Version>, Prefix extends string> (link: T, base?: API.MultibaseEncoder<Prefix>): API.ToString<T, Prefix> {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        base as API.MultibaseEncoder<'z'> ?? base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        (base ?? base32.encoder) as API.MultibaseEncoder<Prefix>\n      )\n  }\n}\n\nexport function toJSON <Link extends API.UnknownLink> (link: Link): API.LinkJSON<Link> {\n  return {\n    '/': format(link)\n  }\n}\n\nexport function fromJSON <Link extends API.UnknownLink> (json: API.LinkJSON<Link>): CID<unknown, number, number, API.Version> {\n  return CID.parse(json['/'])\n}\n\nconst cache = new WeakMap<API.UnknownLink, Map<string, string>>()\n\nfunction baseCache (cid: API.UnknownLink): Map<string, string> {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\nexport class CID<Data = unknown, Format extends number = number, Alg extends number = number, Version extends API.Version = API.Version> implements API.Link<Data, Format, Alg, Version> {\n  readonly code: Format\n  readonly version: Version\n  readonly multihash: API.MultihashDigest<Alg>\n  readonly bytes: Uint8Array\n  readonly '/': Uint8Array\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param multihash - (Multi)hash of the of the content.\n   */\n  constructor (version: Version, code: Format, multihash: API.MultihashDigest<Alg>, bytes: Uint8Array) {\n    this.code = code\n    this.version = version\n    this.multihash = multihash\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID (): this {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset (): number {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength (): number {\n    return this.bytes.byteLength\n  }\n\n  toV0 (): CID<Data, API.DAG_PB, API.SHA_256, 0> {\n    switch (this.version) {\n      case 0: {\n        return this as CID<Data, API.DAG_PB, API.SHA_256, 0>\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return (\n          CID.createV0(\n            multihash as API.MultihashDigest<API.SHA_256>\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  toV1 (): CID<Data, Format, Alg, 1> {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return this as CID<Data, Format, Alg, 1>\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  equals (other: unknown): other is CID<Data, Format, Alg, Version> {\n    return CID.equals(this, other)\n  }\n\n  static equals <Data, Format extends number, Alg extends number, Version extends API.Version>(self: API.Link<Data, Format, Alg, Version>, other: unknown): other is CID {\n    const unknown = other as { code?: unknown, version?: unknown, multihash?: unknown }\n    return (\n      unknown != null &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  toString (base?: API.MultibaseEncoder<string>): string {\n    return format(this, base)\n  }\n\n  toJSON (): API.LinkJSON<this> {\n    return { '/': format(this) }\n  }\n\n  link (): this {\n    return this\n  }\n\n  readonly [Symbol.toStringTag] = 'CID';\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] (): string {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   */\n  static asCID <Data, Format extends number, Alg extends number, Version extends API.Version, U>(input: API.Link<Data, Format, Alg, Version> | U): CID<Data, Format, Alg, Version> | null {\n    if (input == null) {\n      return null\n    }\n\n    const value = input as any\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        multihash as API.MultihashDigest<Alg>,\n        bytes ?? encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest = Digest.decode(multihash) as API.MultihashDigest<Alg>\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param digest - (Multi)hash of the of the content.\n   */\n  static create <Data, Format extends number, Alg extends number, Version extends API.Version>(version: Version, code: Format, digest: API.MultihashDigest<Alg>): CID<Data, Format, Alg, Version> {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   */\n  static createV0 <T = unknown>(digest: API.MultihashDigest<typeof SHA_256_CODE>): CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0> {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @param code - Content encoding format code.\n   * @param digest - Multihash of the content.\n   */\n  static createV1 <Data, Code extends number, Alg extends number>(code: Code, digest: API.MultihashDigest<Alg>): CID<Data, Code, Alg, 1> {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   */\n  static decode <Data, Code extends number, Alg extends number, Version extends API.Version>(bytes: API.ByteView<API.Link<Data, Code, Alg, Version>>): CID<Data, Code, Alg, Version> {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length !== 0) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   */\n  static decodeFirst <T, C extends number, A extends number, V extends API.Version>(bytes: API.ByteView<API.Link<T, C, A, V>>): [CID<T, C, A, V>, Uint8Array] {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(digest as API.MultihashDigest<API.SHA_256>)\n        : CID.createV1(specs.codec, digest)\n    return [cid as CID<T, C, A, V>, bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   */\n  static inspectBytes <T, C extends number, A extends number, V extends API.Version>(initialBytes: API.ByteView<API.Link<T, C, A, V>>): { version: V, codec: C, multihashCode: A, digestSize: number, multihashSize: number, size: number } {\n    let offset = 0\n    const next = (): number => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = next() as V\n    let codec = DAG_PB_CODE as C\n    if (version as number === 18) {\n      // CIDv0\n      version = 0 as V\n      offset = 0\n    } else {\n      codec = next() as C\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = next() as A // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   */\n  static parse <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version>(source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): CID<Data, Code, Alg, Version> {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\nfunction parseCIDtoBytes <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version> (source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): [Prefix, API.ByteView<API.Link<Data, Code, Alg, Version>>] {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base ?? base58btc\n      return [\n        base58btc.prefix as Prefix,\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base ?? base58btc\n      return [base58btc.prefix as Prefix, decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base ?? base32\n      return [base32.prefix as Prefix, decoder.decode(source)]\n    }\n    case base36.prefix: {\n      const decoder = base ?? base36\n      return [base36.prefix as Prefix, decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [source[0] as Prefix, base.decode(source)]\n    }\n  }\n}\n\nfunction toStringV0 (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<'z'>): string {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nfunction toStringV1 <Prefix extends string> (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<Prefix>): string {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\nfunction encodeCID (version: API.Version, code: number, multihash: Uint8Array): Uint8Array {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n", "import { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n", "import { base64 } from 'multiformats/bases/base64'\nimport type { Block, BlockPresence, WantlistEntry } from '../pb/message.js'\nimport type { CID } from 'multiformats'\n\n/**\n * A bitswap message that is in the send queue. So implemented to be\n * cheap to merge multiple messages when we repeatedly send messages\n * to the same peer.\n */\nexport class QueuedBitswapMessage {\n  public full: boolean\n  public pendingBytes: number\n  public wantlist: Map<string, WantlistEntry>\n  public blocks: Map<string, Block>\n  public blockPresences: Map<string, BlockPresence>\n\n  constructor (full: boolean = false, pendingBytes: number = 0) {\n    this.full = full\n    this.wantlist = new Map()\n    this.blocks = new Map()\n    this.blockPresences = new Map()\n    this.pendingBytes = 0\n  }\n\n  addWantlistEntry (cid: CID, entry: WantlistEntry): void {\n    const key = base64.encode(cid.multihash.bytes)\n    this.wantlist.set(key, entry)\n  }\n\n  addBlockPresence (cid: CID, blockPresence: BlockPresence): void {\n    const key = base64.encode(cid.multihash.bytes)\n    this.blockPresences.set(key, blockPresence)\n  }\n\n  addBlock (cid: CID, block: Block): void {\n    const key = base64.encode(cid.multihash.bytes)\n    this.blocks.set(key, block)\n  }\n}\n", "import { encode, encodingLength } from 'uint8-varint'\n\nfunction varintEncoder (buf: number[]): Uint8Array {\n  let out: Uint8Array = new Uint8Array(buf.reduce((acc, curr) => {\n    return acc + encodingLength(curr)\n  }, 0))\n  let offset = 0\n\n  for (const num of buf) {\n    out = encode(num, out, offset)\n\n    offset += encodingLength(num)\n  }\n\n  return out\n}\n\nexport default varintEncoder\n", "import ve from './varint-encoder.js'\nimport type { CID } from 'multiformats/cid'\n\nexport function cidToPrefix (cid: CID): Uint8Array {\n  return ve([\n    cid.version, cid.code, cid.multihash.code, cid.multihash.digest.byteLength\n  ])\n}\n", "import { DEFAULT_MAX_SIZE_REPLACE_HAS_WITH_BLOCK } from '../constants.js'\nimport { BlockPresenceType, WantType } from '../pb/message.js'\nimport { QueuedBitswapMessage } from '../utils/bitswap-message.js'\nimport { cidToPrefix } from '../utils/cid-prefix.js'\nimport type { Network } from '../network.js'\nimport type { AbortOptions, ComponentLogger, Logger, PeerId } from '@libp2p/interface'\nimport type { Blockstore } from 'interface-blockstore'\nimport type { CID } from 'multiformats/cid'\n\nexport interface LedgerComponents {\n  peerId: PeerId\n  blockstore: Blockstore\n  network: Network\n  logger: ComponentLogger\n}\n\nexport interface LedgerInit {\n  maxSizeReplaceHasWithBlock?: number\n}\n\nexport interface PeerWantListEntry {\n  /**\n   * The CID the peer has requested\n   */\n  cid: CID\n\n  /**\n   * The priority with which the remote should return the block\n   */\n  priority: number\n\n  /**\n   * If we want the block or if we want the remote to tell us if they have the\n   * block - note if the block is small they'll send it to us anyway.\n   */\n  wantType: WantType\n\n  /**\n   * Whether the remote should tell us if they have the block or not\n   */\n  sendDontHave: boolean\n\n  /**\n   * If we don't have the block and we've told them we don't have the block\n   */\n  sentDoNotHave?: boolean\n}\n\nexport class Ledger {\n  public peerId: PeerId\n  private readonly blockstore: Blockstore\n  private readonly network: Network\n  public wants: Map<string, PeerWantListEntry>\n  public exchangeCount: number\n  public bytesSent: number\n  public bytesReceived: number\n  public lastExchange?: number\n  private readonly maxSizeReplaceHasWithBlock: number\n  private readonly log: Logger\n\n  constructor (components: LedgerComponents, init: LedgerInit) {\n    this.peerId = components.peerId\n    this.blockstore = components.blockstore\n    this.network = components.network\n    this.wants = new Map()\n    this.log = components.logger.forComponent(`helia:bitswap:ledger:${components.peerId}`)\n\n    this.exchangeCount = 0\n    this.bytesSent = 0\n    this.bytesReceived = 0\n    this.maxSizeReplaceHasWithBlock = init.maxSizeReplaceHasWithBlock ?? DEFAULT_MAX_SIZE_REPLACE_HAS_WITH_BLOCK\n  }\n\n  sentBytes (n: number): void {\n    this.exchangeCount++\n    this.lastExchange = (new Date()).getTime()\n    this.bytesSent += n\n  }\n\n  receivedBytes (n: number): void {\n    this.exchangeCount++\n    this.lastExchange = (new Date()).getTime()\n    this.bytesReceived += n\n  }\n\n  debtRatio (): number {\n    return (this.bytesSent / (this.bytesReceived + 1)) // +1 is to prevent division by zero\n  }\n\n  public async sendBlocksToPeer (options?: AbortOptions): Promise<void> {\n    const message = new QueuedBitswapMessage()\n    const sentBlocks = new Set<string>()\n\n    for (const [key, entry] of this.wants.entries()) {\n      try {\n        const block = await this.blockstore.get(entry.cid, options)\n\n        // do they want the block or just us to tell them we have the block\n        if (entry.wantType === WantType.WantHave) {\n          if (block.byteLength < this.maxSizeReplaceHasWithBlock) {\n            this.log('sending have and block for %c', entry.cid)\n            // if the block is small we just send it to them\n            sentBlocks.add(key)\n            message.addBlock(entry.cid, {\n              data: block,\n              prefix: cidToPrefix(entry.cid)\n            })\n          } else {\n            this.log('sending have for %c', entry.cid)\n            // otherwise tell them we have the block\n            message.addBlockPresence(entry.cid, {\n              cid: entry.cid.bytes,\n              type: BlockPresenceType.HaveBlock\n            })\n          }\n        } else {\n          this.log('sending block for %c', entry.cid)\n          // they want the block, send it to them\n          sentBlocks.add(key)\n          message.addBlock(entry.cid, {\n            data: block,\n            prefix: cidToPrefix(entry.cid)\n          })\n        }\n      } catch (err: any) {\n        if (err.name !== 'NotFoundError') {\n          throw err\n        }\n\n        this.log('do not have block for %c', entry.cid)\n\n        // we don't have the requested block and the remote is not interested\n        // in us telling them that\n        if (!entry.sendDontHave) {\n          continue\n        }\n\n        // we have already told them we don't have the block\n        if (entry.sentDoNotHave === true) {\n          continue\n        }\n\n        entry.sentDoNotHave = true\n        message.addBlockPresence(entry.cid, {\n          cid: entry.cid.bytes,\n          type: BlockPresenceType.DoNotHaveBlock\n        })\n      }\n    }\n\n    // only send the message if we actually have something to send\n    if (message.blocks.size > 0 || message.blockPresences.size > 0) {\n      this.log('sending message')\n      await this.network.sendMessage(this.peerId, message, options)\n      this.log('sent message')\n\n      // update accounting\n      this.sentBytes([...message.blocks.values()].reduce((acc, curr) => acc + curr.data.byteLength, 0))\n\n      // remove sent blocks from local copy of their want list - they can still\n      // re-request if required\n      for (const key of sentBlocks) {\n        this.wants.delete(key)\n      }\n    }\n  }\n}\n", "import { trackedPeerMap } from '@libp2p/peer-collections'\nimport { CID } from 'multiformats/cid'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { WantType } from '../pb/message.js'\nimport { Ledger } from './ledger.js'\nimport type { BitswapNotifyProgressEvents, WantListEntry } from '../index.js'\nimport type { Network } from '../network.js'\nimport type { BitswapMessage } from '../pb/message.js'\nimport type { AbortOptions, ComponentLogger, Libp2p, Logger, Metrics, PeerId } from '@libp2p/interface'\nimport type { PeerMap } from '@libp2p/peer-collections'\nimport type { Blockstore } from 'interface-blockstore'\nimport type { ProgressOptions } from 'progress-events'\n\nexport interface PeerWantListsInit {\n  maxSizeReplaceHasWithBlock?: number\n}\n\nexport interface PeerWantListsComponents {\n  blockstore: Blockstore\n  network: Network\n  libp2p: Libp2p\n  logger: ComponentLogger\n  metrics?: Metrics\n}\n\nexport interface PeerLedger {\n  peer: PeerId\n  value: number\n  sent: number\n  received: number\n  exchanged: number\n}\n\nexport class PeerWantLists {\n  public blockstore: Blockstore\n  public network: Network\n  public readonly ledgerMap: PeerMap<Ledger>\n  private readonly maxSizeReplaceHasWithBlock?: number\n  private readonly log: Logger\n  private readonly logger: ComponentLogger\n\n  constructor (components: PeerWantListsComponents, init: PeerWantListsInit = {}) {\n    this.blockstore = components.blockstore\n    this.network = components.network\n    this.maxSizeReplaceHasWithBlock = init.maxSizeReplaceHasWithBlock\n    this.log = components.logger.forComponent('helia:bitswap:peer-want-lists')\n    this.logger = components.logger\n\n    this.ledgerMap = trackedPeerMap({\n      name: 'helia_bitswap_ledger_map',\n      metrics: components.metrics\n    })\n\n    this.network.addEventListener('bitswap:message', (evt) => {\n      this.receiveMessage(evt.detail.peer, evt.detail.message)\n        .catch(err => {\n          this.log.error('error receiving bitswap message from %p', evt.detail.peer, err)\n        })\n    })\n    this.network.addEventListener('peer:disconnected', evt => {\n      this.peerDisconnected(evt.detail)\n    })\n  }\n\n  ledgerForPeer (peerId: PeerId): PeerLedger | undefined {\n    const ledger = this.ledgerMap.get(peerId)\n\n    if (ledger == null) {\n      return undefined\n    }\n\n    return {\n      peer: ledger.peerId,\n      value: ledger.debtRatio(),\n      sent: ledger.bytesSent,\n      received: ledger.bytesReceived,\n      exchanged: ledger.exchangeCount\n    }\n  }\n\n  wantListForPeer (peerId: PeerId): WantListEntry[] | undefined {\n    const ledger = this.ledgerMap.get(peerId)\n\n    if (ledger == null) {\n      return undefined\n    }\n\n    return [...ledger.wants.values()]\n  }\n\n  peers (): PeerId[] {\n    return Array.from(this.ledgerMap.values()).map((l) => l.peerId)\n  }\n\n  /**\n   * Handle incoming messages\n   */\n  async receiveMessage (peerId: PeerId, message: BitswapMessage): Promise<void> {\n    let ledger = this.ledgerMap.get(peerId)\n\n    if (ledger == null) {\n      ledger = new Ledger({\n        peerId,\n        blockstore: this.blockstore,\n        network: this.network,\n        logger: this.logger\n      }, {\n        maxSizeReplaceHasWithBlock: this.maxSizeReplaceHasWithBlock\n      })\n      this.ledgerMap.set(peerId, ledger)\n    }\n\n    // record the amount of block data received\n    ledger.receivedBytes(message.blocks?.reduce((acc, curr) => acc + curr.data.byteLength, 0) ?? 0)\n\n    if (message.wantlist != null) {\n      // if the message has a full wantlist, clear the current wantlist\n      if (message.wantlist.full === true) {\n        ledger.wants.clear()\n      }\n\n      // clear cancelled wants and add new wants to the ledger\n      for (const entry of message.wantlist.entries) {\n        const cid = CID.decode(entry.cid)\n        const cidStr = uint8ArrayToString(cid.multihash.bytes, 'base64')\n\n        if (entry.cancel === true) {\n          this.log('peer %p cancelled want of block for %c', peerId, cid)\n          ledger.wants.delete(cidStr)\n        } else {\n          if (entry.wantType === WantType.WantHave) {\n            this.log('peer %p wanted block presence for %c', peerId, cid)\n          } else {\n            this.log('peer %p wanted block for %c', peerId, cid)\n          }\n\n          ledger.wants.set(cidStr, {\n            cid,\n            priority: entry.priority,\n            wantType: entry.wantType ?? WantType.WantBlock,\n            sendDontHave: entry.sendDontHave ?? false\n          })\n        }\n      }\n    }\n\n    this.log('send blocks to peer')\n    await ledger.sendBlocksToPeer()\n  }\n\n  async receivedBlock (cid: CID, options: ProgressOptions<BitswapNotifyProgressEvents> & AbortOptions): Promise<void> {\n    const cidStr = uint8ArrayToString(cid.multihash.bytes, 'base64')\n    const ledgers: Ledger[] = []\n\n    for (const ledger of this.ledgerMap.values()) {\n      if (ledger.wants.has(cidStr)) {\n        ledgers.push(ledger)\n      }\n    }\n\n    await Promise.all(\n      ledgers.map(async (ledger) => ledger.sendBlocksToPeer(options))\n    )\n  }\n\n  peerDisconnected (peerId: PeerId): void {\n    this.ledgerMap.delete(peerId)\n  }\n}\n", "import { AbstractSession } from '@helia/utils'\nimport { isPeerId } from '@libp2p/interface'\nimport type { BitswapWantProgressEvents } from './index.js'\nimport type { Network } from './network.js'\nimport type { WantList } from './want-list.js'\nimport type { CreateSessionOptions } from '@helia/interface'\nimport type { ComponentLogger, Libp2p, PeerId } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { AbortOptions } from 'interface-store'\nimport type { CID } from 'multiformats/cid'\n\nexport interface BitswapSessionComponents {\n  network: Network\n  wantList: WantList\n  logger: ComponentLogger\n  libp2p: Libp2p\n}\n\nclass BitswapSession extends AbstractSession<PeerId, BitswapWantProgressEvents> {\n  private readonly wantList: WantList\n  private readonly network: Network\n  private readonly libp2p: Libp2p\n\n  constructor (components: BitswapSessionComponents, init: CreateSessionOptions) {\n    super(components, {\n      ...init,\n      name: 'helia:bitswap:session'\n    })\n\n    this.wantList = components.wantList\n    this.network = components.network\n    this.libp2p = components.libp2p\n  }\n\n  async queryProvider (cid: CID, provider: PeerId, options: AbortOptions): Promise<Uint8Array> {\n    this.log('sending WANT-BLOCK for %c to %p', cid, provider)\n\n    const result = await this.wantList.wantSessionBlock(cid, provider, options)\n\n    this.log('%p %s %c', provider, result.has ? 'has' : 'does not have', cid)\n\n    if (result.has && result.block != null) {\n      return result.block\n    }\n\n    throw new Error('Provider did not have block')\n  }\n\n  async * findNewProviders (cid: CID, options: AbortOptions = {}): AsyncGenerator<PeerId> {\n    for await (const provider of this.network.findProviders(cid, options)) {\n      yield provider.id\n    }\n  }\n\n  toEvictionKey (provider: PeerId): Uint8Array | string {\n    return provider.toMultihash().bytes\n  }\n\n  equals (providerA: PeerId, providerB: PeerId): boolean {\n    return providerA.equals(providerB)\n  }\n\n  async convertToProvider (provider: PeerId | Multiaddr | Multiaddr[], options?: AbortOptions): Promise<PeerId | undefined> {\n    if (isPeerId(provider)) {\n      return provider\n    }\n\n    const connection = await this.libp2p.dial(provider, options)\n\n    return connection.remotePeer\n  }\n}\n\nexport function createBitswapSession (components: BitswapSessionComponents, init: CreateSessionOptions): BitswapSession {\n  return new BitswapSession(components, init)\n}\n", "import type { Libp2p, MetricGroup, Metrics, PeerId } from '@libp2p/interface'\n\nexport interface StatsComponents {\n  libp2p: Libp2p\n  metrics?: Metrics\n}\n\nexport class Stats {\n  private readonly blocksReceived?: MetricGroup\n  private readonly duplicateBlocksReceived?: MetricGroup\n  private readonly dataReceived?: MetricGroup\n  private readonly duplicateDataReceived?: MetricGroup\n\n  constructor (components: StatsComponents) {\n    this.blocksReceived = components.metrics?.registerMetricGroup('helia_bitswap_received_blocks')\n    this.duplicateBlocksReceived = components.metrics?.registerMetricGroup('helia_bitswap_duplicate_received_blocks')\n    this.dataReceived = components.metrics?.registerMetricGroup('helia_bitswap_data_received_bytes')\n    this.duplicateDataReceived = components.metrics?.registerMetricGroup('helia_bitswap_duplicate_data_received_bytes')\n  }\n\n  updateBlocksReceived (count: number = 1, peerId?: PeerId): void {\n    const stats: Record<string, number | true> = {\n      global: count\n    }\n\n    if (peerId != null) {\n      stats[peerId.toString()] = count\n    }\n\n    this.blocksReceived?.increment(stats)\n  }\n\n  updateDuplicateBlocksReceived (count: number = 1, peerId?: PeerId): void {\n    const stats: Record<string, number | true> = {\n      global: count\n    }\n\n    if (peerId != null) {\n      stats[peerId.toString()] = count\n    }\n\n    this.duplicateBlocksReceived?.increment(stats)\n  }\n\n  updateDataReceived (bytes: number, peerId?: PeerId): void {\n    const stats: Record<string, number> = {\n      global: bytes\n    }\n\n    if (peerId != null) {\n      stats[peerId.toString()] = bytes\n    }\n\n    this.dataReceived?.increment(stats)\n  }\n\n  updateDuplicateDataReceived (bytes: number, peerId?: PeerId): void {\n    const stats: Record<string, number> = {\n      global: bytes\n    }\n\n    if (peerId != null) {\n      stats[peerId.toString()] = bytes\n    }\n\n    this.duplicateDataReceived?.increment(stats)\n  }\n}\n", "import type { Metric, Metrics } from '@libp2p/interface'\n\nexport interface TrackedMapInit {\n  name: string\n  metrics: Metrics\n}\n\nclass TrackedMap<K, V> extends Map<K, V> {\n  private readonly metric: Metric\n\n  constructor (init: TrackedMapInit) {\n    super()\n\n    const { name, metrics } = init\n\n    this.metric = metrics.registerMetric(name)\n    this.updateComponentMetric()\n  }\n\n  set (key: K, value: V): this {\n    super.set(key, value)\n    this.updateComponentMetric()\n    return this\n  }\n\n  delete (key: K): boolean {\n    const deleted = super.delete(key)\n    this.updateComponentMetric()\n    return deleted\n  }\n\n  clear (): void {\n    super.clear()\n    this.updateComponentMetric()\n  }\n\n  private updateComponentMetric (): void {\n    this.metric.update(this.size)\n  }\n}\n\nexport interface CreateTrackedMapInit {\n  /**\n   * The metric name to use\n   */\n  name: string\n\n  /**\n   * A metrics implementation\n   */\n  metrics?: Metrics\n}\n\nexport function trackedMap <K, V> (config: CreateTrackedMapInit): Map<K, V> {\n  const { name, metrics } = config\n  let map: Map<K, V>\n\n  if (metrics != null) {\n    map = new TrackedMap<K, V>({ name, metrics })\n  } else {\n    map = new Map<K, V>()\n  }\n\n  return map\n}\n", "import * as Digest from './digest.js'\nimport type { MultihashHasher } from './interface.js'\n\ntype Await<T> = Promise<T> | T\n\nexport function from <Name extends string, Code extends number> ({ name, code, encode }: { name: Name, code: Code, encode(input: Uint8Array): Await<Uint8Array> }): Hasher<Name, Code> {\n  return new Hasher(name, code, encode)\n}\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n */\nexport class Hasher<Name extends string, Code extends number> implements MultihashHasher<Code> {\n  readonly name: Name\n  readonly code: Code\n  readonly encode: (input: Uint8Array) => Await<Uint8Array>\n\n  constructor (name: Name, code: Code, encode: (input: Uint8Array) => Await<Uint8Array>) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  digest (input: Uint8Array): Await<Digest.Digest<Code, number>> {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n", "/* global crypto */\n\nimport { from } from './hasher.js'\n\nfunction sha (name: AlgorithmIdentifier): (data: Uint8Array) => Promise<Uint8Array> {\n  return async data => new Uint8Array(await crypto.subtle.digest(name, data))\n}\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n", "import { decode, encodingLength } from 'uint8-varint'\n\nfunction varintDecoder (buf: Uint8Array): number[] {\n  if (!(buf instanceof Uint8Array)) {\n    throw new Error('arg needs to be a Uint8Array')\n  }\n\n  const result: number[] = []\n\n  while (buf.length > 0) {\n    const num = decode(buf)\n    result.push(num)\n    buf = buf.slice(encodingLength(num))\n  }\n\n  return result\n}\n\nexport default varintDecoder\n", "import { TypedEventEmitter, setMaxListeners } from '@libp2p/interface'\nimport { trackedPeerMap } from '@libp2p/peer-collections'\nimport { trackedMap } from '@libp2p/utils/tracked-map'\nimport { CID } from 'multiformats/cid'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport pDefer from 'p-defer'\nimport { raceEvent } from 'race-event'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { DEFAULT_MESSAGE_SEND_DELAY } from './constants.js'\nimport { BlockPresenceType, WantType } from './pb/message.js'\nimport { QueuedBitswapMessage } from './utils/bitswap-message.js'\nimport vd from './utils/varint-decoder.js'\nimport type { BitswapNotifyProgressEvents, MultihashHasherLoader } from './index.js'\nimport type { BitswapNetworkWantProgressEvents, Network } from './network.js'\nimport type { BitswapMessage } from './pb/message.js'\nimport type { ComponentLogger, PeerId, Startable, AbortOptions, Libp2p, TypedEventTarget, Metrics } from '@libp2p/interface'\nimport type { Logger } from '@libp2p/logger'\nimport type { PeerMap } from '@libp2p/peer-collections'\nimport type { DeferredPromise } from 'p-defer'\nimport type { ProgressOptions } from 'progress-events'\n\nexport interface WantListComponents {\n  network: Network\n  logger: ComponentLogger\n  libp2p: Libp2p\n  metrics?: Metrics\n}\n\nexport interface WantListInit {\n  sendMessagesDelay?: number\n  hashLoader?: MultihashHasherLoader\n}\n\nexport interface WantListEntry {\n  /**\n   * The CID we send to the remote\n   */\n  cid: CID\n\n  /**\n   * The priority with which the remote should return the block\n   */\n  priority: number\n\n  /**\n   * If we want the block or if we want the remote to tell us if they have the\n   * block - note if the block is small they'll send it to us anyway.\n   */\n  wantType: WantType\n\n  /**\n   * Whether we are cancelling the block want or not\n   */\n  cancel: boolean\n\n  /**\n   * Whether the remote should tell us if they have the block or not\n   */\n  sendDontHave: boolean\n}\n\nexport interface WantOptions extends AbortOptions, ProgressOptions<BitswapNetworkWantProgressEvents> {\n  /**\n   * Allow prioritizing blocks\n   */\n  priority?: number\n}\n\nexport interface WantBlockResult {\n  sender: PeerId\n  cid: CID\n  block: Uint8Array\n}\n\nexport interface WantDoNotHaveResult {\n  sender: PeerId\n  cid: CID\n  has: false\n}\n\nexport interface WantHaveResult {\n  sender: PeerId\n  cid: CID\n  has: true\n  block?: Uint8Array\n}\n\nexport type WantPresenceResult = WantDoNotHaveResult | WantHaveResult\n\nexport interface WantListEvents {\n  block: CustomEvent<WantBlockResult>\n  presence: CustomEvent<WantPresenceResult>\n}\n\nexport class WantList extends TypedEventEmitter<WantListEvents> implements Startable, TypedEventTarget<WantListEvents> {\n  /**\n   * Tracks what CIDs we've previously sent to which peers\n   */\n  public readonly peers: PeerMap<Set<string>>\n  public readonly wants: Map<string, WantListEntry>\n  private readonly network: Network\n  private readonly log: Logger\n  private readonly sendMessagesDelay: number\n  private sendMessagesTimeout?: ReturnType<typeof setTimeout>\n  private readonly hashLoader?: MultihashHasherLoader\n  private sendingMessages?: DeferredPromise<void>\n\n  constructor (components: WantListComponents, init: WantListInit = {}) {\n    super()\n\n    setMaxListeners(Infinity, this)\n    this.peers = trackedPeerMap({\n      name: 'helia_bitswap_peers',\n      metrics: components.metrics\n    })\n    this.wants = trackedMap({\n      name: 'helia_bitswap_wantlist',\n      metrics: components.metrics\n    })\n    this.network = components.network\n    this.sendMessagesDelay = init.sendMessagesDelay ?? DEFAULT_MESSAGE_SEND_DELAY\n    this.log = components.logger.forComponent('helia:bitswap:wantlist')\n    this.hashLoader = init.hashLoader\n\n    this.network.addEventListener('bitswap:message', (evt) => {\n      this.receiveMessage(evt.detail.peer, evt.detail.message)\n        .catch(err => {\n          this.log.error('error receiving bitswap message from %p', evt.detail.peer, err)\n        })\n    })\n    this.network.addEventListener('peer:connected', evt => {\n      this.peerConnected(evt.detail)\n        .catch(err => {\n          this.log.error('error processing newly connected bitswap peer %p', evt.detail, err)\n        })\n    })\n    this.network.addEventListener('peer:disconnected', evt => {\n      this.peerDisconnected(evt.detail)\n    })\n  }\n\n  private async addEntry (cid: CID, options: WantOptions & { wantType: WantType.WantBlock }): Promise<WantBlockResult>\n  private async addEntry (cid: CID, options: WantOptions & { wantType: WantType.WantHave }): Promise<WantPresenceResult>\n  private async addEntry (cid: CID, options: WantOptions & { wantType: WantType }): Promise<WantBlockResult | WantPresenceResult> {\n    const cidStr = uint8ArrayToString(cid.multihash.bytes, 'base64')\n    let entry = this.wants.get(cidStr)\n\n    if (entry == null) {\n      entry = {\n        cid,\n        priority: options.priority ?? 1,\n        wantType: options.wantType ?? WantType.WantBlock,\n        cancel: false,\n        sendDontHave: true\n      }\n\n      this.wants.set(cidStr, entry)\n    }\n\n    // upgrade want-have to want-block if the new want is a WantBlock but the\n    // previous want was a WantHave\n    if (entry.wantType === WantType.WantHave && options.wantType === WantType.WantBlock) {\n      entry.wantType = WantType.WantBlock\n    }\n\n    // broadcast changes\n    await this.sendMessagesDebounced()\n\n    try {\n      if (options.wantType === WantType.WantBlock) {\n        const event = await raceEvent<CustomEvent<WantBlockResult>>(this, 'block', options?.signal, {\n          filter: (event) => {\n            return uint8ArrayEquals(cid.multihash.digest, event.detail.cid.multihash.digest)\n          },\n          errorMessage: 'Want was aborted'\n        })\n\n        return event.detail\n      }\n\n      const event = await raceEvent<CustomEvent<WantPresenceResult>>(this, 'presence', options?.signal, {\n        filter: (event) => {\n          return uint8ArrayEquals(cid.multihash.digest, event.detail.cid.multihash.digest)\n        },\n        errorMessage: 'Want was aborted'\n      })\n\n      return event.detail\n    } finally {\n      if (options.signal?.aborted === true) {\n        this.log('want for %c was aborted, cancelling want', cid)\n        entry.cancel = true\n        // broadcast changes\n        await this.sendMessagesDebounced()\n      }\n    }\n  }\n\n  private async sendMessagesDebounced (): Promise<void> {\n    await this.sendingMessages?.promise\n\n    // broadcast changes\n    clearTimeout(this.sendMessagesTimeout)\n    this.sendMessagesTimeout = setTimeout(() => {\n      void this.sendMessages()\n        .catch(err => {\n          this.log('error sending messages to peers', err)\n        })\n    }, this.sendMessagesDelay)\n  }\n\n  private async sendMessages (): Promise<void> {\n    this.sendingMessages = pDefer()\n\n    await Promise.all(\n      [...this.peers.entries()].map(async ([peerId, sentWants]) => {\n        const sent = new Set<string>()\n        const message = new QueuedBitswapMessage()\n\n        for (const [key, entry] of this.wants.entries()) {\n          const sentPreviously = sentWants.has(key)\n\n          // only send if either we've not sent it before, or we haven't sent it\n          // but we're also cancelling the want.\n          if (sentPreviously || entry.cancel) {\n            continue\n          }\n\n          sent.add(key)\n\n          message.addWantlistEntry(entry.cid, {\n            cid: entry.cid.bytes,\n            priority: entry.priority,\n            wantType: entry.wantType,\n            cancel: entry.cancel,\n            sendDontHave: entry.sendDontHave\n          })\n        }\n\n        if (message.wantlist.size === 0) {\n          return\n        }\n\n        // add message to send queue\n        try {\n          await this.network.sendMessage(peerId, message)\n\n          // update list of messages sent to remote\n          for (const key of sent) {\n            sentWants.add(key)\n          }\n        } catch (err: any) {\n          this.log.error('error sending full wantlist to new peer', err)\n        }\n      })\n    ).catch(err => {\n      this.log.error('error sending messages', err)\n    })\n\n    // queued all message sends, remove cancelled wants from wantlist and sent\n    // wants\n    for (const [key, entry] of this.wants) {\n      if (entry.cancel) {\n        this.wants.delete(key)\n\n        for (const sentWants of this.peers.values()) {\n          sentWants.delete(key)\n        }\n      }\n    }\n\n    this.sendingMessages.resolve()\n  }\n\n  has (cid: CID): boolean {\n    const cidStr = uint8ArrayToString(cid.multihash.bytes, 'base64')\n    return this.wants.has(cidStr)\n  }\n\n  /**\n   * Add a CID to the wantlist\n   */\n  async wantSessionPresence (cid: CID, peerId: PeerId, options: WantOptions = {}): Promise<WantPresenceResult> {\n    const message = new QueuedBitswapMessage()\n    message.addWantlistEntry(cid, {\n      cid: cid.bytes,\n      sendDontHave: true,\n      wantType: WantType.WantHave,\n      priority: 1\n    })\n\n    // sending WantHave directly to peer\n    await this.network.sendMessage(peerId, message)\n\n    // wait for peer response\n    const event = await raceEvent<CustomEvent<WantHaveResult | WantDoNotHaveResult>>(this, 'presence', options.signal, {\n      filter: (event) => {\n        return peerId.equals(event.detail.sender) && uint8ArrayEquals(cid.multihash.digest, event.detail.cid.multihash.digest)\n      }\n    })\n\n    return event.detail\n  }\n\n  /**\n   * Add a CID to the wantlist\n   */\n  async wantBlock (cid: CID, options: WantOptions = {}): Promise<WantBlockResult> {\n    return this.addEntry(cid, {\n      ...options,\n      wantType: WantType.WantBlock\n    })\n  }\n\n  /**\n   * Add a CID to the wantlist\n   */\n  async wantSessionBlock (cid: CID, peerId: PeerId, options: WantOptions = {}): Promise<WantPresenceResult> {\n    const message = new QueuedBitswapMessage()\n    message.addWantlistEntry(cid, {\n      cid: cid.bytes,\n      sendDontHave: true,\n      wantType: WantType.WantBlock,\n      priority: 1\n    })\n\n    // sending WantBlockResult directly to peer\n    await this.network.sendMessage(peerId, message)\n\n    // wait for peer response\n    const event = await raceEvent<CustomEvent<WantPresenceResult>>(this, 'presence', options.signal, {\n      filter: (event) => {\n        return peerId.equals(event.detail.sender) && uint8ArrayEquals(cid.multihash.digest, event.detail.cid.multihash.digest)\n      }\n    })\n\n    return event.detail\n  }\n\n  /**\n   * Invoked when a block has been received from an external source\n   */\n  async receivedBlock (cid: CID, options: ProgressOptions<BitswapNotifyProgressEvents> & AbortOptions): Promise<void> {\n    const cidStr = uint8ArrayToString(cid.multihash.bytes, 'base64')\n\n    const entry = this.wants.get(cidStr)\n\n    if (entry == null) {\n      return\n    }\n\n    entry.cancel = true\n\n    await this.sendMessagesDebounced()\n  }\n\n  /**\n   * Invoked when a message is received from a bitswap peer\n   */\n  private async receiveMessage (sender: PeerId, message: BitswapMessage): Promise<void> {\n    this.log('received message from %p with %d blocks', sender, message.blocks.length)\n    let blocksCancelled = false\n\n    // process blocks\n    for (const block of message.blocks) {\n      if (block.prefix == null || block.data == null) {\n        continue\n      }\n\n      const values = vd(block.prefix)\n      const cidVersion = values[0]\n      const multicodec = values[1]\n      const hashAlg = values[2]\n      // const hashLen = values[3] // We haven't need to use this so far\n\n      const hasher = hashAlg === sha256.code ? sha256 : await this.hashLoader?.getHasher(hashAlg)\n\n      if (hasher == null) {\n        this.log.error('unknown hash algorithm', hashAlg)\n        continue\n      }\n\n      let hash: any = hasher.digest(block.data)\n\n      if (hash.then != null) {\n        hash = await hash\n      }\n\n      const cid = CID.create(cidVersion === 0 ? 0 : 1, multicodec, hash)\n\n      this.log('received block from %p for %c', sender, cid)\n\n      this.safeDispatchEvent<WantBlockResult>('block', {\n        detail: {\n          sender,\n          cid,\n          block: block.data\n        }\n      })\n\n      this.safeDispatchEvent<WantHaveResult | WantDoNotHaveResult>('presence', {\n        detail: {\n          sender,\n          cid,\n          has: true,\n          block: block.data\n        }\n      })\n\n      const cidStr = uint8ArrayToString(cid.multihash.bytes, 'base64')\n      const entry = this.wants.get(cidStr)\n\n      if (entry == null) {\n        continue\n      }\n\n      // since we received the block, flip the cancel flag to send cancels to\n      // any peers on the next message sending iteration, this will remove it\n      // from the internal want list\n      entry.cancel = true\n      blocksCancelled = true\n    }\n\n    // process block presences\n    for (const { cid: cidBytes, type } of message.blockPresences) {\n      const cid = CID.decode(cidBytes)\n\n      this.log('received %s from %p for %c', type, sender, cid)\n\n      this.safeDispatchEvent<WantHaveResult | WantDoNotHaveResult>('presence', {\n        detail: {\n          sender,\n          cid,\n          has: type === BlockPresenceType.HaveBlock\n        }\n      })\n    }\n\n    if (blocksCancelled) {\n      await this.sendMessagesDebounced()\n    }\n  }\n\n  /**\n   * Invoked when the network topology notices a new peer that supports Bitswap\n   */\n  async peerConnected (peerId: PeerId): Promise<void> {\n    const sentWants = new Set<string>()\n    const message = new QueuedBitswapMessage(true)\n\n    // new peer, give them the full wantlist\n    for (const [key, entry] of this.wants.entries()) {\n      if (entry.cancel) {\n        continue\n      }\n\n      sentWants.add(key)\n\n      message.addWantlistEntry(entry.cid, {\n        cid: entry.cid.bytes,\n        priority: 1,\n        wantType: WantType.WantBlock,\n        cancel: false,\n        sendDontHave: false\n      })\n    }\n\n    // only send the wantlist if we have something to send\n    if (message.wantlist.size === 0) {\n      this.peers.set(peerId, sentWants)\n\n      return\n    }\n\n    try {\n      await this.network.sendMessage(peerId, message)\n\n      this.peers.set(peerId, sentWants)\n    } catch (err) {\n      this.log.error('error sending full wantlist to new peer %p', peerId, err)\n    }\n  }\n\n  /**\n   * Invoked when the network topology notices peer that supports Bitswap has\n   * disconnected\n   */\n  peerDisconnected (peerId: PeerId): void {\n    this.peers.delete(peerId)\n  }\n\n  start (): void {\n\n  }\n\n  stop (): void {\n    this.peers.clear()\n    clearTimeout(this.sendMessagesTimeout)\n  }\n}\n", "import { setMaxListeners } from '@libp2p/interface'\nimport { anySignal } from 'any-signal'\nimport { Network } from './network.js'\nimport { PeerWantLists } from './peer-want-lists/index.js'\nimport { createBitswapSession } from './session.js'\nimport { Stats } from './stats.js'\nimport { WantList } from './want-list.js'\nimport type { BitswapOptions, Bitswap as BitswapInterface, BitswapWantProgressEvents, BitswapNotifyProgressEvents, WantListEntry, BitswapComponents } from './index.js'\nimport type { BlockBroker, CreateSessionOptions, ProviderOptions } from '@helia/interface'\nimport type { ComponentLogger, Libp2p, PeerId } from '@libp2p/interface'\nimport type { Logger } from '@libp2p/logger'\nimport type { AbortOptions } from '@multiformats/multiaddr'\nimport type { Blockstore } from 'interface-blockstore'\nimport type { CID } from 'multiformats/cid'\nimport type { ProgressOptions } from 'progress-events'\n\nexport interface WantOptions extends AbortOptions, ProgressOptions<BitswapWantProgressEvents>, ProviderOptions {\n  /**\n   * When searching the routing for providers, stop searching after finding this\n   * many providers.\n   *\n   * @default 3\n   */\n  maxProviders?: number\n}\n\n/**\n * JavaScript implementation of the Bitswap 'data exchange' protocol\n * used by IPFS.\n */\nexport class Bitswap implements BitswapInterface {\n  private readonly log: Logger\n  private readonly logger: ComponentLogger\n  public readonly stats: Stats\n  public network: Network\n  public blockstore: Blockstore\n  public peerWantLists: PeerWantLists\n  public wantList: WantList\n  public libp2p: Libp2p\n\n  constructor (components: BitswapComponents, init: BitswapOptions = {}) {\n    this.logger = components.logger\n    this.log = components.logger.forComponent('helia:bitswap')\n    this.blockstore = components.blockstore\n    this.libp2p = components.libp2p\n\n    // report stats to libp2p metrics\n    this.stats = new Stats(components)\n\n    // the network delivers messages\n    this.network = new Network(components, init)\n\n    // handle which blocks we send to peers\n    this.peerWantLists = new PeerWantLists({\n      ...components,\n      network: this.network\n    }, init)\n\n    // handle which blocks we ask peers for\n    this.wantList = new WantList({\n      ...components,\n      network: this.network\n    }, init)\n  }\n\n  createSession (options: CreateSessionOptions = {}): Required<Pick<BlockBroker<BitswapWantProgressEvents>, 'retrieve'>> {\n    return createBitswapSession({\n      wantList: this.wantList,\n      network: this.network,\n      logger: this.logger,\n      libp2p: this.libp2p\n    }, options)\n  }\n\n  async want (cid: CID, options: WantOptions = {}): Promise<Uint8Array> {\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, options.signal])\n    setMaxListeners(Infinity, controller.signal, signal)\n\n    // find providers and connect to them\n    this.network.findAndConnect(cid, {\n      ...options,\n      signal\n    })\n      .catch(err => {\n        // if the controller was aborted we found the block already so ignore\n        // the error\n        if (!controller.signal.aborted) {\n          this.log.error('error during finding and connect for cid %c', cid, err)\n        }\n      })\n\n    try {\n      const result = await this.wantList.wantBlock(cid, {\n        ...options,\n        signal\n      })\n\n      return result.block\n    } finally {\n      // since we have the block we can now abort any outstanding attempts to\n      // find providers for it\n      controller.abort()\n      signal.clear()\n    }\n  }\n\n  /**\n   * Sends notifications about the arrival of a block\n   */\n  async notify (cid: CID, block: Uint8Array, options: ProgressOptions<BitswapNotifyProgressEvents> & AbortOptions = {}): Promise<void> {\n    await Promise.all([\n      this.peerWantLists.receivedBlock(cid, options),\n      this.wantList.receivedBlock(cid, options)\n    ])\n  }\n\n  getWantlist (): WantListEntry[] {\n    return [...this.wantList.wants.values()]\n      .filter(entry => !entry.cancel)\n      .map(entry => ({\n        cid: entry.cid,\n        priority: entry.priority,\n        wantType: entry.wantType\n      }))\n  }\n\n  getPeerWantlist (peer: PeerId): WantListEntry[] | undefined {\n    return this.peerWantLists.wantListForPeer(peer)\n  }\n\n  /**\n   * Start the bitswap node\n   */\n  async start (): Promise<void> {\n    this.wantList.start()\n    await this.network.start()\n  }\n\n  /**\n   * Stop the bitswap node\n   */\n  async stop (): Promise<void> {\n    this.wantList.stop()\n    await this.network.stop()\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * This module implements the [Bitswap protocol](https://docs.ipfs.tech/concepts/bitswap/) in TypeScript.\n *\n * It supersedes the older [ipfs-bitswap](https://www.npmjs.com/package/ipfs-bitswap) module with the aim of being smaller, faster, better integrated with libp2p/helia, having fewer dependencies and using standard JavaScript instead of Node.js APIs.\n */\n\nimport { Bitswap as BitswapClass } from './bitswap.js'\nimport type { BitswapNetworkNotifyProgressEvents, BitswapNetworkWantProgressEvents, BitswapNetworkProgressEvents } from './network.js'\nimport type { WantType } from './pb/message.js'\nimport type { BlockBroker, CreateSessionOptions, ProviderOptions } from '@helia/interface'\nimport type { Routing } from '@helia/interface/routing'\nimport type { Libp2p, AbortOptions, Startable, ComponentLogger, Metrics, PeerId } from '@libp2p/interface'\nimport type { Blockstore } from 'interface-blockstore'\nimport type { CID } from 'multiformats/cid'\nimport type { MultihashHasher } from 'multiformats/hashes/interface'\nimport type { ProgressEvent, ProgressOptions } from 'progress-events'\n\nexport type BitswapWantProgressEvents =\n  BitswapWantBlockProgressEvents\n\nexport type BitswapNotifyProgressEvents =\n  BitswapNetworkNotifyProgressEvents\n\nexport type BitswapWantBlockProgressEvents =\n  ProgressEvent<'bitswap:want-block:unwant', CID> |\n  ProgressEvent<'bitswap:want-block:block', CID> |\n  BitswapNetworkWantProgressEvents\n\nexport type { BitswapNetworkNotifyProgressEvents }\nexport type { BitswapNetworkWantProgressEvents }\nexport type { BitswapNetworkProgressEvents }\nexport type { WantType }\n\nexport interface WantListEntry {\n  cid: CID\n  priority: number\n  wantType: WantType\n}\n\nexport interface Bitswap extends Startable {\n  /**\n   * Returns the current state of the wantlist\n   */\n  getWantlist(): WantListEntry[]\n\n  /**\n   * Returns the current state of the wantlist for a peer, if it is being\n   * tracked\n   */\n  getPeerWantlist(peerId: PeerId): WantListEntry[] | undefined\n\n  /**\n   * Notify bitswap that a new block is available\n   */\n  notify(cid: CID, block: Uint8Array, options?: ProgressOptions<BitswapNotifyProgressEvents>): Promise<void>\n\n  /**\n   * Start a session to retrieve a file from the network\n   */\n  want(cid: CID, options?: AbortOptions & ProgressOptions<BitswapWantProgressEvents> & ProviderOptions): Promise<Uint8Array>\n\n  /**\n   * Start a session to retrieve a file from the network\n   */\n  createSession(options?: CreateSessionOptions<BitswapWantProgressEvents>): Required<Pick<BlockBroker<BitswapWantProgressEvents>, 'retrieve'>>\n}\n\nexport interface MultihashHasherLoader {\n  getHasher(codeOrName: number | string): Promise<MultihashHasher>\n}\n\nexport interface BitswapComponents {\n  routing: Routing\n  blockstore: Blockstore\n  logger: ComponentLogger\n  libp2p: Libp2p\n  metrics?: Metrics\n}\n\nexport interface BitswapOptions {\n  /**\n   * This is the maximum number of concurrent inbound bitswap streams that are\n   * allowed\n   *\n   * @default 32\n   */\n  maxInboundStreams?: number\n\n  /**\n   * This is the maximum number of concurrent outbound bitswap streams that are\n   * allowed\n   *\n   * @default 128\n   */\n  maxOutboundStreams?: number\n\n  /**\n   * An incoming stream must resolve within this number of seconds\n   *\n   * @default 30000\n   */\n  incomingStreamTimeout?: number\n\n  /**\n   * Whether to run on transient (e.g. time/data limited) connections\n   *\n   * @default false\n   */\n  runOnLimitedConnections?: boolean\n\n  /**\n   * Enables loading esoteric hash functions\n   */\n  hashLoader?: MultihashHasherLoader\n\n  /**\n   * The protocol that we speak\n   *\n   * @default '/ipfs/bitswap/1.2.0'\n   */\n  protocol?: string\n\n  /**\n   * When sending want list updates to peers, how many messages to send at once\n   *\n   * @default 50\n   */\n  messageSendConcurrency?: number\n\n  /**\n   * When sending blocks to peers, how many messages to send at once\n   *\n   * @default 50\n   */\n  sendBlocksConcurrency?: number\n\n  /**\n   * When sending blocks to peers, timeout after this many milliseconds.\n   * This is useful for preventing slow/large peer-connections from consuming\n   * your bandwidth/streams.\n   *\n   * @default 10000\n   */\n  sendBlocksTimeout?: number\n\n  /**\n   * When a block is added to the blockstore and we are about to send that block\n   * to peers who have it in their wantlist, wait this many milliseconds before\n   * queueing the send job in case more blocks are added that they want\n   *\n   * @default 10\n   */\n  sendBlocksDebounce?: number\n\n  /**\n   * If the client sends a want-have, and we have the corresponding block, we\n   * check the size of the block and if it's small enough we send the block\n   * itself, rather than sending a HAVE.\n   *\n   * This defines the maximum size up to which we replace a HAVE with a block.\n   *\n   * @default 1024\n   */\n  maxSizeReplaceHasWithBlock?: number\n\n  /**\n   * The maximum size in bytes of a message that we will send. If a message is\n   * larger than this (due to lots of blocks or wantlist entries) it will be\n   * broken up into several smaller messages that are under this size.\n   *\n   * @see https://github.com/ipfs/boxo/blob/eeea414587350401b6b804f0574ed8436833331d/bitswap/client/internal/messagequeue/messagequeue.go#L33\n   *\n   * @default 2097152\n   */\n  maxOutgoingMessageSize?: number\n\n  /**\n   * The maximum size in bytes of an incoming message that we will process.\n   *\n   * Messages larger than this will cause the incoming stream to be reset.\n   *\n   * Defaults to `maxOutgoingMessageSize`\n   *\n   * @default 2097152\n   */\n  maxIncomingMessageSize?: number\n}\n\nexport const createBitswap = (components: BitswapComponents, options: BitswapOptions = {}): Bitswap => {\n  return new BitswapClass(components, options)\n}\n", "import { createBitswap } from '@helia/bitswap'\nimport type { BitswapOptions, Bitswap, BitswapWantBlockProgressEvents, BitswapNotifyProgressEvents } from '@helia/bitswap'\nimport type { BlockAnnounceOptions, BlockBroker, BlockRetrievalOptions, CreateSessionOptions, Routing, HasherLoader } from '@helia/interface'\nimport type { Libp2p, Startable, ComponentLogger } from '@libp2p/interface'\nimport type { Blockstore } from 'interface-blockstore'\nimport type { CID } from 'multiformats/cid'\nimport type { MultihashHasher } from 'multiformats/hashes/interface'\n\nexport interface BitswapBlockBrokerComponents {\n  libp2p: Libp2p\n  blockstore: Blockstore\n  routing: Routing\n  logger: ComponentLogger\n  getHasher: HasherLoader\n}\n\nexport interface BitswapBlockBrokerInit extends BitswapOptions {\n\n}\n\nclass BitswapBlockBroker implements BlockBroker<BitswapWantBlockProgressEvents, BitswapNotifyProgressEvents>, Startable {\n  private readonly bitswap: Bitswap\n  private started: boolean\n\n  constructor (components: BitswapBlockBrokerComponents, init: BitswapBlockBrokerInit = {}) {\n    const { getHasher } = components\n\n    this.bitswap = createBitswap(components, {\n      hashLoader: {\n        getHasher: async (codecOrName: number): Promise<MultihashHasher<number>> => {\n          return getHasher(codecOrName)\n        }\n      },\n      ...init\n    })\n    this.started = false\n  }\n\n  isStarted (): boolean {\n    return this.started\n  }\n\n  async start (): Promise<void> {\n    await this.bitswap.start()\n    this.started = true\n  }\n\n  async stop (): Promise<void> {\n    await this.bitswap.stop()\n    this.started = false\n  }\n\n  async announce (cid: CID, block: Uint8Array, options?: BlockAnnounceOptions<BitswapNotifyProgressEvents>): Promise<void> {\n    await this.bitswap.notify(cid, block, options)\n  }\n\n  async retrieve (cid: CID, options: BlockRetrievalOptions<BitswapWantBlockProgressEvents> = {}): Promise<Uint8Array> {\n    return this.bitswap.want(cid, options)\n  }\n\n  createSession (options?: CreateSessionOptions<BitswapWantBlockProgressEvents>): BlockBroker<BitswapWantBlockProgressEvents, BitswapNotifyProgressEvents> {\n    const session = this.bitswap.createSession(options)\n\n    return {\n      announce: async (cid, block, options) => {\n        await this.bitswap.notify(cid, block, options)\n      },\n\n      retrieve: async (cid, options) => {\n        return session.retrieve(cid, options)\n      }\n    }\n  }\n}\n\n/**\n * A helper factory for users who want to override Helia `blockBrokers` but\n * still want to use the default `BitswapBlockBroker`.\n */\nexport function bitswap (init: BitswapBlockBrokerInit = {}): (components: BitswapBlockBrokerComponents) => BlockBroker {\n  return (components) => new BitswapBlockBroker(components, init)\n}\n", "/**\n * @packageDocumentation\n *\n * This module allows easy conversion of Multiaddrs to string URIs.\n *\n * @example Converting multiaddrs to string URIs\n *\n * ```js\n * import { multiaddrToUri } from '@multiformats/multiaddr-to-uri'\n *\n * console.log(multiaddrToUri('/dnsaddr/protocol.ai/https'))\n * // -> https://protocol.ai\n *\n * console.log(multiaddrToUri('/ip4/127.0.0.1/tcp/8080'))\n * // -> http://127.0.0.1:8080\n *\n * console.log(multiaddrToUri('/ip4/127.0.0.1/tcp/8080', { assumeHttp: false }))\n * // -> tcp://127.0.0.1:8080\n * ```\n *\n * Note:\n *\n * - When `/tcp` is the last (terminating) protocol HTTP is assumed by default (implicit `assumeHttp: true`)\n *   - this means produced URIs will start with `http://` instead of `tcp://`\n *   - passing `{ assumeHttp: false }` disables this behavior\n * - Might be lossy - e.g. a DNSv6 multiaddr\n * - Can throw if the passed multiaddr:\n *   - is not a valid multiaddr\n *   - is not supported as a URI e.g. circuit\n */\n\nimport { CODE_TCP, CODE_DNS, CODE_DNS4, CODE_DNS6, CODE_DNSADDR, multiaddr, CODE_TLS, CODE_IP6 } from '@multiformats/multiaddr'\nimport type { Component, Multiaddr } from '@multiformats/multiaddr'\n\nexport interface MultiaddrToUriOpts {\n  assumeHttp?: boolean\n}\n\nconst ASSUME_HTTP_CODES = [\n  CODE_TCP,\n  CODE_DNS,\n  CODE_DNSADDR,\n  CODE_DNS4,\n  CODE_DNS6\n]\n\ninterface Interpreter {\n  (head: Component, rest: Component[]): string | undefined\n}\n\nfunction extractSNI (ma: Component[]): string | undefined {\n  return extractTuple('sni', ma)?.value\n}\n\nfunction extractPort (ma: Component[]): string {\n  const port = extractTuple('tcp', ma)?.value\n\n  if (port == null) {\n    return ''\n  }\n\n  return `:${port}`\n}\n\nfunction extractTuple (name: string, ma: Component[]): Component | undefined {\n  return ma.find(component => component.name === name)\n}\n\nfunction hasTLS (ma: Component[]): boolean {\n  return ma.some(({ code }) => code === CODE_TLS)\n}\n\nfunction interpretNext (head: Component, rest: Component[]): string | undefined {\n  const interpreter = interpreters[head.name]\n  if (interpreter == null) {\n    throw new Error(`Can't interpret protocol ${head.name}`)\n  }\n  const restVal = interpreter(head, rest)\n  if (head.code === CODE_IP6) {\n    return `[${restVal}]`\n  }\n  return restVal\n}\n\nconst interpreters: Record<string, Interpreter> = {\n  ip4: (head, rest) => head.value,\n  ip6: (head, rest) => {\n    if (rest.length === 0) {\n      return head.value\n    }\n    return `[${head.value}]`\n  },\n  tcp: (head, rest) => {\n    const tail = rest.pop()\n    if (tail == null) {\n      throw new Error('Unexpected end of multiaddr')\n    }\n    return `tcp://${interpretNext(tail, rest)}:${head.value}`\n  },\n  udp: (head, rest) => {\n    const tail = rest.pop()\n    if (tail == null) {\n      throw new Error('Unexpected end of multiaddr')\n    }\n    return `udp://${interpretNext(tail, rest)}:${head.value}`\n  },\n  dnsaddr: (head, rest) => head.value,\n  dns4: (head, rest) => head.value,\n  dns6: (head, rest) => head.value,\n  dns: (head, rest) => head.value,\n  ipfs: (head, rest) => {\n    const tail = rest.pop()\n    if (tail == null) {\n      throw new Error('Unexpected end of multiaddr')\n    }\n    return `${interpretNext(tail, rest)}`\n  },\n  p2p: (head, rest) => {\n    const tail = rest.pop()\n    if (tail == null) {\n      throw new Error('Unexpected end of multiaddr')\n    }\n    return `${interpretNext(tail, rest)}`\n  },\n  http: (head, rest) => {\n    const maHasTLS = hasTLS(rest)\n    const sni = extractSNI(rest)\n    const port = extractPort(rest)\n    if (maHasTLS && sni != null) {\n      return `https://${sni}${port}`\n    }\n    const protocol = maHasTLS ? 'https://' : 'http://'\n    const tail = rest.pop()\n    if (tail == null) {\n      throw new Error('Unexpected end of multiaddr')\n    }\n    let baseVal = interpretNext(tail, rest)\n    // We are reinterpreting the base as http, so we need to remove the tcp:// if it's there\n    baseVal = baseVal?.replace('tcp://', '')\n    return `${protocol}${baseVal}`\n  },\n  'http-path': (head, rest) => {\n    const tail = rest.pop()\n    if (tail == null) {\n      throw new Error('Unexpected end of multiaddr')\n    }\n    const baseVal = interpretNext(tail, rest)\n    const decodedValue = decodeURIComponent(head.value ?? '')\n    return `${baseVal}${decodedValue}`\n  },\n  tls: (head, rest) => {\n    // Noop, the parent context knows that it's tls. We don't need to do\n    // anything here\n    const tail = rest.pop()\n    if (tail == null) {\n      throw new Error('Unexpected end of multiaddr')\n    }\n    return interpretNext(tail, rest)\n  },\n  sni: (head, rest) => {\n    // Noop, the parent context uses the sni information, we don't need to do\n    // anything here\n    const tail = rest.pop()\n    if (tail == null) {\n      throw new Error('Unexpected end of multiaddr')\n    }\n    return interpretNext(tail, rest)\n  },\n  https: (head, rest) => {\n    const tail = rest.pop()\n    if (tail == null) {\n      throw new Error('Unexpected end of multiaddr')\n    }\n    let baseVal = interpretNext(tail, rest)\n    // We are reinterpreting the base as http, so we need to remove the tcp:// if it's there\n    baseVal = baseVal?.replace('tcp://', '')\n    return `https://${baseVal}`\n  },\n  ws: (head, rest) => {\n    const maHasTLS = hasTLS(rest)\n    const sni = extractSNI(rest)\n    const port = extractPort(rest)\n    if (maHasTLS && sni != null) {\n      return `wss://${sni}${port}`\n    }\n    const protocol = maHasTLS ? 'wss://' : 'ws://'\n    const tail = rest.pop()\n    if (tail == null) {\n      throw new Error('Unexpected end of multiaddr')\n    }\n    let baseVal = interpretNext(tail, rest)\n    // We are reinterpreting the base, so we need to remove the tcp:// if it's there\n    baseVal = baseVal?.replace('tcp://', '')\n    return `${protocol}${baseVal}`\n  },\n  wss: (head, rest) => {\n    const tail = rest.pop()\n    if (tail == null) {\n      throw new Error('Unexpected end of multiaddr')\n    }\n    let baseVal = interpretNext(tail, rest)\n    // We are reinterpreting the base as http, so we need to remove the tcp:// if it's there\n    baseVal = baseVal?.replace('tcp://', '')\n    return `wss://${baseVal}`\n  }\n}\n\nexport function multiaddrToUri (input: Multiaddr | string | Uint8Array, opts?: MultiaddrToUriOpts): string {\n  const ma = multiaddr(input)\n  const components = ma.getComponents()\n  const head = components.pop()\n  if (head == null) {\n    throw new Error('Unexpected end of multiaddr')\n  }\n\n  const interpreter = interpreters[head.name]\n\n  if (interpreter == null) {\n    throw new Error(`No interpreter found for ${head.name}`)\n  }\n\n  let uri = interpreter(head, components) ?? ''\n\n  if (opts?.assumeHttp !== false && ASSUME_HTTP_CODES.includes(head.code)) {\n    // strip any declared protocol\n    uri = uri.replace(/^.*:\\/\\//, '')\n\n    if (head.value === '443') {\n      uri = `https://${uri}`\n    } else {\n      uri = `http://${uri}`\n    }\n  }\n\n  if (uri.startsWith('http://') || uri.startsWith('https://') || uri.startsWith('ws://') || uri.startsWith('wss://')) {\n    // this will strip default ports while keeping paths intact\n    uri = new URL(uri).toString()\n\n    // strip trailing slash, e.g. http://127.0.0.1/ -> http://127.0.0.1\n    if (uri.endsWith('/')) {\n      uri = uri.substring(0, uri.length - 1)\n    }\n  }\n\n  return uri\n}\n", "export const empty = new Uint8Array(0)\n\nexport function toHex (d: Uint8Array): string {\n  return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n}\n\nexport function fromHex (hex: string): Uint8Array {\n  const hexes = hex.match(/../g)\n  return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\nexport function equals (aa: Uint8Array, bb: Uint8Array): boolean {\n  if (aa === bb) { return true }\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function coerce (o: ArrayBufferView | ArrayBuffer | Uint8Array): Uint8Array {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') { return o }\n  if (o instanceof ArrayBuffer) { return new Uint8Array(o) }\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\nexport function isBinary (o: unknown): o is ArrayBuffer | ArrayBufferView {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n}\n\nexport function fromString (str: string): Uint8Array {\n  return new TextEncoder().encode(str)\n}\n\nexport function toString (b: Uint8Array): string {\n  return new TextDecoder().decode(b)\n}\n", "import { coerce } from '../bytes.js'\nimport basex from '../vendor/base-x.js'\nimport type { BaseCodec, BaseDecoder, BaseEncoder, CombobaseDecoder, Multibase, MultibaseCodec, MultibaseDecoder, MultibaseEncoder, UnibaseDecoder } from './interface.js'\n\ninterface EncodeFn { (bytes: Uint8Array): string }\ninterface DecodeFn { (text: string): Uint8Array }\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder<Base extends string, Prefix extends string> implements MultibaseEncoder<Prefix>, BaseEncoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  encode (bytes: Uint8Array): Multibase<Prefix> {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder<Base extends string, Prefix extends string> implements MultibaseDecoder<Prefix>, UnibaseDecoder<Prefix>, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseDecode: DecodeFn\n  private readonly prefixCodePoint: number\n\n  constructor (name: Base, prefix: Prefix, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    const prefixCodePoint = prefix.codePointAt(0)\n    /* c8 ignore next 3 */\n    if (prefixCodePoint === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    this.prefixCodePoint = prefixCodePoint\n    this.baseDecode = baseDecode\n  }\n\n  decode (text: string): Uint8Array {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  or<OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n}\n\ntype Decoders<Prefix extends string> = Record<Prefix, UnibaseDecoder<Prefix>>\n\nclass ComposedDecoder<Prefix extends string> implements MultibaseDecoder<Prefix>, CombobaseDecoder<Prefix> {\n  readonly decoders: Decoders<Prefix>\n\n  constructor (decoders: Decoders<Prefix>) {\n    this.decoders = decoders\n  }\n\n  or <OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n\n  decode (input: string): Uint8Array {\n    const prefix = input[0] as Prefix\n    const decoder = this.decoders[prefix]\n    if (decoder != null) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\nexport function or <L extends string, R extends string> (left: UnibaseDecoder<L> | CombobaseDecoder<L>, right: UnibaseDecoder<R> | CombobaseDecoder<R>): ComposedDecoder<L | R> {\n  return new ComposedDecoder({\n    ...(left.decoders ?? { [(left as UnibaseDecoder<L>).prefix]: left }),\n    ...(right.decoders ?? { [(right as UnibaseDecoder<R>).prefix]: right })\n  } as Decoders<L | R>)\n}\n\nexport class Codec<Base extends string, Prefix extends string> implements MultibaseCodec<Prefix>, MultibaseEncoder<Prefix>, MultibaseDecoder<Prefix>, BaseCodec, BaseEncoder, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n  readonly baseDecode: DecodeFn\n  readonly encoder: Encoder<Base, Prefix>\n  readonly decoder: Decoder<Base, Prefix>\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  encode (input: Uint8Array): string {\n    return this.encoder.encode(input)\n  }\n\n  decode (input: string): Uint8Array {\n    return this.decoder.decode(input)\n  }\n}\n\nexport function from <Base extends string, Prefix extends string> ({ name, prefix, encode, decode }: { name: Base, prefix: Prefix, encode: EncodeFn, decode: DecodeFn }): Codec<Base, Prefix> {\n  return new Codec(name, prefix, encode, decode)\n}\n\nexport function baseX <Base extends string, Prefix extends string> ({ name, prefix, alphabet }: { name: Base, prefix: Prefix, alphabet: string }): Codec<Base, Prefix> {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: (text: string): Uint8Array => coerce(decode(text))\n  })\n}\n\nfunction decode (string: string, alphabetIdx: Record<string, number>, bitsPerChar: number, name: string): Uint8Array {\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = alphabetIdx[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\nfunction encode (data: Uint8Array, alphabet: string, bitsPerChar: number): string {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits !== 0) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (((out.length * bitsPerChar) & 7) !== 0) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\nfunction createAlphabetIdx (alphabet: string): Record<string, number> {\n  // Build the character lookup table:\n  const alphabetIdx: Record<string, number> = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    alphabetIdx[alphabet[i]] = i\n  }\n  return alphabetIdx\n}\n\n/**\n * RFC4648 Factory\n */\nexport function rfc4648 <Base extends string, Prefix extends string> ({ name, prefix, bitsPerChar, alphabet }: { name: Base, prefix: Prefix, bitsPerChar: number, alphabet: string }): Codec<Base, Prefix> {\n  const alphabetIdx = createAlphabetIdx(alphabet)\n  return from({\n    prefix,\n    name,\n    encode (input: Uint8Array): string {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input: string): Uint8Array {\n      return decode(input, alphabetIdx, bitsPerChar, name)\n    }\n  })\n}\n", "import { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n", "import { base64 } from 'multiformats/bases/base64'\nimport type { ComponentLogger, Logger } from '@libp2p/interface'\nimport type { CID } from 'multiformats/cid'\n\nexport interface TrustlessGatewayStats {\n  attempts: number\n  errors: number\n  invalidBlocks: number\n  successes: number\n  pendingResponses?: number\n}\n\nexport interface TransformRequestInit {\n  (defaultReqInit: RequestInit): Promise<RequestInit> | RequestInit\n}\n\nexport interface TrustlessGatewayComponents {\n  logger: ComponentLogger\n  transformRequestInit?: TransformRequestInit\n}\n\n/**\n * A `TrustlessGateway` keeps track of the number of attempts, errors, and\n * successes for a given gateway url so that we can prioritize gateways that\n * have been more reliable in the past, and ensure that requests are distributed\n * across all gateways within a given `TrustlessGatewayBlockBroker` instance.\n */\nexport class TrustlessGateway {\n  public readonly url: URL\n  /**\n   * The number of times this gateway has been attempted to be used to fetch a\n   * block. This includes successful, errored, and aborted attempts. By counting\n   * even aborted attempts, slow gateways that are out-raced by others will be\n   * considered less reliable.\n   */\n  #attempts = 0\n\n  /**\n   * The number of times this gateway has errored while attempting to fetch a\n   * block. This includes `response.ok === false` and any other errors that\n   * throw while attempting to fetch a block. This does not include aborted\n   * attempts.\n   */\n  #errors = 0\n\n  /**\n   * The number of times this gateway has returned an invalid block. A gateway\n   * that returns the wrong blocks for a CID should be considered for removal\n   * from the list of gateways to fetch blocks from.\n   */\n  #invalidBlocks = 0\n\n  /**\n   * The number of times this gateway has successfully fetched a block.\n   */\n  #successes = 0\n\n  /**\n   * A map of pending responses for this gateway. This is used to ensure that\n   * only one request per CID is made to a given gateway at a time, and that we\n   * don't make multiple in-flight requests for the same CID to the same gateway.\n   */\n  readonly #pendingResponses = new Map<string, Promise<Uint8Array>>()\n\n  private readonly log: Logger\n  private readonly transformRequestInit?: TransformRequestInit\n\n  constructor (url: URL | string, { logger, transformRequestInit }: TrustlessGatewayComponents) {\n    this.url = url instanceof URL ? url : new URL(url)\n    this.transformRequestInit = transformRequestInit\n    this.log = logger.forComponent(`helia:trustless-gateway-block-broker:${this.url.hostname}`)\n  }\n\n  /**\n   * This function returns a unique string for the multihash.bytes of the CID.\n   *\n   * Some useful resources for why this is needed can be found using the links below:\n   *\n   * - https://github.com/ipfs/helia/pull/503#discussion_r1572451331\n   * - https://github.com/ipfs/kubo/issues/6815\n   * - https://www.notion.so/pl-strflt/Handling-ambiguity-around-CIDs-9d5e14f6516f438980b01ef188efe15d#d9d45cd1ed8b4d349b96285de4aed5ab\n   */\n  #uniqueBlockId (cid: CID): string {\n    const multihashBytes = cid.multihash.bytes\n    return base64.encode(multihashBytes)\n  }\n\n  /**\n   * Fetch a raw block from `this.url` following the specification defined at\n   * https://specs.ipfs.tech/http-gateways/trustless-gateway/\n   */\n  async getRawBlock (cid: CID, signal?: AbortSignal): Promise<Uint8Array> {\n    const gwUrl = new URL(this.url.toString())\n    gwUrl.pathname = `/ipfs/${cid.toString()}`\n\n    // necessary as not every gateway supports dag-cbor, but every should support\n    // sending raw block as-is\n    gwUrl.search = '?format=raw'\n\n    if (signal?.aborted === true) {\n      throw new Error(`Signal to fetch raw block for CID ${cid} from gateway ${this.url} was aborted prior to fetch`)\n    }\n\n    const blockId = this.#uniqueBlockId(cid)\n\n    // workaround for https://github.com/nodejs/node/issues/52635\n    const innerController = new AbortController()\n    const abortInnerSignal = (): void => {\n      innerController.abort()\n    }\n    signal?.addEventListener('abort', abortInnerSignal)\n\n    try {\n      let pendingResponse: Promise<Uint8Array> | undefined = this.#pendingResponses.get(blockId)\n      if (pendingResponse == null) {\n        this.#attempts++\n        const defaultReqInit: RequestInit = {\n          signal: innerController.signal,\n          headers: {\n            Accept: 'application/vnd.ipld.raw'\n          },\n          cache: 'force-cache'\n        }\n\n        const reqInit: RequestInit = this.transformRequestInit != null ? await this.transformRequestInit(defaultReqInit) : defaultReqInit\n\n        pendingResponse = fetch(gwUrl.toString(), reqInit).then(async (res) => {\n          this.log('GET %s %d', gwUrl, res.status)\n          if (!res.ok) {\n            this.#errors++\n            throw new Error(`unable to fetch raw block for CID ${cid} from gateway ${this.url}`)\n          }\n          this.#successes++\n          return new Uint8Array(await res.arrayBuffer())\n        })\n        this.#pendingResponses.set(blockId, pendingResponse)\n      }\n      return await pendingResponse\n    } catch (cause) {\n      // @ts-expect-error - TS thinks signal?.aborted can only be false now\n      // because it was checked for true above.\n      if (signal?.aborted === true) {\n        throw new Error(`fetching raw block for CID ${cid} from gateway ${this.url} was aborted`)\n      }\n      this.#errors++\n      throw new Error(`unable to fetch raw block for CID ${cid}`)\n    } finally {\n      signal?.removeEventListener('abort', abortInnerSignal)\n      this.#pendingResponses.delete(blockId)\n    }\n  }\n\n  /**\n   * Encapsulate the logic for determining whether a gateway is considered\n   * reliable, for prioritization. This is based on the number of successful attempts made\n   * and the number of errors encountered.\n   *\n   * Unused gateways have 100% reliability; They will be prioritized over\n   * gateways with a 100% success rate to ensure that we attempt all gateways.\n   */\n  reliability (): number {\n    /**\n     * if we have never tried to use this gateway, it is considered the most\n     * reliable until we determine otherwise (prioritize unused gateways)\n     */\n    if (this.#attempts === 0) {\n      return 1\n    }\n\n    if (this.#invalidBlocks > 0) {\n      // this gateway may not be trustworthy..\n      return -Infinity\n    }\n\n    /**\n     * We have attempted the gateway, so we need to calculate the reliability\n     * based on the number of attempts, errors, and successes. Gateways that\n     * return a single error should drop their reliability score more than a\n     * single success increases it.\n     *\n     * Play around with the below reliability function at https://www.desmos.com/calculator/d6hfhf5ukm\n     */\n    return this.#successes / (this.#attempts + (this.#errors * 3))\n  }\n\n  /**\n   * Increment the number of invalid blocks returned by this gateway.\n   */\n  incrementInvalidBlocks (): void {\n    this.#invalidBlocks++\n  }\n\n  getStats (): TrustlessGatewayStats {\n    return {\n      attempts: this.#attempts,\n      errors: this.#errors,\n      invalidBlocks: this.#invalidBlocks,\n      successes: this.#successes,\n      pendingResponses: this.#pendingResponses.size\n    }\n  }\n}\n", "import { isIPv4, isIPv6 } from '@chainsafe/is-ip'\nimport { Netmask } from 'netmask'\n\nconst PRIVATE_IP_RANGES = [\n  '0.0.0.0/8',\n  '10.0.0.0/8',\n  '100.64.0.0/10',\n  '127.0.0.0/8',\n  '169.254.0.0/16',\n  '172.16.0.0/12',\n  '192.0.0.0/24',\n  '192.0.0.0/29',\n  '192.0.0.8/32',\n  '192.0.0.9/32',\n  '192.0.0.10/32',\n  '192.0.0.170/32',\n  '192.0.0.171/32',\n  '192.0.2.0/24',\n  '192.31.196.0/24',\n  '192.52.193.0/24',\n  '192.88.99.0/24',\n  '192.168.0.0/16',\n  '192.175.48.0/24',\n  '198.18.0.0/15',\n  '198.51.100.0/24',\n  '203.0.113.0/24',\n  '240.0.0.0/4',\n  '255.255.255.255/32'\n]\n\nconst NETMASK_RANGES = PRIVATE_IP_RANGES.map(ipRange => new Netmask(ipRange))\n\nfunction ipv4Check (ipAddr: string): boolean {\n  for (const r of NETMASK_RANGES) {\n    if (r.contains(ipAddr)) { return true }\n  }\n\n  return false\n}\n\nfunction isIpv4MappedIpv6 (ipAddr: string): boolean {\n  return /^::ffff:([0-9a-fA-F]{1,4}):([0-9a-fA-F]{1,4})$/.test(ipAddr)\n}\n\n/**\n * @see https://datatracker.ietf.org/doc/html/rfc4291#section-2.5.5.2\n */\nfunction ipv4MappedIpv6Check (ipAddr: string): boolean {\n  const parts = ipAddr.split(':')\n\n  if (parts.length < 2) {\n    return false\n  }\n\n  const octet34 = parts[parts.length - 1].padStart(4, '0')\n  const octet12 = parts[parts.length - 2].padStart(4, '0')\n\n  const ip4 = `${parseInt(octet12.substring(0, 2), 16)}.${parseInt(octet12.substring(2), 16)}.${parseInt(octet34.substring(0, 2), 16)}.${parseInt(octet34.substring(2), 16)}`\n\n  return ipv4Check(ip4)\n}\n\n/**\n * @see https://datatracker.ietf.org/doc/html/rfc4291#section-2.2 example 3\n */\nfunction isIpv4EmbeddedIpv6 (ipAddr: string): boolean {\n  return /^::ffff:([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ipAddr)\n}\n\nfunction ipv4EmbeddedIpv6Check (ipAddr: string): boolean {\n  const parts = ipAddr.split(':')\n  const ip4 = parts[parts.length - 1]\n\n  return ipv4Check(ip4)\n}\n\nfunction ipv6Check (ipAddr: string): boolean {\n  return /^::$/.test(ipAddr) ||\n    /^::1$/.test(ipAddr) ||\n    /^64:ff9b::([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ipAddr) ||\n    /^100::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ipAddr) ||\n    /^2001::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ipAddr) ||\n    /^2001:2[0-9a-fA-F]:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ipAddr) ||\n    /^2001:db8:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ipAddr) ||\n    /^2002:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ipAddr) ||\n    /^f[c-d]([0-9a-fA-F]{2,2}):/i.test(ipAddr) ||\n    /^fe[8-9a-bA-B][0-9a-fA-F]:/i.test(ipAddr) ||\n    /^ff([0-9a-fA-F]{2,2}):/i.test(ipAddr)\n}\n\nexport function isPrivateIp (ip: string): boolean | undefined {\n  if (isIPv4(ip)) {\n    return ipv4Check(ip)\n  }\n\n  if (isIpv4MappedIpv6(ip)) {\n    return ipv4MappedIpv6Check(ip)\n  }\n\n  if (isIpv4EmbeddedIpv6(ip)) {\n    return ipv4EmbeddedIpv6Check(ip)\n  }\n\n  if (isIPv6(ip)) {\n    return ipv6Check(ip)\n  }\n}\n", "export const empty = new Uint8Array(0)\n\nexport function toHex (d: Uint8Array): string {\n  return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n}\n\nexport function fromHex (hex: string): Uint8Array {\n  const hexes = hex.match(/../g)\n  return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\nexport function equals (aa: Uint8Array, bb: Uint8Array): boolean {\n  if (aa === bb) { return true }\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function coerce (o: ArrayBufferView | ArrayBuffer | Uint8Array): Uint8Array {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') { return o }\n  if (o instanceof ArrayBuffer) { return new Uint8Array(o) }\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\nexport function isBinary (o: unknown): o is ArrayBuffer | ArrayBufferView {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n}\n\nexport function fromString (str: string): Uint8Array {\n  return new TextEncoder().encode(str)\n}\n\nexport function toString (b: Uint8Array): string {\n  return new TextDecoder().decode(b)\n}\n", "/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  /**\n   * @param {any[] | Iterable<number>} source\n   */\n  function encode (source) {\n    // @ts-ignore\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  /**\n   * @param {string | string[]} source\n   */\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  /**\n   * @param {string | string[]} string\n   */\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n", "import { coerce } from '../bytes.js'\nimport basex from '../vendor/base-x.js'\nimport type { BaseCodec, BaseDecoder, BaseEncoder, CombobaseDecoder, Multibase, MultibaseCodec, MultibaseDecoder, MultibaseEncoder, UnibaseDecoder } from './interface.js'\n\ninterface EncodeFn { (bytes: Uint8Array): string }\ninterface DecodeFn { (text: string): Uint8Array }\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder<Base extends string, Prefix extends string> implements MultibaseEncoder<Prefix>, BaseEncoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  encode (bytes: Uint8Array): Multibase<Prefix> {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder<Base extends string, Prefix extends string> implements MultibaseDecoder<Prefix>, UnibaseDecoder<Prefix>, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseDecode: DecodeFn\n  private readonly prefixCodePoint: number\n\n  constructor (name: Base, prefix: Prefix, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    const prefixCodePoint = prefix.codePointAt(0)\n    /* c8 ignore next 3 */\n    if (prefixCodePoint === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    this.prefixCodePoint = prefixCodePoint\n    this.baseDecode = baseDecode\n  }\n\n  decode (text: string): Uint8Array {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  or<OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n}\n\ntype Decoders<Prefix extends string> = Record<Prefix, UnibaseDecoder<Prefix>>\n\nclass ComposedDecoder<Prefix extends string> implements MultibaseDecoder<Prefix>, CombobaseDecoder<Prefix> {\n  readonly decoders: Decoders<Prefix>\n\n  constructor (decoders: Decoders<Prefix>) {\n    this.decoders = decoders\n  }\n\n  or <OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n\n  decode (input: string): Uint8Array {\n    const prefix = input[0] as Prefix\n    const decoder = this.decoders[prefix]\n    if (decoder != null) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\nexport function or <L extends string, R extends string> (left: UnibaseDecoder<L> | CombobaseDecoder<L>, right: UnibaseDecoder<R> | CombobaseDecoder<R>): ComposedDecoder<L | R> {\n  return new ComposedDecoder({\n    ...(left.decoders ?? { [(left as UnibaseDecoder<L>).prefix]: left }),\n    ...(right.decoders ?? { [(right as UnibaseDecoder<R>).prefix]: right })\n  } as Decoders<L | R>)\n}\n\nexport class Codec<Base extends string, Prefix extends string> implements MultibaseCodec<Prefix>, MultibaseEncoder<Prefix>, MultibaseDecoder<Prefix>, BaseCodec, BaseEncoder, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n  readonly baseDecode: DecodeFn\n  readonly encoder: Encoder<Base, Prefix>\n  readonly decoder: Decoder<Base, Prefix>\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  encode (input: Uint8Array): string {\n    return this.encoder.encode(input)\n  }\n\n  decode (input: string): Uint8Array {\n    return this.decoder.decode(input)\n  }\n}\n\nexport function from <Base extends string, Prefix extends string> ({ name, prefix, encode, decode }: { name: Base, prefix: Prefix, encode: EncodeFn, decode: DecodeFn }): Codec<Base, Prefix> {\n  return new Codec(name, prefix, encode, decode)\n}\n\nexport function baseX <Base extends string, Prefix extends string> ({ name, prefix, alphabet }: { name: Base, prefix: Prefix, alphabet: string }): Codec<Base, Prefix> {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: (text: string): Uint8Array => coerce(decode(text))\n  })\n}\n\nfunction decode (string: string, alphabetIdx: Record<string, number>, bitsPerChar: number, name: string): Uint8Array {\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = alphabetIdx[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\nfunction encode (data: Uint8Array, alphabet: string, bitsPerChar: number): string {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits !== 0) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (((out.length * bitsPerChar) & 7) !== 0) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\nfunction createAlphabetIdx (alphabet: string): Record<string, number> {\n  // Build the character lookup table:\n  const alphabetIdx: Record<string, number> = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    alphabetIdx[alphabet[i]] = i\n  }\n  return alphabetIdx\n}\n\n/**\n * RFC4648 Factory\n */\nexport function rfc4648 <Base extends string, Prefix extends string> ({ name, prefix, bitsPerChar, alphabet }: { name: Base, prefix: Prefix, bitsPerChar: number, alphabet: string }): Codec<Base, Prefix> {\n  const alphabetIdx = createAlphabetIdx(alphabet)\n  return from({\n    prefix,\n    name,\n    encode (input: Uint8Array): string {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input: string): Uint8Array {\n      return decode(input, alphabetIdx, bitsPerChar, name)\n    }\n  })\n}\n", "import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n", "import { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n", "import { base58btc } from 'multiformats/bases/base58'\nimport { base64url } from 'multiformats/bases/base64'\nimport type { Matcher, MultiaddrMatcher } from './index.js'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * Split a multiaddr into path components\n */\nconst toParts = (ma: Multiaddr): string[] => {\n  return ma.toString().split('/').slice(1)\n}\n\nexport const func = (fn: (val: string) => boolean): Matcher => {\n  return {\n    match: (vals) => {\n      if (vals.length < 1) {\n        return false\n      }\n\n      if (fn(vals[0])) {\n        return vals.slice(1)\n      }\n\n      return false\n    },\n    pattern: 'fn'\n  }\n}\n\nexport const literal = (str: string): Matcher => {\n  return {\n    match: (vals) => func((val) => val === str).match(vals),\n    pattern: str\n  }\n}\n\nexport const string = (): Matcher => {\n  return {\n    match: (vals) => func((val) => typeof val === 'string').match(vals),\n    pattern: '{string}'\n  }\n}\n\nexport const number = (): Matcher => {\n  return {\n    match: (vals) => func((val) => !isNaN(parseInt(val))).match(vals),\n    pattern: '{number}'\n  }\n}\n\nexport const peerId = (): Matcher => {\n  return {\n    match: (vals) => {\n      if (vals.length < 2) {\n        return false\n      }\n\n      if (vals[0] !== 'p2p' && vals[0] !== 'ipfs') {\n        return false\n      }\n\n      // Q is RSA, 1 is Ed25519 or Secp256k1\n      if (vals[1].startsWith('Q') || vals[1].startsWith('1')) {\n        try {\n          base58btc.decode(`z${vals[1]}`)\n        } catch (err) {\n          return false\n        }\n      } else {\n        return false\n      }\n\n      return vals.slice(2)\n    },\n    pattern: '/p2p/{peerid}'\n  }\n}\n\nexport const certhash = (): Matcher => {\n  return {\n    match: (vals) => {\n      if (vals.length < 2) {\n        return false\n      }\n\n      if (vals[0] !== 'certhash') {\n        return false\n      }\n\n      try {\n        base64url.decode(vals[1])\n      } catch {\n        return false\n      }\n\n      return vals.slice(2)\n    },\n    pattern: '/certhash/{certhash}'\n  }\n}\n\nexport const optional = (matcher: Matcher): Matcher => {\n  return {\n    match: (vals) => {\n      const result = matcher.match(vals)\n\n      if (result === false) {\n        return vals\n      }\n\n      return result\n    },\n    pattern: `optional(${matcher.pattern})`\n  }\n}\n\nexport const or = (...matchers: Matcher[]): Matcher => {\n  return {\n    match: (vals) => {\n      let matches: string[] | undefined\n\n      for (const matcher of matchers) {\n        const result = matcher.match(vals)\n\n        // no match\n        if (result === false) {\n          continue\n        }\n\n        // choose greediest matcher\n        if (matches == null || result.length < matches.length) {\n          matches = result\n        }\n      }\n\n      if (matches == null) {\n        return false\n      }\n\n      return matches\n    },\n    pattern: `or(${matchers.map(m => m.pattern).join(', ')})`\n  }\n}\n\nexport const and = (...matchers: Matcher[]): Matcher => {\n  return {\n    match: (vals) => {\n      for (const matcher of matchers) {\n        // pass what's left of the array\n        const result = matcher.match(vals)\n\n        // no match\n        if (result === false) {\n          return false\n        }\n\n        vals = result\n      }\n\n      return vals\n    },\n    pattern: `and(${matchers.map(m => m.pattern).join(', ')})`\n  }\n}\n\nexport function fmt (...matchers: Matcher[]): MultiaddrMatcher {\n  function match (ma: Multiaddr): string[] | false {\n    let parts = toParts(ma)\n\n    for (const matcher of matchers) {\n      const result = matcher.match(parts)\n\n      if (result === false) {\n        return false\n      }\n\n      parts = result\n    }\n\n    return parts\n  }\n\n  function matches (ma: Multiaddr): boolean {\n    const result = match(ma)\n\n    return result !== false\n  }\n\n  function exactMatch (ma: Multiaddr): boolean {\n    const result = match(ma)\n\n    if (result === false) {\n      return false\n    }\n\n    return result.length === 0\n  }\n\n  return {\n    matchers,\n    matches,\n    exactMatch\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * This module exports various matchers that can be used to infer the type of a\n * passed multiaddr.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/dnsaddr/example.org')\n *\n * DNS.matches(ma) // true - this is a multiaddr with a DNS address at the start\n * ```\n *\n * @example\n *\n * The default matching behaviour ignores any subsequent tuples in the multiaddr.\n * If you want stricter matching you can use `.exactMatch`:\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS, Circuit } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/dnsaddr/example.org/p2p/QmFoo/p2p-circuit/p2p/QmBar')\n *\n * DNS.exactMatch(ma) // false - this address has extra tuples after the DNS component\n * Circuit.matches(ma) // true\n * Circuit.exactMatch(ma) // true - the extra tuples are circuit relay related\n * ```\n */\n\nimport { isIPv4, isIPv6 } from '@chainsafe/is-ip'\nimport { and, or, literal, string, peerId, optional, fmt, func, number, certhash } from './utils.js'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * A matcher accepts multiaddr components and either fails to match and returns\n * false or returns a sublist of unmatched components\n */\nexport interface Matcher {\n  match(parts: string[]): string[] | false\n  pattern: string\n}\n\n/**\n * A MultiaddrMatcher allows interpreting a multiaddr as a certain type of\n * multiaddr\n */\nexport interface MultiaddrMatcher {\n  /**\n   * The matchers that make up this MultiaddrMatcher - useful if you want to\n   * make your own custom matchers\n   */\n  matchers: Matcher[]\n\n  /**\n   * Returns true if the passed multiaddr can be treated as this type of\n   * multiaddr\n   */\n  matches(ma: Multiaddr): boolean\n\n  /**\n   * Returns true if the passed multiaddr terminates as this type of\n   * multiaddr\n   */\n  exactMatch(ma: Multiaddr): boolean\n}\n\n/**\n * Matches PeerId addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { PEER_ID } from '@multiformats/multiaddr-matcher'\n *\n * PEER_ID.matches(multiaddr('/p2p/Qmfoo')) // true\n * PEER_ID.matches(multiaddr('/ipfs/Qmfoo')) // true\n * ```\n */\nconst _PEER_ID = peerId()\n\nexport const PEER_ID = fmt(_PEER_ID)\n\n/**\n * DNS matchers\n */\nconst _DNS4 = and(literal('dns4'), string())\nconst _DNS6 = and(literal('dns6'), string())\nconst _DNSADDR = and(literal('dnsaddr'), string())\nconst _DNS = and(literal('dns'), string())\n\n/**\n * Matches dns4 addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS4 } from '@multiformats/multiaddr-matcher'\n *\n * DNS4.matches(multiaddr('/dns4/example.org')) // true\n * ```\n */\nexport const DNS4 = fmt(_DNS4, optional(peerId()))\n\n/**\n * Matches dns6 addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS6 } from '@multiformats/multiaddr-matcher'\n *\n * DNS6.matches(multiaddr('/dns6/example.org')) // true\n * ```\n */\nexport const DNS6 = fmt(_DNS6, optional(peerId()))\n\n/**\n * Matches dnsaddr addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNSADDR } from '@multiformats/multiaddr-matcher'\n *\n * DNSADDR.matches(multiaddr('/dnsaddr/example.org')) // true\n * DNSADDR.matches(multiaddr('/dnsaddr/example.org/p2p/Qmfoo')) // true\n * ```\n */\nexport const DNSADDR = fmt(_DNSADDR, optional(peerId()))\n\n/**\n * Matches any dns address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS } from '@multiformats/multiaddr-matcher'\n *\n * DNS.matches(multiaddr('/dnsaddr/example.org')) // true\n * DNS.matches(multiaddr('/dns4/example.org')) // true\n * DNS.matches(multiaddr('/dns6/example.org')) // true\n * DNS.matches(multiaddr('/dns6/example.org/p2p/Qmfoo')) // true\n * ```\n */\nexport const DNS = fmt(or(_DNS, _DNSADDR, _DNS4, _DNS6), optional(peerId()))\n\nconst _IP4 = and(literal('ip4'), func(isIPv4))\nconst _IP6 = and(literal('ip6'), func(isIPv6))\nconst _IP = or(_IP4, _IP6)\n\nconst _IP_OR_DOMAIN = or(_IP, _DNS, _DNS4, _DNS6, _DNSADDR)\n\n/**\n * A matcher for addresses that start with IP or DNS tuples.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP_OR_DOMAIN } from '@multiformats/multiaddr-matcher'\n *\n * IP_OR_DOMAIN.matches(multiaddr('/ip4/123.123.123.123')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/ip4/123.123.123.123/p2p/QmFoo')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/dns/example.com/p2p/QmFoo')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/p2p/QmFoo')) // false\n * ```\n */\nexport const IP_OR_DOMAIN = fmt(or(_IP, and(or(_DNS, _DNSADDR, _DNS4, _DNS6), optional(peerId()))))\n\n/**\n * Matches ip4 addresses.\n *\n * Use {@link IP IP} instead to match any ip4/ip6 address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP4 } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/ip4/123.123.123.123')\n *\n * IP4.matches(ma) // true\n * ```\n */\nexport const IP4 = fmt(_IP4)\n\n/**\n * Matches ip6 addresses.\n *\n * Use {@link IP IP} instead to match any ip4/ip6 address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP6 } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/ip6/fe80::1cc1:a3b8:322f:cf22')\n *\n * IP6.matches(ma) // true\n * ```\n */\nexport const IP6 = fmt(_IP6)\n\n/**\n * Matches ip4 or ip6 addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP } from '@multiformats/multiaddr-matcher'\n *\n * IP.matches(multiaddr('/ip4/123.123.123.123')) // true\n * IP.matches(multiaddr('/ip6/fe80::1cc1:a3b8:322f:cf22')) // true\n * ```\n */\nexport const IP = fmt(_IP)\n\nconst _TCP = and(_IP_OR_DOMAIN, literal('tcp'), number())\nconst _UDP = and(_IP_OR_DOMAIN, literal('udp'), number())\n\n/**\n * Matches TCP addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { TCP } from '@multiformats/multiaddr-matcher'\n *\n * TCP.matches(multiaddr('/ip4/123.123.123.123/tcp/1234')) // true\n * ```\n */\nexport const TCP = fmt(and(_TCP, optional(peerId())))\n\n/**\n * Matches UDP addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { UDP } from '@multiformats/multiaddr-matcher'\n *\n * UDP.matches(multiaddr('/ip4/123.123.123.123/udp/1234')) // true\n * ```\n */\nexport const UDP = fmt(_UDP)\n\nconst _QUIC = and(_UDP, literal('quic'), optional(peerId()))\nconst _QUICV1 = and(_UDP, literal('quic-v1'), optional(peerId()))\n\nconst QUIC_V0_OR_V1 = or(_QUIC, _QUICV1)\n\n/**\n * Matches QUIC addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { QUIC } from '@multiformats/multiaddr-matcher'\n *\n * QUIC.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic')) // true\n * ```\n */\nexport const QUIC = fmt(_QUIC)\n\n/**\n * Matches QUICv1 addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { QUICV1 } from '@multiformats/multiaddr-matcher'\n *\n * QUICV1.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic-v1')) // true\n * ```\n */\nexport const QUICV1 = fmt(_QUICV1)\n\nconst _WEB = or(\n  _IP_OR_DOMAIN,\n  _TCP,\n  _UDP,\n  _QUIC,\n  _QUICV1\n)\n\nconst _WebSockets = or(\n  and(_WEB, literal('ws'), optional(peerId()))\n)\n\n/**\n * Matches WebSocket addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebSockets } from '@multiformats/multiaddr-matcher'\n *\n * WebSockets.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/ws')) // true\n * ```\n */\nexport const WebSockets = fmt(_WebSockets)\n\nconst _WebSocketsSecure = or(\n  and(_WEB, literal('wss'), optional(peerId())),\n  and(_WEB, literal('tls'), optional(and(literal('sni'), string())), literal('ws'), optional(peerId()))\n)\n\n/**\n * Matches secure WebSocket addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebSocketsSecure } from '@multiformats/multiaddr-matcher'\n *\n * WebSocketsSecure.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/wss')) // true\n * ```\n */\nexport const WebSocketsSecure = fmt(_WebSocketsSecure)\n\nconst _WebRTCDirect = and(_UDP, literal('webrtc-direct'), optional(certhash()), optional(certhash()), optional(peerId()))\n\n/**\n * Matches WebRTC-direct addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTCDirect } from '@multiformats/multiaddr-matcher'\n *\n * WebRTCDirect.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmFoo/webrtc-direct/certhash/u....')) // true\n * ```\n */\nexport const WebRTCDirect = fmt(_WebRTCDirect)\n\nconst _WebTransport = and(_QUICV1, literal('webtransport'), optional(certhash()), optional(certhash()), optional(peerId()))\n\n/**\n * Matches WebTransport addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTCDirect } from '@multiformats/multiaddr-matcher'\n *\n * WebRTCDirect.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic-v1/webtransport/certhash/u..../certhash/u..../p2p/QmFoo')) // true\n * ```\n */\nexport const WebTransport = fmt(_WebTransport)\n\nconst _P2P = or(\n  _WebSockets,\n  _WebSocketsSecure,\n  and(_TCP, optional(peerId())),\n  and(QUIC_V0_OR_V1, optional(peerId())),\n  and(_IP_OR_DOMAIN, optional(peerId())),\n  _WebRTCDirect,\n  _WebTransport,\n  peerId()\n)\n\n/**\n * Matches peer addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { P2P } from '@multiformats/multiaddr-matcher'\n *\n * P2P.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmFoo')) // true\n * ```\n */\nexport const P2P = fmt(_P2P)\n\nconst _Circuit = and(_P2P, literal('p2p-circuit'), peerId())\n\n/**\n * Matches circuit relay addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Circuit } from '@multiformats/multiaddr-matcher'\n *\n * Circuit.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmRelay/p2p-circuit/p2p/QmTarget')) // true\n * ```\n */\nexport const Circuit = fmt(_Circuit)\n\nconst _WebRTC = or(\n  and(_P2P, literal('p2p-circuit'), literal('webrtc'), optional(peerId())),\n  and(_P2P, literal('webrtc'), optional(peerId())),\n  and(literal('webrtc'), optional(peerId()))\n)\n\n/**\n * Matches WebRTC addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTC } from '@multiformats/multiaddr-matcher'\n *\n * WebRTC.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmRelay/p2p-circuit/webrtc/p2p/QmTarget')) // true\n * ```\n */\nexport const WebRTC = fmt(_WebRTC)\n\nconst _HTTP = or(\n  and(_IP_OR_DOMAIN, literal('tcp'), number(), literal('http'), optional(peerId())),\n  and(_IP_OR_DOMAIN, literal('http'), optional(peerId()))\n)\n\n/**\n * Matches HTTP addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { HTTP } from '@multiformats/multiaddr-matcher'\n *\n * HTTP.matches(multiaddr('/dns/example.org/http')) // true\n * ```\n */\nexport const HTTP = fmt(_HTTP)\n\nconst _HTTPS = or(\n  and(_IP_OR_DOMAIN, literal('tcp'), or(\n    and(literal('443'), literal('http')),\n    and(number(), literal('https')),\n    and(number(), literal('tls'), literal('http'))\n  ), optional(peerId())),\n  and(_IP_OR_DOMAIN, literal('tls'), literal('http'), optional(peerId())),\n  and(_IP_OR_DOMAIN, literal('https'), optional(peerId()))\n)\n\n/**\n * Matches HTTPS addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { HTTP } from '@multiformats/multiaddr-matcher'\n *\n * HTTP.matches(multiaddr('/dns/example.org/tls/http')) // true\n * ```\n */\nexport const HTTPS = fmt(_HTTPS)\n\nconst _Memory = or(\n  and(literal('memory'), string(), optional(peerId()))\n)\n\n/**\n * Matches Memory addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Memory } from '@multiformats/multiaddr-matcher'\n *\n * Memory.matches(multiaddr('/memory/0xDEADBEEF')) // true\n * ```\n */\nexport const Memory = fmt(_Memory)\n\nconst _Unix = or(\n  and(literal('unix'), string(), optional(peerId()))\n)\n\n/**\n * Matches Unix addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Unix } from '@multiformats/multiaddr-matcher'\n *\n * Unix.matches(multiaddr('/unix/%2Fpath%2Fto%2Funix.socket')) // true\n * ```\n */\nexport const Unix = fmt(_Unix)\n", "import { isPrivateIp } from '@libp2p/utils/private-ip'\nimport { DNS, HTTP, HTTPS } from '@multiformats/multiaddr-matcher'\nimport { multiaddrToUri } from '@multiformats/multiaddr-to-uri'\nimport { TrustlessGateway } from './trustless-gateway.js'\nimport type { TransformRequestInit } from './trustless-gateway.js'\nimport type { Routing } from '@helia/interface'\nimport type { ComponentLogger } from '@libp2p/interface'\nimport type { AbortOptions, Multiaddr } from '@multiformats/multiaddr'\nimport type { CID } from 'multiformats/cid'\n\nexport function filterNonHTTPMultiaddrs (multiaddrs: Multiaddr[], allowInsecure: boolean, allowLocal: boolean): Multiaddr[] {\n  return multiaddrs.filter(ma => {\n    if (HTTPS.matches(ma) || (allowInsecure && HTTP.matches(ma))) {\n      if (allowLocal) {\n        return true\n      }\n\n      if (DNS.matches(ma)) {\n        return true\n      }\n\n      return isPrivateIp(ma.toOptions().host) === false\n    }\n\n    // When allowInsecure is false and allowLocal is true, allow multiaddrs with \"127.0.0.1\", \"localhost\", or any subdomain ending with \".localhost\"\n    if (!allowInsecure && allowLocal) {\n      const { host } = ma.toOptions()\n      if (host === '127.0.0.1' || host === 'localhost' || host.endsWith('.localhost')) {\n        return true\n      }\n    }\n\n    return false\n  })\n}\n\nexport interface FindHttpGatewayProvidersOptions extends AbortOptions {\n  transformRequestInit?: TransformRequestInit\n}\n\nexport async function * findHttpGatewayProviders (cid: CID, routing: Routing, logger: ComponentLogger, allowInsecure: boolean, allowLocal: boolean, options: FindHttpGatewayProvidersOptions = {}): AsyncGenerator<TrustlessGateway> {\n  for await (const provider of routing.findProviders(cid, options)) {\n    // require http(s) addresses\n    const httpAddresses = filterNonHTTPMultiaddrs(provider.multiaddrs, allowInsecure, allowLocal)\n\n    if (httpAddresses.length === 0) {\n      continue\n    }\n\n    // take first address?\n    // /ip4/x.x.x.x/tcp/31337/http\n    // /ip4/x.x.x.x/tcp/31337/https\n    // etc\n    const uri = multiaddrToUri(httpAddresses[0])\n\n    yield new TrustlessGateway(uri, { logger, transformRequestInit: options.transformRequestInit })\n  }\n}\n", "import { AbstractSession } from '@helia/utils'\nimport { isPeerId } from '@libp2p/interface'\nimport { multiaddrToUri } from '@multiformats/multiaddr-to-uri'\nimport { TrustlessGateway } from './trustless-gateway.js'\nimport { filterNonHTTPMultiaddrs, findHttpGatewayProviders } from './utils.js'\nimport { DEFAULT_ALLOW_INSECURE, DEFAULT_ALLOW_LOCAL } from './index.js'\nimport type { CreateTrustlessGatewaySessionOptions } from './broker.js'\nimport type { TrustlessGatewayGetBlockProgressEvents } from './index.js'\nimport type { TransformRequestInit } from './trustless-gateway.js'\nimport type { BlockRetrievalOptions, Routing } from '@helia/interface'\nimport type { ComponentLogger, PeerId } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { AbortOptions } from 'interface-store'\nimport type { CID } from 'multiformats/cid'\n\nexport interface TrustlessGatewaySessionComponents {\n  logger: ComponentLogger\n  routing: Routing\n}\n\nclass TrustlessGatewaySession extends AbstractSession<TrustlessGateway, TrustlessGatewayGetBlockProgressEvents> {\n  private readonly routing: Routing\n  private readonly allowInsecure: boolean\n  private readonly allowLocal: boolean\n  private readonly transformRequestInit?: TransformRequestInit\n\n  constructor (components: TrustlessGatewaySessionComponents, init: CreateTrustlessGatewaySessionOptions) {\n    super(components, {\n      ...init,\n      name: 'helia:trustless-gateway:session'\n    })\n\n    this.routing = components.routing\n    this.allowInsecure = init.allowInsecure ?? DEFAULT_ALLOW_INSECURE\n    this.allowLocal = init.allowLocal ?? DEFAULT_ALLOW_LOCAL\n    this.transformRequestInit = init.transformRequestInit\n  }\n\n  async queryProvider (cid: CID, provider: TrustlessGateway, options: BlockRetrievalOptions): Promise<Uint8Array> {\n    this.log('fetching BLOCK for %c from %s', cid, provider.url)\n\n    const block = await provider.getRawBlock(cid, options.signal)\n    this.log.trace('got block for %c from %s', cid, provider.url)\n\n    await options.validateFn?.(block)\n\n    return block\n  }\n\n  async * findNewProviders (cid: CID, options: AbortOptions = {}): AsyncGenerator<TrustlessGateway> {\n    yield * findHttpGatewayProviders(cid, this.routing, this.logger, this.allowInsecure, this.allowLocal, { ...options, transformRequestInit: this.transformRequestInit })\n  }\n\n  toEvictionKey (provider: TrustlessGateway): Uint8Array | string {\n    return provider.url.toString()\n  }\n\n  equals (providerA: TrustlessGateway, providerB: TrustlessGateway): boolean {\n    return providerA.url.toString() === providerB.url.toString()\n  }\n\n  async convertToProvider (provider: PeerId | Multiaddr | Multiaddr[], options?: AbortOptions): Promise<TrustlessGateway | undefined> {\n    if (isPeerId(provider)) {\n      return\n    }\n\n    const httpAddresses = filterNonHTTPMultiaddrs(Array.isArray(provider) ? provider : [provider], this.allowInsecure, this.allowLocal)\n\n    if (httpAddresses.length === 0) {\n      return\n    }\n\n    // take first address?\n    // /ip4/x.x.x.x/tcp/31337/http\n    // /ip4/x.x.x.x/tcp/31337/https\n    // etc\n    const uri = multiaddrToUri(httpAddresses[0])\n\n    return new TrustlessGateway(uri, {\n      logger: this.logger,\n      transformRequestInit: this.transformRequestInit\n    })\n  }\n}\n\nexport function createTrustlessGatewaySession (components: TrustlessGatewaySessionComponents, init: CreateTrustlessGatewaySessionOptions): TrustlessGatewaySession {\n  return new TrustlessGatewaySession(components, init)\n}\n", "import { createTrustlessGatewaySession } from './session.js'\nimport { findHttpGatewayProviders } from './utils.js'\nimport { DEFAULT_ALLOW_INSECURE, DEFAULT_ALLOW_LOCAL } from './index.js'\nimport type { TrustlessGatewayBlockBrokerInit, TrustlessGatewayBlockBrokerComponents, TrustlessGatewayGetBlockProgressEvents } from './index.js'\nimport type { TransformRequestInit } from './trustless-gateway.js'\nimport type { Routing, BlockRetrievalOptions, BlockBroker, CreateSessionOptions } from '@helia/interface'\nimport type { ComponentLogger, Logger } from '@libp2p/interface'\nimport type { CID } from 'multiformats/cid'\n\nexport interface CreateTrustlessGatewaySessionOptions extends CreateSessionOptions<TrustlessGatewayGetBlockProgressEvents> {\n  /**\n   * By default we will only connect to peers with HTTPS addresses, pass true\n   * to also connect to HTTP addresses.\n   *\n   * @default false\n   */\n  allowInsecure?: boolean\n\n  /**\n   * By default we will only connect to peers with public or DNS addresses, pass\n   * true to also connect to private addresses.\n   *\n   * @default false\n   */\n  allowLocal?: boolean\n  /**\n   * Provide a function that will be called before querying trustless-gateways. This lets you modify the fetch options to pass custom headers or other necessary things.\n   */\n  transformRequestInit?: TransformRequestInit\n}\n\n/**\n * A class that accepts a list of trustless gateways that are queried\n * for blocks.\n */\nexport class TrustlessGatewayBlockBroker implements BlockBroker<TrustlessGatewayGetBlockProgressEvents> {\n  private readonly allowInsecure: boolean\n  private readonly allowLocal: boolean\n  private readonly transformRequestInit?: TransformRequestInit\n  private readonly routing: Routing\n  private readonly log: Logger\n  private readonly logger: ComponentLogger\n\n  constructor (components: TrustlessGatewayBlockBrokerComponents, init: TrustlessGatewayBlockBrokerInit = {}) {\n    this.log = components.logger.forComponent('helia:trustless-gateway-block-broker')\n    this.logger = components.logger\n    this.routing = components.routing\n    this.allowInsecure = init.allowInsecure ?? DEFAULT_ALLOW_INSECURE\n    this.allowLocal = init.allowLocal ?? DEFAULT_ALLOW_LOCAL\n    this.transformRequestInit = init.transformRequestInit\n  }\n\n  async retrieve (cid: CID, options: BlockRetrievalOptions<TrustlessGatewayGetBlockProgressEvents> = {}): Promise<Uint8Array> {\n    const aggregateErrors: Error[] = []\n\n    for await (const gateway of findHttpGatewayProviders(cid, this.routing, this.logger, this.allowInsecure, this.allowLocal, { ...options, transformRequestInit: this.transformRequestInit })) {\n      this.log('getting block for %c from %s', cid, gateway.url)\n\n      try {\n        const block = await gateway.getRawBlock(cid, options.signal)\n        this.log.trace('got block for %c from %s', cid, gateway.url)\n\n        try {\n          await options.validateFn?.(block)\n        } catch (err) {\n          this.log.error('failed to validate block for %c from %s', cid, gateway.url, err)\n          // try another gateway\n          continue\n        }\n\n        return block\n      } catch (err: unknown) {\n        this.log.error('failed to get block for %c from %s', cid, gateway.url, err)\n\n        if (err instanceof Error) {\n          aggregateErrors.push(err)\n        } else {\n          aggregateErrors.push(new Error(`Unable to fetch raw block for CID ${cid} from gateway ${gateway.url}`))\n        }\n\n        // if signal was aborted, exit the loop\n        if (options.signal?.aborted === true) {\n          this.log.trace('request aborted while fetching raw block for CID %c from gateway %s', cid, gateway.url)\n          break\n        }\n      }\n    }\n\n    if (aggregateErrors.length > 0) {\n      throw new AggregateError(aggregateErrors, `Unable to fetch raw block for CID ${cid} from any gateway`)\n    } else {\n      throw new Error(`Unable to fetch raw block for CID ${cid} from any gateway`)\n    }\n  }\n\n  createSession (options: CreateTrustlessGatewaySessionOptions = {}): BlockBroker<TrustlessGatewayGetBlockProgressEvents> {\n    return createTrustlessGatewaySession({\n      logger: this.logger,\n      routing: this.routing\n    }, {\n      ...options,\n      allowLocal: this.allowLocal,\n      allowInsecure: this.allowInsecure,\n      transformRequestInit: this.transformRequestInit\n    })\n  }\n}\n", "import { TrustlessGatewayBlockBroker } from './broker.js'\nimport type { TransformRequestInit } from './trustless-gateway.js'\nimport type { Routing, BlockBroker } from '@helia/interface'\nimport type { ComponentLogger } from '@libp2p/interface'\nimport type { ProgressEvent } from 'progress-events'\n\nexport const DEFAULT_ALLOW_INSECURE = false\nexport const DEFAULT_ALLOW_LOCAL = false\n\nexport type TrustlessGatewayGetBlockProgressEvents =\n  ProgressEvent<'trustless-gateway:get-block:fetch', URL>\n\nexport interface TrustlessGatewayBlockBrokerInit {\n  /**\n   * By default we will only connect to peers with HTTPS addresses, pass true\n   * to also connect to HTTP addresses.\n   *\n   * @default false\n   */\n  allowInsecure?: boolean\n\n  /**\n   * By default we will only connect to peers with public or DNS addresses, pass\n   * true to also connect to private addresses.\n   *\n   * @default false\n   */\n  allowLocal?: boolean\n  /**\n   * Provide a function that will be called before querying trustless-gateways. This lets you modify the fetch options to pass custom headers or other necessary things.\n   */\n  transformRequestInit?: TransformRequestInit\n}\n\nexport interface TrustlessGatewayBlockBrokerComponents {\n  routing: Routing\n  logger: ComponentLogger\n}\n\nexport function trustlessGateway (init: TrustlessGatewayBlockBrokerInit = {}): (components: TrustlessGatewayBlockBrokerComponents) => BlockBroker<TrustlessGatewayGetBlockProgressEvents> {\n  return (components) => new TrustlessGatewayBlockBroker(components, init)\n}\n", "/**\n * @packageDocumentation\n *\n * Allows treating a browser readable stream as an async iterator.\n *\n * @example\n *\n * ```javascript\n * import toIt from 'browser-readablestream-to-it'\n * import all from 'it-all'\n *\n * const content = [0, 1, 2, 3, 4]\n *\n * const stream = new ReadableStream({\n *   start(controller) {\n *     for (let i = 0; i < content.length; i++) {\n *       controller.enqueue(content[i])\n *     }\n *\n *     controller.close()\n *   }\n * })\n *\n * const arr = await all(toIt(stream))\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n *\n * ## preventCancel\n *\n * By default a readable stream will have [.cancel](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/cancel) called on it once it has ended or\n * reading has stopped prematurely.\n *\n * To prevent this behaviour, pass `preventCancel: true` as an option:\n *\n * ```javascript\n * const arr = await all(toIt(stream, { preventCancel: true }))\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n */\n\nexport interface BrowserReadableStreamToItOptions {\n  preventCancel?: boolean\n}\n\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n */\nexport default async function * browserReadableStreamToIt <T> (stream: ReadableStream<T>, options: BrowserReadableStreamToItOptions = {}): AsyncGenerator<T, void, undefined> {\n  const reader = stream.getReader()\n\n  try {\n    while (true) {\n      const result = await reader.read()\n\n      if (result.done) {\n        return\n      }\n\n      yield result.value\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      await reader.cancel()\n    }\n\n    reader.releaseLock()\n  }\n}\n", "import { publicKeyToProtobuf } from '@libp2p/crypto/keys'\nimport { logger } from '@libp2p/logger'\nimport { type Key } from 'interface-datastore/key'\nimport NanoDate from 'timestamp-nano'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { SignatureCreationError } from './errors.js'\nimport { IpnsEntry } from './pb/ipns.js'\nimport { createCborData, ipnsRecordDataForV1Sig, ipnsRecordDataForV2Sig, normalizeValue } from './utils.js'\nimport type { PrivateKey, PublicKey } from '@libp2p/interface'\nimport type { CID } from 'multiformats/cid'\nimport type { MultihashDigest } from 'multiformats/hashes/interface'\n\nconst log = logger('ipns')\nconst DEFAULT_TTL_NS = 5 * 60 * 1e+9 // 5 Minutes or 300 Seconds, as suggested by https://specs.ipfs.tech/ipns/ipns-record/#ttl-uint64\n\nexport const namespace = '/ipns/'\nexport const namespaceLength = namespace.length\n\nexport interface IPNSRecordV1V2 {\n  /**\n   * value of the record\n   */\n  value: string\n\n  /**\n   * signature of the record\n   */\n  signatureV1: Uint8Array\n\n  /**\n   * Type of validation being used\n   */\n  validityType: IpnsEntry.ValidityType\n\n  /**\n   * expiration datetime for the record in RFC3339 format\n   */\n  validity: string\n\n  /**\n   * number representing the version of the record\n   */\n  sequence: bigint\n\n  /**\n   * ttl in nanoseconds\n   */\n  ttl?: bigint\n\n  /**\n   * the public portion of the key that signed this record (only present if it was not embedded in the IPNS key)\n   */\n  pubKey?: Uint8Array\n\n  /**\n   * the v2 signature of the record\n   */\n  signatureV2: Uint8Array\n\n  /**\n   * extensible data\n   */\n  data: Uint8Array\n}\n\nexport interface IPNSRecordV2 {\n  /**\n   * value of the record\n   */\n  value: string\n\n  /**\n   * the v2 signature of the record\n   */\n  signatureV2: Uint8Array\n\n  /**\n   * Type of validation being used\n   */\n  validityType: IpnsEntry.ValidityType\n\n  /**\n   * If the validity type is EOL, this is the expiration datetime for the record\n   * in RFC3339 format\n   */\n  validity: string\n\n  /**\n   * number representing the version of the record\n   */\n  sequence: bigint\n\n  /**\n   * ttl in nanoseconds\n   */\n  ttl?: bigint\n\n  /**\n   * the public portion of the key that signed this record (only present if it was not embedded in the IPNS key)\n   */\n  pubKey?: Uint8Array\n\n  /**\n   * extensible data\n   */\n  data: Uint8Array\n}\n\nexport type IPNSRecord = IPNSRecordV1V2 | IPNSRecordV2\n\nexport interface IPNSRecordData {\n  Value: Uint8Array\n  Validity: Uint8Array\n  ValidityType: IpnsEntry.ValidityType\n  Sequence: bigint\n  TTL: bigint\n}\n\nexport interface IDKeys {\n  routingPubKey: Key\n  pkKey: Key\n  routingKey: Key\n  ipnsKey: Key\n}\n\nexport interface CreateOptions {\n  ttlNs?: number | bigint\n  v1Compatible?: boolean\n}\n\nexport interface CreateV2OrV1Options {\n  v1Compatible: true\n}\n\nexport interface CreateV2Options {\n  v1Compatible: false\n}\n\nconst defaultCreateOptions: CreateOptions = {\n  v1Compatible: true,\n  ttlNs: DEFAULT_TTL_NS\n}\n\n/**\n * Creates a new IPNS record and signs it with the given private key.\n * The IPNS Record validity should follow the [RFC3339]{@link https://www.ietf.org/rfc/rfc3339.txt} with nanoseconds precision.\n * Note: This function does not embed the public key. If you want to do that, use `EmbedPublicKey`.\n *\n * The passed value can be a CID, a PublicKey or an arbitrary string path e.g. `/ipfs/...` or `/ipns/...`.\n *\n * * CIDs will be converted to v1 and stored in the record as a string similar to: `/ipfs/${cid}`\n * * PublicKeys will create recursive records, eg. the record value will be `/ipns/${cidV1Libp2pKey}`\n * * String paths will be stored in the record as-is, but they must start with `\"/\"`\n *\n * @param {PrivateKey} privateKey - the private key for signing the record.\n * @param {CID | PublicKey | string} value - content to be stored in the record.\n * @param {number | bigint} seq - number representing the current version of the record.\n * @param {number} lifetime - lifetime of the record (in milliseconds).\n * @param {CreateOptions} options - additional create options.\n */\nexport async function createIPNSRecord (privateKey: PrivateKey, value: CID | PublicKey | MultihashDigest<0x00 | 0x12> | string, seq: number | bigint, lifetime: number, options?: CreateV2OrV1Options): Promise<IPNSRecordV1V2>\nexport async function createIPNSRecord (privateKey: PrivateKey, value: CID | PublicKey | MultihashDigest<0x00 | 0x12> | string, seq: number | bigint, lifetime: number, options: CreateV2Options): Promise<IPNSRecordV2>\nexport async function createIPNSRecord (privateKey: PrivateKey, value: CID | PublicKey | MultihashDigest<0x00 | 0x12> | string, seq: number | bigint, lifetime: number, options: CreateOptions): Promise<IPNSRecordV1V2>\nexport async function createIPNSRecord (privateKey: PrivateKey, value: CID | PublicKey | MultihashDigest<0x00 | 0x12> | string, seq: number | bigint, lifetime: number, options: CreateOptions = defaultCreateOptions): Promise<IPNSRecord> {\n  // Validity in ISOString with nanoseconds precision and validity type EOL\n  const expirationDate = new NanoDate(Date.now() + Number(lifetime))\n  const validityType = IpnsEntry.ValidityType.EOL\n  const ttlNs = BigInt(options.ttlNs ?? DEFAULT_TTL_NS)\n\n  return _create(privateKey, value, seq, validityType, expirationDate.toString(), ttlNs, options)\n}\n\n/**\n * Same as create(), but instead of generating a new Date, it receives the intended expiration time\n * WARNING: nano precision is not standard, make sure the value in seconds is 9 orders of magnitude lesser than the one provided.\n *\n * The passed value can be a CID, a PublicKey or an arbitrary string path e.g. `/ipfs/...` or `/ipns/...`.\n *\n * * CIDs will be converted to v1 and stored in the record as a string similar to: `/ipfs/${cid}`\n * * PublicKeys will create recursive records, eg. the record value will be `/ipns/${cidV1Libp2pKey}`\n * * String paths will be stored in the record as-is, but they must start with `\"/\"`\n *\n * @param {PrivateKey} privateKey - the private key for signing the record.\n * @param {CID | PublicKey | string} value - content to be stored in the record.\n * @param {number | bigint} seq - number representing the current version of the record.\n * @param {string} expiration - expiration datetime for record in the [RFC3339]{@link https://www.ietf.org/rfc/rfc3339.txt} with nanoseconds precision.\n * @param {CreateOptions} options - additional creation options.\n */\nexport async function createIPNSRecordWithExpiration (privateKey: PrivateKey, value: CID | PublicKey | MultihashDigest<0x00 | 0x12> | string, seq: number | bigint, expiration: string, options?: CreateV2OrV1Options): Promise<IPNSRecordV1V2>\nexport async function createIPNSRecordWithExpiration (privateKey: PrivateKey, value: CID | PublicKey | MultihashDigest<0x00 | 0x12> | string, seq: number | bigint, expiration: string, options: CreateV2Options): Promise<IPNSRecordV2>\nexport async function createIPNSRecordWithExpiration (privateKey: PrivateKey, value: CID | PublicKey | MultihashDigest<0x00 | 0x12> | string, seq: number | bigint, expiration: string, options: CreateOptions): Promise<IPNSRecordV1V2>\nexport async function createIPNSRecordWithExpiration (privateKey: PrivateKey, value: CID | PublicKey | MultihashDigest<0x00 | 0x12> | string, seq: number | bigint, expiration: string, options: CreateOptions = defaultCreateOptions): Promise<IPNSRecord> {\n  const expirationDate = NanoDate.fromString(expiration)\n  const validityType = IpnsEntry.ValidityType.EOL\n  const ttlNs = BigInt(options.ttlNs ?? DEFAULT_TTL_NS)\n\n  return _create(privateKey, value, seq, validityType, expirationDate.toString(), ttlNs, options)\n}\n\nconst _create = async (privateKey: PrivateKey, value: CID | PublicKey | MultihashDigest<0x00 | 0x12> | string, seq: number | bigint, validityType: IpnsEntry.ValidityType, validity: string, ttl: bigint, options: CreateOptions = defaultCreateOptions): Promise<IPNSRecord> => {\n  seq = BigInt(seq)\n  const isoValidity = uint8ArrayFromString(validity)\n  const normalizedValue = normalizeValue(value)\n  const encodedValue = uint8ArrayFromString(normalizedValue)\n  const data = createCborData(encodedValue, validityType, isoValidity, seq, ttl)\n  const sigData = ipnsRecordDataForV2Sig(data)\n  const signatureV2 = await privateKey.sign(sigData)\n  let pubKey: Uint8Array | undefined\n\n  // if we cannot derive the public key from the PeerId (e.g. RSA PeerIDs),\n  // we have to embed it in the IPNS record\n  if (privateKey.type === 'RSA') {\n    pubKey = publicKeyToProtobuf(privateKey.publicKey)\n  }\n\n  if (options.v1Compatible === true) {\n    const signatureV1 = await signLegacyV1(privateKey, encodedValue, validityType, isoValidity)\n\n    const record: IPNSRecord = {\n      value: normalizedValue,\n      signatureV1,\n      validity,\n      validityType,\n      sequence: seq,\n      ttl,\n      signatureV2,\n      data\n    }\n\n    if (pubKey != null) {\n      record.pubKey = pubKey\n    }\n\n    return record\n  } else {\n    const record: IPNSRecordV2 = {\n      value: normalizedValue,\n      validity,\n      validityType,\n      sequence: seq,\n      ttl,\n      signatureV2,\n      data\n    }\n\n    if (pubKey != null) {\n      record.pubKey = pubKey\n    }\n\n    return record\n  }\n}\n\nexport { unmarshalIPNSRecord } from './utils.js'\nexport { marshalIPNSRecord } from './utils.js'\nexport { multihashToIPNSRoutingKey } from './utils.js'\nexport { multihashFromIPNSRoutingKey } from './utils.js'\nexport { extractPublicKeyFromIPNSRecord } from './utils.js'\n\n/**\n * Sign ipns record data using the legacy V1 signature scheme\n */\nconst signLegacyV1 = async (privateKey: PrivateKey, value: Uint8Array, validityType: IpnsEntry.ValidityType, validity: Uint8Array): Promise<Uint8Array> => {\n  try {\n    const dataForSignature = ipnsRecordDataForV1Sig(value, validityType, validity)\n\n    return await privateKey.sign(dataForSignature)\n  } catch (error: any) {\n    log.error('record signature creation failed', error)\n    throw new SignatureCreationError('Record signature creation failed')\n  }\n}\n", "export class SignatureCreationError extends Error {\n  static name = 'SignatureCreationError'\n\n  constructor (message = 'Record signature creation failed') {\n    super(message)\n    this.name = 'SignatureCreationError'\n  }\n}\n\nexport class SignatureVerificationError extends Error {\n  static name = 'SignatureVerificationError'\n\n  constructor (message = 'Record signature verification failed') {\n    super(message)\n    this.name = 'SignatureVerificationError'\n  }\n}\n\nexport class RecordExpiredError extends Error {\n  static name = 'RecordExpiredError'\n\n  constructor (message = 'Record has expired') {\n    super(message)\n    this.name = 'RecordExpiredError'\n  }\n}\n\nexport class UnsupportedValidityError extends Error {\n  static name = 'UnsupportedValidityError'\n\n  constructor (message = 'The validity type is unsupported') {\n    super(message)\n    this.name = 'UnsupportedValidityError'\n  }\n}\n\nexport class RecordTooLargeError extends Error {\n  static name = 'RecordTooLargeError'\n\n  constructor (message = 'The record is too large') {\n    super(message)\n    this.name = 'RecordTooLargeError'\n  }\n}\n\nexport class InvalidValueError extends Error {\n  static name = 'InvalidValueError'\n\n  constructor (message = 'Value must be a valid content path starting with /') {\n    super(message)\n    this.name = 'InvalidValueError'\n  }\n}\n\nexport class InvalidRecordDataError extends Error {\n  static name = 'InvalidRecordDataError'\n\n  constructor (message = 'Invalid record data') {\n    super(message)\n    this.name = 'InvalidRecordDataError'\n  }\n}\n\nexport class InvalidEmbeddedPublicKeyError extends Error {\n  static name = 'InvalidEmbeddedPublicKeyError'\n\n  constructor (message = 'Invalid embedded public key') {\n    super(message)\n    this.name = 'InvalidEmbeddedPublicKeyError'\n  }\n}\n", "/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nimport { type Codec, decodeMessage, type DecodeOptions, encodeMessage, enumeration, message } from 'protons-runtime'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface IpnsEntry {\n  value?: Uint8Array\n  signatureV1?: Uint8Array\n  validityType?: IpnsEntry.ValidityType\n  validity?: Uint8Array\n  sequence?: bigint\n  ttl?: bigint\n  pubKey?: Uint8Array\n  signatureV2?: Uint8Array\n  data?: Uint8Array\n}\n\nexport namespace IpnsEntry {\n  export enum ValidityType {\n    EOL = 'EOL'\n  }\n\n  enum __ValidityTypeValues {\n    EOL = 0\n  }\n\n  export namespace ValidityType {\n    export const codec = (): Codec<ValidityType> => {\n      return enumeration<ValidityType>(__ValidityTypeValues)\n    }\n  }\n\n  let _codec: Codec<IpnsEntry>\n\n  export const codec = (): Codec<IpnsEntry> => {\n    if (_codec == null) {\n      _codec = message<IpnsEntry>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.value != null) {\n          w.uint32(10)\n          w.bytes(obj.value)\n        }\n\n        if (obj.signatureV1 != null) {\n          w.uint32(18)\n          w.bytes(obj.signatureV1)\n        }\n\n        if (obj.validityType != null) {\n          w.uint32(24)\n          IpnsEntry.ValidityType.codec().encode(obj.validityType, w)\n        }\n\n        if (obj.validity != null) {\n          w.uint32(34)\n          w.bytes(obj.validity)\n        }\n\n        if (obj.sequence != null) {\n          w.uint32(40)\n          w.uint64(obj.sequence)\n        }\n\n        if (obj.ttl != null) {\n          w.uint32(48)\n          w.uint64(obj.ttl)\n        }\n\n        if (obj.pubKey != null) {\n          w.uint32(58)\n          w.bytes(obj.pubKey)\n        }\n\n        if (obj.signatureV2 != null) {\n          w.uint32(66)\n          w.bytes(obj.signatureV2)\n        }\n\n        if (obj.data != null) {\n          w.uint32(74)\n          w.bytes(obj.data)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {}\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.value = reader.bytes()\n              break\n            }\n            case 2: {\n              obj.signatureV1 = reader.bytes()\n              break\n            }\n            case 3: {\n              obj.validityType = IpnsEntry.ValidityType.codec().decode(reader)\n              break\n            }\n            case 4: {\n              obj.validity = reader.bytes()\n              break\n            }\n            case 5: {\n              obj.sequence = reader.uint64()\n              break\n            }\n            case 6: {\n              obj.ttl = reader.uint64()\n              break\n            }\n            case 7: {\n              obj.pubKey = reader.bytes()\n              break\n            }\n            case 8: {\n              obj.signatureV2 = reader.bytes()\n              break\n            }\n            case 9: {\n              obj.data = reader.bytes()\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<IpnsEntry>): Uint8Array => {\n    return encodeMessage(obj, IpnsEntry.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<IpnsEntry>): IpnsEntry => {\n    return decodeMessage(buf, IpnsEntry.codec(), opts)\n  }\n}\n", "export const empty = new Uint8Array(0)\n\nexport function toHex (d: Uint8Array): string {\n  return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n}\n\nexport function fromHex (hex: string): Uint8Array {\n  const hexes = hex.match(/../g)\n  return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\nexport function equals (aa: Uint8Array, bb: Uint8Array): boolean {\n  if (aa === bb) { return true }\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function coerce (o: ArrayBufferView | ArrayBuffer | Uint8Array): Uint8Array {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') { return o }\n  if (o instanceof ArrayBuffer) { return new Uint8Array(o) }\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\nexport function isBinary (o: unknown): o is ArrayBuffer | ArrayBufferView {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n}\n\nexport function fromString (str: string): Uint8Array {\n  return new TextEncoder().encode(str)\n}\n\nexport function toString (b: Uint8Array): string {\n  return new TextDecoder().decode(b)\n}\n", "/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  /**\n   * @param {any[] | Iterable<number>} source\n   */\n  function encode (source) {\n    // @ts-ignore\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  /**\n   * @param {string | string[]} source\n   */\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  /**\n   * @param {string | string[]} string\n   */\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n", "import { coerce } from '../bytes.js'\nimport basex from '../vendor/base-x.js'\nimport type { BaseCodec, BaseDecoder, BaseEncoder, CombobaseDecoder, Multibase, MultibaseCodec, MultibaseDecoder, MultibaseEncoder, UnibaseDecoder } from './interface.js'\n\ninterface EncodeFn { (bytes: Uint8Array): string }\ninterface DecodeFn { (text: string): Uint8Array }\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder<Base extends string, Prefix extends string> implements MultibaseEncoder<Prefix>, BaseEncoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  encode (bytes: Uint8Array): Multibase<Prefix> {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder<Base extends string, Prefix extends string> implements MultibaseDecoder<Prefix>, UnibaseDecoder<Prefix>, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseDecode: DecodeFn\n  private readonly prefixCodePoint: number\n\n  constructor (name: Base, prefix: Prefix, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    const prefixCodePoint = prefix.codePointAt(0)\n    /* c8 ignore next 3 */\n    if (prefixCodePoint === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    this.prefixCodePoint = prefixCodePoint\n    this.baseDecode = baseDecode\n  }\n\n  decode (text: string): Uint8Array {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  or<OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n}\n\ntype Decoders<Prefix extends string> = Record<Prefix, UnibaseDecoder<Prefix>>\n\nclass ComposedDecoder<Prefix extends string> implements MultibaseDecoder<Prefix>, CombobaseDecoder<Prefix> {\n  readonly decoders: Decoders<Prefix>\n\n  constructor (decoders: Decoders<Prefix>) {\n    this.decoders = decoders\n  }\n\n  or <OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n\n  decode (input: string): Uint8Array {\n    const prefix = input[0] as Prefix\n    const decoder = this.decoders[prefix]\n    if (decoder != null) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\nexport function or <L extends string, R extends string> (left: UnibaseDecoder<L> | CombobaseDecoder<L>, right: UnibaseDecoder<R> | CombobaseDecoder<R>): ComposedDecoder<L | R> {\n  return new ComposedDecoder({\n    ...(left.decoders ?? { [(left as UnibaseDecoder<L>).prefix]: left }),\n    ...(right.decoders ?? { [(right as UnibaseDecoder<R>).prefix]: right })\n  } as Decoders<L | R>)\n}\n\nexport class Codec<Base extends string, Prefix extends string> implements MultibaseCodec<Prefix>, MultibaseEncoder<Prefix>, MultibaseDecoder<Prefix>, BaseCodec, BaseEncoder, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n  readonly baseDecode: DecodeFn\n  readonly encoder: Encoder<Base, Prefix>\n  readonly decoder: Decoder<Base, Prefix>\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  encode (input: Uint8Array): string {\n    return this.encoder.encode(input)\n  }\n\n  decode (input: string): Uint8Array {\n    return this.decoder.decode(input)\n  }\n}\n\nexport function from <Base extends string, Prefix extends string> ({ name, prefix, encode, decode }: { name: Base, prefix: Prefix, encode: EncodeFn, decode: DecodeFn }): Codec<Base, Prefix> {\n  return new Codec(name, prefix, encode, decode)\n}\n\nexport function baseX <Base extends string, Prefix extends string> ({ name, prefix, alphabet }: { name: Base, prefix: Prefix, alphabet: string }): Codec<Base, Prefix> {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: (text: string): Uint8Array => coerce(decode(text))\n  })\n}\n\nfunction decode (string: string, alphabetIdx: Record<string, number>, bitsPerChar: number, name: string): Uint8Array {\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = alphabetIdx[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\nfunction encode (data: Uint8Array, alphabet: string, bitsPerChar: number): string {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits !== 0) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (((out.length * bitsPerChar) & 7) !== 0) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\nfunction createAlphabetIdx (alphabet: string): Record<string, number> {\n  // Build the character lookup table:\n  const alphabetIdx: Record<string, number> = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    alphabetIdx[alphabet[i]] = i\n  }\n  return alphabetIdx\n}\n\n/**\n * RFC4648 Factory\n */\nexport function rfc4648 <Base extends string, Prefix extends string> ({ name, prefix, bitsPerChar, alphabet }: { name: Base, prefix: Prefix, bitsPerChar: number, alphabet: string }): Codec<Base, Prefix> {\n  const alphabetIdx = createAlphabetIdx(alphabet)\n  return from({\n    prefix,\n    name,\n    encode (input: Uint8Array): string {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input: string): Uint8Array {\n      return decode(input, alphabetIdx, bitsPerChar, name)\n    }\n  })\n}\n", "import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n", "import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n", "import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n", "/* eslint-disable */\nvar encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  // @ts-ignore\n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      // @ts-ignore\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  // @ts-ignore\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (/** @type {number} */ value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n", "import varint from './vendor/varint.js'\n\nexport function decode (data: Uint8Array, offset = 0): [number, number] {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\nexport function encodeTo (int: number, target: Uint8Array, offset = 0): Uint8Array {\n  varint.encode(int, target, offset)\n  return target\n}\n\nexport function encodingLength (int: number): number {\n  return varint.encodingLength(int)\n}\n", "import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\nimport type { MultihashDigest } from './interface.js'\n\n/**\n * Creates a multihash digest.\n */\nexport function create <Code extends number> (code: Code, digest: Uint8Array): Digest<Code, number> {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode (multihash: Uint8Array): MultihashDigest {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\nexport function equals (a: MultihashDigest, b: unknown): b is MultihashDigest {\n  if (a === b) {\n    return true\n  } else {\n    const data = b as { code?: unknown, size?: unknown, bytes?: unknown }\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest<Code extends number, Size extends number> implements MultihashDigest {\n  readonly code: Code\n  readonly size: Size\n  readonly digest: Uint8Array\n  readonly bytes: Uint8Array\n\n  /**\n   * Creates a multihash digest.\n   */\n  constructor (code: Code, size: Size, digest: Uint8Array, bytes: Uint8Array) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n\n/**\n * Used to check that the passed multihash has the passed code\n */\nexport function hasCode <T extends number> (digest: MultihashDigest, code: T): digest is MultihashDigest<T> {\n  return digest.code === code\n}\n", "import { base32 } from './bases/base32.js'\nimport { base36 } from './bases/base36.js'\nimport { base58btc } from './bases/base58.js'\nimport { coerce } from './bytes.js'\nimport * as Digest from './hashes/digest.js'\nimport * as varint from './varint.js'\nimport type * as API from './link/interface.js'\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\nexport function format <T extends API.Link<unknown, number, number, API.Version>, Prefix extends string> (link: T, base?: API.MultibaseEncoder<Prefix>): API.ToString<T, Prefix> {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        base as API.MultibaseEncoder<'z'> ?? base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        (base ?? base32.encoder) as API.MultibaseEncoder<Prefix>\n      )\n  }\n}\n\nexport function toJSON <Link extends API.UnknownLink> (link: Link): API.LinkJSON<Link> {\n  return {\n    '/': format(link)\n  }\n}\n\nexport function fromJSON <Link extends API.UnknownLink> (json: API.LinkJSON<Link>): CID<unknown, number, number, API.Version> {\n  return CID.parse(json['/'])\n}\n\nconst cache = new WeakMap<API.UnknownLink, Map<string, string>>()\n\nfunction baseCache (cid: API.UnknownLink): Map<string, string> {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\nexport class CID<Data = unknown, Format extends number = number, Alg extends number = number, Version extends API.Version = API.Version> implements API.Link<Data, Format, Alg, Version> {\n  readonly code: Format\n  readonly version: Version\n  readonly multihash: API.MultihashDigest<Alg>\n  readonly bytes: Uint8Array\n  readonly '/': Uint8Array\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param multihash - (Multi)hash of the of the content.\n   */\n  constructor (version: Version, code: Format, multihash: API.MultihashDigest<Alg>, bytes: Uint8Array) {\n    this.code = code\n    this.version = version\n    this.multihash = multihash\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID (): this {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset (): number {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength (): number {\n    return this.bytes.byteLength\n  }\n\n  toV0 (): CID<Data, API.DAG_PB, API.SHA_256, 0> {\n    switch (this.version) {\n      case 0: {\n        return this as CID<Data, API.DAG_PB, API.SHA_256, 0>\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return (\n          CID.createV0(\n            multihash as API.MultihashDigest<API.SHA_256>\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  toV1 (): CID<Data, Format, Alg, 1> {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return this as CID<Data, Format, Alg, 1>\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  equals (other: unknown): other is CID<Data, Format, Alg, Version> {\n    return CID.equals(this, other)\n  }\n\n  static equals <Data, Format extends number, Alg extends number, Version extends API.Version>(self: API.Link<Data, Format, Alg, Version>, other: unknown): other is CID {\n    const unknown = other as { code?: unknown, version?: unknown, multihash?: unknown }\n    return (\n      unknown != null &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  toString (base?: API.MultibaseEncoder<string>): string {\n    return format(this, base)\n  }\n\n  toJSON (): API.LinkJSON<this> {\n    return { '/': format(this) }\n  }\n\n  link (): this {\n    return this\n  }\n\n  readonly [Symbol.toStringTag] = 'CID';\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] (): string {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   */\n  static asCID <Data, Format extends number, Alg extends number, Version extends API.Version, U>(input: API.Link<Data, Format, Alg, Version> | U): CID<Data, Format, Alg, Version> | null {\n    if (input == null) {\n      return null\n    }\n\n    const value = input as any\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        multihash as API.MultihashDigest<Alg>,\n        bytes ?? encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest = Digest.decode(multihash) as API.MultihashDigest<Alg>\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param digest - (Multi)hash of the of the content.\n   */\n  static create <Data, Format extends number, Alg extends number, Version extends API.Version>(version: Version, code: Format, digest: API.MultihashDigest<Alg>): CID<Data, Format, Alg, Version> {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   */\n  static createV0 <T = unknown>(digest: API.MultihashDigest<typeof SHA_256_CODE>): CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0> {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @param code - Content encoding format code.\n   * @param digest - Multihash of the content.\n   */\n  static createV1 <Data, Code extends number, Alg extends number>(code: Code, digest: API.MultihashDigest<Alg>): CID<Data, Code, Alg, 1> {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   */\n  static decode <Data, Code extends number, Alg extends number, Version extends API.Version>(bytes: API.ByteView<API.Link<Data, Code, Alg, Version>>): CID<Data, Code, Alg, Version> {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length !== 0) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   */\n  static decodeFirst <T, C extends number, A extends number, V extends API.Version>(bytes: API.ByteView<API.Link<T, C, A, V>>): [CID<T, C, A, V>, Uint8Array] {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(digest as API.MultihashDigest<API.SHA_256>)\n        : CID.createV1(specs.codec, digest)\n    return [cid as CID<T, C, A, V>, bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   */\n  static inspectBytes <T, C extends number, A extends number, V extends API.Version>(initialBytes: API.ByteView<API.Link<T, C, A, V>>): { version: V, codec: C, multihashCode: A, digestSize: number, multihashSize: number, size: number } {\n    let offset = 0\n    const next = (): number => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = next() as V\n    let codec = DAG_PB_CODE as C\n    if (version as number === 18) {\n      // CIDv0\n      version = 0 as V\n      offset = 0\n    } else {\n      codec = next() as C\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = next() as A // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   */\n  static parse <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version>(source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): CID<Data, Code, Alg, Version> {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\nfunction parseCIDtoBytes <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version> (source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): [Prefix, API.ByteView<API.Link<Data, Code, Alg, Version>>] {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base ?? base58btc\n      return [\n        base58btc.prefix as Prefix,\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base ?? base58btc\n      return [base58btc.prefix as Prefix, decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base ?? base32\n      return [base32.prefix as Prefix, decoder.decode(source)]\n    }\n    case base36.prefix: {\n      const decoder = base ?? base36\n      return [base36.prefix as Prefix, decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [source[0] as Prefix, base.decode(source)]\n    }\n  }\n}\n\nfunction toStringV0 (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<'z'>): string {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nfunction toStringV1 <Prefix extends string> (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<Prefix>): string {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\nfunction encodeCID (version: API.Version, code: number, multihash: Uint8Array): Uint8Array {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n", "import { publicKeyFromProtobuf } from '@libp2p/crypto/keys'\nimport { InvalidMultihashError } from '@libp2p/interface'\nimport { logger } from '@libp2p/logger'\nimport * as cborg from 'cborg'\nimport { base36 } from 'multiformats/bases/base36'\nimport { CID, type MultihashDigest } from 'multiformats/cid'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { InvalidRecordDataError, InvalidValueError, SignatureVerificationError, UnsupportedValidityError } from './errors.js'\nimport { IpnsEntry } from './pb/ipns.js'\nimport type { IPNSRecord, IPNSRecordV2, IPNSRecordData } from './index.js'\nimport type { PublicKey } from '@libp2p/interface'\n\nconst log = logger('ipns:utils')\nconst IPNS_PREFIX = uint8ArrayFromString('/ipns/')\nconst LIBP2P_CID_CODEC = 0x72\nconst IDENTITY_CODEC = 0x0\nconst SHA2_256_CODEC = 0x12\n\n/**\n * Extracts a public key from the passed PeerId, falling back to the pubKey\n * embedded in the ipns record\n */\nexport function extractPublicKeyFromIPNSRecord (record: IPNSRecord | IPNSRecordV2): PublicKey | undefined {\n  let pubKey: PublicKey | undefined\n\n  if (record.pubKey != null) {\n    try {\n      pubKey = publicKeyFromProtobuf(record.pubKey)\n    } catch (err) {\n      log.error(err)\n      throw err\n    }\n  }\n\n  if (pubKey != null) {\n    return pubKey\n  }\n}\n\n/**\n * Utility for creating the record data for being signed\n */\nexport function ipnsRecordDataForV1Sig (value: Uint8Array, validityType: IpnsEntry.ValidityType, validity: Uint8Array): Uint8Array {\n  const validityTypeBuffer = uint8ArrayFromString(validityType)\n\n  return uint8ArrayConcat([value, validity, validityTypeBuffer])\n}\n\n/**\n * Utility for creating the record data for being signed\n */\nexport function ipnsRecordDataForV2Sig (data: Uint8Array): Uint8Array {\n  const entryData = uint8ArrayFromString('ipns-signature:')\n\n  return uint8ArrayConcat([entryData, data])\n}\n\nexport function marshalIPNSRecord (obj: IPNSRecord | IPNSRecordV2): Uint8Array {\n  if ('signatureV1' in obj) {\n    return IpnsEntry.encode({\n      value: uint8ArrayFromString(obj.value),\n      signatureV1: obj.signatureV1,\n      validityType: obj.validityType,\n      validity: uint8ArrayFromString(obj.validity),\n      sequence: obj.sequence,\n      ttl: obj.ttl,\n      pubKey: obj.pubKey,\n      signatureV2: obj.signatureV2,\n      data: obj.data\n    })\n  } else {\n    return IpnsEntry.encode({\n      pubKey: obj.pubKey,\n      signatureV2: obj.signatureV2,\n      data: obj.data\n    })\n  }\n}\n\nexport function unmarshalIPNSRecord (buf: Uint8Array): IPNSRecord {\n  const message = IpnsEntry.decode(buf)\n\n  // protobufjs returns bigints as numbers\n  if (message.sequence != null) {\n    message.sequence = BigInt(message.sequence)\n  }\n\n  // protobufjs returns bigints as numbers\n  if (message.ttl != null) {\n    message.ttl = BigInt(message.ttl)\n  }\n\n  // Check if we have the data field. If we don't, we fail. We've been producing\n  // V1+V2 records for quite a while and we don't support V1-only records during\n  // validation any more\n  if (message.signatureV2 == null || message.data == null) {\n    throw new SignatureVerificationError('Missing data or signatureV2')\n  }\n\n  const data = parseCborData(message.data)\n  const value = normalizeByteValue(data.Value)\n  const validity = uint8ArrayToString(data.Validity)\n\n  if (message.value != null && message.signatureV1 != null) {\n    // V1+V2\n    validateCborDataMatchesPbData(message)\n\n    return {\n      value,\n      validityType: IpnsEntry.ValidityType.EOL,\n      validity,\n      sequence: data.Sequence,\n      ttl: data.TTL,\n      pubKey: message.pubKey,\n      signatureV1: message.signatureV1,\n      signatureV2: message.signatureV2,\n      data: message.data\n    }\n  } else if (message.signatureV2 != null) {\n    // V2-only\n    return {\n      value,\n      validityType: IpnsEntry.ValidityType.EOL,\n      validity,\n      sequence: data.Sequence,\n      ttl: data.TTL,\n      pubKey: message.pubKey,\n      signatureV2: message.signatureV2,\n      data: message.data\n    }\n  } else {\n    throw new Error('invalid record: does not include signatureV1 or signatureV2')\n  }\n}\n\nexport function multihashToIPNSRoutingKey (digest: MultihashDigest<0x00 | 0x12>): Uint8Array {\n  return uint8ArrayConcat([\n    IPNS_PREFIX,\n    digest.bytes\n  ])\n}\n\nexport function multihashFromIPNSRoutingKey (key: Uint8Array): MultihashDigest<0x00 | 0x12> {\n  const digest = Digest.decode(key.slice(IPNS_PREFIX.length))\n\n  if (!isCodec(digest, IDENTITY_CODEC) && !isCodec(digest, SHA2_256_CODEC)) {\n    throw new InvalidMultihashError('Multihash in IPNS key was not identity or sha2-256')\n  }\n\n  return digest\n}\n\nexport function createCborData (value: Uint8Array, validityType: IpnsEntry.ValidityType, validity: Uint8Array, sequence: bigint, ttl: bigint): Uint8Array {\n  let ValidityType\n\n  if (validityType === IpnsEntry.ValidityType.EOL) {\n    ValidityType = 0\n  } else {\n    throw new UnsupportedValidityError('The validity type is unsupported')\n  }\n\n  const data = {\n    Value: value,\n    Validity: validity,\n    ValidityType,\n    Sequence: sequence,\n    TTL: ttl\n  }\n\n  return cborg.encode(data)\n}\n\nexport function parseCborData (buf: Uint8Array): IPNSRecordData {\n  const data = cborg.decode(buf)\n\n  if (data.ValidityType === 0) {\n    data.ValidityType = IpnsEntry.ValidityType.EOL\n  } else {\n    throw new UnsupportedValidityError('The validity type is unsupported')\n  }\n\n  if (Number.isInteger(data.Sequence)) {\n    // sequence must be a BigInt, but DAG-CBOR doesn't preserve this for Numbers within the safe-integer range\n    data.Sequence = BigInt(data.Sequence)\n  }\n\n  if (Number.isInteger(data.TTL)) {\n    // ttl must be a BigInt, but DAG-CBOR doesn't preserve this for Numbers within the safe-integer range\n    data.TTL = BigInt(data.TTL)\n  }\n\n  return data\n}\n\nexport function normalizeByteValue (value: Uint8Array): string {\n  const string = uint8ArrayToString(value).trim()\n\n  // if we have a path, check it is a valid path\n  if (string.startsWith('/')) {\n    return string\n  }\n\n  // try parsing what we have as CID bytes or a CID string\n  try {\n    return `/ipfs/${CID.decode(value).toV1().toString()}`\n  } catch {\n    // fall through\n  }\n\n  try {\n    return `/ipfs/${CID.parse(string).toV1().toString()}`\n  } catch {\n    // fall through\n  }\n\n  throw new InvalidValueError('Value must be a valid content path starting with /')\n}\n\n/**\n * Normalizes the given record value. It ensures it is a PeerID, a CID or a\n * string starting with '/'. PeerIDs become `/ipns/${cidV1Libp2pKey}`,\n * CIDs become `/ipfs/${cidAsV1}`.\n */\nexport function normalizeValue (value?: CID | PublicKey | MultihashDigest<0x00 | 0x12> | string): string {\n  if (value != null) {\n    const cid = asCID(value)\n\n    // if we have a CID, turn it into an ipfs path\n    if (cid != null) {\n      // PeerID encoded as a CID\n      if (cid.code === LIBP2P_CID_CODEC) {\n        return `/ipns/${cid.toString(base36)}`\n      }\n\n      return `/ipfs/${cid.toV1().toString()}`\n    }\n\n    if (hasBytes(value)) {\n      return `/ipns/${base36.encode(value.bytes)}`\n    }\n\n    // if we have a path, check it is a valid path\n    const string = value.toString().trim()\n\n    if (string.startsWith('/') && string.length > 1) {\n      return string\n    }\n  }\n\n  throw new InvalidValueError('Value must be a valid content path starting with /')\n}\n\nfunction validateCborDataMatchesPbData (entry: IpnsEntry): void {\n  if (entry.data == null) {\n    throw new InvalidRecordDataError('Record data is missing')\n  }\n\n  const data = parseCborData(entry.data)\n\n  if (!uint8ArrayEquals(data.Value, entry.value ?? new Uint8Array(0))) {\n    throw new SignatureVerificationError('Field \"value\" did not match between protobuf and CBOR')\n  }\n\n  if (!uint8ArrayEquals(data.Validity, entry.validity ?? new Uint8Array(0))) {\n    throw new SignatureVerificationError('Field \"validity\" did not match between protobuf and CBOR')\n  }\n\n  if (data.ValidityType !== entry.validityType) {\n    throw new SignatureVerificationError('Field \"validityType\" did not match between protobuf and CBOR')\n  }\n\n  if (data.Sequence !== entry.sequence) {\n    throw new SignatureVerificationError('Field \"sequence\" did not match between protobuf and CBOR')\n  }\n\n  if (data.TTL !== entry.ttl) {\n    throw new SignatureVerificationError('Field \"ttl\" did not match between protobuf and CBOR')\n  }\n}\n\nfunction hasBytes (obj?: any): obj is { bytes: Uint8Array } {\n  return obj.bytes instanceof Uint8Array\n}\n\nfunction hasToCID (obj?: any): obj is { toCID(): CID } {\n  return typeof obj?.toCID === 'function'\n}\n\nfunction asCID (obj?: any): CID | null {\n  if (hasToCID(obj)) {\n    return obj.toCID()\n  }\n\n  // try parsing as a CID string\n  try {\n    return CID.parse(obj)\n  } catch {\n    // fall through\n  }\n\n  return CID.asCID(obj)\n}\n\nexport function isCodec <T extends number> (digest: MultihashDigest, codec: T): digest is MultihashDigest<T> {\n  return digest.code === codec\n}\n", "import { publicKeyFromMultihash } from '@libp2p/crypto/keys'\nimport { logger } from '@libp2p/logger'\nimport NanoDate from 'timestamp-nano'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { InvalidEmbeddedPublicKeyError, RecordExpiredError, RecordTooLargeError, SignatureVerificationError, UnsupportedValidityError } from './errors.js'\nimport { IpnsEntry } from './pb/ipns.js'\nimport { extractPublicKeyFromIPNSRecord, ipnsRecordDataForV2Sig, isCodec, multihashFromIPNSRoutingKey, multihashToIPNSRoutingKey, unmarshalIPNSRecord } from './utils.js'\nimport type { PublicKey } from '@libp2p/interface'\n\nconst log = logger('ipns:validator')\n\n/**\n * Limit valid IPNS record sizes to 10kb\n */\nconst MAX_RECORD_SIZE = 1024 * 10\n\n/**\n * Validates the given IPNS Record against the given public key. We need a \"raw\"\n * record in order to be able to access to all of its fields.\n */\nexport const validate = async (publicKey: PublicKey, marshalledRecord: Uint8Array): Promise<void> => {\n  // unmarshal ensures that (1) SignatureV2 and Data are present, (2) that ValidityType\n  // and Validity are of valid types and have a value, (3) that CBOR data matches protobuf\n  // if it's a V1+V2 record.\n  const record = unmarshalIPNSRecord(marshalledRecord)\n\n  // Validate Signature V2\n  let isValid\n\n  try {\n    const dataForSignature = ipnsRecordDataForV2Sig(record.data)\n    isValid = await publicKey.verify(dataForSignature, record.signatureV2)\n  } catch (err) {\n    isValid = false\n  }\n\n  if (!isValid) {\n    log.error('record signature verification failed')\n    throw new SignatureVerificationError('Record signature verification failed')\n  }\n\n  // Validate according to the validity type\n  if (record.validityType === IpnsEntry.ValidityType.EOL) {\n    if (NanoDate.fromString(record.validity).toDate().getTime() < Date.now()) {\n      log.error('record has expired')\n      throw new RecordExpiredError('record has expired')\n    }\n  } else if (record.validityType != null) {\n    log.error('the validity type is unsupported')\n    throw new UnsupportedValidityError('The validity type is unsupported')\n  }\n\n  log('ipns record for %s is valid', record.value)\n}\n\n/**\n * Validate the given IPNS record against the given routing key.\n *\n * @see https://specs.ipfs.tech/ipns/ipns-record/#routing-record for the binary format of the routing key\n *\n * @param routingKey - The routing key in binary format: binary(ascii(IPNS_PREFIX) + multihash(public key))\n * @param marshalledRecord - The marshalled record to validate.\n */\nexport async function ipnsValidator (routingKey: Uint8Array, marshalledRecord: Uint8Array): Promise<void> {\n  if (marshalledRecord.byteLength > MAX_RECORD_SIZE) {\n    throw new RecordTooLargeError('The record is too large')\n  }\n\n  // try to extract public key from routing key\n  const routingMultihash = multihashFromIPNSRoutingKey(routingKey)\n  let routingPubKey: PublicKey | undefined\n\n  // identity hash\n  if (isCodec(routingMultihash, 0x0)) {\n    routingPubKey = publicKeyFromMultihash(routingMultihash)\n  }\n\n  // extract public key from record\n  const receivedRecord = unmarshalIPNSRecord(marshalledRecord)\n  const recordPubKey = extractPublicKeyFromIPNSRecord(receivedRecord) ?? routingPubKey\n\n  if (recordPubKey == null) {\n    throw new InvalidEmbeddedPublicKeyError('Could not extract public key from IPNS record or routing key')\n  }\n\n  const expectedRoutingKey = multihashToIPNSRoutingKey(recordPubKey.toMultihash())\n\n  if (!uint8ArrayEquals(expectedRoutingKey, routingKey)) {\n    throw new InvalidEmbeddedPublicKeyError('Embedded public key did not match routing key')\n  }\n\n  // Record validation\n  await validate(recordPubKey, marshalledRecord)\n}\n", "/**\n * A serialized message was received that was too large\n */\nexport class InvalidMessageLengthError extends Error {\n  name = 'InvalidMessageLengthError'\n  code = 'ERR_INVALID_MESSAGE_LENGTH'\n}\n", "import { isUint8ArrayList } from 'uint8arraylist'\nimport { InvalidMessageLengthError } from './errors.js'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface ParseOptions {\n  /**\n   * Limit the possible size of incoming serialized messages in bytes\n   */\n  maxMessageLength?: number\n}\n\nexport default async function * parse <T> (source: AsyncIterable<Uint8Array | Uint8ArrayList | string> | Iterable<Uint8Array | Uint8ArrayList | string>, opts: ParseOptions = {}): AsyncGenerator<T, void, undefined> {\n  const matcher = /\\r?\\n/\n  const decoder = new TextDecoder('utf8')\n  let buffer = ''\n\n  for await (let chunk of source) {\n    if (typeof chunk === 'string') {\n      chunk = new TextEncoder().encode(chunk)\n    }\n\n    if (isUint8ArrayList(chunk)) {\n      chunk = chunk.subarray()\n    }\n\n    buffer += decoder.decode(chunk, { stream: true })\n\n    if (buffer.length > (opts?.maxMessageLength ?? buffer.length)) {\n      throw new InvalidMessageLengthError('Incoming message too long')\n    }\n\n    const parts = buffer.split(matcher)\n    buffer = parts.pop() ?? ''\n\n    for (let i = 0; i < parts.length; i++) {\n      yield JSON.parse(parts[i])\n    }\n  }\n\n  buffer += decoder.decode()\n\n  if (buffer !== '') {\n    yield JSON.parse(buffer)\n  }\n}\n", "export class InvalidRequestError extends Error {\n  static name = 'InvalidRequestError'\n\n  constructor (message = 'Invalid request') {\n    super(message)\n    this.name = 'InvalidRequestError'\n  }\n}\n\nexport class BadResponseError extends Error {\n  static name = 'BadResponseError'\n\n  constructor (message = 'Bad response') {\n    super(message)\n    this.name = 'BadResponseError'\n  }\n}\n", "export const empty = new Uint8Array(0)\n\nexport function toHex (d: Uint8Array): string {\n  return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n}\n\nexport function fromHex (hex: string): Uint8Array {\n  const hexes = hex.match(/../g)\n  return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\nexport function equals (aa: Uint8Array, bb: Uint8Array): boolean {\n  if (aa === bb) { return true }\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function coerce (o: ArrayBufferView | ArrayBuffer | Uint8Array): Uint8Array {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') { return o }\n  if (o instanceof ArrayBuffer) { return new Uint8Array(o) }\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\nexport function isBinary (o: unknown): o is ArrayBuffer | ArrayBufferView {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n}\n\nexport function fromString (str: string): Uint8Array {\n  return new TextEncoder().encode(str)\n}\n\nexport function toString (b: Uint8Array): string {\n  return new TextDecoder().decode(b)\n}\n", "/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  /**\n   * @param {any[] | Iterable<number>} source\n   */\n  function encode (source) {\n    // @ts-ignore\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  /**\n   * @param {string | string[]} source\n   */\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  /**\n   * @param {string | string[]} string\n   */\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n", "import { coerce } from '../bytes.js'\nimport basex from '../vendor/base-x.js'\nimport type { BaseCodec, BaseDecoder, BaseEncoder, CombobaseDecoder, Multibase, MultibaseCodec, MultibaseDecoder, MultibaseEncoder, UnibaseDecoder } from './interface.js'\n\ninterface EncodeFn { (bytes: Uint8Array): string }\ninterface DecodeFn { (text: string): Uint8Array }\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder<Base extends string, Prefix extends string> implements MultibaseEncoder<Prefix>, BaseEncoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  encode (bytes: Uint8Array): Multibase<Prefix> {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder<Base extends string, Prefix extends string> implements MultibaseDecoder<Prefix>, UnibaseDecoder<Prefix>, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseDecode: DecodeFn\n  private readonly prefixCodePoint: number\n\n  constructor (name: Base, prefix: Prefix, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    const prefixCodePoint = prefix.codePointAt(0)\n    /* c8 ignore next 3 */\n    if (prefixCodePoint === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    this.prefixCodePoint = prefixCodePoint\n    this.baseDecode = baseDecode\n  }\n\n  decode (text: string): Uint8Array {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  or<OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n}\n\ntype Decoders<Prefix extends string> = Record<Prefix, UnibaseDecoder<Prefix>>\n\nclass ComposedDecoder<Prefix extends string> implements MultibaseDecoder<Prefix>, CombobaseDecoder<Prefix> {\n  readonly decoders: Decoders<Prefix>\n\n  constructor (decoders: Decoders<Prefix>) {\n    this.decoders = decoders\n  }\n\n  or <OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n\n  decode (input: string): Uint8Array {\n    const prefix = input[0] as Prefix\n    const decoder = this.decoders[prefix]\n    if (decoder != null) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\nexport function or <L extends string, R extends string> (left: UnibaseDecoder<L> | CombobaseDecoder<L>, right: UnibaseDecoder<R> | CombobaseDecoder<R>): ComposedDecoder<L | R> {\n  return new ComposedDecoder({\n    ...(left.decoders ?? { [(left as UnibaseDecoder<L>).prefix]: left }),\n    ...(right.decoders ?? { [(right as UnibaseDecoder<R>).prefix]: right })\n  } as Decoders<L | R>)\n}\n\nexport class Codec<Base extends string, Prefix extends string> implements MultibaseCodec<Prefix>, MultibaseEncoder<Prefix>, MultibaseDecoder<Prefix>, BaseCodec, BaseEncoder, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n  readonly baseDecode: DecodeFn\n  readonly encoder: Encoder<Base, Prefix>\n  readonly decoder: Decoder<Base, Prefix>\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  encode (input: Uint8Array): string {\n    return this.encoder.encode(input)\n  }\n\n  decode (input: string): Uint8Array {\n    return this.decoder.decode(input)\n  }\n}\n\nexport function from <Base extends string, Prefix extends string> ({ name, prefix, encode, decode }: { name: Base, prefix: Prefix, encode: EncodeFn, decode: DecodeFn }): Codec<Base, Prefix> {\n  return new Codec(name, prefix, encode, decode)\n}\n\nexport function baseX <Base extends string, Prefix extends string> ({ name, prefix, alphabet }: { name: Base, prefix: Prefix, alphabet: string }): Codec<Base, Prefix> {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: (text: string): Uint8Array => coerce(decode(text))\n  })\n}\n\nfunction decode (string: string, alphabetIdx: Record<string, number>, bitsPerChar: number, name: string): Uint8Array {\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = alphabetIdx[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\nfunction encode (data: Uint8Array, alphabet: string, bitsPerChar: number): string {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits !== 0) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (((out.length * bitsPerChar) & 7) !== 0) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\nfunction createAlphabetIdx (alphabet: string): Record<string, number> {\n  // Build the character lookup table:\n  const alphabetIdx: Record<string, number> = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    alphabetIdx[alphabet[i]] = i\n  }\n  return alphabetIdx\n}\n\n/**\n * RFC4648 Factory\n */\nexport function rfc4648 <Base extends string, Prefix extends string> ({ name, prefix, bitsPerChar, alphabet }: { name: Base, prefix: Prefix, bitsPerChar: number, alphabet: string }): Codec<Base, Prefix> {\n  const alphabetIdx = createAlphabetIdx(alphabet)\n  return from({\n    prefix,\n    name,\n    encode (input: Uint8Array): string {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input: string): Uint8Array {\n      return decode(input, alphabetIdx, bitsPerChar, name)\n    }\n  })\n}\n", "import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n", "import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n", "import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n", "/* eslint-disable */\nvar encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  // @ts-ignore\n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      // @ts-ignore\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  // @ts-ignore\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (/** @type {number} */ value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n", "import varint from './vendor/varint.js'\n\nexport function decode (data: Uint8Array, offset = 0): [number, number] {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\nexport function encodeTo (int: number, target: Uint8Array, offset = 0): Uint8Array {\n  varint.encode(int, target, offset)\n  return target\n}\n\nexport function encodingLength (int: number): number {\n  return varint.encodingLength(int)\n}\n", "import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\nimport type { MultihashDigest } from './interface.js'\n\n/**\n * Creates a multihash digest.\n */\nexport function create <Code extends number> (code: Code, digest: Uint8Array): Digest<Code, number> {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode (multihash: Uint8Array): MultihashDigest {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\nexport function equals (a: MultihashDigest, b: unknown): b is MultihashDigest {\n  if (a === b) {\n    return true\n  } else {\n    const data = b as { code?: unknown, size?: unknown, bytes?: unknown }\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest<Code extends number, Size extends number> implements MultihashDigest {\n  readonly code: Code\n  readonly size: Size\n  readonly digest: Uint8Array\n  readonly bytes: Uint8Array\n\n  /**\n   * Creates a multihash digest.\n   */\n  constructor (code: Code, size: Size, digest: Uint8Array, bytes: Uint8Array) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n\n/**\n * Used to check that the passed multihash has the passed code\n */\nexport function hasCode <T extends number> (digest: MultihashDigest, code: T): digest is MultihashDigest<T> {\n  return digest.code === code\n}\n", "import { base32 } from './bases/base32.js'\nimport { base36 } from './bases/base36.js'\nimport { base58btc } from './bases/base58.js'\nimport { coerce } from './bytes.js'\nimport * as Digest from './hashes/digest.js'\nimport * as varint from './varint.js'\nimport type * as API from './link/interface.js'\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\nexport function format <T extends API.Link<unknown, number, number, API.Version>, Prefix extends string> (link: T, base?: API.MultibaseEncoder<Prefix>): API.ToString<T, Prefix> {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        base as API.MultibaseEncoder<'z'> ?? base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        (base ?? base32.encoder) as API.MultibaseEncoder<Prefix>\n      )\n  }\n}\n\nexport function toJSON <Link extends API.UnknownLink> (link: Link): API.LinkJSON<Link> {\n  return {\n    '/': format(link)\n  }\n}\n\nexport function fromJSON <Link extends API.UnknownLink> (json: API.LinkJSON<Link>): CID<unknown, number, number, API.Version> {\n  return CID.parse(json['/'])\n}\n\nconst cache = new WeakMap<API.UnknownLink, Map<string, string>>()\n\nfunction baseCache (cid: API.UnknownLink): Map<string, string> {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\nexport class CID<Data = unknown, Format extends number = number, Alg extends number = number, Version extends API.Version = API.Version> implements API.Link<Data, Format, Alg, Version> {\n  readonly code: Format\n  readonly version: Version\n  readonly multihash: API.MultihashDigest<Alg>\n  readonly bytes: Uint8Array\n  readonly '/': Uint8Array\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param multihash - (Multi)hash of the of the content.\n   */\n  constructor (version: Version, code: Format, multihash: API.MultihashDigest<Alg>, bytes: Uint8Array) {\n    this.code = code\n    this.version = version\n    this.multihash = multihash\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID (): this {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset (): number {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength (): number {\n    return this.bytes.byteLength\n  }\n\n  toV0 (): CID<Data, API.DAG_PB, API.SHA_256, 0> {\n    switch (this.version) {\n      case 0: {\n        return this as CID<Data, API.DAG_PB, API.SHA_256, 0>\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return (\n          CID.createV0(\n            multihash as API.MultihashDigest<API.SHA_256>\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  toV1 (): CID<Data, Format, Alg, 1> {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return this as CID<Data, Format, Alg, 1>\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  equals (other: unknown): other is CID<Data, Format, Alg, Version> {\n    return CID.equals(this, other)\n  }\n\n  static equals <Data, Format extends number, Alg extends number, Version extends API.Version>(self: API.Link<Data, Format, Alg, Version>, other: unknown): other is CID {\n    const unknown = other as { code?: unknown, version?: unknown, multihash?: unknown }\n    return (\n      unknown != null &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  toString (base?: API.MultibaseEncoder<string>): string {\n    return format(this, base)\n  }\n\n  toJSON (): API.LinkJSON<this> {\n    return { '/': format(this) }\n  }\n\n  link (): this {\n    return this\n  }\n\n  readonly [Symbol.toStringTag] = 'CID';\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] (): string {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   */\n  static asCID <Data, Format extends number, Alg extends number, Version extends API.Version, U>(input: API.Link<Data, Format, Alg, Version> | U): CID<Data, Format, Alg, Version> | null {\n    if (input == null) {\n      return null\n    }\n\n    const value = input as any\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        multihash as API.MultihashDigest<Alg>,\n        bytes ?? encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest = Digest.decode(multihash) as API.MultihashDigest<Alg>\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param digest - (Multi)hash of the of the content.\n   */\n  static create <Data, Format extends number, Alg extends number, Version extends API.Version>(version: Version, code: Format, digest: API.MultihashDigest<Alg>): CID<Data, Format, Alg, Version> {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   */\n  static createV0 <T = unknown>(digest: API.MultihashDigest<typeof SHA_256_CODE>): CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0> {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @param code - Content encoding format code.\n   * @param digest - Multihash of the content.\n   */\n  static createV1 <Data, Code extends number, Alg extends number>(code: Code, digest: API.MultihashDigest<Alg>): CID<Data, Code, Alg, 1> {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   */\n  static decode <Data, Code extends number, Alg extends number, Version extends API.Version>(bytes: API.ByteView<API.Link<Data, Code, Alg, Version>>): CID<Data, Code, Alg, Version> {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length !== 0) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   */\n  static decodeFirst <T, C extends number, A extends number, V extends API.Version>(bytes: API.ByteView<API.Link<T, C, A, V>>): [CID<T, C, A, V>, Uint8Array] {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(digest as API.MultihashDigest<API.SHA_256>)\n        : CID.createV1(specs.codec, digest)\n    return [cid as CID<T, C, A, V>, bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   */\n  static inspectBytes <T, C extends number, A extends number, V extends API.Version>(initialBytes: API.ByteView<API.Link<T, C, A, V>>): { version: V, codec: C, multihashCode: A, digestSize: number, multihashSize: number, size: number } {\n    let offset = 0\n    const next = (): number => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = next() as V\n    let codec = DAG_PB_CODE as C\n    if (version as number === 18) {\n      // CIDv0\n      version = 0 as V\n      offset = 0\n    } else {\n      codec = next() as C\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = next() as A // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   */\n  static parse <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version>(source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): CID<Data, Code, Alg, Version> {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\nfunction parseCIDtoBytes <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version> (source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): [Prefix, API.ByteView<API.Link<Data, Code, Alg, Version>>] {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base ?? base58btc\n      return [\n        base58btc.prefix as Prefix,\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base ?? base58btc\n      return [base58btc.prefix as Prefix, decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base ?? base32\n      return [base32.prefix as Prefix, decoder.decode(source)]\n    }\n    case base36.prefix: {\n      const decoder = base ?? base36\n      return [base36.prefix as Prefix, decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [source[0] as Prefix, base.decode(source)]\n    }\n  }\n}\n\nfunction toStringV0 (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<'z'>): string {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nfunction toStringV1 <Prefix extends string> (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<Prefix>): string {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\nfunction encodeCID (version: API.Version, code: number, multihash: Uint8Array): Uint8Array {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n", "import { NotFoundError } from '@libp2p/interface'\nimport { marshalIPNSRecord, multihashFromIPNSRoutingKey, unmarshalIPNSRecord } from 'ipns'\nimport first from 'it-first'\nimport map from 'it-map'\nimport { CID } from 'multiformats/cid'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport type { DelegatedRoutingV1HttpApiClient } from './index.js'\nimport type { ContentRouting, PeerRouting, AbortOptions, PeerId, PeerInfo } from '@libp2p/interface'\n\nconst IPNS_PREFIX = uint8ArrayFromString('/ipns/')\n\nfunction isIPNSKey (key: Uint8Array): boolean {\n  return uint8ArrayEquals(key.subarray(0, IPNS_PREFIX.byteLength), IPNS_PREFIX)\n}\n\n/**\n * Wrapper class to convert [http-routing-v1 content events](https://specs.ipfs.tech/routing/http-routing-v1/#response-body) into returned values\n */\nexport class DelegatedRoutingV1HttpApiClientContentRouting implements ContentRouting {\n  private readonly client: DelegatedRoutingV1HttpApiClient\n\n  constructor (client: DelegatedRoutingV1HttpApiClient) {\n    this.client = client\n  }\n\n  async * findProviders (cid: CID, options: AbortOptions = {}): AsyncIterable<PeerInfo> {\n    yield * map(this.client.getProviders(cid, options), (record) => {\n      return {\n        id: record.ID,\n        multiaddrs: record.Addrs ?? []\n      }\n    })\n  }\n\n  async provide (): Promise<void> {\n    // noop\n  }\n\n  async cancelReprovide (): Promise<void> {\n    // noop\n  }\n\n  async put (key: Uint8Array, value: Uint8Array, options?: AbortOptions): Promise<void> {\n    if (!isIPNSKey(key)) {\n      return\n    }\n\n    const digest = multihashFromIPNSRoutingKey(key)\n    const cid = CID.createV1(0x72, digest)\n    const record = unmarshalIPNSRecord(value)\n\n    await this.client.putIPNS(cid, record, options)\n  }\n\n  async get (key: Uint8Array, options?: AbortOptions): Promise<Uint8Array> {\n    if (!isIPNSKey(key)) {\n      throw new NotFoundError('Not found')\n    }\n\n    const digest = multihashFromIPNSRoutingKey(key)\n    const cid = CID.createV1(0x72, digest)\n\n    try {\n      const record = await this.client.getIPNS(cid, options)\n\n      return marshalIPNSRecord(record)\n    } catch (err: any) {\n      // BadResponseError is thrown when the response had no body, which means\n      // the record couldn't be found\n      if (err.name === 'BadResponseError') {\n        throw new NotFoundError('Not found')\n      }\n\n      throw err\n    }\n  }\n}\n\n/**\n * Wrapper class to convert [http-routing-v1](https://specs.ipfs.tech/routing/http-routing-v1/#response-body-0) events into expected libp2p values\n */\nexport class DelegatedRoutingV1HttpApiClientPeerRouting implements PeerRouting {\n  private readonly client: DelegatedRoutingV1HttpApiClient\n\n  constructor (client: DelegatedRoutingV1HttpApiClient) {\n    this.client = client\n  }\n\n  async findPeer (peerId: PeerId, options: AbortOptions = {}): Promise<PeerInfo> {\n    const peer = await first(this.client.getPeers(peerId, options))\n\n    if (peer != null) {\n      return {\n        id: peer.ID,\n        multiaddrs: peer.Addrs ?? []\n      }\n    }\n\n    throw new NotFoundError('Not found')\n  }\n\n  async * getClosestPeers (key: Uint8Array, options: AbortOptions = {}): AsyncIterable<PeerInfo> {\n    // noop\n  }\n}\n", "import { NotFoundError, contentRoutingSymbol, peerRoutingSymbol, setMaxListeners } from '@libp2p/interface'\nimport { logger } from '@libp2p/logger'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { anySignal } from 'any-signal'\nimport toIt from 'browser-readablestream-to-it'\nimport { unmarshalIPNSRecord, marshalIPNSRecord, multihashToIPNSRoutingKey } from 'ipns'\nimport { ipnsValidator } from 'ipns/validator'\nimport { parse as ndjson } from 'it-ndjson'\nimport defer from 'p-defer'\nimport PQueue from 'p-queue'\nimport { BadResponseError, InvalidRequestError } from './errors.js'\nimport { DelegatedRoutingV1HttpApiClientContentRouting, DelegatedRoutingV1HttpApiClientPeerRouting } from './routings.js'\nimport type { DelegatedRoutingV1HttpApiClient, DelegatedRoutingV1HttpApiClientInit, GetProvidersOptions, GetPeersOptions, GetIPNSOptions, PeerRecord } from './index.js'\nimport type { ContentRouting, PeerRouting, AbortOptions, PeerId } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { IPNSRecord } from 'ipns'\nimport type { CID } from 'multiformats'\n\nconst log = logger('delegated-routing-v1-http-api-client')\n\nconst defaultValues = {\n  concurrentRequests: 4,\n  timeout: 30e3,\n  cacheTTL: 5 * 60 * 1000, // 5 minutes default as per https://specs.ipfs.tech/routing/http-routing-v1/#response-headers\n  cacheName: 'delegated-routing-v1-cache'\n}\n\nexport class DefaultDelegatedRoutingV1HttpApiClient implements DelegatedRoutingV1HttpApiClient {\n  private started: boolean\n  private readonly httpQueue: PQueue\n  private readonly shutDownController: AbortController\n  private readonly clientUrl: URL\n  private readonly timeout: number\n  private readonly contentRouting: ContentRouting\n  private readonly peerRouting: PeerRouting\n  private readonly filterAddrs?: string[]\n  private readonly filterProtocols?: string[]\n  private readonly inFlightRequests: Map<string, Promise<Response>>\n  private readonly cacheName: string\n  private cache?: Cache\n  private readonly cacheTTL: number\n  /**\n   * Create a new DelegatedContentRouting instance\n   */\n  constructor (url: string | URL, init: DelegatedRoutingV1HttpApiClientInit = {}) {\n    this.started = false\n    this.shutDownController = new AbortController()\n    setMaxListeners(Infinity, this.shutDownController.signal)\n    this.httpQueue = new PQueue({\n      concurrency: init.concurrentRequests ?? defaultValues.concurrentRequests\n    })\n    this.inFlightRequests = new Map() // Tracks in-flight requests to avoid duplicate requests\n    this.clientUrl = url instanceof URL ? url : new URL(url)\n    this.timeout = init.timeout ?? defaultValues.timeout\n    this.filterAddrs = init.filterAddrs\n    this.filterProtocols = init.filterProtocols\n    this.contentRouting = new DelegatedRoutingV1HttpApiClientContentRouting(this)\n    this.peerRouting = new DelegatedRoutingV1HttpApiClientPeerRouting(this)\n\n    this.cacheName = init.cacheName ?? defaultValues.cacheName\n    this.cacheTTL = init.cacheTTL ?? defaultValues.cacheTTL\n  }\n\n  get [contentRoutingSymbol] (): ContentRouting {\n    return this.contentRouting\n  }\n\n  get [peerRoutingSymbol] (): PeerRouting {\n    return this.peerRouting\n  }\n\n  isStarted (): boolean {\n    return this.started\n  }\n\n  async start (): Promise<void> {\n    if (this.started) {\n      return\n    }\n\n    this.started = true\n\n    if (this.cacheTTL > 0) {\n      this.cache = await globalThis.caches?.open(this.cacheName)\n\n      if (this.cache != null) {\n        log('cache enabled with ttl %d', this.cacheTTL)\n      }\n    }\n  }\n\n  async stop (): Promise<void> {\n    this.httpQueue.clear()\n    this.shutDownController.abort()\n\n    // Clear the cache when stopping\n    await globalThis.caches?.delete(this.cacheName)\n\n    this.started = false\n  }\n\n  async * getProviders (cid: CID, options: GetProvidersOptions = {}): AsyncGenerator<PeerRecord> {\n    log('getProviders starts: %c', cid)\n\n    const timeoutSignal = AbortSignal.timeout(this.timeout)\n    const signal = anySignal([this.shutDownController.signal, timeoutSignal, options.signal])\n    setMaxListeners(Infinity, timeoutSignal, signal)\n    const onStart = defer()\n    const onFinish = defer()\n\n    void this.httpQueue.add(async () => {\n      onStart.resolve()\n      return onFinish.promise\n    })\n\n    try {\n      await onStart.promise\n\n      // https://specs.ipfs.tech/routing/http-routing-v1/\n      const url = new URL(`${this.clientUrl}routing/v1/providers/${cid.toString()}`)\n      this.#addFilterParams(url, options.filterAddrs, options.filterProtocols)\n      const getOptions = { headers: { Accept: 'application/x-ndjson' }, signal }\n      const res = await this.#makeRequest(url.toString(), getOptions)\n\n      if (res == null) {\n        throw new BadResponseError('No response received')\n      }\n      if (!res.ok) {\n        if (res.status === 404) {\n        // https://specs.ipfs.tech/routing/http-routing-v1/#response-status-codes\n        // 404 (Not Found): must be returned if no matching records are found\n          throw new NotFoundError('No matching records found')\n        }\n\n        if (res.status === 422) {\n        // https://specs.ipfs.tech/routing/http-routing-v1/#response-status-codes\n        // 422 (Unprocessable Entity): request does not conform to schema or semantic constraints\n          throw new InvalidRequestError('Request does not conform to schema or semantic constraints')\n        }\n        throw new BadResponseError(`Unexpected status code: ${res.status}`)\n      }\n\n      if (res.body == null) {\n        throw new BadResponseError('Routing response had no body')\n      }\n\n      const contentType = res.headers.get('Content-Type')\n      if (contentType == null) {\n        throw new BadResponseError('No Content-Type header received')\n      }\n\n      if (contentType?.startsWith('application/json')) {\n        const body = await res.json()\n\n        for (const provider of body.Providers) {\n          const record = this.#conformToPeerSchema(provider)\n          if (record != null) {\n            yield record\n          }\n        }\n      } else if (contentType.includes('application/x-ndjson')) {\n        for await (const provider of ndjson(toIt(res.body))) {\n          const record = this.#conformToPeerSchema(provider)\n          if (record != null) {\n            yield record\n          }\n        }\n      } else {\n        throw new BadResponseError(`Unsupported Content-Type: ${contentType}`)\n      }\n    } finally {\n      signal.clear()\n      onFinish.resolve()\n      log('getProviders finished: %c', cid)\n    }\n  }\n\n  async * getPeers (peerId: PeerId, options: GetPeersOptions = {}): AsyncGenerator<PeerRecord> {\n    log('getPeers starts: %c', peerId)\n\n    const timeoutSignal = AbortSignal.timeout(this.timeout)\n    const signal = anySignal([this.shutDownController.signal, timeoutSignal, options.signal])\n    setMaxListeners(Infinity, timeoutSignal, signal)\n    const onStart = defer()\n    const onFinish = defer()\n\n    void this.httpQueue.add(async () => {\n      onStart.resolve()\n      return onFinish.promise\n    })\n\n    try {\n      await onStart.promise\n\n      // https://specs.ipfs.tech/routing/http-routing-v1/\n      const url = new URL(`${this.clientUrl}routing/v1/peers/${peerId.toCID().toString()}`)\n      this.#addFilterParams(url, options.filterAddrs, options.filterProtocols)\n\n      const getOptions = { headers: { Accept: 'application/x-ndjson' }, signal }\n      const res = await this.#makeRequest(url.toString(), getOptions)\n\n      if (res.status === 404) {\n        // https://specs.ipfs.tech/routing/http-routing-v1/#response-status-codes\n        // 404 (Not Found): must be returned if no matching records are found.\n        throw new NotFoundError('No matching records found')\n      }\n\n      if (res.status === 422) {\n        // https://specs.ipfs.tech/routing/http-routing-v1/#response-status-codes\n        // 422 (Unprocessable Entity): request does not conform to schema or semantic constraints\n        throw new InvalidRequestError('Request does not conform to schema or semantic constraints')\n      }\n\n      if (res.body == null) {\n        throw new BadResponseError('Routing response had no body')\n      }\n\n      const contentType = res.headers.get('Content-Type')\n      if (contentType === 'application/json') {\n        const body = await res.json()\n\n        for (const peer of body.Peers) {\n          const record = this.#conformToPeerSchema(peer)\n          if (record != null) {\n            yield record\n          }\n        }\n      } else {\n        for await (const peer of ndjson(toIt(res.body))) {\n          const record = this.#conformToPeerSchema(peer)\n          if (record != null) {\n            yield record\n          }\n        }\n      }\n    } catch (err) {\n      log.error('getPeers errored:', err)\n    } finally {\n      signal.clear()\n      onFinish.resolve()\n      log('getPeers finished: %c', peerId)\n    }\n  }\n\n  async getIPNS (libp2pKey: CID<unknown, 0x72, 0x00 | 0x12, 1>, options: GetIPNSOptions = {}): Promise<IPNSRecord> {\n    log('getIPNS starts: %s', libp2pKey)\n\n    const timeoutSignal = AbortSignal.timeout(this.timeout)\n    const signal = anySignal([this.shutDownController.signal, timeoutSignal, options.signal])\n    setMaxListeners(Infinity, timeoutSignal, signal)\n    const onStart = defer()\n    const onFinish = defer()\n\n    void this.httpQueue.add(async () => {\n      onStart.resolve()\n      return onFinish.promise\n    })\n\n    // https://specs.ipfs.tech/routing/http-routing-v1/\n    const resource = `${this.clientUrl}routing/v1/ipns/${libp2pKey}`\n\n    try {\n      await onStart.promise\n\n      const getOptions = { headers: { Accept: 'application/vnd.ipfs.ipns-record' }, signal }\n      const res = await this.#makeRequest(resource, getOptions)\n\n      log('getIPNS GET %s %d', resource, res.status)\n\n      if (res.status === 404) {\n        // https://specs.ipfs.tech/routing/http-routing-v1/#response-status-codes\n        // 404 (Not Found): must be returned if no matching records are found\n        throw new NotFoundError('No matching records found')\n      }\n\n      if (res.status === 422) {\n        // https://specs.ipfs.tech/routing/http-routing-v1/#response-status-codes\n        // 422 (Unprocessable Entity): request does not conform to schema or semantic constraints\n        throw new InvalidRequestError('Request does not conform to schema or semantic constraints')\n      }\n\n      if (res.body == null) {\n        throw new BadResponseError('GET ipns response had no body')\n      }\n\n      const buf = await res.arrayBuffer()\n      const body = new Uint8Array(buf, 0, buf.byteLength)\n\n      if (options.validate !== false) {\n        await ipnsValidator(multihashToIPNSRoutingKey(libp2pKey.multihash), body)\n      }\n\n      return unmarshalIPNSRecord(body)\n    } catch (err: any) {\n      log.error('getIPNS GET %s error:', resource, err)\n\n      throw err\n    } finally {\n      signal.clear()\n      onFinish.resolve()\n      log('getIPNS finished: %s', libp2pKey)\n    }\n  }\n\n  async putIPNS (libp2pKey: CID<unknown, 0x72, 0x00 | 0x12, 1>, record: IPNSRecord, options: AbortOptions = {}): Promise<void> {\n    log('putIPNS starts: %c', libp2pKey)\n\n    const timeoutSignal = AbortSignal.timeout(this.timeout)\n    const signal = anySignal([this.shutDownController.signal, timeoutSignal, options.signal])\n    setMaxListeners(Infinity, timeoutSignal, signal)\n    const onStart = defer()\n    const onFinish = defer()\n\n    void this.httpQueue.add(async () => {\n      onStart.resolve()\n      return onFinish.promise\n    })\n\n    // https://specs.ipfs.tech/routing/http-routing-v1/\n    const resource = `${this.clientUrl}routing/v1/ipns/${libp2pKey}`\n\n    try {\n      await onStart.promise\n\n      const body = marshalIPNSRecord(record)\n\n      const getOptions = { method: 'PUT', headers: { 'Content-Type': 'application/vnd.ipfs.ipns-record' }, body, signal }\n      const res = await this.#makeRequest(resource, getOptions)\n\n      log('putIPNS PUT %s %d', resource, res.status)\n\n      if (res.status !== 200) {\n        throw new BadResponseError('PUT ipns response had status other than 200')\n      }\n    } catch (err: any) {\n      log.error('putIPNS PUT %s error:', resource, err.stack)\n\n      throw err\n    } finally {\n      signal.clear()\n      onFinish.resolve()\n      log('putIPNS finished: %c', libp2pKey)\n    }\n  }\n\n  #conformToPeerSchema (record: any): PeerRecord | undefined {\n    try {\n      const protocols: string[] = []\n      const multiaddrs: Multiaddr[] = record.Addrs?.map(multiaddr) ?? []\n\n      if (record.Protocols != null) {\n        protocols.push(...record.Protocols)\n      }\n\n      if (record.Protocol != null) {\n        protocols.push(record.Protocol)\n        delete record.Protocol\n      }\n\n      return {\n        ...record,\n        Schema: 'peer',\n        ID: peerIdFromString(record.ID),\n        Addrs: multiaddrs,\n        Protocols: protocols\n      }\n    } catch (err) {\n      log.error('could not conform record to peer schema', err)\n    }\n  }\n\n  #addFilterParams (url: URL, filterAddrs?: string[], filterProtocols?: string[]): void {\n    // IPIP-484 filtering. local options filter precedence over global filter\n    if (filterAddrs != null || this.filterAddrs != null) {\n      const adressFilter = filterAddrs?.join(',') ?? this.filterAddrs?.join(',') ?? ''\n      if (adressFilter !== '') {\n        url.searchParams.set('filter-addrs', adressFilter)\n      }\n    }\n    if (filterProtocols != null || this.filterProtocols != null) {\n      const protocolFilter = filterProtocols?.join(',') ?? this.filterProtocols?.join(',') ?? ''\n      if (protocolFilter !== '') {\n        url.searchParams.set('filter-protocols', protocolFilter)\n      }\n    }\n  }\n\n  /**\n   * makeRequest has two features:\n   * - Ensures only one concurrent request is made for the same URL\n   * - Caches GET requests if the Cache API is available\n   */\n  async #makeRequest (url: string, options: RequestInit): Promise<Response> {\n    const requestMethod = options.method ?? 'GET'\n    const key = `${requestMethod}-${url}`\n\n    // Only try to use cache for GET requests\n    if (requestMethod === 'GET') {\n      const cachedResponse = await this.cache?.match(url)\n      if (cachedResponse != null) {\n        // Check if the cached response has expired\n        const expires = parseInt(cachedResponse.headers.get('x-cache-expires') ?? '0', 10)\n        if (expires > Date.now()) {\n          log('returning cached response for %s', key)\n          return cachedResponse\n        } else {\n          // Remove expired response from cache\n          await this.cache?.delete(url)\n        }\n      }\n    }\n\n    // Check if there's already an in-flight request for this URL\n    const existingRequest = this.inFlightRequests.get(key)\n    if (existingRequest != null) {\n      const response = await existingRequest\n      log('deduplicating outgoing request for %s', key)\n      return response.clone()\n    }\n\n    // Create new request and track it\n    const requestPromise = fetch(url, options).then(async response => {\n      // Only cache successful GET requests\n      if (this.cache != null && response.ok && requestMethod === 'GET') {\n        const expires = Date.now() + this.cacheTTL\n        const headers = new Headers(response.headers)\n        headers.set('x-cache-expires', expires.toString())\n\n        // Create a new response with expiration header\n        const cachedResponse = new Response(response.clone().body, {\n          status: response.status,\n          statusText: response.statusText,\n          headers\n        })\n\n        await this.cache.put(url, cachedResponse)\n      }\n      return response\n    }).finally(() => {\n      // Clean up the tracked request when it completes\n      this.inFlightRequests.delete(key)\n    })\n\n    this.inFlightRequests.set(key, requestPromise)\n    const response = await requestPromise\n    return response\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * A client implementation of the IPFS [Delegated Routing V1 HTTP API](https://specs.ipfs.tech/routing/http-routing-v1/) that can be used to interact with any compliant server implementation.\n *\n * @example\n *\n * ```typescript\n * import { createDelegatedRoutingV1HttpApiClient } from '@helia/delegated-routing-v1-http-api-client'\n * import { CID } from 'multiformats/cid'\n *\n * const client = createDelegatedRoutingV1HttpApiClient('https://example.org')\n *\n * for await (const prov of getProviders(CID.parse('QmFoo'))) {\n *   // ...\n * }\n * ```\n *\n * ### How to use with libp2p\n *\n * The client can be configured as a libp2p service, this will enable it as both a {@link https://libp2p.github.io/js-libp2p/interfaces/_libp2p_interface.content_routing.ContentRouting.html | ContentRouting} and a {@link https://libp2p.github.io/js-libp2p/interfaces/_libp2p_interface.peer_routing.PeerRouting.html | PeerRouting} implementation\n *\n * @example\n *\n * ```typescript\n * import { createDelegatedRoutingV1HttpApiClient } from '@helia/delegated-routing-v1-http-api-client'\n * import { createLibp2p } from 'libp2p'\n * import { peerIdFromString } from '@libp2p/peer-id'\n *\n * const client = createDelegatedRoutingV1HttpApiClient('https://example.org')\n * const libp2p = await createLibp2p({\n *   // other config here\n *   services: {\n *     delegatedRouting: client\n *   }\n * })\n *\n * // later this will use the configured HTTP gateway\n * await libp2p.peerRouting.findPeer(peerIdFromString('QmFoo'))\n * ```\n *\n * ### Caching\n *\n * By default, the client caches successful (200) delegated routing responses in browser environments (that support the [Cache API](https://developer.mozilla.org/en-US/docs/Web/API/Cache)) for a duration of 5 minutes. The client does this by adding an `x-cache-expires` header to the response object.\n *\n * If caching is enabled, the client will cache responses for the duration of `cacheTTL` milliseconds.\n * If `cacheTTL` is 0, caching is disabled:\n *\n * @example\n *\n * ```typescript\n * // disable caching\n * const client = createDelegatedRoutingV1HttpApiClient('https://example.org', { cacheTTL: 0 })\n * ```\n *\n * ### Filtering with IPIP-484\n *\n * The client can be configured to pass filter options to the delegated routing server as defined in IPIP-484.\n * The filter options be set globally, by passing them to the client constructor, or on a per-request basis.\n *\n * @see https://github.com/ipfs/specs/pull/484\n *\n * @example\n *\n * ```typescript\n * import { createDelegatedRoutingV1HttpApiClient } from '@helia/delegated-routing-v1-http-api-client'\n * import { createLibp2p } from 'libp2p'\n * import { peerIdFromString } from '@libp2p/peer-id'\n *\n * // globally set filter options\n * const client = createDelegatedRoutingV1HttpApiClient('https://delegated-ipfs.dev', {\n *   filterProtocols: ['transport-bitswap', 'unknown', 'transport-ipfs-gateway-http'],\n *   filterAddrs: ['webtransport', 'webrtc-direct', 'wss']\n * })\n *\n * // per-request filter options\n * for await (const prov of getProviders(CID.parse('bafy'), {\n *   filterProtocols: ['transport-ipfs-gateway-http'],\n *   filterAddrs: ['!p2p-circuit']\n * })) {\n *   // ...\n * }\n * ```\n */\n\nimport { DefaultDelegatedRoutingV1HttpApiClient } from './client.js'\nimport type { AbortOptions, PeerId } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { IPNSRecord } from 'ipns'\nimport type { CID } from 'multiformats/cid'\n\n/**\n * A peer that conforms to the [Peer Schema](https://specs.ipfs.tech/routing/http-routing-v1/#peer-schema).\n *\n * Note that legacy schemas may be reformatted internally by this module.\n *\n * If `Addrs` is empty, a caller may wish to perform a `findPeer` operation to\n * ascertain the peer's multiaddrs.\n *\n * If `Protocols` is empty, a caller may wish to dial the peer and peform a\n * libp2p identify operation to ascertain the peer's supported protocols.\n */\nexport interface PeerRecord {\n  Schema: 'peer'\n  ID: PeerId\n  Addrs: Multiaddr[]\n  Protocols: string[]\n}\n\nexport interface FilterOptions {\n  /**\n   * List of protocols to filter in the PeerRecords as defined in IPIP-484\n   * If undefined, PeerRecords are not filtered by protocol\n   *\n   * @see https://github.com/ipfs/specs/pull/484\n   * @default undefined\n   */\n  filterProtocols?: string[]\n\n  /**\n   * Array of address filters to filter PeerRecords's addresses as defined in IPIP-484\n   * If undefined, PeerRecords are not filtered by address\n   *\n   * @see https://github.com/ipfs/specs/pull/484\n   * @default undefined\n   */\n  filterAddrs?: string[]\n}\nexport interface DelegatedRoutingV1HttpApiClientInit extends FilterOptions {\n  /**\n   * A concurrency limit to avoid request flood in web browser (default: 4)\n   *\n   * @see https://github.com/libp2p/js-libp2p-delegated-content-routing/issues/12\n   */\n  concurrentRequests?: number\n\n  /**\n   * How long a request is allowed to take in ms (default: 30 seconds)\n   */\n  timeout?: number\n\n  /**\n   * How long to cache responses for in ms (default: 5 minutes)\n   * If 0, caching is disabled\n   */\n  cacheTTL?: number\n\n  /**\n   * Where a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) is\n   * available in the global scope, we will store request/responses to avoid\n   * making duplicate requests.\n   *\n   * @default 'delegated-routing-v1-cache'\n   */\n  cacheName?: string\n}\n\nexport interface GetIPNSOptions extends AbortOptions {\n  /**\n   * By default incoming IPNS records are validated, pass false here to skip\n   * validation and just return the record.\n   *\n   * @default true\n   */\n  validate?: boolean\n}\n\nexport type GetProvidersOptions = FilterOptions & AbortOptions\nexport type GetPeersOptions = FilterOptions & AbortOptions\n\nexport interface DelegatedRoutingV1HttpApiClient {\n  /**\n   * Returns an async generator of {@link PeerRecord}s that can provide the\n   * content for the passed {@link CID}\n   */\n  getProviders(cid: CID, options?: GetProvidersOptions): AsyncGenerator<PeerRecord>\n\n  /**\n   * Returns an async generator of {@link PeerRecord}s for the provided\n   * {@link PeerId}\n   */\n  getPeers(peerId: PeerId, options?: GetPeersOptions): AsyncGenerator<PeerRecord>\n\n  /**\n   * Returns a promise of a {@link IPNSRecord} for the given {@link MultihashDigest}\n   */\n  getIPNS(libp2pKey: CID<unknown, 0x72, 0x00 | 0x12, 1>, options?: GetIPNSOptions): Promise<IPNSRecord>\n\n  /**\n   * Publishes the given {@link IPNSRecord} for the provided {@link MultihashDigest}\n   */\n  putIPNS(libp2pKey: CID<unknown, 0x72, 0x00 | 0x12, 1>, record: IPNSRecord, options?: AbortOptions): Promise<void>\n\n  /**\n   * Create the request/response cache used to ensure duplicate requests aren't\n   * made for the same data\n   */\n  start(): Promise<void>\n\n  /**\n   * Shut down any currently running HTTP requests and clear up any resources\n   * that are in use\n   */\n  stop(): Promise<void>\n}\n\n/**\n * Create and return a client to use with a Routing V1 HTTP API server\n */\nexport function createDelegatedRoutingV1HttpApiClient (url: URL | string, init: DelegatedRoutingV1HttpApiClientInit = {}): DelegatedRoutingV1HttpApiClient {\n  return new DefaultDelegatedRoutingV1HttpApiClient(new URL(url), init)\n}\n", "export const empty = new Uint8Array(0)\n\nexport function toHex (d: Uint8Array): string {\n  return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n}\n\nexport function fromHex (hex: string): Uint8Array {\n  const hexes = hex.match(/../g)\n  return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\nexport function equals (aa: Uint8Array, bb: Uint8Array): boolean {\n  if (aa === bb) { return true }\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function coerce (o: ArrayBufferView | ArrayBuffer | Uint8Array): Uint8Array {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') { return o }\n  if (o instanceof ArrayBuffer) { return new Uint8Array(o) }\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\nexport function isBinary (o: unknown): o is ArrayBuffer | ArrayBufferView {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n}\n\nexport function fromString (str: string): Uint8Array {\n  return new TextEncoder().encode(str)\n}\n\nexport function toString (b: Uint8Array): string {\n  return new TextDecoder().decode(b)\n}\n", "/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  /**\n   * @param {any[] | Iterable<number>} source\n   */\n  function encode (source) {\n    // @ts-ignore\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  /**\n   * @param {string | string[]} source\n   */\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  /**\n   * @param {string | string[]} string\n   */\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n", "import { coerce } from '../bytes.js'\nimport basex from '../vendor/base-x.js'\nimport type { BaseCodec, BaseDecoder, BaseEncoder, CombobaseDecoder, Multibase, MultibaseCodec, MultibaseDecoder, MultibaseEncoder, UnibaseDecoder } from './interface.js'\n\ninterface EncodeFn { (bytes: Uint8Array): string }\ninterface DecodeFn { (text: string): Uint8Array }\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder<Base extends string, Prefix extends string> implements MultibaseEncoder<Prefix>, BaseEncoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  encode (bytes: Uint8Array): Multibase<Prefix> {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder<Base extends string, Prefix extends string> implements MultibaseDecoder<Prefix>, UnibaseDecoder<Prefix>, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseDecode: DecodeFn\n  private readonly prefixCodePoint: number\n\n  constructor (name: Base, prefix: Prefix, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    const prefixCodePoint = prefix.codePointAt(0)\n    /* c8 ignore next 3 */\n    if (prefixCodePoint === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    this.prefixCodePoint = prefixCodePoint\n    this.baseDecode = baseDecode\n  }\n\n  decode (text: string): Uint8Array {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  or<OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n}\n\ntype Decoders<Prefix extends string> = Record<Prefix, UnibaseDecoder<Prefix>>\n\nclass ComposedDecoder<Prefix extends string> implements MultibaseDecoder<Prefix>, CombobaseDecoder<Prefix> {\n  readonly decoders: Decoders<Prefix>\n\n  constructor (decoders: Decoders<Prefix>) {\n    this.decoders = decoders\n  }\n\n  or <OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n\n  decode (input: string): Uint8Array {\n    const prefix = input[0] as Prefix\n    const decoder = this.decoders[prefix]\n    if (decoder != null) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\nexport function or <L extends string, R extends string> (left: UnibaseDecoder<L> | CombobaseDecoder<L>, right: UnibaseDecoder<R> | CombobaseDecoder<R>): ComposedDecoder<L | R> {\n  return new ComposedDecoder({\n    ...(left.decoders ?? { [(left as UnibaseDecoder<L>).prefix]: left }),\n    ...(right.decoders ?? { [(right as UnibaseDecoder<R>).prefix]: right })\n  } as Decoders<L | R>)\n}\n\nexport class Codec<Base extends string, Prefix extends string> implements MultibaseCodec<Prefix>, MultibaseEncoder<Prefix>, MultibaseDecoder<Prefix>, BaseCodec, BaseEncoder, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n  readonly baseDecode: DecodeFn\n  readonly encoder: Encoder<Base, Prefix>\n  readonly decoder: Decoder<Base, Prefix>\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  encode (input: Uint8Array): string {\n    return this.encoder.encode(input)\n  }\n\n  decode (input: string): Uint8Array {\n    return this.decoder.decode(input)\n  }\n}\n\nexport function from <Base extends string, Prefix extends string> ({ name, prefix, encode, decode }: { name: Base, prefix: Prefix, encode: EncodeFn, decode: DecodeFn }): Codec<Base, Prefix> {\n  return new Codec(name, prefix, encode, decode)\n}\n\nexport function baseX <Base extends string, Prefix extends string> ({ name, prefix, alphabet }: { name: Base, prefix: Prefix, alphabet: string }): Codec<Base, Prefix> {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: (text: string): Uint8Array => coerce(decode(text))\n  })\n}\n\nfunction decode (string: string, alphabetIdx: Record<string, number>, bitsPerChar: number, name: string): Uint8Array {\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = alphabetIdx[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\nfunction encode (data: Uint8Array, alphabet: string, bitsPerChar: number): string {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits !== 0) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (((out.length * bitsPerChar) & 7) !== 0) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\nfunction createAlphabetIdx (alphabet: string): Record<string, number> {\n  // Build the character lookup table:\n  const alphabetIdx: Record<string, number> = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    alphabetIdx[alphabet[i]] = i\n  }\n  return alphabetIdx\n}\n\n/**\n * RFC4648 Factory\n */\nexport function rfc4648 <Base extends string, Prefix extends string> ({ name, prefix, bitsPerChar, alphabet }: { name: Base, prefix: Prefix, bitsPerChar: number, alphabet: string }): Codec<Base, Prefix> {\n  const alphabetIdx = createAlphabetIdx(alphabet)\n  return from({\n    prefix,\n    name,\n    encode (input: Uint8Array): string {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input: string): Uint8Array {\n      return decode(input, alphabetIdx, bitsPerChar, name)\n    }\n  })\n}\n", "import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n", "import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n", "import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n", "/* eslint-disable */\nvar encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  // @ts-ignore\n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      // @ts-ignore\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  // @ts-ignore\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (/** @type {number} */ value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n", "import varint from './vendor/varint.js'\n\nexport function decode (data: Uint8Array, offset = 0): [number, number] {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\nexport function encodeTo (int: number, target: Uint8Array, offset = 0): Uint8Array {\n  varint.encode(int, target, offset)\n  return target\n}\n\nexport function encodingLength (int: number): number {\n  return varint.encodingLength(int)\n}\n", "import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\nimport type { MultihashDigest } from './interface.js'\n\n/**\n * Creates a multihash digest.\n */\nexport function create <Code extends number> (code: Code, digest: Uint8Array): Digest<Code, number> {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode (multihash: Uint8Array): MultihashDigest {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\nexport function equals (a: MultihashDigest, b: unknown): b is MultihashDigest {\n  if (a === b) {\n    return true\n  } else {\n    const data = b as { code?: unknown, size?: unknown, bytes?: unknown }\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest<Code extends number, Size extends number> implements MultihashDigest {\n  readonly code: Code\n  readonly size: Size\n  readonly digest: Uint8Array\n  readonly bytes: Uint8Array\n\n  /**\n   * Creates a multihash digest.\n   */\n  constructor (code: Code, size: Size, digest: Uint8Array, bytes: Uint8Array) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n\n/**\n * Used to check that the passed multihash has the passed code\n */\nexport function hasCode <T extends number> (digest: MultihashDigest, code: T): digest is MultihashDigest<T> {\n  return digest.code === code\n}\n", "import { base32 } from './bases/base32.js'\nimport { base36 } from './bases/base36.js'\nimport { base58btc } from './bases/base58.js'\nimport { coerce } from './bytes.js'\nimport * as Digest from './hashes/digest.js'\nimport * as varint from './varint.js'\nimport type * as API from './link/interface.js'\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\nexport function format <T extends API.Link<unknown, number, number, API.Version>, Prefix extends string> (link: T, base?: API.MultibaseEncoder<Prefix>): API.ToString<T, Prefix> {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        base as API.MultibaseEncoder<'z'> ?? base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        (base ?? base32.encoder) as API.MultibaseEncoder<Prefix>\n      )\n  }\n}\n\nexport function toJSON <Link extends API.UnknownLink> (link: Link): API.LinkJSON<Link> {\n  return {\n    '/': format(link)\n  }\n}\n\nexport function fromJSON <Link extends API.UnknownLink> (json: API.LinkJSON<Link>): CID<unknown, number, number, API.Version> {\n  return CID.parse(json['/'])\n}\n\nconst cache = new WeakMap<API.UnknownLink, Map<string, string>>()\n\nfunction baseCache (cid: API.UnknownLink): Map<string, string> {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\nexport class CID<Data = unknown, Format extends number = number, Alg extends number = number, Version extends API.Version = API.Version> implements API.Link<Data, Format, Alg, Version> {\n  readonly code: Format\n  readonly version: Version\n  readonly multihash: API.MultihashDigest<Alg>\n  readonly bytes: Uint8Array\n  readonly '/': Uint8Array\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param multihash - (Multi)hash of the of the content.\n   */\n  constructor (version: Version, code: Format, multihash: API.MultihashDigest<Alg>, bytes: Uint8Array) {\n    this.code = code\n    this.version = version\n    this.multihash = multihash\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID (): this {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset (): number {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength (): number {\n    return this.bytes.byteLength\n  }\n\n  toV0 (): CID<Data, API.DAG_PB, API.SHA_256, 0> {\n    switch (this.version) {\n      case 0: {\n        return this as CID<Data, API.DAG_PB, API.SHA_256, 0>\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return (\n          CID.createV0(\n            multihash as API.MultihashDigest<API.SHA_256>\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  toV1 (): CID<Data, Format, Alg, 1> {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return this as CID<Data, Format, Alg, 1>\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  equals (other: unknown): other is CID<Data, Format, Alg, Version> {\n    return CID.equals(this, other)\n  }\n\n  static equals <Data, Format extends number, Alg extends number, Version extends API.Version>(self: API.Link<Data, Format, Alg, Version>, other: unknown): other is CID {\n    const unknown = other as { code?: unknown, version?: unknown, multihash?: unknown }\n    return (\n      unknown != null &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  toString (base?: API.MultibaseEncoder<string>): string {\n    return format(this, base)\n  }\n\n  toJSON (): API.LinkJSON<this> {\n    return { '/': format(this) }\n  }\n\n  link (): this {\n    return this\n  }\n\n  readonly [Symbol.toStringTag] = 'CID';\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] (): string {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   */\n  static asCID <Data, Format extends number, Alg extends number, Version extends API.Version, U>(input: API.Link<Data, Format, Alg, Version> | U): CID<Data, Format, Alg, Version> | null {\n    if (input == null) {\n      return null\n    }\n\n    const value = input as any\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        multihash as API.MultihashDigest<Alg>,\n        bytes ?? encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest = Digest.decode(multihash) as API.MultihashDigest<Alg>\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param digest - (Multi)hash of the of the content.\n   */\n  static create <Data, Format extends number, Alg extends number, Version extends API.Version>(version: Version, code: Format, digest: API.MultihashDigest<Alg>): CID<Data, Format, Alg, Version> {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   */\n  static createV0 <T = unknown>(digest: API.MultihashDigest<typeof SHA_256_CODE>): CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0> {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @param code - Content encoding format code.\n   * @param digest - Multihash of the content.\n   */\n  static createV1 <Data, Code extends number, Alg extends number>(code: Code, digest: API.MultihashDigest<Alg>): CID<Data, Code, Alg, 1> {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   */\n  static decode <Data, Code extends number, Alg extends number, Version extends API.Version>(bytes: API.ByteView<API.Link<Data, Code, Alg, Version>>): CID<Data, Code, Alg, Version> {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length !== 0) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   */\n  static decodeFirst <T, C extends number, A extends number, V extends API.Version>(bytes: API.ByteView<API.Link<T, C, A, V>>): [CID<T, C, A, V>, Uint8Array] {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(digest as API.MultihashDigest<API.SHA_256>)\n        : CID.createV1(specs.codec, digest)\n    return [cid as CID<T, C, A, V>, bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   */\n  static inspectBytes <T, C extends number, A extends number, V extends API.Version>(initialBytes: API.ByteView<API.Link<T, C, A, V>>): { version: V, codec: C, multihashCode: A, digestSize: number, multihashSize: number, size: number } {\n    let offset = 0\n    const next = (): number => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = next() as V\n    let codec = DAG_PB_CODE as C\n    if (version as number === 18) {\n      // CIDv0\n      version = 0 as V\n      offset = 0\n    } else {\n      codec = next() as C\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = next() as A // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   */\n  static parse <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version>(source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): CID<Data, Code, Alg, Version> {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\nfunction parseCIDtoBytes <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version> (source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): [Prefix, API.ByteView<API.Link<Data, Code, Alg, Version>>] {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base ?? base58btc\n      return [\n        base58btc.prefix as Prefix,\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base ?? base58btc\n      return [base58btc.prefix as Prefix, decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base ?? base32\n      return [base32.prefix as Prefix, decoder.decode(source)]\n    }\n    case base36.prefix: {\n      const decoder = base ?? base36\n      return [base36.prefix as Prefix, decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [source[0] as Prefix, base.decode(source)]\n    }\n  }\n}\n\nfunction toStringV0 (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<'z'>): string {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nfunction toStringV1 <Prefix extends string> (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<Prefix>): string {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\nfunction encodeCID (version: API.Version, code: number, multihash: Uint8Array): Uint8Array {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n", "import type { DelegatedRoutingV1HttpApiClientInit } from '@helia/delegated-routing-v1-http-api-client'\n\nexport function delegatedHTTPRoutingDefaults (): DelegatedRoutingV1HttpApiClientInit {\n  return {\n    filterProtocols: ['unknown', 'transport-bitswap', 'transport-ipfs-gateway-http'],\n    filterAddrs: ['https', 'webtransport', 'webrtc', 'webrtc-direct', 'wss', 'tls']\n  }\n}\n", "import { createDelegatedRoutingV1HttpApiClient } from '@helia/delegated-routing-v1-http-api-client'\nimport { NotFoundError } from '@libp2p/interface'\nimport { marshalIPNSRecord, multihashFromIPNSRoutingKey, unmarshalIPNSRecord } from 'ipns'\nimport first from 'it-first'\nimport map from 'it-map'\nimport { CID } from 'multiformats/cid'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { delegatedHTTPRoutingDefaults } from './utils/delegated-http-routing-defaults.js'\nimport type { DelegatedRoutingV1HttpApiClient, DelegatedRoutingV1HttpApiClientInit } from '@helia/delegated-routing-v1-http-api-client'\nimport type { Provider, Routing, RoutingOptions } from '@helia/interface'\nimport type { PeerId, PeerInfo } from '@libp2p/interface'\nimport type { Version } from 'multiformats'\n\nconst IPNS_PREFIX = uint8ArrayFromString('/ipns/')\n\nfunction isIPNSKey (key: Uint8Array): boolean {\n  return uint8ArrayEquals(key.subarray(0, IPNS_PREFIX.byteLength), IPNS_PREFIX)\n}\n\nclass DelegatedHTTPRouter implements Routing {\n  private readonly client: DelegatedRoutingV1HttpApiClient\n\n  constructor (url: URL, init: DelegatedRoutingV1HttpApiClientInit = {}) {\n    this.client = createDelegatedRoutingV1HttpApiClient(url, init)\n  }\n\n  async provide (cid: CID, options?: RoutingOptions): Promise<void> {\n    // noop\n  }\n\n  async cancelReprovide (cid?: CID, options?: RoutingOptions): Promise<void> {\n    // noop\n  }\n\n  async * findProviders (cid: CID<unknown, number, number, Version>, options?: RoutingOptions): AsyncIterable<Provider> {\n    yield * map(this.client.getProviders(cid, options), (record) => {\n      return {\n        id: record.ID,\n        multiaddrs: record.Addrs,\n        protocols: record.Protocols\n      }\n    })\n  }\n\n  async put (key: Uint8Array, value: Uint8Array, options?: RoutingOptions): Promise<void> {\n    if (!isIPNSKey(key)) {\n      return\n    }\n\n    const digest = multihashFromIPNSRoutingKey(key)\n    const cid = CID.createV1(0x72, digest)\n    const record = unmarshalIPNSRecord(value)\n\n    await this.client.putIPNS(cid, record, options)\n  }\n\n  async get (key: Uint8Array, options?: RoutingOptions): Promise<Uint8Array> {\n    if (!isIPNSKey(key)) {\n      throw new NotFoundError('Not found')\n    }\n\n    const digest = multihashFromIPNSRoutingKey(key)\n    const cid = CID.createV1(0x72, digest)\n\n    try {\n      const record = await this.client.getIPNS(cid, options)\n\n      return marshalIPNSRecord(record)\n    } catch (err: any) {\n      // BadResponseError is thrown when the response had no body, which means\n      // the record couldn't be found\n      if (err.name === 'BadResponseError') {\n        throw new NotFoundError('Not found')\n      }\n\n      throw err\n    }\n  }\n\n  async findPeer (peerId: PeerId, options?: RoutingOptions): Promise<PeerInfo> {\n    const peer = await first(this.client.getPeers(peerId, options))\n\n    if (peer != null) {\n      return {\n        id: peer.ID,\n        multiaddrs: peer.Addrs ?? []\n      }\n    }\n\n    throw new NotFoundError('Not found')\n  }\n\n  async * getClosestPeers (key: Uint8Array, options?: RoutingOptions): AsyncIterable<PeerInfo> {\n    // noop\n  }\n}\n\n/**\n * Creates a Helia Router that connects to an endpoint that supports the [Delegated Routing V1 HTTP API](https://specs.ipfs.tech/routing/http-routing-v1/) spec.\n */\nexport function delegatedHTTPRouting (url: string | URL, init?: DelegatedRoutingV1HttpApiClientInit): Routing {\n  const config = init ?? delegatedHTTPRoutingDefaults()\n  return new DelegatedHTTPRouter(new URL(url), config)\n}\n", "const word = '[a-fA-F\\\\d:]';\n\nconst boundry = options => options && options.includeBoundaries\n\t? `(?:(?<=\\\\s|^)(?=${word})|(?<=${word})(?=\\\\s|$))`\n\t: '';\n\nconst v4 = '(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}';\n\nconst v6segment = '[a-fA-F\\\\d]{1,4}';\n\nconst v6 = `\n(?:\n(?:${v6segment}:){7}(?:${v6segment}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:${v6segment}:){6}(?:${v4}|:${v6segment}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:${v6segment}:){5}(?::${v4}|(?::${v6segment}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:${v6segment}:){4}(?:(?::${v6segment}){0,1}:${v4}|(?::${v6segment}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:${v6segment}:){3}(?:(?::${v6segment}){0,2}:${v4}|(?::${v6segment}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:${v6segment}:){2}(?:(?::${v6segment}){0,3}:${v4}|(?::${v6segment}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:${v6segment}:){1}(?:(?::${v6segment}){0,4}:${v4}|(?::${v6segment}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::${v6segment}){0,5}:${v4}|(?::${v6segment}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n`.replace(/\\s*\\/\\/.*$/gm, '').replace(/\\n/g, '').trim();\n\n// Pre-compile only the exact regexes because adding a global flag make regexes stateful\nconst v46Exact = new RegExp(`(?:^${v4}$)|(?:^${v6}$)`);\nconst v4exact = new RegExp(`^${v4}$`);\nconst v6exact = new RegExp(`^${v6}$`);\n\nconst ipRegex = options => options && options.exact\n\t? v46Exact\n\t: new RegExp(`(?:${boundry(options)}${v4}${boundry(options)})|(?:${boundry(options)}${v6}${boundry(options)})`, 'g');\n\nipRegex.v4 = options => options && options.exact ? v4exact : new RegExp(`${boundry(options)}${v4}${boundry(options)}`, 'g');\nipRegex.v6 = options => options && options.exact ? v6exact : new RegExp(`${boundry(options)}${v6}${boundry(options)}`, 'g');\n\nexport default ipRegex;\n", "// Even though the browser version is a no-op, we wrap it to ensure consistent behavior.\nexport default function functionTimeout(function_) {\n\tconst wrappedFunction = (...arguments_) => function_(...arguments_);\n\n\tObject.defineProperty(wrappedFunction, 'name', {\n\t\tvalue: `functionTimeout(${function_.name || '<anonymous>'})`,\n\t\tconfigurable: true,\n\t});\n\n\treturn wrappedFunction;\n}\n\nexport function isTimeoutError() {\n\treturn false;\n}\n", "const {toString} = Object.prototype;\n\nexport default function isRegexp(value) {\n\treturn toString.call(value) === '[object RegExp]';\n}\n", "import isRegexp from 'is-regexp';\n\nconst flagMap = {\n\tglobal: 'g',\n\tignoreCase: 'i',\n\tmultiline: 'm',\n\tdotAll: 's',\n\tsticky: 'y',\n\tunicode: 'u'\n};\n\nexport default function clonedRegexp(regexp, options = {}) {\n\tif (!isRegexp(regexp)) {\n\t\tthrow new TypeError('Expected a RegExp instance');\n\t}\n\n\tconst flags = Object.keys(flagMap).map(flag => (\n\t\t(typeof options[flag] === 'boolean' ? options[flag] : regexp[flag]) ? flagMap[flag] : ''\n\t)).join('');\n\n\tconst clonedRegexp = new RegExp(options.source || regexp.source, flags);\n\n\tclonedRegexp.lastIndex = typeof options.lastIndex === 'number' ?\n\t\toptions.lastIndex :\n\t\tregexp.lastIndex;\n\n\treturn clonedRegexp;\n}\n", "import functionTimeout, {isTimeoutError} from 'function-timeout';\nimport timeSpan from 'time-span';\nimport cloneRegexp from 'clone-regexp'; // TODO: Use `structuredClone` instead when targeting Node.js 18.\n\nconst resultToMatch = result => ({\n\tmatch: result[0],\n\tindex: result.index,\n\tgroups: result.slice(1),\n\tnamedGroups: result.groups ?? {},\n\tinput: result.input,\n});\n\nexport function isMatch(regex, string, {timeout} = {}) {\n\ttry {\n\t\treturn functionTimeout(() => cloneRegexp(regex).test(string), {timeout})();\n\t} catch (error) {\n\t\tif (isTimeoutError(error)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthrow error;\n\t}\n}\n\nexport function firstMatch(regex, string, {timeout} = {}) {\n\ttry {\n\t\tconst result = functionTimeout(() => cloneRegexp(regex).exec(string), {timeout})();\n\n\t\tif (result === null) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn resultToMatch(result);\n\t} catch (error) {\n\t\tif (isTimeoutError(error)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthrow error;\n\t}\n}\n\nexport function matches(regex, string, {timeout = Number.POSITIVE_INFINITY, matchTimeout = Number.POSITIVE_INFINITY} = {}) {\n\tif (!regex.global) {\n\t\tthrow new Error('The regex must have the global flag, otherwise, use `firstMatch()` instead');\n\t}\n\n\treturn {\n\t\t* [Symbol.iterator]() {\n\t\t\ttry {\n\t\t\t\tconst matches = string.matchAll(regex); // The regex is only executed when iterated over.\n\n\t\t\t\twhile (true) {\n\t\t\t\t\tconst nextMatch = functionTimeout(() => matches.next(), {timeout: (timeout !== Number.POSITIVE_INFINITY || matchTimeout !== Number.POSITIVE_INFINITY) ? Math.min(timeout, matchTimeout) : undefined}); // `matches.next` must be called within an arrow function so that it doesn't loose its context.\n\n\t\t\t\t\tconst end = timeSpan();\n\t\t\t\t\tconst {value, done} = nextMatch();\n\t\t\t\t\ttimeout -= Math.ceil(end());\n\n\t\t\t\t\tif (done) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tyield resultToMatch(value);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (!isTimeoutError(error)) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t};\n}\n", "import ipRegex from 'ip-regex';\nimport {isMatch} from 'super-regex';\n\nconst maxIPv4Length = 15;\nconst maxIPv6Length = 45;\n\nconst options = {\n\ttimeout: 400,\n};\n\nexport function isIP(string) {\n\tif (string.length > maxIPv6Length) {\n\t\treturn false;\n\t}\n\n\treturn isMatch(ipRegex({exact: true}), string, options);\n}\n\nexport function isIPv6(string) {\n\tif (string.length > maxIPv6Length) {\n\t\treturn false;\n\t}\n\n\treturn isMatch(ipRegex.v6({exact: true}), string, options);\n}\n\nexport function isIPv4(string) {\n\tif (string.length > maxIPv4Length) {\n\t\treturn false;\n\t}\n\n\treturn isMatch(ipRegex.v4({exact: true}), string, options);\n}\n\nexport function ipVersion(string) {\n\tif (isIPv6(string)) {\n\t\treturn 6;\n\t}\n\n\tif (isIPv4(string)) {\n\t\treturn 4;\n\t}\n}\n", "/**\n * @packageDocumentation\n *\n * ```typescript\n * import { uriToMultiaddr } from '@multiformats/uri-to-multiaddr'\n *\n * console.log(uriToMultiaddr('https://protocol.ai'))\n * // -> /dns4/protocol.ai/tcp/443/https\n * ```\n *\n * Domain names can represent one of\n *\n * - `/dns4` - domain resolves to an ipv4 address (**default**)\n * - `/dns6` - domain resolves to an ipv6 address\n * - `/dnsaddr` - domain has a [DNSLink](https://docs.ipfs.io/guides/concepts/dnslink/) TXT record pointing to an IPFS CID\n *\n * This library assumes `/dns4` when it finds a domain name in the input string.\n * It makes no attempt query DNS. To override the default assumption, you can pass\n * in an options object as the second parameter to override it:\n *\n * ```typescript\n * import { uriToMultiaddr } from '@multiformats/uri-to-multiaddr'\n *\n * console.log(uriToMultiaddr('https://protocol.ai'), { defaultDnsType: 'dns6' })\n * // -> /dns6/protocol.ai/tcp/443/https\n * ```\n *\n * See [test.js](./test.js) for the currently supported conversions.\n *\n * **Note**: `uri-to-multiaddr` will throw if the passed URI:\n *\n * - is not a valid, according the WHATWG URL spec implementation used.\n * - is not supported yet\n *\n * ## Related\n *\n * - [@multiformats/multiaddr-to-uri](https://github.com/multiformats/js-multiaddr-to-uri) - convert it back again\n */\n\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { isIPv4, isIPv6 } from 'is-ip'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nconst portFor: Record<string, string> = {\n  http: '80',\n  https: '443',\n  ws: '80',\n  wss: '443'\n}\n\nconst BROWSER_SCHEMES = ['http', 'https', 'ws', 'wss']\n\nexport interface MultiaddrFromUriOpts {\n  /**\n   * If a URI contains a domain name, by default the `/dns/` tuple will be used\n   * to define it. If you wish to use `/dnsaddr` or something more specific like\n   * `/dns4` or `/dns6`, pass it as an option here.\n   *\n   * @default 'dns'\n   */\n  defaultDnsType?: 'dns' | 'dns4' | 'dns6' | 'dnsaddr'\n}\n\n/**\n * Convert a URI to a multiaddr\n *\n * http://foobar.com => /dns/foobar.com/tcp/80/http\n * https://foobar.com => /dns/foobar.com/tcp/443/https\n * https://foobar.com:5001 => /dns/foobar.com/tcp/5001/https\n * https://127.0.0.1:8080 => /ip4/127.0.0.1/tcp/8080/https\n * http://[::1]:8080 => /ip6/::1/tcp/8080/http\n * tcp://foobar.com:8080 => /dns/foobar.com/tcp/8080\n * udp://foobar.com:8080 => /dns/foobar.com/udp/8080\n */\n\nexport function uriToMultiaddr (uriStr: string, opts?: MultiaddrFromUriOpts): Multiaddr {\n  opts = opts ?? {}\n  const defaultDnsType = opts.defaultDnsType ?? 'dns'\n  const { scheme, hostname, port, path } = parseUri(uriStr)\n  const parts = [\n    tupleForHostname(hostname, defaultDnsType),\n    tupleForPort(port, scheme),\n    tupleForScheme(scheme)\n  ]\n\n  if (path != null) {\n    parts.push(tupleForPath(path))\n  }\n\n  const multiaddrStr = '/' + parts\n    .filter(x => Boolean(x))\n    // @ts-expect-error ts cannot see we filter falsy values\n    .reduce((a, b) => a.concat(b), [])\n    .join('/')\n\n  return multiaddr(multiaddrStr)\n}\n\nfunction parseUri (uriStr: string): { scheme: string, hostname: string, port: string, path?: string } {\n  const [scheme] = uriStr.split(':')\n\n  // browsers will only parse URLs with schemes they understand\n  if (!BROWSER_SCHEMES.includes(scheme)) {\n    uriStr = 'http' + uriStr.substring(scheme.length)\n  }\n\n  // Use the WHATWG URL global, in node >= 10 and the browser\n  let { protocol, hostname, port, pathname, search } = new URL(uriStr)\n\n  if (port == null || port === '') {\n    const protocolPort = portForProtocol(scheme)\n\n    if (protocolPort != null) {\n      port = protocolPort\n    }\n\n    // browsers will omit the port when it's common\n    if (protocolPort == null && protocol === 'http:') {\n      // we overrode the protocol with http, set the port to 80\n      port = '80'\n    }\n  }\n\n  let path: string | undefined\n\n  if (pathname != null && pathname !== '' && pathname !== '/') {\n    if (pathname.startsWith('/')) {\n      pathname = pathname.substring(1)\n    }\n\n    path = pathname\n  }\n\n  if (search != null && search !== '') {\n    path = path ?? ''\n    path += search\n  }\n\n  return { scheme, hostname, port, path }\n}\n\nfunction tupleForHostname (hostname: string, defaultDnsType: string): [string, string] | undefined {\n  if (hostname == null || hostname === '') {\n    return undefined\n  }\n\n  if (isIPv4(hostname)) {\n    return ['ip4', hostname]\n  }\n\n  if (isIPv6(hostname)) {\n    return ['ip6', hostname]\n  }\n\n  // literal ipv6 in url should be wrapped in square brackets [x:y:z]\n  // https://www.ietf.org/rfc/rfc2732.txt\n  if (hostname[0] === '[') {\n    const trimmed = hostname.substring(1, hostname.length - 1)\n    if (isIPv6(trimmed)) {\n      return ['ip6', trimmed]\n    }\n  }\n  // assumes that any non-ip hostname is a dns4 address.\n  return [defaultDnsType, hostname]\n}\n\nfunction tupleForPort (port: string, scheme: string): [string, string] | undefined {\n  if (port == null || port === '') {\n    return undefined\n  }\n\n  if (scheme === 'udp') {\n    return ['udp', port]\n  }\n\n  return ['tcp', port]\n}\n\nfunction tupleForScheme (scheme: string): [string] | undefined {\n  if (scheme.match(/^tcp$|^udp$/) != null) {\n    return undefined\n  }\n\n  if (scheme === 'https') {\n    return ['/tls/http']\n  }\n\n  if (scheme === 'wss') {\n    return ['/tls/ws']\n  }\n\n  return [scheme]\n}\n\nfunction tupleForPath (path: string): [string, string] | undefined {\n  if (path == null || path === '') {\n    return undefined\n  }\n\n  return ['http-path', encodeURIComponent(path)]\n}\n\nfunction portForProtocol (protocol: string): string | undefined {\n  if (protocol == null || protocol === '' || portFor[protocol] == null) {\n    return undefined\n  }\n\n  return portFor[protocol]\n}\n", "import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code: 0x0 = 0x0\nconst name = 'identity'\n\nconst encode: (input: Uint8Array) => Uint8Array = coerce\n\nfunction digest (input: Uint8Array): Digest.Digest<typeof code, number> {\n  return Digest.create(code, encode(input))\n}\n\nexport const identity = { code, name, encode, digest }\n", "import { peerIdFromCID } from '@libp2p/peer-id'\nimport { uriToMultiaddr } from '@multiformats/uri-to-multiaddr'\nimport { CID } from 'multiformats/cid'\nimport { identity } from 'multiformats/hashes/identity'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport type { Provider, Routing, RoutingOptions } from '@helia/interface'\nimport type { PeerInfo } from '@libp2p/interface'\nimport type { Version } from 'multiformats'\n\nexport const DEFAULT_TRUSTLESS_GATEWAYS = [\n  // 2023-10-03: IPNS, Origin, and Block/CAR support from https://ipfs.github.io/public-gateway-checker/\n  'https://trustless-gateway.link',\n\n  // 2023-10-03: IPNS, Origin, and Block/CAR support from https://ipfs.github.io/public-gateway-checker/\n  'https://4everland.io'\n]\n\nexport interface HTTPGatewayRouterInit {\n  gateways?: Array<URL | string>\n  /**\n   * Whether to shuffle the list of gateways\n   *\n   * @default true\n   */\n  shuffle?: boolean\n}\n\n// this value is from https://github.com/multiformats/multicodec/blob/master/table.csv\nconst TRANSPORT_IPFS_GATEWAY_HTTP_CODE = 0x0920\n\nfunction toPeerInfo (url: string | URL): PeerInfo {\n  url = url.toString()\n\n  return {\n    id: peerIdFromCID(CID.createV1(TRANSPORT_IPFS_GATEWAY_HTTP_CODE, identity.digest(uint8ArrayFromString(url)))),\n    multiaddrs: [\n      uriToMultiaddr(url)\n    ]\n  }\n}\n\nclass HTTPGatewayRouter implements Partial<Routing> {\n  private readonly gateways: PeerInfo[]\n  private readonly shuffle: boolean\n\n  constructor (init: HTTPGatewayRouterInit = {}) {\n    this.gateways = (init.gateways ?? DEFAULT_TRUSTLESS_GATEWAYS).map(url => toPeerInfo(url))\n    this.shuffle = init.shuffle ?? true\n  }\n\n  async * findProviders (cid: CID<unknown, number, number, Version>, options?: RoutingOptions | undefined): AsyncIterable<Provider> {\n    yield * (this.shuffle\n      ? this.gateways.toSorted(() => Math.random() > 0.5 ? 1 : -1)\n      : this.gateways\n    ).map(info => ({\n      ...info,\n      protocols: ['transport-ipfs-gateway-http']\n    }))\n  }\n}\n\n/**\n * Returns a static list of HTTP Gateways as providers\n */\nexport function httpGatewayRouting (init: HTTPGatewayRouterInit = {}): Partial<Routing> {\n  return new HTTPGatewayRouter(init)\n}\n", "import type { Provider, Routing, RoutingOptions } from '@helia/interface'\nimport type { Libp2p, PeerId, PeerInfo } from '@libp2p/interface'\nimport type { CID } from 'multiformats'\n\nclass Libp2pRouter implements Routing {\n  private readonly libp2p: Libp2p\n\n  constructor (libp2p: Libp2p) {\n    this.libp2p = libp2p\n  }\n\n  async provide (cid: CID, options?: RoutingOptions): Promise<void> {\n    await this.libp2p.contentRouting.provide(cid, options)\n  }\n\n  async cancelReprovide (key: CID, options?: RoutingOptions): Promise<void> {\n    await this.libp2p.contentRouting.cancelReprovide(key, options)\n  }\n\n  async * findProviders (cid: CID, options?: RoutingOptions): AsyncIterable<Provider> {\n    yield * this.libp2p.contentRouting.findProviders(cid, options)\n  }\n\n  async put (key: Uint8Array, value: Uint8Array, options?: RoutingOptions): Promise<void> {\n    await this.libp2p.contentRouting.put(key, value, options)\n  }\n\n  async get (key: Uint8Array, options?: RoutingOptions): Promise<Uint8Array> {\n    return this.libp2p.contentRouting.get(key, options)\n  }\n\n  async findPeer (peerId: PeerId, options?: RoutingOptions): Promise<PeerInfo> {\n    return this.libp2p.peerRouting.findPeer(peerId, options)\n  }\n\n  async * getClosestPeers (key: Uint8Array, options?: RoutingOptions): AsyncIterable<PeerInfo> {\n    yield * this.libp2p.peerRouting.getClosestPeers(key, options)\n  }\n}\n\nexport function libp2pRouting (libp2p: Libp2p): Routing {\n  return new Libp2pRouter(libp2p)\n}\n", "export const empty = new Uint8Array(0)\n\nexport function toHex (d: Uint8Array): string {\n  return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n}\n\nexport function fromHex (hex: string): Uint8Array {\n  const hexes = hex.match(/../g)\n  return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\nexport function equals (aa: Uint8Array, bb: Uint8Array): boolean {\n  if (aa === bb) { return true }\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function coerce (o: ArrayBufferView | ArrayBuffer | Uint8Array): Uint8Array {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') { return o }\n  if (o instanceof ArrayBuffer) { return new Uint8Array(o) }\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\nexport function isBinary (o: unknown): o is ArrayBuffer | ArrayBufferView {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n}\n\nexport function fromString (str: string): Uint8Array {\n  return new TextEncoder().encode(str)\n}\n\nexport function toString (b: Uint8Array): string {\n  return new TextDecoder().decode(b)\n}\n", "/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  /**\n   * @param {any[] | Iterable<number>} source\n   */\n  function encode (source) {\n    // @ts-ignore\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  /**\n   * @param {string | string[]} source\n   */\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  /**\n   * @param {string | string[]} string\n   */\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n", "import { coerce } from '../bytes.js'\nimport basex from '../vendor/base-x.js'\nimport type { BaseCodec, BaseDecoder, BaseEncoder, CombobaseDecoder, Multibase, MultibaseCodec, MultibaseDecoder, MultibaseEncoder, UnibaseDecoder } from './interface.js'\n\ninterface EncodeFn { (bytes: Uint8Array): string }\ninterface DecodeFn { (text: string): Uint8Array }\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder<Base extends string, Prefix extends string> implements MultibaseEncoder<Prefix>, BaseEncoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  encode (bytes: Uint8Array): Multibase<Prefix> {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder<Base extends string, Prefix extends string> implements MultibaseDecoder<Prefix>, UnibaseDecoder<Prefix>, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseDecode: DecodeFn\n  private readonly prefixCodePoint: number\n\n  constructor (name: Base, prefix: Prefix, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    const prefixCodePoint = prefix.codePointAt(0)\n    /* c8 ignore next 3 */\n    if (prefixCodePoint === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    this.prefixCodePoint = prefixCodePoint\n    this.baseDecode = baseDecode\n  }\n\n  decode (text: string): Uint8Array {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  or<OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n}\n\ntype Decoders<Prefix extends string> = Record<Prefix, UnibaseDecoder<Prefix>>\n\nclass ComposedDecoder<Prefix extends string> implements MultibaseDecoder<Prefix>, CombobaseDecoder<Prefix> {\n  readonly decoders: Decoders<Prefix>\n\n  constructor (decoders: Decoders<Prefix>) {\n    this.decoders = decoders\n  }\n\n  or <OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n\n  decode (input: string): Uint8Array {\n    const prefix = input[0] as Prefix\n    const decoder = this.decoders[prefix]\n    if (decoder != null) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\nexport function or <L extends string, R extends string> (left: UnibaseDecoder<L> | CombobaseDecoder<L>, right: UnibaseDecoder<R> | CombobaseDecoder<R>): ComposedDecoder<L | R> {\n  return new ComposedDecoder({\n    ...(left.decoders ?? { [(left as UnibaseDecoder<L>).prefix]: left }),\n    ...(right.decoders ?? { [(right as UnibaseDecoder<R>).prefix]: right })\n  } as Decoders<L | R>)\n}\n\nexport class Codec<Base extends string, Prefix extends string> implements MultibaseCodec<Prefix>, MultibaseEncoder<Prefix>, MultibaseDecoder<Prefix>, BaseCodec, BaseEncoder, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n  readonly baseDecode: DecodeFn\n  readonly encoder: Encoder<Base, Prefix>\n  readonly decoder: Decoder<Base, Prefix>\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  encode (input: Uint8Array): string {\n    return this.encoder.encode(input)\n  }\n\n  decode (input: string): Uint8Array {\n    return this.decoder.decode(input)\n  }\n}\n\nexport function from <Base extends string, Prefix extends string> ({ name, prefix, encode, decode }: { name: Base, prefix: Prefix, encode: EncodeFn, decode: DecodeFn }): Codec<Base, Prefix> {\n  return new Codec(name, prefix, encode, decode)\n}\n\nexport function baseX <Base extends string, Prefix extends string> ({ name, prefix, alphabet }: { name: Base, prefix: Prefix, alphabet: string }): Codec<Base, Prefix> {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: (text: string): Uint8Array => coerce(decode(text))\n  })\n}\n\nfunction decode (string: string, alphabetIdx: Record<string, number>, bitsPerChar: number, name: string): Uint8Array {\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = alphabetIdx[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\nfunction encode (data: Uint8Array, alphabet: string, bitsPerChar: number): string {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits !== 0) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (((out.length * bitsPerChar) & 7) !== 0) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\nfunction createAlphabetIdx (alphabet: string): Record<string, number> {\n  // Build the character lookup table:\n  const alphabetIdx: Record<string, number> = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    alphabetIdx[alphabet[i]] = i\n  }\n  return alphabetIdx\n}\n\n/**\n * RFC4648 Factory\n */\nexport function rfc4648 <Base extends string, Prefix extends string> ({ name, prefix, bitsPerChar, alphabet }: { name: Base, prefix: Prefix, bitsPerChar: number, alphabet: string }): Codec<Base, Prefix> {\n  const alphabetIdx = createAlphabetIdx(alphabet)\n  return from({\n    prefix,\n    name,\n    encode (input: Uint8Array): string {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input: string): Uint8Array {\n      return decode(input, alphabetIdx, bitsPerChar, name)\n    }\n  })\n}\n", "import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n", "/* eslint-disable */\nvar encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  // @ts-ignore\n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      // @ts-ignore\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  // @ts-ignore\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (/** @type {number} */ value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n", "import varint from './vendor/varint.js'\n\nexport function decode (data: Uint8Array, offset = 0): [number, number] {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\nexport function encodeTo (int: number, target: Uint8Array, offset = 0): Uint8Array {\n  varint.encode(int, target, offset)\n  return target\n}\n\nexport function encodingLength (int: number): number {\n  return varint.encodingLength(int)\n}\n", "import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\nimport type { MultihashDigest } from './interface.js'\n\n/**\n * Creates a multihash digest.\n */\nexport function create <Code extends number> (code: Code, digest: Uint8Array): Digest<Code, number> {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode (multihash: Uint8Array): MultihashDigest {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\nexport function equals (a: MultihashDigest, b: unknown): b is MultihashDigest {\n  if (a === b) {\n    return true\n  } else {\n    const data = b as { code?: unknown, size?: unknown, bytes?: unknown }\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest<Code extends number, Size extends number> implements MultihashDigest {\n  readonly code: Code\n  readonly size: Size\n  readonly digest: Uint8Array\n  readonly bytes: Uint8Array\n\n  /**\n   * Creates a multihash digest.\n   */\n  constructor (code: Code, size: Size, digest: Uint8Array, bytes: Uint8Array) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n\n/**\n * Used to check that the passed multihash has the passed code\n */\nexport function hasCode <T extends number> (digest: MultihashDigest, code: T): digest is MultihashDigest<T> {\n  return digest.code === code\n}\n", "import * as Digest from './digest.js'\nimport type { MultihashHasher } from './interface.js'\n\ntype Await<T> = Promise<T> | T\n\nexport function from <Name extends string, Code extends number> ({ name, code, encode }: { name: Name, code: Code, encode(input: Uint8Array): Await<Uint8Array> }): Hasher<Name, Code> {\n  return new Hasher(name, code, encode)\n}\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n */\nexport class Hasher<Name extends string, Code extends number> implements MultihashHasher<Code> {\n  readonly name: Name\n  readonly code: Code\n  readonly encode: (input: Uint8Array) => Await<Uint8Array>\n\n  constructor (name: Name, code: Code, encode: (input: Uint8Array) => Await<Uint8Array>) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  digest (input: Uint8Array): Await<Digest.Digest<Code, number>> {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n", "/* global crypto */\n\nimport { from } from './hasher.js'\n\nfunction sha (name: AlgorithmIdentifier): (data: Uint8Array) => Promise<Uint8Array> {\n  return async data => new Uint8Array(await crypto.subtle.digest(name, data))\n}\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n", "/* eslint max-nested-callbacks: [\"error\", 5] */\n\nimport { pbkdf2, randomBytes } from '@libp2p/crypto'\nimport { privateKeyToProtobuf } from '@libp2p/crypto/keys'\nimport { InvalidParametersError, NotFoundError, serviceCapabilities } from '@libp2p/interface'\nimport { mergeOptions } from '@libp2p/utils/merge-options'\nimport { Key } from 'interface-datastore/key'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport sanitize from 'sanitize-filename'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { exportPrivateKey } from './utils/export.js'\nimport { importPrivateKey } from './utils/import.js'\nimport type { KeychainComponents, KeychainInit, Keychain as KeychainInterface, KeyInfo } from './index.js'\nimport type { Logger, PrivateKey } from '@libp2p/interface'\n\nconst keyPrefix = '/pkcs8/'\nconst infoPrefix = '/info/'\nconst privates = new WeakMap<object, { dek: string }>()\n\n// NIST SP 800-132\nconst NIST = {\n  minKeyLength: 112 / 8,\n  minSaltLength: 128 / 8,\n  minIterationCount: 1000\n}\n\nconst defaultOptions = {\n  // See https://cryptosense.com/parametesr-choice-for-pbkdf2/\n  dek: {\n    keyLength: 512 / 8,\n    iterationCount: 10000,\n    salt: 'you should override this value with a crypto secure random number',\n    hash: 'sha2-512'\n  }\n}\n\nfunction validateKeyName (name: string): boolean {\n  if (name == null) {\n    return false\n  }\n  if (typeof name !== 'string') {\n    return false\n  }\n  return name === sanitize(name.trim()) && name.length > 0\n}\n\n/**\n * Throws an error after a delay\n *\n * This assumes than an error indicates that the keychain is under attack. Delay returning an\n * error to make brute force attacks harder.\n */\nasync function randomDelay (): Promise<void> {\n  const min = 200\n  const max = 1000\n  const delay = Math.random() * (max - min) + min\n\n  await new Promise(resolve => setTimeout(resolve, delay))\n}\n\n/**\n * Converts a key name into a datastore name\n */\nfunction DsName (name: string): Key {\n  return new Key(keyPrefix + name)\n}\n\n/**\n * Converts a key name into a datastore info name\n */\nfunction DsInfoName (name: string): Key {\n  return new Key(infoPrefix + name)\n}\n\nexport async function keyId (key: PrivateKey): Promise<string> {\n  const pb = privateKeyToProtobuf(key)\n  const hash = await sha256.digest(pb)\n\n  return base58btc.encode(hash.bytes).substring(1)\n}\n\n/**\n * Manages the life cycle of a key. Keys are encrypted at rest using PKCS #8.\n *\n * A key in the store has two entries\n * - '/info/*key-name*', contains the KeyInfo for the key\n * - '/pkcs8/*key-name*', contains the PKCS #8 for the key\n *\n */\nexport class Keychain implements KeychainInterface {\n  private readonly components: KeychainComponents\n  private readonly init: KeychainInit\n  private readonly log: Logger\n  private readonly self: string\n\n  /**\n   * Creates a new instance of a key chain\n   */\n  constructor (components: KeychainComponents, init: KeychainInit) {\n    this.components = components\n    this.log = components.logger.forComponent('libp2p:keychain')\n    this.init = mergeOptions(defaultOptions, init)\n    this.self = init.selfKey ?? 'self'\n\n    // Enforce NIST SP 800-132\n    if (this.init.pass != null && this.init.pass?.length < 20) {\n      throw new Error('pass must be least 20 characters')\n    }\n    if (this.init.dek?.keyLength != null && this.init.dek.keyLength < NIST.minKeyLength) {\n      throw new Error(`dek.keyLength must be least ${NIST.minKeyLength} bytes`)\n    }\n    if (this.init.dek?.salt?.length != null && this.init.dek.salt.length < NIST.minSaltLength) {\n      throw new Error(`dek.saltLength must be least ${NIST.minSaltLength} bytes`)\n    }\n    if (this.init.dek?.iterationCount != null && this.init.dek.iterationCount < NIST.minIterationCount) {\n      throw new Error(`dek.iterationCount must be least ${NIST.minIterationCount}`)\n    }\n\n    const dek = this.init.pass != null && this.init.dek?.salt != null\n      ? pbkdf2(\n        this.init.pass,\n        this.init.dek?.salt,\n        this.init.dek?.iterationCount,\n        this.init.dek?.keyLength,\n        this.init.dek?.hash)\n      : ''\n\n    privates.set(this, { dek })\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/keychain'\n\n  readonly [serviceCapabilities]: string[] = [\n    '@libp2p/keychain'\n  ]\n\n  /**\n   * Generates the options for a keychain.  A random salt is produced.\n   *\n   * @returns {object}\n   */\n  static generateOptions (): KeychainInit {\n    const options = Object.assign({}, defaultOptions)\n    const saltLength = Math.ceil(NIST.minSaltLength / 3) * 3 // no base64 padding\n    options.dek.salt = uint8ArrayToString(randomBytes(saltLength), 'base64')\n    return options\n  }\n\n  /**\n   * Gets an object that can encrypt/decrypt protected data.\n   * The default options for a keychain.\n   *\n   * @returns {object}\n   */\n  static get options (): typeof defaultOptions {\n    return defaultOptions\n  }\n\n  async findKeyByName (name: string): Promise<KeyInfo> {\n    if (!validateKeyName(name)) {\n      await randomDelay()\n      throw new InvalidParametersError(`Invalid key name '${name}'`)\n    }\n\n    const datastoreName = DsInfoName(name)\n\n    try {\n      const res = await this.components.datastore.get(datastoreName)\n      return JSON.parse(uint8ArrayToString(res))\n    } catch (err: any) {\n      await randomDelay()\n      this.log.error(err)\n      throw new NotFoundError(`Key '${name}' does not exist.`)\n    }\n  }\n\n  async findKeyById (id: string): Promise<KeyInfo> {\n    try {\n      const query = {\n        prefix: infoPrefix\n      }\n\n      for await (const value of this.components.datastore.query(query)) {\n        const key = JSON.parse(uint8ArrayToString(value.value))\n\n        if (key.id === id) {\n          return key\n        }\n      }\n\n      throw new InvalidParametersError(`Key with id '${id}' does not exist.`)\n    } catch (err: any) {\n      await randomDelay()\n      throw err\n    }\n  }\n\n  async importKey (name: string, key: PrivateKey): Promise<KeyInfo> {\n    if (!validateKeyName(name)) {\n      await randomDelay()\n      throw new InvalidParametersError(`Invalid key name '${name}'`)\n    }\n    if (key == null) {\n      await randomDelay()\n      throw new InvalidParametersError('Key is required')\n    }\n    const datastoreName = DsName(name)\n    const exists = await this.components.datastore.has(datastoreName)\n    if (exists) {\n      await randomDelay()\n      throw new InvalidParametersError(`Key '${name}' already exists`)\n    }\n\n    let kid: string\n    let pem: string\n    try {\n      kid = await keyId(key)\n      const cached = privates.get(this)\n\n      if (cached == null) {\n        throw new InvalidParametersError('dek missing')\n      }\n\n      const dek = cached.dek\n      pem = await exportPrivateKey(key, dek, key.type === 'RSA' ? 'pkcs-8' : 'libp2p-key')\n    } catch (err: any) {\n      await randomDelay()\n      throw err\n    }\n\n    const keyInfo = {\n      name,\n      id: kid\n    }\n    const batch = this.components.datastore.batch()\n    batch.put(datastoreName, uint8ArrayFromString(pem))\n    batch.put(DsInfoName(name), uint8ArrayFromString(JSON.stringify(keyInfo)))\n    await batch.commit()\n\n    return keyInfo\n  }\n\n  async exportKey (name: string): Promise<PrivateKey> {\n    if (!validateKeyName(name)) {\n      await randomDelay()\n      throw new InvalidParametersError(`Invalid key name '${name}'`)\n    }\n\n    const datastoreName = DsName(name)\n    try {\n      const res = await this.components.datastore.get(datastoreName)\n      const pem = uint8ArrayToString(res)\n      const cached = privates.get(this)\n\n      if (cached == null) {\n        throw new InvalidParametersError('dek missing')\n      }\n\n      const dek = cached.dek\n\n      return await importPrivateKey(pem, dek)\n    } catch (err: any) {\n      await randomDelay()\n      throw err\n    }\n  }\n\n  async removeKey (name: string): Promise<KeyInfo> {\n    if (!validateKeyName(name) || name === this.self) {\n      await randomDelay()\n      throw new InvalidParametersError(`Invalid key name '${name}'`)\n    }\n\n    const datastoreName = DsName(name)\n    const keyInfo = await this.findKeyByName(name)\n    const batch = this.components.datastore.batch()\n    batch.delete(datastoreName)\n    batch.delete(DsInfoName(name))\n    await batch.commit()\n\n    return keyInfo\n  }\n\n  /**\n   * List all the keys.\n   *\n   * @returns {Promise<KeyInfo[]>}\n   */\n  async listKeys (): Promise<KeyInfo[]> {\n    const query = {\n      prefix: infoPrefix\n    }\n\n    const info = []\n    for await (const value of this.components.datastore.query(query)) {\n      info.push(JSON.parse(uint8ArrayToString(value.value)))\n    }\n\n    return info\n  }\n\n  /**\n   * Rename a key\n   *\n   * @param {string} oldName - The old local key name; must already exist.\n   * @param {string} newName - The new local key name; must not already exist.\n   * @returns {Promise<KeyInfo>}\n   */\n  async renameKey (oldName: string, newName: string): Promise<KeyInfo> {\n    if (!validateKeyName(oldName) || oldName === this.self) {\n      await randomDelay()\n      throw new InvalidParametersError(`Invalid old key name '${oldName}'`)\n    }\n    if (!validateKeyName(newName) || newName === this.self) {\n      await randomDelay()\n      throw new InvalidParametersError(`Invalid new key name '${newName}'`)\n    }\n    const oldDatastoreName = DsName(oldName)\n    const newDatastoreName = DsName(newName)\n    const oldInfoName = DsInfoName(oldName)\n    const newInfoName = DsInfoName(newName)\n\n    const exists = await this.components.datastore.has(newDatastoreName)\n    if (exists) {\n      await randomDelay()\n      throw new InvalidParametersError(`Key '${newName}' already exists`)\n    }\n\n    try {\n      const pem = await this.components.datastore.get(oldDatastoreName)\n      const res = await this.components.datastore.get(oldInfoName)\n\n      const keyInfo = JSON.parse(uint8ArrayToString(res))\n      keyInfo.name = newName\n      const batch = this.components.datastore.batch()\n      batch.put(newDatastoreName, pem)\n      batch.put(newInfoName, uint8ArrayFromString(JSON.stringify(keyInfo)))\n      batch.delete(oldDatastoreName)\n      batch.delete(oldInfoName)\n      await batch.commit()\n      return keyInfo\n    } catch (err: any) {\n      await randomDelay()\n      throw err\n    }\n  }\n\n  /**\n   * Rotate keychain password and re-encrypt all associated keys\n   */\n  async rotateKeychainPass (oldPass: string, newPass: string): Promise<void> {\n    if (typeof oldPass !== 'string') {\n      await randomDelay()\n      throw new InvalidParametersError(`Invalid old pass type '${typeof oldPass}'`)\n    }\n    if (typeof newPass !== 'string') {\n      await randomDelay()\n      throw new InvalidParametersError(`Invalid new pass type '${typeof newPass}'`)\n    }\n    if (newPass.length < 20) {\n      await randomDelay()\n      throw new InvalidParametersError(`Invalid pass length ${newPass.length}`)\n    }\n    this.log('recreating keychain')\n    const cached = privates.get(this)\n\n    if (cached == null) {\n      throw new InvalidParametersError('dek missing')\n    }\n\n    const oldDek = cached.dek\n    this.init.pass = newPass\n    const newDek = newPass != null && this.init.dek?.salt != null\n      ? pbkdf2(\n        newPass,\n        this.init.dek.salt,\n        this.init.dek?.iterationCount,\n        this.init.dek?.keyLength,\n        this.init.dek?.hash)\n      : ''\n    privates.set(this, { dek: newDek })\n    const keys = await this.listKeys()\n    for (const key of keys) {\n      const res = await this.components.datastore.get(DsName(key.name))\n      const pem = uint8ArrayToString(res)\n      const privateKey = await importPrivateKey(pem, oldDek)\n      const password = newDek.toString()\n      const keyAsPEM = await exportPrivateKey(privateKey, password, privateKey.type === 'RSA' ? 'pkcs-8' : 'libp2p-key')\n\n      // Update stored key\n      const batch = this.components.datastore.batch()\n      const keyInfo = {\n        name: key.name,\n        id: key.id\n      }\n      batch.put(DsName(key.name), uint8ArrayFromString(keyAsPEM))\n      batch.put(DsInfoName(key.name), uint8ArrayFromString(JSON.stringify(keyInfo)))\n      await batch.commit()\n    }\n    this.log('keychain reconstructed')\n  }\n}\n", "import { concat } from 'uint8arrays/concat'\nimport { fromString } from 'uint8arrays/from-string'\nimport webcrypto from '../webcrypto/index.js'\nimport type { CreateAESCipherOptions, AESCipher } from './interface.js'\n\n// WebKit on Linux does not support deriving a key from an empty PBKDF2 key.\n// So, as a workaround, we provide the generated key as a constant. We test that\n// this generated key is accurate in test/workaround.spec.ts\n// Generated via:\n// await crypto.subtle.exportKey('jwk',\n//   await crypto.subtle.deriveKey(\n//     { name: 'PBKDF2', salt: new Uint8Array(16), iterations: 32767, hash: { name: 'SHA-256' } },\n//     await crypto.subtle.importKey('raw', new Uint8Array(0), { name: 'PBKDF2' }, false, ['deriveKey']),\n//     { name: 'AES-GCM', length: 128 }, true, ['encrypt', 'decrypt'])\n// )\nexport const derivedEmptyPasswordKey = {\n  alg: 'A128GCM',\n  ext: true,\n  /* spell-checker:disable-next-line */\n  k: 'scm9jmO_4BJAgdwWGVulLg',\n  key_ops: ['encrypt', 'decrypt'],\n  kty: 'oct'\n}\n\n// Based off of code from https://github.com/luke-park/SecureCompatibleEncryptionExamples\n\nexport function create (opts?: CreateAESCipherOptions): AESCipher {\n  const algorithm = opts?.algorithm ?? 'AES-GCM'\n  let keyLength = opts?.keyLength ?? 16\n  const nonceLength = opts?.nonceLength ?? 12\n  const digest = opts?.digest ?? 'SHA-256'\n  const saltLength = opts?.saltLength ?? 16\n  const iterations = opts?.iterations ?? 32767\n\n  const crypto = webcrypto.get()\n  keyLength *= 8 // Browser crypto uses bits instead of bytes\n\n  /**\n   * Uses the provided password to derive a pbkdf2 key. The key\n   * will then be used to encrypt the data.\n   */\n  async function encrypt (data: Uint8Array, password: string | Uint8Array): Promise<Uint8Array> {\n    const salt = crypto.getRandomValues(new Uint8Array(saltLength))\n    const nonce = crypto.getRandomValues(new Uint8Array(nonceLength))\n    const aesGcm = { name: algorithm, iv: nonce }\n\n    if (typeof password === 'string') {\n      password = fromString(password)\n    }\n\n    let cryptoKey: CryptoKey\n    if (password.length === 0) {\n      cryptoKey = await crypto.subtle.importKey('jwk', derivedEmptyPasswordKey, { name: 'AES-GCM' }, true, ['encrypt'])\n      try {\n        const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } }\n        const runtimeDerivedEmptyPassword = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey'])\n        cryptoKey = await crypto.subtle.deriveKey(deriveParams, runtimeDerivedEmptyPassword, { name: algorithm, length: keyLength }, true, ['encrypt'])\n      } catch {\n        cryptoKey = await crypto.subtle.importKey('jwk', derivedEmptyPasswordKey, { name: 'AES-GCM' }, true, ['encrypt'])\n      }\n    } else {\n      // Derive a key using PBKDF2.\n      const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } }\n      const rawKey = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey'])\n      cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, { name: algorithm, length: keyLength }, true, ['encrypt'])\n    }\n\n    // Encrypt the string.\n    const ciphertext = await crypto.subtle.encrypt(aesGcm, cryptoKey, data)\n    return concat([salt, aesGcm.iv, new Uint8Array(ciphertext)])\n  }\n\n  /**\n   * Uses the provided password to derive a pbkdf2 key. The key\n   * will then be used to decrypt the data. The options used to create\n   * this decryption cipher must be the same as those used to create\n   * the encryption cipher.\n   */\n  async function decrypt (data: Uint8Array, password: string | Uint8Array): Promise<Uint8Array> {\n    const salt = data.subarray(0, saltLength)\n    const nonce = data.subarray(saltLength, saltLength + nonceLength)\n    const ciphertext = data.subarray(saltLength + nonceLength)\n    const aesGcm = { name: algorithm, iv: nonce }\n\n    if (typeof password === 'string') {\n      password = fromString(password)\n    }\n\n    let cryptoKey: CryptoKey\n    if (password.length === 0) {\n      try {\n        const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } }\n        const runtimeDerivedEmptyPassword = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey'])\n        cryptoKey = await crypto.subtle.deriveKey(deriveParams, runtimeDerivedEmptyPassword, { name: algorithm, length: keyLength }, true, ['decrypt'])\n      } catch {\n        cryptoKey = await crypto.subtle.importKey('jwk', derivedEmptyPasswordKey, { name: 'AES-GCM' }, true, ['decrypt'])\n      }\n    } else {\n      // Derive the key using PBKDF2.\n      const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } }\n      const rawKey = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey'])\n      cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, { name: algorithm, length: keyLength }, true, ['decrypt'])\n    }\n\n    // Decrypt the string.\n    const plaintext = await crypto.subtle.decrypt(aesGcm, cryptoKey, ciphertext)\n    return new Uint8Array(plaintext)\n  }\n\n  const cipher: AESCipher = {\n    encrypt,\n    decrypt\n  }\n\n  return cipher\n}\n", "/*!\n * Copyright (c) 2014, GMO GlobalSign\n * Copyright (c) 2015-2022, Peculiar Ventures\n * All rights reserved.\n * \n * Author 2014-2019, Yury Strozhevsky\n * \n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * \n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n * \n * * Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n * \n * * Neither the name of the copyright holder nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n * \n */\n\nimport * as pvtsutils from 'pvtsutils';\nimport * as pvutils from 'pvutils';\n\nfunction assertBigInt() {\n    if (typeof BigInt === \"undefined\") {\n        throw new Error(\"BigInt is not defined. Your environment doesn't implement BigInt.\");\n    }\n}\nfunction concat(buffers) {\n    let outputLength = 0;\n    let prevLength = 0;\n    for (let i = 0; i < buffers.length; i++) {\n        const buffer = buffers[i];\n        outputLength += buffer.byteLength;\n    }\n    const retView = new Uint8Array(outputLength);\n    for (let i = 0; i < buffers.length; i++) {\n        const buffer = buffers[i];\n        retView.set(new Uint8Array(buffer), prevLength);\n        prevLength += buffer.byteLength;\n    }\n    return retView.buffer;\n}\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\n    if (!(inputBuffer instanceof Uint8Array)) {\n        baseBlock.error = \"Wrong parameter: inputBuffer must be 'Uint8Array'\";\n        return false;\n    }\n    if (!inputBuffer.byteLength) {\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\n        return false;\n    }\n    if (inputOffset < 0) {\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\n        return false;\n    }\n    if (inputLength < 0) {\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\n        return false;\n    }\n    if ((inputBuffer.byteLength - inputOffset - inputLength) < 0) {\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\n        return false;\n    }\n    return true;\n}\n\nclass ViewWriter {\n    constructor() {\n        this.items = [];\n    }\n    write(buf) {\n        this.items.push(buf);\n    }\n    final() {\n        return concat(this.items);\n    }\n}\n\nconst powers2 = [new Uint8Array([1])];\nconst digitsString = \"0123456789\";\nconst NAME = \"name\";\nconst VALUE_HEX_VIEW = \"valueHexView\";\nconst IS_HEX_ONLY = \"isHexOnly\";\nconst ID_BLOCK = \"idBlock\";\nconst TAG_CLASS = \"tagClass\";\nconst TAG_NUMBER = \"tagNumber\";\nconst IS_CONSTRUCTED = \"isConstructed\";\nconst FROM_BER = \"fromBER\";\nconst TO_BER = \"toBER\";\nconst LOCAL = \"local\";\nconst EMPTY_STRING = \"\";\nconst EMPTY_BUFFER = new ArrayBuffer(0);\nconst EMPTY_VIEW = new Uint8Array(0);\nconst END_OF_CONTENT_NAME = \"EndOfContent\";\nconst OCTET_STRING_NAME = \"OCTET STRING\";\nconst BIT_STRING_NAME = \"BIT STRING\";\n\nfunction HexBlock(BaseClass) {\n    var _a;\n    return _a = class Some extends BaseClass {\n            get valueHex() {\n                return this.valueHexView.slice().buffer;\n            }\n            set valueHex(value) {\n                this.valueHexView = new Uint8Array(value);\n            }\n            constructor(...args) {\n                var _b;\n                super(...args);\n                const params = args[0] || {};\n                this.isHexOnly = (_b = params.isHexOnly) !== null && _b !== void 0 ? _b : false;\n                this.valueHexView = params.valueHex ? pvtsutils.BufferSourceConverter.toUint8Array(params.valueHex) : EMPTY_VIEW;\n            }\n            fromBER(inputBuffer, inputOffset, inputLength) {\n                const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\n                if (!checkBufferParams(this, view, inputOffset, inputLength)) {\n                    return -1;\n                }\n                const endLength = inputOffset + inputLength;\n                this.valueHexView = view.subarray(inputOffset, endLength);\n                if (!this.valueHexView.length) {\n                    this.warnings.push(\"Zero buffer length\");\n                    return inputOffset;\n                }\n                this.blockLength = inputLength;\n                return endLength;\n            }\n            toBER(sizeOnly = false) {\n                if (!this.isHexOnly) {\n                    this.error = \"Flag 'isHexOnly' is not set, abort\";\n                    return EMPTY_BUFFER;\n                }\n                if (sizeOnly) {\n                    return new ArrayBuffer(this.valueHexView.byteLength);\n                }\n                return (this.valueHexView.byteLength === this.valueHexView.buffer.byteLength)\n                    ? this.valueHexView.buffer\n                    : this.valueHexView.slice().buffer;\n            }\n            toJSON() {\n                return {\n                    ...super.toJSON(),\n                    isHexOnly: this.isHexOnly,\n                    valueHex: pvtsutils.Convert.ToHex(this.valueHexView),\n                };\n            }\n        },\n        _a.NAME = \"hexBlock\",\n        _a;\n}\n\nclass LocalBaseBlock {\n    static blockName() {\n        return this.NAME;\n    }\n    get valueBeforeDecode() {\n        return this.valueBeforeDecodeView.slice().buffer;\n    }\n    set valueBeforeDecode(value) {\n        this.valueBeforeDecodeView = new Uint8Array(value);\n    }\n    constructor({ blockLength = 0, error = EMPTY_STRING, warnings = [], valueBeforeDecode = EMPTY_VIEW, } = {}) {\n        this.blockLength = blockLength;\n        this.error = error;\n        this.warnings = warnings;\n        this.valueBeforeDecodeView = pvtsutils.BufferSourceConverter.toUint8Array(valueBeforeDecode);\n    }\n    toJSON() {\n        return {\n            blockName: this.constructor.NAME,\n            blockLength: this.blockLength,\n            error: this.error,\n            warnings: this.warnings,\n            valueBeforeDecode: pvtsutils.Convert.ToHex(this.valueBeforeDecodeView),\n        };\n    }\n}\nLocalBaseBlock.NAME = \"baseBlock\";\n\nclass ValueBlock extends LocalBaseBlock {\n    fromBER(_inputBuffer, _inputOffset, _inputLength) {\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\n    }\n    toBER(_sizeOnly, _writer) {\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\n    }\n}\nValueBlock.NAME = \"valueBlock\";\n\nclass LocalIdentificationBlock extends HexBlock(LocalBaseBlock) {\n    constructor({ idBlock = {} } = {}) {\n        var _a, _b, _c, _d;\n        super();\n        if (idBlock) {\n            this.isHexOnly = (_a = idBlock.isHexOnly) !== null && _a !== void 0 ? _a : false;\n            this.valueHexView = idBlock.valueHex\n                ? pvtsutils.BufferSourceConverter.toUint8Array(idBlock.valueHex)\n                : EMPTY_VIEW;\n            this.tagClass = (_b = idBlock.tagClass) !== null && _b !== void 0 ? _b : -1;\n            this.tagNumber = (_c = idBlock.tagNumber) !== null && _c !== void 0 ? _c : -1;\n            this.isConstructed = (_d = idBlock.isConstructed) !== null && _d !== void 0 ? _d : false;\n        }\n        else {\n            this.tagClass = -1;\n            this.tagNumber = -1;\n            this.isConstructed = false;\n        }\n    }\n    toBER(sizeOnly = false) {\n        let firstOctet = 0;\n        switch (this.tagClass) {\n            case 1:\n                firstOctet |= 0x00;\n                break;\n            case 2:\n                firstOctet |= 0x40;\n                break;\n            case 3:\n                firstOctet |= 0x80;\n                break;\n            case 4:\n                firstOctet |= 0xC0;\n                break;\n            default:\n                this.error = \"Unknown tag class\";\n                return EMPTY_BUFFER;\n        }\n        if (this.isConstructed)\n            firstOctet |= 0x20;\n        if (this.tagNumber < 31 && !this.isHexOnly) {\n            const retView = new Uint8Array(1);\n            if (!sizeOnly) {\n                let number = this.tagNumber;\n                number &= 0x1F;\n                firstOctet |= number;\n                retView[0] = firstOctet;\n            }\n            return retView.buffer;\n        }\n        if (!this.isHexOnly) {\n            const encodedBuf = pvutils.utilToBase(this.tagNumber, 7);\n            const encodedView = new Uint8Array(encodedBuf);\n            const size = encodedBuf.byteLength;\n            const retView = new Uint8Array(size + 1);\n            retView[0] = (firstOctet | 0x1F);\n            if (!sizeOnly) {\n                for (let i = 0; i < (size - 1); i++)\n                    retView[i + 1] = encodedView[i] | 0x80;\n                retView[size] = encodedView[size - 1];\n            }\n            return retView.buffer;\n        }\n        const retView = new Uint8Array(this.valueHexView.byteLength + 1);\n        retView[0] = (firstOctet | 0x1F);\n        if (!sizeOnly) {\n            const curView = this.valueHexView;\n            for (let i = 0; i < (curView.length - 1); i++)\n                retView[i + 1] = curView[i] | 0x80;\n            retView[this.valueHexView.byteLength] = curView[curView.length - 1];\n        }\n        return retView.buffer;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        if (intBuffer.length === 0) {\n            this.error = \"Zero buffer length\";\n            return -1;\n        }\n        const tagClassMask = intBuffer[0] & 0xC0;\n        switch (tagClassMask) {\n            case 0x00:\n                this.tagClass = (1);\n                break;\n            case 0x40:\n                this.tagClass = (2);\n                break;\n            case 0x80:\n                this.tagClass = (3);\n                break;\n            case 0xC0:\n                this.tagClass = (4);\n                break;\n            default:\n                this.error = \"Unknown tag class\";\n                return -1;\n        }\n        this.isConstructed = (intBuffer[0] & 0x20) === 0x20;\n        this.isHexOnly = false;\n        const tagNumberMask = intBuffer[0] & 0x1F;\n        if (tagNumberMask !== 0x1F) {\n            this.tagNumber = (tagNumberMask);\n            this.blockLength = 1;\n        }\n        else {\n            let count = 1;\n            let intTagNumberBuffer = this.valueHexView = new Uint8Array(255);\n            let tagNumberBufferMaxLength = 255;\n            while (intBuffer[count] & 0x80) {\n                intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\n                count++;\n                if (count >= intBuffer.length) {\n                    this.error = \"End of input reached before message was fully decoded\";\n                    return -1;\n                }\n                if (count === tagNumberBufferMaxLength) {\n                    tagNumberBufferMaxLength += 255;\n                    const tempBufferView = new Uint8Array(tagNumberBufferMaxLength);\n                    for (let i = 0; i < intTagNumberBuffer.length; i++)\n                        tempBufferView[i] = intTagNumberBuffer[i];\n                    intTagNumberBuffer = this.valueHexView = new Uint8Array(tagNumberBufferMaxLength);\n                }\n            }\n            this.blockLength = (count + 1);\n            intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\n            const tempBufferView = new Uint8Array(count);\n            for (let i = 0; i < count; i++)\n                tempBufferView[i] = intTagNumberBuffer[i];\n            intTagNumberBuffer = this.valueHexView = new Uint8Array(count);\n            intTagNumberBuffer.set(tempBufferView);\n            if (this.blockLength <= 9)\n                this.tagNumber = pvutils.utilFromBase(intTagNumberBuffer, 7);\n            else {\n                this.isHexOnly = true;\n                this.warnings.push(\"Tag too long, represented as hex-coded\");\n            }\n        }\n        if (((this.tagClass === 1))\n            && (this.isConstructed)) {\n            switch (this.tagNumber) {\n                case 1:\n                case 2:\n                case 5:\n                case 6:\n                case 9:\n                case 13:\n                case 14:\n                case 23:\n                case 24:\n                case 31:\n                case 32:\n                case 33:\n                case 34:\n                    this.error = \"Constructed encoding used for primitive type\";\n                    return -1;\n            }\n        }\n        return (inputOffset + this.blockLength);\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            tagClass: this.tagClass,\n            tagNumber: this.tagNumber,\n            isConstructed: this.isConstructed,\n        };\n    }\n}\nLocalIdentificationBlock.NAME = \"identificationBlock\";\n\nclass LocalLengthBlock extends LocalBaseBlock {\n    constructor({ lenBlock = {} } = {}) {\n        var _a, _b, _c;\n        super();\n        this.isIndefiniteForm = (_a = lenBlock.isIndefiniteForm) !== null && _a !== void 0 ? _a : false;\n        this.longFormUsed = (_b = lenBlock.longFormUsed) !== null && _b !== void 0 ? _b : false;\n        this.length = (_c = lenBlock.length) !== null && _c !== void 0 ? _c : 0;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const view = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = view.subarray(inputOffset, inputOffset + inputLength);\n        if (intBuffer.length === 0) {\n            this.error = \"Zero buffer length\";\n            return -1;\n        }\n        if (intBuffer[0] === 0xFF) {\n            this.error = \"Length block 0xFF is reserved by standard\";\n            return -1;\n        }\n        this.isIndefiniteForm = intBuffer[0] === 0x80;\n        if (this.isIndefiniteForm) {\n            this.blockLength = 1;\n            return (inputOffset + this.blockLength);\n        }\n        this.longFormUsed = !!(intBuffer[0] & 0x80);\n        if (this.longFormUsed === false) {\n            this.length = (intBuffer[0]);\n            this.blockLength = 1;\n            return (inputOffset + this.blockLength);\n        }\n        const count = intBuffer[0] & 0x7F;\n        if (count > 8) {\n            this.error = \"Too big integer\";\n            return -1;\n        }\n        if ((count + 1) > intBuffer.length) {\n            this.error = \"End of input reached before message was fully decoded\";\n            return -1;\n        }\n        const lenOffset = inputOffset + 1;\n        const lengthBufferView = view.subarray(lenOffset, lenOffset + count);\n        if (lengthBufferView[count - 1] === 0x00)\n            this.warnings.push(\"Needlessly long encoded length\");\n        this.length = pvutils.utilFromBase(lengthBufferView, 8);\n        if (this.longFormUsed && (this.length <= 127))\n            this.warnings.push(\"Unnecessary usage of long length form\");\n        this.blockLength = count + 1;\n        return (inputOffset + this.blockLength);\n    }\n    toBER(sizeOnly = false) {\n        let retBuf;\n        let retView;\n        if (this.length > 127)\n            this.longFormUsed = true;\n        if (this.isIndefiniteForm) {\n            retBuf = new ArrayBuffer(1);\n            if (sizeOnly === false) {\n                retView = new Uint8Array(retBuf);\n                retView[0] = 0x80;\n            }\n            return retBuf;\n        }\n        if (this.longFormUsed) {\n            const encodedBuf = pvutils.utilToBase(this.length, 8);\n            if (encodedBuf.byteLength > 127) {\n                this.error = \"Too big length\";\n                return (EMPTY_BUFFER);\n            }\n            retBuf = new ArrayBuffer(encodedBuf.byteLength + 1);\n            if (sizeOnly)\n                return retBuf;\n            const encodedView = new Uint8Array(encodedBuf);\n            retView = new Uint8Array(retBuf);\n            retView[0] = encodedBuf.byteLength | 0x80;\n            for (let i = 0; i < encodedBuf.byteLength; i++)\n                retView[i + 1] = encodedView[i];\n            return retBuf;\n        }\n        retBuf = new ArrayBuffer(1);\n        if (sizeOnly === false) {\n            retView = new Uint8Array(retBuf);\n            retView[0] = this.length;\n        }\n        return retBuf;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            isIndefiniteForm: this.isIndefiniteForm,\n            longFormUsed: this.longFormUsed,\n            length: this.length,\n        };\n    }\n}\nLocalLengthBlock.NAME = \"lengthBlock\";\n\nconst typeStore = {};\n\nclass BaseBlock extends LocalBaseBlock {\n    constructor({ name = EMPTY_STRING, optional = false, primitiveSchema, ...parameters } = {}, valueBlockType) {\n        super(parameters);\n        this.name = name;\n        this.optional = optional;\n        if (primitiveSchema) {\n            this.primitiveSchema = primitiveSchema;\n        }\n        this.idBlock = new LocalIdentificationBlock(parameters);\n        this.lenBlock = new LocalLengthBlock(parameters);\n        this.valueBlock = valueBlockType ? new valueBlockType(parameters) : new ValueBlock(parameters);\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm)\n            ? inputLength\n            : this.lenBlock.length);\n        if (resultOffset === -1) {\n            this.error = this.valueBlock.error;\n            return resultOffset;\n        }\n        if (!this.idBlock.error.length)\n            this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length)\n            this.blockLength += this.lenBlock.blockLength;\n        if (!this.valueBlock.error.length)\n            this.blockLength += this.valueBlock.blockLength;\n        return resultOffset;\n    }\n    toBER(sizeOnly, writer) {\n        const _writer = writer || new ViewWriter();\n        if (!writer) {\n            prepareIndefiniteForm(this);\n        }\n        const idBlockBuf = this.idBlock.toBER(sizeOnly);\n        _writer.write(idBlockBuf);\n        if (this.lenBlock.isIndefiniteForm) {\n            _writer.write(new Uint8Array([0x80]).buffer);\n            this.valueBlock.toBER(sizeOnly, _writer);\n            _writer.write(new ArrayBuffer(2));\n        }\n        else {\n            const valueBlockBuf = this.valueBlock.toBER(sizeOnly);\n            this.lenBlock.length = valueBlockBuf.byteLength;\n            const lenBlockBuf = this.lenBlock.toBER(sizeOnly);\n            _writer.write(lenBlockBuf);\n            _writer.write(valueBlockBuf);\n        }\n        if (!writer) {\n            return _writer.final();\n        }\n        return EMPTY_BUFFER;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            idBlock: this.idBlock.toJSON(),\n            lenBlock: this.lenBlock.toJSON(),\n            valueBlock: this.valueBlock.toJSON(),\n            name: this.name,\n            optional: this.optional,\n        };\n        if (this.primitiveSchema)\n            object.primitiveSchema = this.primitiveSchema.toJSON();\n        return object;\n    }\n    toString(encoding = \"ascii\") {\n        if (encoding === \"ascii\") {\n            return this.onAsciiEncoding();\n        }\n        return pvtsutils.Convert.ToHex(this.toBER());\n    }\n    onAsciiEncoding() {\n        const name = this.constructor.NAME;\n        const value = pvtsutils.Convert.ToHex(this.valueBlock.valueBeforeDecodeView);\n        return `${name} : ${value}`;\n    }\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof this.constructor)) {\n            return false;\n        }\n        const thisRaw = this.toBER();\n        const otherRaw = other.toBER();\n        return pvutils.isEqualBuffer(thisRaw, otherRaw);\n    }\n}\nBaseBlock.NAME = \"BaseBlock\";\nfunction prepareIndefiniteForm(baseBlock) {\n    var _a;\n    if (baseBlock instanceof typeStore.Constructed) {\n        for (const value of baseBlock.valueBlock.value) {\n            if (prepareIndefiniteForm(value)) {\n                baseBlock.lenBlock.isIndefiniteForm = true;\n            }\n        }\n    }\n    return !!((_a = baseBlock.lenBlock) === null || _a === void 0 ? void 0 : _a.isIndefiniteForm);\n}\n\nclass BaseStringBlock extends BaseBlock {\n    getValue() {\n        return this.valueBlock.value;\n    }\n    setValue(value) {\n        this.valueBlock.value = value;\n    }\n    constructor({ value = EMPTY_STRING, ...parameters } = {}, stringValueBlockType) {\n        super(parameters, stringValueBlockType);\n        if (value) {\n            this.fromString(value);\n        }\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm)\n            ? inputLength\n            : this.lenBlock.length);\n        if (resultOffset === -1) {\n            this.error = this.valueBlock.error;\n            return resultOffset;\n        }\n        this.fromBuffer(this.valueBlock.valueHexView);\n        if (!this.idBlock.error.length)\n            this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length)\n            this.blockLength += this.lenBlock.blockLength;\n        if (!this.valueBlock.error.length)\n            this.blockLength += this.valueBlock.blockLength;\n        return resultOffset;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : '${this.valueBlock.value}'`;\n    }\n}\nBaseStringBlock.NAME = \"BaseStringBlock\";\n\nclass LocalPrimitiveValueBlock extends HexBlock(ValueBlock) {\n    constructor({ isHexOnly = true, ...parameters } = {}) {\n        super(parameters);\n        this.isHexOnly = isHexOnly;\n    }\n}\nLocalPrimitiveValueBlock.NAME = \"PrimitiveValueBlock\";\n\nvar _a$w;\nclass Primitive extends BaseBlock {\n    constructor(parameters = {}) {\n        super(parameters, LocalPrimitiveValueBlock);\n        this.idBlock.isConstructed = false;\n    }\n}\n_a$w = Primitive;\n(() => {\n    typeStore.Primitive = _a$w;\n})();\nPrimitive.NAME = \"PRIMITIVE\";\n\nfunction localChangeType(inputObject, newType) {\n    if (inputObject instanceof newType) {\n        return inputObject;\n    }\n    const newObject = new newType();\n    newObject.idBlock = inputObject.idBlock;\n    newObject.lenBlock = inputObject.lenBlock;\n    newObject.warnings = inputObject.warnings;\n    newObject.valueBeforeDecodeView = inputObject.valueBeforeDecodeView;\n    return newObject;\n}\nfunction localFromBER(inputBuffer, inputOffset = 0, inputLength = inputBuffer.length) {\n    const incomingOffset = inputOffset;\n    let returnObject = new BaseBlock({}, ValueBlock);\n    const baseBlock = new LocalBaseBlock();\n    if (!checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength)) {\n        returnObject.error = baseBlock.error;\n        return {\n            offset: -1,\n            result: returnObject,\n        };\n    }\n    const intBuffer = inputBuffer.subarray(inputOffset, inputOffset + inputLength);\n    if (!intBuffer.length) {\n        returnObject.error = \"Zero buffer length\";\n        return {\n            offset: -1,\n            result: returnObject,\n        };\n    }\n    let resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);\n    if (returnObject.idBlock.warnings.length) {\n        returnObject.warnings.concat(returnObject.idBlock.warnings);\n    }\n    if (resultOffset === -1) {\n        returnObject.error = returnObject.idBlock.error;\n        return {\n            offset: -1,\n            result: returnObject,\n        };\n    }\n    inputOffset = resultOffset;\n    inputLength -= returnObject.idBlock.blockLength;\n    resultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);\n    if (returnObject.lenBlock.warnings.length) {\n        returnObject.warnings.concat(returnObject.lenBlock.warnings);\n    }\n    if (resultOffset === -1) {\n        returnObject.error = returnObject.lenBlock.error;\n        return {\n            offset: -1,\n            result: returnObject,\n        };\n    }\n    inputOffset = resultOffset;\n    inputLength -= returnObject.lenBlock.blockLength;\n    if (!returnObject.idBlock.isConstructed\n        && returnObject.lenBlock.isIndefiniteForm) {\n        returnObject.error = \"Indefinite length form used for primitive encoding form\";\n        return {\n            offset: -1,\n            result: returnObject,\n        };\n    }\n    let newASN1Type = BaseBlock;\n    switch (returnObject.idBlock.tagClass) {\n        case 1:\n            if ((returnObject.idBlock.tagNumber >= 37)\n                && (returnObject.idBlock.isHexOnly === false)) {\n                returnObject.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\n                return {\n                    offset: -1,\n                    result: returnObject,\n                };\n            }\n            switch (returnObject.idBlock.tagNumber) {\n                case 0:\n                    if ((returnObject.idBlock.isConstructed)\n                        && (returnObject.lenBlock.length > 0)) {\n                        returnObject.error = \"Type [UNIVERSAL 0] is reserved\";\n                        return {\n                            offset: -1,\n                            result: returnObject,\n                        };\n                    }\n                    newASN1Type = typeStore.EndOfContent;\n                    break;\n                case 1:\n                    newASN1Type = typeStore.Boolean;\n                    break;\n                case 2:\n                    newASN1Type = typeStore.Integer;\n                    break;\n                case 3:\n                    newASN1Type = typeStore.BitString;\n                    break;\n                case 4:\n                    newASN1Type = typeStore.OctetString;\n                    break;\n                case 5:\n                    newASN1Type = typeStore.Null;\n                    break;\n                case 6:\n                    newASN1Type = typeStore.ObjectIdentifier;\n                    break;\n                case 10:\n                    newASN1Type = typeStore.Enumerated;\n                    break;\n                case 12:\n                    newASN1Type = typeStore.Utf8String;\n                    break;\n                case 13:\n                    newASN1Type = typeStore.RelativeObjectIdentifier;\n                    break;\n                case 14:\n                    newASN1Type = typeStore.TIME;\n                    break;\n                case 15:\n                    returnObject.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\n                    return {\n                        offset: -1,\n                        result: returnObject,\n                    };\n                case 16:\n                    newASN1Type = typeStore.Sequence;\n                    break;\n                case 17:\n                    newASN1Type = typeStore.Set;\n                    break;\n                case 18:\n                    newASN1Type = typeStore.NumericString;\n                    break;\n                case 19:\n                    newASN1Type = typeStore.PrintableString;\n                    break;\n                case 20:\n                    newASN1Type = typeStore.TeletexString;\n                    break;\n                case 21:\n                    newASN1Type = typeStore.VideotexString;\n                    break;\n                case 22:\n                    newASN1Type = typeStore.IA5String;\n                    break;\n                case 23:\n                    newASN1Type = typeStore.UTCTime;\n                    break;\n                case 24:\n                    newASN1Type = typeStore.GeneralizedTime;\n                    break;\n                case 25:\n                    newASN1Type = typeStore.GraphicString;\n                    break;\n                case 26:\n                    newASN1Type = typeStore.VisibleString;\n                    break;\n                case 27:\n                    newASN1Type = typeStore.GeneralString;\n                    break;\n                case 28:\n                    newASN1Type = typeStore.UniversalString;\n                    break;\n                case 29:\n                    newASN1Type = typeStore.CharacterString;\n                    break;\n                case 30:\n                    newASN1Type = typeStore.BmpString;\n                    break;\n                case 31:\n                    newASN1Type = typeStore.DATE;\n                    break;\n                case 32:\n                    newASN1Type = typeStore.TimeOfDay;\n                    break;\n                case 33:\n                    newASN1Type = typeStore.DateTime;\n                    break;\n                case 34:\n                    newASN1Type = typeStore.Duration;\n                    break;\n                default: {\n                    const newObject = returnObject.idBlock.isConstructed\n                        ? new typeStore.Constructed()\n                        : new typeStore.Primitive();\n                    newObject.idBlock = returnObject.idBlock;\n                    newObject.lenBlock = returnObject.lenBlock;\n                    newObject.warnings = returnObject.warnings;\n                    returnObject = newObject;\n                }\n            }\n            break;\n        case 2:\n        case 3:\n        case 4:\n        default: {\n            newASN1Type = returnObject.idBlock.isConstructed\n                ? typeStore.Constructed\n                : typeStore.Primitive;\n        }\n    }\n    returnObject = localChangeType(returnObject, newASN1Type);\n    resultOffset = returnObject.fromBER(inputBuffer, inputOffset, returnObject.lenBlock.isIndefiniteForm ? inputLength : returnObject.lenBlock.length);\n    returnObject.valueBeforeDecodeView = inputBuffer.subarray(incomingOffset, incomingOffset + returnObject.blockLength);\n    return {\n        offset: resultOffset,\n        result: returnObject,\n    };\n}\nfunction fromBER(inputBuffer) {\n    if (!inputBuffer.byteLength) {\n        const result = new BaseBlock({}, ValueBlock);\n        result.error = \"Input buffer has zero length\";\n        return {\n            offset: -1,\n            result,\n        };\n    }\n    return localFromBER(pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer).slice(), 0, inputBuffer.byteLength);\n}\n\nfunction checkLen(indefiniteLength, length) {\n    if (indefiniteLength) {\n        return 1;\n    }\n    return length;\n}\nclass LocalConstructedValueBlock extends ValueBlock {\n    constructor({ value = [], isIndefiniteForm = false, ...parameters } = {}) {\n        super(parameters);\n        this.value = value;\n        this.isIndefiniteForm = isIndefiniteForm;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const view = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\n            return -1;\n        }\n        this.valueBeforeDecodeView = view.subarray(inputOffset, inputOffset + inputLength);\n        if (this.valueBeforeDecodeView.length === 0) {\n            this.warnings.push(\"Zero buffer length\");\n            return inputOffset;\n        }\n        let currentOffset = inputOffset;\n        while (checkLen(this.isIndefiniteForm, inputLength) > 0) {\n            const returnObject = localFromBER(view, currentOffset, inputLength);\n            if (returnObject.offset === -1) {\n                this.error = returnObject.result.error;\n                this.warnings.concat(returnObject.result.warnings);\n                return -1;\n            }\n            currentOffset = returnObject.offset;\n            this.blockLength += returnObject.result.blockLength;\n            inputLength -= returnObject.result.blockLength;\n            this.value.push(returnObject.result);\n            if (this.isIndefiniteForm && returnObject.result.constructor.NAME === END_OF_CONTENT_NAME) {\n                break;\n            }\n        }\n        if (this.isIndefiniteForm) {\n            if (this.value[this.value.length - 1].constructor.NAME === END_OF_CONTENT_NAME) {\n                this.value.pop();\n            }\n            else {\n                this.warnings.push(\"No EndOfContent block encoded\");\n            }\n        }\n        return currentOffset;\n    }\n    toBER(sizeOnly, writer) {\n        const _writer = writer || new ViewWriter();\n        for (let i = 0; i < this.value.length; i++) {\n            this.value[i].toBER(sizeOnly, _writer);\n        }\n        if (!writer) {\n            return _writer.final();\n        }\n        return EMPTY_BUFFER;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            isIndefiniteForm: this.isIndefiniteForm,\n            value: [],\n        };\n        for (const value of this.value) {\n            object.value.push(value.toJSON());\n        }\n        return object;\n    }\n}\nLocalConstructedValueBlock.NAME = \"ConstructedValueBlock\";\n\nvar _a$v;\nclass Constructed extends BaseBlock {\n    constructor(parameters = {}) {\n        super(parameters, LocalConstructedValueBlock);\n        this.idBlock.isConstructed = true;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);\n        if (resultOffset === -1) {\n            this.error = this.valueBlock.error;\n            return resultOffset;\n        }\n        if (!this.idBlock.error.length)\n            this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length)\n            this.blockLength += this.lenBlock.blockLength;\n        if (!this.valueBlock.error.length)\n            this.blockLength += this.valueBlock.blockLength;\n        return resultOffset;\n    }\n    onAsciiEncoding() {\n        const values = [];\n        for (const value of this.valueBlock.value) {\n            values.push(value.toString(\"ascii\").split(\"\\n\").map((o) => `  ${o}`).join(\"\\n\"));\n        }\n        const blockName = this.idBlock.tagClass === 3\n            ? `[${this.idBlock.tagNumber}]`\n            : this.constructor.NAME;\n        return values.length\n            ? `${blockName} :\\n${values.join(\"\\n\")}`\n            : `${blockName} :`;\n    }\n}\n_a$v = Constructed;\n(() => {\n    typeStore.Constructed = _a$v;\n})();\nConstructed.NAME = \"CONSTRUCTED\";\n\nclass LocalEndOfContentValueBlock extends ValueBlock {\n    fromBER(inputBuffer, inputOffset, _inputLength) {\n        return inputOffset;\n    }\n    toBER(_sizeOnly) {\n        return EMPTY_BUFFER;\n    }\n}\nLocalEndOfContentValueBlock.override = \"EndOfContentValueBlock\";\n\nvar _a$u;\nclass EndOfContent extends BaseBlock {\n    constructor(parameters = {}) {\n        super(parameters, LocalEndOfContentValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 0;\n    }\n}\n_a$u = EndOfContent;\n(() => {\n    typeStore.EndOfContent = _a$u;\n})();\nEndOfContent.NAME = END_OF_CONTENT_NAME;\n\nvar _a$t;\nclass Null extends BaseBlock {\n    constructor(parameters = {}) {\n        super(parameters, ValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 5;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (this.lenBlock.length > 0)\n            this.warnings.push(\"Non-zero length of value block for Null type\");\n        if (!this.idBlock.error.length)\n            this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length)\n            this.blockLength += this.lenBlock.blockLength;\n        this.blockLength += inputLength;\n        if ((inputOffset + inputLength) > inputBuffer.byteLength) {\n            this.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\n            return -1;\n        }\n        return (inputOffset + inputLength);\n    }\n    toBER(sizeOnly, writer) {\n        const retBuf = new ArrayBuffer(2);\n        if (!sizeOnly) {\n            const retView = new Uint8Array(retBuf);\n            retView[0] = 0x05;\n            retView[1] = 0x00;\n        }\n        if (writer) {\n            writer.write(retBuf);\n        }\n        return retBuf;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME}`;\n    }\n}\n_a$t = Null;\n(() => {\n    typeStore.Null = _a$t;\n})();\nNull.NAME = \"NULL\";\n\nclass LocalBooleanValueBlock extends HexBlock(ValueBlock) {\n    get value() {\n        for (const octet of this.valueHexView) {\n            if (octet > 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    set value(value) {\n        this.valueHexView[0] = value ? 0xFF : 0x00;\n    }\n    constructor({ value, ...parameters } = {}) {\n        super(parameters);\n        if (parameters.valueHex) {\n            this.valueHexView = pvtsutils.BufferSourceConverter.toUint8Array(parameters.valueHex);\n        }\n        else {\n            this.valueHexView = new Uint8Array(1);\n        }\n        if (value) {\n            this.value = value;\n        }\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        this.valueHexView = inputView.subarray(inputOffset, inputOffset + inputLength);\n        if (inputLength > 1)\n            this.warnings.push(\"Boolean value encoded in more then 1 octet\");\n        this.isHexOnly = true;\n        pvutils.utilDecodeTC.call(this);\n        this.blockLength = inputLength;\n        return (inputOffset + inputLength);\n    }\n    toBER() {\n        return this.valueHexView.slice();\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.value,\n        };\n    }\n}\nLocalBooleanValueBlock.NAME = \"BooleanValueBlock\";\n\nvar _a$s;\nclass Boolean extends BaseBlock {\n    getValue() {\n        return this.valueBlock.value;\n    }\n    setValue(value) {\n        this.valueBlock.value = value;\n    }\n    constructor(parameters = {}) {\n        super(parameters, LocalBooleanValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 1;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.getValue}`;\n    }\n}\n_a$s = Boolean;\n(() => {\n    typeStore.Boolean = _a$s;\n})();\nBoolean.NAME = \"BOOLEAN\";\n\nclass LocalOctetStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\n    constructor({ isConstructed = false, ...parameters } = {}) {\n        super(parameters);\n        this.isConstructed = isConstructed;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        let resultOffset = 0;\n        if (this.isConstructed) {\n            this.isHexOnly = false;\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n            if (resultOffset === -1)\n                return resultOffset;\n            for (let i = 0; i < this.value.length; i++) {\n                const currentBlockName = this.value[i].constructor.NAME;\n                if (currentBlockName === END_OF_CONTENT_NAME) {\n                    if (this.isIndefiniteForm)\n                        break;\n                    else {\n                        this.error = \"EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\n                        return -1;\n                    }\n                }\n                if (currentBlockName !== OCTET_STRING_NAME) {\n                    this.error = \"OCTET STRING may consists of OCTET STRINGs only\";\n                    return -1;\n                }\n            }\n        }\n        else {\n            this.isHexOnly = true;\n            resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n            this.blockLength = inputLength;\n        }\n        return resultOffset;\n    }\n    toBER(sizeOnly, writer) {\n        if (this.isConstructed)\n            return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\n        return sizeOnly\n            ? new ArrayBuffer(this.valueHexView.byteLength)\n            : this.valueHexView.slice().buffer;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            isConstructed: this.isConstructed,\n        };\n    }\n}\nLocalOctetStringValueBlock.NAME = \"OctetStringValueBlock\";\n\nvar _a$r;\nclass OctetString extends BaseBlock {\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {\n        var _b, _c;\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : (parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length));\n        super({\n            idBlock: {\n                isConstructed: parameters.isConstructed,\n                ...idBlock,\n            },\n            lenBlock: {\n                ...lenBlock,\n                isIndefiniteForm: !!parameters.isIndefiniteForm,\n            },\n            ...parameters,\n        }, LocalOctetStringValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 4;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n        if (inputLength === 0) {\n            if (this.idBlock.error.length === 0)\n                this.blockLength += this.idBlock.blockLength;\n            if (this.lenBlock.error.length === 0)\n                this.blockLength += this.lenBlock.blockLength;\n            return inputOffset;\n        }\n        if (!this.valueBlock.isConstructed) {\n            const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\n            const buf = view.subarray(inputOffset, inputOffset + inputLength);\n            try {\n                if (buf.byteLength) {\n                    const asn = localFromBER(buf, 0, buf.byteLength);\n                    if (asn.offset !== -1 && asn.offset === inputLength) {\n                        this.valueBlock.value = [asn.result];\n                    }\n                }\n            }\n            catch {\n            }\n        }\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\n    }\n    onAsciiEncoding() {\n        if (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {\n            return Constructed.prototype.onAsciiEncoding.call(this);\n        }\n        const name = this.constructor.NAME;\n        const value = pvtsutils.Convert.ToHex(this.valueBlock.valueHexView);\n        return `${name} : ${value}`;\n    }\n    getValue() {\n        if (!this.idBlock.isConstructed) {\n            return this.valueBlock.valueHexView.slice().buffer;\n        }\n        const array = [];\n        for (const content of this.valueBlock.value) {\n            if (content instanceof _a$r) {\n                array.push(content.valueBlock.valueHexView);\n            }\n        }\n        return pvtsutils.BufferSourceConverter.concat(array);\n    }\n}\n_a$r = OctetString;\n(() => {\n    typeStore.OctetString = _a$r;\n})();\nOctetString.NAME = OCTET_STRING_NAME;\n\nclass LocalBitStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\n    constructor({ unusedBits = 0, isConstructed = false, ...parameters } = {}) {\n        super(parameters);\n        this.unusedBits = unusedBits;\n        this.isConstructed = isConstructed;\n        this.blockLength = this.valueHexView.byteLength;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (!inputLength) {\n            return inputOffset;\n        }\n        let resultOffset = -1;\n        if (this.isConstructed) {\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n            if (resultOffset === -1)\n                return resultOffset;\n            for (const value of this.value) {\n                const currentBlockName = value.constructor.NAME;\n                if (currentBlockName === END_OF_CONTENT_NAME) {\n                    if (this.isIndefiniteForm)\n                        break;\n                    else {\n                        this.error = \"EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only\";\n                        return -1;\n                    }\n                }\n                if (currentBlockName !== BIT_STRING_NAME) {\n                    this.error = \"BIT STRING may consists of BIT STRINGs only\";\n                    return -1;\n                }\n                const valueBlock = value.valueBlock;\n                if ((this.unusedBits > 0) && (valueBlock.unusedBits > 0)) {\n                    this.error = \"Using of \\\"unused bits\\\" inside constructive BIT STRING allowed for least one only\";\n                    return -1;\n                }\n                this.unusedBits = valueBlock.unusedBits;\n            }\n            return resultOffset;\n        }\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        this.unusedBits = intBuffer[0];\n        if (this.unusedBits > 7) {\n            this.error = \"Unused bits for BitString must be in range 0-7\";\n            return -1;\n        }\n        if (!this.unusedBits) {\n            const buf = intBuffer.subarray(1);\n            try {\n                if (buf.byteLength) {\n                    const asn = localFromBER(buf, 0, buf.byteLength);\n                    if (asn.offset !== -1 && asn.offset === (inputLength - 1)) {\n                        this.value = [asn.result];\n                    }\n                }\n            }\n            catch {\n            }\n        }\n        this.valueHexView = intBuffer.subarray(1);\n        this.blockLength = intBuffer.length;\n        return (inputOffset + inputLength);\n    }\n    toBER(sizeOnly, writer) {\n        if (this.isConstructed) {\n            return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\n        }\n        if (sizeOnly) {\n            return new ArrayBuffer(this.valueHexView.byteLength + 1);\n        }\n        if (!this.valueHexView.byteLength) {\n            return EMPTY_BUFFER;\n        }\n        const retView = new Uint8Array(this.valueHexView.length + 1);\n        retView[0] = this.unusedBits;\n        retView.set(this.valueHexView, 1);\n        return retView.buffer;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            unusedBits: this.unusedBits,\n            isConstructed: this.isConstructed,\n        };\n    }\n}\nLocalBitStringValueBlock.NAME = \"BitStringValueBlock\";\n\nvar _a$q;\nclass BitString extends BaseBlock {\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {\n        var _b, _c;\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : (parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length));\n        super({\n            idBlock: {\n                isConstructed: parameters.isConstructed,\n                ...idBlock,\n            },\n            lenBlock: {\n                ...lenBlock,\n                isIndefiniteForm: !!parameters.isIndefiniteForm,\n            },\n            ...parameters,\n        }, LocalBitStringValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 3;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\n    }\n    onAsciiEncoding() {\n        if (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {\n            return Constructed.prototype.onAsciiEncoding.call(this);\n        }\n        else {\n            const bits = [];\n            const valueHex = this.valueBlock.valueHexView;\n            for (const byte of valueHex) {\n                bits.push(byte.toString(2).padStart(8, \"0\"));\n            }\n            const bitsStr = bits.join(\"\");\n            const name = this.constructor.NAME;\n            const value = bitsStr.substring(0, bitsStr.length - this.valueBlock.unusedBits);\n            return `${name} : ${value}`;\n        }\n    }\n}\n_a$q = BitString;\n(() => {\n    typeStore.BitString = _a$q;\n})();\nBitString.NAME = BIT_STRING_NAME;\n\nvar _a$p;\nfunction viewAdd(first, second) {\n    const c = new Uint8Array([0]);\n    const firstView = new Uint8Array(first);\n    const secondView = new Uint8Array(second);\n    let firstViewCopy = firstView.slice(0);\n    const firstViewCopyLength = firstViewCopy.length - 1;\n    const secondViewCopy = secondView.slice(0);\n    const secondViewCopyLength = secondViewCopy.length - 1;\n    let value = 0;\n    const max = (secondViewCopyLength < firstViewCopyLength) ? firstViewCopyLength : secondViewCopyLength;\n    let counter = 0;\n    for (let i = max; i >= 0; i--, counter++) {\n        switch (true) {\n            case (counter < secondViewCopy.length):\n                value = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];\n                break;\n            default:\n                value = firstViewCopy[firstViewCopyLength - counter] + c[0];\n        }\n        c[0] = value / 10;\n        switch (true) {\n            case (counter >= firstViewCopy.length):\n                firstViewCopy = pvutils.utilConcatView(new Uint8Array([value % 10]), firstViewCopy);\n                break;\n            default:\n                firstViewCopy[firstViewCopyLength - counter] = value % 10;\n        }\n    }\n    if (c[0] > 0)\n        firstViewCopy = pvutils.utilConcatView(c, firstViewCopy);\n    return firstViewCopy;\n}\nfunction power2(n) {\n    if (n >= powers2.length) {\n        for (let p = powers2.length; p <= n; p++) {\n            const c = new Uint8Array([0]);\n            let digits = (powers2[p - 1]).slice(0);\n            for (let i = (digits.length - 1); i >= 0; i--) {\n                const newValue = new Uint8Array([(digits[i] << 1) + c[0]]);\n                c[0] = newValue[0] / 10;\n                digits[i] = newValue[0] % 10;\n            }\n            if (c[0] > 0)\n                digits = pvutils.utilConcatView(c, digits);\n            powers2.push(digits);\n        }\n    }\n    return powers2[n];\n}\nfunction viewSub(first, second) {\n    let b = 0;\n    const firstView = new Uint8Array(first);\n    const secondView = new Uint8Array(second);\n    const firstViewCopy = firstView.slice(0);\n    const firstViewCopyLength = firstViewCopy.length - 1;\n    const secondViewCopy = secondView.slice(0);\n    const secondViewCopyLength = secondViewCopy.length - 1;\n    let value;\n    let counter = 0;\n    for (let i = secondViewCopyLength; i >= 0; i--, counter++) {\n        value = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;\n        switch (true) {\n            case (value < 0):\n                b = 1;\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\n                break;\n            default:\n                b = 0;\n                firstViewCopy[firstViewCopyLength - counter] = value;\n        }\n    }\n    if (b > 0) {\n        for (let i = (firstViewCopyLength - secondViewCopyLength + 1); i >= 0; i--, counter++) {\n            value = firstViewCopy[firstViewCopyLength - counter] - b;\n            if (value < 0) {\n                b = 1;\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\n            }\n            else {\n                b = 0;\n                firstViewCopy[firstViewCopyLength - counter] = value;\n                break;\n            }\n        }\n    }\n    return firstViewCopy.slice();\n}\nclass LocalIntegerValueBlock extends HexBlock(ValueBlock) {\n    setValueHex() {\n        if (this.valueHexView.length >= 4) {\n            this.warnings.push(\"Too big Integer for decoding, hex only\");\n            this.isHexOnly = true;\n            this._valueDec = 0;\n        }\n        else {\n            this.isHexOnly = false;\n            if (this.valueHexView.length > 0) {\n                this._valueDec = pvutils.utilDecodeTC.call(this);\n            }\n        }\n    }\n    constructor({ value, ...parameters } = {}) {\n        super(parameters);\n        this._valueDec = 0;\n        if (parameters.valueHex) {\n            this.setValueHex();\n        }\n        if (value !== undefined) {\n            this.valueDec = value;\n        }\n    }\n    set valueDec(v) {\n        this._valueDec = v;\n        this.isHexOnly = false;\n        this.valueHexView = new Uint8Array(pvutils.utilEncodeTC(v));\n    }\n    get valueDec() {\n        return this._valueDec;\n    }\n    fromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0) {\n        const offset = this.fromBER(inputBuffer, inputOffset, inputLength);\n        if (offset === -1)\n            return offset;\n        const view = this.valueHexView;\n        if ((view[0] === 0x00) && ((view[1] & 0x80) !== 0)) {\n            this.valueHexView = view.subarray(1);\n        }\n        else {\n            if (expectedLength !== 0) {\n                if (view.length < expectedLength) {\n                    if ((expectedLength - view.length) > 1)\n                        expectedLength = view.length + 1;\n                    this.valueHexView = view.subarray(expectedLength - view.length);\n                }\n            }\n        }\n        return offset;\n    }\n    toDER(sizeOnly = false) {\n        const view = this.valueHexView;\n        switch (true) {\n            case ((view[0] & 0x80) !== 0):\n                {\n                    const updatedView = new Uint8Array(this.valueHexView.length + 1);\n                    updatedView[0] = 0x00;\n                    updatedView.set(view, 1);\n                    this.valueHexView = updatedView;\n                }\n                break;\n            case ((view[0] === 0x00) && ((view[1] & 0x80) === 0)):\n                {\n                    this.valueHexView = this.valueHexView.subarray(1);\n                }\n                break;\n        }\n        return this.toBER(sizeOnly);\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n        if (resultOffset === -1) {\n            return resultOffset;\n        }\n        this.setValueHex();\n        return resultOffset;\n    }\n    toBER(sizeOnly) {\n        return sizeOnly\n            ? new ArrayBuffer(this.valueHexView.length)\n            : this.valueHexView.slice().buffer;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            valueDec: this.valueDec,\n        };\n    }\n    toString() {\n        const firstBit = (this.valueHexView.length * 8) - 1;\n        let digits = new Uint8Array((this.valueHexView.length * 8) / 3);\n        let bitNumber = 0;\n        let currentByte;\n        const asn1View = this.valueHexView;\n        let result = \"\";\n        let flag = false;\n        for (let byteNumber = (asn1View.byteLength - 1); byteNumber >= 0; byteNumber--) {\n            currentByte = asn1View[byteNumber];\n            for (let i = 0; i < 8; i++) {\n                if ((currentByte & 1) === 1) {\n                    switch (bitNumber) {\n                        case firstBit:\n                            digits = viewSub(power2(bitNumber), digits);\n                            result = \"-\";\n                            break;\n                        default:\n                            digits = viewAdd(digits, power2(bitNumber));\n                    }\n                }\n                bitNumber++;\n                currentByte >>= 1;\n            }\n        }\n        for (let i = 0; i < digits.length; i++) {\n            if (digits[i])\n                flag = true;\n            if (flag)\n                result += digitsString.charAt(digits[i]);\n        }\n        if (flag === false)\n            result += digitsString.charAt(0);\n        return result;\n    }\n}\n_a$p = LocalIntegerValueBlock;\nLocalIntegerValueBlock.NAME = \"IntegerValueBlock\";\n(() => {\n    Object.defineProperty(_a$p.prototype, \"valueHex\", {\n        set: function (v) {\n            this.valueHexView = new Uint8Array(v);\n            this.setValueHex();\n        },\n        get: function () {\n            return this.valueHexView.slice().buffer;\n        },\n    });\n})();\n\nvar _a$o;\nclass Integer extends BaseBlock {\n    constructor(parameters = {}) {\n        super(parameters, LocalIntegerValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 2;\n    }\n    toBigInt() {\n        assertBigInt();\n        return BigInt(this.valueBlock.toString());\n    }\n    static fromBigInt(value) {\n        assertBigInt();\n        const bigIntValue = BigInt(value);\n        const writer = new ViewWriter();\n        const hex = bigIntValue.toString(16).replace(/^-/, \"\");\n        const view = new Uint8Array(pvtsutils.Convert.FromHex(hex));\n        if (bigIntValue < 0) {\n            const first = new Uint8Array(view.length + (view[0] & 0x80 ? 1 : 0));\n            first[0] |= 0x80;\n            const firstInt = BigInt(`0x${pvtsutils.Convert.ToHex(first)}`);\n            const secondInt = firstInt + bigIntValue;\n            const second = pvtsutils.BufferSourceConverter.toUint8Array(pvtsutils.Convert.FromHex(secondInt.toString(16)));\n            second[0] |= 0x80;\n            writer.write(second);\n        }\n        else {\n            if (view[0] & 0x80) {\n                writer.write(new Uint8Array([0]));\n            }\n            writer.write(view);\n        }\n        const res = new _a$o({ valueHex: writer.final() });\n        return res;\n    }\n    convertToDER() {\n        const integer = new _a$o({ valueHex: this.valueBlock.valueHexView });\n        integer.valueBlock.toDER();\n        return integer;\n    }\n    convertFromDER() {\n        return new _a$o({\n            valueHex: this.valueBlock.valueHexView[0] === 0\n                ? this.valueBlock.valueHexView.subarray(1)\n                : this.valueBlock.valueHexView,\n        });\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.valueBlock.toString()}`;\n    }\n}\n_a$o = Integer;\n(() => {\n    typeStore.Integer = _a$o;\n})();\nInteger.NAME = \"INTEGER\";\n\nvar _a$n;\nclass Enumerated extends Integer {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 10;\n    }\n}\n_a$n = Enumerated;\n(() => {\n    typeStore.Enumerated = _a$n;\n})();\nEnumerated.NAME = \"ENUMERATED\";\n\nclass LocalSidValueBlock extends HexBlock(ValueBlock) {\n    constructor({ valueDec = -1, isFirstSid = false, ...parameters } = {}) {\n        super(parameters);\n        this.valueDec = valueDec;\n        this.isFirstSid = isFirstSid;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (!inputLength) {\n            return inputOffset;\n        }\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        this.valueHexView = new Uint8Array(inputLength);\n        for (let i = 0; i < inputLength; i++) {\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\n            this.blockLength++;\n            if ((intBuffer[i] & 0x80) === 0x00)\n                break;\n        }\n        const tempView = new Uint8Array(this.blockLength);\n        for (let i = 0; i < this.blockLength; i++) {\n            tempView[i] = this.valueHexView[i];\n        }\n        this.valueHexView = tempView;\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\n            this.error = \"End of input reached before message was fully decoded\";\n            return -1;\n        }\n        if (this.valueHexView[0] === 0x00)\n            this.warnings.push(\"Needlessly long format of SID encoding\");\n        if (this.blockLength <= 8)\n            this.valueDec = pvutils.utilFromBase(this.valueHexView, 7);\n        else {\n            this.isHexOnly = true;\n            this.warnings.push(\"Too big SID for decoding, hex only\");\n        }\n        return (inputOffset + this.blockLength);\n    }\n    set valueBigInt(value) {\n        assertBigInt();\n        let bits = BigInt(value).toString(2);\n        while (bits.length % 7) {\n            bits = \"0\" + bits;\n        }\n        const bytes = new Uint8Array(bits.length / 7);\n        for (let i = 0; i < bytes.length; i++) {\n            bytes[i] = parseInt(bits.slice(i * 7, i * 7 + 7), 2) + (i + 1 < bytes.length ? 0x80 : 0);\n        }\n        this.fromBER(bytes.buffer, 0, bytes.length);\n    }\n    toBER(sizeOnly) {\n        if (this.isHexOnly) {\n            if (sizeOnly)\n                return (new ArrayBuffer(this.valueHexView.byteLength));\n            const curView = this.valueHexView;\n            const retView = new Uint8Array(this.blockLength);\n            for (let i = 0; i < (this.blockLength - 1); i++)\n                retView[i] = curView[i] | 0x80;\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\n            return retView.buffer;\n        }\n        const encodedBuf = pvutils.utilToBase(this.valueDec, 7);\n        if (encodedBuf.byteLength === 0) {\n            this.error = \"Error during encoding SID value\";\n            return EMPTY_BUFFER;\n        }\n        const retView = new Uint8Array(encodedBuf.byteLength);\n        if (!sizeOnly) {\n            const encodedView = new Uint8Array(encodedBuf);\n            const len = encodedBuf.byteLength - 1;\n            for (let i = 0; i < len; i++)\n                retView[i] = encodedView[i] | 0x80;\n            retView[len] = encodedView[len];\n        }\n        return retView;\n    }\n    toString() {\n        let result = \"\";\n        if (this.isHexOnly)\n            result = pvtsutils.Convert.ToHex(this.valueHexView);\n        else {\n            if (this.isFirstSid) {\n                let sidValue = this.valueDec;\n                if (this.valueDec <= 39)\n                    result = \"0.\";\n                else {\n                    if (this.valueDec <= 79) {\n                        result = \"1.\";\n                        sidValue -= 40;\n                    }\n                    else {\n                        result = \"2.\";\n                        sidValue -= 80;\n                    }\n                }\n                result += sidValue.toString();\n            }\n            else\n                result = this.valueDec.toString();\n        }\n        return result;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            valueDec: this.valueDec,\n            isFirstSid: this.isFirstSid,\n        };\n    }\n}\nLocalSidValueBlock.NAME = \"sidBlock\";\n\nclass LocalObjectIdentifierValueBlock extends ValueBlock {\n    constructor({ value = EMPTY_STRING, ...parameters } = {}) {\n        super(parameters);\n        this.value = [];\n        if (value) {\n            this.fromString(value);\n        }\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        let resultOffset = inputOffset;\n        while (inputLength > 0) {\n            const sidBlock = new LocalSidValueBlock();\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\n            if (resultOffset === -1) {\n                this.blockLength = 0;\n                this.error = sidBlock.error;\n                return resultOffset;\n            }\n            if (this.value.length === 0)\n                sidBlock.isFirstSid = true;\n            this.blockLength += sidBlock.blockLength;\n            inputLength -= sidBlock.blockLength;\n            this.value.push(sidBlock);\n        }\n        return resultOffset;\n    }\n    toBER(sizeOnly) {\n        const retBuffers = [];\n        for (let i = 0; i < this.value.length; i++) {\n            const valueBuf = this.value[i].toBER(sizeOnly);\n            if (valueBuf.byteLength === 0) {\n                this.error = this.value[i].error;\n                return EMPTY_BUFFER;\n            }\n            retBuffers.push(valueBuf);\n        }\n        return concat(retBuffers);\n    }\n    fromString(string) {\n        this.value = [];\n        let pos1 = 0;\n        let pos2 = 0;\n        let sid = \"\";\n        let flag = false;\n        do {\n            pos2 = string.indexOf(\".\", pos1);\n            if (pos2 === -1)\n                sid = string.substring(pos1);\n            else\n                sid = string.substring(pos1, pos2);\n            pos1 = pos2 + 1;\n            if (flag) {\n                const sidBlock = this.value[0];\n                let plus = 0;\n                switch (sidBlock.valueDec) {\n                    case 0:\n                        break;\n                    case 1:\n                        plus = 40;\n                        break;\n                    case 2:\n                        plus = 80;\n                        break;\n                    default:\n                        this.value = [];\n                        return;\n                }\n                const parsedSID = parseInt(sid, 10);\n                if (isNaN(parsedSID))\n                    return;\n                sidBlock.valueDec = parsedSID + plus;\n                flag = false;\n            }\n            else {\n                const sidBlock = new LocalSidValueBlock();\n                if (sid > Number.MAX_SAFE_INTEGER) {\n                    assertBigInt();\n                    const sidValue = BigInt(sid);\n                    sidBlock.valueBigInt = sidValue;\n                }\n                else {\n                    sidBlock.valueDec = parseInt(sid, 10);\n                    if (isNaN(sidBlock.valueDec))\n                        return;\n                }\n                if (!this.value.length) {\n                    sidBlock.isFirstSid = true;\n                    flag = true;\n                }\n                this.value.push(sidBlock);\n            }\n        } while (pos2 !== -1);\n    }\n    toString() {\n        let result = \"\";\n        let isHexOnly = false;\n        for (let i = 0; i < this.value.length; i++) {\n            isHexOnly = this.value[i].isHexOnly;\n            let sidStr = this.value[i].toString();\n            if (i !== 0)\n                result = `${result}.`;\n            if (isHexOnly) {\n                sidStr = `{${sidStr}}`;\n                if (this.value[i].isFirstSid)\n                    result = `2.{${sidStr} - 80}`;\n                else\n                    result += sidStr;\n            }\n            else\n                result += sidStr;\n        }\n        return result;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            value: this.toString(),\n            sidArray: [],\n        };\n        for (let i = 0; i < this.value.length; i++) {\n            object.sidArray.push(this.value[i].toJSON());\n        }\n        return object;\n    }\n}\nLocalObjectIdentifierValueBlock.NAME = \"ObjectIdentifierValueBlock\";\n\nvar _a$m;\nclass ObjectIdentifier extends BaseBlock {\n    getValue() {\n        return this.valueBlock.toString();\n    }\n    setValue(value) {\n        this.valueBlock.fromString(value);\n    }\n    constructor(parameters = {}) {\n        super(parameters, LocalObjectIdentifierValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 6;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.getValue(),\n        };\n    }\n}\n_a$m = ObjectIdentifier;\n(() => {\n    typeStore.ObjectIdentifier = _a$m;\n})();\nObjectIdentifier.NAME = \"OBJECT IDENTIFIER\";\n\nclass LocalRelativeSidValueBlock extends HexBlock(LocalBaseBlock) {\n    constructor({ valueDec = 0, ...parameters } = {}) {\n        super(parameters);\n        this.valueDec = valueDec;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (inputLength === 0)\n            return inputOffset;\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength))\n            return -1;\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        this.valueHexView = new Uint8Array(inputLength);\n        for (let i = 0; i < inputLength; i++) {\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\n            this.blockLength++;\n            if ((intBuffer[i] & 0x80) === 0x00)\n                break;\n        }\n        const tempView = new Uint8Array(this.blockLength);\n        for (let i = 0; i < this.blockLength; i++)\n            tempView[i] = this.valueHexView[i];\n        this.valueHexView = tempView;\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\n            this.error = \"End of input reached before message was fully decoded\";\n            return -1;\n        }\n        if (this.valueHexView[0] === 0x00)\n            this.warnings.push(\"Needlessly long format of SID encoding\");\n        if (this.blockLength <= 8)\n            this.valueDec = pvutils.utilFromBase(this.valueHexView, 7);\n        else {\n            this.isHexOnly = true;\n            this.warnings.push(\"Too big SID for decoding, hex only\");\n        }\n        return (inputOffset + this.blockLength);\n    }\n    toBER(sizeOnly) {\n        if (this.isHexOnly) {\n            if (sizeOnly)\n                return (new ArrayBuffer(this.valueHexView.byteLength));\n            const curView = this.valueHexView;\n            const retView = new Uint8Array(this.blockLength);\n            for (let i = 0; i < (this.blockLength - 1); i++)\n                retView[i] = curView[i] | 0x80;\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\n            return retView.buffer;\n        }\n        const encodedBuf = pvutils.utilToBase(this.valueDec, 7);\n        if (encodedBuf.byteLength === 0) {\n            this.error = \"Error during encoding SID value\";\n            return EMPTY_BUFFER;\n        }\n        const retView = new Uint8Array(encodedBuf.byteLength);\n        if (!sizeOnly) {\n            const encodedView = new Uint8Array(encodedBuf);\n            const len = encodedBuf.byteLength - 1;\n            for (let i = 0; i < len; i++)\n                retView[i] = encodedView[i] | 0x80;\n            retView[len] = encodedView[len];\n        }\n        return retView.buffer;\n    }\n    toString() {\n        let result = \"\";\n        if (this.isHexOnly)\n            result = pvtsutils.Convert.ToHex(this.valueHexView);\n        else {\n            result = this.valueDec.toString();\n        }\n        return result;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            valueDec: this.valueDec,\n        };\n    }\n}\nLocalRelativeSidValueBlock.NAME = \"relativeSidBlock\";\n\nclass LocalRelativeObjectIdentifierValueBlock extends ValueBlock {\n    constructor({ value = EMPTY_STRING, ...parameters } = {}) {\n        super(parameters);\n        this.value = [];\n        if (value) {\n            this.fromString(value);\n        }\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        let resultOffset = inputOffset;\n        while (inputLength > 0) {\n            const sidBlock = new LocalRelativeSidValueBlock();\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\n            if (resultOffset === -1) {\n                this.blockLength = 0;\n                this.error = sidBlock.error;\n                return resultOffset;\n            }\n            this.blockLength += sidBlock.blockLength;\n            inputLength -= sidBlock.blockLength;\n            this.value.push(sidBlock);\n        }\n        return resultOffset;\n    }\n    toBER(sizeOnly, _writer) {\n        const retBuffers = [];\n        for (let i = 0; i < this.value.length; i++) {\n            const valueBuf = this.value[i].toBER(sizeOnly);\n            if (valueBuf.byteLength === 0) {\n                this.error = this.value[i].error;\n                return EMPTY_BUFFER;\n            }\n            retBuffers.push(valueBuf);\n        }\n        return concat(retBuffers);\n    }\n    fromString(string) {\n        this.value = [];\n        let pos1 = 0;\n        let pos2 = 0;\n        let sid = \"\";\n        do {\n            pos2 = string.indexOf(\".\", pos1);\n            if (pos2 === -1)\n                sid = string.substring(pos1);\n            else\n                sid = string.substring(pos1, pos2);\n            pos1 = pos2 + 1;\n            const sidBlock = new LocalRelativeSidValueBlock();\n            sidBlock.valueDec = parseInt(sid, 10);\n            if (isNaN(sidBlock.valueDec))\n                return true;\n            this.value.push(sidBlock);\n        } while (pos2 !== -1);\n        return true;\n    }\n    toString() {\n        let result = \"\";\n        let isHexOnly = false;\n        for (let i = 0; i < this.value.length; i++) {\n            isHexOnly = this.value[i].isHexOnly;\n            let sidStr = this.value[i].toString();\n            if (i !== 0)\n                result = `${result}.`;\n            if (isHexOnly) {\n                sidStr = `{${sidStr}}`;\n                result += sidStr;\n            }\n            else\n                result += sidStr;\n        }\n        return result;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            value: this.toString(),\n            sidArray: [],\n        };\n        for (let i = 0; i < this.value.length; i++)\n            object.sidArray.push(this.value[i].toJSON());\n        return object;\n    }\n}\nLocalRelativeObjectIdentifierValueBlock.NAME = \"RelativeObjectIdentifierValueBlock\";\n\nvar _a$l;\nclass RelativeObjectIdentifier extends BaseBlock {\n    getValue() {\n        return this.valueBlock.toString();\n    }\n    setValue(value) {\n        this.valueBlock.fromString(value);\n    }\n    constructor(parameters = {}) {\n        super(parameters, LocalRelativeObjectIdentifierValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 13;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.getValue(),\n        };\n    }\n}\n_a$l = RelativeObjectIdentifier;\n(() => {\n    typeStore.RelativeObjectIdentifier = _a$l;\n})();\nRelativeObjectIdentifier.NAME = \"RelativeObjectIdentifier\";\n\nvar _a$k;\nclass Sequence extends Constructed {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 16;\n    }\n}\n_a$k = Sequence;\n(() => {\n    typeStore.Sequence = _a$k;\n})();\nSequence.NAME = \"SEQUENCE\";\n\nvar _a$j;\nclass Set extends Constructed {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 17;\n    }\n}\n_a$j = Set;\n(() => {\n    typeStore.Set = _a$j;\n})();\nSet.NAME = \"SET\";\n\nclass LocalStringValueBlock extends HexBlock(ValueBlock) {\n    constructor({ ...parameters } = {}) {\n        super(parameters);\n        this.isHexOnly = true;\n        this.value = EMPTY_STRING;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.value,\n        };\n    }\n}\nLocalStringValueBlock.NAME = \"StringValueBlock\";\n\nclass LocalSimpleStringValueBlock extends LocalStringValueBlock {\n}\nLocalSimpleStringValueBlock.NAME = \"SimpleStringValueBlock\";\n\nclass LocalSimpleStringBlock extends BaseStringBlock {\n    constructor({ ...parameters } = {}) {\n        super(parameters, LocalSimpleStringValueBlock);\n    }\n    fromBuffer(inputBuffer) {\n        this.valueBlock.value = String.fromCharCode.apply(null, pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer));\n    }\n    fromString(inputString) {\n        const strLen = inputString.length;\n        const view = this.valueBlock.valueHexView = new Uint8Array(strLen);\n        for (let i = 0; i < strLen; i++)\n            view[i] = inputString.charCodeAt(i);\n        this.valueBlock.value = inputString;\n    }\n}\nLocalSimpleStringBlock.NAME = \"SIMPLE STRING\";\n\nclass LocalUtf8StringValueBlock extends LocalSimpleStringBlock {\n    fromBuffer(inputBuffer) {\n        this.valueBlock.valueHexView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\n        try {\n            this.valueBlock.value = pvtsutils.Convert.ToUtf8String(inputBuffer);\n        }\n        catch (ex) {\n            this.warnings.push(`Error during \"decodeURIComponent\": ${ex}, using raw string`);\n            this.valueBlock.value = pvtsutils.Convert.ToBinary(inputBuffer);\n        }\n    }\n    fromString(inputString) {\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils.Convert.FromUtf8String(inputString));\n        this.valueBlock.value = inputString;\n    }\n}\nLocalUtf8StringValueBlock.NAME = \"Utf8StringValueBlock\";\n\nvar _a$i;\nclass Utf8String extends LocalUtf8StringValueBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 12;\n    }\n}\n_a$i = Utf8String;\n(() => {\n    typeStore.Utf8String = _a$i;\n})();\nUtf8String.NAME = \"UTF8String\";\n\nclass LocalBmpStringValueBlock extends LocalSimpleStringBlock {\n    fromBuffer(inputBuffer) {\n        this.valueBlock.value = pvtsutils.Convert.ToUtf16String(inputBuffer);\n        this.valueBlock.valueHexView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\n    }\n    fromString(inputString) {\n        this.valueBlock.value = inputString;\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils.Convert.FromUtf16String(inputString));\n    }\n}\nLocalBmpStringValueBlock.NAME = \"BmpStringValueBlock\";\n\nvar _a$h;\nclass BmpString extends LocalBmpStringValueBlock {\n    constructor({ ...parameters } = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 30;\n    }\n}\n_a$h = BmpString;\n(() => {\n    typeStore.BmpString = _a$h;\n})();\nBmpString.NAME = \"BMPString\";\n\nclass LocalUniversalStringValueBlock extends LocalSimpleStringBlock {\n    fromBuffer(inputBuffer) {\n        const copyBuffer = ArrayBuffer.isView(inputBuffer) ? inputBuffer.slice().buffer : inputBuffer.slice(0);\n        const valueView = new Uint8Array(copyBuffer);\n        for (let i = 0; i < valueView.length; i += 4) {\n            valueView[i] = valueView[i + 3];\n            valueView[i + 1] = valueView[i + 2];\n            valueView[i + 2] = 0x00;\n            valueView[i + 3] = 0x00;\n        }\n        this.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));\n    }\n    fromString(inputString) {\n        const strLength = inputString.length;\n        const valueHexView = this.valueBlock.valueHexView = new Uint8Array(strLength * 4);\n        for (let i = 0; i < strLength; i++) {\n            const codeBuf = pvutils.utilToBase(inputString.charCodeAt(i), 8);\n            const codeView = new Uint8Array(codeBuf);\n            if (codeView.length > 4)\n                continue;\n            const dif = 4 - codeView.length;\n            for (let j = (codeView.length - 1); j >= 0; j--)\n                valueHexView[i * 4 + j + dif] = codeView[j];\n        }\n        this.valueBlock.value = inputString;\n    }\n}\nLocalUniversalStringValueBlock.NAME = \"UniversalStringValueBlock\";\n\nvar _a$g;\nclass UniversalString extends LocalUniversalStringValueBlock {\n    constructor({ ...parameters } = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 28;\n    }\n}\n_a$g = UniversalString;\n(() => {\n    typeStore.UniversalString = _a$g;\n})();\nUniversalString.NAME = \"UniversalString\";\n\nvar _a$f;\nclass NumericString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 18;\n    }\n}\n_a$f = NumericString;\n(() => {\n    typeStore.NumericString = _a$f;\n})();\nNumericString.NAME = \"NumericString\";\n\nvar _a$e;\nclass PrintableString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 19;\n    }\n}\n_a$e = PrintableString;\n(() => {\n    typeStore.PrintableString = _a$e;\n})();\nPrintableString.NAME = \"PrintableString\";\n\nvar _a$d;\nclass TeletexString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 20;\n    }\n}\n_a$d = TeletexString;\n(() => {\n    typeStore.TeletexString = _a$d;\n})();\nTeletexString.NAME = \"TeletexString\";\n\nvar _a$c;\nclass VideotexString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 21;\n    }\n}\n_a$c = VideotexString;\n(() => {\n    typeStore.VideotexString = _a$c;\n})();\nVideotexString.NAME = \"VideotexString\";\n\nvar _a$b;\nclass IA5String extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 22;\n    }\n}\n_a$b = IA5String;\n(() => {\n    typeStore.IA5String = _a$b;\n})();\nIA5String.NAME = \"IA5String\";\n\nvar _a$a;\nclass GraphicString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 25;\n    }\n}\n_a$a = GraphicString;\n(() => {\n    typeStore.GraphicString = _a$a;\n})();\nGraphicString.NAME = \"GraphicString\";\n\nvar _a$9;\nclass VisibleString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 26;\n    }\n}\n_a$9 = VisibleString;\n(() => {\n    typeStore.VisibleString = _a$9;\n})();\nVisibleString.NAME = \"VisibleString\";\n\nvar _a$8;\nclass GeneralString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 27;\n    }\n}\n_a$8 = GeneralString;\n(() => {\n    typeStore.GeneralString = _a$8;\n})();\nGeneralString.NAME = \"GeneralString\";\n\nvar _a$7;\nclass CharacterString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 29;\n    }\n}\n_a$7 = CharacterString;\n(() => {\n    typeStore.CharacterString = _a$7;\n})();\nCharacterString.NAME = \"CharacterString\";\n\nvar _a$6;\nclass UTCTime extends VisibleString {\n    constructor({ value, valueDate, ...parameters } = {}) {\n        super(parameters);\n        this.year = 0;\n        this.month = 0;\n        this.day = 0;\n        this.hour = 0;\n        this.minute = 0;\n        this.second = 0;\n        if (value) {\n            this.fromString(value);\n            this.valueBlock.valueHexView = new Uint8Array(value.length);\n            for (let i = 0; i < value.length; i++)\n                this.valueBlock.valueHexView[i] = value.charCodeAt(i);\n        }\n        if (valueDate) {\n            this.fromDate(valueDate);\n            this.valueBlock.valueHexView = new Uint8Array(this.toBuffer());\n        }\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 23;\n    }\n    fromBuffer(inputBuffer) {\n        this.fromString(String.fromCharCode.apply(null, pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer)));\n    }\n    toBuffer() {\n        const str = this.toString();\n        const buffer = new ArrayBuffer(str.length);\n        const view = new Uint8Array(buffer);\n        for (let i = 0; i < str.length; i++)\n            view[i] = str.charCodeAt(i);\n        return buffer;\n    }\n    fromDate(inputDate) {\n        this.year = inputDate.getUTCFullYear();\n        this.month = inputDate.getUTCMonth() + 1;\n        this.day = inputDate.getUTCDate();\n        this.hour = inputDate.getUTCHours();\n        this.minute = inputDate.getUTCMinutes();\n        this.second = inputDate.getUTCSeconds();\n    }\n    toDate() {\n        return (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second)));\n    }\n    fromString(inputString) {\n        const parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\n        const parserArray = parser.exec(inputString);\n        if (parserArray === null) {\n            this.error = \"Wrong input string for conversion\";\n            return;\n        }\n        const year = parseInt(parserArray[1], 10);\n        if (year >= 50)\n            this.year = 1900 + year;\n        else\n            this.year = 2000 + year;\n        this.month = parseInt(parserArray[2], 10);\n        this.day = parseInt(parserArray[3], 10);\n        this.hour = parseInt(parserArray[4], 10);\n        this.minute = parseInt(parserArray[5], 10);\n        this.second = parseInt(parserArray[6], 10);\n    }\n    toString(encoding = \"iso\") {\n        if (encoding === \"iso\") {\n            const outputArray = new Array(7);\n            outputArray[0] = pvutils.padNumber(((this.year < 2000) ? (this.year - 1900) : (this.year - 2000)), 2);\n            outputArray[1] = pvutils.padNumber(this.month, 2);\n            outputArray[2] = pvutils.padNumber(this.day, 2);\n            outputArray[3] = pvutils.padNumber(this.hour, 2);\n            outputArray[4] = pvutils.padNumber(this.minute, 2);\n            outputArray[5] = pvutils.padNumber(this.second, 2);\n            outputArray[6] = \"Z\";\n            return outputArray.join(\"\");\n        }\n        return super.toString(encoding);\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.toDate().toISOString()}`;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            year: this.year,\n            month: this.month,\n            day: this.day,\n            hour: this.hour,\n            minute: this.minute,\n            second: this.second,\n        };\n    }\n}\n_a$6 = UTCTime;\n(() => {\n    typeStore.UTCTime = _a$6;\n})();\nUTCTime.NAME = \"UTCTime\";\n\nvar _a$5;\nclass GeneralizedTime extends UTCTime {\n    constructor(parameters = {}) {\n        var _b;\n        super(parameters);\n        (_b = this.millisecond) !== null && _b !== void 0 ? _b : (this.millisecond = 0);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 24;\n    }\n    fromDate(inputDate) {\n        super.fromDate(inputDate);\n        this.millisecond = inputDate.getUTCMilliseconds();\n    }\n    toDate() {\n        const utcDate = Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond);\n        return (new Date(utcDate));\n    }\n    fromString(inputString) {\n        let isUTC = false;\n        let timeString = \"\";\n        let dateTimeString = \"\";\n        let fractionPart = 0;\n        let parser;\n        let hourDifference = 0;\n        let minuteDifference = 0;\n        if (inputString[inputString.length - 1] === \"Z\") {\n            timeString = inputString.substring(0, inputString.length - 1);\n            isUTC = true;\n        }\n        else {\n            const number = new Number(inputString[inputString.length - 1]);\n            if (isNaN(number.valueOf()))\n                throw new Error(\"Wrong input string for conversion\");\n            timeString = inputString;\n        }\n        if (isUTC) {\n            if (timeString.indexOf(\"+\") !== -1)\n                throw new Error(\"Wrong input string for conversion\");\n            if (timeString.indexOf(\"-\") !== -1)\n                throw new Error(\"Wrong input string for conversion\");\n        }\n        else {\n            let multiplier = 1;\n            let differencePosition = timeString.indexOf(\"+\");\n            let differenceString = \"\";\n            if (differencePosition === -1) {\n                differencePosition = timeString.indexOf(\"-\");\n                multiplier = -1;\n            }\n            if (differencePosition !== -1) {\n                differenceString = timeString.substring(differencePosition + 1);\n                timeString = timeString.substring(0, differencePosition);\n                if ((differenceString.length !== 2) && (differenceString.length !== 4))\n                    throw new Error(\"Wrong input string for conversion\");\n                let number = parseInt(differenceString.substring(0, 2), 10);\n                if (isNaN(number.valueOf()))\n                    throw new Error(\"Wrong input string for conversion\");\n                hourDifference = multiplier * number;\n                if (differenceString.length === 4) {\n                    number = parseInt(differenceString.substring(2, 4), 10);\n                    if (isNaN(number.valueOf()))\n                        throw new Error(\"Wrong input string for conversion\");\n                    minuteDifference = multiplier * number;\n                }\n            }\n        }\n        let fractionPointPosition = timeString.indexOf(\".\");\n        if (fractionPointPosition === -1)\n            fractionPointPosition = timeString.indexOf(\",\");\n        if (fractionPointPosition !== -1) {\n            const fractionPartCheck = new Number(`0${timeString.substring(fractionPointPosition)}`);\n            if (isNaN(fractionPartCheck.valueOf()))\n                throw new Error(\"Wrong input string for conversion\");\n            fractionPart = fractionPartCheck.valueOf();\n            dateTimeString = timeString.substring(0, fractionPointPosition);\n        }\n        else\n            dateTimeString = timeString;\n        switch (true) {\n            case (dateTimeString.length === 8):\n                parser = /(\\d{4})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1)\n                    throw new Error(\"Wrong input string for conversion\");\n                break;\n            case (dateTimeString.length === 10):\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1) {\n                    let fractionResult = 60 * fractionPart;\n                    this.minute = Math.floor(fractionResult);\n                    fractionResult = 60 * (fractionResult - this.minute);\n                    this.second = Math.floor(fractionResult);\n                    fractionResult = 1000 * (fractionResult - this.second);\n                    this.millisecond = Math.floor(fractionResult);\n                }\n                break;\n            case (dateTimeString.length === 12):\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1) {\n                    let fractionResult = 60 * fractionPart;\n                    this.second = Math.floor(fractionResult);\n                    fractionResult = 1000 * (fractionResult - this.second);\n                    this.millisecond = Math.floor(fractionResult);\n                }\n                break;\n            case (dateTimeString.length === 14):\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1) {\n                    const fractionResult = 1000 * fractionPart;\n                    this.millisecond = Math.floor(fractionResult);\n                }\n                break;\n            default:\n                throw new Error(\"Wrong input string for conversion\");\n        }\n        const parserArray = parser.exec(dateTimeString);\n        if (parserArray === null)\n            throw new Error(\"Wrong input string for conversion\");\n        for (let j = 1; j < parserArray.length; j++) {\n            switch (j) {\n                case 1:\n                    this.year = parseInt(parserArray[j], 10);\n                    break;\n                case 2:\n                    this.month = parseInt(parserArray[j], 10);\n                    break;\n                case 3:\n                    this.day = parseInt(parserArray[j], 10);\n                    break;\n                case 4:\n                    this.hour = parseInt(parserArray[j], 10) + hourDifference;\n                    break;\n                case 5:\n                    this.minute = parseInt(parserArray[j], 10) + minuteDifference;\n                    break;\n                case 6:\n                    this.second = parseInt(parserArray[j], 10);\n                    break;\n                default:\n                    throw new Error(\"Wrong input string for conversion\");\n            }\n        }\n        if (isUTC === false) {\n            const tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n            this.year = tempDate.getUTCFullYear();\n            this.month = tempDate.getUTCMonth();\n            this.day = tempDate.getUTCDay();\n            this.hour = tempDate.getUTCHours();\n            this.minute = tempDate.getUTCMinutes();\n            this.second = tempDate.getUTCSeconds();\n            this.millisecond = tempDate.getUTCMilliseconds();\n        }\n    }\n    toString(encoding = \"iso\") {\n        if (encoding === \"iso\") {\n            const outputArray = [];\n            outputArray.push(pvutils.padNumber(this.year, 4));\n            outputArray.push(pvutils.padNumber(this.month, 2));\n            outputArray.push(pvutils.padNumber(this.day, 2));\n            outputArray.push(pvutils.padNumber(this.hour, 2));\n            outputArray.push(pvutils.padNumber(this.minute, 2));\n            outputArray.push(pvutils.padNumber(this.second, 2));\n            if (this.millisecond !== 0) {\n                outputArray.push(\".\");\n                outputArray.push(pvutils.padNumber(this.millisecond, 3));\n            }\n            outputArray.push(\"Z\");\n            return outputArray.join(\"\");\n        }\n        return super.toString(encoding);\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            millisecond: this.millisecond,\n        };\n    }\n}\n_a$5 = GeneralizedTime;\n(() => {\n    typeStore.GeneralizedTime = _a$5;\n})();\nGeneralizedTime.NAME = \"GeneralizedTime\";\n\nvar _a$4;\nclass DATE extends Utf8String {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 31;\n    }\n}\n_a$4 = DATE;\n(() => {\n    typeStore.DATE = _a$4;\n})();\nDATE.NAME = \"DATE\";\n\nvar _a$3;\nclass TimeOfDay extends Utf8String {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 32;\n    }\n}\n_a$3 = TimeOfDay;\n(() => {\n    typeStore.TimeOfDay = _a$3;\n})();\nTimeOfDay.NAME = \"TimeOfDay\";\n\nvar _a$2;\nclass DateTime extends Utf8String {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 33;\n    }\n}\n_a$2 = DateTime;\n(() => {\n    typeStore.DateTime = _a$2;\n})();\nDateTime.NAME = \"DateTime\";\n\nvar _a$1;\nclass Duration extends Utf8String {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 34;\n    }\n}\n_a$1 = Duration;\n(() => {\n    typeStore.Duration = _a$1;\n})();\nDuration.NAME = \"Duration\";\n\nvar _a;\nclass TIME extends Utf8String {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 14;\n    }\n}\n_a = TIME;\n(() => {\n    typeStore.TIME = _a;\n})();\nTIME.NAME = \"TIME\";\n\nclass Any {\n    constructor({ name = EMPTY_STRING, optional = false } = {}) {\n        this.name = name;\n        this.optional = optional;\n    }\n}\n\nclass Choice extends Any {\n    constructor({ value = [], ...parameters } = {}) {\n        super(parameters);\n        this.value = value;\n    }\n}\n\nclass Repeated extends Any {\n    constructor({ value = new Any(), local = false, ...parameters } = {}) {\n        super(parameters);\n        this.value = value;\n        this.local = local;\n    }\n}\n\nclass RawData {\n    get data() {\n        return this.dataView.slice().buffer;\n    }\n    set data(value) {\n        this.dataView = pvtsutils.BufferSourceConverter.toUint8Array(value);\n    }\n    constructor({ data = EMPTY_VIEW } = {}) {\n        this.dataView = pvtsutils.BufferSourceConverter.toUint8Array(data);\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const endLength = inputOffset + inputLength;\n        this.dataView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer).subarray(inputOffset, endLength);\n        return endLength;\n    }\n    toBER(_sizeOnly) {\n        return this.dataView.slice().buffer;\n    }\n}\n\nfunction compareSchema(root, inputData, inputSchema) {\n    if (inputSchema instanceof Choice) {\n        for (const element of inputSchema.value) {\n            const result = compareSchema(root, inputData, element);\n            if (result.verified) {\n                return {\n                    verified: true,\n                    result: root,\n                };\n            }\n        }\n        {\n            const _result = {\n                verified: false,\n                result: { error: \"Wrong values for Choice type\" },\n            };\n            if (inputSchema.hasOwnProperty(NAME))\n                _result.name = inputSchema.name;\n            return _result;\n        }\n    }\n    if (inputSchema instanceof Any) {\n        if (inputSchema.hasOwnProperty(NAME))\n            root[inputSchema.name] = inputData;\n        return {\n            verified: true,\n            result: root,\n        };\n    }\n    if ((root instanceof Object) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong root object\" },\n        };\n    }\n    if ((inputData instanceof Object) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 data\" },\n        };\n    }\n    if ((inputSchema instanceof Object) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if ((ID_BLOCK in inputSchema) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if ((FROM_BER in inputSchema.idBlock) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if ((TO_BER in inputSchema.idBlock) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    const encodedId = inputSchema.idBlock.toBER(false);\n    if (encodedId.byteLength === 0) {\n        return {\n            verified: false,\n            result: { error: \"Error encoding idBlock for ASN.1 schema\" },\n        };\n    }\n    const decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);\n    if (decodedOffset === -1) {\n        return {\n            verified: false,\n            result: { error: \"Error decoding idBlock for ASN.1 schema\" },\n        };\n    }\n    if (inputSchema.idBlock.hasOwnProperty(TAG_CLASS) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if (inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass) {\n        return {\n            verified: false,\n            result: root,\n        };\n    }\n    if (inputSchema.idBlock.hasOwnProperty(TAG_NUMBER) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if (inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber) {\n        return {\n            verified: false,\n            result: root,\n        };\n    }\n    if (inputSchema.idBlock.hasOwnProperty(IS_CONSTRUCTED) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if (inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed) {\n        return {\n            verified: false,\n            result: root,\n        };\n    }\n    if (!(IS_HEX_ONLY in inputSchema.idBlock)) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if (inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly) {\n        return {\n            verified: false,\n            result: root,\n        };\n    }\n    if (inputSchema.idBlock.isHexOnly) {\n        if ((VALUE_HEX_VIEW in inputSchema.idBlock) === false) {\n            return {\n                verified: false,\n                result: { error: \"Wrong ASN.1 schema\" },\n            };\n        }\n        const schemaView = inputSchema.idBlock.valueHexView;\n        const asn1View = inputData.idBlock.valueHexView;\n        if (schemaView.length !== asn1View.length) {\n            return {\n                verified: false,\n                result: root,\n            };\n        }\n        for (let i = 0; i < schemaView.length; i++) {\n            if (schemaView[i] !== asn1View[1]) {\n                return {\n                    verified: false,\n                    result: root,\n                };\n            }\n        }\n    }\n    if (inputSchema.name) {\n        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n        if (inputSchema.name)\n            root[inputSchema.name] = inputData;\n    }\n    if (inputSchema instanceof typeStore.Constructed) {\n        let admission = 0;\n        let result = {\n            verified: false,\n            result: { error: \"Unknown error\" },\n        };\n        let maxLength = inputSchema.valueBlock.value.length;\n        if (maxLength > 0) {\n            if (inputSchema.valueBlock.value[0] instanceof Repeated) {\n                maxLength = inputData.valueBlock.value.length;\n            }\n        }\n        if (maxLength === 0) {\n            return {\n                verified: true,\n                result: root,\n            };\n        }\n        if ((inputData.valueBlock.value.length === 0)\n            && (inputSchema.valueBlock.value.length !== 0)) {\n            let _optional = true;\n            for (let i = 0; i < inputSchema.valueBlock.value.length; i++)\n                _optional = _optional && (inputSchema.valueBlock.value[i].optional || false);\n            if (_optional) {\n                return {\n                    verified: true,\n                    result: root,\n                };\n            }\n            if (inputSchema.name) {\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                if (inputSchema.name)\n                    delete root[inputSchema.name];\n            }\n            root.error = \"Inconsistent object length\";\n            return {\n                verified: false,\n                result: root,\n            };\n        }\n        for (let i = 0; i < maxLength; i++) {\n            if ((i - admission) >= inputData.valueBlock.value.length) {\n                if (inputSchema.valueBlock.value[i].optional === false) {\n                    const _result = {\n                        verified: false,\n                        result: root,\n                    };\n                    root.error = \"Inconsistent length between ASN.1 data and schema\";\n                    if (inputSchema.name) {\n                        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                        if (inputSchema.name) {\n                            delete root[inputSchema.name];\n                            _result.name = inputSchema.name;\n                        }\n                    }\n                    return _result;\n                }\n            }\n            else {\n                if (inputSchema.valueBlock.value[0] instanceof Repeated) {\n                    result = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);\n                    if (result.verified === false) {\n                        if (inputSchema.valueBlock.value[0].optional)\n                            admission++;\n                        else {\n                            if (inputSchema.name) {\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                                if (inputSchema.name)\n                                    delete root[inputSchema.name];\n                            }\n                            return result;\n                        }\n                    }\n                    if ((NAME in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].name.length > 0)) {\n                        let arrayRoot = {};\n                        if ((LOCAL in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].local))\n                            arrayRoot = inputData;\n                        else\n                            arrayRoot = root;\n                        if (typeof arrayRoot[inputSchema.valueBlock.value[0].name] === \"undefined\")\n                            arrayRoot[inputSchema.valueBlock.value[0].name] = [];\n                        arrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);\n                    }\n                }\n                else {\n                    result = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);\n                    if (result.verified === false) {\n                        if (inputSchema.valueBlock.value[i].optional)\n                            admission++;\n                        else {\n                            if (inputSchema.name) {\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                                if (inputSchema.name)\n                                    delete root[inputSchema.name];\n                            }\n                            return result;\n                        }\n                    }\n                }\n            }\n        }\n        if (result.verified === false) {\n            const _result = {\n                verified: false,\n                result: root,\n            };\n            if (inputSchema.name) {\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                if (inputSchema.name) {\n                    delete root[inputSchema.name];\n                    _result.name = inputSchema.name;\n                }\n            }\n            return _result;\n        }\n        return {\n            verified: true,\n            result: root,\n        };\n    }\n    if (inputSchema.primitiveSchema\n        && (VALUE_HEX_VIEW in inputData.valueBlock)) {\n        const asn1 = localFromBER(inputData.valueBlock.valueHexView);\n        if (asn1.offset === -1) {\n            const _result = {\n                verified: false,\n                result: asn1.result,\n            };\n            if (inputSchema.name) {\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                if (inputSchema.name) {\n                    delete root[inputSchema.name];\n                    _result.name = inputSchema.name;\n                }\n            }\n            return _result;\n        }\n        return compareSchema(root, asn1.result, inputSchema.primitiveSchema);\n    }\n    return {\n        verified: true,\n        result: root,\n    };\n}\nfunction verifySchema(inputBuffer, inputSchema) {\n    if ((inputSchema instanceof Object) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema type\" },\n        };\n    }\n    const asn1 = localFromBER(pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer));\n    if (asn1.offset === -1) {\n        return {\n            verified: false,\n            result: asn1.result,\n        };\n    }\n    return compareSchema(asn1.result, asn1.result, inputSchema);\n}\n\nexport { Any, BaseBlock, BaseStringBlock, BitString, BmpString, Boolean, CharacterString, Choice, Constructed, DATE, DateTime, Duration, EndOfContent, Enumerated, GeneralString, GeneralizedTime, GraphicString, HexBlock, IA5String, Integer, Null, NumericString, ObjectIdentifier, OctetString, Primitive, PrintableString, RawData, RelativeObjectIdentifier, Repeated, Sequence, Set, TIME, TeletexString, TimeOfDay, UTCTime, UniversalString, Utf8String, ValueBlock, VideotexString, ViewWriter, VisibleString, compareSchema, fromBER, verifySchema };\n", "/*!\n * MIT License\n * \n * Copyright (c) 2017-2024 Peculiar Ventures, LLC\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n */\n\nconst ARRAY_BUFFER_NAME = \"[object ArrayBuffer]\";\nclass BufferSourceConverter {\n    static isArrayBuffer(data) {\n        return Object.prototype.toString.call(data) === ARRAY_BUFFER_NAME;\n    }\n    static toArrayBuffer(data) {\n        if (this.isArrayBuffer(data)) {\n            return data;\n        }\n        if (data.byteLength === data.buffer.byteLength) {\n            return data.buffer;\n        }\n        if (data.byteOffset === 0 && data.byteLength === data.buffer.byteLength) {\n            return data.buffer;\n        }\n        return this.toUint8Array(data.buffer)\n            .slice(data.byteOffset, data.byteOffset + data.byteLength)\n            .buffer;\n    }\n    static toUint8Array(data) {\n        return this.toView(data, Uint8Array);\n    }\n    static toView(data, type) {\n        if (data.constructor === type) {\n            return data;\n        }\n        if (this.isArrayBuffer(data)) {\n            return new type(data);\n        }\n        if (this.isArrayBufferView(data)) {\n            return new type(data.buffer, data.byteOffset, data.byteLength);\n        }\n        throw new TypeError(\"The provided value is not of type '(ArrayBuffer or ArrayBufferView)'\");\n    }\n    static isBufferSource(data) {\n        return this.isArrayBufferView(data)\n            || this.isArrayBuffer(data);\n    }\n    static isArrayBufferView(data) {\n        return ArrayBuffer.isView(data)\n            || (data && this.isArrayBuffer(data.buffer));\n    }\n    static isEqual(a, b) {\n        const aView = BufferSourceConverter.toUint8Array(a);\n        const bView = BufferSourceConverter.toUint8Array(b);\n        if (aView.length !== bView.byteLength) {\n            return false;\n        }\n        for (let i = 0; i < aView.length; i++) {\n            if (aView[i] !== bView[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static concat(...args) {\n        let buffers;\n        if (Array.isArray(args[0]) && !(args[1] instanceof Function)) {\n            buffers = args[0];\n        }\n        else if (Array.isArray(args[0]) && args[1] instanceof Function) {\n            buffers = args[0];\n        }\n        else {\n            if (args[args.length - 1] instanceof Function) {\n                buffers = args.slice(0, args.length - 1);\n            }\n            else {\n                buffers = args;\n            }\n        }\n        let size = 0;\n        for (const buffer of buffers) {\n            size += buffer.byteLength;\n        }\n        const res = new Uint8Array(size);\n        let offset = 0;\n        for (const buffer of buffers) {\n            const view = this.toUint8Array(buffer);\n            res.set(view, offset);\n            offset += view.length;\n        }\n        if (args[args.length - 1] instanceof Function) {\n            return this.toView(res, args[args.length - 1]);\n        }\n        return res.buffer;\n    }\n}\n\nconst STRING_TYPE = \"string\";\nconst HEX_REGEX = /^[0-9a-f\\s]+$/i;\nconst BASE64_REGEX = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;\nconst BASE64URL_REGEX = /^[a-zA-Z0-9-_]+$/;\nclass Utf8Converter {\n    static fromString(text) {\n        const s = unescape(encodeURIComponent(text));\n        const uintArray = new Uint8Array(s.length);\n        for (let i = 0; i < s.length; i++) {\n            uintArray[i] = s.charCodeAt(i);\n        }\n        return uintArray.buffer;\n    }\n    static toString(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let encodedString = \"\";\n        for (let i = 0; i < buf.length; i++) {\n            encodedString += String.fromCharCode(buf[i]);\n        }\n        const decodedString = decodeURIComponent(escape(encodedString));\n        return decodedString;\n    }\n}\nclass Utf16Converter {\n    static toString(buffer, littleEndian = false) {\n        const arrayBuffer = BufferSourceConverter.toArrayBuffer(buffer);\n        const dataView = new DataView(arrayBuffer);\n        let res = \"\";\n        for (let i = 0; i < arrayBuffer.byteLength; i += 2) {\n            const code = dataView.getUint16(i, littleEndian);\n            res += String.fromCharCode(code);\n        }\n        return res;\n    }\n    static fromString(text, littleEndian = false) {\n        const res = new ArrayBuffer(text.length * 2);\n        const dataView = new DataView(res);\n        for (let i = 0; i < text.length; i++) {\n            dataView.setUint16(i * 2, text.charCodeAt(i), littleEndian);\n        }\n        return res;\n    }\n}\nclass Convert {\n    static isHex(data) {\n        return typeof data === STRING_TYPE\n            && HEX_REGEX.test(data);\n    }\n    static isBase64(data) {\n        return typeof data === STRING_TYPE\n            && BASE64_REGEX.test(data);\n    }\n    static isBase64Url(data) {\n        return typeof data === STRING_TYPE\n            && BASE64URL_REGEX.test(data);\n    }\n    static ToString(buffer, enc = \"utf8\") {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        switch (enc.toLowerCase()) {\n            case \"utf8\":\n                return this.ToUtf8String(buf);\n            case \"binary\":\n                return this.ToBinary(buf);\n            case \"hex\":\n                return this.ToHex(buf);\n            case \"base64\":\n                return this.ToBase64(buf);\n            case \"base64url\":\n                return this.ToBase64Url(buf);\n            case \"utf16le\":\n                return Utf16Converter.toString(buf, true);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.toString(buf);\n            default:\n                throw new Error(`Unknown type of encoding '${enc}'`);\n        }\n    }\n    static FromString(str, enc = \"utf8\") {\n        if (!str) {\n            return new ArrayBuffer(0);\n        }\n        switch (enc.toLowerCase()) {\n            case \"utf8\":\n                return this.FromUtf8String(str);\n            case \"binary\":\n                return this.FromBinary(str);\n            case \"hex\":\n                return this.FromHex(str);\n            case \"base64\":\n                return this.FromBase64(str);\n            case \"base64url\":\n                return this.FromBase64Url(str);\n            case \"utf16le\":\n                return Utf16Converter.fromString(str, true);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.fromString(str);\n            default:\n                throw new Error(`Unknown type of encoding '${enc}'`);\n        }\n    }\n    static ToBase64(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        if (typeof btoa !== \"undefined\") {\n            const binary = this.ToString(buf, \"binary\");\n            return btoa(binary);\n        }\n        else {\n            return Buffer.from(buf).toString(\"base64\");\n        }\n    }\n    static FromBase64(base64) {\n        const formatted = this.formatString(base64);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isBase64(formatted)) {\n            throw new TypeError(\"Argument 'base64Text' is not Base64 encoded\");\n        }\n        if (typeof atob !== \"undefined\") {\n            return this.FromBinary(atob(formatted));\n        }\n        else {\n            return new Uint8Array(Buffer.from(formatted, \"base64\")).buffer;\n        }\n    }\n    static FromBase64Url(base64url) {\n        const formatted = this.formatString(base64url);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isBase64Url(formatted)) {\n            throw new TypeError(\"Argument 'base64url' is not Base64Url encoded\");\n        }\n        return this.FromBase64(this.Base64Padding(formatted.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\")));\n    }\n    static ToBase64Url(data) {\n        return this.ToBase64(data).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=/g, \"\");\n    }\n    static FromUtf8String(text, encoding = Convert.DEFAULT_UTF8_ENCODING) {\n        switch (encoding) {\n            case \"ascii\":\n                return this.FromBinary(text);\n            case \"utf8\":\n                return Utf8Converter.fromString(text);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.fromString(text);\n            case \"utf16le\":\n            case \"usc2\":\n                return Utf16Converter.fromString(text, true);\n            default:\n                throw new Error(`Unknown type of encoding '${encoding}'`);\n        }\n    }\n    static ToUtf8String(buffer, encoding = Convert.DEFAULT_UTF8_ENCODING) {\n        switch (encoding) {\n            case \"ascii\":\n                return this.ToBinary(buffer);\n            case \"utf8\":\n                return Utf8Converter.toString(buffer);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.toString(buffer);\n            case \"utf16le\":\n            case \"usc2\":\n                return Utf16Converter.toString(buffer, true);\n            default:\n                throw new Error(`Unknown type of encoding '${encoding}'`);\n        }\n    }\n    static FromBinary(text) {\n        const stringLength = text.length;\n        const resultView = new Uint8Array(stringLength);\n        for (let i = 0; i < stringLength; i++) {\n            resultView[i] = text.charCodeAt(i);\n        }\n        return resultView.buffer;\n    }\n    static ToBinary(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let res = \"\";\n        for (let i = 0; i < buf.length; i++) {\n            res += String.fromCharCode(buf[i]);\n        }\n        return res;\n    }\n    static ToHex(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let result = \"\";\n        const len = buf.length;\n        for (let i = 0; i < len; i++) {\n            const byte = buf[i];\n            if (byte < 16) {\n                result += \"0\";\n            }\n            result += byte.toString(16);\n        }\n        return result;\n    }\n    static FromHex(hexString) {\n        let formatted = this.formatString(hexString);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isHex(formatted)) {\n            throw new TypeError(\"Argument 'hexString' is not HEX encoded\");\n        }\n        if (formatted.length % 2) {\n            formatted = `0${formatted}`;\n        }\n        const res = new Uint8Array(formatted.length / 2);\n        for (let i = 0; i < formatted.length; i = i + 2) {\n            const c = formatted.slice(i, i + 2);\n            res[i / 2] = parseInt(c, 16);\n        }\n        return res.buffer;\n    }\n    static ToUtf16String(buffer, littleEndian = false) {\n        return Utf16Converter.toString(buffer, littleEndian);\n    }\n    static FromUtf16String(text, littleEndian = false) {\n        return Utf16Converter.fromString(text, littleEndian);\n    }\n    static Base64Padding(base64) {\n        const padCount = 4 - (base64.length % 4);\n        if (padCount < 4) {\n            for (let i = 0; i < padCount; i++) {\n                base64 += \"=\";\n            }\n        }\n        return base64;\n    }\n    static formatString(data) {\n        return (data === null || data === void 0 ? void 0 : data.replace(/[\\n\\r\\t ]/g, \"\")) || \"\";\n    }\n}\nConvert.DEFAULT_UTF8_ENCODING = \"utf8\";\n\nfunction assign(target, ...sources) {\n    const res = arguments[0];\n    for (let i = 1; i < arguments.length; i++) {\n        const obj = arguments[i];\n        for (const prop in obj) {\n            res[prop] = obj[prop];\n        }\n    }\n    return res;\n}\nfunction combine(...buf) {\n    const totalByteLength = buf.map((item) => item.byteLength).reduce((prev, cur) => prev + cur);\n    const res = new Uint8Array(totalByteLength);\n    let currentPos = 0;\n    buf.map((item) => new Uint8Array(item)).forEach((arr) => {\n        for (const item2 of arr) {\n            res[currentPos++] = item2;\n        }\n    });\n    return res.buffer;\n}\nfunction isEqual(bytes1, bytes2) {\n    if (!(bytes1 && bytes2)) {\n        return false;\n    }\n    if (bytes1.byteLength !== bytes2.byteLength) {\n        return false;\n    }\n    const b1 = new Uint8Array(bytes1);\n    const b2 = new Uint8Array(bytes2);\n    for (let i = 0; i < bytes1.byteLength; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport { BufferSourceConverter, Convert, assign, combine, isEqual };\n", "/*!\n Copyright (c) Peculiar Ventures, LLC\n*/\n\nfunction getUTCDate(date) {\r\n    return new Date(date.getTime() + (date.getTimezoneOffset() * 60000));\r\n}\r\nfunction getParametersValue(parameters, name, defaultValue) {\r\n    var _a;\r\n    if ((parameters instanceof Object) === false) {\r\n        return defaultValue;\r\n    }\r\n    return (_a = parameters[name]) !== null && _a !== void 0 ? _a : defaultValue;\r\n}\r\nfunction bufferToHexCodes(inputBuffer, inputOffset = 0, inputLength = (inputBuffer.byteLength - inputOffset), insertSpace = false) {\r\n    let result = \"\";\r\n    for (const item of (new Uint8Array(inputBuffer, inputOffset, inputLength))) {\r\n        const str = item.toString(16).toUpperCase();\r\n        if (str.length === 1) {\r\n            result += \"0\";\r\n        }\r\n        result += str;\r\n        if (insertSpace) {\r\n            result += \" \";\r\n        }\r\n    }\r\n    return result.trim();\r\n}\r\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\r\n    if (!(inputBuffer instanceof ArrayBuffer)) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer must be \\\"ArrayBuffer\\\"\";\r\n        return false;\r\n    }\r\n    if (!inputBuffer.byteLength) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\r\n        return false;\r\n    }\r\n    if (inputOffset < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\r\n        return false;\r\n    }\r\n    if (inputLength < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\r\n        return false;\r\n    }\r\n    if ((inputBuffer.byteLength - inputOffset - inputLength) < 0) {\r\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction utilFromBase(inputBuffer, inputBase) {\r\n    let result = 0;\r\n    if (inputBuffer.length === 1) {\r\n        return inputBuffer[0];\r\n    }\r\n    for (let i = (inputBuffer.length - 1); i >= 0; i--) {\r\n        result += inputBuffer[(inputBuffer.length - 1) - i] * Math.pow(2, inputBase * i);\r\n    }\r\n    return result;\r\n}\r\nfunction utilToBase(value, base, reserved = (-1)) {\r\n    const internalReserved = reserved;\r\n    let internalValue = value;\r\n    let result = 0;\r\n    let biggest = Math.pow(2, base);\r\n    for (let i = 1; i < 8; i++) {\r\n        if (value < biggest) {\r\n            let retBuf;\r\n            if (internalReserved < 0) {\r\n                retBuf = new ArrayBuffer(i);\r\n                result = i;\r\n            }\r\n            else {\r\n                if (internalReserved < i) {\r\n                    return (new ArrayBuffer(0));\r\n                }\r\n                retBuf = new ArrayBuffer(internalReserved);\r\n                result = internalReserved;\r\n            }\r\n            const retView = new Uint8Array(retBuf);\r\n            for (let j = (i - 1); j >= 0; j--) {\r\n                const basis = Math.pow(2, j * base);\r\n                retView[result - j - 1] = Math.floor(internalValue / basis);\r\n                internalValue -= (retView[result - j - 1]) * basis;\r\n            }\r\n            return retBuf;\r\n        }\r\n        biggest *= Math.pow(2, base);\r\n    }\r\n    return new ArrayBuffer(0);\r\n}\r\nfunction utilConcatBuf(...buffers) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const buffer of buffers) {\r\n        outputLength += buffer.byteLength;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const buffer of buffers) {\r\n        retView.set(new Uint8Array(buffer), prevLength);\r\n        prevLength += buffer.byteLength;\r\n    }\r\n    return retBuf;\r\n}\r\nfunction utilConcatView(...views) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const view of views) {\r\n        outputLength += view.length;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const view of views) {\r\n        retView.set(view, prevLength);\r\n        prevLength += view.length;\r\n    }\r\n    return retView;\r\n}\r\nfunction utilDecodeTC() {\r\n    const buf = new Uint8Array(this.valueHex);\r\n    if (this.valueHex.byteLength >= 2) {\r\n        const condition1 = (buf[0] === 0xFF) && (buf[1] & 0x80);\r\n        const condition2 = (buf[0] === 0x00) && ((buf[1] & 0x80) === 0x00);\r\n        if (condition1 || condition2) {\r\n            this.warnings.push(\"Needlessly long format\");\r\n        }\r\n    }\r\n    const bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const bigIntView = new Uint8Array(bigIntBuffer);\r\n    for (let i = 0; i < this.valueHex.byteLength; i++) {\r\n        bigIntView[i] = 0;\r\n    }\r\n    bigIntView[0] = (buf[0] & 0x80);\r\n    const bigInt = utilFromBase(bigIntView, 8);\r\n    const smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const smallIntView = new Uint8Array(smallIntBuffer);\r\n    for (let j = 0; j < this.valueHex.byteLength; j++) {\r\n        smallIntView[j] = buf[j];\r\n    }\r\n    smallIntView[0] &= 0x7F;\r\n    const smallInt = utilFromBase(smallIntView, 8);\r\n    return (smallInt - bigInt);\r\n}\r\nfunction utilEncodeTC(value) {\r\n    const modValue = (value < 0) ? (value * (-1)) : value;\r\n    let bigInt = 128;\r\n    for (let i = 1; i < 8; i++) {\r\n        if (modValue <= bigInt) {\r\n            if (value < 0) {\r\n                const smallInt = bigInt - modValue;\r\n                const retBuf = utilToBase(smallInt, 8, i);\r\n                const retView = new Uint8Array(retBuf);\r\n                retView[0] |= 0x80;\r\n                return retBuf;\r\n            }\r\n            let retBuf = utilToBase(modValue, 8, i);\r\n            let retView = new Uint8Array(retBuf);\r\n            if (retView[0] & 0x80) {\r\n                const tempBuf = retBuf.slice(0);\r\n                const tempView = new Uint8Array(tempBuf);\r\n                retBuf = new ArrayBuffer(retBuf.byteLength + 1);\r\n                retView = new Uint8Array(retBuf);\r\n                for (let k = 0; k < tempBuf.byteLength; k++) {\r\n                    retView[k + 1] = tempView[k];\r\n                }\r\n                retView[0] = 0x00;\r\n            }\r\n            return retBuf;\r\n        }\r\n        bigInt *= Math.pow(2, 8);\r\n    }\r\n    return (new ArrayBuffer(0));\r\n}\r\nfunction isEqualBuffer(inputBuffer1, inputBuffer2) {\r\n    if (inputBuffer1.byteLength !== inputBuffer2.byteLength) {\r\n        return false;\r\n    }\r\n    const view1 = new Uint8Array(inputBuffer1);\r\n    const view2 = new Uint8Array(inputBuffer2);\r\n    for (let i = 0; i < view1.length; i++) {\r\n        if (view1[i] !== view2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction padNumber(inputNumber, fullLength) {\r\n    const str = inputNumber.toString(10);\r\n    if (fullLength < str.length) {\r\n        return \"\";\r\n    }\r\n    const dif = fullLength - str.length;\r\n    const padding = new Array(dif);\r\n    for (let i = 0; i < dif; i++) {\r\n        padding[i] = \"0\";\r\n    }\r\n    const paddingString = padding.join(\"\");\r\n    return paddingString.concat(str);\r\n}\r\nconst base64Template = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\nconst base64UrlTemplate = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\";\r\nfunction toBase64(input, useUrlTemplate = false, skipPadding = false, skipLeadingZeros = false) {\r\n    let i = 0;\r\n    let flag1 = 0;\r\n    let flag2 = 0;\r\n    let output = \"\";\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    if (skipLeadingZeros) {\r\n        let nonZeroPosition = 0;\r\n        for (let i = 0; i < input.length; i++) {\r\n            if (input.charCodeAt(i) !== 0) {\r\n                nonZeroPosition = i;\r\n                break;\r\n            }\r\n        }\r\n        input = input.slice(nonZeroPosition);\r\n    }\r\n    while (i < input.length) {\r\n        const chr1 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag1 = 1;\r\n        }\r\n        const chr2 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag2 = 1;\r\n        }\r\n        const chr3 = input.charCodeAt(i++);\r\n        const enc1 = chr1 >> 2;\r\n        const enc2 = ((chr1 & 0x03) << 4) | (chr2 >> 4);\r\n        let enc3 = ((chr2 & 0x0F) << 2) | (chr3 >> 6);\r\n        let enc4 = chr3 & 0x3F;\r\n        if (flag1 === 1) {\r\n            enc3 = enc4 = 64;\r\n        }\r\n        else {\r\n            if (flag2 === 1) {\r\n                enc4 = 64;\r\n            }\r\n        }\r\n        if (skipPadding) {\r\n            if (enc3 === 64) {\r\n                output += `${template.charAt(enc1)}${template.charAt(enc2)}`;\r\n            }\r\n            else {\r\n                if (enc4 === 64) {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}`;\r\n                }\r\n                else {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction fromBase64(input, useUrlTemplate = false, cutTailZeros = false) {\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    function indexOf(toSearch) {\r\n        for (let i = 0; i < 64; i++) {\r\n            if (template.charAt(i) === toSearch)\r\n                return i;\r\n        }\r\n        return 64;\r\n    }\r\n    function test(incoming) {\r\n        return ((incoming === 64) ? 0x00 : incoming);\r\n    }\r\n    let i = 0;\r\n    let output = \"\";\r\n    while (i < input.length) {\r\n        const enc1 = indexOf(input.charAt(i++));\r\n        const enc2 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc3 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc4 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const chr1 = (test(enc1) << 2) | (test(enc2) >> 4);\r\n        const chr2 = ((test(enc2) & 0x0F) << 4) | (test(enc3) >> 2);\r\n        const chr3 = ((test(enc3) & 0x03) << 6) | test(enc4);\r\n        output += String.fromCharCode(chr1);\r\n        if (enc3 !== 64) {\r\n            output += String.fromCharCode(chr2);\r\n        }\r\n        if (enc4 !== 64) {\r\n            output += String.fromCharCode(chr3);\r\n        }\r\n    }\r\n    if (cutTailZeros) {\r\n        const outputLength = output.length;\r\n        let nonZeroStart = (-1);\r\n        for (let i = (outputLength - 1); i >= 0; i--) {\r\n            if (output.charCodeAt(i) !== 0) {\r\n                nonZeroStart = i;\r\n                break;\r\n            }\r\n        }\r\n        if (nonZeroStart !== (-1)) {\r\n            output = output.slice(0, nonZeroStart + 1);\r\n        }\r\n        else {\r\n            output = \"\";\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction arrayBufferToString(buffer) {\r\n    let resultString = \"\";\r\n    const view = new Uint8Array(buffer);\r\n    for (const element of view) {\r\n        resultString += String.fromCharCode(element);\r\n    }\r\n    return resultString;\r\n}\r\nfunction stringToArrayBuffer(str) {\r\n    const stringLength = str.length;\r\n    const resultBuffer = new ArrayBuffer(stringLength);\r\n    const resultView = new Uint8Array(resultBuffer);\r\n    for (let i = 0; i < stringLength; i++) {\r\n        resultView[i] = str.charCodeAt(i);\r\n    }\r\n    return resultBuffer;\r\n}\r\nconst log2 = Math.log(2);\r\nfunction nearestPowerOf2(length) {\r\n    const base = (Math.log(length) / log2);\r\n    const floor = Math.floor(base);\r\n    const round = Math.round(base);\r\n    return ((floor === round) ? floor : round);\r\n}\r\nfunction clearProps(object, propsArray) {\r\n    for (const prop of propsArray) {\r\n        delete object[prop];\r\n    }\r\n}\n\nexport { arrayBufferToString, bufferToHexCodes, checkBufferParams, clearProps, fromBase64, getParametersValue, getUTCDate, isEqualBuffer, nearestPowerOf2, padNumber, stringToArrayBuffer, toBase64, utilConcatBuf, utilConcatView, utilDecodeTC, utilEncodeTC, utilFromBase, utilToBase };\n", "import { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n", "export const SALT_LENGTH = 16\nexport const KEY_SIZE = 32\nexport const ITERATIONS = 10000\n", "import { randomBytes } from '@libp2p/crypto'\nimport { AES_GCM } from '@libp2p/crypto/ciphers'\nimport { privateKeyToProtobuf } from '@libp2p/crypto/keys'\nimport webcrypto from '@libp2p/crypto/webcrypto'\nimport { InvalidParametersError, UnsupportedKeyTypeError } from '@libp2p/interface'\nimport { pbkdf2Async } from '@noble/hashes/pbkdf2'\nimport { sha512 } from '@noble/hashes/sha512'\nimport * as asn1js from 'asn1js'\nimport { base64 } from 'multiformats/bases/base64'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { ITERATIONS, KEY_SIZE, SALT_LENGTH } from './constants.js'\nimport type { ECDSAPrivateKey, Ed25519PrivateKey, PrivateKey, RSAPrivateKey, Secp256k1PrivateKey } from '@libp2p/interface'\nimport type { Multibase } from 'multiformats/bases/interface'\n\n/**\n * Exports the given PrivateKey as a base64 encoded string.\n * The PrivateKey is encrypted via a password derived PBKDF2 key\n * leveraging the aes-gcm cipher algorithm.\n */\nexport async function exporter (privateKey: Uint8Array, password: string): Promise<Multibase<'m'>> {\n  const cipher = AES_GCM.create()\n  const encryptedKey = await cipher.encrypt(privateKey, password)\n  return base64.encode(encryptedKey)\n}\n\nexport type ExportFormat = 'pkcs-8' | 'libp2p-key'\n\n/**\n * Converts an exported private key into its representative object.\n *\n * Supported formats are 'pem' (RSA only) and 'libp2p-key'.\n */\nexport async function exportPrivateKey (key: PrivateKey, password: string, format?: ExportFormat): Promise<Multibase<'m'>> {\n  if (key.type === 'RSA') {\n    return exportRSAPrivateKey(key, password, format)\n  }\n\n  if (key.type === 'Ed25519') {\n    return exportEd25519PrivateKey(key, password, format)\n  }\n\n  if (key.type === 'secp256k1') {\n    return exportSecp256k1PrivateKey(key, password, format)\n  }\n\n  if (key.type === 'ECDSA') {\n    return exportECDSAPrivateKey(key, password, format)\n  }\n\n  throw new UnsupportedKeyTypeError()\n}\n\n/**\n * Exports the key into a password protected `format`\n */\nexport async function exportEd25519PrivateKey (key: Ed25519PrivateKey, password: string, format: ExportFormat = 'libp2p-key'): Promise<Multibase<'m'>> {\n  if (format === 'libp2p-key') {\n    return exporter(privateKeyToProtobuf(key), password)\n  } else {\n    throw new InvalidParametersError(`export format '${format}' is not supported`)\n  }\n}\n\n/**\n * Exports the key into a password protected `format`\n */\nexport async function exportSecp256k1PrivateKey (key: Secp256k1PrivateKey, password: string, format: ExportFormat = 'libp2p-key'): Promise<Multibase<'m'>> {\n  if (format === 'libp2p-key') {\n    return exporter(privateKeyToProtobuf(key), password)\n  } else {\n    throw new InvalidParametersError('Export format is not supported')\n  }\n}\n\n/**\n * Exports the key into a password protected `format`\n */\nexport async function exportECDSAPrivateKey (key: ECDSAPrivateKey, password: string, format: ExportFormat = 'libp2p-key'): Promise<Multibase<'m'>> {\n  if (format === 'libp2p-key') {\n    return exporter(privateKeyToProtobuf(key), password)\n  } else {\n    throw new InvalidParametersError(`export format '${format}' is not supported`)\n  }\n}\n\n/**\n * Exports the key as libp2p-key - a aes-gcm encrypted value with the key\n * derived from the password.\n *\n * To export it as a password protected PEM file, please use the `exportPEM`\n * function from `@libp2p/rsa`.\n */\nexport async function exportRSAPrivateKey (key: RSAPrivateKey, password: string, format: ExportFormat = 'pkcs-8'): Promise<Multibase<'m'>> {\n  if (format === 'pkcs-8') {\n    return exportToPem(key, password)\n  } else if (format === 'libp2p-key') {\n    return exporter(privateKeyToProtobuf(key), password)\n  } else {\n    throw new InvalidParametersError('Export format is not supported')\n  }\n}\n\nexport async function exportToPem (privateKey: RSAPrivateKey, password: string): Promise<string> {\n  const crypto = webcrypto.get()\n\n  // PrivateKeyInfo\n  const keyWrapper = new asn1js.Sequence({\n    value: [\n      // version (0)\n      new asn1js.Integer({ value: 0 }),\n\n      // privateKeyAlgorithm\n      new asn1js.Sequence({\n        value: [\n        // rsaEncryption OID\n          new asn1js.ObjectIdentifier({\n            value: '1.2.840.113549.1.1.1'\n          }),\n          new asn1js.Null()\n        ]\n      }),\n\n      // PrivateKey\n      new asn1js.OctetString({\n        valueHex: privateKey.raw\n      })\n    ]\n  })\n\n  const keyBuf = keyWrapper.toBER()\n  const keyArr = new Uint8Array(keyBuf, 0, keyBuf.byteLength)\n  const salt = randomBytes(SALT_LENGTH)\n\n  const encryptionKey = await pbkdf2Async(\n    sha512,\n    password,\n    salt, {\n      c: ITERATIONS,\n      dkLen: KEY_SIZE\n    }\n  )\n\n  const iv = randomBytes(16)\n  const cryptoKey = await crypto.subtle.importKey('raw', encryptionKey, 'AES-CBC', false, ['encrypt'])\n  const encrypted = await crypto.subtle.encrypt({\n    name: 'AES-CBC',\n    iv\n  }, cryptoKey, keyArr)\n\n  const pbkdf2Params = new asn1js.Sequence({\n    value: [\n      // salt\n      new asn1js.OctetString({ valueHex: salt }),\n\n      // iteration count\n      new asn1js.Integer({ value: ITERATIONS }),\n\n      // key length\n      new asn1js.Integer({ value: KEY_SIZE }),\n\n      // AlgorithmIdentifier\n      new asn1js.Sequence({\n        value: [\n          // hmacWithSHA512\n          new asn1js.ObjectIdentifier({ value: '1.2.840.113549.2.11' }),\n          new asn1js.Null()\n        ]\n      })\n    ]\n  })\n\n  const encryptionAlgorithm = new asn1js.Sequence({\n    value: [\n      // pkcs5PBES2\n      new asn1js.ObjectIdentifier({\n        value: '1.2.840.113549.1.5.13'\n      }),\n      new asn1js.Sequence({\n        value: [\n          // keyDerivationFunc\n          new asn1js.Sequence({\n            value: [\n              // pkcs5PBKDF2\n              new asn1js.ObjectIdentifier({\n                value: '1.2.840.113549.1.5.12'\n              }),\n              // PBKDF2-params\n              pbkdf2Params\n            ]\n          }),\n\n          // encryptionScheme\n          new asn1js.Sequence({\n            value: [\n              // aes256-CBC\n              new asn1js.ObjectIdentifier({\n                value: '2.16.840.1.101.3.4.1.42'\n              }),\n              // iv\n              new asn1js.OctetString({\n                valueHex: iv\n              })\n            ]\n          })\n        ]\n      })\n    ]\n  })\n\n  const finalWrapper = new asn1js.Sequence({\n    value: [\n      encryptionAlgorithm,\n      new asn1js.OctetString({ valueHex: encrypted })\n    ]\n  })\n\n  const finalWrapperBuf = finalWrapper.toBER()\n  const finalWrapperArr = new Uint8Array(finalWrapperBuf, 0, finalWrapperBuf.byteLength)\n\n  return [\n    '-----BEGIN ENCRYPTED PRIVATE KEY-----',\n    ...uint8ArrayToString(finalWrapperArr, 'base64pad').split(/(.{64})/).filter(Boolean),\n    '-----END ENCRYPTED PRIVATE KEY-----'\n  ].join('\\n')\n}\n", "import { AES_GCM } from '@libp2p/crypto/ciphers'\nimport { privateKeyFromProtobuf, privateKeyFromRaw } from '@libp2p/crypto/keys'\nimport webcrypto from '@libp2p/crypto/webcrypto'\nimport { InvalidParametersError } from '@libp2p/interface'\nimport { pbkdf2Async } from '@noble/hashes/pbkdf2'\nimport { sha512 } from '@noble/hashes/sha512'\nimport * as asn1js from 'asn1js'\nimport { base64 } from 'multiformats/bases/base64'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { ITERATIONS, KEY_SIZE } from './constants.js'\nimport type { PrivateKey, RSAPrivateKey } from '@libp2p/interface'\n\n/**\n * Converts an exported private key into its representative object.\n *\n * Supported formats are 'pem' (RSA only) and 'libp2p-key'.\n */\nexport async function importPrivateKey (encryptedKey: string, password: string): Promise<PrivateKey> {\n  try {\n    const key = await importer(encryptedKey, password)\n    return privateKeyFromProtobuf(key)\n  } catch {\n    // Ignore and try the old pem decrypt\n  }\n\n  if (!encryptedKey.includes('BEGIN')) {\n    throw new InvalidParametersError('Encrypted key was not a libp2p-key or a PEM file')\n  }\n\n  return importFromPem(encryptedKey, password)\n}\n\n/**\n * Attempts to decrypt a base64 encoded PrivateKey string\n * with the given password. The privateKey must have been exported\n * using the same password and underlying cipher (aes-gcm)\n */\nexport async function importer (privateKey: string, password: string): Promise<Uint8Array> {\n  const encryptedKey = base64.decode(privateKey)\n  const cipher = AES_GCM.create()\n  return cipher.decrypt(encryptedKey, password)\n}\n\nexport async function importFromPem (pem: string, password: string): Promise<RSAPrivateKey> {\n  const crypto = webcrypto.get()\n  let plaintext: Uint8Array\n\n  if (pem.includes('-----BEGIN ENCRYPTED PRIVATE KEY-----')) {\n    const key = uint8ArrayFromString(\n      pem\n        .replace('-----BEGIN ENCRYPTED PRIVATE KEY-----', '')\n        .replace('-----END ENCRYPTED PRIVATE KEY-----', '')\n        .replace(/\\n/g, '')\n        .trim(),\n      'base64pad'\n    )\n\n    const { result } = asn1js.fromBER(key)\n\n    const {\n      iv,\n      salt,\n      iterations,\n      keySize,\n      cipherText\n    } = findEncryptedPEMData(result)\n\n    const encryptionKey = await pbkdf2Async(\n      sha512,\n      password,\n      salt, {\n        c: iterations,\n        dkLen: keySize\n      }\n    )\n\n    const cryptoKey = await crypto.subtle.importKey('raw', encryptionKey, 'AES-CBC', false, ['decrypt'])\n    const decrypted = toUint8Array(await crypto.subtle.decrypt({\n      name: 'AES-CBC',\n      iv\n    }, cryptoKey, cipherText))\n\n    const { result: decryptedResult } = asn1js.fromBER(decrypted)\n    plaintext = findPEMData(decryptedResult)\n  } else if (pem.includes('-----BEGIN PRIVATE KEY-----')) {\n    const key = uint8ArrayFromString(\n      pem\n        .replace('-----BEGIN PRIVATE KEY-----', '')\n        .replace('-----END PRIVATE KEY-----', '')\n        .replace(/\\n/g, '')\n        .trim(),\n      'base64pad'\n    )\n\n    const { result } = asn1js.fromBER(key)\n\n    plaintext = findPEMData(result)\n  } else {\n    throw new InvalidParametersError('Could not parse private key from PEM data')\n  }\n\n  const key = privateKeyFromRaw(plaintext)\n\n  if (key.type !== 'RSA') {\n    throw new InvalidParametersError('Could not parse RSA private key from PEM data')\n  }\n\n  return key\n}\n\nfunction findEncryptedPEMData (root: any): { cipherText: Uint8Array, iv: Uint8Array, salt: Uint8Array, iterations: number, keySize: number } {\n  const encryptionAlgorithm = root.valueBlock.value[0]\n  const scheme = encryptionAlgorithm.valueBlock.value[0].toString()\n\n  if (scheme !== 'OBJECT IDENTIFIER : 1.2.840.113549.1.5.13') {\n    throw new InvalidParametersError('Only pkcs5PBES2 encrypted private keys are supported')\n  }\n\n  const keyDerivationFunc = encryptionAlgorithm.valueBlock.value[1].valueBlock.value[0]\n  const keyDerivationFuncName = keyDerivationFunc.valueBlock.value[0].toString()\n\n  if (keyDerivationFuncName !== 'OBJECT IDENTIFIER : 1.2.840.113549.1.5.12') {\n    throw new InvalidParametersError('Only pkcs5PBKDF2 key derivation functions are supported')\n  }\n\n  const pbkdf2Params = keyDerivationFunc.valueBlock.value[1]\n\n  const salt = toUint8Array(pbkdf2Params.valueBlock.value[0].getValue())\n\n  let iterations = ITERATIONS\n  let keySize = KEY_SIZE\n\n  if (pbkdf2Params.valueBlock.value.length === 3) {\n    iterations = Number((pbkdf2Params.valueBlock.value[1] as asn1js.Integer).toBigInt())\n    keySize = Number((pbkdf2Params.valueBlock.value[2]).toBigInt())\n  } else if (pbkdf2Params.valueBlock.value.length === 2) {\n    throw new InvalidParametersError('Could not derive key size and iterations from PEM file - please use @libp2p/rsa to re-import your key')\n  }\n\n  const encryptionScheme = encryptionAlgorithm.valueBlock.value[1].valueBlock.value[1]\n  const encryptionSchemeName = encryptionScheme.valueBlock.value[0].toString()\n\n  if (encryptionSchemeName === 'OBJECT IDENTIFIER : 1.2.840.113549.3.7') {\n    // des-EDE3-CBC\n  } else if (encryptionSchemeName === 'OBJECT IDENTIFIER : 1.3.14.3.2.7') {\n    // des-CBC\n  } else if (encryptionSchemeName === 'OBJECT IDENTIFIER : 2.16.840.1.101.3.4.1.2') {\n    // aes128-CBC\n  } else if (encryptionSchemeName === 'OBJECT IDENTIFIER : 2.16.840.1.101.3.4.1.22') {\n    // aes192-CBC\n  } else if (encryptionSchemeName === 'OBJECT IDENTIFIER : 2.16.840.1.101.3.4.1.42') {\n    // aes256-CBC\n  } else {\n    throw new InvalidParametersError('Only AES-CBC encryption schemes are supported')\n  }\n\n  const iv = toUint8Array(encryptionScheme.valueBlock.value[1].getValue())\n\n  return {\n    cipherText: toUint8Array(root.valueBlock.value[1].getValue()),\n    salt,\n    iterations,\n    keySize,\n    iv\n  }\n}\n\nfunction findPEMData (seq: any): Uint8Array {\n  return toUint8Array(seq.valueBlock.value[2].getValue())\n}\n\nfunction toUint8Array (buf: ArrayBuffer): Uint8Array {\n  return new Uint8Array(buf, 0, buf.byteLength)\n}\n", "/**\n * @packageDocumentation\n *\n * - Manages the life cycle of a key\n * - Keys are encrypted at rest\n * - Enforces the use of safe key names\n * - Uses encrypted PKCS 8 for key storage\n * - Uses PBKDF2 for a \"stretched\" key encryption key\n * - Enforces NIST SP 800-131A and NIST SP 800-132\n * - Delays reporting errors to slow down brute force attacks\n *\n * ## KeyInfo\n *\n * The key management and naming service API all return a `KeyInfo` object.  The `id` is a universally unique identifier for the key.  The `name` is local to the key chain.\n *\n * ```JSON\n * {\n *   \"name\": \"rsa-key\",\n *   \"id\": \"QmYWYSUZ4PV6MRFYpdtEDJBiGs4UrmE6g8wmAWSePekXVW\"\n * }\n * ```\n *\n * The **key id** is the SHA-256 [multihash](https://github.com/multiformats/multihash) of its public key.\n *\n * The *public key* is a [protobuf encoding](https://github.com/libp2p/js-libp2p/blob/main/packages/crypto/src/keys/keys.proto.js) containing a type and the [DER encoding](https://en.wikipedia.org/wiki/X.690) of the PKCS [SubjectPublicKeyInfo](https://www.ietf.org/rfc/rfc3279.txt).\n *\n * ## Private key storage\n *\n * A private key is stored as an encrypted PKCS 8 structure in the PEM format. It is protected by a key generated from the key chain's *pass phrase* using **PBKDF2**.\n *\n * The default options for generating the derived encryption key are in the `dek` object.  This, along with the pass phrase, is the input to a `PBKDF2` function.\n *\n * ```TypeScript\n * const defaultOptions = {\n *   // See https://cryptosense.com/parameter-choice-for-pbkdf2/\n *   dek: {\n *     keyLength: 512 / 8,\n *     iterationCount: 1000,\n *     salt: 'at least 16 characters long',\n *     hash: 'sha2-512'\n *   }\n * }\n * ```\n *\n * ![key storage](https://github.com/libp2p/js-libp2p/blob/main/doc/private-key.png?raw=true)\n *\n * ## Physical storage\n *\n * The actual physical storage of an encrypted key is left to implementations of [interface-datastore](https://github.com/ipfs/interface-datastore/).\n *\n * A key benefit is that now the key chain can be used in browser with the [js-datastore-level](https://github.com/ipfs/js-datastore-level) implementation.\n */\n\nimport { Keychain as KeychainClass } from './keychain.js'\nimport type { ComponentLogger, PrivateKey } from '@libp2p/interface'\nimport type { Datastore } from 'interface-datastore'\n\nexport interface DEKConfig {\n  hash: string\n  salt: string\n  iterationCount: number\n  keyLength: number\n}\n\nexport interface KeychainInit {\n  /**\n   * The password is used to derive a key which encrypts the keychain at rest\n   */\n  pass?: string\n\n  /**\n   * This key configures how the keychain encryption key is derived from the\n   * configured password\n   */\n  dek?: DEKConfig\n\n  /**\n   * The 'self' key is the private key of the node from which the peer id is\n   * derived.\n   *\n   * It cannot be renamed or removed.\n   *\n   * By default it is stored under the 'self' key, to use a different name, pass\n   * this option.\n   *\n   * @default 'self'\n   */\n  selfKey?: string\n}\n\nexport interface KeychainComponents {\n  datastore: Datastore\n  logger: ComponentLogger\n}\n\nexport interface KeyInfo {\n  /**\n   * The universally unique key id\n   */\n  id: string\n\n  /**\n   * The local key name\n   */\n  name: string\n}\n\nexport interface Keychain {\n  /**\n   * Find a key by name\n   *\n   * @example\n   *\n   * ```TypeScript\n   * import { generateKeyPair } from '@libp2p/crypto/keys'\n   *\n   * const key = await generateKeyPair('Ed25519')\n   * const keyInfo = await libp2p.keychain.importKey('my-key', key)\n   * const keyInfo2 = await libp2p.keychain.findKeyByName(keyInfo.name)\n   * ```\n   */\n  findKeyByName(name: string): Promise<KeyInfo>\n\n  /**\n   * Find a key by id\n   *\n   * @example\n   *\n   * ```TypeScript\n   * import { generateKeyPair } from '@libp2p/crypto/keys'\n   *\n   * const key = await generateKeyPair('Ed25519')\n   * const keyInfo = await libp2p.keychain.importKey('my-key', key)\n   * const keyInfo2 = await libp2p.keychain.findKeyById(keyInfo.id)\n   * ```\n   */\n  findKeyById (id: string): Promise<KeyInfo>\n\n  /**\n   * Import a new private key.\n   *\n   * @example\n   *\n   * ```TypeScript\n   * import { generateKeyPair } from '@libp2p/crypto/keys'\n   *\n   * const key = await generateKeyPair('Ed25519')\n   * const keyInfo = await libp2p.keychain.importKey('my-key', key)\n   * ```\n   */\n  importKey(name: string, key: PrivateKey): Promise<KeyInfo>\n\n  /**\n   * Export an existing private key.\n   *\n   * @example\n   *\n   * ```TypeScript\n   * import { generateKeyPair } from '@libp2p/crypto/keys'\n   *\n   * const key = await generateKeyPair('Ed25519')\n   * const keyInfo = await libp2p.keychain.importKey('my-key', key)\n   * const key = await libp2p.keychain.exportKey(keyInfo.id)\n   * ```\n   */\n  exportKey(name: string): Promise<PrivateKey>\n\n  /**\n   * Removes a key from the keychain.\n   *\n   * @example\n   *\n   * ```TypeScript\n   * await libp2p.services.keychain.createKey('keyTest', 'RSA', 4096)\n   * const keyInfo = await libp2p.services.keychain.removeKey('keyTest')\n   * ```\n   */\n  removeKey(name: string): Promise<KeyInfo>\n\n  /**\n   * Rename a key in the keychain. This is done in a batch commit with rollback\n   * so errors thrown during the operation will not cause key loss.\n   *\n   * @example\n   *\n   * ```TypeScript\n   * await libp2p.services.keychain.createKey('keyTest', 'RSA', 4096)\n   * const keyInfo = await libp2p.services.keychain.renameKey('keyTest', 'keyNewTest')\n   * ```\n   */\n  renameKey(oldName: string, newName: string): Promise<KeyInfo>\n\n  /**\n   * List all the keys.\n   *\n   * @example\n   *\n   * ```TypeScript\n   * const keyInfos = await libp2p.keychain.listKeys()\n   * ```\n   */\n  listKeys(): Promise<KeyInfo[]>\n\n  /**\n   * Rotate keychain password and re-encrypt all associated keys\n   *\n   * @example\n   *\n   * ```TypeScript\n   * await libp2p.services.keychain.rotateKeychainPass('oldPassword', 'newPassword')\n   * ```\n   */\n  rotateKeychainPass(oldPass: string, newPass: string): Promise<void>\n}\n\nexport function keychain (init: KeychainInit = {}): (components: KeychainComponents) => Keychain {\n  return (components: KeychainComponents) => {\n    return new KeychainClass(components, init)\n  }\n}\n", "import { generateKeyPair } from '@libp2p/crypto/keys'\nimport { keychain } from '@libp2p/keychain'\nimport { defaultLogger } from '@libp2p/logger'\nimport { Key } from 'interface-datastore'\nimport type { PrivateKey, KeyType } from '@libp2p/interface'\nimport type { KeychainInit } from '@libp2p/keychain'\nimport type { Datastore } from 'interface-datastore'\n\nexport interface LoadOrCreateSelfKeyOptions extends KeychainInit {\n  /**\n   * If no private key is found in the datastore, create one with this type\n   *\n   * @default 'Ed25519'\n   */\n  keyType?: KeyType\n}\n\nexport async function loadOrCreateSelfKey (datastore: Datastore, init: LoadOrCreateSelfKeyOptions = {}): Promise<PrivateKey> {\n  const selfKey = init.selfKey ?? 'self'\n  const chain = keychain(init)({\n    datastore,\n    logger: defaultLogger()\n  })\n\n  let privateKey\n\n  if (await datastore.has(new Key(`/pkcs8/${selfKey}`))) {\n    privateKey = await chain.exportKey(selfKey)\n  } else {\n    privateKey = await generateKeyPair(init.keyType ?? 'Ed25519')\n\n    // persist the peer id in the keychain for next time\n    await chain.importKey(selfKey, privateKey)\n  }\n\n  return privateKey\n}\n", "import { dns, RecordType } from '@multiformats/dns'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport type { MultiaddrResolver, MultiaddrResolveOptions } from '@libp2p/interface'\nimport type { DNS } from '@multiformats/dns'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nclass DNSAddrResolver implements MultiaddrResolver {\n  private dns?: DNS\n\n  canResolve (ma: Multiaddr): boolean {\n    return ma.getComponents().some(({ name }) => name === 'dnsaddr')\n  }\n\n  async resolve (ma: Multiaddr, options: MultiaddrResolveOptions): Promise<Multiaddr[]> {\n    const hostname = ma.getComponents()\n      .find(component => component.name === 'dnsaddr')\n      ?.value\n\n    if (hostname == null) {\n      return [ma]\n    }\n\n    const resolver = this.getDNS(options)\n    const result = await resolver.query(`_dnsaddr.${hostname}`, {\n      signal: options?.signal,\n      types: [\n        RecordType.TXT\n      ]\n    })\n\n    const peerId = ma.getComponents()\n      .find(component => component.name === 'p2p')\n      ?.value\n    const output: Multiaddr[] = []\n\n    for (const answer of result.Answer) {\n      const addr = answer.data\n        .replace(/[\"']/g, '')\n        .trim()\n        .split('=')[1]\n\n      if (addr == null) {\n        continue\n      }\n\n      if (peerId != null && !addr.includes(peerId)) {\n        continue\n      }\n\n      output.push(multiaddr(addr))\n    }\n\n    return output\n  }\n\n  private getDNS (options: MultiaddrResolveOptions): DNS {\n    if (options.dns != null) {\n      return options.dns\n    }\n\n    if (this.dns == null) {\n      this.dns = dns()\n    }\n\n    return this.dns\n  }\n}\n\nexport const dnsaddrResolver = new DNSAddrResolver()\n", "import { FaultTolerance, InvalidParametersError } from '@libp2p/interface'\nimport { mergeOptions } from '@libp2p/utils/merge-options'\nimport { dnsaddrResolver } from './connection-manager/resolvers/dnsaddr.ts'\nimport type { Libp2pInit } from './index.js'\nimport type { ServiceMap } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nconst DefaultConfig: Libp2pInit = {\n  addresses: {\n    listen: [],\n    announce: [],\n    noAnnounce: [],\n    announceFilter: (multiaddrs: Multiaddr[]) => multiaddrs\n  },\n  connectionManager: {\n    resolvers: {\n      dnsaddr: dnsaddrResolver\n    }\n  },\n  transportManager: {\n    faultTolerance: FaultTolerance.FATAL_ALL\n  }\n}\n\nexport async function validateConfig <T extends ServiceMap = Record<string, unknown>> (opts: Libp2pInit<T>): Promise<Libp2pInit<T>> {\n  const resultingOptions: Libp2pInit<T> = mergeOptions(DefaultConfig, opts)\n\n  if (resultingOptions.connectionProtector === null && globalThis.process?.env?.LIBP2P_FORCE_PNET != null) {\n    throw new InvalidParametersError('Private network is enforced, but no protector was provided')\n  }\n\n  return resultingOptions\n}\n", "import { decodeMessage, encodeMessage, message } from 'protons-runtime'\nimport { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc'\nimport type { Codec, DecodeOptions } from 'protons-runtime'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface Envelope {\n  publicKey: Uint8Array\n  payloadType: Uint8Array\n  payload: Uint8Array\n  signature: Uint8Array\n}\n\nexport namespace Envelope {\n  let _codec: Codec<Envelope>\n\n  export const codec = (): Codec<Envelope> => {\n    if (_codec == null) {\n      _codec = message<Envelope>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if ((obj.publicKey != null && obj.publicKey.byteLength > 0)) {\n          w.uint32(10)\n          w.bytes(obj.publicKey)\n        }\n\n        if ((obj.payloadType != null && obj.payloadType.byteLength > 0)) {\n          w.uint32(18)\n          w.bytes(obj.payloadType)\n        }\n\n        if ((obj.payload != null && obj.payload.byteLength > 0)) {\n          w.uint32(26)\n          w.bytes(obj.payload)\n        }\n\n        if ((obj.signature != null && obj.signature.byteLength > 0)) {\n          w.uint32(42)\n          w.bytes(obj.signature)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          publicKey: uint8ArrayAlloc(0),\n          payloadType: uint8ArrayAlloc(0),\n          payload: uint8ArrayAlloc(0),\n          signature: uint8ArrayAlloc(0)\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.publicKey = reader.bytes()\n              break\n            }\n            case 2: {\n              obj.payloadType = reader.bytes()\n              break\n            }\n            case 3: {\n              obj.payload = reader.bytes()\n              break\n            }\n            case 5: {\n              obj.signature = reader.bytes()\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Envelope>): Uint8Array => {\n    return encodeMessage(obj, Envelope.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Envelope>): Envelope => {\n    return decodeMessage(buf, Envelope.codec(), opts)\n  }\n}\n", "/**\n * The key in the record is not valid for the domain\n */\nexport class InvalidSignatureError extends Error {\n  constructor (message = 'Invalid signature') {\n    super(message)\n    this.name = 'InvalidSignatureError'\n  }\n}\n", "import { publicKeyFromProtobuf, publicKeyToProtobuf } from '@libp2p/crypto/keys'\nimport * as varint from 'uint8-varint'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { fromString as uint8arraysFromString } from 'uint8arrays/from-string'\nimport { Envelope as Protobuf } from './envelope.js'\nimport { InvalidSignatureError } from './errors.js'\nimport type { Record, Envelope, PrivateKey, PublicKey } from '@libp2p/interface'\nimport type { AbortOptions } from '@multiformats/multiaddr'\n\nexport interface RecordEnvelopeInit {\n  publicKey: PublicKey\n  payloadType: Uint8Array\n  payload: Uint8Array\n  signature: Uint8Array\n}\n\nexport class RecordEnvelope implements Envelope {\n  /**\n   * Unmarshal a serialized Envelope protobuf message\n   */\n  static createFromProtobuf = (data: Uint8Array | Uint8ArrayList): RecordEnvelope => {\n    const envelopeData = Protobuf.decode(data)\n    const publicKey = publicKeyFromProtobuf(envelopeData.publicKey)\n\n    return new RecordEnvelope({\n      publicKey,\n      payloadType: envelopeData.payloadType,\n      payload: envelopeData.payload,\n      signature: envelopeData.signature\n    })\n  }\n\n  /**\n   * Seal marshals the given Record, places the marshaled bytes inside an Envelope\n   * and signs it with the given peerId's private key\n   */\n  static seal = async (record: Record, privateKey: PrivateKey, options?: AbortOptions): Promise<RecordEnvelope> => {\n    if (privateKey == null) {\n      throw new Error('Missing private key')\n    }\n\n    const domain = record.domain\n    const payloadType = record.codec\n    const payload = record.marshal()\n    const signData = formatSignaturePayload(domain, payloadType, payload)\n    const signature = await privateKey.sign(signData.subarray(), options)\n\n    return new RecordEnvelope({\n      publicKey: privateKey.publicKey,\n      payloadType,\n      payload,\n      signature\n    })\n  }\n\n  /**\n   * Open and certify a given marshaled envelope.\n   * Data is unmarshaled and the signature validated for the given domain.\n   */\n  static openAndCertify = async (data: Uint8Array | Uint8ArrayList, domain: string, options?: AbortOptions): Promise<RecordEnvelope> => {\n    const envelope = RecordEnvelope.createFromProtobuf(data)\n    const valid = await envelope.validate(domain, options)\n\n    if (!valid) {\n      throw new InvalidSignatureError('Envelope signature is not valid for the given domain')\n    }\n\n    return envelope\n  }\n\n  public publicKey: PublicKey\n  public payloadType: Uint8Array\n  public payload: Uint8Array\n  public signature: Uint8Array\n  public marshaled?: Uint8Array\n\n  /**\n   * The Envelope is responsible for keeping an arbitrary signed record\n   * by a libp2p peer.\n   */\n  constructor (init: RecordEnvelopeInit) {\n    const { publicKey, payloadType, payload, signature } = init\n\n    this.publicKey = publicKey\n    this.payloadType = payloadType\n    this.payload = payload\n    this.signature = signature\n  }\n\n  /**\n   * Marshal the envelope content\n   */\n  marshal (): Uint8Array {\n    if (this.marshaled == null) {\n      this.marshaled = Protobuf.encode({\n        publicKey: publicKeyToProtobuf(this.publicKey),\n        payloadType: this.payloadType,\n        payload: this.payload.subarray(),\n        signature: this.signature\n      })\n    }\n\n    return this.marshaled\n  }\n\n  /**\n   * Verifies if the other Envelope is identical to this one\n   */\n  equals (other?: Envelope): boolean {\n    if (other == null) {\n      return false\n    }\n\n    return uint8ArrayEquals(this.marshal(), other.marshal())\n  }\n\n  /**\n   * Validate envelope data signature for the given domain\n   */\n  async validate (domain: string, options?: AbortOptions): Promise<boolean> {\n    const signData = formatSignaturePayload(domain, this.payloadType, this.payload)\n\n    return this.publicKey.verify(signData.subarray(), this.signature, options)\n  }\n}\n\n/**\n * Helper function that prepares a Uint8Array to sign or verify a signature\n */\nconst formatSignaturePayload = (domain: string, payloadType: Uint8Array, payload: Uint8Array | Uint8ArrayList): Uint8ArrayList => {\n  // When signing, a peer will prepare a Uint8Array by concatenating the following:\n  // - The length of the domain separation string string in bytes\n  // - The domain separation string, encoded as UTF-8\n  // - The length of the payload_type field in bytes\n  // - The value of the payload_type field\n  // - The length of the payload field in bytes\n  // - The value of the payload field\n\n  const domainUint8Array = uint8arraysFromString(domain)\n  const domainLength = varint.encode(domainUint8Array.byteLength)\n  const payloadTypeLength = varint.encode(payloadType.length)\n  const payloadLength = varint.encode(payload.length)\n\n  return new Uint8ArrayList(\n    domainLength,\n    domainUint8Array,\n    payloadTypeLength,\n    payloadType,\n    payloadLength,\n    payload\n  )\n}\n", "/**\n * @packageDocumentation\n *\n * Provides strategies ensure arrays are equivalent.\n *\n * @example\n *\n * ```typescript\n * import { arrayEquals } from '@libp2p/utils/array-equals'\n * import { multiaddr } from '@multformats/multiaddr'\n *\n * const ma1 = multiaddr('/ip4/127.0.0.1/tcp/9000'),\n * const ma2 = multiaddr('/ip4/82.41.53.1/tcp/9000')\n *\n * console.info(arrayEquals([ma1], [ma1])) // true\n * console.info(arrayEquals([ma1], [ma2])) // false\n * ```\n */\n\n/**\n * Verify if two arrays of non primitive types with the \"equals\" function are equal.\n * Compatible with multiaddr, peer-id and others.\n */\nexport function arrayEquals (a: any[], b: any[]): boolean {\n  const sort = (a: any, b: any): number => a.toString().localeCompare(b.toString())\n\n  if (a.length !== b.length) {\n    return false\n  }\n\n  b.sort(sort)\n\n  return a.sort(sort).every((item, index) => b[index].equals(item))\n}\n", "export const empty = new Uint8Array(0)\n\nexport function toHex (d: Uint8Array): string {\n  return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n}\n\nexport function fromHex (hex: string): Uint8Array {\n  const hexes = hex.match(/../g)\n  return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\nexport function equals (aa: Uint8Array, bb: Uint8Array): boolean {\n  if (aa === bb) { return true }\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function coerce (o: ArrayBufferView | ArrayBuffer | Uint8Array): Uint8Array {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') { return o }\n  if (o instanceof ArrayBuffer) { return new Uint8Array(o) }\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\nexport function isBinary (o: unknown): o is ArrayBuffer | ArrayBufferView {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n}\n\nexport function fromString (str: string): Uint8Array {\n  return new TextEncoder().encode(str)\n}\n\nexport function toString (b: Uint8Array): string {\n  return new TextDecoder().decode(b)\n}\n", "/* eslint-disable */\nvar encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  // @ts-ignore\n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      // @ts-ignore\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  // @ts-ignore\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (/** @type {number} */ value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n", "import varint from './vendor/varint.js'\n\nexport function decode (data: Uint8Array, offset = 0): [number, number] {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\nexport function encodeTo (int: number, target: Uint8Array, offset = 0): Uint8Array {\n  varint.encode(int, target, offset)\n  return target\n}\n\nexport function encodingLength (int: number): number {\n  return varint.encodingLength(int)\n}\n", "import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\nimport type { MultihashDigest } from './interface.js'\n\n/**\n * Creates a multihash digest.\n */\nexport function create <Code extends number> (code: Code, digest: Uint8Array): Digest<Code, number> {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode (multihash: Uint8Array): MultihashDigest {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\nexport function equals (a: MultihashDigest, b: unknown): b is MultihashDigest {\n  if (a === b) {\n    return true\n  } else {\n    const data = b as { code?: unknown, size?: unknown, bytes?: unknown }\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest<Code extends number, Size extends number> implements MultihashDigest {\n  readonly code: Code\n  readonly size: Size\n  readonly digest: Uint8Array\n  readonly bytes: Uint8Array\n\n  /**\n   * Creates a multihash digest.\n   */\n  constructor (code: Code, size: Size, digest: Uint8Array, bytes: Uint8Array) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n\n/**\n * Used to check that the passed multihash has the passed code\n */\nexport function hasCode <T extends number> (digest: MultihashDigest, code: T): digest is MultihashDigest<T> {\n  return digest.code === code\n}\n", "// The domain string used for peer records contained in a Envelope.\nexport const ENVELOPE_DOMAIN_PEER_RECORD = 'libp2p-peer-record'\n\n// The type hint used to identify peer records in a Envelope.\n// Defined in https://github.com/multiformats/multicodec/blob/master/table.csv\n// with name \"libp2p-peer-record\"\nexport const ENVELOPE_PAYLOAD_TYPE_PEER_RECORD = Uint8Array.from([3, 1])\n", "import { decodeMessage, encodeMessage, MaxLengthError, message } from 'protons-runtime'\nimport { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc'\nimport type { Codec, DecodeOptions } from 'protons-runtime'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface PeerRecord {\n  peerId: Uint8Array\n  seq: bigint\n  addresses: PeerRecord.AddressInfo[]\n}\n\nexport namespace PeerRecord {\n  export interface AddressInfo {\n    multiaddr: Uint8Array\n  }\n\n  export namespace AddressInfo {\n    let _codec: Codec<AddressInfo>\n\n    export const codec = (): Codec<AddressInfo> => {\n      if (_codec == null) {\n        _codec = message<AddressInfo>((obj, w, opts = {}) => {\n          if (opts.lengthDelimited !== false) {\n            w.fork()\n          }\n\n          if ((obj.multiaddr != null && obj.multiaddr.byteLength > 0)) {\n            w.uint32(10)\n            w.bytes(obj.multiaddr)\n          }\n\n          if (opts.lengthDelimited !== false) {\n            w.ldelim()\n          }\n        }, (reader, length, opts = {}) => {\n          const obj: any = {\n            multiaddr: uint8ArrayAlloc(0)\n          }\n\n          const end = length == null ? reader.len : reader.pos + length\n\n          while (reader.pos < end) {\n            const tag = reader.uint32()\n\n            switch (tag >>> 3) {\n              case 1: {\n                obj.multiaddr = reader.bytes()\n                break\n              }\n              default: {\n                reader.skipType(tag & 7)\n                break\n              }\n            }\n          }\n\n          return obj\n        })\n      }\n\n      return _codec\n    }\n\n    export const encode = (obj: Partial<AddressInfo>): Uint8Array => {\n      return encodeMessage(obj, AddressInfo.codec())\n    }\n\n    export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<AddressInfo>): AddressInfo => {\n      return decodeMessage(buf, AddressInfo.codec(), opts)\n    }\n  }\n\n  let _codec: Codec<PeerRecord>\n\n  export const codec = (): Codec<PeerRecord> => {\n    if (_codec == null) {\n      _codec = message<PeerRecord>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if ((obj.peerId != null && obj.peerId.byteLength > 0)) {\n          w.uint32(10)\n          w.bytes(obj.peerId)\n        }\n\n        if ((obj.seq != null && obj.seq !== 0n)) {\n          w.uint32(16)\n          w.uint64(obj.seq)\n        }\n\n        if (obj.addresses != null) {\n          for (const value of obj.addresses) {\n            w.uint32(26)\n            PeerRecord.AddressInfo.codec().encode(value, w)\n          }\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          peerId: uint8ArrayAlloc(0),\n          seq: 0n,\n          addresses: []\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.peerId = reader.bytes()\n              break\n            }\n            case 2: {\n              obj.seq = reader.uint64()\n              break\n            }\n            case 3: {\n              if (opts.limits?.addresses != null && obj.addresses.length === opts.limits.addresses) {\n                throw new MaxLengthError('Decode error - map field \"addresses\" had too many elements')\n              }\n\n              obj.addresses.push(PeerRecord.AddressInfo.codec().decode(reader, reader.uint32(), {\n                limits: opts.limits?.addresses$\n              }))\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<PeerRecord>): Uint8Array => {\n    return encodeMessage(obj, PeerRecord.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<PeerRecord>): PeerRecord => {\n    return decodeMessage(buf, PeerRecord.codec(), opts)\n  }\n}\n", "import { peerIdFromMultihash } from '@libp2p/peer-id'\nimport { arrayEquals } from '@libp2p/utils/array-equals'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport * as Digest from 'multiformats/hashes/digest'\nimport {\n  ENVELOPE_DOMAIN_PEER_RECORD,\n  ENVELOPE_PAYLOAD_TYPE_PEER_RECORD\n} from './consts.js'\nimport { PeerRecord as Protobuf } from './peer-record.js'\nimport type { PeerId } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface PeerRecordInit {\n  peerId: PeerId\n\n  /**\n   * Addresses of the associated peer.\n   */\n  multiaddrs?: Multiaddr[]\n\n  /**\n   * Monotonically-increasing sequence counter that's used to order PeerRecords in time.\n   */\n  seqNumber?: bigint\n}\n\n/**\n * The PeerRecord is used for distributing peer routing records across the network.\n * It contains the peer's reachable listen addresses.\n */\nexport class PeerRecord {\n  /**\n   * Unmarshal Peer Record Protobuf\n   */\n  static createFromProtobuf = (buf: Uint8Array | Uint8ArrayList): PeerRecord => {\n    const peerRecord = Protobuf.decode(buf)\n    const peerId = peerIdFromMultihash(Digest.decode(peerRecord.peerId))\n    const multiaddrs = (peerRecord.addresses ?? []).map((a) => multiaddr(a.multiaddr))\n    const seqNumber = peerRecord.seq\n\n    return new PeerRecord({ peerId, multiaddrs, seqNumber })\n  }\n\n  static DOMAIN = ENVELOPE_DOMAIN_PEER_RECORD\n  static CODEC = ENVELOPE_PAYLOAD_TYPE_PEER_RECORD\n\n  public peerId: PeerId\n  public multiaddrs: Multiaddr[]\n  public seqNumber: bigint\n  public domain = PeerRecord.DOMAIN\n  public codec = PeerRecord.CODEC\n  private marshaled?: Uint8Array\n\n  constructor (init: PeerRecordInit) {\n    const { peerId, multiaddrs, seqNumber } = init\n\n    this.peerId = peerId\n    this.multiaddrs = multiaddrs ?? []\n    this.seqNumber = seqNumber ?? BigInt(Date.now())\n  }\n\n  /**\n   * Marshal a record to be used in an envelope\n   */\n  marshal (): Uint8Array {\n    if (this.marshaled == null) {\n      this.marshaled = Protobuf.encode({\n        peerId: this.peerId.toMultihash().bytes,\n        seq: BigInt(this.seqNumber),\n        addresses: this.multiaddrs.map((m) => ({\n          multiaddr: m.bytes\n        }))\n      })\n    }\n\n    return this.marshaled\n  }\n\n  /**\n   * Returns true if `this` record equals the `other`\n   */\n  equals (other: unknown): boolean {\n    if (!(other instanceof PeerRecord)) {\n      return false\n    }\n\n    // Validate PeerId\n    if (!this.peerId.equals(other.peerId)) {\n      return false\n    }\n\n    // Validate seqNumber\n    if (this.seqNumber !== other.seqNumber) {\n      return false\n    }\n\n    // Validate multiaddrs\n    if (!arrayEquals(this.multiaddrs, other.multiaddrs)) {\n      return false\n    }\n\n    return true\n  }\n}\n", "export const empty = new Uint8Array(0)\n\nexport function toHex (d: Uint8Array): string {\n  return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n}\n\nexport function fromHex (hex: string): Uint8Array {\n  const hexes = hex.match(/../g)\n  return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\nexport function equals (aa: Uint8Array, bb: Uint8Array): boolean {\n  if (aa === bb) { return true }\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function coerce (o: ArrayBufferView | ArrayBuffer | Uint8Array): Uint8Array {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') { return o }\n  if (o instanceof ArrayBuffer) { return new Uint8Array(o) }\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\nexport function isBinary (o: unknown): o is ArrayBuffer | ArrayBufferView {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n}\n\nexport function fromString (str: string): Uint8Array {\n  return new TextEncoder().encode(str)\n}\n\nexport function toString (b: Uint8Array): string {\n  return new TextDecoder().decode(b)\n}\n", "/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  /**\n   * @param {any[] | Iterable<number>} source\n   */\n  function encode (source) {\n    // @ts-ignore\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  /**\n   * @param {string | string[]} source\n   */\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  /**\n   * @param {string | string[]} string\n   */\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n", "import { coerce } from '../bytes.js'\nimport basex from '../vendor/base-x.js'\nimport type { BaseCodec, BaseDecoder, BaseEncoder, CombobaseDecoder, Multibase, MultibaseCodec, MultibaseDecoder, MultibaseEncoder, UnibaseDecoder } from './interface.js'\n\ninterface EncodeFn { (bytes: Uint8Array): string }\ninterface DecodeFn { (text: string): Uint8Array }\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder<Base extends string, Prefix extends string> implements MultibaseEncoder<Prefix>, BaseEncoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  encode (bytes: Uint8Array): Multibase<Prefix> {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder<Base extends string, Prefix extends string> implements MultibaseDecoder<Prefix>, UnibaseDecoder<Prefix>, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseDecode: DecodeFn\n  private readonly prefixCodePoint: number\n\n  constructor (name: Base, prefix: Prefix, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    const prefixCodePoint = prefix.codePointAt(0)\n    /* c8 ignore next 3 */\n    if (prefixCodePoint === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    this.prefixCodePoint = prefixCodePoint\n    this.baseDecode = baseDecode\n  }\n\n  decode (text: string): Uint8Array {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  or<OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n}\n\ntype Decoders<Prefix extends string> = Record<Prefix, UnibaseDecoder<Prefix>>\n\nclass ComposedDecoder<Prefix extends string> implements MultibaseDecoder<Prefix>, CombobaseDecoder<Prefix> {\n  readonly decoders: Decoders<Prefix>\n\n  constructor (decoders: Decoders<Prefix>) {\n    this.decoders = decoders\n  }\n\n  or <OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n\n  decode (input: string): Uint8Array {\n    const prefix = input[0] as Prefix\n    const decoder = this.decoders[prefix]\n    if (decoder != null) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\nexport function or <L extends string, R extends string> (left: UnibaseDecoder<L> | CombobaseDecoder<L>, right: UnibaseDecoder<R> | CombobaseDecoder<R>): ComposedDecoder<L | R> {\n  return new ComposedDecoder({\n    ...(left.decoders ?? { [(left as UnibaseDecoder<L>).prefix]: left }),\n    ...(right.decoders ?? { [(right as UnibaseDecoder<R>).prefix]: right })\n  } as Decoders<L | R>)\n}\n\nexport class Codec<Base extends string, Prefix extends string> implements MultibaseCodec<Prefix>, MultibaseEncoder<Prefix>, MultibaseDecoder<Prefix>, BaseCodec, BaseEncoder, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n  readonly baseDecode: DecodeFn\n  readonly encoder: Encoder<Base, Prefix>\n  readonly decoder: Decoder<Base, Prefix>\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  encode (input: Uint8Array): string {\n    return this.encoder.encode(input)\n  }\n\n  decode (input: string): Uint8Array {\n    return this.decoder.decode(input)\n  }\n}\n\nexport function from <Base extends string, Prefix extends string> ({ name, prefix, encode, decode }: { name: Base, prefix: Prefix, encode: EncodeFn, decode: DecodeFn }): Codec<Base, Prefix> {\n  return new Codec(name, prefix, encode, decode)\n}\n\nexport function baseX <Base extends string, Prefix extends string> ({ name, prefix, alphabet }: { name: Base, prefix: Prefix, alphabet: string }): Codec<Base, Prefix> {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: (text: string): Uint8Array => coerce(decode(text))\n  })\n}\n\nfunction decode (string: string, alphabetIdx: Record<string, number>, bitsPerChar: number, name: string): Uint8Array {\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = alphabetIdx[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\nfunction encode (data: Uint8Array, alphabet: string, bitsPerChar: number): string {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits !== 0) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (((out.length * bitsPerChar) & 7) !== 0) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\nfunction createAlphabetIdx (alphabet: string): Record<string, number> {\n  // Build the character lookup table:\n  const alphabetIdx: Record<string, number> = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    alphabetIdx[alphabet[i]] = i\n  }\n  return alphabetIdx\n}\n\n/**\n * RFC4648 Factory\n */\nexport function rfc4648 <Base extends string, Prefix extends string> ({ name, prefix, bitsPerChar, alphabet }: { name: Base, prefix: Prefix, bitsPerChar: number, alphabet: string }): Codec<Base, Prefix> {\n  const alphabetIdx = createAlphabetIdx(alphabet)\n  return from({\n    prefix,\n    name,\n    encode (input: Uint8Array): string {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input: string): Uint8Array {\n      return decode(input, alphabetIdx, bitsPerChar, name)\n    }\n  })\n}\n", "import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n", "import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n", "import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n", "/* eslint-disable */\nvar encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  // @ts-ignore\n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      // @ts-ignore\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  // @ts-ignore\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (/** @type {number} */ value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n", "import varint from './vendor/varint.js'\n\nexport function decode (data: Uint8Array, offset = 0): [number, number] {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\nexport function encodeTo (int: number, target: Uint8Array, offset = 0): Uint8Array {\n  varint.encode(int, target, offset)\n  return target\n}\n\nexport function encodingLength (int: number): number {\n  return varint.encodingLength(int)\n}\n", "import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\nimport type { MultihashDigest } from './interface.js'\n\n/**\n * Creates a multihash digest.\n */\nexport function create <Code extends number> (code: Code, digest: Uint8Array): Digest<Code, number> {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode (multihash: Uint8Array): MultihashDigest {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\nexport function equals (a: MultihashDigest, b: unknown): b is MultihashDigest {\n  if (a === b) {\n    return true\n  } else {\n    const data = b as { code?: unknown, size?: unknown, bytes?: unknown }\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest<Code extends number, Size extends number> implements MultihashDigest {\n  readonly code: Code\n  readonly size: Size\n  readonly digest: Uint8Array\n  readonly bytes: Uint8Array\n\n  /**\n   * Creates a multihash digest.\n   */\n  constructor (code: Code, size: Size, digest: Uint8Array, bytes: Uint8Array) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n\n/**\n * Used to check that the passed multihash has the passed code\n */\nexport function hasCode <T extends number> (digest: MultihashDigest, code: T): digest is MultihashDigest<T> {\n  return digest.code === code\n}\n", "import { base32 } from './bases/base32.js'\nimport { base36 } from './bases/base36.js'\nimport { base58btc } from './bases/base58.js'\nimport { coerce } from './bytes.js'\nimport * as Digest from './hashes/digest.js'\nimport * as varint from './varint.js'\nimport type * as API from './link/interface.js'\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\nexport function format <T extends API.Link<unknown, number, number, API.Version>, Prefix extends string> (link: T, base?: API.MultibaseEncoder<Prefix>): API.ToString<T, Prefix> {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        base as API.MultibaseEncoder<'z'> ?? base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        (base ?? base32.encoder) as API.MultibaseEncoder<Prefix>\n      )\n  }\n}\n\nexport function toJSON <Link extends API.UnknownLink> (link: Link): API.LinkJSON<Link> {\n  return {\n    '/': format(link)\n  }\n}\n\nexport function fromJSON <Link extends API.UnknownLink> (json: API.LinkJSON<Link>): CID<unknown, number, number, API.Version> {\n  return CID.parse(json['/'])\n}\n\nconst cache = new WeakMap<API.UnknownLink, Map<string, string>>()\n\nfunction baseCache (cid: API.UnknownLink): Map<string, string> {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\nexport class CID<Data = unknown, Format extends number = number, Alg extends number = number, Version extends API.Version = API.Version> implements API.Link<Data, Format, Alg, Version> {\n  readonly code: Format\n  readonly version: Version\n  readonly multihash: API.MultihashDigest<Alg>\n  readonly bytes: Uint8Array\n  readonly '/': Uint8Array\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param multihash - (Multi)hash of the of the content.\n   */\n  constructor (version: Version, code: Format, multihash: API.MultihashDigest<Alg>, bytes: Uint8Array) {\n    this.code = code\n    this.version = version\n    this.multihash = multihash\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID (): this {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset (): number {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength (): number {\n    return this.bytes.byteLength\n  }\n\n  toV0 (): CID<Data, API.DAG_PB, API.SHA_256, 0> {\n    switch (this.version) {\n      case 0: {\n        return this as CID<Data, API.DAG_PB, API.SHA_256, 0>\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return (\n          CID.createV0(\n            multihash as API.MultihashDigest<API.SHA_256>\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  toV1 (): CID<Data, Format, Alg, 1> {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return this as CID<Data, Format, Alg, 1>\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  equals (other: unknown): other is CID<Data, Format, Alg, Version> {\n    return CID.equals(this, other)\n  }\n\n  static equals <Data, Format extends number, Alg extends number, Version extends API.Version>(self: API.Link<Data, Format, Alg, Version>, other: unknown): other is CID {\n    const unknown = other as { code?: unknown, version?: unknown, multihash?: unknown }\n    return (\n      unknown != null &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  toString (base?: API.MultibaseEncoder<string>): string {\n    return format(this, base)\n  }\n\n  toJSON (): API.LinkJSON<this> {\n    return { '/': format(this) }\n  }\n\n  link (): this {\n    return this\n  }\n\n  readonly [Symbol.toStringTag] = 'CID';\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] (): string {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   */\n  static asCID <Data, Format extends number, Alg extends number, Version extends API.Version, U>(input: API.Link<Data, Format, Alg, Version> | U): CID<Data, Format, Alg, Version> | null {\n    if (input == null) {\n      return null\n    }\n\n    const value = input as any\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        multihash as API.MultihashDigest<Alg>,\n        bytes ?? encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest = Digest.decode(multihash) as API.MultihashDigest<Alg>\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param digest - (Multi)hash of the of the content.\n   */\n  static create <Data, Format extends number, Alg extends number, Version extends API.Version>(version: Version, code: Format, digest: API.MultihashDigest<Alg>): CID<Data, Format, Alg, Version> {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   */\n  static createV0 <T = unknown>(digest: API.MultihashDigest<typeof SHA_256_CODE>): CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0> {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @param code - Content encoding format code.\n   * @param digest - Multihash of the content.\n   */\n  static createV1 <Data, Code extends number, Alg extends number>(code: Code, digest: API.MultihashDigest<Alg>): CID<Data, Code, Alg, 1> {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   */\n  static decode <Data, Code extends number, Alg extends number, Version extends API.Version>(bytes: API.ByteView<API.Link<Data, Code, Alg, Version>>): CID<Data, Code, Alg, Version> {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length !== 0) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   */\n  static decodeFirst <T, C extends number, A extends number, V extends API.Version>(bytes: API.ByteView<API.Link<T, C, A, V>>): [CID<T, C, A, V>, Uint8Array] {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(digest as API.MultihashDigest<API.SHA_256>)\n        : CID.createV1(specs.codec, digest)\n    return [cid as CID<T, C, A, V>, bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   */\n  static inspectBytes <T, C extends number, A extends number, V extends API.Version>(initialBytes: API.ByteView<API.Link<T, C, A, V>>): { version: V, codec: C, multihashCode: A, digestSize: number, multihashSize: number, size: number } {\n    let offset = 0\n    const next = (): number => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = next() as V\n    let codec = DAG_PB_CODE as C\n    if (version as number === 18) {\n      // CIDv0\n      version = 0 as V\n      offset = 0\n    } else {\n      codec = next() as C\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = next() as A // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   */\n  static parse <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version>(source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): CID<Data, Code, Alg, Version> {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\nfunction parseCIDtoBytes <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version> (source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): [Prefix, API.ByteView<API.Link<Data, Code, Alg, Version>>] {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base ?? base58btc\n      return [\n        base58btc.prefix as Prefix,\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base ?? base58btc\n      return [base58btc.prefix as Prefix, decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base ?? base32\n      return [base32.prefix as Prefix, decoder.decode(source)]\n    }\n    case base36.prefix: {\n      const decoder = base ?? base36\n      return [base36.prefix as Prefix, decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [source[0] as Prefix, base.decode(source)]\n    }\n  }\n}\n\nfunction toStringV0 (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<'z'>): string {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nfunction toStringV1 <Prefix extends string> (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<Prefix>): string {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\nfunction encodeCID (version: API.Version, code: number, multihash: Uint8Array): Uint8Array {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n", "export const MAX_ADDRESS_AGE = 3_600_000\nexport const MAX_PEER_AGE = 21_600_000\n", "/* eslint-disable complexity */\n\nimport { decodeMessage, encodeMessage, MaxLengthError, MaxSizeError, message } from 'protons-runtime'\nimport { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc'\nimport type { Codec, DecodeOptions } from 'protons-runtime'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface Peer {\n  addresses: Address[]\n  protocols: string[]\n  publicKey?: Uint8Array\n  peerRecordEnvelope?: Uint8Array\n  metadata: Map<string, Uint8Array>\n  tags: Map<string, Tag>\n  updated?: number\n}\n\nexport namespace Peer {\n  export interface Peer$metadataEntry {\n    key: string\n    value: Uint8Array\n  }\n\n  export namespace Peer$metadataEntry {\n    let _codec: Codec<Peer$metadataEntry>\n\n    export const codec = (): Codec<Peer$metadataEntry> => {\n      if (_codec == null) {\n        _codec = message<Peer$metadataEntry>((obj, w, opts = {}) => {\n          if (opts.lengthDelimited !== false) {\n            w.fork()\n          }\n\n          if ((obj.key != null && obj.key !== '')) {\n            w.uint32(10)\n            w.string(obj.key)\n          }\n\n          if ((obj.value != null && obj.value.byteLength > 0)) {\n            w.uint32(18)\n            w.bytes(obj.value)\n          }\n\n          if (opts.lengthDelimited !== false) {\n            w.ldelim()\n          }\n        }, (reader, length, opts = {}) => {\n          const obj: any = {\n            key: '',\n            value: uint8ArrayAlloc(0)\n          }\n\n          const end = length == null ? reader.len : reader.pos + length\n\n          while (reader.pos < end) {\n            const tag = reader.uint32()\n\n            switch (tag >>> 3) {\n              case 1: {\n                obj.key = reader.string()\n                break\n              }\n              case 2: {\n                obj.value = reader.bytes()\n                break\n              }\n              default: {\n                reader.skipType(tag & 7)\n                break\n              }\n            }\n          }\n\n          return obj\n        })\n      }\n\n      return _codec\n    }\n\n    export const encode = (obj: Partial<Peer$metadataEntry>): Uint8Array => {\n      return encodeMessage(obj, Peer$metadataEntry.codec())\n    }\n\n    export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Peer$metadataEntry>): Peer$metadataEntry => {\n      return decodeMessage(buf, Peer$metadataEntry.codec(), opts)\n    }\n  }\n\n  export interface Peer$tagsEntry {\n    key: string\n    value?: Tag\n  }\n\n  export namespace Peer$tagsEntry {\n    let _codec: Codec<Peer$tagsEntry>\n\n    export const codec = (): Codec<Peer$tagsEntry> => {\n      if (_codec == null) {\n        _codec = message<Peer$tagsEntry>((obj, w, opts = {}) => {\n          if (opts.lengthDelimited !== false) {\n            w.fork()\n          }\n\n          if ((obj.key != null && obj.key !== '')) {\n            w.uint32(10)\n            w.string(obj.key)\n          }\n\n          if (obj.value != null) {\n            w.uint32(18)\n            Tag.codec().encode(obj.value, w)\n          }\n\n          if (opts.lengthDelimited !== false) {\n            w.ldelim()\n          }\n        }, (reader, length, opts = {}) => {\n          const obj: any = {\n            key: ''\n          }\n\n          const end = length == null ? reader.len : reader.pos + length\n\n          while (reader.pos < end) {\n            const tag = reader.uint32()\n\n            switch (tag >>> 3) {\n              case 1: {\n                obj.key = reader.string()\n                break\n              }\n              case 2: {\n                obj.value = Tag.codec().decode(reader, reader.uint32(), {\n                  limits: opts.limits?.value\n                })\n                break\n              }\n              default: {\n                reader.skipType(tag & 7)\n                break\n              }\n            }\n          }\n\n          return obj\n        })\n      }\n\n      return _codec\n    }\n\n    export const encode = (obj: Partial<Peer$tagsEntry>): Uint8Array => {\n      return encodeMessage(obj, Peer$tagsEntry.codec())\n    }\n\n    export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Peer$tagsEntry>): Peer$tagsEntry => {\n      return decodeMessage(buf, Peer$tagsEntry.codec(), opts)\n    }\n  }\n\n  let _codec: Codec<Peer>\n\n  export const codec = (): Codec<Peer> => {\n    if (_codec == null) {\n      _codec = message<Peer>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.addresses != null) {\n          for (const value of obj.addresses) {\n            w.uint32(10)\n            Address.codec().encode(value, w)\n          }\n        }\n\n        if (obj.protocols != null) {\n          for (const value of obj.protocols) {\n            w.uint32(18)\n            w.string(value)\n          }\n        }\n\n        if (obj.publicKey != null) {\n          w.uint32(34)\n          w.bytes(obj.publicKey)\n        }\n\n        if (obj.peerRecordEnvelope != null) {\n          w.uint32(42)\n          w.bytes(obj.peerRecordEnvelope)\n        }\n\n        if (obj.metadata != null && obj.metadata.size !== 0) {\n          for (const [key, value] of obj.metadata.entries()) {\n            w.uint32(50)\n            Peer.Peer$metadataEntry.codec().encode({ key, value }, w)\n          }\n        }\n\n        if (obj.tags != null && obj.tags.size !== 0) {\n          for (const [key, value] of obj.tags.entries()) {\n            w.uint32(58)\n            Peer.Peer$tagsEntry.codec().encode({ key, value }, w)\n          }\n        }\n\n        if (obj.updated != null) {\n          w.uint32(64)\n          w.uint64Number(obj.updated)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          addresses: [],\n          protocols: [],\n          metadata: new Map<string, Uint8Array>(),\n          tags: new Map<string, undefined>()\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              if (opts.limits?.addresses != null && obj.addresses.length === opts.limits.addresses) {\n                throw new MaxLengthError('Decode error - map field \"addresses\" had too many elements')\n              }\n\n              obj.addresses.push(Address.codec().decode(reader, reader.uint32(), {\n                limits: opts.limits?.addresses$\n              }))\n              break\n            }\n            case 2: {\n              if (opts.limits?.protocols != null && obj.protocols.length === opts.limits.protocols) {\n                throw new MaxLengthError('Decode error - map field \"protocols\" had too many elements')\n              }\n\n              obj.protocols.push(reader.string())\n              break\n            }\n            case 4: {\n              obj.publicKey = reader.bytes()\n              break\n            }\n            case 5: {\n              obj.peerRecordEnvelope = reader.bytes()\n              break\n            }\n            case 6: {\n              if (opts.limits?.metadata != null && obj.metadata.size === opts.limits.metadata) {\n                throw new MaxSizeError('Decode error - map field \"metadata\" had too many elements')\n              }\n\n              const entry = Peer.Peer$metadataEntry.codec().decode(reader, reader.uint32())\n              obj.metadata.set(entry.key, entry.value)\n              break\n            }\n            case 7: {\n              if (opts.limits?.tags != null && obj.tags.size === opts.limits.tags) {\n                throw new MaxSizeError('Decode error - map field \"tags\" had too many elements')\n              }\n\n              const entry = Peer.Peer$tagsEntry.codec().decode(reader, reader.uint32(), {\n                limits: {\n                  value: opts.limits?.tags$value\n                }\n              })\n              obj.tags.set(entry.key, entry.value)\n              break\n            }\n            case 8: {\n              obj.updated = reader.uint64Number()\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Peer>): Uint8Array => {\n    return encodeMessage(obj, Peer.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Peer>): Peer => {\n    return decodeMessage(buf, Peer.codec(), opts)\n  }\n}\n\nexport interface Address {\n  multiaddr: Uint8Array\n  isCertified?: boolean\n  observed?: number\n}\n\nexport namespace Address {\n  let _codec: Codec<Address>\n\n  export const codec = (): Codec<Address> => {\n    if (_codec == null) {\n      _codec = message<Address>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if ((obj.multiaddr != null && obj.multiaddr.byteLength > 0)) {\n          w.uint32(10)\n          w.bytes(obj.multiaddr)\n        }\n\n        if (obj.isCertified != null) {\n          w.uint32(16)\n          w.bool(obj.isCertified)\n        }\n\n        if (obj.observed != null) {\n          w.uint32(24)\n          w.uint64Number(obj.observed)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          multiaddr: uint8ArrayAlloc(0)\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.multiaddr = reader.bytes()\n              break\n            }\n            case 2: {\n              obj.isCertified = reader.bool()\n              break\n            }\n            case 3: {\n              obj.observed = reader.uint64Number()\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Address>): Uint8Array => {\n    return encodeMessage(obj, Address.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Address>): Address => {\n    return decodeMessage(buf, Address.codec(), opts)\n  }\n}\n\nexport interface Tag {\n  value: number\n  expiry?: bigint\n}\n\nexport namespace Tag {\n  let _codec: Codec<Tag>\n\n  export const codec = (): Codec<Tag> => {\n    if (_codec == null) {\n      _codec = message<Tag>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if ((obj.value != null && obj.value !== 0)) {\n          w.uint32(8)\n          w.uint32(obj.value)\n        }\n\n        if (obj.expiry != null) {\n          w.uint32(16)\n          w.uint64(obj.expiry)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          value: 0\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.value = reader.uint32()\n              break\n            }\n            case 2: {\n              obj.expiry = reader.uint64()\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Tag>): Uint8Array => {\n    return encodeMessage(obj, Tag.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Tag>): Tag => {\n    return decodeMessage(buf, Tag.codec(), opts)\n  }\n}\n", "import { publicKeyFromProtobuf } from '@libp2p/crypto/keys'\nimport { peerIdFromPublicKey } from '@libp2p/peer-id'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { Peer as PeerPB } from '../pb/peer.js'\nimport type { PeerId, Peer, Tag } from '@libp2p/interface'\nimport type { Digest } from 'multiformats/hashes/digest'\n\nfunction populatePublicKey (peerId: PeerId, protobuf: PeerPB): PeerId {\n  if (peerId.publicKey != null || protobuf.publicKey == null) {\n    return peerId\n  }\n\n  let digest: Digest<18, number> | undefined\n\n  if (peerId.type === 'RSA') {\n    // avoid hashing public key\n    digest = peerId.toMultihash()\n  }\n\n  const publicKey = publicKeyFromProtobuf(protobuf.publicKey, digest)\n  return peerIdFromPublicKey(publicKey)\n}\n\nexport function bytesToPeer (peerId: PeerId, buf: Uint8Array, maxAddressAge: number): Peer {\n  const peer = PeerPB.decode(buf)\n\n  return pbToPeer(peerId, peer, maxAddressAge)\n}\n\nexport function pbToPeer (peerId: PeerId, peer: PeerPB, maxAddressAge: number): Peer {\n  const tags = new Map<string, Tag>()\n\n  // remove any expired tags\n  const now = BigInt(Date.now())\n\n  for (const [key, tag] of peer.tags.entries()) {\n    if (tag.expiry != null && tag.expiry < now) {\n      continue\n    }\n\n    tags.set(key, tag)\n  }\n\n  return {\n    ...peer,\n    id: populatePublicKey(peerId, peer),\n    addresses: peer.addresses\n      // remove any expired multiaddrs\n      .filter(({ observed }) => observed != null && observed > (Date.now() - maxAddressAge))\n      .map(({ multiaddr: ma, isCertified }) => {\n        return {\n          multiaddr: multiaddr(ma),\n          isCertified: isCertified ?? false\n        }\n      }),\n    metadata: peer.metadata,\n    peerRecordEnvelope: peer.peerRecordEnvelope ?? undefined,\n    tags\n  }\n}\n", "import { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport type { Peer, Address, Tag } from '../pb/peer.js'\n\nexport function peerEquals (peerA: Peer, peerB: Peer): boolean {\n  return addressesEqual(peerA.addresses, peerB.addresses) &&\n    protocolsEqual(peerA.protocols, peerB.protocols) &&\n    publicKeyEqual(peerA.publicKey, peerB.publicKey) &&\n    peerRecordEnvelope(peerA.peerRecordEnvelope, peerB.peerRecordEnvelope) &&\n    metadataEqual(peerA.metadata, peerB.metadata) &&\n    tagsEqual(peerA.tags, peerB.tags)\n}\n\nfunction addressesEqual (addressesA: Address[], addressesB: Address[]): boolean {\n  return compareArrays(addressesA, addressesB, (a, b) => {\n    if (a.isCertified !== b.isCertified) {\n      return false\n    }\n\n    if (!uint8ArrayEquals(a.multiaddr, b.multiaddr)) {\n      return false\n    }\n\n    return true\n  })\n}\n\nfunction protocolsEqual (protocolsA: string[], protocolsB: string[]): boolean {\n  return compareArrays(protocolsA, protocolsB, (a, b) => a === b)\n}\n\nfunction publicKeyEqual (publicKeyA?: Uint8Array, publicKeyB?: Uint8Array): boolean {\n  return compareOptionalUint8Arrays(publicKeyA, publicKeyB)\n}\n\nfunction peerRecordEnvelope (envelopeA?: Uint8Array, envelopeB?: Uint8Array): boolean {\n  return compareOptionalUint8Arrays(envelopeA, envelopeB)\n}\n\nfunction metadataEqual (metadataA: Map<string, Uint8Array>, metadataB: Map<string, Uint8Array>): boolean {\n  return compareMaps(metadataA, metadataB, (a, b) => uint8ArrayEquals(a, b))\n}\n\nfunction tagsEqual (metadataA: Map<string, Tag>, metadataB: Map<string, Tag>): boolean {\n  return compareMaps(metadataA, metadataB, (a, b) => a.value === b.value && a.expiry === b.expiry)\n}\n\nfunction compareOptionalUint8Arrays (arrA?: Uint8Array, arrB?: Uint8Array): boolean {\n  if (arrA == null && arrB == null) {\n    return true\n  }\n\n  if (arrA != null && arrB != null) {\n    return uint8ArrayEquals(arrA, arrB)\n  }\n\n  return false\n}\n\nfunction compareArrays <T> (arrA: T[], arrB: T[], compare: (a: T, b: T) => boolean): boolean {\n  if (arrA.length !== arrB.length) {\n    return false\n  }\n\n  for (let i = 0; i < arrA.length; i++) {\n    if (!compare(arrA[i], arrB[i])) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction compareMaps <K, V> (mapA: Map<K, V>, mapB: Map<K, V>, compare: (a: V, b: V) => boolean): boolean {\n  if (mapA.size !== mapB.size) {\n    return false\n  }\n\n  for (const [key, value] of mapA.entries()) {\n    const valueB = mapB.get(key)\n\n    if (valueB == null) {\n      return false\n    }\n\n    if (!compare(value, valueB)) {\n      return false\n    }\n  }\n\n  return true\n}\n", "import { InvalidParametersError, isPeerId } from '@libp2p/interface'\nimport { Key } from 'interface-datastore/key'\nimport type { PeerId } from '@libp2p/interface'\n\nexport const NAMESPACE_COMMON = '/peers/'\n\nexport function peerIdToDatastoreKey (peerId: PeerId): Key {\n  if (!isPeerId(peerId) || peerId.type == null) {\n    throw new InvalidParametersError('Invalid PeerId')\n  }\n\n  const b32key = peerId.toCID().toString()\n  return new Key(`${NAMESPACE_COMMON}${b32key}`)\n}\n", "import { InvalidParametersError } from '@libp2p/interface'\nimport { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\nimport type { AddressFilter } from '../index.js'\nimport type { Address as AddressPB } from '../pb/peer.js'\nimport type { PeerId, Address } from '@libp2p/interface'\nimport type { AbortOptions } from '@multiformats/multiaddr'\n\nexport async function dedupeFilterAndSortAddresses (peerId: PeerId, filter: AddressFilter, addresses: Array<Address | AddressPB | undefined>, existingAddresses?: AddressPB[], options?: AbortOptions): Promise<AddressPB[]> {\n  const addressMap = new Map<string, Address>()\n\n  for (const addr of addresses) {\n    if (addr == null) {\n      continue\n    }\n\n    if (addr.multiaddr instanceof Uint8Array) {\n      addr.multiaddr = multiaddr(addr.multiaddr)\n    }\n\n    if (!isMultiaddr(addr.multiaddr)) {\n      throw new InvalidParametersError('Multiaddr was invalid')\n    }\n\n    if (!(await filter(peerId, addr.multiaddr, options))) {\n      continue\n    }\n\n    const isCertified = addr.isCertified ?? false\n    const maStr = addr.multiaddr.toString()\n    const existingAddr = addressMap.get(maStr)\n\n    if (existingAddr != null) {\n      addr.isCertified = existingAddr.isCertified || isCertified\n    } else {\n      addressMap.set(maStr, {\n        multiaddr: addr.multiaddr,\n        isCertified\n      })\n    }\n  }\n\n  return [...addressMap.values()]\n    .sort((a, b) => {\n      return a.multiaddr.toString().localeCompare(b.multiaddr.toString())\n    })\n    .map(({ isCertified, multiaddr: ma }) => {\n      // strip the trailing peerId if it is present\n      const addrPeer = ma.getPeerId()\n\n      if (peerId.equals(addrPeer)) {\n        ma = ma.decapsulate(multiaddr(`/p2p/${peerId}`))\n      }\n\n      return {\n        isCertified,\n        multiaddr: ma.bytes\n      }\n    })\n}\n", "/* eslint-disable complexity */\nimport { publicKeyToProtobuf } from '@libp2p/crypto/keys'\nimport { InvalidParametersError } from '@libp2p/interface'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { dedupeFilterAndSortAddresses } from './dedupe-addresses.js'\nimport type { AddressFilter } from '../index.js'\nimport type { Tag, Peer as PeerPB } from '../pb/peer.js'\nimport type { ExistingPeer } from '../store.js'\nimport type { PeerId, Address, PeerData, TagOptions } from '@libp2p/interface'\nimport type { AbortOptions } from '@multiformats/multiaddr'\n\nexport interface ToPBPeerOptions extends AbortOptions {\n  addressFilter?: AddressFilter\n  existingPeer?: ExistingPeer\n}\n\nexport async function toPeerPB (peerId: PeerId, data: Partial<PeerData>, strategy: 'merge' | 'patch', options: ToPBPeerOptions): Promise<PeerPB> {\n  if (data == null) {\n    throw new InvalidParametersError('Invalid PeerData')\n  }\n\n  if (data.publicKey != null && peerId.publicKey != null && !data.publicKey.equals(peerId.publicKey)) {\n    throw new InvalidParametersError('publicKey bytes do not match peer id publicKey bytes')\n  }\n\n  const existingPeer = options.existingPeer?.peer\n\n  if (existingPeer != null && !peerId.equals(existingPeer.id)) {\n    throw new InvalidParametersError('peer id did not match existing peer id')\n  }\n\n  let addresses: Address[] = existingPeer?.addresses ?? []\n  let protocols = new Set<string>(existingPeer?.protocols ?? [])\n  let metadata: Map<string, Uint8Array> = existingPeer?.metadata ?? new Map()\n  let tags: Map<string, Tag> = existingPeer?.tags ?? new Map()\n  let peerRecordEnvelope: Uint8Array | undefined = existingPeer?.peerRecordEnvelope\n\n  // when patching, we replace the original fields with passed values\n  if (strategy === 'patch') {\n    if (data.multiaddrs != null || data.addresses != null) {\n      addresses = []\n\n      if (data.multiaddrs != null) {\n        addresses.push(...data.multiaddrs.map(multiaddr => ({\n          isCertified: false,\n          multiaddr\n        })))\n      }\n\n      if (data.addresses != null) {\n        addresses.push(...data.addresses)\n      }\n    }\n\n    if (data.protocols != null) {\n      protocols = new Set(data.protocols)\n    }\n\n    if (data.metadata != null) {\n      const metadataEntries = data.metadata instanceof Map ? [...data.metadata.entries()] : Object.entries(data.metadata)\n\n      metadata = createSortedMap(metadataEntries, {\n        validate: validateMetadata\n      })\n    }\n\n    if (data.tags != null) {\n      const tagsEntries = data.tags instanceof Map ? [...data.tags.entries()] : Object.entries(data.tags)\n\n      tags = createSortedMap(tagsEntries, {\n        validate: validateTag,\n        map: mapTag\n      })\n    }\n\n    if (data.peerRecordEnvelope != null) {\n      peerRecordEnvelope = data.peerRecordEnvelope\n    }\n  }\n\n  // when merging, we join the original fields with passed values\n  if (strategy === 'merge') {\n    if (data.multiaddrs != null) {\n      addresses.push(...data.multiaddrs.map(multiaddr => ({\n        isCertified: false,\n        multiaddr\n      })))\n    }\n\n    if (data.addresses != null) {\n      addresses.push(...data.addresses)\n    }\n\n    if (data.protocols != null) {\n      protocols = new Set([...protocols, ...data.protocols])\n    }\n\n    if (data.metadata != null) {\n      const metadataEntries = data.metadata instanceof Map ? [...data.metadata.entries()] : Object.entries(data.metadata)\n\n      for (const [key, value] of metadataEntries) {\n        if (value == null) {\n          metadata.delete(key)\n        } else {\n          metadata.set(key, value)\n        }\n      }\n\n      metadata = createSortedMap([...metadata.entries()], {\n        validate: validateMetadata\n      })\n    }\n\n    if (data.tags != null) {\n      const tagsEntries = data.tags instanceof Map ? [...data.tags.entries()] : Object.entries(data.tags)\n      const mergedTags = new Map<string, Tag | TagOptions>(tags)\n\n      for (const [key, value] of tagsEntries) {\n        if (value == null) {\n          mergedTags.delete(key)\n        } else {\n          mergedTags.set(key, value)\n        }\n      }\n\n      tags = createSortedMap([...mergedTags.entries()], {\n        validate: validateTag,\n        map: mapTag\n      })\n    }\n\n    if (data.peerRecordEnvelope != null) {\n      peerRecordEnvelope = data.peerRecordEnvelope\n    }\n  }\n\n  let publicKey: Uint8Array | undefined\n\n  if (existingPeer?.id.publicKey != null) {\n    publicKey = publicKeyToProtobuf(existingPeer.id.publicKey)\n  } else if (data.publicKey != null) {\n    publicKey = publicKeyToProtobuf(data.publicKey)\n  } else if (peerId.publicKey != null) {\n    publicKey = publicKeyToProtobuf(peerId.publicKey)\n  }\n\n  const output: PeerPB = {\n    addresses: await dedupeFilterAndSortAddresses(\n      peerId,\n      options.addressFilter ?? (async () => true),\n      addresses,\n      options.existingPeer?.peerPB.addresses,\n      options\n    ),\n    protocols: [...protocols.values()].sort((a, b) => {\n      return a.localeCompare(b)\n    }),\n    metadata,\n    tags,\n    publicKey,\n    peerRecordEnvelope\n  }\n\n  // add observed addresses to multiaddrs\n  output.addresses.forEach(addr => {\n    addr.observed = options.existingPeer?.peerPB.addresses?.find(addr => uint8ArrayEquals(addr.multiaddr, addr.multiaddr))?.observed ?? Date.now()\n  })\n\n  // Ed25519 and secp256k1 have their public key embedded in them so no need to duplicate it\n  if (peerId.type !== 'RSA') {\n    delete output.publicKey\n  }\n\n  return output\n}\n\ninterface CreateSortedMapOptions <V, R = V> {\n  validate(key: string, value: V): void\n  map?(key: string, value: V): R\n}\n\n/**\n * In JS maps are ordered by insertion order so create a new map with the\n * keys inserted in alphabetical order.\n */\nfunction createSortedMap <V, R = V> (entries: Array<[string, V | undefined]>, options: CreateSortedMapOptions<V, R>): Map<string, R> {\n  const output = new Map()\n\n  for (const [key, value] of entries) {\n    if (value == null) {\n      continue\n    }\n\n    options.validate(key, value)\n  }\n\n  for (const [key, value] of entries.sort(([a], [b]) => {\n    return a.localeCompare(b)\n  })) {\n    if (value != null) {\n      output.set(key, options.map?.(key, value) ?? value)\n    }\n  }\n\n  return output\n}\n\nfunction validateMetadata (key: string, value: Uint8Array): void {\n  if (typeof key !== 'string') {\n    throw new InvalidParametersError('Metadata key must be a string')\n  }\n\n  if (!(value instanceof Uint8Array)) {\n    throw new InvalidParametersError('Metadata value must be a Uint8Array')\n  }\n}\n\nfunction validateTag (key: string, tag: TagOptions): void {\n  if (typeof key !== 'string') {\n    throw new InvalidParametersError('Tag name must be a string')\n  }\n\n  if (tag.value != null) {\n    if (parseInt(`${tag.value}`, 10) !== tag.value) {\n      throw new InvalidParametersError('Tag value must be an integer')\n    }\n\n    if (tag.value < 0 || tag.value > 100) {\n      throw new InvalidParametersError('Tag value must be between 0-100')\n    }\n  }\n\n  if (tag.ttl != null) {\n    if (parseInt(`${tag.ttl}`, 10) !== tag.ttl) {\n      throw new InvalidParametersError('Tag ttl must be an integer')\n    }\n\n    if (tag.ttl < 0) {\n      throw new InvalidParametersError('Tag ttl must be between greater than 0')\n    }\n  }\n}\n\nfunction mapTag (key: string, tag: any): Tag {\n  let expiry: bigint | undefined\n\n  if (tag.expiry != null) {\n    expiry = tag.expiry\n  }\n\n  if (tag.ttl != null) {\n    expiry = BigInt(Date.now() + Number(tag.ttl))\n  }\n\n  const output: Tag = {\n    value: tag.value ?? 0\n  }\n\n  if (expiry != null) {\n    output.expiry = expiry\n  }\n\n  return output\n}\n", "import { NotFoundError } from '@libp2p/interface'\nimport { PeerMap, trackedPeerMap } from '@libp2p/peer-collections'\nimport { peerIdFromCID } from '@libp2p/peer-id'\nimport mortice from 'mortice'\nimport { base32 } from 'multiformats/bases/base32'\nimport { CID } from 'multiformats/cid'\nimport { MAX_ADDRESS_AGE, MAX_PEER_AGE } from './constants.js'\nimport { Peer as PeerPB } from './pb/peer.js'\nimport { bytesToPeer, pbToPeer } from './utils/bytes-to-peer.js'\nimport { peerEquals } from './utils/peer-equals.js'\nimport { NAMESPACE_COMMON, peerIdToDatastoreKey } from './utils/peer-id-to-datastore-key.js'\nimport { toPeerPB } from './utils/to-peer-pb.js'\nimport type { AddressFilter, PersistentPeerStoreComponents, PersistentPeerStoreInit } from './index.js'\nimport type { PeerUpdate as PeerUpdateExternal, PeerId, Peer, PeerData, PeerQuery, Logger } from '@libp2p/interface'\nimport type { AbortOptions } from '@multiformats/multiaddr'\nimport type { Datastore, Key, Query } from 'interface-datastore'\nimport type { Mortice, Release } from 'mortice'\n\n/**\n * Event detail emitted when peer data changes\n */\nexport interface PeerUpdate extends PeerUpdateExternal {\n  updated: boolean\n}\n\nexport interface ExistingPeer {\n  peerPB: PeerPB\n  peer: Peer\n}\n\nfunction keyToPeerId (key: Key): PeerId {\n  // /peers/${peer-id-as-libp2p-key-cid-string-in-base-32}\n  const base32Str = key.toString().split('/')[2]\n  const buf = CID.parse(base32Str, base32)\n\n  return peerIdFromCID(buf)\n}\n\nfunction decodePeer (key: Key, value: Uint8Array, maxAddressAge: number): Peer {\n  const peerId = keyToPeerId(key)\n\n  return bytesToPeer(peerId, value, maxAddressAge)\n}\n\nfunction mapQuery (query: PeerQuery, maxAddressAge: number): Query {\n  return {\n    prefix: NAMESPACE_COMMON,\n    filters: (query.filters ?? []).map(fn => ({ key, value }) => {\n      return fn(decodePeer(key, value, maxAddressAge))\n    }),\n    orders: (query.orders ?? []).map(fn => (a, b) => {\n      return fn(decodePeer(a.key, a.value, maxAddressAge), decodePeer(b.key, b.value, maxAddressAge))\n    })\n  }\n}\n\nexport interface Lock {\n  refs: number\n  lock: Mortice\n}\n\nexport class PersistentStore {\n  private readonly peerId: PeerId\n  private readonly datastore: Datastore\n  private locks: PeerMap<Lock>\n  private readonly addressFilter?: AddressFilter\n  private readonly log: Logger\n  private readonly maxAddressAge: number\n  private readonly maxPeerAge: number\n\n  constructor (components: PersistentPeerStoreComponents, init: PersistentPeerStoreInit = {}) {\n    this.log = components.logger.forComponent('libp2p:peer-store')\n    this.peerId = components.peerId\n    this.datastore = components.datastore\n    this.addressFilter = init.addressFilter\n    this.locks = trackedPeerMap({\n      name: 'libp2p_peer_store_locks',\n      metrics: components.metrics\n    })\n    this.maxAddressAge = init.maxAddressAge ?? MAX_ADDRESS_AGE\n    this.maxPeerAge = init.maxPeerAge ?? MAX_PEER_AGE\n  }\n\n  getLock (peerId: PeerId): Lock {\n    let lock = this.locks.get(peerId)\n\n    if (lock == null) {\n      lock = {\n        refs: 0,\n        lock: mortice({\n          name: peerId.toString(),\n          singleProcess: true\n        })\n      }\n\n      this.locks.set(peerId, lock)\n    }\n\n    lock.refs++\n\n    return lock\n  }\n\n  private maybeRemoveLock (peerId: PeerId, lock: Lock): void {\n    lock.refs--\n\n    if (lock.refs === 0) {\n      lock.lock.finalize()\n      this.locks.delete(peerId)\n    }\n  }\n\n  async getReadLock (peerId: PeerId, options?: AbortOptions): Promise<Release> {\n    const lock = this.getLock(peerId)\n\n    try {\n      const release = await lock.lock.readLock(options)\n\n      return () => {\n        release()\n        this.maybeRemoveLock(peerId, lock)\n      }\n    } catch (err) {\n      this.maybeRemoveLock(peerId, lock)\n\n      throw err\n    }\n  }\n\n  async getWriteLock (peerId: PeerId, options?: AbortOptions): Promise<Release> {\n    const lock = this.getLock(peerId)\n\n    try {\n      const release = await lock.lock.writeLock(options)\n\n      return () => {\n        release()\n        this.maybeRemoveLock(peerId, lock)\n      }\n    } catch (err) {\n      this.maybeRemoveLock(peerId, lock)\n\n      throw err\n    }\n  }\n\n  async has (peerId: PeerId, options?: AbortOptions): Promise<boolean> {\n    try {\n      await this.load(peerId, options)\n\n      return true\n    } catch (err: any) {\n      if (err.name !== 'NotFoundError') {\n        throw err\n      }\n    }\n\n    return false\n  }\n\n  async delete (peerId: PeerId, options?: AbortOptions): Promise<void> {\n    if (this.peerId.equals(peerId)) {\n      return\n    }\n\n    await this.datastore.delete(peerIdToDatastoreKey(peerId), options)\n  }\n\n  async load (peerId: PeerId, options?: AbortOptions): Promise<Peer> {\n    const key = peerIdToDatastoreKey(peerId)\n    const buf = await this.datastore.get(key, options)\n    const peer = PeerPB.decode(buf)\n\n    if (this.#peerIsExpired(peerId, peer)) {\n      await this.datastore.delete(key, options)\n      throw new NotFoundError()\n    }\n\n    return pbToPeer(peerId, peer, this.peerId.equals(peerId) ? Infinity : this.maxAddressAge)\n  }\n\n  async save (peerId: PeerId, data: PeerData, options?: AbortOptions): Promise<PeerUpdate> {\n    const existingPeer = await this.#findExistingPeer(peerId, options)\n\n    const peerPb: PeerPB = await toPeerPB(peerId, data, 'patch', {\n      ...options,\n      addressFilter: this.addressFilter\n    })\n\n    return this.#saveIfDifferent(peerId, peerPb, existingPeer)\n  }\n\n  async patch (peerId: PeerId, data: Partial<PeerData>, options?: AbortOptions): Promise<PeerUpdate> {\n    const existingPeer = await this.#findExistingPeer(peerId, options)\n\n    const peerPb: PeerPB = await toPeerPB(peerId, data, 'patch', {\n      ...options,\n      addressFilter: this.addressFilter,\n      existingPeer\n    })\n\n    return this.#saveIfDifferent(peerId, peerPb, existingPeer)\n  }\n\n  async merge (peerId: PeerId, data: PeerData, options?: AbortOptions): Promise<PeerUpdate> {\n    const existingPeer = await this.#findExistingPeer(peerId, options)\n\n    const peerPb: PeerPB = await toPeerPB(peerId, data, 'merge', {\n      addressFilter: this.addressFilter,\n      existingPeer\n    })\n\n    return this.#saveIfDifferent(peerId, peerPb, existingPeer)\n  }\n\n  async * all (options?: PeerQuery): AsyncGenerator<Peer, void, unknown> {\n    for await (const { key, value } of this.datastore.query(mapQuery(options ?? {}, this.maxAddressAge), options)) {\n      const peerId = keyToPeerId(key)\n\n      // skip self peer if present\n      if (peerId.equals(this.peerId)) {\n        continue\n      }\n\n      const peer = PeerPB.decode(value)\n\n      // remove expired peer\n      if (this.#peerIsExpired(peerId, peer)) {\n        await this.datastore.delete(key, options)\n        continue\n      }\n\n      yield pbToPeer(peerId, peer, this.peerId.equals(peerId) ? Infinity : this.maxAddressAge)\n    }\n  }\n\n  async #findExistingPeer (peerId: PeerId, options?: AbortOptions): Promise<ExistingPeer | undefined> {\n    try {\n      const key = peerIdToDatastoreKey(peerId)\n      const buf = await this.datastore.get(key, options)\n      const peerPB = PeerPB.decode(buf)\n\n      // remove expired peer\n      if (this.#peerIsExpired(peerId, peerPB)) {\n        await this.datastore.delete(key, options)\n        throw new NotFoundError()\n      }\n\n      return {\n        peerPB,\n        peer: pbToPeer(peerId, peerPB, this.maxAddressAge)\n      }\n    } catch (err: any) {\n      if (err.name !== 'NotFoundError') {\n        this.log.error('invalid peer data found in peer store - %e', err)\n      }\n    }\n  }\n\n  async #saveIfDifferent (peerId: PeerId, peer: PeerPB, existingPeer?: ExistingPeer, options?: AbortOptions): Promise<PeerUpdate> {\n    // record last update\n    peer.updated = Date.now()\n    const buf = PeerPB.encode(peer)\n\n    await this.datastore.put(peerIdToDatastoreKey(peerId), buf, options)\n\n    return {\n      peer: pbToPeer(peerId, peer, this.maxAddressAge),\n      previous: existingPeer?.peer,\n      updated: existingPeer == null || !peerEquals(peer, existingPeer.peerPB)\n    }\n  }\n\n  #peerIsExpired (peerId: PeerId, peer: PeerPB): boolean {\n    if (peer.updated == null) {\n      return true\n    }\n\n    if (this.peerId.equals(peerId)) {\n      return false\n    }\n\n    const expired = peer.updated < (Date.now() - this.maxPeerAge)\n    const minAddressObserved = Date.now() - this.maxAddressAge\n    const addrs = peer.addresses.filter(addr => {\n      return addr.observed != null && addr.observed > minAddressObserved\n    })\n\n    return expired && addrs.length === 0\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * The peer store is where libp2p stores data about the peers it has encountered on the network.\n */\n\nimport { isPeerId } from '@libp2p/interface'\nimport { peerIdFromCID } from '@libp2p/peer-id'\nimport { RecordEnvelope, PeerRecord } from '@libp2p/peer-record'\nimport all from 'it-all'\nimport { PersistentStore } from './store.js'\nimport type { PeerUpdate } from './store.js'\nimport type { ComponentLogger, Libp2pEvents, Logger, PeerId, PeerStore, Peer, PeerData, PeerQuery, PeerInfo, AbortOptions, ConsumePeerRecordOptions, Metrics } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { Datastore } from 'interface-datastore'\nimport type { TypedEventTarget } from 'main-event'\n\nexport interface PersistentPeerStoreComponents {\n  peerId: PeerId\n  datastore: Datastore\n  events: TypedEventTarget<Libp2pEvents>\n  logger: ComponentLogger\n  metrics?: Metrics\n}\n\n/**\n * Return true to allow storing the passed multiaddr for the passed peer\n */\nexport interface AddressFilter {\n  (peerId: PeerId, multiaddr: Multiaddr, options?: AbortOptions): Promise<boolean> | boolean\n}\n\nexport interface PersistentPeerStoreInit {\n  /**\n   * Used to remove multiaddrs of peers before storing them. The default is to\n   * store all addresses\n   */\n  addressFilter?: AddressFilter\n\n  /**\n   * The multiaddrs for a given peer will expire after this number of ms after\n   * which they must be re-fetched using the peer routing.\n   *\n   * Defaults to one hour.\n   *\n   * @default 3_600_000\n   */\n  maxAddressAge?: number\n\n  /**\n   * Any peer without multiaddrs that has not been updated after this number of\n   * ms will be evicted from the peer store.\n   *\n   * Defaults to six hours.\n   *\n   * @default 21_600_000\n   */\n  maxPeerAge?: number\n}\n\n/**\n * An implementation of PeerStore that stores data in a Datastore\n */\nclass PersistentPeerStore implements PeerStore {\n  private readonly store: PersistentStore\n  private readonly events: TypedEventTarget<Libp2pEvents>\n  private readonly peerId: PeerId\n  private readonly log: Logger\n\n  constructor (components: PersistentPeerStoreComponents, init: PersistentPeerStoreInit = {}) {\n    this.log = components.logger.forComponent('libp2p:peer-store')\n    this.events = components.events\n    this.peerId = components.peerId\n    this.store = new PersistentStore(components, init)\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/peer-store'\n\n  async forEach (fn: (peer: Peer,) => void, query?: PeerQuery): Promise<void> {\n    for await (const peer of this.store.all(query)) {\n      fn(peer)\n    }\n  }\n\n  async all (query?: PeerQuery): Promise<Peer[]> {\n    return all(this.store.all(query))\n  }\n\n  async delete (peerId: PeerId, options?: AbortOptions): Promise<void> {\n    const release = await this.store.getReadLock(peerId, options)\n\n    try {\n      await this.store.delete(peerId, options)\n    } finally {\n      release()\n    }\n  }\n\n  async has (peerId: PeerId, options?: AbortOptions): Promise<boolean> {\n    const release = await this.store.getReadLock(peerId, options)\n\n    try {\n      return await this.store.has(peerId, options)\n    } finally {\n      this.log.trace('has release read lock')\n      release?.()\n    }\n  }\n\n  async get (peerId: PeerId, options?: AbortOptions): Promise<Peer> {\n    const release = await this.store.getReadLock(peerId, options)\n\n    try {\n      return await this.store.load(peerId, options)\n    } finally {\n      release?.()\n    }\n  }\n\n  async getInfo (peerId: PeerId, options?: AbortOptions): Promise<PeerInfo> {\n    const peer = await this.get(peerId, options)\n\n    return {\n      id: peer.id,\n      multiaddrs: peer.addresses.map(({ multiaddr }) => multiaddr)\n    }\n  }\n\n  async save (id: PeerId, data: PeerData, options?: AbortOptions): Promise<Peer> {\n    const release = await this.store.getWriteLock(id, options)\n\n    try {\n      const result = await this.store.save(id, data, options)\n\n      this.#emitIfUpdated(id, result)\n\n      return result.peer\n    } finally {\n      release?.()\n    }\n  }\n\n  async patch (id: PeerId, data: PeerData, options?: AbortOptions): Promise<Peer> {\n    const release = await this.store.getWriteLock(id, options)\n\n    try {\n      const result = await this.store.patch(id, data, options)\n\n      this.#emitIfUpdated(id, result)\n\n      return result.peer\n    } finally {\n      release?.()\n    }\n  }\n\n  async merge (id: PeerId, data: PeerData, options?: AbortOptions): Promise<Peer> {\n    const release = await this.store.getWriteLock(id, options)\n\n    try {\n      const result = await this.store.merge(id, data, options)\n\n      this.#emitIfUpdated(id, result)\n\n      return result.peer\n    } finally {\n      release?.()\n    }\n  }\n\n  async consumePeerRecord (buf: Uint8Array, options?: ConsumePeerRecordOptions): Promise<boolean>\n  async consumePeerRecord (buf: Uint8Array, expectedPeer?: PeerId, options?: AbortOptions): Promise<boolean>\n  async consumePeerRecord (buf: Uint8Array, arg1?: any, arg2?: any): Promise<boolean> {\n    const expectedPeer: PeerId | undefined = isPeerId(arg1) ? arg1 : isPeerId(arg1?.expectedPeer) ? arg1.expectedPeer : undefined\n    const options: AbortOptions | undefined = isPeerId(arg1) ? arg2 : arg1 === undefined ? arg2 : arg1\n\n    const envelope = await RecordEnvelope.openAndCertify(buf, PeerRecord.DOMAIN, options)\n    const peerId = peerIdFromCID(envelope.publicKey.toCID())\n\n    if (expectedPeer?.equals(peerId) === false) {\n      this.log('envelope peer id was not the expected peer id - expected: %p received: %p', expectedPeer, peerId)\n      return false\n    }\n\n    const peerRecord = PeerRecord.createFromProtobuf(envelope.payload)\n    let peer: Peer | undefined\n\n    try {\n      peer = await this.get(peerId, options)\n    } catch (err: any) {\n      if (err.name !== 'NotFoundError') {\n        throw err\n      }\n    }\n\n    // ensure seq is greater than, or equal to, the last received\n    if (peer?.peerRecordEnvelope != null) {\n      const storedEnvelope = RecordEnvelope.createFromProtobuf(peer.peerRecordEnvelope)\n      const storedRecord = PeerRecord.createFromProtobuf(storedEnvelope.payload)\n\n      if (storedRecord.seqNumber >= peerRecord.seqNumber) {\n        this.log('sequence number was lower or equal to existing sequence number - stored: %d received: %d', storedRecord.seqNumber, peerRecord.seqNumber)\n        return false\n      }\n    }\n\n    await this.patch(peerRecord.peerId, {\n      peerRecordEnvelope: buf,\n      addresses: peerRecord.multiaddrs.map(multiaddr => ({\n        isCertified: true,\n        multiaddr\n      }))\n    }, options)\n\n    return true\n  }\n\n  #emitIfUpdated (id: PeerId, result: PeerUpdate): void {\n    if (!result.updated) {\n      return\n    }\n\n    if (this.peerId.equals(id)) {\n      this.events.safeDispatchEvent('self:peer:update', { detail: result })\n    } else {\n      this.events.safeDispatchEvent('peer:update', { detail: result })\n    }\n  }\n}\n\nexport function persistentPeerStore (components: PersistentPeerStoreComponents, init: PersistentPeerStoreInit = {}): PeerStore {\n  return new PersistentPeerStore(components, init)\n}\n", "import type { Matcher, MultiaddrMatcher } from './index.js'\nimport type { Multiaddr, Component } from '@multiformats/multiaddr'\n\n/**\n * Matches a multiaddr component with the specified code but no value\n */\nexport const code = (code: number): Matcher => {\n  return {\n    match: (vals) => {\n      const component = vals[0]\n\n      if (component == null) {\n        return false\n      }\n\n      if (component.code !== code) {\n        return false\n      }\n\n      if (component.value != null) {\n        return false\n      }\n\n      return vals.slice(1)\n    }\n  }\n}\n\n/**\n * Matches a multiaddr component with the specified code and value. If the value\n * is omitted any non-undefined value is matched.\n */\nexport const value = (code: number, value?: string): Matcher => {\n  return {\n    match: (vals) => {\n      const component = vals[0]\n\n      if (component?.code !== code) {\n        return false\n      }\n\n      if (component.value == null) {\n        return false\n      }\n\n      if (value != null && component.value !== value) {\n        return false\n      }\n\n      return vals.slice(1)\n    }\n  }\n}\n\n/**\n * An optional matcher\n */\nexport const optional = (matcher: Matcher): Matcher => {\n  return {\n    match: (vals) => {\n      const result = matcher.match(vals)\n\n      if (result === false) {\n        return vals\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Matches any one of the passed matches\n */\nexport const or = (...matchers: Matcher[]): Matcher => {\n  return {\n    match: (vals) => {\n      let matches: Component[] | undefined\n\n      for (const matcher of matchers) {\n        const result = matcher.match(vals)\n\n        // no match\n        if (result === false) {\n          continue\n        }\n\n        // choose greediest matcher\n        if (matches == null || result.length < matches.length) {\n          matches = result\n        }\n      }\n\n      if (matches == null) {\n        return false\n      }\n\n      return matches\n    }\n  }\n}\n\n/**\n * Matches all of the passed matchers\n */\nexport const and = (...matchers: Matcher[]): Matcher => {\n  return {\n    match: (vals) => {\n      for (const matcher of matchers) {\n        // pass what's left of the array\n        const result = matcher.match(vals)\n\n        // no match\n        if (result === false) {\n          return false\n        }\n\n        vals = result\n      }\n\n      return vals\n    }\n  }\n}\n\n/**\n * Create a multiaddr matcher from the passed component matchers\n */\nexport function fmt (...matchers: Matcher[]): MultiaddrMatcher {\n  function match (ma?: Multiaddr): Component[] | false {\n    if (ma == null) {\n      return false\n    }\n\n    let parts = ma.getComponents()\n\n    for (const matcher of matchers) {\n      const result = matcher.match(parts)\n\n      if (result === false) {\n        return false\n      }\n\n      parts = result\n    }\n\n    return parts\n  }\n\n  function matches (ma?: Multiaddr): boolean {\n    const result = match(ma)\n\n    return result !== false\n  }\n\n  function exactMatch (ma?: Multiaddr): boolean {\n    const result = match(ma)\n\n    if (result === false) {\n      return false\n    }\n\n    return result.length === 0\n  }\n\n  return {\n    matchers,\n    matches,\n    exactMatch\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * This module exports various matchers that can be used to infer the type of a\n * passed multiaddr.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/dnsaddr/example.org')\n *\n * DNS.matches(ma) // true - this is a multiaddr with a DNS address at the start\n * ```\n *\n * @example\n *\n * The default matching behaviour ignores any subsequent tuples in the multiaddr.\n * If you want stricter matching you can use `.exactMatch`:\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS, Circuit } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/dnsaddr/example.org/p2p/QmFoo/p2p-circuit/p2p/QmBar')\n *\n * DNS.exactMatch(ma) // false - this address has extra tuples after the DNS component\n * Circuit.matches(ma) // true\n * Circuit.exactMatch(ma) // true - the extra tuples are circuit relay related\n * ```\n */\n\nimport { CODE_P2P, CODE_DNS4, CODE_DNS6, CODE_DNSADDR, CODE_DNS, CODE_IP4, CODE_IP6, CODE_TCP, CODE_UDP, CODE_QUIC, CODE_QUIC_V1, CODE_WS, CODE_WSS, CODE_TLS, CODE_SNI, CODE_WEBRTC_DIRECT, CODE_CERTHASH, CODE_WEBTRANSPORT, CODE_P2P_CIRCUIT, CODE_WEBRTC, CODE_HTTP, CODE_UNIX, CODE_HTTPS, CODE_MEMORY, CODE_IP6ZONE, CODE_IPCIDR } from '@multiformats/multiaddr'\nimport { and, or, optional, fmt, code, value } from './utils.js'\nimport type { Multiaddr, Component } from '@multiformats/multiaddr'\n\n/**\n * A matcher accepts multiaddr components and either fails to match and returns\n * false or returns a sublist of unmatched components\n */\nexport interface Matcher {\n  match(parts: Component[]): Component[] | false\n}\n\n/**\n * A MultiaddrMatcher allows interpreting a multiaddr as a certain type of\n * multiaddr\n */\nexport interface MultiaddrMatcher {\n  /**\n   * The matchers that make up this MultiaddrMatcher - useful if you want to\n   * make your own custom matchers\n   */\n  matchers: Matcher[]\n\n  /**\n   * Returns true if the passed multiaddr can be treated as this type of\n   * multiaddr\n   */\n  matches(ma?: Multiaddr): boolean\n\n  /**\n   * Returns true if the passed multiaddr terminates as this type of\n   * multiaddr\n   */\n  exactMatch(ma?: Multiaddr): boolean\n}\n\n/**\n * Matches PeerId addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { PEER_ID } from '@multiformats/multiaddr-matcher'\n *\n * PEER_ID.matches(multiaddr('/p2p/Qmfoo')) // true\n * PEER_ID.matches(multiaddr('/ipfs/Qmfoo')) // true\n * ```\n */\nconst _PEER_ID = value(CODE_P2P)\n\nexport const PEER_ID = fmt(_PEER_ID)\n\n/**\n * DNS matchers\n */\nconst _DNS4 = value(CODE_DNS4)\nconst _DNS6 = value(CODE_DNS6)\nconst _DNSADDR = value(CODE_DNSADDR)\nconst _DNS = value(CODE_DNS)\n\n/**\n * Matches dns4 addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS4 } from '@multiformats/multiaddr-matcher'\n *\n * DNS4.matches(multiaddr('/dns4/example.org')) // true\n * ```\n */\nexport const DNS4 = fmt(_DNS4, optional(value(CODE_P2P)))\n\n/**\n * Matches dns6 addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS6 } from '@multiformats/multiaddr-matcher'\n *\n * DNS6.matches(multiaddr('/dns6/example.org')) // true\n * ```\n */\nexport const DNS6 = fmt(_DNS6, optional(value(CODE_P2P)))\n\n/**\n * Matches dnsaddr addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNSADDR } from '@multiformats/multiaddr-matcher'\n *\n * DNSADDR.matches(multiaddr('/dnsaddr/example.org')) // true\n * DNSADDR.matches(multiaddr('/dnsaddr/example.org/p2p/Qmfoo')) // true\n * ```\n */\nexport const DNSADDR = fmt(_DNSADDR, optional(value(CODE_P2P)))\n\n/**\n * Matches any dns address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS } from '@multiformats/multiaddr-matcher'\n *\n * DNS.matches(multiaddr('/dnsaddr/example.org')) // true\n * DNS.matches(multiaddr('/dns4/example.org')) // true\n * DNS.matches(multiaddr('/dns6/example.org')) // true\n * DNS.matches(multiaddr('/dns6/example.org/p2p/Qmfoo')) // true\n * ```\n */\nexport const DNS = fmt(or(_DNS, _DNSADDR, _DNS4, _DNS6), optional(value(CODE_P2P)))\n\nconst _IP4 = and(\n  value(CODE_IP4),\n  optional(value(CODE_IPCIDR))\n)\nconst _IP6 = and(\n  optional(value(CODE_IP6ZONE)),\n  value(CODE_IP6),\n  optional(value(CODE_IPCIDR))\n)\nconst _IP = or(_IP4, _IP6)\n\nconst _IP_OR_DOMAIN = or(_IP, _DNS, _DNS4, _DNS6, _DNSADDR)\n\n/**\n * A matcher for addresses that start with IP or DNS tuples.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP_OR_DOMAIN } from '@multiformats/multiaddr-matcher'\n *\n * IP_OR_DOMAIN.matches(multiaddr('/ip4/123.123.123.123')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/ip4/123.123.123.123/p2p/QmFoo')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/dns/example.com/p2p/QmFoo')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/p2p/QmFoo')) // false\n * ```\n */\nexport const IP_OR_DOMAIN = fmt(or(_IP, and(or(_DNS, _DNSADDR, _DNS4, _DNS6), optional(value(CODE_P2P)))))\n\n/**\n * Matches ip4 addresses.\n *\n * Use {@link IP IP} instead to match any ip4/ip6 address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP4 } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/ip4/123.123.123.123')\n *\n * IP4.matches(ma) // true\n * ```\n */\nexport const IP4 = fmt(_IP4)\n\n/**\n * Matches ip6 addresses.\n *\n * Use {@link IP IP} instead to match any ip4/ip6 address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP6 } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/ip6/fe80::1cc1:a3b8:322f:cf22')\n *\n * IP6.matches(ma) // true\n * ```\n */\nexport const IP6 = fmt(_IP6)\n\n/**\n * Matches ip4 or ip6 addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP } from '@multiformats/multiaddr-matcher'\n *\n * IP.matches(multiaddr('/ip4/123.123.123.123')) // true\n * IP.matches(multiaddr('/ip6/fe80::1cc1:a3b8:322f:cf22')) // true\n * ```\n */\nexport const IP = fmt(_IP)\n\nconst _TCP = and(_IP_OR_DOMAIN, value(CODE_TCP))\nconst _UDP = and(_IP_OR_DOMAIN, value(CODE_UDP))\n\n/**\n * Matches TCP addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { TCP } from '@multiformats/multiaddr-matcher'\n *\n * TCP.matches(multiaddr('/ip4/123.123.123.123/tcp/1234')) // true\n * ```\n */\nexport const TCP = fmt(and(_TCP, optional(value(CODE_P2P))))\n\n/**\n * Matches UDP addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { UDP } from '@multiformats/multiaddr-matcher'\n *\n * UDP.matches(multiaddr('/ip4/123.123.123.123/udp/1234')) // true\n * ```\n */\nexport const UDP = fmt(_UDP)\n\nconst _QUIC = and(_UDP, code(CODE_QUIC), optional(value(CODE_P2P)))\nconst _QUIC_V1 = and(_UDP, code(CODE_QUIC_V1), optional(value(CODE_P2P)))\n\nconst QUIC_V0_OR_V1 = or(_QUIC, _QUIC_V1)\n\n/**\n * Matches QUIC addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { QUIC } from '@multiformats/multiaddr-matcher'\n *\n * QUIC.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic')) // true\n * ```\n */\nexport const QUIC = fmt(_QUIC)\n\n/**\n * Matches QUICv1 addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { QUIC_V1 } from '@multiformats/multiaddr-matcher'\n *\n * QUIC_V1.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic-v1')) // true\n * ```\n */\nexport const QUIC_V1 = fmt(_QUIC_V1)\n\nconst _WEB = or(\n  _IP_OR_DOMAIN,\n  _TCP,\n  _UDP,\n  _QUIC,\n  _QUIC_V1\n)\n\nconst _WebSockets = or(\n  and(_WEB, code(CODE_WS), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches WebSocket addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebSockets } from '@multiformats/multiaddr-matcher'\n *\n * WebSockets.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/ws')) // true\n * ```\n */\nexport const WebSockets = fmt(_WebSockets)\n\nconst _WebSocketsSecure = or(\n  and(_WEB, code(CODE_WSS), optional(value(CODE_P2P))),\n  and(_WEB, code(CODE_TLS), optional(value(CODE_SNI)), code(CODE_WS), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches secure WebSocket addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebSocketsSecure } from '@multiformats/multiaddr-matcher'\n *\n * WebSocketsSecure.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/wss')) // true\n * ```\n */\nexport const WebSocketsSecure = fmt(_WebSocketsSecure)\n\nconst _WebRTCDirect = and(_UDP, code(CODE_WEBRTC_DIRECT), optional(value(CODE_CERTHASH)), optional(value(CODE_CERTHASH)), optional(value(CODE_P2P)))\n\n/**\n * Matches WebRTC-direct addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTCDirect } from '@multiformats/multiaddr-matcher'\n *\n * WebRTCDirect.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmFoo/webrtc-direct/certhash/u....')) // true\n * ```\n */\nexport const WebRTCDirect = fmt(_WebRTCDirect)\n\nconst _WebTransport = and(_QUIC_V1, code(CODE_WEBTRANSPORT), optional(value(CODE_CERTHASH)), optional(value(CODE_CERTHASH)), optional(value(CODE_P2P)))\n\n/**\n * Matches WebTransport addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTCDirect } from '@multiformats/multiaddr-matcher'\n *\n * WebRTCDirect.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic-v1/webtransport/certhash/u..../certhash/u..../p2p/QmFoo')) // true\n * ```\n */\nexport const WebTransport = fmt(_WebTransport)\n\nconst _P2P = or(\n  _WebSockets,\n  _WebSocketsSecure,\n  and(_TCP, optional(value(CODE_P2P))),\n  and(QUIC_V0_OR_V1, optional(value(CODE_P2P))),\n  and(_IP_OR_DOMAIN, optional(value(CODE_P2P))),\n  _WebRTCDirect,\n  _WebTransport,\n  value(CODE_P2P)\n)\n\n/**\n * Matches peer addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { P2P } from '@multiformats/multiaddr-matcher'\n *\n * P2P.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmFoo')) // true\n * ```\n */\nexport const P2P = fmt(_P2P)\n\nconst _Circuit = and(_P2P, code(CODE_P2P_CIRCUIT), value(CODE_P2P))\n\n/**\n * Matches circuit relay addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Circuit } from '@multiformats/multiaddr-matcher'\n *\n * Circuit.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmRelay/p2p-circuit/p2p/QmTarget')) // true\n * ```\n */\nexport const Circuit = fmt(_Circuit)\n\nconst _WebRTC = or(\n  and(_P2P, code(CODE_P2P_CIRCUIT), code(CODE_WEBRTC), optional(value(CODE_P2P))),\n  and(_P2P, code(CODE_WEBRTC), optional(value(CODE_P2P))),\n  and(code(CODE_WEBRTC), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches WebRTC addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTC } from '@multiformats/multiaddr-matcher'\n *\n * WebRTC.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmRelay/p2p-circuit/webrtc/p2p/QmTarget')) // true\n * ```\n */\nexport const WebRTC = fmt(_WebRTC)\n\nconst _HTTP = or(\n  and(_IP_OR_DOMAIN, value(CODE_TCP), code(CODE_HTTP), optional(value(CODE_P2P))),\n  and(_IP_OR_DOMAIN, code(CODE_HTTP), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches HTTP addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { HTTP } from '@multiformats/multiaddr-matcher'\n *\n * HTTP.matches(multiaddr('/dns/example.org/http')) // true\n * ```\n */\nexport const HTTP = fmt(_HTTP)\n\nconst _HTTPS = and(_IP_OR_DOMAIN, or(\n  and(value(CODE_TCP, '443'), code(CODE_HTTP)),\n  and(value(CODE_TCP), code(CODE_HTTPS)),\n  and(value(CODE_TCP), code(CODE_TLS), code(CODE_HTTP)),\n  and(code(CODE_TLS), code(CODE_HTTP)),\n  code(CODE_TLS),\n  code(CODE_HTTPS)\n),\noptional(value(CODE_P2P))\n)\n\n/**\n * Matches HTTPS addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { HTTP } from '@multiformats/multiaddr-matcher'\n *\n * HTTP.matches(multiaddr('/dns/example.org/tls/http')) // true\n * ```\n */\nexport const HTTPS = fmt(_HTTPS)\n\nconst _Memory = or(\n  and(value(CODE_MEMORY), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches Memory addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Memory } from '@multiformats/multiaddr-matcher'\n *\n * Memory.matches(multiaddr('/memory/0xDEADBEEF')) // true\n * ```\n */\nexport const Memory = fmt(_Memory)\n\nconst _Unix = or(\n  and(value(CODE_UNIX), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches Unix addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Unix } from '@multiformats/multiaddr-matcher'\n *\n * Unix.matches(multiaddr('/unix/%2Fpath%2Fto%2Funix.socket')) // true\n * ```\n */\nexport const Unix = fmt(_Unix)\n", "import { isPrivateIp } from '@libp2p/utils/private-ip'\nimport { trackedMap } from '@libp2p/utils/tracked-map'\nimport { multiaddr, protocols } from '@multiformats/multiaddr'\nimport type { AddressManagerComponents, AddressManagerInit } from './index.js'\nimport type { Logger } from '@libp2p/interface'\nimport type { NodeAddress } from '@libp2p/interface-internal'\nimport type { Multiaddr, StringTuple } from '@multiformats/multiaddr'\n\nconst MAX_DATE = 8_640_000_000_000_000\n\nexport const defaultValues = {\n  maxObservedAddresses: 10\n}\n\ninterface DNSMapping {\n  domain: string\n  verified: boolean\n  expires: number\n  lastVerified?: number\n}\n\nconst CODEC_TLS = 0x01c0\nconst CODEC_SNI = 0x01c1\nconst CODEC_DNS = 0x35\nconst CODEC_DNS4 = 0x36\nconst CODEC_DNS6 = 0x37\nconst CODEC_DNSADDR = 0x38\n\nexport class DNSMappings {\n  private readonly log: Logger\n  private readonly mappings: Map<string, DNSMapping>\n\n  constructor (components: AddressManagerComponents, init: AddressManagerInit = {}) {\n    this.log = components.logger.forComponent('libp2p:address-manager:dns-mappings')\n    this.mappings = trackedMap({\n      name: 'libp2p_address_manager_dns_mappings',\n      metrics: components.metrics\n    })\n  }\n\n  has (ma: Multiaddr): boolean {\n    const host = this.findHost(ma)\n\n    for (const mapping of this.mappings.values()) {\n      if (mapping.domain === host) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  add (domain: string, addresses: string[]): void {\n    addresses.forEach(ip => {\n      this.log('add DNS mapping %s to %s', ip, domain)\n      // we are only confident if this is an local domain mapping, otherwise\n      // we will require external validation\n      const verified = isPrivateIp(ip) === true\n\n      this.mappings.set(ip, {\n        domain,\n        verified,\n        expires: verified ? MAX_DATE - Date.now() : 0,\n        lastVerified: verified ? MAX_DATE - Date.now() : undefined\n      })\n    })\n  }\n\n  remove (ma: Multiaddr): boolean {\n    const host = this.findHost(ma)\n    let wasConfident = false\n\n    for (const [ip, mapping] of this.mappings.entries()) {\n      if (mapping.domain === host) {\n        this.log('removing %s to %s DNS mapping %e', ip, mapping.domain, new Error('where'))\n        this.mappings.delete(ip)\n        wasConfident = wasConfident || mapping.verified\n      }\n    }\n\n    return wasConfident\n  }\n\n  getAll (addresses: NodeAddress[]): NodeAddress[] {\n    const dnsMappedAddresses: NodeAddress[] = []\n\n    for (let i = 0; i < addresses.length; i++) {\n      const address = addresses[i]\n      const tuples = address.multiaddr.stringTuples()\n      const host = tuples[0][1]\n\n      if (host == null) {\n        continue\n      }\n\n      for (const [ip, mapping] of this.mappings.entries()) {\n        if (host !== ip) {\n          continue\n        }\n\n        // insert SNI tuple after TLS tuple, if one is present\n        const mappedIp = this.maybeAddSNITuple(tuples, mapping.domain)\n\n        if (mappedIp) {\n          // remove the address and replace it with the version that includes\n          // the SNI tuple\n          addresses.splice(i, 1)\n          i--\n\n          dnsMappedAddresses.push({\n            multiaddr: multiaddr(`/${\n              tuples.map(tuple => {\n                return [\n                  protocols(tuple[0]).name,\n                  tuple[1]\n                ].join('/')\n              }).join('/')\n            }`),\n            verified: mapping.verified,\n            type: 'dns-mapping',\n            expires: mapping.expires,\n            lastVerified: mapping.lastVerified\n          })\n        }\n      }\n    }\n\n    return dnsMappedAddresses\n  }\n\n  private maybeAddSNITuple (tuples: StringTuple[], domain: string): boolean {\n    for (let j = 0; j < tuples.length; j++) {\n      if (tuples[j][0] === CODEC_TLS && tuples[j + 1]?.[0] !== CODEC_SNI) {\n        tuples.splice(j + 1, 0, [CODEC_SNI, domain])\n        return true\n      }\n    }\n\n    return false\n  }\n\n  confirm (ma: Multiaddr, ttl: number): boolean {\n    const host = this.findHost(ma)\n    let startingConfidence = false\n\n    for (const [ip, mapping] of this.mappings.entries()) {\n      if (mapping.domain === host) {\n        this.log('marking %s to %s DNS mapping as verified', ip, mapping.domain)\n        startingConfidence = mapping.verified\n        mapping.verified = true\n        mapping.expires = Date.now() + ttl\n        mapping.lastVerified = Date.now()\n      }\n    }\n\n    return startingConfidence\n  }\n\n  unconfirm (ma: Multiaddr, ttl: number): boolean {\n    const host = this.findHost(ma)\n    let wasConfident = false\n\n    for (const [ip, mapping] of this.mappings.entries()) {\n      if (mapping.domain === host) {\n        this.log('removing verification of %s to %s DNS mapping', ip, mapping.domain)\n        wasConfident = wasConfident || mapping.verified\n        mapping.verified = false\n        mapping.expires = Date.now() + ttl\n      }\n    }\n\n    return wasConfident\n  }\n\n  private findHost (ma: Multiaddr): string | undefined {\n    for (const tuple of ma.stringTuples()) {\n      if (tuple[0] === CODEC_SNI) {\n        return tuple[1]\n      }\n\n      if (tuple[0] === CODEC_DNS || tuple[0] === CODEC_DNS4 || tuple[0] === CODEC_DNS6 || tuple[0] === CODEC_DNSADDR) {\n        return tuple[1]\n      }\n    }\n  }\n}\n", "import { isIPv4 } from '@chainsafe/is-ip'\nimport { trackedMap } from '@libp2p/utils/tracked-map'\nimport { multiaddr, protocols } from '@multiformats/multiaddr'\nimport type { AddressManagerComponents, AddressManagerInit } from './index.js'\nimport type { Logger } from '@libp2p/interface'\nimport type { NodeAddress } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport const defaultValues = {\n  maxObservedAddresses: 10\n}\n\ninterface PublicAddressMapping {\n  internalIp: string\n  internalPort: number\n  externalIp: string\n  externalPort: number\n  externalFamily: 4 | 6\n  protocol: 'tcp' | 'udp'\n  verified: boolean\n  expires: number\n  lastVerified?: number\n}\n\nconst CODEC_IP4 = 0x04\nconst CODEC_IP6 = 0x29\nconst CODEC_TCP = 0x06\nconst CODEC_UDP = 0x0111\n\nexport class IPMappings {\n  private readonly log: Logger\n  private readonly mappings: Map<string, PublicAddressMapping[]>\n\n  constructor (components: AddressManagerComponents, init: AddressManagerInit = {}) {\n    this.log = components.logger.forComponent('libp2p:address-manager:ip-mappings')\n    this.mappings = trackedMap({\n      name: 'libp2p_address_manager_ip_mappings',\n      metrics: components.metrics\n    })\n  }\n\n  has (ma: Multiaddr): boolean {\n    const tuples = ma.stringTuples()\n\n    for (const mappings of this.mappings.values()) {\n      for (const mapping of mappings) {\n        if (mapping.externalIp === tuples[0][1]) {\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n\n  add (internalIp: string, internalPort: number, externalIp: string, externalPort: number = internalPort, protocol: 'tcp' | 'udp' = 'tcp'): void {\n    const key = `${internalIp}-${internalPort}-${protocol}`\n    const mappings = this.mappings.get(key) ?? []\n    const mapping: PublicAddressMapping = {\n      internalIp,\n      internalPort,\n      externalIp,\n      externalPort,\n      externalFamily: isIPv4(externalIp) ? 4 : 6,\n      protocol,\n      verified: false,\n      expires: 0\n    }\n    mappings.push(mapping)\n\n    this.mappings.set(key, mappings)\n  }\n\n  remove (ma: Multiaddr): boolean {\n    const tuples = ma.stringTuples()\n    const host = tuples[0][1] ?? ''\n    const protocol = tuples[1][0] === CODEC_TCP ? 'tcp' : 'udp'\n    const port = parseInt(tuples[1][1] ?? '0')\n    let wasConfident = false\n\n    for (const [key, mappings] of this.mappings.entries()) {\n      for (let i = 0; i < mappings.length; i++) {\n        const mapping = mappings[i]\n\n        if (mapping.externalIp === host && mapping.externalPort === port && mapping.protocol === protocol) {\n          this.log('removing %s:%s to %s:%s %s IP mapping', mapping.externalIp, mapping.externalPort, host, port, protocol)\n\n          wasConfident = wasConfident || mapping.verified\n          mappings.splice(i, 1)\n          i--\n        }\n      }\n\n      if (mappings.length === 0) {\n        this.mappings.delete(key)\n      }\n    }\n\n    return wasConfident\n  }\n\n  getAll (addresses: NodeAddress[]): NodeAddress[] {\n    const ipMappedAddresses: NodeAddress[] = []\n\n    for (const { multiaddr: ma } of addresses) {\n      const tuples = ma.stringTuples()\n      let tuple: string | undefined\n\n      // see if the internal host/port/protocol tuple has been mapped externally\n      if ((tuples[0][0] === CODEC_IP4 || tuples[0][0] === CODEC_IP6) && tuples[1][0] === CODEC_TCP) {\n        tuple = `${tuples[0][1]}-${tuples[1][1]}-tcp`\n      } else if ((tuples[0][0] === CODEC_IP4 || tuples[0][0] === CODEC_IP6) && tuples[1][0] === CODEC_UDP) {\n        tuple = `${tuples[0][1]}-${tuples[1][1]}-udp`\n      }\n\n      if (tuple == null) {\n        continue\n      }\n\n      const mappings = this.mappings.get(tuple)\n\n      if (mappings == null) {\n        continue\n      }\n\n      for (const mapping of mappings) {\n        tuples[0][0] = mapping.externalFamily === 4 ? CODEC_IP4 : CODEC_IP6\n        tuples[0][1] = mapping.externalIp\n        tuples[1][1] = `${mapping.externalPort}`\n\n        ipMappedAddresses.push({\n          multiaddr: multiaddr(`/${\n            tuples.map(tuple => {\n              return [\n                protocols(tuple[0]).name,\n                tuple[1]\n              ].join('/')\n            }).join('/')\n          }`),\n          verified: mapping.verified,\n          type: 'ip-mapping',\n          expires: mapping.expires,\n          lastVerified: mapping.lastVerified\n        })\n      }\n    }\n\n    return ipMappedAddresses\n  }\n\n  confirm (ma: Multiaddr, ttl: number): boolean {\n    const tuples = ma.stringTuples()\n    const host = tuples[0][1]\n    let startingConfidence = false\n\n    for (const mappings of this.mappings.values()) {\n      for (const mapping of mappings) {\n        if (mapping.externalIp === host) {\n          this.log('marking %s to %s IP mapping as verified', mapping.internalIp, mapping.externalIp)\n          startingConfidence = mapping.verified\n          mapping.verified = true\n          mapping.expires = Date.now() + ttl\n          mapping.lastVerified = Date.now()\n        }\n      }\n    }\n\n    return startingConfidence\n  }\n\n  unconfirm (ma: Multiaddr, ttl: number): boolean {\n    const tuples = ma.stringTuples()\n    const host = tuples[0][1] ?? ''\n    const protocol = tuples[1][0] === CODEC_TCP ? 'tcp' : 'udp'\n    const port = parseInt(tuples[1][1] ?? '0')\n    let wasConfident = false\n\n    for (const mappings of this.mappings.values()) {\n      for (let i = 0; i < mappings.length; i++) {\n        const mapping = mappings[i]\n\n        if (mapping.externalIp === host && mapping.externalPort === port && mapping.protocol === protocol) {\n          this.log('removing verification of %s:%s to %s:%s %s IP mapping', mapping.externalIp, mapping.externalPort, host, port, protocol)\n\n          wasConfident = wasConfident || mapping.verified\n          mapping.verified = false\n          mapping.expires = Date.now() + ttl\n        }\n      }\n    }\n\n    return wasConfident\n  }\n}\n", "import { CODE_IP4, CODE_IP6, CODE_IP6ZONE } from '@multiformats/multiaddr'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * Check if a given multiaddr is a link-local address\n */\nexport function isLinkLocal (ma: Multiaddr): boolean {\n  try {\n    for (const { code, value } of ma.getComponents()) {\n      if (code === CODE_IP6ZONE) {\n        continue\n      }\n\n      if (value == null) {\n        continue\n      }\n\n      if (code === CODE_IP4) {\n        return value.startsWith('169.254.')\n      }\n\n      if (code === CODE_IP6) {\n        return value.toLowerCase().startsWith('fe80')\n      }\n    }\n  } catch {\n\n  }\n\n  return false\n}\n", "import { CODE_IP4, CODE_IP6, CODE_IP6ZONE } from '@multiformats/multiaddr'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * Check if a given multiaddr is IP-based\n */\nexport function isIpBased (ma: Multiaddr): boolean {\n  try {\n    for (const { code } of ma.getComponents()) {\n      if (code === CODE_IP6ZONE) {\n        continue\n      }\n\n      return code === CODE_IP4 || code === CODE_IP6\n    }\n  } catch {\n\n  }\n\n  return false\n}\n", "import { isPrivateIp } from '../private-ip.js'\nimport { isIpBased } from './is-ip-based.js'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * Check if a given multiaddr starts with a private address\n */\nexport function isPrivate (ma: Multiaddr): boolean {\n  try {\n    if (!isIpBased(ma)) {\n      // not an IP based multiaddr, cannot be private\n      return false\n    }\n\n    const [[, value]] = ma.stringTuples()\n\n    if (value == null) {\n      return false\n    }\n\n    return isPrivateIp(value) ?? false\n  } catch {\n\n  }\n\n  return true\n}\n", "import { isLinkLocal } from '@libp2p/utils/multiaddr/is-link-local'\nimport { isPrivate } from '@libp2p/utils/multiaddr/is-private'\nimport { trackedMap } from '@libp2p/utils/tracked-map'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport type { AddressManagerComponents, AddressManagerInit } from './index.js'\nimport type { Logger } from '@libp2p/interface'\nimport type { NodeAddress } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport const defaultValues = {\n  maxObservedAddresses: 10\n}\n\ninterface ObservedAddressMetadata {\n  verified: boolean\n  expires: number\n  lastVerified?: number\n}\n\nexport class ObservedAddresses {\n  private readonly log: Logger\n  private readonly addresses: Map<string, ObservedAddressMetadata>\n  private readonly maxObservedAddresses: number\n\n  constructor (components: AddressManagerComponents, init: AddressManagerInit = {}) {\n    this.log = components.logger.forComponent('libp2p:address-manager:observed-addresses')\n    this.addresses = trackedMap({\n      name: 'libp2p_address_manager_observed_addresses',\n      metrics: components.metrics\n    })\n    this.maxObservedAddresses = init.maxObservedAddresses ?? defaultValues.maxObservedAddresses\n  }\n\n  has (ma: Multiaddr): boolean {\n    return this.addresses.has(ma.toString())\n  }\n\n  removePrefixed (prefix: string): void {\n    for (const key of this.addresses.keys()) {\n      if (key.toString().startsWith(prefix)) {\n        this.addresses.delete(key)\n      }\n    }\n  }\n\n  add (ma: Multiaddr): void {\n    if (this.addresses.size === this.maxObservedAddresses) {\n      return\n    }\n\n    if (isPrivate(ma) || isLinkLocal(ma)) {\n      return\n    }\n\n    this.log('adding observed address %a', ma)\n    this.addresses.set(ma.toString(), {\n      verified: false,\n      expires: 0\n    })\n  }\n\n  getAll (): NodeAddress[] {\n    return Array.from(this.addresses)\n      .map(([ma, metadata]) => ({\n        multiaddr: multiaddr(ma),\n        verified: metadata.verified,\n        type: 'observed',\n        expires: metadata.expires,\n        lastVerified: metadata.lastVerified\n      }))\n  }\n\n  remove (ma: Multiaddr): boolean {\n    const startingConfidence = this.addresses.get(ma.toString())?.verified ?? false\n\n    this.log('removing observed address %a', ma)\n    this.addresses.delete(ma.toString())\n\n    return startingConfidence\n  }\n\n  confirm (ma: Multiaddr, ttl: number): boolean {\n    const addrString = ma.toString()\n    const metadata = this.addresses.get(addrString) ?? {\n      verified: false,\n      expires: Date.now() + ttl,\n      lastVerified: Date.now()\n    }\n    const startingConfidence = metadata.verified\n    metadata.verified = true\n    metadata.expires = Date.now() + ttl\n    metadata.lastVerified = Date.now()\n\n    this.log('marking observed address %a as verified', addrString)\n    this.addresses.set(addrString, metadata)\n\n    return startingConfidence\n  }\n}\n", "import { CODE_IP4, CODE_IP6, CODE_IP6ZONE, CODE_DNS, CODE_DNS4, CODE_DNS6, CODE_DNSADDR } from '@multiformats/multiaddr'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nconst NETWORK_CODECS = [\n  CODE_IP4,\n  CODE_IP6,\n  CODE_DNS,\n  CODE_DNS4,\n  CODE_DNS6,\n  CODE_DNSADDR\n]\n\n/**\n * Check if a given multiaddr is a network address\n */\nexport function isNetworkAddress (ma: Multiaddr): boolean {\n  try {\n    for (const { code } of ma.getComponents()) {\n      if (code === CODE_IP6ZONE) {\n        continue\n      }\n\n      return NETWORK_CODECS.includes(code)\n    }\n  } catch {\n\n  }\n\n  return false\n}\n", "import { isNetworkAddress } from '@libp2p/utils/multiaddr/is-network-address'\nimport { isPrivate } from '@libp2p/utils/multiaddr/is-private'\nimport { trackedMap } from '@libp2p/utils/tracked-map'\nimport type { AddressManagerComponents, AddressManagerInit } from './index.js'\nimport type { Logger } from '@libp2p/interface'\nimport type { NodeAddress } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport const defaultValues = {\n  maxObservedAddresses: 10\n}\n\ninterface TransportAddressMetadata {\n  verified: boolean\n  expires: number\n  lastVerified?: number\n}\n\nexport class TransportAddresses {\n  private readonly log: Logger\n  private readonly addresses: Map<string, TransportAddressMetadata>\n  private readonly maxObservedAddresses: number\n\n  constructor (components: AddressManagerComponents, init: AddressManagerInit = {}) {\n    this.log = components.logger.forComponent('libp2p:address-manager:observed-addresses')\n    this.addresses = trackedMap({\n      name: 'libp2p_address_manager_transport_addresses',\n      metrics: components.metrics\n    })\n    this.maxObservedAddresses = init.maxObservedAddresses ?? defaultValues.maxObservedAddresses\n  }\n\n  get (multiaddr: Multiaddr, ttl: number): NodeAddress {\n    if (isPrivate(multiaddr)) {\n      return {\n        multiaddr,\n        verified: true,\n        type: 'transport',\n        expires: Date.now() + ttl,\n        lastVerified: Date.now()\n      }\n    }\n\n    const key = this.toKey(multiaddr)\n    let metadata = this.addresses.get(key)\n\n    if (metadata == null) {\n      metadata = {\n        verified: !isNetworkAddress(multiaddr),\n        expires: 0\n      }\n\n      this.addresses.set(key, metadata)\n    }\n\n    return {\n      multiaddr,\n      verified: metadata.verified,\n      type: 'transport',\n      expires: metadata.expires,\n      lastVerified: metadata.lastVerified\n    }\n  }\n\n  has (ma: Multiaddr): boolean {\n    const key = this.toKey(ma)\n    return this.addresses.has(key)\n  }\n\n  remove (ma: Multiaddr): boolean {\n    const key = this.toKey(ma)\n    const startingConfidence = this.addresses.get(key)?.verified ?? false\n\n    this.log('removing observed address %a', ma)\n    this.addresses.delete(key)\n\n    return startingConfidence\n  }\n\n  confirm (ma: Multiaddr, ttl: number): boolean {\n    const key = this.toKey(ma)\n    const metadata = this.addresses.get(key) ?? {\n      verified: false,\n      expires: 0,\n      lastVerified: 0\n    }\n\n    const startingConfidence = metadata.verified\n\n    metadata.verified = true\n    metadata.expires = Date.now() + ttl\n    metadata.lastVerified = Date.now()\n\n    this.addresses.set(key, metadata)\n\n    return startingConfidence\n  }\n\n  unconfirm (ma: Multiaddr, ttl: number): boolean {\n    const key = this.toKey(ma)\n    const metadata = this.addresses.get(key) ?? {\n      verified: false,\n      expires: 0\n    }\n\n    const startingConfidence = metadata.verified\n\n    metadata.verified = false\n    metadata.expires = Date.now() + ttl\n\n    this.addresses.set(key, metadata)\n\n    return startingConfidence\n  }\n\n  private toKey (ma: Multiaddr): string {\n    if (isNetworkAddress(ma)) {\n      // only works for dns/ip based addresses\n      const options = ma.toOptions()\n\n      return `${options.host}-${options.port}-${options.transport}`\n    }\n\n    return ma.toString()\n  }\n}\n", "/* eslint-disable complexity */\nimport { isIPv4 } from '@chainsafe/is-ip'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { debounce } from '@libp2p/utils/debounce'\nimport { createScalableCuckooFilter } from '@libp2p/utils/filters'\nimport { isPrivateIp } from '@libp2p/utils/private-ip'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { QUIC_V1, TCP, WebSockets, WebSocketsSecure } from '@multiformats/multiaddr-matcher'\nimport { DNSMappings } from './dns-mappings.js'\nimport { IPMappings } from './ip-mappings.js'\nimport { ObservedAddresses } from './observed-addresses.js'\nimport { TransportAddresses } from './transport-addresses.js'\nimport type { ComponentLogger, Libp2pEvents, Logger, PeerId, PeerStore, Metrics } from '@libp2p/interface'\nimport type { AddressManager as AddressManagerInterface, TransportManager, NodeAddress, ConfirmAddressOptions } from '@libp2p/interface-internal'\nimport type { Filter } from '@libp2p/utils/filters'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { TypedEventTarget } from 'main-event'\n\nconst ONE_MINUTE = 60_000\n\nexport const defaultValues = {\n  maxObservedAddresses: 10,\n  addressVerificationTTL: ONE_MINUTE * 10,\n  addressVerificationRetry: ONE_MINUTE * 5\n}\n\nexport interface AddressManagerInit {\n  /**\n   * Pass an function in this field to override the list of addresses\n   * that are announced to the network\n   */\n  announceFilter?: AddressFilter\n\n  /**\n   * A list of string multiaddrs to listen on\n   */\n  listen?: string[]\n\n  /**\n   * A list of string multiaddrs to use instead of those reported by transports\n   */\n  announce?: string[]\n\n  /**\n   * A list of string multiaddrs string to never announce\n   */\n  noAnnounce?: string[]\n\n  /**\n   * A list of string multiaddrs to add to the list of announced addresses\n   */\n  appendAnnounce?: string[]\n\n  /**\n   * Limits the number of observed addresses we will store\n   */\n  maxObservedAddresses?: number\n\n  /**\n   * How long before each public address should be reverified in ms.\n   *\n   * Requires `@libp2p/autonat` or some other verification method to be\n   * configured.\n   *\n   * @default 600_000\n   */\n  addressVerificationTTL?: number\n\n  /**\n   * After a transport or mapped address has failed to verify, how long to wait\n   * before retrying it in ms\n   *\n   * Requires `@libp2p/autonat` or some other verification method to be\n   * configured.\n   *\n   * @default 300_000\n   */\n  addressVerificationRetry?: number\n}\n\nexport interface AddressManagerComponents {\n  peerId: PeerId\n  transportManager: TransportManager\n  peerStore: PeerStore\n  events: TypedEventTarget<Libp2pEvents>\n  logger: ComponentLogger\n  metrics?: Metrics\n}\n\n/**\n * A function that takes a list of multiaddrs and returns a list\n * to announce\n */\nexport interface AddressFilter {\n  (addrs: Multiaddr[]): Multiaddr[]\n}\n\nconst defaultAddressFilter = (addrs: Multiaddr[]): Multiaddr[] => addrs\n\n/**\n * If the passed multiaddr contains the passed peer id, remove it\n */\nfunction stripPeerId (ma: Multiaddr, peerId: PeerId): Multiaddr {\n  const observedPeerIdStr = ma.getPeerId()\n\n  // strip our peer id if it has been passed\n  if (observedPeerIdStr != null) {\n    const observedPeerId = peerIdFromString(observedPeerIdStr)\n\n    // use same encoding for comparison\n    if (observedPeerId.equals(peerId)) {\n      ma = ma.decapsulate(multiaddr(`/p2p/${peerId.toString()}`))\n    }\n  }\n\n  return ma\n}\n\nexport class AddressManager implements AddressManagerInterface {\n  private readonly log: Logger\n  private readonly components: AddressManagerComponents\n  // this is an array to allow for duplicates, e.g. multiples of `/ip4/0.0.0.0/tcp/0`\n  private readonly listen: string[]\n  private readonly announce: Set<string>\n  private readonly appendAnnounce: Set<string>\n  private readonly announceFilter: AddressFilter\n  private readonly observed: ObservedAddresses\n  private readonly dnsMappings: DNSMappings\n  private readonly ipMappings: IPMappings\n  private readonly transportAddresses: TransportAddresses\n  private readonly observedAddressFilter: Filter\n  private readonly addressVerificationTTL: number\n  private readonly addressVerificationRetry: number\n\n  /**\n   * Responsible for managing the peer addresses.\n   * Peers can specify their listen and announce addresses.\n   * The listen addresses will be used by the libp2p transports to listen for new connections,\n   * while the announce addresses will be used for the peer addresses' to other peers in the network.\n   */\n  constructor (components: AddressManagerComponents, init: AddressManagerInit = {}) {\n    const { listen = [], announce = [], appendAnnounce = [] } = init\n\n    this.components = components\n    this.log = components.logger.forComponent('libp2p:address-manager')\n    this.listen = listen.map(ma => ma.toString())\n    this.announce = new Set(announce.map(ma => ma.toString()))\n    this.appendAnnounce = new Set(appendAnnounce.map(ma => ma.toString()))\n    this.observed = new ObservedAddresses(components, init)\n    this.dnsMappings = new DNSMappings(components, init)\n    this.ipMappings = new IPMappings(components, init)\n    this.transportAddresses = new TransportAddresses(components, init)\n    this.announceFilter = init.announceFilter ?? defaultAddressFilter\n    this.observedAddressFilter = createScalableCuckooFilter(1024)\n    this.addressVerificationTTL = init.addressVerificationTTL ?? defaultValues.addressVerificationTTL\n    this.addressVerificationRetry = init.addressVerificationRetry ?? defaultValues.addressVerificationRetry\n\n    // this method gets called repeatedly on startup when transports start listening so\n    // debounce it so we don't cause multiple self:peer:update events to be emitted\n    this._updatePeerStoreAddresses = debounce(this._updatePeerStoreAddresses.bind(this), 1000)\n\n    // update our stored addresses when new transports listen\n    components.events.addEventListener('transport:listening', () => {\n      this._updatePeerStoreAddresses()\n    })\n    // update our stored addresses when existing transports stop listening\n    components.events.addEventListener('transport:close', () => {\n      this._updatePeerStoreAddresses()\n    })\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/address-manager'\n\n  _updatePeerStoreAddresses (): void {\n    // if announce addresses have been configured, ensure they make it into our peer\n    // record for things like identify\n    const addrs = this.getAddresses()\n      .map(ma => {\n        // strip our peer id if it is present\n        if (ma.getPeerId() === this.components.peerId.toString()) {\n          return ma.decapsulate(`/p2p/${this.components.peerId.toString()}`)\n        }\n\n        return ma\n      })\n\n    this.components.peerStore.patch(this.components.peerId, {\n      multiaddrs: addrs\n    })\n      .catch(err => {\n        this.log.error('error updating addresses', err)\n      })\n  }\n\n  /**\n   * Get peer listen multiaddrs\n   */\n  getListenAddrs (): Multiaddr[] {\n    return Array.from(this.listen).map((a) => multiaddr(a))\n  }\n\n  /**\n   * Get peer announcing multiaddrs\n   */\n  getAnnounceAddrs (): Multiaddr[] {\n    return Array.from(this.announce).map((a) => multiaddr(a))\n  }\n\n  /**\n   * Get peer announcing multiaddrs\n   */\n  getAppendAnnounceAddrs (): Multiaddr[] {\n    return Array.from(this.appendAnnounce).map((a) => multiaddr(a))\n  }\n\n  /**\n   * Get observed multiaddrs\n   */\n  getObservedAddrs (): Multiaddr[] {\n    return this.observed.getAll().map(addr => addr.multiaddr)\n  }\n\n  /**\n   * Add peer observed addresses\n   */\n  addObservedAddr (addr: Multiaddr): void {\n    const tuples = addr.stringTuples()\n    const socketAddress = `${tuples[0][1]}:${tuples[1][1]}`\n\n    // ignore if this address if it's been observed before\n    if (this.observedAddressFilter.has(socketAddress)) {\n      return\n    }\n\n    this.observedAddressFilter.add(socketAddress)\n\n    addr = stripPeerId(addr, this.components.peerId)\n\n    // ignore observed address if it is an IP mapping\n    if (this.ipMappings.has(addr)) {\n      return\n    }\n\n    // ignore observed address if it is a DNS mapping\n    if (this.dnsMappings.has(addr)) {\n      return\n    }\n\n    this.observed.add(addr)\n  }\n\n  confirmObservedAddr (addr: Multiaddr, options?: ConfirmAddressOptions): void {\n    addr = stripPeerId(addr, this.components.peerId)\n    let startingConfidence = true\n\n    if (options?.type === 'transport' || this.transportAddresses.has(addr)) {\n      const transportStartingConfidence = this.transportAddresses.confirm(addr, options?.ttl ?? this.addressVerificationTTL)\n\n      if (!transportStartingConfidence && startingConfidence) {\n        startingConfidence = false\n      }\n    }\n\n    if (options?.type === 'dns-mapping' || this.dnsMappings.has(addr)) {\n      const dnsMappingStartingConfidence = this.dnsMappings.confirm(addr, options?.ttl ?? this.addressVerificationTTL)\n\n      if (!dnsMappingStartingConfidence && startingConfidence) {\n        startingConfidence = false\n      }\n    }\n\n    if (options?.type === 'ip-mapping' || this.ipMappings.has(addr)) {\n      const ipMappingStartingConfidence = this.ipMappings.confirm(addr, options?.ttl ?? this.addressVerificationTTL)\n\n      if (!ipMappingStartingConfidence && startingConfidence) {\n        startingConfidence = false\n      }\n    }\n\n    if (options?.type === 'observed' || this.observed.has(addr)) {\n      // try to match up observed address with local transport listener\n      if (this.maybeUpgradeToIPMapping(addr)) {\n        this.ipMappings.confirm(addr, options?.ttl ?? this.addressVerificationTTL)\n        startingConfidence = false\n      } else {\n        const observedStartingConfidence = this.observed.confirm(addr, options?.ttl ?? this.addressVerificationTTL)\n\n        if (!observedStartingConfidence && startingConfidence) {\n          startingConfidence = false\n        }\n      }\n    }\n\n    // only trigger the 'self:peer:update' event if our confidence in an address has changed\n    if (!startingConfidence) {\n      this._updatePeerStoreAddresses()\n    }\n  }\n\n  removeObservedAddr (addr: Multiaddr, options?: ConfirmAddressOptions): void {\n    addr = stripPeerId(addr, this.components.peerId)\n\n    let startingConfidence = false\n\n    if (this.observed.has(addr)) {\n      const observedStartingConfidence = this.observed.remove(addr)\n\n      if (!observedStartingConfidence && startingConfidence) {\n        startingConfidence = false\n      }\n    }\n\n    if (this.transportAddresses.has(addr)) {\n      const transportStartingConfidence = this.transportAddresses.unconfirm(addr, options?.ttl ?? this.addressVerificationRetry)\n\n      if (!transportStartingConfidence && startingConfidence) {\n        startingConfidence = false\n      }\n    }\n\n    if (this.dnsMappings.has(addr)) {\n      const dnsMappingStartingConfidence = this.dnsMappings.unconfirm(addr, options?.ttl ?? this.addressVerificationRetry)\n\n      if (!dnsMappingStartingConfidence && startingConfidence) {\n        startingConfidence = false\n      }\n    }\n\n    if (this.ipMappings.has(addr)) {\n      const ipMappingStartingConfidence = this.ipMappings.unconfirm(addr, options?.ttl ?? this.addressVerificationRetry)\n\n      if (!ipMappingStartingConfidence && startingConfidence) {\n        startingConfidence = false\n      }\n    }\n\n    // only trigger the 'self:peer:update' event if our confidence in an address has changed\n    if (startingConfidence) {\n      this._updatePeerStoreAddresses()\n    }\n  }\n\n  getAddresses (): Multiaddr[] {\n    const addresses = new Set<string>()\n\n    const multiaddrs = this.getAddressesWithMetadata()\n      .filter(addr => {\n        if (!addr.verified) {\n          return false\n        }\n\n        const maStr = addr.multiaddr.toString()\n\n        if (addresses.has(maStr)) {\n          return false\n        }\n\n        addresses.add(maStr)\n\n        return true\n      })\n      .map(address => address.multiaddr)\n\n    // filter addressees before returning\n    return this.announceFilter(\n      multiaddrs.map(str => {\n        const ma = multiaddr(str)\n        const lastComponent = ma.getComponents().pop()\n\n        if (lastComponent?.value === this.components.peerId.toString()) {\n          return ma\n        }\n\n        return ma.encapsulate(`/p2p/${this.components.peerId.toString()}`)\n      })\n    )\n  }\n\n  getAddressesWithMetadata (): NodeAddress[] {\n    const announceMultiaddrs = this.getAnnounceAddrs()\n\n    if (announceMultiaddrs.length > 0) {\n      // allow transports to add certhashes and other runtime information\n      this.components.transportManager.getListeners().forEach(listener => {\n        listener.updateAnnounceAddrs(announceMultiaddrs)\n      })\n\n      return announceMultiaddrs.map(multiaddr => ({\n        multiaddr,\n        verified: true,\n        type: 'announce',\n        expires: Date.now() + this.addressVerificationTTL,\n        lastVerified: Date.now()\n      }))\n    }\n\n    let addresses: NodeAddress[] = []\n\n    // add transport addresses\n    addresses = addresses.concat(\n      this.components.transportManager.getAddrs()\n        .map(multiaddr => this.transportAddresses.get(multiaddr, this.addressVerificationTTL))\n    )\n\n    const appendAnnounceMultiaddrs = this.getAppendAnnounceAddrs()\n\n    // add append announce addresses\n    if (appendAnnounceMultiaddrs.length > 0) {\n      // allow transports to add certhashes and other runtime information\n      this.components.transportManager.getListeners().forEach(listener => {\n        listener.updateAnnounceAddrs(appendAnnounceMultiaddrs)\n      })\n\n      addresses = addresses.concat(\n        appendAnnounceMultiaddrs.map(multiaddr => ({\n          multiaddr,\n          verified: true,\n          type: 'announce',\n          expires: Date.now() + this.addressVerificationTTL,\n          lastVerified: Date.now()\n        }))\n      )\n    }\n\n    // add observed addresses\n    addresses = addresses.concat(\n      this.observed.getAll()\n    )\n\n    // add ip mapped addresses\n    addresses = addresses.concat(\n      this.ipMappings.getAll(addresses)\n    )\n\n    // add ip->domain mappings, must be done after IP mappings\n    addresses = addresses.concat(\n      this.dnsMappings.getAll(addresses)\n    )\n\n    return addresses\n  }\n\n  addDNSMapping (domain: string, addresses: string[]): void {\n    this.dnsMappings.add(domain, addresses)\n  }\n\n  removeDNSMapping (domain: string): void {\n    if (this.dnsMappings.remove(multiaddr(`/dns/${domain}`))) {\n      this._updatePeerStoreAddresses()\n    }\n  }\n\n  addPublicAddressMapping (internalIp: string, internalPort: number, externalIp: string, externalPort: number = internalPort, protocol: 'tcp' | 'udp' = 'tcp'): void {\n    this.ipMappings.add(internalIp, internalPort, externalIp, externalPort, protocol)\n\n    // remove duplicate observed addresses\n    this.observed.removePrefixed(`/ip${isIPv4(externalIp) ? 4 : 6}/${externalIp}/${protocol}/${externalPort}`)\n  }\n\n  removePublicAddressMapping (internalIp: string, internalPort: number, externalIp: string, externalPort: number = internalPort, protocol: 'tcp' | 'udp' = 'tcp'): void {\n    if (this.ipMappings.remove(multiaddr(`/ip${isIPv4(externalIp) ? 4 : 6}/${externalIp}/${protocol}/${externalPort}`))) {\n      this._updatePeerStoreAddresses()\n    }\n  }\n\n  /**\n   * Where an external service (router, gateway, etc) is forwarding traffic to\n   * us, attempt to add an IP mapping for the external address - this will\n   * include the observed mapping in the address list where we also have a DNS\n   * mapping for the external IP.\n   *\n   * Returns true if we added a new mapping\n   */\n  private maybeUpgradeToIPMapping (ma: Multiaddr): boolean {\n    // this address is already mapped\n    if (this.ipMappings.has(ma)) {\n      return false\n    }\n\n    const maOptions = ma.toOptions()\n\n    // only public IPv4 addresses\n    if (maOptions.family === 6 || maOptions.host === '127.0.0.1' || isPrivateIp(maOptions.host) === true) {\n      return false\n    }\n\n    const listeners = this.components.transportManager.getListeners()\n\n    const transportMatchers: Array<(ma: Multiaddr) => boolean> = [\n      (ma: Multiaddr) => WebSockets.exactMatch(ma) || WebSocketsSecure.exactMatch(ma),\n      (ma: Multiaddr) => TCP.exactMatch(ma),\n      (ma: Multiaddr) => QUIC_V1.exactMatch(ma)\n    ]\n\n    for (const matcher of transportMatchers) {\n      // is the incoming address the same type as the matcher\n      if (!matcher(ma)) {\n        continue\n      }\n\n      // get the listeners for this transport\n      const transportListeners = listeners.filter(listener => {\n        return listener.getAddrs().filter(ma => {\n          // only IPv4 addresses of the matcher type\n          return ma.toOptions().family === 4 && matcher(ma)\n        }).length > 0\n      })\n\n      // because the NAT mapping could be forwarding different external ports to\n      // internal ones, we can only be sure enough to add a mapping if there is\n      // a single listener\n      if (transportListeners.length !== 1) {\n        continue\n      }\n\n      // we have one listener which listens on one port so whatever the external\n      // NAT port mapping is, it should be for this listener\n      const linkLocalAddr = transportListeners[0].getAddrs().filter(ma => {\n        return ma.toOptions().host !== '127.0.0.1'\n      }).pop()\n\n      if (linkLocalAddr == null) {\n        continue\n      }\n\n      const linkLocalOptions = linkLocalAddr.toOptions()\n\n      // upgrade observed address to IP mapping\n      this.observed.remove(ma)\n      this.ipMappings.add(\n        linkLocalOptions.host,\n        linkLocalOptions.port,\n        maOptions.host,\n        maOptions.port,\n        maOptions.transport\n      )\n\n      return true\n    }\n\n    return false\n  }\n}\n", "export enum messages {\n  NOT_STARTED_YET = 'The libp2p node is not started yet',\n  NOT_FOUND = 'Not found'\n}\n\nexport class MissingServiceError extends Error {\n  constructor (message = 'Missing service') {\n    super(message)\n    this.name = 'MissingServiceError'\n  }\n}\n\nexport class UnmetServiceDependenciesError extends Error {\n  constructor (message = 'Unmet service dependencies') {\n    super(message)\n    this.name = 'UnmetServiceDependenciesError'\n  }\n}\n\nexport class NoContentRoutersError extends Error {\n  constructor (message = 'No content routers available') {\n    super(message)\n    this.name = 'NoContentRoutersError'\n  }\n}\n\nexport class NoPeerRoutersError extends Error {\n  constructor (message = 'No peer routers available') {\n    super(message)\n    this.name = 'NoPeerRoutersError'\n  }\n}\n\nexport class QueriedForSelfError extends Error {\n  constructor (message = 'Should not try to find self') {\n    super(message)\n    this.name = 'QueriedForSelfError'\n  }\n}\n\nexport class UnhandledProtocolError extends Error {\n  constructor (message = 'Unhandled protocol error') {\n    super(message)\n    this.name = 'UnhandledProtocolError'\n  }\n}\n\nexport class DuplicateProtocolHandlerError extends Error {\n  constructor (message = 'Duplicate protocol handler error') {\n    super(message)\n    this.name = 'DuplicateProtocolHandlerError'\n  }\n}\n\nexport class DialDeniedError extends Error {\n  constructor (message = 'Dial denied error') {\n    super(message)\n    this.name = 'DialDeniedError'\n  }\n}\n\nexport class UnsupportedListenAddressError extends Error {\n  constructor (message = 'No transport was configured to listen on this address') {\n    super(message)\n    this.name = 'UnsupportedListenAddressError'\n  }\n}\n\nexport class UnsupportedListenAddressesError extends Error {\n  constructor (message = 'Configured listen addresses could not be listened on') {\n    super(message)\n    this.name = 'UnsupportedListenAddressesError'\n  }\n}\n\nexport class NoValidAddressesError extends Error {\n  constructor (message = 'No valid addresses') {\n    super(message)\n    this.name = 'NoValidAddressesError'\n  }\n}\n\nexport class ConnectionInterceptedError extends Error {\n  constructor (message = 'Connection intercepted') {\n    super(message)\n    this.name = 'ConnectionInterceptedError'\n  }\n}\n\nexport class ConnectionDeniedError extends Error {\n  constructor (message = 'Connection denied') {\n    super(message)\n    this.name = 'ConnectionDeniedError'\n  }\n}\n\nexport class MuxerUnavailableError extends Error {\n  constructor (message = 'Stream is not multiplexed') {\n    super(message)\n    this.name = 'MuxerUnavailableError'\n  }\n}\n\nexport class EncryptionFailedError extends Error {\n  constructor (message = 'Encryption failed') {\n    super(message)\n    this.name = 'EncryptionFailedError'\n  }\n}\n\nexport class TransportUnavailableError extends Error {\n  constructor (message = 'Transport unavailable') {\n    super(message)\n    this.name = 'TransportUnavailableError'\n  }\n}\n\nexport class RecursionLimitError extends Error {\n  constructor (message = 'Max recursive depth reached') {\n    super(message)\n    this.name = 'RecursionLimitError'\n  }\n}\n", "import { serviceCapabilities, serviceDependencies, isStartable } from '@libp2p/interface'\nimport { defaultLogger } from '@libp2p/logger'\nimport { MissingServiceError, UnmetServiceDependenciesError } from './errors.js'\nimport type { Startable, Libp2pEvents, ComponentLogger, NodeInfo, ConnectionProtector, ConnectionGater, ContentRouting, Metrics, PeerId, PeerRouting, PeerStore, PrivateKey, Upgrader } from '@libp2p/interface'\nimport type { AddressManager, ConnectionManager, RandomWalk, Registrar, TransportManager } from '@libp2p/interface-internal'\nimport type { DNS } from '@multiformats/dns'\nimport type { Datastore } from 'interface-datastore'\nimport type { TypedEventTarget } from 'main-event'\n\nexport interface Components extends Record<string, any>, Startable {\n  peerId: PeerId\n  privateKey: PrivateKey\n  nodeInfo: NodeInfo\n  logger: ComponentLogger\n  events: TypedEventTarget<Libp2pEvents>\n  addressManager: AddressManager\n  peerStore: PeerStore\n  upgrader: Upgrader\n  randomWalk: RandomWalk\n  registrar: Registrar\n  connectionManager: ConnectionManager\n  transportManager: TransportManager\n  connectionGater: ConnectionGater\n  contentRouting: ContentRouting\n  peerRouting: PeerRouting\n  datastore: Datastore\n  connectionProtector?: ConnectionProtector\n  metrics?: Metrics\n  dns?: DNS\n}\n\nexport interface ComponentsInit {\n  peerId?: PeerId\n  privateKey?: PrivateKey\n  nodeInfo?: NodeInfo\n  logger?: ComponentLogger\n  events?: TypedEventTarget<Libp2pEvents>\n  addressManager?: AddressManager\n  peerStore?: PeerStore\n  upgrader?: Upgrader\n  randomWalk?: RandomWalk\n  metrics?: Metrics\n  registrar?: Registrar\n  connectionManager?: ConnectionManager\n  transportManager?: TransportManager\n  connectionGater?: ConnectionGater\n  contentRouting?: ContentRouting\n  peerRouting?: PeerRouting\n  datastore?: Datastore\n  connectionProtector?: ConnectionProtector\n  dns?: DNS\n}\n\nclass DefaultComponents implements Startable {\n  public components: Record<string, any> = {}\n  private _started = false\n\n  constructor (init: ComponentsInit = {}) {\n    this.components = {}\n\n    for (const [key, value] of Object.entries(init)) {\n      this.components[key] = value\n    }\n\n    if (this.components.logger == null) {\n      this.components.logger = defaultLogger()\n    }\n  }\n\n  isStarted (): boolean {\n    return this._started\n  }\n\n  private async _invokeStartableMethod (methodName: 'beforeStart' | 'start' | 'afterStart' | 'beforeStop' | 'stop' | 'afterStop'): Promise<void> {\n    await Promise.all(\n      Object.values(this.components)\n        .filter(obj => isStartable(obj))\n        .map(async (startable: Startable) => {\n          await startable[methodName]?.()\n        })\n    )\n  }\n\n  async beforeStart (): Promise<void> {\n    await this._invokeStartableMethod('beforeStart')\n  }\n\n  async start (): Promise<void> {\n    await this._invokeStartableMethod('start')\n    this._started = true\n  }\n\n  async afterStart (): Promise<void> {\n    await this._invokeStartableMethod('afterStart')\n  }\n\n  async beforeStop (): Promise<void> {\n    await this._invokeStartableMethod('beforeStop')\n  }\n\n  async stop (): Promise<void> {\n    await this._invokeStartableMethod('stop')\n    this._started = false\n  }\n\n  async afterStop (): Promise<void> {\n    await this._invokeStartableMethod('afterStop')\n  }\n}\n\nconst OPTIONAL_SERVICES = [\n  'metrics',\n  'connectionProtector',\n  'dns'\n]\n\nconst NON_SERVICE_PROPERTIES = [\n  'components',\n  'isStarted',\n  'beforeStart',\n  'start',\n  'afterStart',\n  'beforeStop',\n  'stop',\n  'afterStop',\n  'then',\n  '_invokeStartableMethod'\n]\n\nexport function defaultComponents (init: ComponentsInit = {}): Components {\n  const components = new DefaultComponents(init)\n\n  const proxy = new Proxy(components, {\n    get (target, prop, receiver) {\n      if (typeof prop === 'string' && !NON_SERVICE_PROPERTIES.includes(prop)) {\n        const service = components.components[prop]\n\n        if (service == null && !OPTIONAL_SERVICES.includes(prop)) {\n          throw new MissingServiceError(`${prop} not set`)\n        }\n\n        return service\n      }\n\n      return Reflect.get(target, prop, receiver)\n    },\n\n    set (target, prop, value) {\n      if (typeof prop === 'string') {\n        components.components[prop] = value\n      } else {\n        Reflect.set(target, prop, value)\n      }\n\n      return true\n    }\n  })\n\n  // @ts-expect-error component keys are proxied\n  return proxy\n}\n\nexport function checkServiceDependencies (components: Components): void {\n  const serviceCapabilities: Record<string, ConstrainBoolean> = {}\n\n  for (const service of Object.values(components.components)) {\n    for (const capability of getServiceCapabilities(service)) {\n      serviceCapabilities[capability] = true\n    }\n  }\n\n  for (const service of Object.values(components.components)) {\n    for (const capability of getServiceDependencies(service)) {\n      if (serviceCapabilities[capability] !== true) {\n        throw new UnmetServiceDependenciesError(`Service \"${getServiceName(service)}\" required capability \"${capability}\" but it was not provided by any component, you may need to add additional configuration when creating your node.`)\n      }\n    }\n  }\n}\n\nfunction getServiceCapabilities (service: any): string[] {\n  if (Array.isArray(service?.[serviceCapabilities])) {\n    return service[serviceCapabilities]\n  }\n\n  return []\n}\n\nfunction getServiceDependencies (service: any): string[] {\n  if (Array.isArray(service?.[serviceDependencies])) {\n    return service[serviceDependencies]\n  }\n\n  return []\n}\n\nfunction getServiceName (service: any): string {\n  return service?.[Symbol.toStringTag] ?? service?.toString() ?? 'unknown'\n}\n", "import { isPrivateIp } from '@libp2p/utils/private-ip'\nimport { WebSockets } from '@multiformats/multiaddr-matcher'\nimport type { ConnectionGater } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nconst CODEC_IP4 = 0x04\nconst CODEC_IP6 = 0x29\n\n/**\n * Returns a connection gater that disallows dialling private addresses or\n * insecure websockets by default.\n *\n * Browsers are severely limited in their resource usage so don't waste time\n * trying to dial undialable addresses, and they also print verbose error\n * messages when making connections over insecure transports which causes\n * confusion.\n */\nexport function connectionGater (gater: ConnectionGater = {}): ConnectionGater {\n  return {\n    denyDialPeer: async () => false,\n    denyDialMultiaddr: async (multiaddr: Multiaddr) => {\n      // do not connect to insecure websockets by default\n      if (WebSockets.matches(multiaddr)) {\n        return false\n      }\n\n      const tuples = multiaddr.stringTuples()\n\n      // do not connect to private addresses by default\n      if (tuples[0][0] === CODEC_IP4 || tuples[0][0] === CODEC_IP6) {\n        return Boolean(isPrivateIp(`${tuples[0][1]}`))\n      }\n\n      return false\n    },\n    denyInboundConnection: async () => false,\n    denyOutboundConnection: async () => false,\n    denyInboundEncryptedConnection: async () => false,\n    denyOutboundEncryptedConnection: async () => false,\n    denyInboundUpgradedConnection: async () => false,\n    denyOutboundUpgradedConnection: async () => false,\n    filterMultiaddrForPeer: async () => true,\n    ...gater\n  }\n}\n", "// From https://github.com/sindresorhus/random-int/blob/c37741b56f76b9160b0b63dae4e9c64875128146/index.js#L13-L15\nconst randomInteger = (minimum, maximum) => Math.floor((Math.random() * (maximum - minimum + 1)) + minimum);\n\nconst createAbortError = () => {\n\tconst error = new Error('Delay aborted');\n\terror.name = 'AbortError';\n\treturn error;\n};\n\nconst clearMethods = new WeakMap();\n\nexport function createDelay({clearTimeout: defaultClear, setTimeout: defaultSet} = {}) {\n\t// We cannot use `async` here as we need the promise identity.\n\treturn (milliseconds, {value, signal} = {}) => {\n\t\t// TODO: Use `signal?.throwIfAborted()` when targeting Node.js 18.\n\t\tif (signal?.aborted) {\n\t\t\treturn Promise.reject(createAbortError());\n\t\t}\n\n\t\tlet timeoutId;\n\t\tlet settle;\n\t\tlet rejectFunction;\n\t\tconst clear = defaultClear ?? clearTimeout;\n\n\t\tconst signalListener = () => {\n\t\t\tclear(timeoutId);\n\t\t\trejectFunction(createAbortError());\n\t\t};\n\n\t\tconst cleanup = () => {\n\t\t\tif (signal) {\n\t\t\t\tsignal.removeEventListener('abort', signalListener);\n\t\t\t}\n\t\t};\n\n\t\tconst delayPromise = new Promise((resolve, reject) => {\n\t\t\tsettle = () => {\n\t\t\t\tcleanup();\n\t\t\t\tresolve(value);\n\t\t\t};\n\n\t\t\trejectFunction = reject;\n\t\t\ttimeoutId = (defaultSet ?? setTimeout)(settle, milliseconds);\n\t\t});\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', signalListener, {once: true});\n\t\t}\n\n\t\tclearMethods.set(delayPromise, () => {\n\t\t\tclear(timeoutId);\n\t\t\ttimeoutId = null;\n\t\t\tsettle();\n\t\t});\n\n\t\treturn delayPromise;\n\t};\n}\n\nconst delay = createDelay();\n\nexport default delay;\n\nexport async function rangeDelay(minimum, maximum, options = {}) {\n\treturn delay(randomInteger(minimum, maximum), options);\n}\n\nexport function clearDelay(promise) {\n\tclearMethods.get(promise)?.();\n}\n", "import delay from 'delay'\nimport { RateLimitError } from './errors.js'\n\nexport interface RateLimiterInit {\n  /**\n   * Number of points\n   *\n   * @default 4\n   */\n  points?: number\n\n  /**\n   * Per seconds\n   *\n   * @default 1\n   */\n  duration?: number\n\n  /**\n   * Block if consumed more than points in current duration for blockDuration seconds\n   *\n   * @default 0\n   */\n  blockDuration?: number\n\n  /**\n   * Execute allowed actions evenly over duration\n   *\n   * @default false\n   */\n  execEvenly?: boolean\n\n  /**\n   * ms, works with execEvenly=true option\n   *\n   * @default duration * 1000 / points\n   */\n  execEvenlyMinDelayMs?: number\n\n  /**\n   * @default \"rlflx\"\n   */\n  keyPrefix?: string\n}\n\nexport interface GetKeySecDurationOptions {\n  customDuration?: number\n}\n\nexport interface RateLimiterResult {\n  remainingPoints: number\n  msBeforeNext: number\n  consumedPoints: number\n  isFirstInDuration: boolean\n}\n\nexport interface RateRecord {\n  value: number\n  expiresAt?: Date\n  timeoutId?: ReturnType<typeof setTimeout>\n}\n\nexport class RateLimiter {\n  public readonly memoryStorage: MemoryStorage\n  protected points: number\n  protected duration: number\n  protected blockDuration: number\n  protected execEvenly: boolean\n  protected execEvenlyMinDelayMs: number\n  protected keyPrefix: string\n\n  constructor (opts: RateLimiterInit = {}) {\n    this.points = opts.points ?? 4\n    this.duration = opts.duration ?? 1\n    this.blockDuration = opts.blockDuration ?? 0\n    this.execEvenly = opts.execEvenly ?? false\n    this.execEvenlyMinDelayMs = opts.execEvenlyMinDelayMs ?? (this.duration * 1000 / this.points)\n    this.keyPrefix = opts.keyPrefix ?? 'rlflx'\n    this.memoryStorage = new MemoryStorage()\n  }\n\n  async consume (key: string, pointsToConsume: number = 1, options: GetKeySecDurationOptions = {}): Promise<RateLimiterResult> {\n    const rlKey = this.getKey(key)\n    const secDuration = this._getKeySecDuration(options)\n    let res = this.memoryStorage.incrby(rlKey, pointsToConsume, secDuration)\n    res.remainingPoints = Math.max(this.points - res.consumedPoints, 0)\n\n    if (res.consumedPoints > this.points) {\n      // Block only first time when consumed more than points\n      if (this.blockDuration > 0 && res.consumedPoints <= (this.points + pointsToConsume)) {\n        // Block key\n        res = this.memoryStorage.set(rlKey, res.consumedPoints, this.blockDuration)\n      }\n\n      throw new RateLimitError('Rate limit exceeded', res)\n    } else if (this.execEvenly && res.msBeforeNext > 0 && !res.isFirstInDuration) {\n      // Execute evenly\n      let delayMs = Math.ceil(res.msBeforeNext / (res.remainingPoints + 2))\n      if (delayMs < this.execEvenlyMinDelayMs) {\n        delayMs = res.consumedPoints * this.execEvenlyMinDelayMs\n      }\n\n      await delay(delayMs)\n    }\n\n    return res\n  }\n\n  penalty (key: string, points: number = 1, options: GetKeySecDurationOptions = {}): RateLimiterResult {\n    const rlKey = this.getKey(key)\n    const secDuration = this._getKeySecDuration(options)\n    const res = this.memoryStorage.incrby(rlKey, points, secDuration)\n    res.remainingPoints = Math.max(this.points - res.consumedPoints, 0)\n\n    return res\n  }\n\n  reward (key: string, points: number = 1, options: GetKeySecDurationOptions = {}): RateLimiterResult {\n    const rlKey = this.getKey(key)\n    const secDuration = this._getKeySecDuration(options)\n    const res = this.memoryStorage.incrby(rlKey, -points, secDuration)\n    res.remainingPoints = Math.max(this.points - res.consumedPoints, 0)\n\n    return res\n  }\n\n  /**\n   * Block any key for secDuration seconds\n   *\n   * @param key\n   * @param secDuration\n   */\n  block (key: string, secDuration: number): RateLimiterResult {\n    const msDuration = secDuration * 1000\n    const initPoints = this.points + 1\n\n    this.memoryStorage.set(this.getKey(key), initPoints, secDuration)\n\n    return {\n      remainingPoints: 0,\n      msBeforeNext: msDuration === 0 ? -1 : msDuration,\n      consumedPoints: initPoints,\n      isFirstInDuration: false\n    }\n  }\n\n  set (key: string, points: number, secDuration: number = 0): RateLimiterResult {\n    const msDuration = (secDuration >= 0 ? secDuration : this.duration) * 1000\n\n    this.memoryStorage.set(this.getKey(key), points, secDuration)\n\n    return {\n      remainingPoints: 0,\n      msBeforeNext: msDuration === 0 ? -1 : msDuration,\n      consumedPoints: points,\n      isFirstInDuration: false\n    }\n  }\n\n  get (key: string): RateLimiterResult | undefined {\n    const res = this.memoryStorage.get(this.getKey(key))\n\n    if (res != null) {\n      res.remainingPoints = Math.max(this.points - res.consumedPoints, 0)\n    }\n\n    return res\n  }\n\n  delete (key: string): void {\n    this.memoryStorage.delete(this.getKey(key))\n  }\n\n  private _getKeySecDuration (options?: GetKeySecDurationOptions): number {\n    if (options?.customDuration != null && options.customDuration >= 0) {\n      return options.customDuration\n    }\n\n    return this.duration\n  }\n\n  getKey (key: string): string {\n    return this.keyPrefix.length > 0 ? `${this.keyPrefix}:${key}` : key\n  }\n\n  parseKey (rlKey: string): string {\n    return rlKey.substring(this.keyPrefix.length)\n  }\n}\n\nexport class MemoryStorage {\n  public readonly storage: Map<string, RateRecord>\n\n  constructor () {\n    this.storage = new Map()\n  }\n\n  incrby (key: string, value: number, durationSec: number): RateLimiterResult {\n    const existing = this.storage.get(key)\n\n    if (existing != null) {\n      const msBeforeExpires = existing.expiresAt != null\n        ? existing.expiresAt.getTime() - new Date().getTime()\n        : -1\n\n      if (existing.expiresAt == null || msBeforeExpires > 0) {\n        // Change value\n        existing.value += value\n\n        return {\n          remainingPoints: 0,\n          msBeforeNext: msBeforeExpires,\n          consumedPoints: existing.value,\n          isFirstInDuration: false\n        }\n      }\n\n      return this.set(key, value, durationSec)\n    }\n\n    return this.set(key, value, durationSec)\n  }\n\n  set (key: string, value: number, durationSec: number): RateLimiterResult {\n    const durationMs = durationSec * 1000\n    const existing = this.storage.get(key)\n\n    if (existing != null) {\n      clearTimeout(existing.timeoutId)\n    }\n\n    const record: RateRecord = {\n      value,\n      expiresAt: durationMs > 0 ? new Date(Date.now() + durationMs) : undefined\n    }\n\n    this.storage.set(key, record)\n\n    if (durationMs > 0) {\n      record.timeoutId = setTimeout(() => {\n        this.storage.delete(key)\n      }, durationMs)\n\n      if (record.timeoutId.unref != null) {\n        record.timeoutId.unref()\n      }\n    }\n\n    return {\n      remainingPoints: 0,\n      msBeforeNext: durationMs === 0 ? -1 : durationMs,\n      consumedPoints: record.value,\n      isFirstInDuration: true\n    }\n  }\n\n  get (key: string): RateLimiterResult | undefined {\n    const existing = this.storage.get(key)\n\n    if (existing != null) {\n      const msBeforeExpires = existing.expiresAt != null\n        ? existing.expiresAt.getTime() - new Date().getTime()\n        : -1\n      return {\n        remainingPoints: 0,\n        msBeforeNext: msBeforeExpires,\n        consumedPoints: existing.value,\n        isFirstInDuration: false\n      }\n    }\n  }\n\n  delete (key: string): boolean {\n    const record = this.storage.get(key)\n\n    if (record != null) {\n      if (record.timeoutId != null) {\n        clearTimeout(record.timeoutId)\n      }\n\n      this.storage.delete(key)\n\n      return true\n    }\n    return false\n  }\n}\n", "import { InvalidMultiaddrError, InvalidParametersError, isPeerId } from '@libp2p/interface'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { isMultiaddr } from '@multiformats/multiaddr'\nimport { PEER_ID } from '@multiformats/multiaddr-matcher'\nimport type { PeerId } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport interface PeerAddress {\n  peerId?: PeerId\n  multiaddrs: Multiaddr[]\n}\n\n/**\n * Extracts a PeerId and/or multiaddr from the passed PeerId or Multiaddr or an\n * array of Multiaddrs\n */\nexport function getPeerAddress (peer: PeerId | Multiaddr | Multiaddr[]): PeerAddress {\n  if (isPeerId(peer)) {\n    return { peerId: peer, multiaddrs: [] }\n  }\n\n  let multiaddrs = Array.isArray(peer) ? peer : [peer]\n\n  let peerId: PeerId | undefined\n\n  if (multiaddrs.length > 0) {\n    const peerIdStr = multiaddrs[0].getPeerId()\n    peerId = peerIdStr == null ? undefined : peerIdFromString(peerIdStr)\n\n    // ensure PeerId is either not set or is consistent\n    multiaddrs.forEach(ma => {\n      if (!isMultiaddr(ma)) {\n        throw new InvalidMultiaddrError('Invalid multiaddr')\n      }\n\n      const maPeerIdStr = ma.getPeerId()\n\n      if (maPeerIdStr == null) {\n        if (peerId != null) {\n          throw new InvalidParametersError('Multiaddrs must all have the same peer id or have no peer id')\n        }\n      } else {\n        const maPeerId = peerIdFromString(maPeerIdStr)\n\n        if (peerId?.equals(maPeerId) !== true) {\n          throw new InvalidParametersError('Multiaddrs must all have the same peer id or have no peer id')\n        }\n      }\n    })\n  }\n\n  // ignore any `/p2p/Qmfoo`-style addresses as we will include the peer id in\n  // the returned value of this function\n  multiaddrs = multiaddrs.filter(ma => {\n    return !PEER_ID.exactMatch(ma)\n  })\n\n  return {\n    peerId,\n    multiaddrs\n  }\n}\n", "import type { Connection, Stream, AbortOptions } from '@libp2p/interface'\n\n/**\n * Close the passed stream, falling back to aborting the stream if closing\n * cleanly fails.\n */\nexport async function safelyCloseStream (stream?: Stream, options?: AbortOptions): Promise<void> {\n  try {\n    await stream?.close(options)\n  } catch (err: any) {\n    stream?.abort(err)\n  }\n}\n\n/**\n * These are speculative protocols that are run automatically on connection open\n * so are usually not the reason the connection was opened.\n *\n * Consequently when requested it should be safe to close connections that only\n * have these protocol streams open.\n */\nconst DEFAULT_CLOSABLE_PROTOCOLS = [\n  // identify\n  '/ipfs/id/1.0.0',\n\n  // identify-push\n  '/ipfs/id/push/1.0.0',\n\n  // autonat\n  '/libp2p/autonat/1.0.0',\n\n  // dcutr\n  '/libp2p/dcutr'\n]\n\nexport interface SafelyCloseConnectionOptions extends AbortOptions {\n  /**\n   * Only close the stream if it either has no protocol streams open or only\n   * ones in this list.\n   *\n   * @default ['/ipfs/id/1.0.0']\n   */\n  closableProtocols?: string[]\n}\n\n/**\n * Close the passed connection if it has no streams, or only closable protocol\n * streams, falling back to aborting the connection if closing it cleanly fails.\n */\nexport async function safelyCloseConnectionIfUnused (connection?: Connection, options?: SafelyCloseConnectionOptions): Promise<void> {\n  const streamProtocols = connection?.streams?.map(stream => stream.protocol) ?? []\n  const closableProtocols = options?.closableProtocols ?? DEFAULT_CLOSABLE_PROTOCOLS\n\n  // if the connection has protocols not in the closable protocols list, do not\n  // close the connection\n  if (streamProtocols.filter(proto => proto != null && !closableProtocols.includes(proto)).length > 0) {\n    return\n  }\n\n  try {\n    await connection?.close(options)\n  } catch (err: any) {\n    connection?.abort(err)\n  }\n}\n", "import { multiaddr } from '@multiformats/multiaddr'\nimport { convertToIpNet } from '@multiformats/multiaddr/convert'\nimport type { IpNet } from '@chainsafe/netmask'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * Converts a multiaddr string or object to an IpNet object.\n * If the multiaddr doesn't include /ipcidr, it will encapsulate with the appropriate CIDR:\n * - /ipcidr/32 for IPv4\n * - /ipcidr/128 for IPv6\n *\n * @param {string | Multiaddr} ma - The multiaddr string or object to convert.\n * @returns {IpNet} The converted IpNet object.\n * @throws {Error} Throws an error if the multiaddr is not valid.\n */\nexport function multiaddrToIpNet (ma: string | Multiaddr): IpNet {\n  try {\n    let parsedMa: Multiaddr\n    if (typeof ma === 'string') {\n      parsedMa = multiaddr(ma)\n    } else {\n      parsedMa = ma\n    }\n\n    const protoNames = new Set([...parsedMa.getComponents().map(component => component.name)])\n\n    // Check if /ipcidr is already present\n    if (!protoNames.has('ipcidr')) {\n      const isIPv6 = protoNames.has('ip6')\n      const cidr = isIPv6 ? '/ipcidr/128' : '/ipcidr/32'\n      parsedMa = parsedMa.encapsulate(cidr)\n    }\n\n    return convertToIpNet(parsedMa)\n  } catch (error) {\n    throw new Error(`Can't convert to IpNet, Invalid multiaddr format: ${ma}`)\n  }\n}\n", "import { PeerMap } from '@libp2p/peer-collections'\nimport { safelyCloseConnectionIfUnused } from '@libp2p/utils/close'\nimport { multiaddrToIpNet } from './utils.js'\nimport type { IpNet } from '@chainsafe/netmask'\nimport type { Libp2pEvents, Logger, ComponentLogger, PeerStore, Connection } from '@libp2p/interface'\nimport type { ConnectionManager } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { TypedEventTarget } from 'main-event'\n\ninterface ConnectionPrunerInit {\n  allow?: Multiaddr[]\n}\n\ninterface ConnectionPrunerComponents {\n  connectionManager: ConnectionManager\n  peerStore: PeerStore\n  events: TypedEventTarget<Libp2pEvents>\n  logger: ComponentLogger\n}\n\n/**\n * If we go over the max connections limit, choose some connections to close\n */\nexport class ConnectionPruner {\n  private readonly connectionManager: ConnectionManager\n  private readonly peerStore: PeerStore\n  private readonly allow: IpNet[]\n  private readonly events: TypedEventTarget<Libp2pEvents>\n  private readonly log: Logger\n\n  constructor (components: ConnectionPrunerComponents, init: ConnectionPrunerInit = {}) {\n    this.allow = (init.allow ?? []).map(ma => multiaddrToIpNet(ma))\n    this.connectionManager = components.connectionManager\n    this.peerStore = components.peerStore\n    this.events = components.events\n    this.log = components.logger.forComponent('libp2p:connection-manager:connection-pruner')\n    this.maybePruneConnections = this.maybePruneConnections.bind(this)\n  }\n\n  start (): void {\n    this.events.addEventListener('connection:open', this.maybePruneConnections)\n  }\n\n  stop (): void {\n    this.events.removeEventListener('connection:open', this.maybePruneConnections)\n  }\n\n  maybePruneConnections (): void {\n    this._maybePruneConnections()\n      .catch(err => {\n        this.log.error('error while pruning connections %e', err)\n      })\n  }\n\n  /**\n   * If we have more connections than our maximum, select some excess connections\n   * to prune based on peer value\n   */\n  private async _maybePruneConnections (): Promise<void> {\n    const connections = this.connectionManager.getConnections()\n    const numConnections = connections.length\n    const maxConnections = this.connectionManager.getMaxConnections()\n\n    this.log('checking max connections limit %d/%d', numConnections, maxConnections)\n\n    if (numConnections <= maxConnections) {\n      return\n    }\n\n    const peerValues = new PeerMap<number>()\n\n    // work out peer values\n    for (const connection of connections) {\n      const remotePeer = connection.remotePeer\n\n      if (peerValues.has(remotePeer)) {\n        continue\n      }\n\n      peerValues.set(remotePeer, 0)\n\n      try {\n        const peer = await this.peerStore.get(remotePeer)\n\n        // sum all tag values\n        peerValues.set(remotePeer, [...peer.tags.values()].reduce((acc, curr) => {\n          return acc + curr.value\n        }, 0))\n      } catch (err: any) {\n        if (err.name !== 'NotFoundError') {\n          this.log.error('error loading peer tags', err)\n        }\n      }\n    }\n\n    const sortedConnections = this.sortConnections(connections, peerValues)\n\n    // close some connections\n    const toPrune = Math.max(numConnections - maxConnections, 0)\n    const toClose = []\n\n    for (const connection of sortedConnections) {\n      this.log('too many connections open - closing a connection to %p', connection.remotePeer)\n      // check allow list\n      const connectionInAllowList = this.allow.some((ipNet) => {\n        return ipNet.contains(connection.remoteAddr.nodeAddress().address)\n      })\n\n      // Connections in the allow list should be excluded from pruning\n      if (!connectionInAllowList) {\n        toClose.push(connection)\n      }\n\n      if (toClose.length === toPrune) {\n        break\n      }\n    }\n\n    // close connections\n    await Promise.all(\n      toClose.map(async connection => {\n        await safelyCloseConnectionIfUnused(connection, {\n          signal: AbortSignal.timeout(1000)\n        })\n      })\n    )\n\n    // despatch prune event\n    this.events.safeDispatchEvent('connection:prune', { detail: toClose })\n  }\n\n  sortConnections (connections: Connection[], peerValues: PeerMap<number>): Connection[] {\n    return connections\n      // sort by connection age, newest to oldest\n      .sort((a, b) => {\n        const connectionALifespan = a.timeline.open\n        const connectionBLifespan = b.timeline.open\n\n        if (connectionALifespan < connectionBLifespan) {\n          return 1\n        }\n\n        if (connectionALifespan > connectionBLifespan) {\n          return -1\n        }\n\n        return 0\n      })\n      // sort by direction, incoming first then outgoing\n      .sort((a, b) => {\n        if (a.direction === 'outbound' && b.direction === 'inbound') {\n          return 1\n        }\n\n        if (a.direction === 'inbound' && b.direction === 'outbound') {\n          return -1\n        }\n\n        return 0\n      })\n      // sort by number of streams, lowest to highest\n      .sort((a, b) => {\n        if (a.streams.length > b.streams.length) {\n          return 1\n        }\n\n        if (a.streams.length < b.streams.length) {\n          return -1\n        }\n\n        return 0\n      })\n      // sort by tag value, lowest to highest\n      .sort((a, b) => {\n        const peerAValue = peerValues.get(a.remotePeer) ?? 0\n        const peerBValue = peerValues.get(b.remotePeer) ?? 0\n\n        if (peerAValue > peerBValue) {\n          return 1\n        }\n\n        if (peerAValue < peerBValue) {\n          return -1\n        }\n\n        return 0\n      })\n  }\n}\n", "/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#dialTimeout\n */\nexport const DIAL_TIMEOUT = 10_000\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#inboundUpgradeTimeout\n */\nexport const INBOUND_UPGRADE_TIMEOUT = 10_000\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#protocolNegotiationTimeout\n */\nexport const PROTOCOL_NEGOTIATION_TIMEOUT = 10_000\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxPeerAddrsToDial\n */\nexport const MAX_PEER_ADDRS_TO_DIAL = 25\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#inboundConnectionThreshold\n */\nexport const INBOUND_CONNECTION_THRESHOLD = 5\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxIncomingPendingConnections\n */\nexport const MAX_INCOMING_PENDING_CONNECTIONS = 10\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxParallelReconnects\n */\nexport const MAX_PARALLEL_RECONNECTS = 5\n\n/**\n * Store as part of the peer store metadata for a given peer, the value for this\n * key is a timestamp of the last time a dial attempt failed with the timestamp\n * stored as a string.\n *\n * Used to insure we do not endlessly try to auto dial peers we have recently\n * failed to dial.\n */\nexport const LAST_DIAL_FAILURE_KEY = 'last-dial-failure'\n\n/**\n * Store as part of the peer store metadata for a given peer, the value for this\n * key is a timestamp of the last time a dial attempt succeeded with the\n * timestamp stored as a string.\n */\nexport const LAST_DIAL_SUCCESS_KEY = 'last-dial-success'\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxDialQueueLength\n */\nexport const MAX_DIAL_QUEUE_LENGTH = 500\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxRecursiveDepth\n */\nexport const MAX_RECURSIVE_DEPTH = 32\n", "export * from './constants.defaults.js'\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxConnections\n */\nexport const MAX_CONNECTIONS = 100\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxParallelDials\n */\nexport const MAX_PARALLEL_DIALS = 50\n", "import { Queue } from './queue/index.js'\nimport type { QueueInit } from './queue/index.js'\nimport type { AbortOptions } from '@libp2p/interface'\n\nexport interface PriorityQueueJobOptions extends AbortOptions {\n  priority: number\n}\n\nexport class PriorityQueue <JobReturnType = void, JobOptions extends PriorityQueueJobOptions = PriorityQueueJobOptions> extends Queue<JobReturnType, JobOptions> {\n  constructor (init: QueueInit<JobReturnType, JobOptions> = {}) {\n    super({\n      ...init,\n      sort: (a, b) => {\n        if (a.options.priority > b.options.priority) {\n          return -1\n        }\n\n        if (a.options.priority < b.options.priority) {\n          return 1\n        }\n\n        return 0\n      }\n    })\n  }\n}\n", "/**\n * Check if a given ip address is a loopback address\n */\nexport function isLoopbackAddr (ip: string) {\n  return /^127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(ip) ||\n    /^::1$/.test(ip)\n}\n", "import { isLoopbackAddr } from 'is-loopback-addr'\nimport { isIpBased } from './is-ip-based.js'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * Check if a given multiaddr is a loopback address.\n */\nexport function isLoopback (ma: Multiaddr): boolean {\n  if (!isIpBased(ma)) {\n    // not an IP based multiaddr, cannot be private\n    return false\n  }\n\n  const { address } = ma.nodeAddress()\n\n  return isLoopbackAddr(address)\n}\n", "import { isLoopback } from '@libp2p/utils/multiaddr/is-loopback'\nimport { isPrivate } from '@libp2p/utils/multiaddr/is-private'\nimport { Circuit, WebSockets, WebSocketsSecure, WebRTC, WebRTCDirect, WebTransport, TCP } from '@multiformats/multiaddr-matcher'\nimport type { Address } from '@libp2p/interface'\n\n/**\n * Sorts addresses by order of reliability, where they have presented the fewest\n * problems:\n *\n * TCP -> WebSockets/Secure -> WebRTC -> WebRTCDirect -> WebTransport\n */\n// eslint-disable-next-line complexity\nexport function reliableTransportsFirst (a: Address, b: Address): -1 | 0 | 1 {\n  const isATcp = TCP.exactMatch(a.multiaddr)\n  const isBTcp = TCP.exactMatch(b.multiaddr)\n\n  if (isATcp && !isBTcp) {\n    return -1\n  }\n\n  if (!isATcp && isBTcp) {\n    return 1\n  }\n\n  const isAWebSocketSecure = WebSocketsSecure.exactMatch(a.multiaddr)\n  const isBWebSocketSecure = WebSocketsSecure.exactMatch(b.multiaddr)\n\n  if (isAWebSocketSecure && !isBWebSocketSecure) {\n    return -1\n  }\n\n  if (!isAWebSocketSecure && isBWebSocketSecure) {\n    return 1\n  }\n\n  const isAWebSocket = WebSockets.exactMatch(a.multiaddr)\n  const isBWebSocket = WebSockets.exactMatch(b.multiaddr)\n\n  if (isAWebSocket && !isBWebSocket) {\n    return -1\n  }\n\n  if (!isAWebSocket && isBWebSocket) {\n    return 1\n  }\n\n  const isAWebRTC = WebRTC.exactMatch(a.multiaddr)\n  const isBWebRTC = WebRTC.exactMatch(b.multiaddr)\n\n  if (isAWebRTC && !isBWebRTC) {\n    return -1\n  }\n\n  if (!isAWebRTC && isBWebRTC) {\n    return 1\n  }\n\n  const isAWebRTCDirect = WebRTCDirect.exactMatch(a.multiaddr)\n  const isBWebRTCDirect = WebRTCDirect.exactMatch(b.multiaddr)\n\n  if (isAWebRTCDirect && !isBWebRTCDirect) {\n    return -1\n  }\n\n  if (!isAWebRTCDirect && isBWebRTCDirect) {\n    return 1\n  }\n\n  const isAWebTransport = WebTransport.exactMatch(a.multiaddr)\n  const isBWebTransport = WebTransport.exactMatch(b.multiaddr)\n\n  if (isAWebTransport && !isBWebTransport) {\n    return -1\n  }\n\n  if (!isAWebTransport && isBWebTransport) {\n    return 1\n  }\n\n  // ... everything else\n  return 0\n}\n\n/**\n * Compare function for array.sort() that moves loopback addresses to the end\n * of the array.\n */\nexport function loopbackAddressLast (a: Address, b: Address): -1 | 0 | 1 {\n  const isALoopback = isLoopback(a.multiaddr)\n  const isBLoopback = isLoopback(b.multiaddr)\n\n  if (isALoopback && !isBLoopback) {\n    return 1\n  } else if (!isALoopback && isBLoopback) {\n    return -1\n  }\n\n  return 0\n}\n\n/**\n * Compare function for array.sort() that moves public addresses to the start\n * of the array.\n */\nexport function publicAddressesFirst (a: Address, b: Address): -1 | 0 | 1 {\n  const isAPrivate = isPrivate(a.multiaddr)\n  const isBPrivate = isPrivate(b.multiaddr)\n\n  if (isAPrivate && !isBPrivate) {\n    return 1\n  } else if (!isAPrivate && isBPrivate) {\n    return -1\n  }\n\n  return 0\n}\n\n/**\n * Compare function for array.sort() that moves certified addresses to the start\n * of the array.\n */\nexport function certifiedAddressesFirst (a: Address, b: Address): -1 | 0 | 1 {\n  if (a.isCertified && !b.isCertified) {\n    return -1\n  } else if (!a.isCertified && b.isCertified) {\n    return 1\n  }\n\n  return 0\n}\n\n/**\n * Compare function for array.sort() that moves circuit relay addresses to the\n * end of the array.\n */\nexport function circuitRelayAddressesLast (a: Address, b: Address): -1 | 0 | 1 {\n  const isACircuit = Circuit.exactMatch(a.multiaddr)\n  const isBCircuit = Circuit.exactMatch(b.multiaddr)\n\n  if (isACircuit && !isBCircuit) {\n    return 1\n  } else if (!isACircuit && isBCircuit) {\n    return -1\n  }\n\n  return 0\n}\n\nexport function defaultAddressSorter (addresses: Address[]): Address[] {\n  return addresses\n    .sort(reliableTransportsFirst)\n    .sort(certifiedAddressesFirst)\n    .sort(circuitRelayAddressesLast)\n    .sort(publicAddressesFirst)\n    .sort(loopbackAddressLast)\n}\n", "import { RecursionLimitError } from '../../errors.ts'\nimport { MAX_RECURSIVE_DEPTH } from '../constants.defaults.ts'\nimport type { MultiaddrResolveOptions, MultiaddrResolver } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport interface ResolveOptions extends MultiaddrResolveOptions {\n  /**\n   * When resolving DNSADDR Multiaddrs that resolve to other DNSADDR Multiaddrs,\n   * limit how many times we will recursively resolve them.\n   *\n   * @default 32\n   */\n  maxRecursiveDepth?: number\n\n  /**\n   * The current recursive depth\n   *\n   * @default 0\n   */\n  depth?: number\n}\n\n/**\n * Recursively resolve multiaddrs\n */\nexport async function resolveMultiaddr (address: Multiaddr, resolvers: Record<string, MultiaddrResolver>, options: ResolveOptions): Promise<Multiaddr[]> {\n  const depth = options.depth ?? 0\n\n  if (depth > (options.maxRecursiveDepth ?? MAX_RECURSIVE_DEPTH)) {\n    throw new RecursionLimitError('Max recursive depth reached')\n  }\n\n  let resolved = false\n  const output: Multiaddr[] = []\n\n  for (const resolver of Object.values(resolvers)) {\n    if (resolver.canResolve(address)) {\n      resolved = true\n      const addresses = await resolver.resolve(address, options)\n\n      for (const address of addresses) {\n        output.push(\n          ...(await resolveMultiaddr(address, resolvers, {\n            ...options,\n            depth: depth + 1\n          }))\n        )\n      }\n    }\n  }\n\n  if (resolved === false) {\n    output.push(address)\n  }\n\n  return output\n}\n\nexport { dnsaddrResolver } from './dnsaddr.js'\n", "/* eslint-disable max-depth */\nimport { TimeoutError, DialError, AbortError } from '@libp2p/interface'\nimport { PeerMap } from '@libp2p/peer-collections'\nimport { PriorityQueue } from '@libp2p/utils/priority-queue'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { Circuit } from '@multiformats/multiaddr-matcher'\nimport { anySignal } from 'any-signal'\nimport { setMaxListeners } from 'main-event'\nimport { CustomProgressEvent } from 'progress-events'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { DialDeniedError, NoValidAddressesError } from '../errors.js'\nimport { getPeerAddress } from '../get-peer.js'\nimport { defaultAddressSorter } from './address-sorter.js'\nimport {\n  DIAL_TIMEOUT,\n  MAX_PARALLEL_DIALS,\n  MAX_PEER_ADDRS_TO_DIAL,\n  LAST_DIAL_FAILURE_KEY,\n  MAX_DIAL_QUEUE_LENGTH,\n  LAST_DIAL_SUCCESS_KEY\n} from './constants.js'\nimport { resolveMultiaddr, dnsaddrResolver } from './resolvers/index.js'\nimport { DEFAULT_DIAL_PRIORITY } from './index.js'\nimport type { AddressSorter, ComponentLogger, Logger, Connection, ConnectionGater, Metrics, PeerId, Address, PeerStore, PeerRouting, IsDialableOptions, OpenConnectionProgressEvents, MultiaddrResolver } from '@libp2p/interface'\nimport type { OpenConnectionOptions, TransportManager } from '@libp2p/interface-internal'\nimport type { PriorityQueueJobOptions } from '@libp2p/utils/priority-queue'\nimport type { DNS } from '@multiformats/dns'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { ProgressOptions } from 'progress-events'\n\nexport interface PendingDialTarget {\n  resolve(value: any): void\n  reject(err: Error): void\n}\n\ninterface DialQueueJobOptions extends PriorityQueueJobOptions, ProgressOptions<OpenConnectionProgressEvents> {\n  peerId?: PeerId\n  multiaddrs: Set<string>\n}\n\ninterface DialerInit {\n  addressSorter?: AddressSorter\n  maxParallelDials?: number\n  maxDialQueueLength?: number\n  maxPeerAddrsToDial?: number\n  dialTimeout?: number\n  resolvers?: Record<string, MultiaddrResolver>\n  connections?: PeerMap<Connection[]>\n}\n\nconst defaultOptions = {\n  maxParallelDials: MAX_PARALLEL_DIALS,\n  maxDialQueueLength: MAX_DIAL_QUEUE_LENGTH,\n  maxPeerAddrsToDial: MAX_PEER_ADDRS_TO_DIAL,\n  dialTimeout: DIAL_TIMEOUT,\n  resolvers: {\n    dnsaddr: dnsaddrResolver\n  }\n}\n\ninterface DialQueueComponents {\n  peerId: PeerId\n  metrics?: Metrics\n  peerStore: PeerStore\n  peerRouting: PeerRouting\n  transportManager: TransportManager\n  connectionGater: ConnectionGater\n  logger: ComponentLogger\n  dns?: DNS\n}\n\nexport class DialQueue {\n  public queue: PriorityQueue<Connection, DialQueueJobOptions>\n  private readonly components: DialQueueComponents\n  private readonly addressSorter?: AddressSorter\n  private readonly maxPeerAddrsToDial: number\n  private readonly maxDialQueueLength: number\n  private readonly dialTimeout: number\n  private shutDownController: AbortController\n  private readonly connections: PeerMap<Connection[]>\n  private readonly log: Logger\n  private readonly resolvers: Record<string, MultiaddrResolver>\n\n  constructor (components: DialQueueComponents, init: DialerInit = {}) {\n    this.addressSorter = init.addressSorter\n    this.maxPeerAddrsToDial = init.maxPeerAddrsToDial ?? defaultOptions.maxPeerAddrsToDial\n    this.maxDialQueueLength = init.maxDialQueueLength ?? defaultOptions.maxDialQueueLength\n    this.dialTimeout = init.dialTimeout ?? defaultOptions.dialTimeout\n    this.connections = init.connections ?? new PeerMap()\n    this.log = components.logger.forComponent('libp2p:connection-manager:dial-queue')\n    this.components = components\n    this.resolvers = init.resolvers ?? defaultOptions.resolvers\n\n    this.shutDownController = new AbortController()\n    setMaxListeners(Infinity, this.shutDownController.signal)\n\n    // controls dial concurrency\n    this.queue = new PriorityQueue({\n      concurrency: init.maxParallelDials ?? defaultOptions.maxParallelDials,\n      metricName: 'libp2p_dial_queue',\n      metrics: components.metrics\n    })\n    // a started job errored\n    this.queue.addEventListener('error', (event) => {\n      if (event.detail?.name !== AbortError.name) {\n        this.log.error('error in dial queue - %e', event.detail)\n      }\n    })\n  }\n\n  start (): void {\n    this.shutDownController = new AbortController()\n    setMaxListeners(Infinity, this.shutDownController.signal)\n  }\n\n  /**\n   * Clears any pending dials\n   */\n  stop (): void {\n    this.shutDownController.abort()\n    this.queue.abort()\n  }\n\n  /**\n   * Connects to a given peer, multiaddr or list of multiaddrs.\n   *\n   * If a peer is passed, all known multiaddrs will be tried. If a multiaddr or\n   * multiaddrs are passed only those will be dialled.\n   *\n   * Where a list of multiaddrs is passed, if any contain a peer id then all\n   * multiaddrs in the list must contain the same peer id.\n   *\n   * The dial to the first address that is successfully able to upgrade a\n   * connection will be used, all other dials will be aborted when that happens.\n   */\n  async dial (peerIdOrMultiaddr: PeerId | Multiaddr | Multiaddr[], options: OpenConnectionOptions = {}): Promise<Connection> {\n    const { peerId, multiaddrs } = getPeerAddress(peerIdOrMultiaddr)\n\n    // make sure we don't have an existing non-limited connection to any of the\n    // addresses we are about to dial\n    const existingConnection = Array.from(this.connections.values()).flat().find(conn => {\n      if (options.force === true) {\n        return false\n      }\n\n      if (conn.limits != null) {\n        return false\n      }\n\n      if (conn.remotePeer.equals(peerId)) {\n        return true\n      }\n\n      return multiaddrs.find(addr => {\n        return addr.equals(conn.remoteAddr)\n      })\n    })\n\n    if (existingConnection?.status === 'open') {\n      this.log('already connected to %a', existingConnection.remoteAddr)\n      options.onProgress?.(new CustomProgressEvent('dial-queue:already-connected'))\n      return existingConnection\n    }\n\n    // ready to dial, all async work finished - make sure we don't have any\n    // pending dials in progress for this peer or set of multiaddrs\n    const existingDial = this.queue.queue.find(job => {\n      if (peerId?.equals(job.options.peerId) === true) {\n        return true\n      }\n\n      // does the dial contain any of the target multiaddrs?\n      const addresses = job.options.multiaddrs\n\n      if (addresses == null) {\n        return false\n      }\n\n      for (const multiaddr of multiaddrs) {\n        if (addresses.has(multiaddr.toString())) {\n          return true\n        }\n      }\n\n      return false\n    })\n\n    if (existingDial != null) {\n      this.log('joining existing dial target for %p', peerId)\n\n      // add all multiaddrs to the dial target\n      for (const multiaddr of multiaddrs) {\n        existingDial.options.multiaddrs.add(multiaddr.toString())\n      }\n\n      options.onProgress?.(new CustomProgressEvent('dial-queue:already-in-dial-queue'))\n      return existingDial.join(options)\n    }\n\n    if (this.queue.size >= this.maxDialQueueLength) {\n      throw new DialError('Dial queue is full')\n    }\n\n    this.log('creating dial target for %p', peerId, multiaddrs.map(ma => ma.toString()))\n\n    options.onProgress?.(new CustomProgressEvent('dial-queue:add-to-dial-queue'))\n    return this.queue.add(async (options) => {\n      options.onProgress?.(new CustomProgressEvent('dial-queue:start-dial'))\n      // create abort conditions - need to do this before `calculateMultiaddrs` as\n      // we may be about to resolve a dns addr which can time out\n      const signal = anySignal([\n        this.shutDownController.signal,\n        options.signal\n      ])\n      setMaxListeners(Infinity, signal)\n\n      try {\n        return await this.dialPeer(options, signal)\n      } finally {\n        // clean up abort signals/controllers\n        signal.clear()\n      }\n    }, {\n      peerId,\n      priority: options.priority ?? DEFAULT_DIAL_PRIORITY,\n      multiaddrs: new Set(multiaddrs.map(ma => ma.toString())),\n      signal: options.signal ?? AbortSignal.timeout(this.dialTimeout),\n      onProgress: options.onProgress\n    })\n  }\n\n  private async dialPeer (options: DialQueueJobOptions, signal: AbortSignal): Promise<Connection> {\n    const peerId = options.peerId\n    const multiaddrs = options.multiaddrs\n    const failedMultiaddrs = new Set<string>()\n\n    // if we have no multiaddrs, only a peer id, set a flag so we will look the\n    // peer up in the peer routing to obtain multiaddrs\n    let forcePeerLookup = options.multiaddrs.size === 0\n\n    let dialed = 0\n    let dialIteration = 0\n    const errors: Error[] = []\n\n    this.log('starting dial to %p', peerId)\n\n    // repeat this operation in case addresses are added to the dial while we\n    // resolve multiaddrs, etc\n    while (forcePeerLookup || multiaddrs.size > 0) {\n      dialIteration++\n\n      // only perform peer lookup once\n      forcePeerLookup = false\n\n      // the addresses we will dial\n      const addrsToDial: Address[] = []\n\n      // copy the addresses into a new set\n      const addrs = new Set(options.multiaddrs)\n\n      // empty the old set - subsequent dial attempts for the same peer id may\n      // add more addresses to try\n      multiaddrs.clear()\n\n      this.log('calculating addrs to dial %p from %s', peerId, [...addrs])\n\n      // load addresses from address book, resolve and dnsaddrs, filter\n      // undialables, add peer IDs, etc\n      const calculatedAddrs = await this.calculateMultiaddrs(peerId, addrs, {\n        ...options,\n        signal\n      })\n\n      for (const addr of calculatedAddrs) {\n        // skip any addresses we have previously failed to dial\n        if (failedMultiaddrs.has(addr.multiaddr.toString())) {\n          this.log.trace('skipping previously failed multiaddr %a while dialing %p', addr.multiaddr, peerId)\n          continue\n        }\n\n        addrsToDial.push(addr)\n      }\n\n      this.log('%s dial to %p with %s', dialIteration === 1 ? 'starting' : 'continuing', peerId, addrsToDial.map(ma => ma.multiaddr.toString()))\n\n      options?.onProgress?.(new CustomProgressEvent<Address[]>('dial-queue:calculated-addresses', addrsToDial))\n\n      for (const address of addrsToDial) {\n        if (dialed === this.maxPeerAddrsToDial) {\n          this.log('dialed maxPeerAddrsToDial (%d) addresses for %p, not trying any others', dialed, options.peerId)\n\n          throw new DialError('Peer had more than maxPeerAddrsToDial')\n        }\n\n        dialed++\n\n        try {\n          // try to dial the address\n          const conn = await this.components.transportManager.dial(address.multiaddr, {\n            ...options,\n            signal\n          })\n\n          this.log('dial to %a succeeded', address.multiaddr)\n\n          // record the successful dial and the address\n          try {\n            await this.components.peerStore.merge(conn.remotePeer, {\n              multiaddrs: [\n                conn.remoteAddr\n              ],\n              metadata: {\n                [LAST_DIAL_SUCCESS_KEY]: uint8ArrayFromString(Date.now().toString())\n              }\n            })\n          } catch (err: any) {\n            this.log.error('could not update last dial failure key for %p', peerId, err)\n          }\n\n          // dial successful, return the connection\n          return conn\n        } catch (err: any) {\n          this.log.error('dial failed to %a', address.multiaddr, err)\n\n          // ensure we don't dial it again in this attempt\n          failedMultiaddrs.add(address.multiaddr.toString())\n\n          if (peerId != null) {\n            // record the failed dial\n            try {\n              await this.components.peerStore.merge(peerId, {\n                metadata: {\n                  [LAST_DIAL_FAILURE_KEY]: uint8ArrayFromString(Date.now().toString())\n                }\n              })\n            } catch (err: any) {\n              this.log.error('could not update last dial failure key for %p', peerId, err)\n            }\n          }\n\n          // the user/dial timeout/shutdown controller signal aborted\n          if (signal.aborted) {\n            throw new TimeoutError(err.message)\n          }\n\n          errors.push(err)\n        }\n      }\n    }\n\n    if (errors.length === 1) {\n      throw errors[0]\n    }\n\n    throw new AggregateError(errors, 'All multiaddr dials failed')\n  }\n\n  // eslint-disable-next-line complexity\n  private async calculateMultiaddrs (peerId?: PeerId, multiaddrs: Set<string> = new Set<string>(), options: OpenConnectionOptions = {}): Promise<Address[]> {\n    const addrs: Address[] = [...multiaddrs].map(ma => ({\n      multiaddr: multiaddr(ma),\n      isCertified: false\n    }))\n\n    // if a peer id or multiaddr(s) with a peer id, make sure it isn't our peer id and that we are allowed to dial it\n    if (peerId != null) {\n      if (this.components.peerId.equals(peerId)) {\n        throw new DialError('Tried to dial self')\n      }\n\n      if ((await this.components.connectionGater.denyDialPeer?.(peerId)) === true) {\n        throw new DialDeniedError('The dial request is blocked by gater.allowDialPeer')\n      }\n\n      // if just a peer id was passed, load available multiaddrs for this peer\n      // from the peer store\n      if (addrs.length === 0) {\n        this.log('loading multiaddrs for %p', peerId)\n        try {\n          const peer = await this.components.peerStore.get(peerId)\n          addrs.push(...peer.addresses)\n          this.log('loaded multiaddrs for %p', peerId, addrs.map(({ multiaddr }) => multiaddr.toString()))\n        } catch (err: any) {\n          if (err.name !== 'NotFoundError') {\n            throw err\n          }\n        }\n      }\n\n      // if we still don't have any addresses for this peer, or the only\n      // addresses we have are without any routing information (e.g.\n      // `/p2p/Qmfoo`), try a lookup using the peer routing\n      if (addrs.length === 0) {\n        this.log('looking up multiaddrs for %p in the peer routing', peerId)\n\n        try {\n          const peerInfo = await this.components.peerRouting.findPeer(peerId, options)\n\n          this.log('found multiaddrs for %p in the peer routing', peerId, addrs.map(({ multiaddr }) => multiaddr.toString()))\n\n          addrs.push(...peerInfo.multiaddrs.map(multiaddr => ({\n            multiaddr,\n            isCertified: false\n          })))\n        } catch (err: any) {\n          if (err.name === 'NoPeerRoutersError') {\n            this.log('no peer routers configured', peerId)\n          } else {\n            this.log.error('looking up multiaddrs for %p in the peer routing failed - %e', peerId, err)\n          }\n        }\n      }\n    }\n\n    // resolve addresses - this can result in a one-to-many translation when\n    // dnsaddrs are resolved\n    let resolvedAddresses = (await Promise.all(\n      addrs.map(async addr => {\n        const result = await resolveMultiaddr(addr.multiaddr, this.resolvers, {\n          dns: this.components.dns,\n          log: this.log,\n          ...options\n        })\n\n        if (result.length === 1 && result[0].equals(addr.multiaddr)) {\n          return addr\n        }\n\n        return result.map(multiaddr => ({\n          multiaddr,\n          isCertified: false\n        }))\n      })\n    ))\n      .flat()\n\n    // ensure the peer id is appended to the multiaddr\n    if (peerId != null) {\n      const peerIdMultiaddr = `/p2p/${peerId.toString()}`\n      resolvedAddresses = resolvedAddresses.map(addr => {\n        const lastComponent = addr.multiaddr.getComponents().pop()\n\n        // append peer id to multiaddr if it is not already present\n        if (lastComponent?.name !== 'p2p') {\n          return {\n            multiaddr: addr.multiaddr.encapsulate(peerIdMultiaddr),\n            isCertified: addr.isCertified\n          }\n        }\n\n        return addr\n      })\n    }\n\n    const filteredAddrs = resolvedAddresses.filter(addr => {\n      // filter out any multiaddrs that we do not have transports for\n      if (this.components.transportManager.dialTransportForMultiaddr(addr.multiaddr) == null) {\n        return false\n      }\n\n      // if the resolved multiaddr has a PeerID but it's the wrong one, ignore it\n      // - this can happen with addresses like bootstrap.libp2p.io that resolve\n      // to multiple different peers\n      const addrPeerId = addr.multiaddr.getPeerId()\n      if (peerId != null && addrPeerId != null) {\n        return peerId.equals(addrPeerId)\n      }\n\n      return true\n    })\n\n    // deduplicate addresses\n    const dedupedAddrs = new Map<string, Address>()\n\n    for (const addr of filteredAddrs) {\n      const maStr = addr.multiaddr.toString()\n      const existing = dedupedAddrs.get(maStr)\n\n      if (existing != null) {\n        existing.isCertified = existing.isCertified || addr.isCertified || false\n        continue\n      }\n\n      dedupedAddrs.set(maStr, addr)\n    }\n\n    const dedupedMultiaddrs = [...dedupedAddrs.values()]\n\n    // make sure we actually have some addresses to dial\n    if (dedupedMultiaddrs.length === 0) {\n      throw new NoValidAddressesError('The dial request has no valid addresses')\n    }\n\n    const gatedAddrs: Address[] = []\n\n    for (const addr of dedupedMultiaddrs) {\n      if (this.components.connectionGater.denyDialMultiaddr != null && await this.components.connectionGater.denyDialMultiaddr(addr.multiaddr)) {\n        continue\n      }\n\n      gatedAddrs.push(addr)\n    }\n\n    const sortedGatedAddrs = this.addressSorter == null ? defaultAddressSorter(gatedAddrs) : gatedAddrs.sort(this.addressSorter)\n\n    // make sure we actually have some addresses to dial\n    if (sortedGatedAddrs.length === 0) {\n      throw new DialDeniedError('The connection gater denied all addresses in the dial request')\n    }\n\n    this.log.trace('addresses for %p before filtering', peerId ?? 'unknown peer', resolvedAddresses.map(({ multiaddr }) => multiaddr.toString()))\n    this.log.trace('addresses for %p after filtering', peerId ?? 'unknown peer', sortedGatedAddrs.map(({ multiaddr }) => multiaddr.toString()))\n\n    return sortedGatedAddrs\n  }\n\n  async isDialable (multiaddr: Multiaddr | Multiaddr[], options: IsDialableOptions = {}): Promise<boolean> {\n    if (!Array.isArray(multiaddr)) {\n      multiaddr = [multiaddr]\n    }\n\n    try {\n      const addresses = await this.calculateMultiaddrs(undefined, new Set(multiaddr.map(ma => ma.toString())), options)\n\n      if (options.runOnLimitedConnection === false) {\n        // return true if any resolved multiaddrs are not relay addresses\n        return addresses.find(addr => {\n          return !Circuit.matches(addr.multiaddr)\n        }) != null\n      }\n\n      return true\n    } catch (err) {\n      this.log.trace('error calculating if multiaddr(s) were dialable', err)\n    }\n\n    return false\n  }\n}\n", "import retry from 'retry';\nimport isNetworkError from 'is-network-error';\n\nexport class AbortError extends Error {\n\tconstructor(message) {\n\t\tsuper();\n\n\t\tif (message instanceof Error) {\n\t\t\tthis.originalError = message;\n\t\t\t({message} = message);\n\t\t} else {\n\t\t\tthis.originalError = new Error(message);\n\t\t\tthis.originalError.stack = this.stack;\n\t\t}\n\n\t\tthis.name = 'AbortError';\n\t\tthis.message = message;\n\t}\n}\n\nconst decorateErrorWithCounts = (error, attemptNumber, options) => {\n\t// Minus 1 from attemptNumber because the first attempt does not count as a retry\n\tconst retriesLeft = options.retries - (attemptNumber - 1);\n\n\terror.attemptNumber = attemptNumber;\n\terror.retriesLeft = retriesLeft;\n\treturn error;\n};\n\nexport default async function pRetry(input, options) {\n\treturn new Promise((resolve, reject) => {\n\t\toptions = {...options};\n\t\toptions.onFailedAttempt ??= () => {};\n\t\toptions.shouldRetry ??= () => true;\n\t\toptions.retries ??= 10;\n\n\t\tconst operation = retry.operation(options);\n\n\t\tconst abortHandler = () => {\n\t\t\toperation.stop();\n\t\t\treject(options.signal?.reason);\n\t\t};\n\n\t\tif (options.signal && !options.signal.aborted) {\n\t\t\toptions.signal.addEventListener('abort', abortHandler, {once: true});\n\t\t}\n\n\t\tconst cleanUp = () => {\n\t\t\toptions.signal?.removeEventListener('abort', abortHandler);\n\t\t\toperation.stop();\n\t\t};\n\n\t\toperation.attempt(async attemptNumber => {\n\t\t\ttry {\n\t\t\t\tconst result = await input(attemptNumber);\n\t\t\t\tcleanUp();\n\t\t\t\tresolve(result);\n\t\t\t} catch (error) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!(error instanceof Error)) {\n\t\t\t\t\t\tthrow new TypeError(`Non-error was thrown: \"${error}\". You should only throw errors.`);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (error instanceof AbortError) {\n\t\t\t\t\t\tthrow error.originalError;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (error instanceof TypeError && !isNetworkError(error)) {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\n\t\t\t\t\tdecorateErrorWithCounts(error, attemptNumber, options);\n\n\t\t\t\t\tif (!(await options.shouldRetry(error))) {\n\t\t\t\t\t\toperation.stop();\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\n\t\t\t\t\tawait options.onFailedAttempt(error);\n\n\t\t\t\t\tif (!operation.retry(error)) {\n\t\t\t\t\t\tthrow operation.mainError();\n\t\t\t\t\t}\n\t\t\t\t} catch (finalError) {\n\t\t\t\t\tdecorateErrorWithCounts(finalError, attemptNumber, options);\n\t\t\t\t\tcleanUp();\n\t\t\t\t\treject(finalError);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n", "const objectToString = Object.prototype.toString;\n\nconst isError = value => objectToString.call(value) === '[object Error]';\n\nconst errorMessages = new Set([\n\t'network error', // Chrome\n\t'Failed to fetch', // Chrome\n\t'NetworkError when attempting to fetch resource.', // Firefox\n\t'The Internet connection appears to be offline.', // Safari 16\n\t'Load failed', // Safari 17+\n\t'Network request failed', // `cross-fetch`\n\t'fetch failed', // Undici (Node.js)\n\t'terminated', // Undici (Node.js)\n]);\n\nexport default function isNetworkError(error) {\n\tconst isValid = error\n\t\t&& isError(error)\n\t\t&& error.name === 'TypeError'\n\t\t&& typeof error.message === 'string';\n\n\tif (!isValid) {\n\t\treturn false;\n\t}\n\n\t// We do an extra check for Safari 17+ as it has a very generic error message.\n\t// Network errors in Safari have no stack.\n\tif (error.message === 'Load failed') {\n\t\treturn error.stack === undefined;\n\t}\n\n\treturn errorMessages.has(error.message);\n}\n", "import { KEEP_ALIVE } from '@libp2p/interface'\nimport { PeerQueue } from '@libp2p/utils/peer-queue'\nimport pRetry from 'p-retry'\nimport { MAX_PARALLEL_RECONNECTS } from './constants.js'\nimport type { ComponentLogger, Libp2pEvents, Logger, Metrics, Peer, PeerId, PeerStore, Startable } from '@libp2p/interface'\nimport type { ConnectionManager } from '@libp2p/interface-internal'\nimport type { TypedEventTarget } from 'main-event'\n\nexport interface ReconnectQueueComponents {\n  connectionManager: ConnectionManager\n  events: TypedEventTarget<Libp2pEvents>\n  peerStore: PeerStore\n  logger: ComponentLogger\n  metrics?: Metrics\n}\n\nexport interface ReconnectQueueInit {\n  retries?: number\n  retryInterval?: number\n  backoffFactor?: number\n  maxParallelReconnects?: number\n}\n\n/**\n * When peers tagged with `KEEP_ALIVE` disconnect, this component attempts to\n * redial them\n */\nexport class ReconnectQueue implements Startable {\n  private readonly log: Logger\n  private readonly queue: PeerQueue\n  private started: boolean\n  private readonly peerStore: PeerStore\n  private readonly retries: number\n  private readonly retryInterval?: number\n  private readonly backoffFactor?: number\n  private readonly connectionManager: ConnectionManager\n  private readonly events: TypedEventTarget<Libp2pEvents>\n\n  constructor (components: ReconnectQueueComponents, init: ReconnectQueueInit = {}) {\n    this.log = components.logger.forComponent('libp2p:reconnect-queue')\n    this.peerStore = components.peerStore\n    this.connectionManager = components.connectionManager\n    this.queue = new PeerQueue({\n      concurrency: init.maxParallelReconnects ?? MAX_PARALLEL_RECONNECTS,\n      metricName: 'libp2p_reconnect_queue',\n      metrics: components.metrics\n    })\n    this.started = false\n    this.retries = init.retries ?? 5\n    this.backoffFactor = init.backoffFactor\n    this.retryInterval = init.retryInterval\n    this.events = components.events\n\n    components.events.addEventListener('peer:disconnect', (evt) => {\n      this.maybeReconnect(evt.detail)\n        .catch(err => {\n          this.log.error('failed to maybe reconnect to %p - %e', evt.detail, err)\n        })\n    })\n  }\n\n  private async maybeReconnect (peerId: PeerId): Promise<void> {\n    if (!this.started) {\n      return\n    }\n\n    const peer = await this.peerStore.get(peerId)\n\n    if (!hasKeepAliveTag(peer)) {\n      return\n    }\n\n    if (this.queue.has(peerId)) {\n      return\n    }\n\n    this.queue.add(async (options) => {\n      await pRetry(async (attempt) => {\n        if (!this.started) {\n          return\n        }\n\n        try {\n          await this.connectionManager.openConnection(peerId, {\n            signal: options?.signal\n          })\n        } catch (err) {\n          this.log('reconnecting to %p attempt %d of %d failed - %e', peerId, attempt, this.retries, err)\n          throw err\n        }\n      }, {\n        signal: options?.signal,\n        retries: this.retries,\n        factor: this.backoffFactor,\n        minTimeout: this.retryInterval\n      })\n    }, {\n      peerId\n    })\n      .catch(async err => {\n        this.log.error('failed to reconnect to %p - %e', peerId, err)\n\n        const tags: Record<string, undefined> = {}\n\n        ;[...peer.tags.keys()].forEach(key => {\n          if (key.startsWith(KEEP_ALIVE)) {\n            tags[key] = undefined\n          }\n        })\n\n        await this.peerStore.merge(peerId, {\n          tags\n        })\n\n        this.events.safeDispatchEvent('peer:reconnect-failure', {\n          detail: peerId\n        })\n      })\n      .catch(async err => {\n        this.log.error('failed to remove keep-alive tag from %p - %e', peerId, err)\n      })\n  }\n\n  start (): void {\n    this.started = true\n  }\n\n  async afterStart (): Promise<void> {\n    // re-connect to any peers with the KEEP_ALIVE tag\n    void Promise.resolve()\n      .then(async () => {\n        const keepAlivePeers: Peer[] = await this.peerStore.all({\n          filters: [\n            (peer) => hasKeepAliveTag(peer)\n          ]\n        })\n\n        await Promise.all(\n          keepAlivePeers.map(async peer => {\n            await this.connectionManager.openConnection(peer.id)\n              .catch(err => {\n                this.log.error(err)\n              })\n          })\n        )\n      })\n      .catch(err => {\n        this.log.error(err)\n      })\n  }\n\n  stop (): void {\n    this.started = false\n    this.queue.abort()\n  }\n}\n\nfunction hasKeepAliveTag (peer: Peer): boolean {\n  for (const tag of peer.tags.keys()) {\n    if (tag.startsWith(KEEP_ALIVE)) {\n      return true\n    }\n  }\n\n  return false\n}\n", "import { ConnectionClosedError, InvalidMultiaddrError, InvalidParametersError, InvalidPeerIdError, NotStartedError, start, stop } from '@libp2p/interface'\nimport { PeerMap } from '@libp2p/peer-collections'\nimport { RateLimiter } from '@libp2p/utils/rate-limiter'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { CustomProgressEvent } from 'progress-events'\nimport { getPeerAddress } from '../get-peer.js'\nimport { ConnectionPruner } from './connection-pruner.js'\nimport { DIAL_TIMEOUT, INBOUND_CONNECTION_THRESHOLD, MAX_CONNECTIONS, MAX_DIAL_QUEUE_LENGTH, MAX_INCOMING_PENDING_CONNECTIONS, MAX_PARALLEL_DIALS, MAX_PEER_ADDRS_TO_DIAL } from './constants.js'\nimport { DialQueue } from './dial-queue.js'\nimport { ReconnectQueue } from './reconnect-queue.js'\nimport { dnsaddrResolver } from './resolvers/index.ts'\nimport { multiaddrToIpNet } from './utils.js'\nimport type { IpNet } from '@chainsafe/netmask'\nimport type { PendingDial, AddressSorter, Libp2pEvents, AbortOptions, ComponentLogger, Logger, Connection, MultiaddrConnection, ConnectionGater, Metrics, PeerId, PeerStore, Startable, PendingDialStatus, PeerRouting, IsDialableOptions, MultiaddrResolver } from '@libp2p/interface'\nimport type { ConnectionManager, OpenConnectionOptions, TransportManager } from '@libp2p/interface-internal'\nimport type { JobStatus } from '@libp2p/utils/queue'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { TypedEventTarget } from 'main-event'\n\nexport const DEFAULT_DIAL_PRIORITY = 50\n\nexport interface ConnectionManagerInit {\n  /**\n   * The maximum number of connections libp2p is willing to have before it\n   * starts pruning connections to reduce resource usage.\n   *\n   * @default 300/100\n   */\n  maxConnections?: number\n\n  /**\n   * Sort the known addresses of a peer before trying to dial, By default public\n   * addresses will be dialled before private (e.g. loopback or LAN) addresses.\n   */\n  addressSorter?: AddressSorter\n\n  /**\n   * The maximum number of dials across all peers to execute in parallel.\n   *\n   * @default 100/50\n   */\n  maxParallelDials?: number\n\n  /**\n   * The maximum size the dial queue is allowed to grow to. Promises returned\n   * when dialing peers after this limit is reached will not resolve until the\n   * queue size falls beneath this size.\n   *\n   * @default 500\n   */\n  maxDialQueueLength?: number\n\n  /**\n   * Maximum number of addresses allowed for a given peer before giving up\n   *\n   * @default 25\n   */\n  maxPeerAddrsToDial?: number\n\n  /**\n   * How long a dial attempt is allowed to take, including DNS resolution\n   * of the multiaddr, opening a socket and upgrading it to a Connection.\n   *\n   * @default 10_000\n   */\n  dialTimeout?: number\n\n  /**\n   * When a new incoming connection is opened, the upgrade process (e.g.\n   * protect, encrypt, multiplex etc) must complete within this number of ms.\n   *\n   * @default 10_000\n   */\n  inboundUpgradeTimeout?: number\n\n  /**\n   * When a new outbound connection is opened, the upgrade process (e.g.\n   * protect, encrypt, multiplex etc) must complete within this number of ms.\n   *\n   * Does not apply if an abort signal is passed to the `.dial` method.\n   *\n   * @deprecated This is handled by `dialTimeout`\n   */\n  outboundUpgradeTimeout?: number\n\n  /**\n   * Protocol negotiation must complete within this number of ms\n   *\n   * @default 2000\n   * @deprecated use outboundStreamProtocolNegotiationTimeout or inboundStreamProtocolNegotiationTimeout instead\n   */\n  protocolNegotiationTimeout?: number\n\n  /**\n   * Outbound protocol negotiation must complete within this number of ms.\n   *\n   * Does not apply if an abort signal is passed to the `.dial` or\n   * `.dialProtocol` method of the `ConnectionManager` or the `openStream`\n   * method of the `Connection`.\n   *\n   * @default 10_000\n   */\n  outboundStreamProtocolNegotiationTimeout?: number\n\n  /**\n   * Inbound protocol negotiation must complete within this number of ms\n   *\n   * @default 10_000\n   */\n  inboundStreamProtocolNegotiationTimeout?: number\n\n  /**\n   * Multiaddr resolvers to use when dialling\n   */\n  resolvers?: Record<string, MultiaddrResolver>\n\n  /**\n   * A list of multiaddrs that will always be allowed (except if they are in the\n   * deny list) to open connections to this node even if we've reached\n   * maxConnections\n   */\n  allow?: string[]\n\n  /**\n   * A list of multiaddrs that will never be allowed to open connections to\n   * this node under any circumstances\n   */\n  deny?: string[]\n\n  /**\n   * If more than this many connections are opened per second by a single\n   * host, reject subsequent connections.\n   *\n   * @default 5\n   */\n  inboundConnectionThreshold?: number\n\n  /**\n   * The maximum number of parallel incoming connections allowed that have yet\n   * to complete the connection upgrade - e.g. choosing connection encryption,\n   * muxer, etc.\n   *\n   * @default 10\n   */\n  maxIncomingPendingConnections?: number\n\n  /**\n   * When a peer tagged with `KEEP_ALIVE` disconnects, attempt to redial them\n   * this many times.\n   *\n   * @default 5\n   */\n  reconnectRetries?: number\n\n  /**\n   * When a peer tagged with `KEEP_ALIVE` disconnects, wait this long between\n   * each retry. Note this will be multiplied by `reconnectFactor` to create an\n   * increasing retry backoff.\n   *\n   * @default 1000\n   */\n  reconnectRetryInterval?: number\n\n  /**\n   * When a peer tagged with `KEEP_ALIVE` disconnects, apply this multiplication\n   * factor to the time interval between each retry.\n   *\n   * @default 2\n   */\n  reconnectBackoffFactor?: number\n\n  /**\n   * When a peers tagged with `KEEP_ALIVE` disconnect, reconnect to this many at\n   * once.\n   *\n   * @default 5\n   */\n  maxParallelReconnects?: number\n}\n\nconst defaultOptions = {\n  maxConnections: MAX_CONNECTIONS,\n  inboundConnectionThreshold: INBOUND_CONNECTION_THRESHOLD,\n  maxIncomingPendingConnections: MAX_INCOMING_PENDING_CONNECTIONS\n}\n\nexport interface DefaultConnectionManagerComponents {\n  peerId: PeerId\n  metrics?: Metrics\n  peerStore: PeerStore\n  peerRouting: PeerRouting\n  transportManager: TransportManager\n  connectionGater: ConnectionGater\n  events: TypedEventTarget<Libp2pEvents>\n  logger: ComponentLogger\n}\n\n/**\n * Responsible for managing known connections.\n */\nexport class DefaultConnectionManager implements ConnectionManager, Startable {\n  private started: boolean\n  private readonly connections: PeerMap<Connection[]>\n  private readonly allow: IpNet[]\n  private readonly deny: IpNet[]\n  private readonly maxIncomingPendingConnections: number\n  private incomingPendingConnections: number\n  private outboundPendingConnections: number\n  private maxConnections: number\n\n  public readonly dialQueue: DialQueue\n  public readonly reconnectQueue: ReconnectQueue\n  public readonly connectionPruner: ConnectionPruner\n  private readonly inboundConnectionRateLimiter: RateLimiter\n  private readonly peerStore: PeerStore\n  private readonly metrics?: Metrics\n  private readonly events: TypedEventTarget<Libp2pEvents>\n  private readonly log: Logger\n  private readonly peerId: PeerId\n\n  constructor (components: DefaultConnectionManagerComponents, init: ConnectionManagerInit = {}) {\n    this.maxConnections = init.maxConnections ?? defaultOptions.maxConnections\n\n    if (this.maxConnections < 1) {\n      throw new InvalidParametersError('Connection Manager maxConnections must be greater than 0')\n    }\n\n    /**\n     * Map of connections per peer\n     */\n    this.connections = new PeerMap()\n\n    this.started = false\n    this.peerId = components.peerId\n    this.peerStore = components.peerStore\n    this.metrics = components.metrics\n    this.events = components.events\n    this.log = components.logger.forComponent('libp2p:connection-manager')\n\n    this.onConnect = this.onConnect.bind(this)\n    this.onDisconnect = this.onDisconnect.bind(this)\n\n    // allow/deny lists\n    this.allow = (init.allow ?? []).map(str => multiaddrToIpNet(str))\n    this.deny = (init.deny ?? []).map(str => multiaddrToIpNet(str))\n\n    this.incomingPendingConnections = 0\n    this.maxIncomingPendingConnections = init.maxIncomingPendingConnections ?? defaultOptions.maxIncomingPendingConnections\n    this.outboundPendingConnections = 0\n\n    // controls individual peers trying to dial us too quickly\n    this.inboundConnectionRateLimiter = new RateLimiter({\n      points: init.inboundConnectionThreshold ?? defaultOptions.inboundConnectionThreshold,\n      duration: 1\n    })\n\n    // controls what happens when we have too many connections\n    this.connectionPruner = new ConnectionPruner({\n      connectionManager: this,\n      peerStore: components.peerStore,\n      events: components.events,\n      logger: components.logger\n    }, {\n      allow: init.allow?.map(a => multiaddr(a))\n    })\n\n    this.dialQueue = new DialQueue(components, {\n      addressSorter: init.addressSorter,\n      maxParallelDials: init.maxParallelDials ?? MAX_PARALLEL_DIALS,\n      maxDialQueueLength: init.maxDialQueueLength ?? MAX_DIAL_QUEUE_LENGTH,\n      maxPeerAddrsToDial: init.maxPeerAddrsToDial ?? MAX_PEER_ADDRS_TO_DIAL,\n      dialTimeout: init.dialTimeout ?? DIAL_TIMEOUT,\n      resolvers: init.resolvers ?? {\n        dnsaddr: dnsaddrResolver\n      },\n      connections: this.connections\n    })\n\n    this.reconnectQueue = new ReconnectQueue({\n      events: components.events,\n      peerStore: components.peerStore,\n      logger: components.logger,\n      connectionManager: this\n    }, {\n      retries: init.reconnectRetries,\n      retryInterval: init.reconnectRetryInterval,\n      backoffFactor: init.reconnectBackoffFactor,\n      maxParallelReconnects: init.maxParallelReconnects\n    })\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/connection-manager'\n\n  /**\n   * Starts the Connection Manager. If Metrics are not enabled on libp2p\n   * only event loop and connection limits will be monitored.\n   */\n  async start (): Promise<void> {\n    // track inbound/outbound connections\n    this.metrics?.registerMetricGroup('libp2p_connection_manager_connections', {\n      calculate: () => {\n        const metric = {\n          inbound: 0,\n          'inbound pending': this.incomingPendingConnections,\n          outbound: 0,\n          'outbound pending': this.outboundPendingConnections\n        }\n\n        for (const conns of this.connections.values()) {\n          for (const conn of conns) {\n            metric[conn.direction]++\n          }\n        }\n\n        return metric\n      }\n    })\n\n    // track total number of streams per protocol\n    this.metrics?.registerMetricGroup('libp2p_protocol_streams_total', {\n      label: 'protocol',\n      calculate: () => {\n        const metric: Record<string, number> = {}\n\n        for (const conns of this.connections.values()) {\n          for (const conn of conns) {\n            for (const stream of conn.streams) {\n              const key = `${stream.direction} ${stream.protocol ?? 'unnegotiated'}`\n\n              metric[key] = (metric[key] ?? 0) + 1\n            }\n          }\n        }\n\n        return metric\n      }\n    })\n\n    // track 90th percentile of streams per protocol\n    this.metrics?.registerMetricGroup('libp2p_connection_manager_protocol_streams_per_connection_90th_percentile', {\n      label: 'protocol',\n      calculate: () => {\n        const allStreams: Record<string, number[]> = {}\n\n        for (const conns of this.connections.values()) {\n          for (const conn of conns) {\n            const streams: Record<string, number> = {}\n\n            for (const stream of conn.streams) {\n              const key = `${stream.direction} ${stream.protocol ?? 'unnegotiated'}`\n\n              streams[key] = (streams[key] ?? 0) + 1\n            }\n\n            for (const [protocol, count] of Object.entries(streams)) {\n              allStreams[protocol] = allStreams[protocol] ?? []\n              allStreams[protocol].push(count)\n            }\n          }\n        }\n\n        const metric: Record<string, number> = {}\n\n        for (let [protocol, counts] of Object.entries(allStreams)) {\n          counts = counts.sort((a, b) => a - b)\n\n          const index = Math.floor(counts.length * 0.9)\n          metric[protocol] = counts[index]\n        }\n\n        return metric\n      }\n    })\n\n    this.events.addEventListener('connection:open', this.onConnect)\n    this.events.addEventListener('connection:close', this.onDisconnect)\n\n    await start(\n      this.dialQueue,\n      this.reconnectQueue,\n      this.connectionPruner\n    )\n\n    this.started = true\n    this.log('started')\n  }\n\n  /**\n   * Stops the Connection Manager\n   */\n  async stop (): Promise<void> {\n    this.events.removeEventListener('connection:open', this.onConnect)\n    this.events.removeEventListener('connection:close', this.onDisconnect)\n\n    await stop(\n      this.reconnectQueue,\n      this.dialQueue,\n      this.connectionPruner\n    )\n\n    // Close all connections we're tracking\n    const tasks: Array<Promise<void>> = []\n    for (const connectionList of this.connections.values()) {\n      for (const connection of connectionList) {\n        tasks.push((async () => {\n          try {\n            await connection.close()\n          } catch (err) {\n            this.log.error(err)\n          }\n        })())\n      }\n    }\n\n    this.log('closing %d connections', tasks.length)\n    await Promise.all(tasks)\n    this.connections.clear()\n\n    this.log('stopped')\n  }\n\n  getMaxConnections (): number {\n    return this.maxConnections\n  }\n\n  setMaxConnections (maxConnections: number): void {\n    if (this.maxConnections < 1) {\n      throw new InvalidParametersError('Connection Manager maxConnections must be greater than 0')\n    }\n\n    let needsPrune = false\n\n    if (maxConnections < this.maxConnections) {\n      needsPrune = true\n    }\n\n    this.maxConnections = maxConnections\n\n    if (needsPrune) {\n      this.connectionPruner.maybePruneConnections()\n    }\n  }\n\n  onConnect (evt: CustomEvent<Connection>): void {\n    void this._onConnect(evt).catch(err => {\n      this.log.error(err)\n    })\n  }\n\n  /**\n   * Tracks the incoming connection and check the connection limit\n   */\n  async _onConnect (evt: CustomEvent<Connection>): Promise<void> {\n    const { detail: connection } = evt\n\n    if (!this.started) {\n      // This can happen when we are in the process of shutting down the node\n      await connection.close()\n      return\n    }\n\n    if (connection.status !== 'open') {\n      // this can happen when the remote closes the connection immediately after\n      // opening\n      return\n    }\n\n    const peerId = connection.remotePeer\n    const isNewPeer = !this.connections.has(peerId)\n    const storedConns = this.connections.get(peerId) ?? []\n    storedConns.push(connection)\n\n    this.connections.set(peerId, storedConns)\n\n    // only need to store RSA public keys, all other types are embedded in the peer id\n    if (peerId.publicKey != null && peerId.type === 'RSA') {\n      await this.peerStore.patch(peerId, {\n        publicKey: peerId.publicKey\n      })\n    }\n\n    if (isNewPeer) {\n      this.events.safeDispatchEvent('peer:connect', { detail: connection.remotePeer })\n    }\n  }\n\n  /**\n   * Removes the connection from tracking\n   */\n  onDisconnect (evt: CustomEvent<Connection>): void {\n    const { detail: connection } = evt\n    const peerId = connection.remotePeer\n    const peerConns = this.connections.get(peerId) ?? []\n\n    // remove closed connection\n    const filteredPeerConns = peerConns.filter(conn => conn.id !== connection.id)\n\n    // update peer connections\n    this.connections.set(peerId, filteredPeerConns)\n\n    if (filteredPeerConns.length === 0) {\n      // trigger disconnect event if no connections remain\n      this.log('onDisconnect remove all connections for peer %p', peerId)\n      this.connections.delete(peerId)\n\n      // broadcast disconnect event\n      this.events.safeDispatchEvent('peer:disconnect', { detail: connection.remotePeer })\n    }\n  }\n\n  getConnections (peerId?: PeerId): Connection[] {\n    if (peerId != null) {\n      return this.connections.get(peerId) ?? []\n    }\n\n    let conns: Connection[] = []\n\n    for (const c of this.connections.values()) {\n      conns = conns.concat(c)\n    }\n\n    return conns\n  }\n\n  getConnectionsMap (): PeerMap<Connection[]> {\n    return this.connections\n  }\n\n  async openConnection (peerIdOrMultiaddr: PeerId | Multiaddr | Multiaddr[], options: OpenConnectionOptions = {}): Promise<Connection> {\n    if (!this.started) {\n      throw new NotStartedError('Not started')\n    }\n\n    this.outboundPendingConnections++\n\n    try {\n      options.signal?.throwIfAborted()\n\n      const { peerId } = getPeerAddress(peerIdOrMultiaddr)\n\n      if (this.peerId.equals(peerId)) {\n        throw new InvalidPeerIdError('Can not dial self')\n      }\n\n      if (peerId != null && options.force !== true) {\n        this.log('dial %p', peerId)\n        const existingConnection = this.getConnections(peerId)\n          .find(conn => conn.limits == null)\n\n        if (existingConnection != null) {\n          this.log('had an existing non-limited connection to %p', peerId)\n\n          options.onProgress?.(new CustomProgressEvent('dial-queue:already-connected'))\n          return existingConnection\n        }\n      }\n\n      const connection = await this.dialQueue.dial(peerIdOrMultiaddr, {\n        ...options,\n        priority: options.priority ?? DEFAULT_DIAL_PRIORITY\n      })\n\n      if (connection.status !== 'open') {\n        throw new ConnectionClosedError('Remote closed connection during opening')\n      }\n\n      let peerConnections = this.connections.get(connection.remotePeer)\n\n      if (peerConnections == null) {\n        peerConnections = []\n        this.connections.set(connection.remotePeer, peerConnections)\n      }\n\n      // we get notified of connections via the Upgrader emitting \"connection\"\n      // events, double check we aren't already tracking this connection before\n      // storing it\n      let trackedConnection = false\n\n      for (const conn of peerConnections) {\n        if (conn.id === connection.id) {\n          trackedConnection = true\n        }\n\n        // make sure we don't already have a connection to this multiaddr\n        if (options.force !== true && conn.id !== connection.id && conn.remoteAddr.equals(connection.remoteAddr)) {\n          connection.abort(new InvalidMultiaddrError('Duplicate multiaddr connection'))\n\n          // return the existing connection\n          return conn\n        }\n      }\n\n      if (!trackedConnection) {\n        peerConnections.push(connection)\n      }\n\n      return connection\n    } finally {\n      this.outboundPendingConnections--\n    }\n  }\n\n  async closeConnections (peerId: PeerId, options: AbortOptions = {}): Promise<void> {\n    const connections = this.connections.get(peerId) ?? []\n\n    await Promise.all(\n      connections.map(async connection => {\n        try {\n          await connection.close(options)\n        } catch (err: any) {\n          connection.abort(err)\n        }\n      })\n    )\n  }\n\n  async acceptIncomingConnection (maConn: MultiaddrConnection): Promise<boolean> {\n    // check deny list\n    const denyConnection = this.deny.some(ma => {\n      return ma.contains(maConn.remoteAddr.nodeAddress().address)\n    })\n\n    if (denyConnection) {\n      this.log('connection from %a refused - connection remote address was in deny list', maConn.remoteAddr)\n      return false\n    }\n\n    // check allow list\n    const allowConnection = this.allow.some(ipNet => {\n      return ipNet.contains(maConn.remoteAddr.nodeAddress().address)\n    })\n\n    if (allowConnection) {\n      this.incomingPendingConnections++\n\n      return true\n    }\n\n    // check pending connections\n    if (this.incomingPendingConnections === this.maxIncomingPendingConnections) {\n      this.log('connection from %a refused - incomingPendingConnections exceeded by host', maConn.remoteAddr)\n      return false\n    }\n\n    if (maConn.remoteAddr.isThinWaistAddress()) {\n      const host = maConn.remoteAddr.nodeAddress().address\n\n      try {\n        await this.inboundConnectionRateLimiter.consume(host, 1)\n      } catch {\n        this.log('connection from %a refused - inboundConnectionThreshold exceeded by host %s', maConn.remoteAddr, host)\n        return false\n      }\n    }\n\n    if (this.getConnections().length < this.maxConnections) {\n      this.incomingPendingConnections++\n\n      return true\n    }\n\n    this.log('connection from %a refused - maxConnections exceeded', maConn.remoteAddr)\n    return false\n  }\n\n  afterUpgradeInbound (): void {\n    this.incomingPendingConnections--\n  }\n\n  getDialQueue (): PendingDial[] {\n    const statusMap: Record<JobStatus, PendingDialStatus> = {\n      queued: 'queued',\n      running: 'active',\n      errored: 'error',\n      complete: 'success'\n    }\n\n    return this.dialQueue.queue.queue.map(job => {\n      return {\n        id: job.id,\n        status: statusMap[job.status],\n        peerId: job.options.peerId,\n        multiaddrs: [...job.options.multiaddrs].map(ma => multiaddr(ma))\n      }\n    })\n  }\n\n  async isDialable (multiaddr: Multiaddr | Multiaddr[], options: IsDialableOptions = {}): Promise<boolean> {\n    return this.dialQueue.isDialable(multiaddr, options)\n  }\n}\n", "/**\n * Implements exponential moving average. Ported from `moving-average`.\n *\n * @see https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average\n * @see https://www.npmjs.com/package/moving-average\n */\nexport class MovingAverage {\n  public movingAverage: number\n  public variance: number\n  public deviation: number\n  public forecast: number\n  private readonly timeSpan: number\n  private previousTime?: number\n\n  constructor (timeSpan: number) {\n    this.timeSpan = timeSpan\n    this.movingAverage = 0\n    this.variance = 0\n    this.deviation = 0\n    this.forecast = 0\n  }\n\n  alpha (t: number, pt: number): number {\n    return 1 - (Math.exp(-(t - pt) / this.timeSpan))\n  }\n\n  push (value: number, time: number = Date.now()): void {\n    if (this.previousTime != null) {\n      // calculate moving average\n      const a = this.alpha(time, this.previousTime)\n      const diff = value - this.movingAverage\n      const incr = a * diff\n      this.movingAverage = a * value + (1 - a) * this.movingAverage\n      // calculate variance & deviation\n      this.variance = (1 - a) * (this.variance + diff * incr)\n      this.deviation = Math.sqrt(this.variance)\n      // calculate forecast\n      this.forecast = this.movingAverage + a * diff\n    } else {\n      this.movingAverage = value\n    }\n\n    this.previousTime = time\n  }\n}\n", "import { anySignal } from 'any-signal'\nimport { setMaxListeners } from 'main-event'\nimport { MovingAverage } from './moving-average.js'\nimport type { MetricGroup, Metrics } from '@libp2p/interface'\nimport type { ClearableSignal } from 'any-signal'\n\nexport const DEFAULT_TIMEOUT_MULTIPLIER = 1.2\nexport const DEFAULT_FAILURE_MULTIPLIER = 2\nexport const DEFAULT_MIN_TIMEOUT = 5_000\nexport const DEFAULT_MAX_TIMEOUT = 60_000\nexport const DEFAULT_INTERVAL = 5_000\n\nexport interface AdaptiveTimeoutSignal extends ClearableSignal {\n  start: number\n  timeout: number\n}\n\nexport interface AdaptiveTimeoutInit {\n  metricName?: string\n  metrics?: Metrics\n  interval?: number\n  timeoutMultiplier?: number\n  failureMultiplier?: number\n  minTimeout?: number\n  maxTimeout?: number\n}\n\nexport interface GetTimeoutSignalOptions {\n  timeoutFactor?: number\n  signal?: AbortSignal\n}\n\nexport class AdaptiveTimeout {\n  private readonly success: MovingAverage\n  private readonly failure: MovingAverage\n  private readonly next: MovingAverage\n  private readonly metric?: MetricGroup\n  private readonly timeoutMultiplier: number\n  private readonly failureMultiplier: number\n  private readonly minTimeout: number\n  private readonly maxTimeout: number\n\n  constructor (init: AdaptiveTimeoutInit = {}) {\n    const interval = init.interval ?? DEFAULT_INTERVAL\n    this.success = new MovingAverage(interval)\n    this.failure = new MovingAverage(interval)\n    this.next = new MovingAverage(interval)\n    this.failureMultiplier = init.failureMultiplier ?? DEFAULT_FAILURE_MULTIPLIER\n    this.timeoutMultiplier = init.timeoutMultiplier ?? DEFAULT_TIMEOUT_MULTIPLIER\n    this.minTimeout = init.minTimeout ?? DEFAULT_MIN_TIMEOUT\n    this.maxTimeout = init.maxTimeout ?? DEFAULT_MAX_TIMEOUT\n\n    if (init.metricName != null) {\n      this.metric = init.metrics?.registerMetricGroup(init.metricName)\n    }\n  }\n\n  getTimeoutSignal (options: GetTimeoutSignalOptions = {}): AdaptiveTimeoutSignal {\n    // calculate timeout for individual peers based on moving average of\n    // previous successful requests\n    let timeout = Math.round(this.next.movingAverage * (options.timeoutFactor ?? this.timeoutMultiplier))\n\n    if (timeout < this.minTimeout) {\n      timeout = this.minTimeout\n    }\n\n    if (timeout > this.maxTimeout) {\n      timeout = this.maxTimeout\n    }\n\n    const sendTimeout = AbortSignal.timeout(timeout)\n    const timeoutSignal = anySignal([options.signal, sendTimeout]) as AdaptiveTimeoutSignal\n    setMaxListeners(Infinity, timeoutSignal, sendTimeout)\n\n    timeoutSignal.start = Date.now()\n    timeoutSignal.timeout = timeout\n\n    return timeoutSignal\n  }\n\n  cleanUp (signal: AdaptiveTimeoutSignal): void {\n    const time = Date.now() - signal.start\n\n    if (signal.aborted) {\n      this.failure.push(time)\n      this.next.push(time * this.failureMultiplier)\n      this.metric?.update({\n        failureMovingAverage: this.failure.movingAverage,\n        failureDeviation: this.failure.deviation,\n        failureForecast: this.failure.forecast,\n        failureVariance: this.failure.variance,\n        failure: time\n      })\n    } else {\n      this.success.push(time)\n      this.next.push(time)\n      this.metric?.update({\n        successMovingAverage: this.success.movingAverage,\n        successDeviation: this.success.deviation,\n        successForecast: this.success.forecast,\n        successVariance: this.success.variance,\n        success: time\n      })\n    }\n  }\n}\n", "/**\n * The incoming stream ended before the expected number of bytes were read\n */\nexport class UnexpectedEOFError extends Error {\n  name = 'UnexpectedEOFError'\n  code = 'ERR_UNEXPECTED_EOF'\n}\n", "/**\n * @packageDocumentation\n *\n * This module makes it easy to send and receive bytes over streams.\n *\n * @example\n *\n * ```typescript\n * import { byteStream } from 'it-byte-stream'\n *\n * const stream = byteStream(duplex)\n *\n * // read the next chunk\n * const bytes = await stream.read()\n *\n * // read the next five bytes\n * const fiveBytes = await stream.read(5)\n *\n * // write bytes into the stream\n * await stream.write(Uint8Array.from([0, 1, 2, 3, 4]))\n * ```\n */\n\nimport { queuelessPushable } from 'it-queueless-pushable'\nimport { raceSignal } from 'race-signal'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { UnexpectedEOFError } from './errors.js'\nimport type { AbortOptions } from 'abort-error'\nimport type { Duplex } from 'it-stream-types'\n\nexport interface ReadOptions extends AbortOptions {\n  bytes: number\n}\n\nexport interface ByteStream <Stream = unknown> {\n  /**\n   * Read bytes from the stream.\n   *\n   * If a required number of bytes is passed as an option, this will wait for\n   * the underlying stream to supply that number of bytes, throwing an\n   * `UnexpectedEOFError` if the stream closes before this happens.\n   *\n   * If no required number of bytes is passed, this will return `null` if the\n   * underlying stream closes before supplying any bytes.\n   */\n  read(options: ReadOptions): Promise<Uint8ArrayList>\n  read(options?: AbortOptions): Promise<Uint8ArrayList | null>\n\n  /**\n   * Write the passed bytes to the stream\n   */\n  write(input: Uint8Array | Uint8ArrayList, options?: AbortOptions): Promise<void>\n\n  /**\n   * Returns the underlying stream\n   */\n  unwrap(): Stream\n}\n\nexport interface ByteStreamOpts {\n  /**\n   * After the stream is unwrapped, any bytes that have been read from the\n   * incoming stream will be yielded in-order as `Uint8Array`(s).\n   *\n   * To yield a single `Uint8ArrayList` with all unread bytes instead, pass\n   * `false` here.\n   */\n  yieldBytes?: boolean\n}\n\nexport function byteStream <Stream extends Duplex<any, any, any>> (duplex: Stream, opts?: ByteStreamOpts): ByteStream<Stream> {\n  const write = queuelessPushable()\n\n  duplex.sink(write).catch(async (err: Error) => {\n    await write.end(err)\n  })\n\n  duplex.sink = async (source: any) => {\n    for await (const buf of source) {\n      await write.push(buf)\n    }\n\n    await write.end()\n  }\n\n  let source: AsyncGenerator<any> = duplex.source\n\n  if (duplex.source[Symbol.iterator] != null) {\n    source = duplex.source[Symbol.iterator]()\n  } else if (duplex.source[Symbol.asyncIterator] != null) {\n    source = duplex.source[Symbol.asyncIterator]()\n  }\n\n  const readBuffer = new Uint8ArrayList()\n\n  const W: ByteStream<Stream> = {\n    read: async (options?: ReadOptions) => {\n      options?.signal?.throwIfAborted()\n\n      if (options?.bytes == null) {\n        // just read whatever arrives\n        const { done, value } = await raceSignal(source.next(), options?.signal)\n\n        if (done === true) {\n          return null\n        }\n\n        return value\n      }\n\n      while (readBuffer.byteLength < options.bytes) {\n        const { value, done } = await raceSignal(source.next(), options?.signal)\n\n        if (done === true) {\n          throw new UnexpectedEOFError('unexpected end of input')\n        }\n\n        readBuffer.append(value)\n      }\n\n      const buf = readBuffer.sublist(0, options.bytes)\n      readBuffer.consume(options.bytes)\n\n      return buf\n    },\n    write: async (data, options?: AbortOptions) => {\n      options?.signal?.throwIfAborted()\n\n      // just write\n      if (data instanceof Uint8Array) {\n        await write.push(data, options)\n      } else {\n        await write.push(data.subarray(), options)\n      }\n    },\n    unwrap: () => {\n      if (readBuffer.byteLength > 0) {\n        const originalStream = duplex.source\n        duplex.source = (async function * () {\n          if (opts?.yieldBytes === false) {\n            yield readBuffer\n          } else {\n            yield * readBuffer\n          }\n\n          yield * originalStream\n        }())\n      }\n\n      return duplex\n    }\n  }\n\n  return W\n}\n", "import { randomBytes } from '@libp2p/crypto'\nimport { serviceCapabilities } from '@libp2p/interface'\nimport { AdaptiveTimeout } from '@libp2p/utils/adaptive-timeout'\nimport { byteStream } from 'it-byte-stream'\nimport { setMaxListeners } from 'main-event'\nimport type { ComponentLogger, Logger, Metrics, Startable } from '@libp2p/interface'\nimport type { ConnectionManager } from '@libp2p/interface-internal'\nimport type { AdaptiveTimeoutInit } from '@libp2p/utils/adaptive-timeout'\n\nconst DEFAULT_PING_INTERVAL_MS = 10000\nconst PROTOCOL_VERSION = '1.0.0'\nconst PROTOCOL_NAME = 'ping'\nconst PROTOCOL_PREFIX = 'ipfs'\nconst PING_LENGTH = 32\nconst DEFAULT_ABORT_CONNECTION_ON_PING_FAILURE = true\n\nexport interface ConnectionMonitorInit {\n  /**\n   * Whether the connection monitor is enabled\n   *\n   * @default true\n   */\n  enabled?: boolean\n\n  /**\n   * How often to ping remote peers in ms\n   *\n   * @default 10000\n   */\n  pingInterval?: number\n\n  /**\n   * Timeout settings for how long the ping is allowed to take before the\n   * connection will be judged inactive and aborted.\n   *\n   * The timeout is adaptive to cope with slower networks or nodes that\n   * have changing network characteristics, such as mobile.\n   */\n  pingTimeout?: Omit<AdaptiveTimeoutInit, 'metricsName' | 'metrics'>\n\n  /**\n   * If true, any connection that fails the ping will be aborted\n   *\n   * @default true\n   */\n  abortConnectionOnPingFailure?: boolean\n\n  /**\n   * Override the ping protocol prefix\n   *\n   * @default 'ipfs'\n   */\n  protocolPrefix?: string\n}\n\nexport interface ConnectionMonitorComponents {\n  logger: ComponentLogger\n  connectionManager: ConnectionManager\n  metrics?: Metrics\n}\n\nexport class ConnectionMonitor implements Startable {\n  private readonly protocol: string\n  private readonly components: ConnectionMonitorComponents\n  private readonly log: Logger\n  private heartbeatInterval?: ReturnType<typeof setInterval>\n  private readonly pingIntervalMs: number\n  private abortController?: AbortController\n  private readonly timeout: AdaptiveTimeout\n  private readonly abortConnectionOnPingFailure: boolean\n\n  constructor (components: ConnectionMonitorComponents, init: ConnectionMonitorInit = {}) {\n    this.components = components\n    this.protocol = `/${init.protocolPrefix ?? PROTOCOL_PREFIX}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`\n\n    this.log = components.logger.forComponent('libp2p:connection-monitor')\n    this.pingIntervalMs = init.pingInterval ?? DEFAULT_PING_INTERVAL_MS\n    this.abortConnectionOnPingFailure = init.abortConnectionOnPingFailure ?? DEFAULT_ABORT_CONNECTION_ON_PING_FAILURE\n    this.timeout = new AdaptiveTimeout({\n      ...(init.pingTimeout ?? {}),\n      metrics: components.metrics,\n      metricName: 'libp2p_connection_monitor_ping_time_milliseconds'\n    })\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/connection-monitor'\n\n  readonly [serviceCapabilities]: string[] = [\n    '@libp2p/connection-monitor'\n  ]\n\n  start (): void {\n    this.abortController = new AbortController()\n    setMaxListeners(Infinity, this.abortController.signal)\n\n    this.heartbeatInterval = setInterval(() => {\n      this.components.connectionManager.getConnections().forEach(conn => {\n        Promise.resolve().then(async () => {\n          let start = Date.now()\n          try {\n            const signal = this.timeout.getTimeoutSignal({\n              signal: this.abortController?.signal\n            })\n            const stream = await conn.newStream(this.protocol, {\n              signal,\n              runOnLimitedConnection: true\n            })\n            const bs = byteStream(stream)\n            start = Date.now()\n\n            await Promise.all([\n              bs.write(randomBytes(PING_LENGTH), {\n                signal\n              }),\n              bs.read({\n                bytes: PING_LENGTH,\n                signal\n              })\n            ])\n\n            conn.rtt = Date.now() - start\n\n            await bs.unwrap().close({\n              signal\n            })\n          } catch (err: any) {\n            if (err.name !== 'UnsupportedProtocolError') {\n              throw err\n            }\n\n            // protocol was unsupported, but that's ok as it means the remote\n            // peer was still alive. We ran multistream-select which means two\n            // round trips (e.g. 1x for the mss header, then another for the\n            // protocol) so divide the time it took by two\n            conn.rtt = (Date.now() - start) / 2\n          }\n        })\n          .catch(err => {\n            this.log.error('error during heartbeat', err)\n\n            if (this.abortConnectionOnPingFailure) {\n              this.log.error('aborting connection due to ping failure')\n              conn.abort(err)\n            } else {\n              this.log('connection ping failed, but not aborting due to abortConnectionOnPingFailure flag')\n            }\n          })\n      })\n    }, this.pingIntervalMs)\n  }\n\n  stop (): void {\n    this.abortController?.abort()\n\n    if (this.heartbeatInterval != null) {\n      clearInterval(this.heartbeatInterval)\n    }\n  }\n}\n", "import { NotStartedError } from '@libp2p/interface'\nimport { PeerSet } from '@libp2p/peer-collections'\nimport merge from 'it-merge'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { NoContentRoutersError } from './errors.js'\nimport type { AbortOptions, ComponentLogger, ContentRouting, Metrics, PeerInfo, PeerRouting, PeerStore, RoutingOptions, Startable } from '@libp2p/interface'\nimport type { CID } from 'multiformats/cid'\n\nexport interface CompoundContentRoutingInit {\n  routers: ContentRouting[]\n}\n\nexport interface CompoundContentRoutingComponents {\n  peerStore: PeerStore\n  peerRouting: PeerRouting\n  logger: ComponentLogger\n  metrics?: Metrics\n}\n\nexport class CompoundContentRouting implements ContentRouting, Startable {\n  private readonly routers: ContentRouting[]\n  private started: boolean\n  private readonly components: CompoundContentRoutingComponents\n\n  constructor (components: CompoundContentRoutingComponents, init: CompoundContentRoutingInit) {\n    this.routers = init.routers ?? []\n    this.started = false\n    this.components = components\n\n    this.findProviders = components.metrics?.traceFunction('libp2p.contentRouting.findProviders', this.findProviders.bind(this), {\n      optionsIndex: 1,\n      getAttributesFromArgs: ([cid], attrs) => {\n        return {\n          ...attrs,\n          cid: cid.toString()\n        }\n      },\n      getAttributesFromYieldedValue: (value, attrs: { providers?: string[] }) => {\n        return {\n          ...attrs,\n          providers: [...(Array.isArray(attrs.providers) ? attrs.providers : []), value.id.toString()]\n        }\n      }\n    }) ?? this.findProviders\n    this.provide = components.metrics?.traceFunction('libp2p.contentRouting.provide', this.provide.bind(this), {\n      optionsIndex: 1,\n      getAttributesFromArgs: ([cid], attrs) => {\n        return {\n          ...attrs,\n          cid: cid.toString()\n        }\n      }\n    }) ?? this.provide\n    this.cancelReprovide = components.metrics?.traceFunction('libp2p.contentRouting.cancelReprovide', this.cancelReprovide.bind(this), {\n      optionsIndex: 1,\n      getAttributesFromArgs: ([cid], attrs) => {\n        return {\n          ...attrs,\n          cid: cid.toString()\n        }\n      }\n    }) ?? this.cancelReprovide\n    this.put = components.metrics?.traceFunction('libp2p.contentRouting.put', this.put.bind(this), {\n      optionsIndex: 2,\n      getAttributesFromArgs: ([key]) => {\n        return {\n          key: uint8ArrayToString(key, 'base36')\n        }\n      }\n    }) ?? this.put\n    this.get = components.metrics?.traceFunction('libp2p.contentRouting.get', this.get.bind(this), {\n      optionsIndex: 1,\n      getAttributesFromArgs: ([key]) => {\n        return {\n          key: uint8ArrayToString(key, 'base36')\n        }\n      }\n    }) ?? this.get\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/content-routing'\n\n  isStarted (): boolean {\n    return this.started\n  }\n\n  async start (): Promise<void> {\n    this.started = true\n  }\n\n  async stop (): Promise<void> {\n    this.started = false\n  }\n\n  /**\n   * Iterates over all content routers in parallel to find providers of the given key\n   */\n  async * findProviders (key: CID, options: RoutingOptions = {}): AsyncGenerator<PeerInfo> {\n    if (this.routers.length === 0) {\n      throw new NoContentRoutersError('No content routers available')\n    }\n\n    const self = this\n    const seen = new PeerSet()\n\n    for await (const peer of merge(\n      ...self.routers\n        .filter(router => router.findProviders instanceof Function)\n        .map(router => router.findProviders(key, options))\n    )) {\n      // the peer was yielded by a content router without multiaddrs and we\n      // failed to load them\n      if (peer == null) {\n        continue\n      }\n\n      // store the addresses for the peer if found\n      if (peer.multiaddrs.length > 0) {\n        await this.components.peerStore.merge(peer.id, {\n          multiaddrs: peer.multiaddrs\n        }, options)\n      }\n\n      // deduplicate peers\n      if (seen.has(peer.id)) {\n        continue\n      }\n\n      seen.add(peer.id)\n\n      yield peer\n    }\n  }\n\n  /**\n   * Iterates over all content routers in parallel to notify it is\n   * a provider of the given key\n   */\n  async provide (key: CID, options: AbortOptions = {}): Promise<void> {\n    if (this.routers.length === 0) {\n      throw new NoContentRoutersError('No content routers available')\n    }\n\n    await Promise.all(\n      this.routers\n        .filter(router => router.provide instanceof Function)\n        .map(async (router) => {\n          await router.provide(key, options)\n        }))\n  }\n\n  async cancelReprovide (key: CID, options: AbortOptions = {}): Promise<void> {\n    if (this.routers.length === 0) {\n      throw new NoContentRoutersError('No content routers available')\n    }\n\n    await Promise.all(\n      this.routers\n        .filter(router => router.cancelReprovide instanceof Function)\n        .map(async (router) => {\n          await router.cancelReprovide(key, options)\n        })\n    )\n  }\n\n  /**\n   * Store the given key/value pair in the available content routings\n   */\n  async put (key: Uint8Array, value: Uint8Array, options?: AbortOptions): Promise<void> {\n    if (!this.isStarted()) {\n      throw new NotStartedError()\n    }\n\n    await Promise.all(\n      this.routers\n        .filter(router => router.put instanceof Function)\n        .map(async (router) => {\n          await router.put(key, value, options)\n        })\n    )\n  }\n\n  /**\n   * Get the value to the given key.\n   * Times out after 1 minute by default.\n   */\n  async get (key: Uint8Array, options?: AbortOptions): Promise<Uint8Array> {\n    if (!this.isStarted()) {\n      throw new NotStartedError()\n    }\n\n    return Promise.any(\n      this.routers\n        .filter(router => router.get instanceof Function)\n        .map(async (router) => {\n          return router.get(key, options)\n        })\n    )\n  }\n}\n", "import { NotFoundError } from '@libp2p/interface'\nimport { createScalableCuckooFilter } from '@libp2p/utils/filters'\nimport merge from 'it-merge'\nimport parallel from 'it-parallel'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { NoPeerRoutersError, QueriedForSelfError } from './errors.js'\nimport type { Logger, Metrics, PeerId, PeerInfo, PeerRouting, PeerStore, RoutingOptions } from '@libp2p/interface'\nimport type { ComponentLogger } from '@libp2p/logger'\n\nexport interface PeerRoutingInit {\n  routers?: PeerRouting[]\n}\n\nexport interface DefaultPeerRoutingComponents {\n  peerId: PeerId\n  peerStore: PeerStore\n  logger: ComponentLogger\n  metrics?: Metrics\n}\n\nexport class DefaultPeerRouting implements PeerRouting {\n  private readonly log: Logger\n  private readonly peerId: PeerId\n  private readonly peerStore: PeerStore\n  private readonly routers: PeerRouting[]\n\n  constructor (components: DefaultPeerRoutingComponents, init: PeerRoutingInit = {}) {\n    this.log = components.logger.forComponent('libp2p:peer-routing')\n    this.peerId = components.peerId\n    this.peerStore = components.peerStore\n    this.routers = init.routers ?? []\n\n    this.findPeer = components.metrics?.traceFunction('libp2p.peerRouting.findPeer', this.findPeer.bind(this), {\n      optionsIndex: 1,\n      getAttributesFromArgs: ([peer], attrs) => {\n        return {\n          ...attrs,\n          peer: peer.toString()\n        }\n      }\n    }) ?? this.findPeer\n    this.getClosestPeers = components.metrics?.traceFunction('libp2p.peerRouting.getClosestPeers', this.getClosestPeers.bind(this), {\n      optionsIndex: 1,\n      getAttributesFromArgs: ([key], attrs) => {\n        return {\n          ...attrs,\n          key: uint8ArrayToString(key, 'base36')\n        }\n      },\n      getAttributesFromYieldedValue: (value, attrs: { peers?: string[] }) => {\n        return {\n          ...attrs,\n          peers: [...(Array.isArray(attrs.peers) ? attrs.peers : []), value.id.toString()]\n        }\n      }\n    }) ?? this.getClosestPeers\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/peer-routing'\n\n  /**\n   * Iterates over all peer routers in parallel to find the given peer\n   */\n  async findPeer (id: PeerId, options?: RoutingOptions): Promise<PeerInfo> {\n    if (this.routers.length === 0) {\n      throw new NoPeerRoutersError('No peer routers available')\n    }\n\n    if (id.toString() === this.peerId.toString()) {\n      throw new QueriedForSelfError('Should not try to find self')\n    }\n\n    const self = this\n    const source = merge(\n      ...this.routers\n        .filter(router => router.findPeer instanceof Function)\n        .map(router => (async function * () {\n          try {\n            yield await router.findPeer(id, options)\n          } catch (err) {\n            self.log.error(err)\n          }\n        })())\n    )\n\n    for await (const peer of source) {\n      if (peer == null) {\n        continue\n      }\n\n      // store the addresses for the peer if found\n      if (peer.multiaddrs.length > 0) {\n        await this.peerStore.merge(peer.id, {\n          multiaddrs: peer.multiaddrs\n        }, options)\n      }\n\n      return peer\n    }\n\n    throw new NotFoundError()\n  }\n\n  /**\n   * Attempt to find the closest peers on the network to the given key\n   */\n  async * getClosestPeers (key: Uint8Array, options: RoutingOptions = {}): AsyncGenerator<PeerInfo> {\n    if (this.routers.length === 0) {\n      throw new NoPeerRoutersError('No peer routers available')\n    }\n\n    const self = this\n    const seen = createScalableCuckooFilter(1024)\n\n    for await (const peer of parallel(\n      async function * () {\n        const source = merge(\n          ...self.routers\n            .filter(router => router.getClosestPeers instanceof Function)\n            .map(router => router.getClosestPeers(key, options))\n        )\n\n        for await (let peer of source) {\n          yield async () => {\n            // find multiaddrs if they are missing\n            if (peer.multiaddrs.length === 0) {\n              try {\n                peer = await self.findPeer(peer.id, {\n                  ...options,\n                  useCache: false\n                })\n              } catch (err) {\n                self.log.error('could not find peer multiaddrs', err)\n                return\n              }\n            }\n\n            return peer\n          }\n        }\n      }()\n    )) {\n      if (peer == null) {\n        continue\n      }\n\n      // store the addresses for the peer if found\n      if (peer.multiaddrs.length > 0) {\n        await this.peerStore.merge(peer.id, {\n          multiaddrs: peer.multiaddrs\n        }, options)\n      }\n\n      // deduplicate peers\n      if (seen.has(peer.id.toMultihash().bytes)) {\n        continue\n      }\n\n      seen.add(peer.id.toMultihash().bytes)\n\n      yield peer\n    }\n  }\n}\n", "import { randomBytes } from '@libp2p/crypto'\nimport { anySignal } from 'any-signal'\nimport { TypedEventEmitter, setMaxListeners } from 'main-event'\nimport pDefer from 'p-defer'\nimport { raceEvent } from 'race-event'\nimport { raceSignal } from 'race-signal'\nimport type { AbortOptions, ComponentLogger, Logger, PeerInfo, PeerRouting, Startable } from '@libp2p/interface'\nimport type { RandomWalk as RandomWalkInterface } from '@libp2p/interface-internal'\nimport type { DeferredPromise } from 'p-defer'\n\nexport interface RandomWalkComponents {\n  peerRouting: PeerRouting\n  logger: ComponentLogger\n}\n\ninterface RandomWalkEvents {\n  'walk:peer': CustomEvent<PeerInfo>\n  'walk:error': CustomEvent<Error>\n}\n\nexport class RandomWalk extends TypedEventEmitter<RandomWalkEvents> implements RandomWalkInterface, Startable {\n  private readonly peerRouting: PeerRouting\n  private readonly log: Logger\n  private walking: boolean\n  private walkers: number\n  private shutdownController: AbortController\n  private walkController?: AbortController\n  private needNext?: DeferredPromise<void>\n\n  constructor (components: RandomWalkComponents) {\n    super()\n\n    this.log = components.logger.forComponent('libp2p:random-walk')\n    this.peerRouting = components.peerRouting\n    this.walkers = 0\n    this.walking = false\n\n    // stops any in-progress walks when the node is shut down\n    this.shutdownController = new AbortController()\n    setMaxListeners(Infinity, this.shutdownController.signal)\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/random-walk'\n\n  start (): void {\n    this.shutdownController = new AbortController()\n    setMaxListeners(Infinity, this.shutdownController.signal)\n  }\n\n  stop (): void {\n    this.shutdownController.abort()\n  }\n\n  async * walk (options?: AbortOptions): AsyncGenerator<PeerInfo> {\n    if (!this.walking) {\n      // start the query that causes walk:peer events to be emitted\n      this.startWalk()\n    }\n\n    this.walkers++\n    const signal = anySignal([this.shutdownController.signal, options?.signal])\n    setMaxListeners(Infinity, signal)\n\n    try {\n      while (true) {\n        // if another consumer has paused the query, start it again\n        this.needNext?.resolve()\n        this.needNext = pDefer()\n\n        // wait for a walk:peer or walk:error event\n        const event = await raceEvent<CustomEvent<PeerInfo>>(this, 'walk:peer', signal, {\n          errorEvent: 'walk:error'\n        })\n\n        yield event.detail\n      }\n    } finally {\n      signal.clear()\n      this.walkers--\n\n      // stop the walk if no more consumers are interested\n      if (this.walkers === 0) {\n        this.walkController?.abort()\n        this.walkController = undefined\n      }\n    }\n  }\n\n  private startWalk (): void {\n    this.walking = true\n\n    // the signal for this controller will be aborted if no more random peers\n    // are required\n    this.walkController = new AbortController()\n    setMaxListeners(Infinity, this.walkController.signal)\n\n    const signal = anySignal([this.walkController.signal, this.shutdownController.signal])\n    setMaxListeners(Infinity, signal)\n\n    const start = Date.now()\n    let found = 0\n\n    Promise.resolve().then(async () => {\n      this.log('start walk')\n\n      // find peers until no more consumers are interested\n      while (this.walkers > 0) {\n        try {\n          const data = randomBytes(32)\n          let s = Date.now()\n\n          for await (const peer of this.peerRouting.getClosestPeers(data, { signal })) {\n            if (signal.aborted) {\n              this.log('aborting walk')\n            }\n\n            signal.throwIfAborted()\n\n            this.log('found peer %p after %dms for %d walkers', peer.id, Date.now() - s, this.walkers)\n            found++\n            this.safeDispatchEvent('walk:peer', {\n              detail: peer\n            })\n\n            // if we only have one consumer, pause the query until they request\n            // another random peer or they signal they are no longer interested\n            if (this.walkers === 1 && this.needNext != null) {\n              this.log('wait for need next')\n              await raceSignal(this.needNext.promise, signal)\n            }\n\n            s = Date.now()\n          }\n\n          this.log('walk iteration for %b and %d walkers finished, found %d peers', data, this.walkers, found)\n        } catch (err) {\n          this.log.error('random walk errored', err)\n\n          this.safeDispatchEvent('walk:error', {\n            detail: err\n          })\n        }\n      }\n\n      this.log('no walkers left, ended walk')\n    })\n      .catch(err => {\n        this.log.error('random walk errored', err)\n      })\n      .finally(() => {\n        this.log('finished walk, found %d peers after %dms', found, Date.now() - start)\n        this.walking = false\n      })\n  }\n}\n", "import { InvalidParametersError } from '@libp2p/interface'\nimport { mergeOptions } from '@libp2p/utils/merge-options'\nimport { trackedMap } from '@libp2p/utils/tracked-map'\nimport * as errorsJs from './errors.js'\nimport type { IdentifyResult, Libp2pEvents, Logger, PeerUpdate, PeerId, PeerStore, Topology, StreamHandler, StreamHandlerRecord, StreamHandlerOptions, AbortOptions, Metrics } from '@libp2p/interface'\nimport type { Registrar as RegistrarInterface } from '@libp2p/interface-internal'\nimport type { ComponentLogger } from '@libp2p/logger'\nimport type { TypedEventTarget } from 'main-event'\n\nexport const DEFAULT_MAX_INBOUND_STREAMS = 32\nexport const DEFAULT_MAX_OUTBOUND_STREAMS = 64\n\nexport interface RegistrarComponents {\n  peerId: PeerId\n  peerStore: PeerStore\n  events: TypedEventTarget<Libp2pEvents>\n  logger: ComponentLogger\n  metrics?: Metrics\n}\n\n/**\n * Responsible for notifying registered protocols of events in the network.\n */\nexport class Registrar implements RegistrarInterface {\n  private readonly log: Logger\n  private readonly topologies: Map<string, Map<string, Topology>>\n  private readonly handlers: Map<string, StreamHandlerRecord>\n  private readonly components: RegistrarComponents\n\n  constructor (components: RegistrarComponents) {\n    this.components = components\n    this.log = components.logger.forComponent('libp2p:registrar')\n    this.topologies = new Map()\n    components.metrics?.registerMetricGroup('libp2p_registrar_topologies', {\n      calculate: () => {\n        const output: Record<string, number> = {}\n\n        for (const [key, value] of this.topologies) {\n          output[key] = value.size\n        }\n\n        return output\n      }\n    })\n    this.handlers = trackedMap({\n      name: 'libp2p_registrar_protocol_handlers',\n      metrics: components.metrics\n    })\n\n    this._onDisconnect = this._onDisconnect.bind(this)\n    this._onPeerUpdate = this._onPeerUpdate.bind(this)\n    this._onPeerIdentify = this._onPeerIdentify.bind(this)\n\n    this.components.events.addEventListener('peer:disconnect', this._onDisconnect)\n    this.components.events.addEventListener('peer:update', this._onPeerUpdate)\n    this.components.events.addEventListener('peer:identify', this._onPeerIdentify)\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/registrar'\n\n  getProtocols (): string[] {\n    return Array.from(new Set<string>([\n      ...this.handlers.keys()\n    ])).sort()\n  }\n\n  getHandler (protocol: string): StreamHandlerRecord {\n    const handler = this.handlers.get(protocol)\n\n    if (handler == null) {\n      throw new errorsJs.UnhandledProtocolError(`No handler registered for protocol ${protocol}`)\n    }\n\n    return handler\n  }\n\n  getTopologies (protocol: string): Topology[] {\n    const topologies = this.topologies.get(protocol)\n\n    if (topologies == null) {\n      return []\n    }\n\n    return [\n      ...topologies.values()\n    ]\n  }\n\n  /**\n   * Registers the `handler` for each protocol\n   */\n  async handle (protocol: string, handler: StreamHandler, opts?: StreamHandlerOptions): Promise<void> {\n    if (this.handlers.has(protocol) && opts?.force !== true) {\n      throw new errorsJs.DuplicateProtocolHandlerError(`Handler already registered for protocol ${protocol}`)\n    }\n\n    const options = mergeOptions.bind({ ignoreUndefined: true })({\n      maxInboundStreams: DEFAULT_MAX_INBOUND_STREAMS,\n      maxOutboundStreams: DEFAULT_MAX_OUTBOUND_STREAMS\n    }, opts)\n\n    this.handlers.set(protocol, {\n      handler,\n      options\n    })\n\n    // Add new protocol to self protocols in the peer store\n    await this.components.peerStore.merge(this.components.peerId, {\n      protocols: [protocol]\n    }, opts)\n  }\n\n  /**\n   * Removes the handler for each protocol. The protocol\n   * will no longer be supported on streams.\n   */\n  async unhandle (protocols: string | string[], options?: AbortOptions): Promise<void> {\n    const protocolList = Array.isArray(protocols) ? protocols : [protocols]\n\n    protocolList.forEach(protocol => {\n      this.handlers.delete(protocol)\n    })\n\n    // Update self protocols in the peer store\n    await this.components.peerStore.patch(this.components.peerId, {\n      protocols: this.getProtocols()\n    }, options)\n  }\n\n  /**\n   * Register handlers for a set of multicodecs given\n   */\n  async register (protocol: string, topology: Topology): Promise<string> {\n    if (topology == null) {\n      throw new InvalidParametersError('invalid topology')\n    }\n\n    // Create topology\n    const id = `${(Math.random() * 1e9).toString(36)}${Date.now()}`\n\n    let topologies = this.topologies.get(protocol)\n\n    if (topologies == null) {\n      topologies = new Map<string, Topology>()\n      this.topologies.set(protocol, topologies)\n    }\n\n    topologies.set(id, topology)\n\n    return id\n  }\n\n  /**\n   * Unregister topology\n   */\n  unregister (id: string): void {\n    for (const [protocol, topologies] of this.topologies.entries()) {\n      if (topologies.has(id)) {\n        topologies.delete(id)\n\n        if (topologies.size === 0) {\n          this.topologies.delete(protocol)\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove a disconnected peer from the record\n   */\n  _onDisconnect (evt: CustomEvent<PeerId>): void {\n    const remotePeer = evt.detail\n    const options = {\n      signal: AbortSignal.timeout(5_000)\n    }\n\n    void this.components.peerStore.get(remotePeer, options)\n      .then(peer => {\n        for (const protocol of peer.protocols) {\n          const topologies = this.topologies.get(protocol)\n\n          if (topologies == null) {\n            // no topologies are interested in this protocol\n            continue\n          }\n\n          for (const topology of topologies.values()) {\n            if (topology.filter?.has(remotePeer) === false) {\n              continue\n            }\n\n            topology.filter?.remove(remotePeer)\n            topology.onDisconnect?.(remotePeer)\n          }\n        }\n      })\n      .catch(err => {\n        if (err.name === 'NotFoundError') {\n          // peer has not completed identify so they are not in the peer store\n          return\n        }\n\n        this.log.error('could not inform topologies of disconnecting peer %p', remotePeer, err)\n      })\n  }\n\n  /**\n   * When a peer is updated, if they have removed supported protocols notify any\n   * topologies interested in the removed protocols.\n   */\n  _onPeerUpdate (evt: CustomEvent<PeerUpdate>): void {\n    const { peer, previous } = evt.detail\n    const removed = (previous?.protocols ?? []).filter(protocol => !peer.protocols.includes(protocol))\n\n    for (const protocol of removed) {\n      const topologies = this.topologies.get(protocol)\n\n      if (topologies == null) {\n        // no topologies are interested in this protocol\n        continue\n      }\n\n      for (const topology of topologies.values()) {\n        if (topology.filter?.has(peer.id) === false) {\n          continue\n        }\n\n        topology.filter?.remove(peer.id)\n        topology.onDisconnect?.(peer.id)\n      }\n    }\n  }\n\n  /**\n   * After identify has completed and we have received the list of supported\n   * protocols, notify any topologies interested in those protocols.\n   */\n  _onPeerIdentify (evt: CustomEvent<IdentifyResult>): void {\n    const protocols = evt.detail.protocols\n    const connection = evt.detail.connection\n    const peerId = evt.detail.peerId\n\n    for (const protocol of protocols) {\n      const topologies = this.topologies.get(protocol)\n\n      if (topologies == null) {\n        // no topologies are interested in this protocol\n        continue\n      }\n\n      for (const topology of topologies.values()) {\n        if (connection.limits != null && topology.notifyOnLimitedConnection !== true) {\n          continue\n        }\n\n        if (topology.filter?.has(peerId) === true) {\n          continue\n        }\n\n        topology.filter?.add(peerId)\n        topology.onConnect?.(peerId, connection)\n      }\n    }\n  }\n}\n", "import { FaultTolerance, InvalidParametersError, NotStartedError } from '@libp2p/interface'\nimport { trackedMap } from '@libp2p/utils/tracked-map'\nimport { IP4, IP6 } from '@multiformats/multiaddr-matcher'\nimport { CustomProgressEvent } from 'progress-events'\nimport { TransportUnavailableError, UnsupportedListenAddressError, UnsupportedListenAddressesError } from './errors.js'\nimport type { Libp2pEvents, ComponentLogger, Logger, Connection, Metrics, Startable, Listener, Transport, Upgrader } from '@libp2p/interface'\nimport type { AddressManager, TransportManager, TransportManagerDialOptions } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { TypedEventTarget } from 'main-event'\n\nexport interface TransportManagerInit {\n  faultTolerance?: FaultTolerance\n}\n\nexport interface DefaultTransportManagerComponents {\n  metrics?: Metrics\n  addressManager: AddressManager\n  upgrader: Upgrader\n  events: TypedEventTarget<Libp2pEvents>\n  logger: ComponentLogger\n}\n\ninterface IPStats {\n  success: number\n  attempts: number\n}\n\ninterface ListenStats {\n  errors: Map<string, Error>\n  ipv4: IPStats\n  ipv6: IPStats\n}\n\nexport class DefaultTransportManager implements TransportManager, Startable {\n  private readonly log: Logger\n  private readonly components: DefaultTransportManagerComponents\n  private readonly transports: Map<string, Transport>\n  private readonly listeners: Map<string, Listener[]>\n  private readonly faultTolerance: FaultTolerance\n  private started: boolean\n\n  constructor (components: DefaultTransportManagerComponents, init: TransportManagerInit = {}) {\n    this.log = components.logger.forComponent('libp2p:transports')\n    this.components = components\n    this.started = false\n    this.transports = trackedMap({\n      name: 'libp2p_transport_manager_transports',\n      metrics: this.components.metrics\n    })\n    this.listeners = trackedMap({\n      name: 'libp2p_transport_manager_listeners',\n      metrics: this.components.metrics\n    })\n    this.faultTolerance = init.faultTolerance ?? FaultTolerance.FATAL_ALL\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/transport-manager'\n\n  /**\n   * Adds a `Transport` to the manager\n   */\n  add (transport: Transport): void {\n    const tag = transport[Symbol.toStringTag]\n\n    if (tag == null) {\n      throw new InvalidParametersError('Transport must have a valid tag')\n    }\n\n    if (this.transports.has(tag)) {\n      throw new InvalidParametersError(`There is already a transport with the tag ${tag}`)\n    }\n\n    this.log('adding transport %s', tag)\n\n    this.transports.set(tag, transport)\n\n    if (!this.listeners.has(tag)) {\n      this.listeners.set(tag, [])\n    }\n  }\n\n  isStarted (): boolean {\n    return this.started\n  }\n\n  start (): void {\n    this.started = true\n  }\n\n  async afterStart (): Promise<void> {\n    // Listen on the provided transports for the provided addresses\n    const addrs = this.components.addressManager.getListenAddrs()\n\n    await this.listen(addrs)\n  }\n\n  /**\n   * Stops all listeners\n   */\n  async stop (): Promise<void> {\n    const tasks = []\n    for (const [key, listeners] of this.listeners) {\n      this.log('closing listeners for %s', key)\n      while (listeners.length > 0) {\n        const listener = listeners.pop()\n\n        if (listener == null) {\n          continue\n        }\n\n        tasks.push(listener.close())\n      }\n    }\n\n    await Promise.all(tasks)\n    this.log('all listeners closed')\n    for (const key of this.listeners.keys()) {\n      this.listeners.set(key, [])\n    }\n\n    this.started = false\n  }\n\n  /**\n   * Dials the given Multiaddr over it's supported transport\n   */\n  async dial (ma: Multiaddr, options?: TransportManagerDialOptions): Promise<Connection> {\n    const transport = this.dialTransportForMultiaddr(ma)\n\n    if (transport == null) {\n      throw new TransportUnavailableError(`No transport available for address ${String(ma)}`)\n    }\n\n    options?.onProgress?.(new CustomProgressEvent<string>('transport-manager:selected-transport', transport[Symbol.toStringTag]))\n\n    // @ts-expect-error the transport has a typed onProgress option but we\n    // can't predict what transport implementation we selected so all we can\n    // do is pass the onProgress handler in and hope for the best\n    return transport.dial(ma, {\n      ...options,\n      upgrader: this.components.upgrader\n    })\n  }\n\n  /**\n   * Returns all Multiaddr's the listeners are using\n   */\n  getAddrs (): Multiaddr[] {\n    let addrs: Multiaddr[] = []\n    for (const listeners of this.listeners.values()) {\n      for (const listener of listeners) {\n        addrs = [...addrs, ...listener.getAddrs()]\n      }\n    }\n    return addrs\n  }\n\n  /**\n   * Returns all the transports instances\n   */\n  getTransports (): Transport[] {\n    return Array.of(...this.transports.values())\n  }\n\n  /**\n   * Returns all the listener instances\n   */\n  getListeners (): Listener[] {\n    return Array.of(...this.listeners.values()).flat()\n  }\n\n  /**\n   * Finds a transport that matches the given Multiaddr\n   */\n  dialTransportForMultiaddr (ma: Multiaddr): Transport | undefined {\n    for (const transport of this.transports.values()) {\n      const addrs = transport.dialFilter([ma])\n\n      if (addrs.length > 0) {\n        return transport\n      }\n    }\n  }\n\n  /**\n   * Finds a transport that matches the given Multiaddr\n   */\n  listenTransportForMultiaddr (ma: Multiaddr): Transport | undefined {\n    for (const transport of this.transports.values()) {\n      const addrs = transport.listenFilter([ma])\n\n      if (addrs.length > 0) {\n        return transport\n      }\n    }\n  }\n\n  /**\n   * Starts listeners for each listen Multiaddr\n   */\n  async listen (addrs: Multiaddr[]): Promise<void> {\n    if (!this.isStarted()) {\n      throw new NotStartedError('Not started')\n    }\n\n    if (addrs == null || addrs.length === 0) {\n      this.log('no addresses were provided for listening, this node is dial only')\n      return\n    }\n\n    // track IPv4/IPv6 results - if we succeed on IPv4 but all IPv6 attempts\n    // fail then we are probably on a network without IPv6 support\n    const listenStats: ListenStats = {\n      errors: new Map(),\n      ipv4: {\n        success: 0,\n        attempts: 0\n      },\n      ipv6: {\n        success: 0,\n        attempts: 0\n      }\n    }\n\n    addrs.forEach(ma => {\n      listenStats.errors.set(ma.toString(), new UnsupportedListenAddressError())\n    })\n\n    const tasks: Array<Promise<void>> = []\n\n    for (const [key, transport] of this.transports.entries()) {\n      const supportedAddrs = transport.listenFilter(addrs)\n\n      // For each supported multiaddr, create a listener\n      for (const addr of supportedAddrs) {\n        this.log('creating listener for %s on %a', key, addr)\n        const listener = transport.createListener({\n          upgrader: this.components.upgrader\n        })\n\n        let listeners: Listener[] = this.listeners.get(key) ?? []\n\n        if (listeners == null) {\n          listeners = []\n          this.listeners.set(key, listeners)\n        }\n\n        listeners.push(listener)\n\n        // Track listen/close events\n        listener.addEventListener('listening', () => {\n          this.components.events.safeDispatchEvent('transport:listening', {\n            detail: listener\n          })\n        })\n        listener.addEventListener('close', () => {\n          const index = listeners.findIndex(l => l === listener)\n\n          // remove the listener\n          listeners.splice(index, 1)\n\n          this.components.events.safeDispatchEvent('transport:close', {\n            detail: listener\n          })\n        })\n\n        // track IPv4/IPv6 support\n        if (IP4.matches(addr)) {\n          listenStats.ipv4.attempts++\n        } else if (IP6.matches(addr)) {\n          listenStats.ipv6.attempts++\n        }\n\n        // We need to attempt to listen on everything\n        tasks.push(\n          listener.listen(addr)\n            .then(() => {\n              listenStats.errors.delete(addr.toString())\n\n              if (IP4.matches(addr)) {\n                listenStats.ipv4.success++\n              }\n\n              if (IP6.matches(addr)) {\n                listenStats.ipv6.success++\n              }\n            }, (err) => {\n              this.log.error('transport %s could not listen on address %a - %e', key, addr, err)\n              listenStats.errors.set(addr.toString(), err)\n              throw err\n            })\n        )\n      }\n    }\n\n    const results = await Promise.allSettled(tasks)\n\n    // listening on all addresses, all good\n    if (results.length > 0 && results.every(res => res.status === 'fulfilled')) {\n      return\n    }\n\n    // detect lack of IPv6 support on the current network - if we tried to\n    // listen on IPv4 and IPv6 addresses, and all IPv4 addresses succeeded but\n    // all IPv6 addresses fail, then we can assume there's no IPv6 here\n    if (this.ipv6Unsupported(listenStats)) {\n      this.log('all IPv4 addresses succeed but all IPv6 failed')\n      return\n    }\n\n    if (this.faultTolerance === FaultTolerance.NO_FATAL) {\n      // ok to be dial-only\n      this.log('failed to listen on any address but fault tolerance allows this')\n      return\n    }\n\n    // if a configured address was not able to be listened on, throw an error\n    throw new UnsupportedListenAddressesError(`Some configured addresses failed to be listened on, you may need to remove one or more listen addresses from your configuration or set \\`transportManager.faultTolerance\\` to NO_FATAL:\\n${\n      [...listenStats.errors.entries()].map(([addr, err]) => {\n        return `\n  ${addr}: ${`${err.stack ?? err}`.split('\\n').join('\\n  ')}\n`\n      }).join('')\n    }`)\n  }\n\n  private ipv6Unsupported (listenStats: ListenStats): boolean {\n    if (listenStats.ipv4.attempts === 0 || listenStats.ipv6.attempts === 0) {\n      return false\n    }\n\n    const allIpv4Succeeded = listenStats.ipv4.attempts === listenStats.ipv4.success\n    const allIpv6Failed = listenStats.ipv6.success === 0\n\n    return allIpv4Succeeded && allIpv6Failed\n  }\n\n  /**\n   * Removes the given transport from the manager.\n   * If a transport has any running listeners, they will be closed.\n   */\n  async remove (key: string): Promise<void> {\n    const listeners = this.listeners.get(key) ?? []\n    this.log.trace('removing transport %s', key)\n\n    // Close any running listeners\n    const tasks = []\n    this.log.trace('closing listeners for %s', key)\n    while (listeners.length > 0) {\n      const listener = listeners.pop()\n\n      if (listener == null) {\n        continue\n      }\n\n      tasks.push(listener.close())\n    }\n    await Promise.all(tasks)\n\n    this.transports.delete(key)\n    this.listeners.delete(key)\n  }\n\n  /**\n   * Removes all transports from the manager.\n   * If any listeners are running, they will be closed.\n   *\n   * @async\n   */\n  async removeAll (): Promise<void> {\n    const tasks = []\n    for (const key of this.transports.keys()) {\n      tasks.push(this.remove(key))\n    }\n\n    await Promise.all(tasks)\n  }\n}\n", "export const PROTOCOL_ID = '/multistream/1.0.0'\n\n// Conforming to go-libp2p\n// See https://github.com/multiformats/go-multistream/blob/master/multistream.go#L297\nexport const MAX_PROTOCOL_LENGTH = 1024\n", "/**\n * The reported length of the next data message was not a positive integer\n */\nexport class InvalidMessageLengthError extends Error {\n  name = 'InvalidMessageLengthError'\n  code = 'ERR_INVALID_MSG_LENGTH'\n}\n\n/**\n * The reported length of the next data message was larger than the configured\n * max allowable value\n */\nexport class InvalidDataLengthError extends Error {\n  name = 'InvalidDataLengthError'\n  code = 'ERR_MSG_DATA_TOO_LONG'\n}\n\n/**\n * The varint used to specify the length of the next data message contained more\n * bytes than the configured max allowable value\n */\nexport class InvalidDataLengthLengthError extends Error {\n  name = 'InvalidDataLengthLengthError'\n  code = 'ERR_MSG_LENGTH_TOO_LONG'\n}\n", "/**\n * @packageDocumentation\n *\n * This module makes it easy to send and receive length-prefixed byte arrays over streams.\n *\n * @example\n *\n * ```typescript\n * import { lpStream } from 'it-length-prefixed-stream'\n *\n * const stream = lpStream(duplex)\n *\n * // read the next length-prefixed chunk\n * const bytes = await stream.read()\n *\n * // write a length-prefixed chunk\n * await stream.write(Uint8Array.from([0, 1, 2, 3, 4]))\n *\n * // write several chunks, all individually length-prefixed\n * await stream.writeV([\n *   Uint8Array.from([0, 1, 2, 3, 4]),\n *   Uint8Array.from([5, 6, 7, 8, 9])\n * ])\n * ```\n */\nimport { byteStream } from 'it-byte-stream'\nimport * as varint from 'uint8-varint'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { InvalidDataLengthError, InvalidDataLengthLengthError, InvalidMessageLengthError } from './errors.js'\nimport type { AbortOptions } from 'abort-error'\nimport type { ByteStreamOpts } from 'it-byte-stream'\nimport type { Duplex } from 'it-stream-types'\n\nexport interface LengthPrefixedStream <Stream = unknown> {\n  /**\n   * Read the next length-prefixed number of bytes from the stream\n   */\n  read(options?: AbortOptions): Promise<Uint8ArrayList>\n\n  /**\n   * Write the passed bytes to the stream prefixed by their length\n   */\n  write(input: Uint8Array | Uint8ArrayList, options?: AbortOptions): Promise<void>\n\n  /**\n   * Write passed list of bytes, prefix by their individual lengths to the stream as a single write\n   */\n  writeV(input: Array<Uint8Array | Uint8ArrayList>, options?: AbortOptions): Promise<void>\n\n  /**\n   * Returns the underlying stream\n   */\n  unwrap(): Stream\n}\n\nexport interface LengthPrefixedStreamOpts extends ByteStreamOpts {\n  // encoding opts\n  lengthEncoder (value: number): Uint8ArrayList | Uint8Array\n\n  // decoding opts\n  lengthDecoder (data: Uint8ArrayList): number\n  maxLengthLength: number\n  maxDataLength: number\n}\n\nexport function lpStream <Stream extends Duplex<any, any, any>> (duplex: Stream, opts: Partial<LengthPrefixedStreamOpts> = {}): LengthPrefixedStream<Stream> {\n  const bytes = byteStream(duplex, opts)\n\n  if (opts.maxDataLength != null && opts.maxLengthLength == null) {\n    // if max data length is set but max length length is not, calculate the\n    // max length length needed to encode max data length\n    opts.maxLengthLength = varint.encodingLength(opts.maxDataLength)\n  }\n\n  const decodeLength = opts?.lengthDecoder ?? varint.decode\n  const encodeLength = opts?.lengthEncoder ?? varint.encode\n\n  const W: LengthPrefixedStream<Stream> = {\n    read: async (options?: AbortOptions) => {\n      let dataLength: number = -1\n      const lengthBuffer = new Uint8ArrayList()\n\n      while (true) {\n        // read one byte at a time until we can decode a varint\n        lengthBuffer.append(await bytes.read({\n          ...options,\n          bytes: 1\n        }))\n\n        try {\n          dataLength = decodeLength(lengthBuffer)\n        } catch (err) {\n          if (err instanceof RangeError) {\n            continue\n          }\n\n          throw err\n        }\n\n        if (dataLength < 0) {\n          throw new InvalidMessageLengthError('Invalid message length')\n        }\n\n        if (opts?.maxLengthLength != null && lengthBuffer.byteLength > opts.maxLengthLength) {\n          throw new InvalidDataLengthLengthError('message length length too long')\n        }\n\n        if (dataLength > -1) {\n          break\n        }\n      }\n\n      if (opts?.maxDataLength != null && dataLength > opts.maxDataLength) {\n        throw new InvalidDataLengthError('message length too long')\n      }\n\n      return bytes.read({\n        ...options,\n        bytes: dataLength\n      })\n    },\n    write: async (data, options?: AbortOptions) => {\n      // encode, write\n      await bytes.write(new Uint8ArrayList(encodeLength(data.byteLength), data), options)\n    },\n    writeV: async (data, options?: AbortOptions) => {\n      const list = new Uint8ArrayList(\n        ...data.flatMap(buf => ([encodeLength(buf.byteLength), buf]))\n      )\n\n      // encode, write\n      await bytes.write(list, options)\n    },\n    unwrap: () => {\n      return bytes.unwrap()\n    }\n  }\n\n  return W\n}\n", "import { InvalidMessageError } from '@libp2p/interface'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport type { AbortOptions, LoggerOptions } from '@libp2p/interface'\nimport type { LengthPrefixedStream } from 'it-length-prefixed-stream'\nimport type { Duplex, Source } from 'it-stream-types'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nconst NewLine = uint8ArrayFromString('\\n')\n\n/**\n * `write` encodes and writes a single buffer\n */\nexport async function write (writer: LengthPrefixedStream<Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>, Source<Uint8Array>>>, buffer: Uint8Array | Uint8ArrayList, options?: AbortOptions): Promise<void> {\n  await writer.write(buffer, options)\n}\n\n/**\n * `writeAll` behaves like `write`, except it encodes an array of items as a single write\n */\nexport async function writeAll (writer: LengthPrefixedStream<Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>, Source<Uint8Array>>>, buffers: Uint8Array[], options?: AbortOptions): Promise<void> {\n  await writer.writeV(buffers, options)\n}\n\n/**\n * Read a length-prefixed buffer from the passed stream, stripping the final newline character\n */\nexport async function read (reader: LengthPrefixedStream<Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>, Source<Uint8Array>>>, options: AbortOptions & LoggerOptions): Promise<Uint8ArrayList> {\n  const buf = await reader.read(options)\n\n  if (buf.byteLength === 0 || buf.get(buf.byteLength - 1) !== NewLine[0]) {\n    options.log.error('Invalid mss message - missing newline', buf)\n    throw new InvalidMessageError('Missing newline')\n  }\n\n  return buf.sublist(0, -1) // Remove newline\n}\n\n/**\n * Read a length-prefixed string from the passed stream, stripping the final newline character\n */\nexport async function readString (reader: LengthPrefixedStream<Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>, Source<Uint8Array>>>, options: AbortOptions & LoggerOptions): Promise<string> {\n  const buf = await read(reader, options)\n\n  return uint8ArrayToString(buf.subarray())\n}\n", "import { UnsupportedProtocolError } from '@libp2p/interface'\nimport { lpStream } from 'it-length-prefixed-stream'\nimport pDefer from 'p-defer'\nimport { raceSignal } from 'race-signal'\nimport * as varint from 'uint8-varint'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { MAX_PROTOCOL_LENGTH } from './constants.js'\nimport * as multistream from './multistream.js'\nimport { PROTOCOL_ID } from './index.js'\nimport type { MultistreamSelectInit, ProtocolStream } from './index.js'\nimport type { AbortOptions } from '@libp2p/interface'\nimport type { Duplex } from 'it-stream-types'\n\nexport interface SelectStream extends Duplex<any, any, any> {\n  readStatus?: string\n  closeWrite?(options?: AbortOptions): Promise<void>\n  closeRead?(options?: AbortOptions): Promise<void>\n  close?(options?: AbortOptions): Promise<void>\n}\n\n/**\n * Negotiate a protocol to use from a list of protocols.\n *\n * @param stream - A duplex iterable stream to dial on\n * @param protocols - A list of protocols (or single protocol) to negotiate with. Protocols are attempted in order until a match is made.\n * @param options - An options object containing an AbortSignal and an optional boolean `writeBytes` - if this is true, `Uint8Array`s will be written into `duplex`, otherwise `Uint8ArrayList`s will\n * @returns A stream for the selected protocol and the protocol that was selected from the list of protocols provided to `select`.\n * @example\n *\n * ```TypeScript\n * import { pipe } from 'it-pipe'\n * import * as mss from '@libp2p/multistream-select'\n * import { Mplex } from '@libp2p/mplex'\n *\n * const muxer = new Mplex()\n * const muxedStream = muxer.newStream()\n *\n * // mss.select(protocol(s))\n * // Select from one of the passed protocols (in priority order)\n * // Returns selected stream and protocol\n * const { stream: dhtStream, protocol } = await mss.select(muxedStream, [\n *   // This might just be different versions of DHT, but could be different implementations\n *   '/ipfs-dht/2.0.0', // Most of the time this will probably just be one item.\n *   '/ipfs-dht/1.0.0'\n * ])\n *\n * // Typically this stream will be passed back to the caller of libp2p.dialProtocol\n * //\n * // ...it might then do something like this:\n * // try {\n * //   await pipe(\n * //     [uint8ArrayFromString('Some DHT data')]\n * //     dhtStream,\n * //     async source => {\n * //       for await (const chunk of source)\n * //         // DHT response data\n * //     }\n * //   )\n * // } catch (err) {\n * //   // Error in stream\n * // }\n * ```\n */\nexport async function select <Stream extends SelectStream> (stream: Stream, protocols: string | string[], options: MultistreamSelectInit): Promise<ProtocolStream<Stream>> {\n  protocols = Array.isArray(protocols) ? [...protocols] : [protocols]\n\n  if (protocols.length === 1 && options.negotiateFully === false) {\n    return optimisticSelect(stream, protocols[0], options)\n  }\n\n  const lp = lpStream(stream, {\n    ...options,\n    maxDataLength: MAX_PROTOCOL_LENGTH\n  })\n  const protocol = protocols.shift()\n\n  if (protocol == null) {\n    throw new Error('At least one protocol must be specified')\n  }\n\n  options.log.trace('select: write [\"%s\", \"%s\"]', PROTOCOL_ID, protocol)\n  const p1 = uint8ArrayFromString(`${PROTOCOL_ID}\\n`)\n  const p2 = uint8ArrayFromString(`${protocol}\\n`)\n  await multistream.writeAll(lp, [p1, p2], options)\n\n  options.log.trace('select: reading multistream-select header')\n  let response = await multistream.readString(lp, options)\n  options.log.trace('select: read \"%s\"', response)\n\n  // Read the protocol response if we got the protocolId in return\n  if (response === PROTOCOL_ID) {\n    options.log.trace('select: reading protocol response')\n    response = await multistream.readString(lp, options)\n    options.log.trace('select: read \"%s\"', response)\n  }\n\n  // We're done\n  if (response === protocol) {\n    return { stream: lp.unwrap(), protocol }\n  }\n\n  // We haven't gotten a valid ack, try the other protocols\n  for (const protocol of protocols) {\n    options.log.trace('select: write \"%s\"', protocol)\n    await multistream.write(lp, uint8ArrayFromString(`${protocol}\\n`), options)\n    options.log.trace('select: reading protocol response')\n    const response = await multistream.readString(lp, options)\n    options.log.trace('select: read \"%s\" for \"%s\"', response, protocol)\n\n    if (response === protocol) {\n      return { stream: lp.unwrap(), protocol }\n    }\n  }\n\n  throw new UnsupportedProtocolError('protocol selection failed')\n}\n\n/**\n * Optimistically negotiates a protocol.\n *\n * It *does not* block writes waiting for the other end to respond. Instead, it\n * simply assumes the negotiation went successfully and starts writing data.\n *\n * Use when it is known that the receiver supports the desired protocol.\n */\nfunction optimisticSelect <Stream extends SelectStream> (stream: Stream, protocol: string, options: MultistreamSelectInit): ProtocolStream<Stream> {\n  const originalSink = stream.sink.bind(stream)\n  const originalSource = stream.source\n\n  let negotiated = false\n  let negotiating = false\n  const doneNegotiating = pDefer()\n\n  let sentProtocol = false\n  let sendingProtocol = false\n  const doneSendingProtocol = pDefer()\n\n  let readProtocol = false\n  let readingProtocol = false\n  const doneReadingProtocol = pDefer()\n\n  const lp = lpStream({\n    sink: originalSink,\n    source: originalSource\n  }, {\n    ...options,\n    maxDataLength: MAX_PROTOCOL_LENGTH\n  })\n\n  stream.sink = async source => {\n    const { sink } = lp.unwrap()\n\n    await sink(async function * () {\n      let sentData = false\n\n      for await (const buf of source) {\n        // started reading before the source yielded, wait for protocol send\n        if (sendingProtocol) {\n          await doneSendingProtocol.promise\n        }\n\n        // writing before reading, send the protocol and the first chunk of data\n        if (!sentProtocol) {\n          sendingProtocol = true\n\n          options.log.trace('optimistic: write [\"%s\", \"%s\", data(%d)] in sink', PROTOCOL_ID, protocol, buf.byteLength)\n\n          const protocolString = `${protocol}\\n`\n\n          // send protocols in first chunk of data written to transport\n          yield new Uint8ArrayList(\n            Uint8Array.from([19]), // length of PROTOCOL_ID plus newline\n            uint8ArrayFromString(`${PROTOCOL_ID}\\n`),\n            varint.encode(protocolString.length),\n            uint8ArrayFromString(protocolString),\n            buf\n          ).subarray()\n\n          options.log.trace('optimistic: wrote [\"%s\", \"%s\", data(%d)] in sink', PROTOCOL_ID, protocol, buf.byteLength)\n\n          sentProtocol = true\n          sendingProtocol = false\n          doneSendingProtocol.resolve()\n\n          // read the negotiation response but don't block more sending\n          negotiate()\n            .catch(err => {\n              options.log.error('could not finish optimistic protocol negotiation of %s', protocol, err)\n            })\n        } else {\n          yield buf\n        }\n\n        sentData = true\n      }\n\n      // special case - the source passed to the sink has ended but we didn't\n      // negotiated the protocol yet so do it now\n      if (!sentData) {\n        await negotiate()\n      }\n    }())\n  }\n\n  async function negotiate (): Promise<void> {\n    if (negotiating) {\n      options.log.trace('optimistic: already negotiating %s stream', protocol)\n      await doneNegotiating.promise\n      return\n    }\n\n    negotiating = true\n\n    try {\n      // we haven't sent the protocol yet, send it now\n      if (!sentProtocol) {\n        options.log.trace('optimistic: doing send protocol for %s stream', protocol)\n        await doSendProtocol()\n      }\n\n      // if we haven't read the protocol response yet, do it now\n      if (!readProtocol) {\n        options.log.trace('optimistic: doing read protocol for %s stream', protocol)\n        await doReadProtocol()\n      }\n    } finally {\n      negotiating = false\n      negotiated = true\n      doneNegotiating.resolve()\n    }\n  }\n\n  async function doSendProtocol (): Promise<void> {\n    if (sendingProtocol) {\n      await doneSendingProtocol.promise\n      return\n    }\n\n    sendingProtocol = true\n\n    try {\n      options.log.trace('optimistic: write [\"%s\", \"%s\", data] in source', PROTOCOL_ID, protocol)\n      await lp.writeV([\n        uint8ArrayFromString(`${PROTOCOL_ID}\\n`),\n        uint8ArrayFromString(`${protocol}\\n`)\n      ])\n      options.log.trace('optimistic: wrote [\"%s\", \"%s\", data] in source', PROTOCOL_ID, protocol)\n    } finally {\n      sentProtocol = true\n      sendingProtocol = false\n      doneSendingProtocol.resolve()\n    }\n  }\n\n  async function doReadProtocol (): Promise<void> {\n    if (readingProtocol) {\n      await doneReadingProtocol.promise\n      return\n    }\n\n    readingProtocol = true\n\n    try {\n      options.log.trace('optimistic: reading multistream select header')\n      let response = await multistream.readString(lp, options)\n      options.log.trace('optimistic: read multistream select header \"%s\"', response)\n\n      if (response === PROTOCOL_ID) {\n        response = await multistream.readString(lp, options)\n      }\n\n      options.log.trace('optimistic: read protocol \"%s\", expecting \"%s\"', response, protocol)\n\n      if (response !== protocol) {\n        throw new UnsupportedProtocolError('protocol selection failed')\n      }\n    } finally {\n      readProtocol = true\n      readingProtocol = false\n      doneReadingProtocol.resolve()\n    }\n  }\n\n  stream.source = (async function * () {\n    // make sure we've done protocol negotiation before we read stream data\n    await negotiate()\n\n    options.log.trace('optimistic: reading data from \"%s\" stream', protocol)\n    yield * lp.unwrap().source\n  })()\n\n  if (stream.closeRead != null) {\n    const originalCloseRead = stream.closeRead.bind(stream)\n\n    stream.closeRead = async (opts) => {\n      // we need to read & write to negotiate the protocol so ensure we've done\n      // this before closing the readable end of the stream\n      if (!negotiated) {\n        await negotiate().catch(err => {\n          options.log.error('could not negotiate protocol before close read', err)\n        })\n      }\n\n      // protocol has been negotiated, ok to close the readable end\n      await originalCloseRead(opts)\n    }\n  }\n\n  if (stream.closeWrite != null) {\n    const originalCloseWrite = stream.closeWrite.bind(stream)\n\n    stream.closeWrite = async (opts) => {\n      // we need to read & write to negotiate the protocol so ensure we've done\n      // this before closing the writable end of the stream\n      if (!negotiated) {\n        await negotiate().catch(err => {\n          options.log.error('could not negotiate protocol before close write', err)\n        })\n      }\n\n      // protocol has been negotiated, ok to close the writable end\n      await originalCloseWrite(opts)\n    }\n  }\n\n  if (stream.close != null) {\n    const originalClose = stream.close.bind(stream)\n\n    stream.close = async (opts) => {\n      // if we are in the process of negotiation, let it finish before closing\n      // because we may have unsent early data\n      const tasks = []\n\n      if (sendingProtocol) {\n        tasks.push(doneSendingProtocol.promise)\n      }\n\n      if (readingProtocol) {\n        tasks.push(doneReadingProtocol.promise)\n      }\n\n      if (tasks.length > 0) {\n        // let the in-flight protocol negotiation finish gracefully\n        await raceSignal(\n          Promise.all(tasks),\n          opts?.signal\n        )\n      } else {\n        // no protocol negotiation attempt has occurred so don't start one\n        negotiated = true\n        negotiating = false\n        doneNegotiating.resolve()\n      }\n\n      // protocol has been negotiated, ok to close the writable end\n      await originalClose(opts)\n    }\n  }\n\n  return {\n    stream,\n    protocol\n  }\n}\n", "import { encode } from 'it-length-prefixed'\nimport { lpStream } from 'it-length-prefixed-stream'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { MAX_PROTOCOL_LENGTH, PROTOCOL_ID } from './constants.js'\nimport * as multistream from './multistream.js'\nimport type { MultistreamSelectInit, ProtocolStream } from './index.js'\nimport type { Duplex } from 'it-stream-types'\n\n/**\n * Handle multistream protocol selections for the given list of protocols.\n *\n * Note that after a protocol is handled `listener` can no longer be used.\n *\n * @param stream - A duplex iterable stream to listen on\n * @param protocols - A list of protocols (or single protocol) that this listener is able to speak.\n * @param options - an options object containing an AbortSignal and an optional boolean `writeBytes` - if this is true, `Uint8Array`s will be written into `duplex`, otherwise `Uint8ArrayList`s will\n * @returns A stream for the selected protocol and the protocol that was selected from the list of protocols provided to `select`\n * @example\n *\n * ```TypeScript\n * import { pipe } from 'it-pipe'\n * import * as mss from '@libp2p/multistream-select'\n * import { Mplex } from '@libp2p/mplex'\n *\n * const muxer = new Mplex({\n *   async onStream (muxedStream) {\n *   // mss.handle(handledProtocols)\n *   // Returns selected stream and protocol\n *   const { stream, protocol } = await mss.handle(muxedStream, [\n *     '/ipfs-dht/1.0.0',\n *     '/ipfs-bitswap/1.0.0'\n *   ])\n *\n *   // Typically here we'd call the handler function that was registered in\n *   // libp2p for the given protocol:\n *   // e.g. handlers[protocol].handler(stream)\n *   //\n *   // If protocol was /ipfs-dht/1.0.0 it might do something like this:\n *   // try {\n *   //   await pipe(\n *   //     dhtStream,\n *   //     source => (async function * () {\n *   //       for await (const chunk of source)\n *   //         // Incoming DHT data -> process and yield to respond\n *   //     })(),\n *   //     dhtStream\n *   //   )\n *   // } catch (err) {\n *   //   // Error in stream\n *   // }\n *   }\n * })\n * ```\n */\nexport async function handle <Stream extends Duplex<any, any, any>> (stream: Stream, protocols: string | string[], options: MultistreamSelectInit): Promise<ProtocolStream<Stream>> {\n  protocols = Array.isArray(protocols) ? protocols : [protocols]\n  options.log.trace('handle: available protocols %s', protocols)\n\n  const lp = lpStream(stream, {\n    ...options,\n    maxDataLength: MAX_PROTOCOL_LENGTH,\n    maxLengthLength: 2 // 2 bytes is enough to length-prefix MAX_PROTOCOL_LENGTH\n  })\n\n  while (true) {\n    options.log.trace('handle: reading incoming string')\n    const protocol = await multistream.readString(lp, options)\n    options.log.trace('handle: read \"%s\"', protocol)\n\n    if (protocol === PROTOCOL_ID) {\n      options.log.trace('handle: respond with \"%s\" for \"%s\"', PROTOCOL_ID, protocol)\n      await multistream.write(lp, uint8ArrayFromString(`${PROTOCOL_ID}\\n`), options)\n      options.log.trace('handle: responded with \"%s\" for \"%s\"', PROTOCOL_ID, protocol)\n      continue\n    }\n\n    if (protocols.includes(protocol)) {\n      options.log.trace('handle: respond with \"%s\" for \"%s\"', protocol, protocol)\n      await multistream.write(lp, uint8ArrayFromString(`${protocol}\\n`), options)\n      options.log.trace('handle: responded with \"%s\" for \"%s\"', protocol, protocol)\n\n      return { stream: lp.unwrap(), protocol }\n    }\n\n    if (protocol === 'ls') {\n      // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\\n\n      const protos = new Uint8ArrayList(\n        ...protocols.map(p => encode.single(uint8ArrayFromString(`${p}\\n`))),\n        uint8ArrayFromString('\\n')\n      )\n\n      options.log.trace('handle: respond with \"%s\" for %s', protocols, protocol)\n      await multistream.write(lp, protos, options)\n      options.log.trace('handle: responded with \"%s\" for %s', protocols, protocol)\n      continue\n    }\n\n    options.log.trace('handle: respond with \"na\" for \"%s\"', protocol)\n    await multistream.write(lp, uint8ArrayFromString('na\\n'), options)\n    options.log('handle: responded with \"na\" for \"%s\"', protocol)\n  }\n}\n", "import { connectionSymbol, LimitedConnectionError, ConnectionClosedError, ConnectionClosingError } from '@libp2p/interface'\nimport { setMaxListeners } from 'main-event'\nimport type { AbortOptions, Logger, ComponentLogger, Direction, Connection, Stream, ConnectionTimeline, ConnectionStatus, NewStreamOptions, PeerId, ConnectionLimits } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nconst CLOSE_TIMEOUT = 500\n\ninterface ConnectionInit {\n  remoteAddr: Multiaddr\n  remotePeer: PeerId\n  newStream(protocols: string[], options?: AbortOptions): Promise<Stream>\n  close(options?: AbortOptions): Promise<void>\n  abort(err: Error): void\n  getStreams(): Stream[]\n  status: ConnectionStatus\n  direction: Direction\n  timeline: ConnectionTimeline\n  multiplexer?: string\n  encryption?: string\n  limits?: ConnectionLimits\n  logger: ComponentLogger\n}\n\n/**\n * An implementation of the js-libp2p connection.\n * Any libp2p transport should use an upgrader to return this connection.\n */\nexport class ConnectionImpl implements Connection {\n  /**\n   * Connection identifier.\n   */\n  public readonly id: string\n\n  /**\n   * Observed multiaddr of the remote peer\n   */\n  public readonly remoteAddr: Multiaddr\n\n  /**\n   * Remote peer id\n   */\n  public readonly remotePeer: PeerId\n\n  public direction: Direction\n  public timeline: ConnectionTimeline\n  public multiplexer?: string\n  public encryption?: string\n  public status: ConnectionStatus\n  public limits?: ConnectionLimits\n  public readonly log: Logger\n\n  /**\n   * User provided tags\n   *\n   */\n  public tags: string[]\n\n  /**\n   * Reference to the new stream function of the multiplexer\n   */\n  private readonly _newStream: (protocols: string[], options?: NewStreamOptions) => Promise<Stream>\n\n  /**\n   * Reference to the close function of the raw connection\n   */\n  private readonly _close: (options?: AbortOptions) => Promise<void>\n\n  private readonly _abort: (err: Error) => void\n\n  /**\n   * Reference to the getStreams function of the muxer\n   */\n  private readonly _getStreams: () => Stream[]\n\n  /**\n   * An implementation of the js-libp2p connection.\n   * Any libp2p transport should use an upgrader to return this connection.\n   */\n  constructor (init: ConnectionInit) {\n    const { remoteAddr, remotePeer, newStream, close, abort, getStreams } = init\n\n    this.id = `${(parseInt(String(Math.random() * 1e9))).toString(36)}${Date.now()}`\n    this.remoteAddr = remoteAddr\n    this.remotePeer = remotePeer\n    this.direction = init.direction\n    this.status = 'open'\n    this.timeline = init.timeline\n    this.multiplexer = init.multiplexer\n    this.encryption = init.encryption\n    this.limits = init.limits\n    this.log = init.logger.forComponent(`libp2p:connection:${this.direction}:${this.id}`)\n\n    if (this.remoteAddr.getPeerId() == null) {\n      this.remoteAddr = this.remoteAddr.encapsulate(`/p2p/${this.remotePeer}`)\n    }\n\n    this._newStream = newStream\n    this._close = close\n    this._abort = abort\n    this._getStreams = getStreams\n    this.tags = []\n  }\n\n  readonly [Symbol.toStringTag] = 'Connection'\n\n  readonly [connectionSymbol] = true\n\n  /**\n   * Get all the streams of the muxer\n   */\n  get streams (): Stream[] {\n    return this._getStreams()\n  }\n\n  /**\n   * Create a new stream from this connection\n   */\n  async newStream (protocols: string | string[], options?: NewStreamOptions): Promise<Stream> {\n    if (this.status === 'closing') {\n      throw new ConnectionClosingError('the connection is being closed')\n    }\n\n    if (this.status === 'closed') {\n      throw new ConnectionClosedError('the connection is closed')\n    }\n\n    if (!Array.isArray(protocols)) {\n      protocols = [protocols]\n    }\n\n    if (this.limits != null && options?.runOnLimitedConnection !== true) {\n      throw new LimitedConnectionError('Cannot open protocol stream on limited connection')\n    }\n\n    const stream = await this._newStream(protocols, options)\n\n    stream.direction = 'outbound'\n\n    return stream\n  }\n\n  /**\n   * Close the connection\n   */\n  async close (options: AbortOptions = {}): Promise<void> {\n    if (this.status === 'closed' || this.status === 'closing') {\n      return\n    }\n\n    this.log('closing connection to %a', this.remoteAddr)\n\n    this.status = 'closing'\n\n    if (options.signal == null) {\n      const signal = AbortSignal.timeout(CLOSE_TIMEOUT)\n      setMaxListeners(Infinity, signal)\n\n      options = {\n        ...options,\n        signal\n      }\n    }\n\n    try {\n      this.log.trace('closing underlying transport')\n\n      // close raw connection\n      await this._close(options)\n\n      this.log.trace('updating timeline with close time')\n\n      this.status = 'closed'\n      this.timeline.close = Date.now()\n    } catch (err: any) {\n      this.log.error('error encountered during graceful close of connection to %a', this.remoteAddr, err)\n      this.abort(err)\n    }\n  }\n\n  abort (err: Error): void {\n    if (this.status === 'closed') {\n      return\n    }\n\n    this.log.error('aborting connection to %a due to error', this.remoteAddr, err)\n\n    this.status = 'closing'\n\n    // Abort raw connection\n    this._abort(err)\n\n    this.status = 'closed'\n    this.timeline.close = Date.now()\n  }\n}\n\nexport function createConnection (init: ConnectionInit): Connection {\n  return new ConnectionImpl(init)\n}\n", "import { InvalidMultiaddrError, TooManyInboundProtocolStreamsError, TooManyOutboundProtocolStreamsError, LimitedConnectionError, InvalidPeerIdError } from '@libp2p/interface'\nimport * as mss from '@libp2p/multistream-select'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { trackedMap } from '@libp2p/utils/tracked-map'\nimport { anySignal } from 'any-signal'\nimport { setMaxListeners } from 'main-event'\nimport { CustomProgressEvent } from 'progress-events'\nimport { raceSignal } from 'race-signal'\nimport { createConnection } from './connection/index.js'\nimport { PROTOCOL_NEGOTIATION_TIMEOUT, INBOUND_UPGRADE_TIMEOUT } from './connection-manager/constants.js'\nimport { ConnectionDeniedError, ConnectionInterceptedError, EncryptionFailedError, MuxerUnavailableError } from './errors.js'\nimport { DEFAULT_MAX_INBOUND_STREAMS, DEFAULT_MAX_OUTBOUND_STREAMS } from './registrar.js'\nimport type { Libp2pEvents, AbortOptions, ComponentLogger, MultiaddrConnection, Connection, Stream, ConnectionProtector, NewStreamOptions, ConnectionEncrypter, SecuredConnection, ConnectionGater, Metrics, PeerId, PeerStore, StreamMuxer, StreamMuxerFactory, Upgrader as UpgraderInterface, UpgraderOptions, ConnectionLimits, SecureConnectionOptions, CounterGroup, ClearableSignal } from '@libp2p/interface'\nimport type { ConnectionManager, Registrar } from '@libp2p/interface-internal'\nimport type { TypedEventTarget } from 'main-event'\n\ninterface CreateConnectionOptions {\n  cryptoProtocol: string\n  direction: 'inbound' | 'outbound'\n  maConn: MultiaddrConnection\n  upgradedConn: MultiaddrConnection\n  remotePeer: PeerId\n  muxerFactory?: StreamMuxerFactory\n  limits?: ConnectionLimits\n}\n\ninterface OnStreamOptions {\n  connection: Connection\n  stream: Stream\n  protocol: string\n}\n\nexport interface CryptoResult extends SecuredConnection<MultiaddrConnection> {\n  protocol: string\n}\n\nexport interface UpgraderInit {\n  connectionEncrypters: ConnectionEncrypter[]\n  streamMuxers: StreamMuxerFactory[]\n\n  /**\n   * An amount of ms by which an inbound connection upgrade must complete\n   *\n   * @default 3000\n   */\n  inboundUpgradeTimeout?: number\n\n  /**\n   * When a new incoming stream is opened on a multiplexed connection, protocol\n   * negotiation on that stream must complete within this many ms\n   *\n   * @default 2000\n   */\n  inboundStreamProtocolNegotiationTimeout?: number\n\n  /**\n   * When a new incoming stream is opened on a multiplexed connection, protocol\n   * negotiation on that stream must complete within this many ms\n   *\n   * @default 2000\n   */\n  outboundStreamProtocolNegotiationTimeout?: number\n}\n\nfunction findIncomingStreamLimit (protocol: string, registrar: Registrar): number | undefined {\n  try {\n    const { options } = registrar.getHandler(protocol)\n\n    return options.maxInboundStreams\n  } catch (err: any) {\n    if (err.name !== 'UnhandledProtocolError') {\n      throw err\n    }\n  }\n\n  return DEFAULT_MAX_INBOUND_STREAMS\n}\n\nfunction findOutgoingStreamLimit (protocol: string, registrar: Registrar, options: NewStreamOptions = {}): number {\n  try {\n    const { options } = registrar.getHandler(protocol)\n\n    if (options.maxOutboundStreams != null) {\n      return options.maxOutboundStreams\n    }\n  } catch (err: any) {\n    if (err.name !== 'UnhandledProtocolError') {\n      throw err\n    }\n  }\n\n  return options.maxOutboundStreams ?? DEFAULT_MAX_OUTBOUND_STREAMS\n}\n\nfunction countStreams (protocol: string, direction: 'inbound' | 'outbound', connection: Connection): number {\n  let streamCount = 0\n\n  connection.streams.forEach(stream => {\n    if (stream.direction === direction && stream.protocol === protocol) {\n      streamCount++\n    }\n  })\n\n  return streamCount\n}\n\nexport interface UpgraderComponents {\n  peerId: PeerId\n  metrics?: Metrics\n  connectionManager: ConnectionManager\n  connectionGater: ConnectionGater\n  connectionProtector?: ConnectionProtector\n  registrar: Registrar\n  peerStore: PeerStore\n  events: TypedEventTarget<Libp2pEvents>\n  logger: ComponentLogger\n}\n\ntype ConnectionDeniedType = keyof Pick<ConnectionGater, 'denyOutboundConnection' | 'denyInboundEncryptedConnection' | 'denyOutboundEncryptedConnection' | 'denyInboundUpgradedConnection' | 'denyOutboundUpgradedConnection'>\n\nexport class Upgrader implements UpgraderInterface {\n  private readonly components: UpgraderComponents\n  private readonly connectionEncrypters: Map<string, ConnectionEncrypter>\n  private readonly streamMuxers: Map<string, StreamMuxerFactory>\n  private readonly inboundUpgradeTimeout: number\n  private readonly inboundStreamProtocolNegotiationTimeout: number\n  private readonly outboundStreamProtocolNegotiationTimeout: number\n  private readonly events: TypedEventTarget<Libp2pEvents>\n  private readonly metrics: {\n    dials?: CounterGroup<'inbound' | 'outbound'>\n    errors?: CounterGroup<'inbound' | 'outbound'>\n    inboundErrors?: CounterGroup\n    outboundErrors?: CounterGroup\n  }\n\n  constructor (components: UpgraderComponents, init: UpgraderInit) {\n    this.components = components\n    this.connectionEncrypters = trackedMap({\n      name: 'libp2p_upgrader_connection_encrypters',\n      metrics: this.components.metrics\n    })\n\n    init.connectionEncrypters.forEach(encrypter => {\n      this.connectionEncrypters.set(encrypter.protocol, encrypter)\n    })\n\n    this.streamMuxers = trackedMap({\n      name: 'libp2p_upgrader_stream_multiplexers',\n      metrics: this.components.metrics\n    })\n\n    init.streamMuxers.forEach(muxer => {\n      this.streamMuxers.set(muxer.protocol, muxer)\n    })\n\n    this.inboundUpgradeTimeout = init.inboundUpgradeTimeout ?? INBOUND_UPGRADE_TIMEOUT\n    this.inboundStreamProtocolNegotiationTimeout = init.inboundStreamProtocolNegotiationTimeout ?? PROTOCOL_NEGOTIATION_TIMEOUT\n    this.outboundStreamProtocolNegotiationTimeout = init.outboundStreamProtocolNegotiationTimeout ?? PROTOCOL_NEGOTIATION_TIMEOUT\n    this.events = components.events\n    this.metrics = {\n      dials: components.metrics?.registerCounterGroup('libp2p_connection_manager_dials_total'),\n      errors: components.metrics?.registerCounterGroup('libp2p_connection_manager_dial_errors_total'),\n      inboundErrors: components.metrics?.registerCounterGroup('libp2p_connection_manager_dials_inbound_errors_total'),\n      outboundErrors: components.metrics?.registerCounterGroup('libp2p_connection_manager_dials_outbound_errors_total')\n    }\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/upgrader'\n\n  async shouldBlockConnection (connectionType: 'denyInboundConnection', maConn: MultiaddrConnection): Promise<void>\n  async shouldBlockConnection (connectionType: ConnectionDeniedType, remotePeer: PeerId, maConn: MultiaddrConnection): Promise<void>\n  async shouldBlockConnection (method: ConnectionDeniedType | 'denyInboundConnection', ...args: any[]): Promise<void> {\n    const denyOperation: any = this.components.connectionGater[method]\n\n    if (denyOperation == null) {\n      return\n    }\n\n    const result = await denyOperation.apply(this.components.connectionGater, args)\n\n    if (result === true) {\n      throw new ConnectionInterceptedError(`The multiaddr connection is blocked by gater.${method}`)\n    }\n  }\n\n  createInboundAbortSignal (signal: AbortSignal): ClearableSignal {\n    const output = anySignal([\n      AbortSignal.timeout(this.inboundUpgradeTimeout),\n      signal\n    ])\n    setMaxListeners(Infinity, output)\n\n    return output\n  }\n\n  /**\n   * Upgrades an inbound connection\n   */\n  async upgradeInbound (maConn: MultiaddrConnection, opts: UpgraderOptions): Promise<void> {\n    let accepted = false\n\n    // always apply upgrade timeout for incoming upgrades\n    const signal = this.createInboundAbortSignal(opts.signal)\n\n    try {\n      this.metrics.dials?.increment({\n        inbound: true\n      })\n\n      accepted = await raceSignal(this.components.connectionManager.acceptIncomingConnection(maConn), signal)\n\n      if (!accepted) {\n        throw new ConnectionDeniedError('Connection denied')\n      }\n\n      await raceSignal(this.shouldBlockConnection('denyInboundConnection', maConn), signal)\n\n      await this._performUpgrade(maConn, 'inbound', {\n        ...opts,\n        signal\n      })\n    } catch (err: any) {\n      this.metrics.errors?.increment({\n        inbound: true\n      })\n      this.metrics.inboundErrors?.increment({\n        [err.name ?? 'Error']: true\n      })\n\n      throw err\n    } finally {\n      signal.clear()\n\n      if (accepted) {\n        this.components.connectionManager.afterUpgradeInbound()\n      }\n    }\n  }\n\n  /**\n   * Upgrades an outbound connection\n   */\n  async upgradeOutbound (maConn: MultiaddrConnection, opts: UpgraderOptions): Promise<Connection> {\n    try {\n      this.metrics.dials?.increment({\n        outbound: true\n      })\n\n      const idStr = maConn.remoteAddr.getPeerId()\n      let remotePeerId: PeerId | undefined\n\n      if (idStr != null) {\n        remotePeerId = peerIdFromString(idStr)\n        await raceSignal(this.shouldBlockConnection('denyOutboundConnection', remotePeerId, maConn), opts.signal)\n      }\n\n      let direction: 'inbound' | 'outbound' = 'outbound'\n\n      // act as the multistream-select server if we are not to be the initiator\n      if (opts.initiator === false) {\n        direction = 'inbound'\n      }\n\n      return await this._performUpgrade(maConn, direction, opts)\n    } catch (err: any) {\n      this.metrics.errors?.increment({\n        outbound: true\n      })\n      this.metrics.outboundErrors?.increment({\n        [err.name ?? 'Error']: true\n      })\n\n      throw err\n    }\n  }\n\n  private async _performUpgrade (maConn: MultiaddrConnection, direction: 'inbound' | 'outbound', opts: UpgraderOptions): Promise<Connection> {\n    let encryptedConn: MultiaddrConnection\n    let remotePeer: PeerId\n    let upgradedConn: MultiaddrConnection\n    let muxerFactory: StreamMuxerFactory | undefined\n    let cryptoProtocol\n\n    this.components.metrics?.trackMultiaddrConnection(maConn)\n\n    maConn.log.trace('starting the %s connection upgrade', direction)\n\n    // Protect\n    let protectedConn = maConn\n\n    if (opts?.skipProtection !== true) {\n      const protector = this.components.connectionProtector\n\n      if (protector != null) {\n        maConn.log('protecting the %s connection', direction)\n        protectedConn = await protector.protect(maConn, opts)\n      }\n    }\n\n    try {\n      // Encrypt the connection\n      encryptedConn = protectedConn\n      if (opts?.skipEncryption !== true) {\n        opts?.onProgress?.(new CustomProgressEvent(`upgrader:encrypt-${direction}-connection`));\n\n        ({\n          conn: encryptedConn,\n          remotePeer,\n          protocol: cryptoProtocol,\n          streamMuxer: muxerFactory\n        } = await (direction === 'inbound'\n          ? this._encryptInbound(protectedConn, opts)\n          : this._encryptOutbound(protectedConn, opts)\n        ))\n\n        const maConn: MultiaddrConnection = {\n          ...protectedConn,\n          ...encryptedConn\n        }\n\n        await this.shouldBlockConnection(direction === 'inbound' ? 'denyInboundEncryptedConnection' : 'denyOutboundEncryptedConnection', remotePeer, maConn)\n      } else {\n        const idStr = maConn.remoteAddr.getPeerId()\n\n        if (idStr == null) {\n          throw new InvalidMultiaddrError(`${direction} connection that skipped encryption must have a peer id`)\n        }\n\n        const remotePeerId = peerIdFromString(idStr)\n\n        cryptoProtocol = 'native'\n        remotePeer = remotePeerId\n      }\n\n      // this can happen if we dial a multiaddr without a peer id, we only find\n      // out the identity of the remote after the connection is encrypted\n      if (remotePeer.equals(this.components.peerId)) {\n        const err = new InvalidPeerIdError('Can not dial self')\n        maConn.abort(err)\n        throw err\n      }\n\n      upgradedConn = encryptedConn\n      if (opts?.muxerFactory != null) {\n        muxerFactory = opts.muxerFactory\n      } else if (muxerFactory == null && this.streamMuxers.size > 0) {\n        opts?.onProgress?.(new CustomProgressEvent(`upgrader:multiplex-${direction}-connection`))\n\n        // Multiplex the connection\n        const multiplexed = await (direction === 'inbound'\n          ? this._multiplexInbound({\n            ...protectedConn,\n            ...encryptedConn\n          }, this.streamMuxers, opts)\n          : this._multiplexOutbound({\n            ...protectedConn,\n            ...encryptedConn\n          }, this.streamMuxers, opts))\n        muxerFactory = multiplexed.muxerFactory\n        upgradedConn = multiplexed.stream\n      }\n    } catch (err: any) {\n      maConn.log.error('failed to upgrade inbound connection %s %a - %e', direction === 'inbound' ? 'from' : 'to', maConn.remoteAddr, err)\n      throw err\n    }\n\n    await this.shouldBlockConnection(direction === 'inbound' ? 'denyInboundUpgradedConnection' : 'denyOutboundUpgradedConnection', remotePeer, maConn)\n\n    maConn.log('successfully upgraded %s connection', direction)\n\n    return this._createConnection({\n      cryptoProtocol,\n      direction,\n      maConn,\n      upgradedConn,\n      muxerFactory,\n      remotePeer,\n      limits: opts?.limits\n    })\n  }\n\n  /**\n   * A convenience method for generating a new `Connection`\n   */\n  _createConnection (opts: CreateConnectionOptions): Connection {\n    const {\n      cryptoProtocol,\n      direction,\n      maConn,\n      upgradedConn,\n      remotePeer,\n      muxerFactory,\n      limits\n    } = opts\n\n    let muxer: StreamMuxer | undefined\n    let newStream: ((multicodecs: string[], options?: AbortOptions) => Promise<Stream>) | undefined\n    let connection: Connection // eslint-disable-line prefer-const\n\n    if (muxerFactory != null) {\n      // Create the muxer\n      muxer = muxerFactory.createStreamMuxer({\n        direction,\n        // Run anytime a remote stream is created\n        onIncomingStream: muxedStream => {\n          if (connection == null) {\n            return\n          }\n\n          const signal = AbortSignal.timeout(this.inboundStreamProtocolNegotiationTimeout)\n          setMaxListeners(Infinity, signal)\n\n          void Promise.resolve()\n            .then(async () => {\n              const protocols = this.components.registrar.getProtocols()\n\n              const { stream, protocol } = await mss.handle(muxedStream, protocols, {\n                signal,\n                log: muxedStream.log,\n                yieldBytes: false\n              })\n\n              if (connection == null) {\n                return\n              }\n\n              connection.log('incoming stream opened on %s', protocol)\n\n              const incomingLimit = findIncomingStreamLimit(protocol, this.components.registrar)\n              const streamCount = countStreams(protocol, 'inbound', connection)\n\n              if (streamCount === incomingLimit) {\n                const err = new TooManyInboundProtocolStreamsError(`Too many inbound protocol streams for protocol \"${protocol}\" - limit ${incomingLimit}`)\n                muxedStream.abort(err)\n\n                throw err\n              }\n\n              // after the handshake the returned stream can have early data so override\n              // the source/sink\n              muxedStream.source = stream.source\n              muxedStream.sink = stream.sink\n              muxedStream.protocol = protocol\n\n              // allow closing the write end of a not-yet-negotiated stream\n              if (stream.closeWrite != null) {\n                muxedStream.closeWrite = stream.closeWrite\n              }\n\n              // allow closing the read end of a not-yet-negotiated stream\n              if (stream.closeRead != null) {\n                muxedStream.closeRead = stream.closeRead\n              }\n\n              // make sure we don't try to negotiate a stream we are closing\n              if (stream.close != null) {\n                muxedStream.close = stream.close\n              }\n\n              // If a protocol stream has been successfully negotiated and is to be passed to the application,\n              // the peer store should ensure that the peer is registered with that protocol\n              await this.components.peerStore.merge(remotePeer, {\n                protocols: [protocol]\n              }, {\n                signal\n              })\n\n              this.components.metrics?.trackProtocolStream(muxedStream, connection)\n\n              this._onStream({ connection, stream: muxedStream, protocol })\n            })\n            .catch(async err => {\n              connection.log.error('error handling incoming stream id %s - %e', muxedStream.id, err)\n\n              if (muxedStream.timeline.close == null) {\n                await muxedStream.close({\n                  signal\n                })\n                  .catch(err => muxedStream.abort(err))\n              }\n            })\n        }\n      })\n\n      newStream = async (protocols: string[], options: NewStreamOptions = {}): Promise<Stream> => {\n        if (muxer == null) {\n          throw new MuxerUnavailableError('Connection is not multiplexed')\n        }\n\n        connection.log.trace('starting new stream for protocols %s', protocols)\n        const muxedStream = await muxer.newStream()\n        connection.log.trace('started new stream %s for protocols %s', muxedStream.id, protocols)\n\n        try {\n          if (options.signal == null) {\n            muxedStream.log('no abort signal was passed while trying to negotiate protocols %s falling back to default timeout', protocols)\n\n            const signal = AbortSignal.timeout(this.outboundStreamProtocolNegotiationTimeout)\n            setMaxListeners(Infinity, signal)\n\n            options = {\n              ...options,\n              signal\n            }\n          }\n\n          muxedStream.log.trace('selecting protocol from protocols %s', protocols)\n\n          const {\n            stream,\n            protocol\n          } = await mss.select(muxedStream, protocols, {\n            ...options,\n            log: muxedStream.log,\n            yieldBytes: true\n          })\n\n          muxedStream.log.trace('selected protocol %s', protocol)\n\n          const outgoingLimit = findOutgoingStreamLimit(protocol, this.components.registrar, options)\n          const streamCount = countStreams(protocol, 'outbound', connection)\n\n          if (streamCount >= outgoingLimit) {\n            const err = new TooManyOutboundProtocolStreamsError(`Too many outbound protocol streams for protocol \"${protocol}\" - ${streamCount}/${outgoingLimit}`)\n            muxedStream.abort(err)\n\n            throw err\n          }\n\n          // If a protocol stream has been successfully negotiated and is to be passed to the application,\n          // the peer store should ensure that the peer is registered with that protocol\n          await this.components.peerStore.merge(remotePeer, {\n            protocols: [protocol]\n          })\n\n          // after the handshake the returned stream can have early data so override\n          // the source/sink\n          muxedStream.source = stream.source\n          muxedStream.sink = stream.sink\n          muxedStream.protocol = protocol\n\n          // allow closing the write end of a not-yet-negotiated stream\n          if (stream.closeWrite != null) {\n            muxedStream.closeWrite = stream.closeWrite\n          }\n\n          // allow closing the read end of a not-yet-negotiated stream\n          if (stream.closeRead != null) {\n            muxedStream.closeRead = stream.closeRead\n          }\n\n          // make sure we don't try to negotiate a stream we are closing\n          if (stream.close != null) {\n            muxedStream.close = stream.close\n          }\n\n          this.components.metrics?.trackProtocolStream(muxedStream, connection)\n\n          return muxedStream\n        } catch (err: any) {\n          connection.log.error('could not create new outbound stream on connection %s %a for protocols %s - %e', direction === 'inbound' ? 'from' : 'to', opts.maConn.remoteAddr, protocols, err)\n\n          if (muxedStream.timeline.close == null) {\n            muxedStream.abort(err)\n          }\n\n          throw err\n        }\n      }\n\n      // Pipe all data through the muxer\n      void Promise.all([\n        muxer.sink(upgradedConn.source),\n        upgradedConn.sink(muxer.source)\n      ]).catch(err => {\n        connection.log.error('error piping data through muxer - %e', err)\n      })\n    }\n\n    const _timeline = maConn.timeline\n    maConn.timeline = new Proxy(_timeline, {\n      set: (...args) => {\n        if (args[1] === 'close' && args[2] != null && _timeline.close == null) {\n          // Wait for close to finish before notifying of the closure\n          (async () => {\n            try {\n              if (connection.status === 'open') {\n                await connection.close()\n              }\n            } catch (err: any) {\n              connection.log.error('error closing connection after timeline close %e', err)\n            } finally {\n              this.events.safeDispatchEvent('connection:close', {\n                detail: connection\n              })\n            }\n          })().catch(err => {\n            connection.log.error('error thrown while dispatching connection:close event %e', err)\n          })\n        }\n\n        return Reflect.set(...args)\n      }\n    })\n    maConn.timeline.upgraded = Date.now()\n\n    const errConnectionNotMultiplexed = (): any => {\n      throw new MuxerUnavailableError('Connection is not multiplexed')\n    }\n\n    // Create the connection\n    connection = createConnection({\n      remoteAddr: maConn.remoteAddr,\n      remotePeer,\n      status: 'open',\n      direction,\n      timeline: maConn.timeline,\n      multiplexer: muxer?.protocol,\n      encryption: cryptoProtocol,\n      limits,\n      logger: this.components.logger,\n      newStream: newStream ?? errConnectionNotMultiplexed,\n      getStreams: () => {\n        return muxer?.streams ?? []\n      },\n      close: async (options?: AbortOptions) => {\n        // ensure remaining streams are closed gracefully\n        await muxer?.close(options)\n\n        // close the underlying transport\n        await maConn.close(options)\n      },\n      abort: (err) => {\n        maConn.abort(err)\n\n        // ensure remaining streams are aborted\n        muxer?.abort(err)\n      }\n    })\n\n    this.events.safeDispatchEvent('connection:open', {\n      detail: connection\n    })\n\n    // @ts-expect-error nah\n    connection.__maConnTimeline = _timeline\n\n    return connection\n  }\n\n  /**\n   * Routes incoming streams to the correct handler\n   */\n  _onStream (opts: OnStreamOptions): void {\n    const { connection, stream, protocol } = opts\n    const { handler, options } = this.components.registrar.getHandler(protocol)\n\n    if (connection.limits != null && options.runOnLimitedConnection !== true) {\n      throw new LimitedConnectionError('Cannot open protocol stream on limited connection')\n    }\n\n    handler({ connection, stream })\n  }\n\n  /**\n   * Attempts to encrypt the incoming `connection` with the provided `cryptos`\n   */\n  async _encryptInbound (connection: MultiaddrConnection, options?: AbortOptions): Promise<CryptoResult> {\n    const protocols = Array.from(this.connectionEncrypters.keys())\n\n    try {\n      const { stream, protocol } = await mss.handle(connection, protocols, {\n        ...options,\n        log: connection.log\n      })\n      const encrypter = this.connectionEncrypters.get(protocol)\n\n      if (encrypter == null) {\n        throw new EncryptionFailedError(`no crypto module found for ${protocol}`)\n      }\n\n      connection.log('encrypting inbound connection to %a using %s', connection.remoteAddr, protocol)\n\n      return {\n        ...await encrypter.secureInbound(stream, options),\n        protocol\n      }\n    } catch (err: any) {\n      connection.log.error('encrypting inbound connection from %a failed', connection.remoteAddr, err)\n      throw new EncryptionFailedError(err.message)\n    }\n  }\n\n  /**\n   * Attempts to encrypt the given `connection` with the provided connection encrypters.\n   * The first `ConnectionEncrypter` module to succeed will be used\n   */\n  async _encryptOutbound (connection: MultiaddrConnection, options: SecureConnectionOptions): Promise<CryptoResult> {\n    const protocols = Array.from(this.connectionEncrypters.keys())\n\n    try {\n      connection.log.trace('selecting encrypter from %s', protocols)\n\n      const { stream, protocol } = await mss.select(connection, protocols, {\n        ...options,\n        log: connection.log,\n        yieldBytes: true\n      })\n      const encrypter = this.connectionEncrypters.get(protocol)\n\n      if (encrypter == null) {\n        throw new EncryptionFailedError(`no crypto module found for ${protocol}`)\n      }\n\n      connection.log('encrypting outbound connection to %a using %s', connection.remoteAddr, protocol)\n\n      return {\n        ...await encrypter.secureOutbound(stream, options),\n        protocol\n      }\n    } catch (err: any) {\n      connection.log.error('encrypting outbound connection to %a failed', connection.remoteAddr, err)\n      throw new EncryptionFailedError(err.message)\n    }\n  }\n\n  /**\n   * Selects one of the given muxers via multistream-select. That\n   * muxer will be used for all future streams on the connection.\n   */\n  async _multiplexOutbound (connection: MultiaddrConnection, muxers: Map<string, StreamMuxerFactory>, options: AbortOptions): Promise<{ stream: MultiaddrConnection, muxerFactory?: StreamMuxerFactory }> {\n    const protocols = Array.from(muxers.keys())\n    connection.log('outbound selecting muxer %s', protocols)\n    try {\n      connection.log.trace('selecting stream muxer from %s', protocols)\n\n      const {\n        stream,\n        protocol\n      } = await mss.select(connection, protocols, {\n        ...options,\n        log: connection.log,\n        yieldBytes: true\n      })\n\n      connection.log('selected %s as muxer protocol', protocol)\n      const muxerFactory = muxers.get(protocol)\n\n      return { stream, muxerFactory }\n    } catch (err: any) {\n      connection.log.error('error multiplexing outbound connection', err)\n      throw new MuxerUnavailableError(String(err))\n    }\n  }\n\n  /**\n   * Registers support for one of the given muxers via multistream-select. The\n   * selected muxer will be used for all future streams on the connection.\n   */\n  async _multiplexInbound (connection: MultiaddrConnection, muxers: Map<string, StreamMuxerFactory>, options: AbortOptions): Promise<{ stream: MultiaddrConnection, muxerFactory?: StreamMuxerFactory }> {\n    const protocols = Array.from(muxers.keys())\n    connection.log('inbound handling muxers %s', protocols)\n    try {\n      const { stream, protocol } = await mss.handle(connection, protocols, {\n        ...options,\n        log: connection.log\n      })\n      const muxerFactory = muxers.get(protocol)\n\n      return { stream, muxerFactory }\n    } catch (err: any) {\n      connection.log.error('error multiplexing inbound connection', err)\n      throw new MuxerUnavailableError(String(err))\n    }\n  }\n\n  getConnectionEncrypters (): Map<string, ConnectionEncrypter<unknown>> {\n    return this.connectionEncrypters\n  }\n\n  getStreamMuxers (): Map<string, StreamMuxerFactory> {\n    return this.streamMuxers\n  }\n}\n", "export const version = '2.9.0'\nexport const name = 'js-libp2p'\n", "import * as pkg from './version.js'\n\nexport function userAgent (name?: string, version?: string): string {\n  return `${name ?? pkg.name}/${version ?? pkg.version} browser/${globalThis.navigator.userAgent}`\n}\n", "import { publicKeyFromProtobuf } from '@libp2p/crypto/keys'\nimport { contentRoutingSymbol, peerDiscoverySymbol, peerRoutingSymbol, InvalidParametersError } from '@libp2p/interface'\nimport { defaultLogger } from '@libp2p/logger'\nimport { PeerSet } from '@libp2p/peer-collections'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { persistentPeerStore } from '@libp2p/peer-store'\nimport { isMultiaddr } from '@multiformats/multiaddr'\nimport { MemoryDatastore } from 'datastore-core/memory'\nimport { TypedEventEmitter, setMaxListeners } from 'main-event'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { AddressManager } from './address-manager/index.js'\nimport { checkServiceDependencies, defaultComponents } from './components.js'\nimport { connectionGater } from './config/connection-gater.js'\nimport { DefaultConnectionManager } from './connection-manager/index.js'\nimport { ConnectionMonitor } from './connection-monitor.js'\nimport { CompoundContentRouting } from './content-routing.js'\nimport { DefaultPeerRouting } from './peer-routing.js'\nimport { RandomWalk } from './random-walk.js'\nimport { Registrar } from './registrar.js'\nimport { DefaultTransportManager } from './transport-manager.js'\nimport { Upgrader } from './upgrader.js'\nimport { userAgent } from './user-agent.js'\nimport * as pkg from './version.js'\nimport type { Components } from './components.js'\nimport type { Libp2p as Libp2pInterface, Libp2pInit } from './index.js'\nimport type { PeerRouting, ContentRouting, Libp2pEvents, PendingDial, ServiceMap, AbortOptions, ComponentLogger, Logger, Connection, NewStreamOptions, Stream, Metrics, PeerId, PeerInfo, PeerStore, Topology, Libp2pStatus, IsDialableOptions, DialOptions, PublicKey, Ed25519PeerId, Secp256k1PeerId, RSAPublicKey, RSAPeerId, URLPeerId, Ed25519PublicKey, Secp256k1PublicKey, StreamHandler, StreamHandlerOptions } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport class Libp2p<T extends ServiceMap = ServiceMap> extends TypedEventEmitter<Libp2pEvents> implements Libp2pInterface<T> {\n  public peerId: PeerId\n  public peerStore: PeerStore\n  public contentRouting: ContentRouting\n  public peerRouting: PeerRouting\n  public metrics?: Metrics\n  public services: T\n  public logger: ComponentLogger\n  public status: Libp2pStatus\n\n  public components: Components & T\n  private readonly log: Logger\n\n  // eslint-disable-next-line complexity\n  constructor (init: Libp2pInit<T> & { peerId: PeerId }) {\n    super()\n\n    this.status = 'stopped'\n\n    // event bus - components can listen to this emitter to be notified of system events\n    // and also cause them to be emitted\n    const events = new TypedEventEmitter<Libp2pEvents>()\n    const originalDispatch = events.dispatchEvent.bind(events)\n    events.dispatchEvent = (evt: any) => {\n      const internalResult = originalDispatch(evt)\n      const externalResult = this.dispatchEvent(\n        new CustomEvent(evt.type, { detail: evt.detail })\n      )\n\n      return internalResult || externalResult\n    }\n\n    // This emitter gets listened to a lot\n    setMaxListeners(Infinity, events)\n\n    this.peerId = init.peerId\n    this.logger = init.logger ?? defaultLogger()\n    this.log = this.logger.forComponent('libp2p')\n    // @ts-expect-error {} may not be of type T\n    this.services = {}\n\n    const nodeInfoName = init.nodeInfo?.name ?? pkg.name\n    const nodeInfoVersion = init.nodeInfo?.version ?? pkg.version\n\n    // @ts-expect-error defaultComponents is missing component types added later\n    const components = this.components = defaultComponents({\n      peerId: init.peerId,\n      privateKey: init.privateKey,\n      nodeInfo: {\n        name: nodeInfoName,\n        version: nodeInfoVersion,\n        userAgent: init.nodeInfo?.userAgent ?? userAgent(nodeInfoName, nodeInfoVersion)\n      },\n      logger: this.logger,\n      events,\n      datastore: init.datastore ?? new MemoryDatastore(),\n      connectionGater: connectionGater(init.connectionGater),\n      dns: init.dns\n    })\n\n    // Create Metrics\n    if (init.metrics != null) {\n      this.metrics = this.configureComponent('metrics', init.metrics(this.components))\n    }\n\n    this.peerStore = this.configureComponent('peerStore', persistentPeerStore(components, {\n      addressFilter: this.components.connectionGater.filterMultiaddrForPeer,\n      ...init.peerStore\n    }))\n\n    components.events.addEventListener('peer:update', evt => {\n      // if there was no peer previously in the peer store this is a new peer\n      if (evt.detail.previous == null) {\n        const peerInfo: PeerInfo = {\n          id: evt.detail.peer.id,\n          multiaddrs: evt.detail.peer.addresses.map(a => a.multiaddr)\n        }\n\n        components.events.safeDispatchEvent('peer:discovery', { detail: peerInfo })\n      }\n    })\n\n    // Set up connection protector if configured\n    if (init.connectionProtector != null) {\n      this.configureComponent('connectionProtector', init.connectionProtector(components))\n    }\n\n    // Set up the Upgrader\n    this.components.upgrader = new Upgrader(this.components, {\n      connectionEncrypters: (init.connectionEncrypters ?? []).map((fn, index) => this.configureComponent(`connection-encryption-${index}`, fn(this.components))),\n      streamMuxers: (init.streamMuxers ?? []).map((fn, index) => this.configureComponent(`stream-muxers-${index}`, fn(this.components))),\n      inboundUpgradeTimeout: init.connectionManager?.inboundUpgradeTimeout,\n      inboundStreamProtocolNegotiationTimeout: init.connectionManager?.inboundStreamProtocolNegotiationTimeout ?? init.connectionManager?.protocolNegotiationTimeout,\n      outboundStreamProtocolNegotiationTimeout: init.connectionManager?.outboundStreamProtocolNegotiationTimeout ?? init.connectionManager?.protocolNegotiationTimeout\n    })\n\n    // Setup the transport manager\n    this.configureComponent('transportManager', new DefaultTransportManager(this.components, init.transportManager))\n\n    // Create the Connection Manager\n    this.configureComponent('connectionManager', new DefaultConnectionManager(this.components, init.connectionManager))\n\n    if (init.connectionMonitor?.enabled !== false) {\n      // Create the Connection Monitor if not disabled\n      this.configureComponent('connectionMonitor', new ConnectionMonitor(this.components, init.connectionMonitor))\n    }\n\n    // Create the Registrar\n    this.configureComponent('registrar', new Registrar(this.components))\n\n    // Addresses {listen, announce, noAnnounce}\n    this.configureComponent('addressManager', new AddressManager(this.components, init.addresses))\n\n    // Peer routers\n    const peerRouters: PeerRouting[] = (init.peerRouters ?? []).map((fn, index) => this.configureComponent(`peer-router-${index}`, fn(this.components)))\n    this.peerRouting = this.components.peerRouting = this.configureComponent('peerRouting', new DefaultPeerRouting(this.components, {\n      routers: peerRouters\n    }))\n\n    // Content routers\n    const contentRouters: ContentRouting[] = (init.contentRouters ?? []).map((fn, index) => this.configureComponent(`content-router-${index}`, fn(this.components)))\n    this.contentRouting = this.components.contentRouting = this.configureComponent('contentRouting', new CompoundContentRouting(this.components, {\n      routers: contentRouters\n    }))\n\n    // Random walk\n    this.configureComponent('randomWalk', new RandomWalk(this.components))\n\n    // Discovery modules\n    ;(init.peerDiscovery ?? []).forEach((fn, index) => {\n      const service = this.configureComponent(`peer-discovery-${index}`, fn(this.components))\n\n      service.addEventListener('peer', (evt) => {\n        this.#onDiscoveryPeer(evt)\n      })\n    })\n\n    // Transport modules\n    init.transports?.forEach((fn, index) => {\n      this.components.transportManager.add(this.configureComponent(`transport-${index}`, fn(this.components)))\n    })\n\n    // User defined modules\n    if (init.services != null) {\n      for (const name of Object.keys(init.services)) {\n        const createService = init.services[name]\n        const service: any = createService(this.components)\n\n        if (service == null) {\n          this.log.error('service factory %s returned null or undefined instance', name)\n          continue\n        }\n\n        this.services[name as keyof T] = service\n        this.configureComponent(name, service)\n\n        if (service[contentRoutingSymbol] != null) {\n          this.log('registering service %s for content routing', name)\n          contentRouters.push(service[contentRoutingSymbol])\n        }\n\n        if (service[peerRoutingSymbol] != null) {\n          this.log('registering service %s for peer routing', name)\n          peerRouters.push(service[peerRoutingSymbol])\n        }\n\n        if (service[peerDiscoverySymbol] != null) {\n          this.log('registering service %s for peer discovery', name)\n          service[peerDiscoverySymbol].addEventListener?.('peer', (evt: CustomEvent<PeerInfo>) => {\n            this.#onDiscoveryPeer(evt)\n          })\n        }\n      }\n    }\n\n    // Ensure all services have their required dependencies\n    checkServiceDependencies(components)\n  }\n\n  private configureComponent <T> (name: string, component: T): T {\n    if (component == null) {\n      this.log.error('component %s was null or undefined', name)\n    }\n\n    // @ts-expect-error cannot assign props\n    this.components[name] = component\n\n    return component\n  }\n\n  /**\n   * Starts the libp2p node and all its subsystems\n   */\n  async start (): Promise<void> {\n    if (this.status !== 'stopped') {\n      return\n    }\n\n    this.status = 'starting'\n\n    this.log('libp2p is starting')\n\n    try {\n      await this.components.beforeStart?.()\n      await this.components.start()\n      await this.components.afterStart?.()\n\n      this.status = 'started'\n      this.safeDispatchEvent('start', { detail: this })\n      this.log('libp2p has started')\n    } catch (err: any) {\n      this.log.error('An error occurred starting libp2p', err)\n      // set status to 'started' so this.stop() will stop any running components\n      this.status = 'started'\n      await this.stop()\n      throw err\n    }\n  }\n\n  /**\n   * Stop the libp2p node by closing its listeners and open connections\n   */\n  async stop (): Promise<void> {\n    if (this.status !== 'started') {\n      return\n    }\n\n    this.log('libp2p is stopping')\n\n    this.status = 'stopping'\n\n    await this.components.beforeStop?.()\n    await this.components.stop()\n    await this.components.afterStop?.()\n\n    this.status = 'stopped'\n    this.safeDispatchEvent('stop', { detail: this })\n    this.log('libp2p has stopped')\n  }\n\n  getConnections (peerId?: PeerId): Connection[] {\n    return this.components.connectionManager.getConnections(peerId)\n  }\n\n  getDialQueue (): PendingDial[] {\n    return this.components.connectionManager.getDialQueue()\n  }\n\n  getPeers (): PeerId[] {\n    const peerSet = new PeerSet()\n\n    for (const conn of this.components.connectionManager.getConnections()) {\n      peerSet.add(conn.remotePeer)\n    }\n\n    return Array.from(peerSet)\n  }\n\n  async dial (peer: PeerId | Multiaddr | Multiaddr[], options: DialOptions = {}): Promise<Connection> {\n    return this.components.connectionManager.openConnection(peer, {\n      // ensure any userland dials take top priority in the queue\n      priority: 75,\n      ...options\n    })\n  }\n\n  async dialProtocol (peer: PeerId | Multiaddr | Multiaddr[], protocols: string | string[], options: NewStreamOptions = {}): Promise<Stream> {\n    if (protocols == null) {\n      throw new InvalidParametersError('no protocols were provided to open a stream')\n    }\n\n    protocols = Array.isArray(protocols) ? protocols : [protocols]\n\n    if (protocols.length === 0) {\n      throw new InvalidParametersError('no protocols were provided to open a stream')\n    }\n\n    const connection = await this.dial(peer, options)\n\n    return connection.newStream(protocols, options)\n  }\n\n  getMultiaddrs (): Multiaddr[] {\n    return this.components.addressManager.getAddresses()\n  }\n\n  getProtocols (): string[] {\n    return this.components.registrar.getProtocols()\n  }\n\n  async hangUp (peer: PeerId | Multiaddr, options: AbortOptions = {}): Promise<void> {\n    if (isMultiaddr(peer)) {\n      peer = peerIdFromString(peer.getPeerId() ?? '')\n    }\n\n    await this.components.connectionManager.closeConnections(peer, options)\n  }\n\n  /**\n   * Get the public key for the given peer id\n   */\n  async getPublicKey (peer: Ed25519PeerId, options?: AbortOptions): Promise<Ed25519PublicKey>\n  async getPublicKey (peer: Secp256k1PeerId, options?: AbortOptions): Promise<Secp256k1PublicKey>\n  async getPublicKey (peer: RSAPeerId, options?: AbortOptions): Promise<RSAPublicKey>\n  async getPublicKey (peer: URLPeerId, options?: AbortOptions): Promise<never>\n  async getPublicKey (peer: PeerId, options?: AbortOptions): Promise<PublicKey>\n  async getPublicKey (peer: PeerId, options: AbortOptions = {}): Promise<PublicKey> {\n    this.log('getPublicKey %p', peer)\n\n    if (peer.publicKey != null) {\n      return peer.publicKey\n    }\n\n    try {\n      const peerInfo = await this.peerStore.get(peer, options)\n\n      if (peerInfo.id.publicKey != null) {\n        return peerInfo.id.publicKey\n      }\n    } catch (err: any) {\n      if (err.name !== 'NotFoundError') {\n        throw err\n      }\n    }\n\n    const peerKey = uint8ArrayConcat([\n      uint8ArrayFromString('/pk/'),\n      peer.toMultihash().bytes\n    ])\n\n    // search any available content routing methods\n    const bytes = await this.contentRouting.get(peerKey, options)\n\n    // ensure the returned key is valid\n    const publicKey = publicKeyFromProtobuf(bytes)\n\n    await this.peerStore.patch(peer, {\n      publicKey\n    }, options)\n\n    return publicKey\n  }\n\n  async handle (protocols: string | string[], handler: StreamHandler, options?: StreamHandlerOptions): Promise<void> {\n    if (!Array.isArray(protocols)) {\n      protocols = [protocols]\n    }\n\n    await Promise.all(\n      protocols.map(async protocol => {\n        await this.components.registrar.handle(protocol, handler, options)\n      })\n    )\n  }\n\n  async unhandle (protocols: string[] | string, options?: AbortOptions): Promise<void> {\n    if (!Array.isArray(protocols)) {\n      protocols = [protocols]\n    }\n\n    await Promise.all(\n      protocols.map(async protocol => {\n        await this.components.registrar.unhandle(protocol, options)\n      })\n    )\n  }\n\n  async register (protocol: string, topology: Topology, options?: AbortOptions): Promise<string> {\n    return this.components.registrar.register(protocol, topology, options)\n  }\n\n  unregister (id: string): void {\n    this.components.registrar.unregister(id)\n  }\n\n  async isDialable (multiaddr: Multiaddr, options: IsDialableOptions = {}): Promise<boolean> {\n    return this.components.connectionManager.isDialable(multiaddr, options)\n  }\n\n  /**\n   * Called whenever peer discovery services emit `peer` events and adds peers\n   * to the peer store.\n   */\n  #onDiscoveryPeer (evt: CustomEvent<PeerInfo>): void {\n    const { detail: peer } = evt\n\n    if (peer.id.toString() === this.peerId.toString()) {\n      this.log.error('peer discovery mechanism discovered self')\n      return\n    }\n\n    void this.components.peerStore.merge(peer.id, {\n      multiaddrs: peer.multiaddrs\n    })\n      .catch(err => { this.log.error(err) })\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * Use the `createLibp2p` function to create a libp2p node.\n *\n * @example\n *\n * ```typescript\n * import { createLibp2p } from 'libp2p'\n *\n * const node = await createLibp2p({\n *   // ...other options\n * })\n * ```\n */\n\nimport { generateKeyPair } from '@libp2p/crypto/keys'\nimport { peerIdFromPrivateKey } from '@libp2p/peer-id'\nimport { validateConfig } from './config.js'\nimport { Libp2p as Libp2pClass } from './libp2p.js'\nimport type { AddressManagerInit, AddressFilter } from './address-manager/index.js'\nimport type { Components } from './components.js'\nimport type { ConnectionManagerInit } from './connection-manager/index.js'\nimport type { ConnectionMonitorInit } from './connection-monitor.js'\nimport type { TransportManagerInit } from './transport-manager.js'\nimport type { Libp2p, ServiceMap, ComponentLogger, NodeInfo, ConnectionProtector, ConnectionEncrypter, ConnectionGater, ContentRouting, Metrics, PeerDiscovery, PeerRouting, StreamMuxerFactory, Transport, PrivateKey } from '@libp2p/interface'\nimport type { PersistentPeerStoreInit } from '@libp2p/peer-store'\nimport type { DNS } from '@multiformats/dns'\nimport type { Datastore } from 'interface-datastore'\n\nexport type ServiceFactoryMap<T extends ServiceMap = ServiceMap> = {\n  [Property in keyof T]: (components: Components & T) => T[Property]\n}\n\nexport type { AddressManagerInit, AddressFilter }\n\nexport { dnsaddrResolver } from './connection-manager/resolvers/index.ts'\n\n/**\n * For Libp2p configurations and modules details read the [Configuration Document](https://github.com/libp2p/js-libp2p/tree/main/doc/CONFIGURATION.md).\n */\nexport interface Libp2pInit<T extends ServiceMap = ServiceMap> {\n  /**\n   * The private key is used in cryptographic operations and the Peer ID derived\n   * from it's corresponding public key is used to identify the node to other\n   * peers on the network.\n   *\n   * If this is not passed a new Ed25519 private key will be generated.\n   */\n  privateKey?: PrivateKey\n\n  /**\n   * Metadata about the node - implementation name, version number, etc\n   */\n  nodeInfo?: Partial<NodeInfo>\n\n  /**\n   * Addresses for transport listening and to advertise to the network\n   */\n  addresses?: AddressManagerInit\n\n  /**\n   * libp2p Connection Manager configuration\n   */\n  connectionManager?: ConnectionManagerInit\n\n  /**\n   * libp2p Connection Monitor configuration\n   */\n  connectionMonitor?: ConnectionMonitorInit\n\n  /**\n   * A connection gater can deny new connections based on user criteria\n   */\n  connectionGater?: ConnectionGater\n\n  /**\n   * libp2p transport manager configuration\n   */\n  transportManager?: TransportManagerInit\n\n  /**\n   * An optional datastore to persist peer information, DHT records, etc.\n   *\n   * An in-memory datastore will be used if one is not provided.\n   */\n  datastore?: Datastore\n\n  /**\n   * libp2p PeerStore configuration\n   */\n  peerStore?: PersistentPeerStoreInit\n\n  /**\n   * Transports are low-level communication channels\n   */\n  transports?: Array<(components: Components) => Transport>\n\n  /**\n   * Stream muxers allow the creation of many data streams over a single\n   * connection.\n   */\n  streamMuxers?: Array<(components: Components) => StreamMuxerFactory>\n\n  /**\n   * Connection encrypters ensure that data sent over connections cannot be\n   * eavesdropped on, and that the remote peer possesses the private key that\n   * corresponds to the public key that it's Peer ID is derived from.\n   */\n  connectionEncrypters?: Array<(components: Components) => ConnectionEncrypter>\n\n  /**\n   * Peer discovery mechanisms allow finding peers on the network\n   */\n  peerDiscovery?: Array<(components: Components) => PeerDiscovery>\n\n  /**\n   * Peer routers provide implementations for peer routing queries\n   */\n  peerRouters?: Array<(components: Components) => PeerRouting>\n\n  /**\n   * Content routers provide implementations for content routing queries\n   */\n  contentRouters?: Array<(components: Components) => ContentRouting>\n\n  /**\n   * A Metrics implementation can be supplied to collect metrics on this node\n   */\n  metrics?(components: Components): Metrics\n\n  /**\n   * A ConnectionProtector can be used to create a secure overlay on top of the network using pre-shared keys\n   */\n  connectionProtector?(components: Components): ConnectionProtector\n\n  /**\n   * Arbitrary libp2p modules\n   */\n  services?: ServiceFactoryMap<T>\n\n  /**\n   * An optional logging implementation that can be used to write runtime logs.\n   *\n   * Set the `DEBUG` env var or the `debug` key on LocalStorage to see logs.\n   *\n   * @example\n   *\n   * Node.js:\n   *\n   * ```console\n   * $ DEBUG=\"*libp2p:*\" node myscript.js\n   * ```\n   *\n   * Browsers:\n   *\n   * ```TypeScript\n   * localStorage.setItem('debug', '*libp2p:*')\n   * ```\n   */\n  logger?: ComponentLogger\n\n  /**\n   * An optional DNS resolver configuration. If omitted the default DNS resolver\n   * for the platform will be used which means `node:dns` on Node.js and\n   * DNS-JSON-over-HTTPS for browsers using Google and Cloudflare servers.\n   */\n  dns?: DNS\n}\n\nexport type { Libp2p, ConnectionManagerInit, ConnectionMonitorInit, TransportManagerInit }\n\nexport type Libp2pOptions<T extends ServiceMap = ServiceMap> = Libp2pInit<T> & { start?: boolean }\n\n/**\n * Returns a new instance of the Libp2p interface, generating a new PeerId\n * if one is not passed as part of the options.\n *\n * The node will be started unless `start: false` is passed as an option.\n *\n * @example\n *\n * ```TypeScript\n * import { createLibp2p } from 'libp2p'\n * import { tcp } from '@libp2p/tcp'\n * import { mplex } from '@libp2p/mplex'\n * import { noise } from '@chainsafe/libp2p-noise'\n * import { yamux } from '@chainsafe/libp2p-yamux'\n *\n * // specify options\n * const options = {\n *   transports: [tcp()],\n *   streamMuxers: [yamux(), mplex()],\n *   connectionEncrypters: [noise()]\n * }\n *\n * // create libp2p\n * const libp2p = await createLibp2p(options)\n * ```\n */\nexport async function createLibp2p <T extends ServiceMap = ServiceMap> (options: Libp2pOptions<T> = {}): Promise<Libp2p<T>> {\n  options.privateKey ??= await generateKeyPair('Ed25519')\n\n  const node = new Libp2pClass({\n    ...await validateConfig(options),\n    peerId: peerIdFromPrivateKey(options.privateKey)\n  })\n\n  if (options.start !== false) {\n    await node.start()\n  }\n\n  return node\n}\n\n// a non-exhaustive list of methods found on the libp2p object\nconst LIBP2P_METHODS = ['dial', 'dialProtocol', 'hangUp', 'handle', 'unhandle', 'getMultiaddrs', 'getProtocols']\n\n/**\n * Returns true if the passed object is a libp2p node - this can be used for\n * type guarding in TypeScript.\n */\nexport function isLibp2p <T extends ServiceMap = ServiceMap> (obj?: any): obj is Libp2p<T> {\n  if (obj == null) {\n    return false\n  }\n\n  if (obj instanceof Libp2pClass) {\n    return true\n  }\n\n  // if these are all functions it's probably a libp2p object\n  return LIBP2P_METHODS.every(m => typeof obj[m] === 'function')\n}\n", "import defer from 'p-defer'\nimport type { Source, Duplex } from 'it-stream-types'\n\n/**\n * A pair of streams where one drains from the other\n */\nexport function pair <T> (): Duplex<AsyncGenerator<T>, Source<T>, Promise<void>> {\n  const deferred = defer<Source<T>>()\n  let piped = false\n\n  return {\n    sink: async source => {\n      if (piped) {\n        throw new Error('already piped')\n      }\n\n      piped = true\n      deferred.resolve(source)\n    },\n    source: (async function * () {\n      const source = await deferred.promise\n\n      yield * source\n    }())\n  }\n}\n", "import { pair } from './index.js'\nimport type { Duplex, Source } from 'it-stream-types'\n\n/**\n * Two duplex streams that are attached to each other\n */\nexport function duplexPair <T> (): [Duplex<AsyncGenerator<T>, Source<T>, Promise<void>>, Duplex<AsyncGenerator<T>, Source<T>, Promise<void>>] {\n  const a = pair<T>()\n  const b = pair<T>()\n  return [\n    {\n      source: a.source,\n      sink: b.sink\n    },\n    {\n      source: b.source,\n      sink: a.sink\n    }\n  ]\n}\n", "export const NOISE_MSG_MAX_LENGTH_BYTES = 65535\nexport const NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG = NOISE_MSG_MAX_LENGTH_BYTES - 16\n\nexport const DUMP_SESSION_KEYS = Boolean(globalThis.process?.env?.DUMP_SESSION_KEYS)\n", "/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) */\n\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n/** Asserts something is boolean. */\nexport function abool(b: boolean): void {\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\n}\n\n/** Asserts something is positive integer. */\nexport function anumber(n: number): void {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n\n/** Asserts something is Uint8Array. */\nexport function abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n\n/**\n * Asserts something is hash\n * TODO: remove\n * @deprecated\n */\nexport function ahash(h: IHash): void {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.createHasher');\n  anumber(h.outputLen);\n  anumber(h.blockLen);\n}\n\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance: any, checkFinished = true): void {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\n\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out: any, instance: any): void {\n  abytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\n  }\n}\n\nexport type IHash = {\n  (data: string | Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\n\n/** Generic type encompassing 8/16/32-byte arrays - but not 64-byte. */\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr: TypedArray): Uint8Array {\n  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr: TypedArray): Uint32Array {\n  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays: TypedArray[]): void {\n  for (let i = 0; i < arrays.length; i++) {\n    arrays[i].fill(0);\n  }\n}\n\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr: TypedArray): DataView {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE: boolean = /* @__PURE__ */ (() =>\n  new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin: boolean = /* @__PURE__ */ (() =>\n  // @ts-ignore\n  typeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // @ts-ignore\n  if (hasHexBuiltin) return bytes.toHex();\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // @ts-ignore\n  if (hasHexBuiltin) return Uint8Array.fromHex(hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n// Used in micro\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  return BigInt(hex === '' ? '0' : '0x' + hex); // Big Endian\n}\n\n// Used in ff1\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\n\n// Used in micro, ff1\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\n\n// TODO: remove\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async (): Promise<void> => {};\n\n// Global symbols, but ts doesn't see them: https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('string expected');\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(new Uint8Array([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes: Uint8Array): string {\n  return new TextDecoder().decode(bytes);\n}\n\n// TODO: remove\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: string | Uint8Array): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  else if (isBytes(data)) data = copyBytes(data);\n  else throw new Error('Uint8Array expected, got ' + typeof data);\n  return data;\n}\n\n/**\n * Checks if two U8A use same underlying buffer and overlaps.\n * This is invalid and can corrupt data.\n */\nexport function overlapBytes(a: Uint8Array, b: Uint8Array): boolean {\n  return (\n    a.buffer === b.buffer && // best we can do, may fail with an obscure Proxy\n    a.byteOffset < b.byteOffset + b.byteLength && // a starts before b end\n    b.byteOffset < a.byteOffset + a.byteLength // b starts before a end\n  );\n}\n\n/**\n * If input and output overlap and input starts before output, we will overwrite end of input before\n * we start processing it, so this is not supported for most ciphers (except chacha/salse, which designed with this)\n */\nexport function complexOverlapBytes(input: Uint8Array, output: Uint8Array): void {\n  // This is very cursed. It works somehow, but I'm completely unsure,\n  // reasoning about overlapping aligned windows is very hard.\n  if (overlapBytes(input, output) && input.byteOffset < output.byteOffset)\n    throw new Error('complex overlap of input and output is not supported');\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Used in ARX only\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts: T2\n): T1 & T2 {\n  if (opts == null || typeof opts !== 'object') throw new Error('options must be defined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\n/** Compares 2 uint8array-s in kinda constant time. */\nexport function equalBytes(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// TODO: remove\n/** For runtime check if class implements interface. */\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: string | Uint8Array): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n}\n\n// This will allow to re-use with composable things like packed & base encoders\n// Also, we probably can make tags composable\n\n/** Sync cipher: takes byte array and returns byte array. */\nexport type Cipher = {\n  encrypt(plaintext: Uint8Array): Uint8Array;\n  decrypt(ciphertext: Uint8Array): Uint8Array;\n};\n\n/** Async cipher e.g. from built-in WebCrypto. */\nexport type AsyncCipher = {\n  encrypt(plaintext: Uint8Array): Promise<Uint8Array>;\n  decrypt(ciphertext: Uint8Array): Promise<Uint8Array>;\n};\n\n/** Cipher with `output` argument which can optimize by doing 1 less allocation. */\nexport type CipherWithOutput = Cipher & {\n  encrypt(plaintext: Uint8Array, output?: Uint8Array): Uint8Array;\n  decrypt(ciphertext: Uint8Array, output?: Uint8Array): Uint8Array;\n};\n\n/**\n * Params are outside of return type, so it is accessible before calling constructor.\n * If function support multiple nonceLength's, we return the best one.\n */\nexport type CipherParams = {\n  blockSize: number;\n  nonceLength?: number;\n  tagLength?: number;\n  varSizeNonce?: boolean;\n};\n/** ARX cipher, like salsa or chacha. */\nexport type ARXCipher = ((\n  key: Uint8Array,\n  nonce: Uint8Array,\n  AAD?: Uint8Array\n) => CipherWithOutput) & {\n  blockSize: number;\n  nonceLength: number;\n  tagLength: number;\n};\nexport type CipherCons<T extends any[]> = (key: Uint8Array, ...args: T) => Cipher;\n/**\n * Wraps a cipher: validates args, ensures encrypt() can only be called once.\n * @__NO_SIDE_EFFECTS__\n */\nexport const wrapCipher = <C extends CipherCons<any>, P extends CipherParams>(\n  params: P,\n  constructor: C\n): C & P => {\n  function wrappedCipher(key: Uint8Array, ...args: any[]): CipherWithOutput {\n    // Validate key\n    abytes(key);\n\n    // Big-Endian hardware is rare. Just in case someone still decides to run ciphers:\n    if (!isLE) throw new Error('Non little-endian hardware is not yet supported');\n\n    // Validate nonce if nonceLength is present\n    if (params.nonceLength !== undefined) {\n      const nonce = args[0];\n      if (!nonce) throw new Error('nonce / iv required');\n      if (params.varSizeNonce) abytes(nonce);\n      else abytes(nonce, params.nonceLength);\n    }\n\n    // Validate AAD if tagLength present\n    const tagl = params.tagLength;\n    if (tagl && args[1] !== undefined) {\n      abytes(args[1]);\n    }\n\n    const cipher = constructor(key, ...args);\n    const checkOutput = (fnLength: number, output?: Uint8Array) => {\n      if (output !== undefined) {\n        if (fnLength !== 2) throw new Error('cipher output not supported');\n        abytes(output);\n      }\n    };\n    // Create wrapped cipher with validation and single-use encryption\n    let called = false;\n    const wrCipher = {\n      encrypt(data: Uint8Array, output?: Uint8Array) {\n        if (called) throw new Error('cannot encrypt() twice with same key + nonce');\n        called = true;\n        abytes(data);\n        checkOutput(cipher.encrypt.length, output);\n        return (cipher as CipherWithOutput).encrypt(data, output);\n      },\n      decrypt(data: Uint8Array, output?: Uint8Array) {\n        abytes(data);\n        if (tagl && data.length < tagl)\n          throw new Error('invalid ciphertext length: smaller than tagLength=' + tagl);\n        checkOutput(cipher.decrypt.length, output);\n        return (cipher as CipherWithOutput).decrypt(data, output);\n      },\n    };\n\n    return wrCipher;\n  }\n\n  Object.assign(wrappedCipher, params);\n  return wrappedCipher as C & P;\n};\n\n/** Represents salsa / chacha stream. */\nexport type XorStream = (\n  key: Uint8Array,\n  nonce: Uint8Array,\n  data: Uint8Array,\n  output?: Uint8Array,\n  counter?: number\n) => Uint8Array;\n\n/**\n * By default, returns u8a of length.\n * When out is available, it checks it for validity and uses it.\n */\nexport function getOutput(\n  expectedLength: number,\n  out?: Uint8Array,\n  onlyAligned = true\n): Uint8Array {\n  if (out === undefined) return new Uint8Array(expectedLength);\n  if (out.length !== expectedLength)\n    throw new Error('invalid output length, expected ' + expectedLength + ', got: ' + out.length);\n  if (onlyAligned && !isAligned32(out)) throw new Error('invalid output, must be aligned');\n  return out;\n}\n\n/** Polyfill for Safari 14. */\nexport function setBigUint64(\n  view: DataView,\n  byteOffset: number,\n  value: bigint,\n  isLE: boolean\n): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\nexport function u64Lengths(dataLength: number, aadLength: number, isLE: boolean): Uint8Array {\n  abool(isLE);\n  const num = new Uint8Array(16);\n  const view = createView(num);\n  setBigUint64(view, 0, BigInt(aadLength), isLE);\n  setBigUint64(view, 8, BigInt(dataLength), isLE);\n  return num;\n}\n\n// Is byte array aligned to 4 byte offset (u32)?\nexport function isAligned32(bytes: Uint8Array): boolean {\n  return bytes.byteOffset % 4 === 0;\n}\n\n// copy bytes to new u8a (aligned). Because Buffer.slice is broken.\nexport function copyBytes(bytes: Uint8Array): Uint8Array {\n  return Uint8Array.from(bytes);\n}\n", "/**\n * Basic utils for ARX (add-rotate-xor) salsa and chacha ciphers.\n\nRFC8439 requires multi-step cipher stream, where\nauthKey starts with counter: 0, actual msg with counter: 1.\n\nFor this, we need a way to re-use nonce / counter:\n\n    const counter = new Uint8Array(4);\n    chacha(..., counter, ...); // counter is now 1\n    chacha(..., counter, ...); // counter is now 2\n\nThis is complicated:\n\n- 32-bit counters are enough, no need for 64-bit: max ArrayBuffer size in JS is 4GB\n- Original papers don't allow mutating counters\n- Counter overflow is undefined [^1]\n- Idea A: allow providing (nonce | counter) instead of just nonce, re-use it\n- Caveat: Cannot be re-used through all cases:\n- * chacha has (counter | nonce)\n- * xchacha has (nonce16 | counter | nonce16)\n- Idea B: separate nonce / counter and provide separate API for counter re-use\n- Caveat: there are different counter sizes depending on an algorithm.\n- salsa & chacha also differ in structures of key & sigma:\n  salsa20:      s[0] | k(4) | s[1] | nonce(2) | ctr(2) | s[2] | k(4) | s[3]\n  chacha:       s(4) | k(8) | ctr(1) | nonce(3)\n  chacha20orig: s(4) | k(8) | ctr(2) | nonce(2)\n- Idea C: helper method such as `setSalsaState(key, nonce, sigma, data)`\n- Caveat: we can't re-use counter array\n\nxchacha [^2] uses the subkey and remaining 8 byte nonce with ChaCha20 as normal\n(prefixed by 4 NUL bytes, since [RFC8439] specifies a 12-byte nonce).\n\n[^1]: https://mailarchive.ietf.org/arch/msg/cfrg/gsOnTJzcbgG6OqD8Sc0GO5aR_tU/\n[^2]: https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha#appendix-A.2\n\n * @module\n */\n// prettier-ignore\nimport {\n  type XorStream, abool, abytes, anumber, checkOpts, clean, copyBytes, u32\n} from './utils.ts';\n\n// We can't make top-level var depend on utils.utf8ToBytes\n// because it's not present in all envs. Creating a similar fn here\nconst _utf8ToBytes = (str: string) => Uint8Array.from(str.split('').map((c) => c.charCodeAt(0)));\nconst sigma16 = _utf8ToBytes('expand 16-byte k');\nconst sigma32 = _utf8ToBytes('expand 32-byte k');\nconst sigma16_32 = u32(sigma16);\nconst sigma32_32 = u32(sigma32);\n\nexport function rotl(a: number, b: number): number {\n  return (a << b) | (a >>> (32 - b));\n}\n\n/** Ciphers must use u32 for efficiency. */\nexport type CipherCoreFn = (\n  sigma: Uint32Array,\n  key: Uint32Array,\n  nonce: Uint32Array,\n  output: Uint32Array,\n  counter: number,\n  rounds?: number\n) => void;\n\n/** Method which extends key + short nonce into larger nonce / diff key. */\nexport type ExtendNonceFn = (\n  sigma: Uint32Array,\n  key: Uint32Array,\n  input: Uint32Array,\n  output: Uint32Array\n) => void;\n\n/** ARX cipher options.\n * * `allowShortKeys` for 16-byte keys\n * * `counterLength` in bytes\n * * `counterRight`: right: `nonce|counter`; left: `counter|nonce`\n * */\nexport type CipherOpts = {\n  allowShortKeys?: boolean; // Original salsa / chacha allow 16-byte keys\n  extendNonceFn?: ExtendNonceFn;\n  counterLength?: number;\n  counterRight?: boolean;\n  rounds?: number;\n};\n\n// Is byte array aligned to 4 byte offset (u32)?\nfunction isAligned32(b: Uint8Array) {\n  return b.byteOffset % 4 === 0;\n}\n\n// Salsa and Chacha block length is always 512-bit\nconst BLOCK_LEN = 64;\nconst BLOCK_LEN32 = 16;\n\n// new Uint32Array([2**32])   // => Uint32Array(1) [ 0 ]\n// new Uint32Array([2**32-1]) // => Uint32Array(1) [ 4294967295 ]\nconst MAX_COUNTER = 2 ** 32 - 1;\n\nconst U32_EMPTY = new Uint32Array();\nfunction runCipher(\n  core: CipherCoreFn,\n  sigma: Uint32Array,\n  key: Uint32Array,\n  nonce: Uint32Array,\n  data: Uint8Array,\n  output: Uint8Array,\n  counter: number,\n  rounds: number\n): void {\n  const len = data.length;\n  const block = new Uint8Array(BLOCK_LEN);\n  const b32 = u32(block);\n  // Make sure that buffers aligned to 4 bytes\n  const isAligned = isAligned32(data) && isAligned32(output);\n  const d32 = isAligned ? u32(data) : U32_EMPTY;\n  const o32 = isAligned ? u32(output) : U32_EMPTY;\n  for (let pos = 0; pos < len; counter++) {\n    core(sigma, key, nonce, b32, counter, rounds);\n    if (counter >= MAX_COUNTER) throw new Error('arx: counter overflow');\n    const take = Math.min(BLOCK_LEN, len - pos);\n    // aligned to 4 bytes\n    if (isAligned && take === BLOCK_LEN) {\n      const pos32 = pos / 4;\n      if (pos % 4 !== 0) throw new Error('arx: invalid block position');\n      for (let j = 0, posj: number; j < BLOCK_LEN32; j++) {\n        posj = pos32 + j;\n        o32[posj] = d32[posj] ^ b32[j];\n      }\n      pos += BLOCK_LEN;\n      continue;\n    }\n    for (let j = 0, posj; j < take; j++) {\n      posj = pos + j;\n      output[posj] = data[posj] ^ block[j];\n    }\n    pos += take;\n  }\n}\n\n/** Creates ARX-like (ChaCha, Salsa) cipher stream from core function. */\nexport function createCipher(core: CipherCoreFn, opts: CipherOpts): XorStream {\n  const { allowShortKeys, extendNonceFn, counterLength, counterRight, rounds } = checkOpts(\n    { allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 },\n    opts\n  );\n  if (typeof core !== 'function') throw new Error('core must be a function');\n  anumber(counterLength);\n  anumber(rounds);\n  abool(counterRight);\n  abool(allowShortKeys);\n  return (\n    key: Uint8Array,\n    nonce: Uint8Array,\n    data: Uint8Array,\n    output?: Uint8Array,\n    counter = 0\n  ): Uint8Array => {\n    abytes(key);\n    abytes(nonce);\n    abytes(data);\n    const len = data.length;\n    if (output === undefined) output = new Uint8Array(len);\n    abytes(output);\n    anumber(counter);\n    if (counter < 0 || counter >= MAX_COUNTER) throw new Error('arx: counter overflow');\n    if (output.length < len)\n      throw new Error(`arx: output (${output.length}) is shorter than data (${len})`);\n    const toClean = [];\n\n    // Key & sigma\n    // key=16 -> sigma16, k=key|key\n    // key=32 -> sigma32, k=key\n    let l = key.length;\n    let k: Uint8Array;\n    let sigma: Uint32Array;\n    if (l === 32) {\n      toClean.push((k = copyBytes(key)));\n      sigma = sigma32_32;\n    } else if (l === 16 && allowShortKeys) {\n      k = new Uint8Array(32);\n      k.set(key);\n      k.set(key, 16);\n      sigma = sigma16_32;\n      toClean.push(k);\n    } else {\n      throw new Error(`arx: invalid 32-byte key, got length=${l}`);\n    }\n\n    // Nonce\n    // salsa20:      8   (8-byte counter)\n    // chacha20orig: 8   (8-byte counter)\n    // chacha20:     12  (4-byte counter)\n    // xsalsa20:     24  (16 -> hsalsa,  8 -> old nonce)\n    // xchacha20:    24  (16 -> hchacha, 8 -> old nonce)\n    // Align nonce to 4 bytes\n    if (!isAligned32(nonce)) toClean.push((nonce = copyBytes(nonce)));\n\n    const k32 = u32(k);\n    // hsalsa & hchacha: handle extended nonce\n    if (extendNonceFn) {\n      if (nonce.length !== 24) throw new Error(`arx: extended nonce must be 24 bytes`);\n      extendNonceFn(sigma, k32, u32(nonce.subarray(0, 16)), k32);\n      nonce = nonce.subarray(16);\n    }\n\n    // Handle nonce counter\n    const nonceNcLen = 16 - counterLength;\n    if (nonceNcLen !== nonce.length)\n      throw new Error(`arx: nonce must be ${nonceNcLen} or 16 bytes`);\n\n    // Pad counter when nonce is 64 bit\n    if (nonceNcLen !== 12) {\n      const nc = new Uint8Array(12);\n      nc.set(nonce, counterRight ? 0 : 12 - nonce.length);\n      nonce = nc;\n      toClean.push(nonce);\n    }\n    const n32 = u32(nonce);\n    runCipher(core, sigma, k32, n32, data, output, counter, rounds);\n    clean(...toClean);\n    return output;\n  };\n}\n", "/**\n * Poly1305 ([PDF](https://cr.yp.to/mac/poly1305-20050329.pdf),\n * [wiki](https://en.wikipedia.org/wiki/Poly1305))\n * is a fast and parallel secret-key message-authentication code suitable for\n * a wide variety of applications. It was standardized in\n * [RFC 8439](https://datatracker.ietf.org/doc/html/rfc8439) and is now used in TLS 1.3.\n *\n * Polynomial MACs are not perfect for every situation:\n * they lack Random Key Robustness: the MAC can be forged, and can't be used in PAKE schemes.\n * See [invisible salamanders attack](https://keymaterial.net/2020/09/07/invisible-salamanders-in-aes-gcm-siv/).\n * To combat invisible salamanders, `hash(key)` can be included in ciphertext,\n * however, this would violate ciphertext indistinguishability:\n * an attacker would know which key was used - so `HKDF(key, i)`\n * could be used instead.\n *\n * Check out [original website](https://cr.yp.to/mac.html).\n * @module\n */\nimport { Hash, type Input, abytes, aexists, aoutput, clean, toBytes } from './utils.ts';\n\n// Based on Public Domain poly1305-donna https://github.com/floodyberry/poly1305-donna\nconst u8to16 = (a: Uint8Array, i: number) => (a[i++] & 0xff) | ((a[i++] & 0xff) << 8);\nclass Poly1305 implements Hash<Poly1305> {\n  readonly blockLen = 16;\n  readonly outputLen = 16;\n  private buffer = new Uint8Array(16);\n  private r = new Uint16Array(10);\n  private h = new Uint16Array(10);\n  private pad = new Uint16Array(8);\n  private pos = 0;\n  protected finished = false;\n\n  constructor(key: Input) {\n    key = toBytes(key);\n    abytes(key, 32);\n    const t0 = u8to16(key, 0);\n    const t1 = u8to16(key, 2);\n    const t2 = u8to16(key, 4);\n    const t3 = u8to16(key, 6);\n    const t4 = u8to16(key, 8);\n    const t5 = u8to16(key, 10);\n    const t6 = u8to16(key, 12);\n    const t7 = u8to16(key, 14);\n\n    // https://github.com/floodyberry/poly1305-donna/blob/e6ad6e091d30d7f4ec2d4f978be1fcfcbce72781/poly1305-donna-16.h#L47\n    this.r[0] = t0 & 0x1fff;\n    this.r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;\n    this.r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;\n    this.r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;\n    this.r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;\n    this.r[5] = (t4 >>> 1) & 0x1ffe;\n    this.r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;\n    this.r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;\n    this.r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;\n    this.r[9] = (t7 >>> 5) & 0x007f;\n    for (let i = 0; i < 8; i++) this.pad[i] = u8to16(key, 16 + 2 * i);\n  }\n\n  private process(data: Uint8Array, offset: number, isLast = false) {\n    const hibit = isLast ? 0 : 1 << 11;\n    const { h, r } = this;\n    const r0 = r[0];\n    const r1 = r[1];\n    const r2 = r[2];\n    const r3 = r[3];\n    const r4 = r[4];\n    const r5 = r[5];\n    const r6 = r[6];\n    const r7 = r[7];\n    const r8 = r[8];\n    const r9 = r[9];\n\n    const t0 = u8to16(data, offset + 0);\n    const t1 = u8to16(data, offset + 2);\n    const t2 = u8to16(data, offset + 4);\n    const t3 = u8to16(data, offset + 6);\n    const t4 = u8to16(data, offset + 8);\n    const t5 = u8to16(data, offset + 10);\n    const t6 = u8to16(data, offset + 12);\n    const t7 = u8to16(data, offset + 14);\n\n    let h0 = h[0] + (t0 & 0x1fff);\n    let h1 = h[1] + (((t0 >>> 13) | (t1 << 3)) & 0x1fff);\n    let h2 = h[2] + (((t1 >>> 10) | (t2 << 6)) & 0x1fff);\n    let h3 = h[3] + (((t2 >>> 7) | (t3 << 9)) & 0x1fff);\n    let h4 = h[4] + (((t3 >>> 4) | (t4 << 12)) & 0x1fff);\n    let h5 = h[5] + ((t4 >>> 1) & 0x1fff);\n    let h6 = h[6] + (((t4 >>> 14) | (t5 << 2)) & 0x1fff);\n    let h7 = h[7] + (((t5 >>> 11) | (t6 << 5)) & 0x1fff);\n    let h8 = h[8] + (((t6 >>> 8) | (t7 << 8)) & 0x1fff);\n    let h9 = h[9] + ((t7 >>> 5) | hibit);\n\n    let c = 0;\n\n    let d0 = c + h0 * r0 + h1 * (5 * r9) + h2 * (5 * r8) + h3 * (5 * r7) + h4 * (5 * r6);\n    c = d0 >>> 13;\n    d0 &= 0x1fff;\n    d0 += h5 * (5 * r5) + h6 * (5 * r4) + h7 * (5 * r3) + h8 * (5 * r2) + h9 * (5 * r1);\n    c += d0 >>> 13;\n    d0 &= 0x1fff;\n\n    let d1 = c + h0 * r1 + h1 * r0 + h2 * (5 * r9) + h3 * (5 * r8) + h4 * (5 * r7);\n    c = d1 >>> 13;\n    d1 &= 0x1fff;\n    d1 += h5 * (5 * r6) + h6 * (5 * r5) + h7 * (5 * r4) + h8 * (5 * r3) + h9 * (5 * r2);\n    c += d1 >>> 13;\n    d1 &= 0x1fff;\n\n    let d2 = c + h0 * r2 + h1 * r1 + h2 * r0 + h3 * (5 * r9) + h4 * (5 * r8);\n    c = d2 >>> 13;\n    d2 &= 0x1fff;\n    d2 += h5 * (5 * r7) + h6 * (5 * r6) + h7 * (5 * r5) + h8 * (5 * r4) + h9 * (5 * r3);\n    c += d2 >>> 13;\n    d2 &= 0x1fff;\n\n    let d3 = c + h0 * r3 + h1 * r2 + h2 * r1 + h3 * r0 + h4 * (5 * r9);\n    c = d3 >>> 13;\n    d3 &= 0x1fff;\n    d3 += h5 * (5 * r8) + h6 * (5 * r7) + h7 * (5 * r6) + h8 * (5 * r5) + h9 * (5 * r4);\n    c += d3 >>> 13;\n    d3 &= 0x1fff;\n\n    let d4 = c + h0 * r4 + h1 * r3 + h2 * r2 + h3 * r1 + h4 * r0;\n    c = d4 >>> 13;\n    d4 &= 0x1fff;\n    d4 += h5 * (5 * r9) + h6 * (5 * r8) + h7 * (5 * r7) + h8 * (5 * r6) + h9 * (5 * r5);\n    c += d4 >>> 13;\n    d4 &= 0x1fff;\n\n    let d5 = c + h0 * r5 + h1 * r4 + h2 * r3 + h3 * r2 + h4 * r1;\n    c = d5 >>> 13;\n    d5 &= 0x1fff;\n    d5 += h5 * r0 + h6 * (5 * r9) + h7 * (5 * r8) + h8 * (5 * r7) + h9 * (5 * r6);\n    c += d5 >>> 13;\n    d5 &= 0x1fff;\n\n    let d6 = c + h0 * r6 + h1 * r5 + h2 * r4 + h3 * r3 + h4 * r2;\n    c = d6 >>> 13;\n    d6 &= 0x1fff;\n    d6 += h5 * r1 + h6 * r0 + h7 * (5 * r9) + h8 * (5 * r8) + h9 * (5 * r7);\n    c += d6 >>> 13;\n    d6 &= 0x1fff;\n\n    let d7 = c + h0 * r7 + h1 * r6 + h2 * r5 + h3 * r4 + h4 * r3;\n    c = d7 >>> 13;\n    d7 &= 0x1fff;\n    d7 += h5 * r2 + h6 * r1 + h7 * r0 + h8 * (5 * r9) + h9 * (5 * r8);\n    c += d7 >>> 13;\n    d7 &= 0x1fff;\n\n    let d8 = c + h0 * r8 + h1 * r7 + h2 * r6 + h3 * r5 + h4 * r4;\n    c = d8 >>> 13;\n    d8 &= 0x1fff;\n    d8 += h5 * r3 + h6 * r2 + h7 * r1 + h8 * r0 + h9 * (5 * r9);\n    c += d8 >>> 13;\n    d8 &= 0x1fff;\n\n    let d9 = c + h0 * r9 + h1 * r8 + h2 * r7 + h3 * r6 + h4 * r5;\n    c = d9 >>> 13;\n    d9 &= 0x1fff;\n    d9 += h5 * r4 + h6 * r3 + h7 * r2 + h8 * r1 + h9 * r0;\n    c += d9 >>> 13;\n    d9 &= 0x1fff;\n\n    c = ((c << 2) + c) | 0;\n    c = (c + d0) | 0;\n    d0 = c & 0x1fff;\n    c = c >>> 13;\n    d1 += c;\n\n    h[0] = d0;\n    h[1] = d1;\n    h[2] = d2;\n    h[3] = d3;\n    h[4] = d4;\n    h[5] = d5;\n    h[6] = d6;\n    h[7] = d7;\n    h[8] = d8;\n    h[9] = d9;\n  }\n\n  private finalize() {\n    const { h, pad } = this;\n    const g = new Uint16Array(10);\n    let c = h[1] >>> 13;\n    h[1] &= 0x1fff;\n    for (let i = 2; i < 10; i++) {\n      h[i] += c;\n      c = h[i] >>> 13;\n      h[i] &= 0x1fff;\n    }\n    h[0] += c * 5;\n    c = h[0] >>> 13;\n    h[0] &= 0x1fff;\n    h[1] += c;\n    c = h[1] >>> 13;\n    h[1] &= 0x1fff;\n    h[2] += c;\n\n    g[0] = h[0] + 5;\n    c = g[0] >>> 13;\n    g[0] &= 0x1fff;\n    for (let i = 1; i < 10; i++) {\n      g[i] = h[i] + c;\n      c = g[i] >>> 13;\n      g[i] &= 0x1fff;\n    }\n    g[9] -= 1 << 13;\n\n    let mask = (c ^ 1) - 1;\n    for (let i = 0; i < 10; i++) g[i] &= mask;\n    mask = ~mask;\n    for (let i = 0; i < 10; i++) h[i] = (h[i] & mask) | g[i];\n    h[0] = (h[0] | (h[1] << 13)) & 0xffff;\n    h[1] = ((h[1] >>> 3) | (h[2] << 10)) & 0xffff;\n    h[2] = ((h[2] >>> 6) | (h[3] << 7)) & 0xffff;\n    h[3] = ((h[3] >>> 9) | (h[4] << 4)) & 0xffff;\n    h[4] = ((h[4] >>> 12) | (h[5] << 1) | (h[6] << 14)) & 0xffff;\n    h[5] = ((h[6] >>> 2) | (h[7] << 11)) & 0xffff;\n    h[6] = ((h[7] >>> 5) | (h[8] << 8)) & 0xffff;\n    h[7] = ((h[8] >>> 8) | (h[9] << 5)) & 0xffff;\n\n    let f = h[0] + pad[0];\n    h[0] = f & 0xffff;\n    for (let i = 1; i < 8; i++) {\n      f = (((h[i] + pad[i]) | 0) + (f >>> 16)) | 0;\n      h[i] = f & 0xffff;\n    }\n    clean(g);\n  }\n  update(data: Input): this {\n    aexists(this);\n    data = toBytes(data);\n    abytes(data);\n    const { buffer, blockLen } = this;\n    const len = data.length;\n\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input\n      if (take === blockLen) {\n        for (; blockLen <= len - pos; pos += blockLen) this.process(data, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(buffer, 0, false);\n        this.pos = 0;\n      }\n    }\n    return this;\n  }\n  destroy() {\n    clean(this.h, this.r, this.buffer, this.pad);\n  }\n  digestInto(out: Uint8Array) {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    const { buffer, h } = this;\n    let { pos } = this;\n    if (pos) {\n      buffer[pos++] = 1;\n      for (; pos < 16; pos++) buffer[pos] = 0;\n      this.process(buffer, 0, true);\n    }\n    this.finalize();\n    let opos = 0;\n    for (let i = 0; i < 8; i++) {\n      out[opos++] = h[i] >>> 0;\n      out[opos++] = h[i] >>> 8;\n    }\n    return out;\n  }\n  digest(): Uint8Array {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n}\n\nexport type CHash = ReturnType<typeof wrapConstructorWithKey>;\nexport function wrapConstructorWithKey<H extends Hash<H>>(\n  hashCons: (key: Input) => Hash<H>\n): {\n  (msg: Input, key: Input): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(key: Input): Hash<H>;\n} {\n  const hashC = (msg: Input, key: Input): Uint8Array => hashCons(key).update(toBytes(msg)).digest();\n  const tmp = hashCons(new Uint8Array(32));\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (key: Input) => hashCons(key);\n  return hashC;\n}\n\n/** Poly1305 MAC from RFC 8439. */\nexport const poly1305: CHash = wrapConstructorWithKey((key) => new Poly1305(key));\n", "/**\n * [ChaCha20](https://cr.yp.to/chacha.html) stream cipher, released\n * in 2008. Developed after Salsa20, ChaCha aims to increase diffusion per round.\n * It was standardized in [RFC 8439](https://datatracker.ietf.org/doc/html/rfc8439) and\n * is now used in TLS 1.3.\n *\n * [XChaCha20](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha)\n * extended-nonce variant is also provided. Similar to XSalsa, it's safe to use with\n * randomly-generated nonces.\n *\n * Check out [PDF](http://cr.yp.to/chacha/chacha-20080128.pdf) and\n * [wiki](https://en.wikipedia.org/wiki/Salsa20).\n * @module\n */\nimport { createCipher, rotl } from './_arx.ts';\nimport { poly1305 } from './_poly1305.ts';\nimport {\n  type ARXCipher,\n  type CipherWithOutput,\n  type XorStream,\n  clean,\n  equalBytes,\n  getOutput,\n  u64Lengths,\n  wrapCipher,\n} from './utils.ts';\n\n/**\n * ChaCha core function.\n */\n// prettier-ignore\nfunction chachaCore(\n  s: Uint32Array, k: Uint32Array, n: Uint32Array, out: Uint32Array, cnt: number, rounds = 20\n): void {\n  let y00 = s[0], y01 = s[1], y02 = s[2], y03 = s[3], // \"expa\"   \"nd 3\"  \"2-by\"  \"te k\"\n    y04 = k[0], y05 = k[1], y06 = k[2], y07 = k[3],   // Key      Key     Key     Key\n    y08 = k[4], y09 = k[5], y10 = k[6], y11 = k[7],   // Key      Key     Key     Key\n    y12 = cnt, y13 = n[0], y14 = n[1], y15 = n[2];    // Counter  Counter\tNonce   Nonce\n  // Save state to temporary variables\n  let x00 = y00, x01 = y01, x02 = y02, x03 = y03,\n      x04 = y04, x05 = y05, x06 = y06, x07 = y07,\n      x08 = y08, x09 = y09, x10 = y10, x11 = y11,\n      x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n  for (let r = 0; r < rounds; r += 2) {\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 16);\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 12);\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 8);\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 7);\n\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 16);\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 12);\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 8);\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 7);\n\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^ x02, 16);\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 12);\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^ x02, 8);\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 7);\n\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 16);\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 12);\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 8)\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 7);\n\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 16);\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 12);\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 8);\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 7);\n\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 16);\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 12);\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 8);\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 7);\n\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 16);\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 12);\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 8);\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 7);\n\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 16)\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 12);\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 8);\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 7);\n  }\n  // Write output\n  let oi = 0;\n  out[oi++] = (y00 + x00) | 0; out[oi++] = (y01 + x01) | 0;\n  out[oi++] = (y02 + x02) | 0; out[oi++] = (y03 + x03) | 0;\n  out[oi++] = (y04 + x04) | 0; out[oi++] = (y05 + x05) | 0;\n  out[oi++] = (y06 + x06) | 0; out[oi++] = (y07 + x07) | 0;\n  out[oi++] = (y08 + x08) | 0; out[oi++] = (y09 + x09) | 0;\n  out[oi++] = (y10 + x10) | 0; out[oi++] = (y11 + x11) | 0;\n  out[oi++] = (y12 + x12) | 0; out[oi++] = (y13 + x13) | 0;\n  out[oi++] = (y14 + x14) | 0; out[oi++] = (y15 + x15) | 0;\n}\n/**\n * hchacha helper method, used primarily in xchacha, to hash\n * key and nonce into key' and nonce'.\n * Same as chachaCore, but there doesn't seem to be a way to move the block\n * out without 25% performance hit.\n */\n// prettier-ignore\nexport function hchacha(\n  s: Uint32Array, k: Uint32Array, i: Uint32Array, o32: Uint32Array\n): void {\n  let x00 = s[0], x01 = s[1], x02 = s[2], x03 = s[3],\n      x04 = k[0], x05 = k[1], x06 = k[2], x07 = k[3],\n      x08 = k[4], x09 = k[5], x10 = k[6], x11 = k[7],\n      x12 = i[0], x13 = i[1], x14 = i[2], x15 = i[3];\n  for (let r = 0; r < 20; r += 2) {\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 16);\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 12);\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 8);\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 7);\n\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 16);\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 12);\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 8);\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 7);\n\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^ x02, 16);\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 12);\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^ x02, 8);\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 7);\n\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 16);\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 12);\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 8)\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 7);\n\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 16);\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 12);\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 8);\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 7);\n\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 16);\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 12);\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 8);\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 7);\n\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 16);\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 12);\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 8);\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 7);\n\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 16)\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 12);\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 8);\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 7);\n  }\n  let oi = 0;\n  o32[oi++] = x00; o32[oi++] = x01;\n  o32[oi++] = x02; o32[oi++] = x03;\n  o32[oi++] = x12; o32[oi++] = x13;\n  o32[oi++] = x14; o32[oi++] = x15;\n}\n/**\n * Original, non-RFC chacha20 from DJB. 8-byte nonce, 8-byte counter.\n */\nexport const chacha20orig: XorStream = /* @__PURE__ */ createCipher(chachaCore, {\n  counterRight: false,\n  counterLength: 8,\n  allowShortKeys: true,\n});\n/**\n * ChaCha stream cipher. Conforms to RFC 8439 (IETF, TLS). 12-byte nonce, 4-byte counter.\n * With 12-byte nonce, it's not safe to use fill it with random (CSPRNG), due to collision chance.\n */\nexport const chacha20: XorStream = /* @__PURE__ */ createCipher(chachaCore, {\n  counterRight: false,\n  counterLength: 4,\n  allowShortKeys: false,\n});\n\n/**\n * XChaCha eXtended-nonce ChaCha. 24-byte nonce.\n * With 24-byte nonce, it's safe to use fill it with random (CSPRNG).\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha\n */\nexport const xchacha20: XorStream = /* @__PURE__ */ createCipher(chachaCore, {\n  counterRight: false,\n  counterLength: 8,\n  extendNonceFn: hchacha,\n  allowShortKeys: false,\n});\n\n/**\n * Reduced 8-round chacha, described in original paper.\n */\nexport const chacha8: XorStream = /* @__PURE__ */ createCipher(chachaCore, {\n  counterRight: false,\n  counterLength: 4,\n  rounds: 8,\n});\n\n/**\n * Reduced 12-round chacha, described in original paper.\n */\nexport const chacha12: XorStream = /* @__PURE__ */ createCipher(chachaCore, {\n  counterRight: false,\n  counterLength: 4,\n  rounds: 12,\n});\n\nconst ZEROS16 = /* @__PURE__ */ new Uint8Array(16);\n// Pad to digest size with zeros\nconst updatePadded = (h: ReturnType<typeof poly1305.create>, msg: Uint8Array) => {\n  h.update(msg);\n  const left = msg.length % 16;\n  if (left) h.update(ZEROS16.subarray(left));\n};\n\nconst ZEROS32 = /* @__PURE__ */ new Uint8Array(32);\nfunction computeTag(\n  fn: XorStream,\n  key: Uint8Array,\n  nonce: Uint8Array,\n  data: Uint8Array,\n  AAD?: Uint8Array\n): Uint8Array {\n  const authKey = fn(key, nonce, ZEROS32);\n  const h = poly1305.create(authKey);\n  if (AAD) updatePadded(h, AAD);\n  updatePadded(h, data);\n  const num = u64Lengths(data.length, AAD ? AAD.length : 0, true);\n  h.update(num);\n  const res = h.digest();\n  clean(authKey, num);\n  return res;\n}\n\n/**\n * AEAD algorithm from RFC 8439.\n * Salsa20 and chacha (RFC 8439) use poly1305 differently.\n * We could have composed them similar to:\n * https://github.com/paulmillr/scure-base/blob/b266c73dde977b1dd7ef40ef7a23cc15aab526b3/index.ts#L250\n * But it's hard because of authKey:\n * In salsa20, authKey changes position in salsa stream.\n * In chacha, authKey can't be computed inside computeTag, it modifies the counter.\n */\nexport const _poly1305_aead =\n  (xorStream: XorStream) =>\n  (key: Uint8Array, nonce: Uint8Array, AAD?: Uint8Array): CipherWithOutput => {\n    const tagLength = 16;\n    return {\n      encrypt(plaintext: Uint8Array, output?: Uint8Array) {\n        const plength = plaintext.length;\n        output = getOutput(plength + tagLength, output, false);\n        output.set(plaintext);\n        const oPlain = output.subarray(0, -tagLength);\n        xorStream(key, nonce, oPlain, oPlain, 1);\n        const tag = computeTag(xorStream, key, nonce, oPlain, AAD);\n        output.set(tag, plength); // append tag\n        clean(tag);\n        return output;\n      },\n      decrypt(ciphertext: Uint8Array, output?: Uint8Array) {\n        output = getOutput(ciphertext.length - tagLength, output, false);\n        const data = ciphertext.subarray(0, -tagLength);\n        const passedTag = ciphertext.subarray(-tagLength);\n        const tag = computeTag(xorStream, key, nonce, data, AAD);\n        if (!equalBytes(passedTag, tag)) throw new Error('invalid tag');\n        output.set(ciphertext.subarray(0, -tagLength));\n        xorStream(key, nonce, output, output, 1); // start stream with i=1\n        clean(tag);\n        return output;\n      },\n    };\n  };\n\n/**\n * ChaCha20-Poly1305 from RFC 8439.\n *\n * Unsafe to use random nonces under the same key, due to collision chance.\n * Prefer XChaCha instead.\n */\nexport const chacha20poly1305: ARXCipher = /* @__PURE__ */ wrapCipher(\n  { blockSize: 64, nonceLength: 12, tagLength: 16 },\n  _poly1305_aead(chacha20)\n);\n/**\n * XChaCha20-Poly1305 extended-nonce chacha.\n *\n * Can be safely used with random nonces (CSPRNG).\n * See [IRTF draft](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha).\n */\nexport const xchacha20poly1305: ARXCipher = /* @__PURE__ */ wrapCipher(\n  { blockSize: 64, nonceLength: 24, tagLength: 16 },\n  _poly1305_aead(xchacha20)\n);\n", "/**\n * HKDF (RFC 5869): extract + expand in one step.\n * See https://soatok.blog/2021/11/17/understanding-hkdf/.\n * @module\n */\nimport { hmac } from './hmac.ts';\nimport { ahash, anumber, type CHash, clean, type Input, toBytes } from './utils.ts';\n\n/**\n * HKDF-extract from spec. Less important part. `HKDF-Extract(IKM, salt) -> PRK`\n * Arguments position differs from spec (IKM is first one, since it is not optional)\n * @param hash - hash function that would be used (e.g. sha256)\n * @param ikm - input keying material, the initial key\n * @param salt - optional salt value (a non-secret random value)\n */\nexport function extract(hash: CHash, ikm: Input, salt?: Input): Uint8Array {\n  ahash(hash);\n  // NOTE: some libraries treat zero-length array as 'not provided';\n  // we don't, since we have undefined as 'not provided'\n  // https://github.com/RustCrypto/KDFs/issues/15\n  if (salt === undefined) salt = new Uint8Array(hash.outputLen);\n  return hmac(hash, toBytes(salt), toBytes(ikm));\n}\n\nconst HKDF_COUNTER = /* @__PURE__ */ Uint8Array.from([0]);\nconst EMPTY_BUFFER = /* @__PURE__ */ Uint8Array.of();\n\n/**\n * HKDF-expand from the spec. The most important part. `HKDF-Expand(PRK, info, L) -> OKM`\n * @param hash - hash function that would be used (e.g. sha256)\n * @param prk - a pseudorandom key of at least HashLen octets (usually, the output from the extract step)\n * @param info - optional context and application specific information (can be a zero-length string)\n * @param length - length of output keying material in bytes\n */\nexport function expand(hash: CHash, prk: Input, info?: Input, length: number = 32): Uint8Array {\n  ahash(hash);\n  anumber(length);\n  const olen = hash.outputLen;\n  if (length > 255 * olen) throw new Error('Length should be <= 255*HashLen');\n  const blocks = Math.ceil(length / olen);\n  if (info === undefined) info = EMPTY_BUFFER;\n  // first L(ength) octets of T\n  const okm = new Uint8Array(blocks * olen);\n  // Re-use HMAC instance between blocks\n  const HMAC = hmac.create(hash, prk);\n  const HMACTmp = HMAC._cloneInto();\n  const T = new Uint8Array(HMAC.outputLen);\n  for (let counter = 0; counter < blocks; counter++) {\n    HKDF_COUNTER[0] = counter + 1;\n    // T(0) = empty string (zero length)\n    // T(N) = HMAC-Hash(PRK, T(N-1) | info | N)\n    HMACTmp.update(counter === 0 ? EMPTY_BUFFER : T)\n      .update(info)\n      .update(HKDF_COUNTER)\n      .digestInto(T);\n    okm.set(T, olen * counter);\n    HMAC._cloneInto(HMACTmp);\n  }\n  HMAC.destroy();\n  HMACTmp.destroy();\n  clean(T, HKDF_COUNTER);\n  return okm.slice(0, length);\n}\n\n/**\n * HKDF (RFC 5869): derive keys from an initial input.\n * Combines hkdf_extract + hkdf_expand in one step\n * @param hash - hash function that would be used (e.g. sha256)\n * @param ikm - input keying material, the initial key\n * @param salt - optional salt value (a non-secret random value)\n * @param info - optional context and application specific information (can be a zero-length string)\n * @param length - length of output keying material in bytes\n * @example\n * import { hkdf } from '@noble/hashes/hkdf';\n * import { sha256 } from '@noble/hashes/sha2';\n * import { randomBytes } from '@noble/hashes/utils';\n * const inputKey = randomBytes(32);\n * const salt = randomBytes(32);\n * const info = 'application-key';\n * const hk1 = hkdf(sha256, inputKey, salt, info, 32);\n */\nexport const hkdf = (\n  hash: CHash,\n  ikm: Input,\n  salt: Input | undefined,\n  info: Input | undefined,\n  length: number\n): Uint8Array => expand(hash, extract(hash, ikm, salt), info, length);\n", "import { chacha20poly1305 } from '@noble/ciphers/chacha'\nimport { x25519 } from '@noble/curves/ed25519'\nimport { extract, expand } from '@noble/hashes/hkdf'\nimport { sha256 } from '@noble/hashes/sha256'\nimport type { ICryptoInterface } from '../crypto.js'\nimport type { KeyPair } from '../types.js'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport const pureJsCrypto: ICryptoInterface = {\n  hashSHA256 (data: Uint8Array | Uint8ArrayList): Uint8Array {\n    return sha256(data.subarray())\n  },\n\n  getHKDF (ck: Uint8Array, ikm: Uint8Array): [Uint8Array, Uint8Array, Uint8Array] {\n    const prk = extract(sha256, ikm, ck)\n    const okmU8Array = expand(sha256, prk, undefined, 96)\n    const okm = okmU8Array\n\n    const k1 = okm.subarray(0, 32)\n    const k2 = okm.subarray(32, 64)\n    const k3 = okm.subarray(64, 96)\n\n    return [k1, k2, k3]\n  },\n\n  generateX25519KeyPair (): KeyPair {\n    const secretKey = x25519.utils.randomPrivateKey()\n    const publicKey = x25519.getPublicKey(secretKey)\n\n    return {\n      publicKey,\n      privateKey: secretKey\n    }\n  },\n\n  generateX25519KeyPairFromSeed (seed: Uint8Array): KeyPair {\n    const publicKey = x25519.getPublicKey(seed)\n\n    return {\n      publicKey,\n      privateKey: seed\n    }\n  },\n\n  generateX25519SharedKey (privateKey: Uint8Array | Uint8ArrayList, publicKey: Uint8Array | Uint8ArrayList): Uint8Array {\n    return x25519.getSharedSecret(privateKey.subarray(), publicKey.subarray())\n  },\n\n  chaCha20Poly1305Encrypt (plaintext: Uint8Array | Uint8ArrayList, nonce: Uint8Array, ad: Uint8Array, k: Uint8Array): Uint8Array {\n    return chacha20poly1305(k, nonce, ad).encrypt(plaintext.subarray())\n  },\n\n  chaCha20Poly1305Decrypt (ciphertext: Uint8Array | Uint8ArrayList, nonce: Uint8Array, ad: Uint8Array, k: Uint8Array, dst?: Uint8Array): Uint8Array {\n    return chacha20poly1305(k, nonce, ad).decrypt(ciphertext.subarray(), dst)\n  }\n}\n", "import { pureJsCrypto } from './js.js'\n\nexport const defaultCrypto = pureJsCrypto\n", "import type { ICrypto, KeyPair } from './types.js'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\n/** Underlying crypto implementation, meant to be overridable */\nexport interface ICryptoInterface {\n  hashSHA256(data: Uint8Array | Uint8ArrayList): Uint8Array\n\n  getHKDF(ck: Uint8Array, ikm: Uint8Array): [Uint8Array, Uint8Array, Uint8Array]\n\n  generateX25519KeyPair(): KeyPair\n  generateX25519KeyPairFromSeed(seed: Uint8Array): KeyPair\n  generateX25519SharedKey(privateKey: Uint8Array | Uint8ArrayList, publicKey: Uint8Array | Uint8ArrayList): Uint8Array\n\n  chaCha20Poly1305Encrypt(plaintext: Uint8Array | Uint8ArrayList, nonce: Uint8Array, ad: Uint8Array, k: Uint8Array): Uint8ArrayList | Uint8Array\n  chaCha20Poly1305Decrypt(ciphertext: Uint8Array | Uint8ArrayList, nonce: Uint8Array, ad: Uint8Array, k: Uint8Array, dst?: Uint8Array): Uint8ArrayList | Uint8Array\n}\n\nexport function wrapCrypto (crypto: ICryptoInterface): ICrypto {\n  return {\n    generateKeypair: crypto.generateX25519KeyPair,\n    dh: (keypair, publicKey) => crypto.generateX25519SharedKey(keypair.privateKey, publicKey).subarray(0, 32),\n    encrypt: crypto.chaCha20Poly1305Encrypt,\n    decrypt: crypto.chaCha20Poly1305Decrypt,\n    hash: crypto.hashSHA256,\n    hkdf: crypto.getHKDF\n  }\n}\n", "import { allocUnsafe as uint8ArrayAllocUnsafe } from 'uint8arrays/alloc'\nimport type { LengthDecoderFunction } from 'it-length-prefixed'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport const uint16BEEncode = (value: number): Uint8Array => {\n  const target = uint8ArrayAllocUnsafe(2)\n  target[0] = value >> 8\n  target[1] = value\n  return target\n}\nuint16BEEncode.bytes = 2\n\nexport const uint16BEDecode: LengthDecoderFunction = (data: Uint8Array | Uint8ArrayList): number => {\n  if (data.length < 2) { throw RangeError('Could not decode int16BE') }\n\n  if (data instanceof Uint8Array) {\n    let value = 0\n    value += data[0] << 8\n    value += data[1]\n    return value\n  }\n\n  return data.getUint16(0)\n}\nuint16BEDecode.bytes = 2\n", "import type { Counter, Metrics } from '@libp2p/interface'\n\nexport type MetricsRegistry = Record<string, Counter>\n\nexport function registerMetrics (metrics: Metrics): MetricsRegistry {\n  return {\n    xxHandshakeSuccesses: metrics.registerCounter(\n      'libp2p_noise_xxhandshake_successes_total', {\n        help: 'Total count of noise xxHandshakes successes_'\n      }),\n\n    xxHandshakeErrors: metrics.registerCounter(\n      'libp2p_noise_xxhandshake_error_total', {\n        help: 'Total count of noise xxHandshakes errors'\n      }),\n\n    encryptedPackets: metrics.registerCounter(\n      'libp2p_noise_encrypted_packets_total', {\n        help: 'Total count of noise encrypted packets successfully'\n      }),\n\n    decryptedPackets: metrics.registerCounter(\n      'libp2p_noise_decrypted_packets_total', {\n        help: 'Total count of noise decrypted packets'\n      }),\n\n    decryptErrors: metrics.registerCounter(\n      'libp2p_noise_decrypt_errors_total', {\n        help: 'Total count of noise decrypt errors'\n      })\n  }\n}\n", "import { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { DUMP_SESSION_KEYS } from './constants.js'\nimport type { CipherState } from './protocol.js'\nimport type { KeyPair } from './types.js'\nimport type { Logger } from '@libp2p/interface'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport function logLocalStaticKeys (s: KeyPair | undefined, keyLogger: Logger): void {\n  if (!keyLogger.enabled || !DUMP_SESSION_KEYS) {\n    return\n  }\n\n  if (s) {\n    keyLogger(`LOCAL_STATIC_PUBLIC_KEY ${uint8ArrayToString(s.publicKey, 'hex')}`)\n    keyLogger(`LOCAL_STATIC_PRIVATE_KEY ${uint8ArrayToString(s.privateKey, 'hex')}`)\n  } else {\n    keyLogger('Missing local static keys.')\n  }\n}\n\nexport function logLocalEphemeralKeys (e: KeyPair | undefined, keyLogger: Logger): void {\n  if (!keyLogger.enabled || !DUMP_SESSION_KEYS) {\n    return\n  }\n\n  if (e) {\n    keyLogger(`LOCAL_PUBLIC_EPHEMERAL_KEY ${uint8ArrayToString(e.publicKey, 'hex')}`)\n    keyLogger(`LOCAL_PRIVATE_EPHEMERAL_KEY ${uint8ArrayToString(e.privateKey, 'hex')}`)\n  } else {\n    keyLogger('Missing local ephemeral keys.')\n  }\n}\n\nexport function logRemoteStaticKey (rs: Uint8Array | Uint8ArrayList | undefined, keyLogger: Logger): void {\n  if (!keyLogger.enabled || !DUMP_SESSION_KEYS) {\n    return\n  }\n\n  if (rs) {\n    keyLogger(`REMOTE_STATIC_PUBLIC_KEY ${uint8ArrayToString(rs.subarray(), 'hex')}`)\n  } else {\n    keyLogger('Missing remote static public key.')\n  }\n}\n\nexport function logRemoteEphemeralKey (re: Uint8Array | Uint8ArrayList | undefined, keyLogger: Logger): void {\n  if (!keyLogger.enabled || !DUMP_SESSION_KEYS) {\n    return\n  }\n\n  if (re) {\n    keyLogger(`REMOTE_EPHEMERAL_PUBLIC_KEY ${uint8ArrayToString(re.subarray(), 'hex')}`)\n  } else {\n    keyLogger('Missing remote ephemeral keys.')\n  }\n}\n\nexport function logCipherState (cs1: CipherState, cs2: CipherState, keyLogger: Logger): void {\n  if (!keyLogger.enabled || !DUMP_SESSION_KEYS) {\n    return\n  }\n\n  keyLogger(`CIPHER_STATE_1 ${cs1.n.getUint64()} ${cs1.k && uint8ArrayToString(cs1.k, 'hex')}`)\n  keyLogger(`CIPHER_STATE_2 ${cs2.n.getUint64()} ${cs2.k && uint8ArrayToString(cs2.k, 'hex')}`)\n}\n", "import { allocUnsafe } from '#alloc'\nimport { asUint8Array } from '#util/as-uint8array'\n\n/**\n * Returns the xor distance between two Uint8Arrays\n */\nexport function xor (a: Uint8Array, b: Uint8Array): Uint8Array {\n  if (a.length !== b.length) {\n    throw new Error('Inputs should have the same length')\n  }\n\n  const result = allocUnsafe(a.length)\n\n  for (let i = 0; i < a.length; i++) {\n    result[i] = a[i] ^ b[i]\n  }\n\n  return asUint8Array(result)\n}\n", "export class InvalidCryptoExchangeError extends Error {\n  public code: string\n\n  constructor (message = 'Invalid crypto exchange') {\n    super(message)\n    this.code = InvalidCryptoExchangeError.code\n  }\n\n  static readonly code = 'ERR_INVALID_CRYPTO_EXCHANGE'\n}\n", "import { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc'\n\nexport const MIN_NONCE = 0\n// For performance reasons, the nonce is represented as a JS `number`\n// Although JS `number` can safely represent integers up to 2 ** 53 - 1, we choose to only use\n// 4 bytes to store the data for performance reason.\n// This is a slight deviation from the noise spec, which describes the max nonce as 2 ** 64 - 2\n// The effect is that this implementation will need a new handshake to be performed after fewer messages are exchanged than other implementations with full uint64 nonces.\n// this MAX_NONCE is still a large number of messages, so the practical effect of this is negligible.\nexport const MAX_NONCE = 0xffffffff\n\nconst ERR_MAX_NONCE = 'Cipherstate has reached maximum n, a new handshake must be performed'\n\n/**\n * The nonce is an uint that's increased over time.\n * Maintaining different representations help improve performance.\n */\nexport class Nonce {\n  private n: number\n  private readonly bytes: Uint8Array\n  private readonly view: DataView\n\n  constructor (n = MIN_NONCE) {\n    this.n = n\n    this.bytes = uint8ArrayAlloc(12)\n    this.view = new DataView(this.bytes.buffer, this.bytes.byteOffset, this.bytes.byteLength)\n    this.view.setUint32(4, n, true)\n  }\n\n  increment (): void {\n    this.n++\n    // Even though we're treating the nonce as 8 bytes, RFC7539 specifies 12 bytes for a nonce.\n    this.view.setUint32(4, this.n, true)\n  }\n\n  getBytes (): Uint8Array {\n    return this.bytes\n  }\n\n  getUint64 (): number {\n    return this.n\n  }\n\n  assertValue (): void {\n    if (this.n > MAX_NONCE) {\n      throw new Error(ERR_MAX_NONCE)\n    }\n  }\n}\n", "import { Uint8ArrayList } from 'uint8arraylist'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays'\nimport { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc'\nimport { InvalidCryptoExchangeError } from './errors.js'\nimport { Nonce } from './nonce.js'\nimport type { ICipherState, ISymmetricState, IHandshakeState, KeyPair, ICrypto } from './types.js'\n\n// Code in this file is a direct translation of a subset of the noise protocol https://noiseprotocol.org/noise.html,\n// agnostic to libp2p's usage of noise\n\nexport const ZEROLEN = uint8ArrayAlloc(0)\n\ninterface ICipherStateWithKey extends ICipherState {\n  k: Uint8Array\n}\n\nexport class CipherState implements ICipherState {\n  public k?: Uint8Array\n  public n: Nonce\n  private readonly crypto: ICrypto\n\n  constructor (crypto: ICrypto, k: Uint8Array | undefined = undefined, n = 0) {\n    this.crypto = crypto\n    this.k = k\n    this.n = new Nonce(n)\n  }\n\n  public hasKey (): this is ICipherStateWithKey {\n    return Boolean(this.k)\n  }\n\n  public encryptWithAd (ad: Uint8Array, plaintext: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    if (!this.hasKey()) {\n      return plaintext\n    }\n\n    this.n.assertValue()\n    const e = this.crypto.encrypt(plaintext, this.n.getBytes(), ad, this.k)\n    this.n.increment()\n\n    return e\n  }\n\n  public decryptWithAd (ad: Uint8Array, ciphertext: Uint8Array | Uint8ArrayList, dst?: Uint8Array): Uint8Array | Uint8ArrayList {\n    if (!this.hasKey()) {\n      return ciphertext\n    }\n\n    this.n.assertValue()\n    const plaintext = this.crypto.decrypt(ciphertext, this.n.getBytes(), ad, this.k, dst)\n    this.n.increment()\n\n    return plaintext\n  }\n}\n\nexport class SymmetricState implements ISymmetricState {\n  public cs: CipherState\n  public ck: Uint8Array\n  public h: Uint8Array\n  private readonly crypto: ICrypto\n\n  constructor (crypto: ICrypto, protocolName: string) {\n    this.crypto = crypto\n\n    const protocolNameBytes = uint8ArrayFromString(protocolName, 'utf-8')\n    this.h = hashProtocolName(crypto, protocolNameBytes)\n\n    this.ck = this.h\n    this.cs = new CipherState(crypto)\n  }\n\n  public mixKey (ikm: Uint8Array): void {\n    const [ck, tempK] = this.crypto.hkdf(this.ck, ikm)\n    this.ck = ck\n    this.cs = new CipherState(this.crypto, tempK)\n  }\n\n  public mixHash (data: Uint8Array | Uint8ArrayList): void {\n    this.h = this.crypto.hash(new Uint8ArrayList(this.h, data))\n  }\n\n  public encryptAndHash (plaintext: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    const ciphertext = this.cs.encryptWithAd(this.h, plaintext)\n    this.mixHash(ciphertext)\n    return ciphertext\n  }\n\n  public decryptAndHash (ciphertext: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    const plaintext = this.cs.decryptWithAd(this.h, ciphertext)\n    this.mixHash(ciphertext)\n    return plaintext\n  }\n\n  public split (): [CipherState, CipherState] {\n    const [tempK1, tempK2] = this.crypto.hkdf(this.ck, ZEROLEN)\n    return [new CipherState(this.crypto, tempK1), new CipherState(this.crypto, tempK2)]\n  }\n}\n\n// const MESSAGE_PATTERNS = ['e', 's', 'ee', 'es', 'se', 'ss'] as const\n// type MessagePattern = Array<typeof MESSAGE_PATTERNS[number]>\n\nexport interface HandshakeStateInit {\n  crypto: ICrypto\n  protocolName: string\n  initiator: boolean\n  prologue: Uint8Array\n  s?: KeyPair\n  e?: KeyPair\n  rs?: Uint8Array | Uint8ArrayList\n  re?: Uint8Array | Uint8ArrayList\n}\n\nexport abstract class AbstractHandshakeState implements IHandshakeState {\n  public ss: SymmetricState\n  public s?: KeyPair\n  public e?: KeyPair\n  public rs?: Uint8Array | Uint8ArrayList\n  public re?: Uint8Array | Uint8ArrayList\n  public initiator: boolean\n  protected readonly crypto: ICrypto\n\n  constructor (init: HandshakeStateInit) {\n    const { crypto, protocolName, prologue, initiator, s, e, rs, re } = init\n    this.crypto = crypto\n    this.ss = new SymmetricState(crypto, protocolName)\n    this.ss.mixHash(prologue)\n    this.initiator = initiator\n    this.s = s\n    this.e = e\n    this.rs = rs\n    this.re = re\n  }\n\n  protected writeE (): Uint8Array {\n    if (this.e) {\n      throw new Error('ephemeral keypair is already set')\n    }\n    const e = this.crypto.generateKeypair()\n    this.ss.mixHash(e.publicKey)\n    this.e = e\n    return e.publicKey\n  }\n\n  protected writeS (): Uint8Array | Uint8ArrayList {\n    if (!this.s) {\n      throw new Error('static keypair is not set')\n    }\n    return this.ss.encryptAndHash(this.s.publicKey)\n  }\n\n  protected writeEE (): void {\n    if (!this.e) {\n      throw new Error('ephemeral keypair is not set')\n    }\n    if (!this.re) {\n      throw new Error('remote ephemeral public key is not set')\n    }\n    this.ss.mixKey(this.crypto.dh(this.e, this.re))\n  }\n\n  protected writeES (): void {\n    if (this.initiator) {\n      if (!this.e) {\n        throw new Error('ephemeral keypair is not set')\n      }\n      if (!this.rs) {\n        throw new Error('remote static public key is not set')\n      }\n      this.ss.mixKey(this.crypto.dh(this.e, this.rs))\n    } else {\n      if (!this.s) {\n        throw new Error('static keypair is not set')\n      }\n      if (!this.re) {\n        throw new Error('remote ephemeral public key is not set')\n      }\n      this.ss.mixKey(this.crypto.dh(this.s, this.re))\n    }\n  }\n\n  protected writeSE (): void {\n    if (this.initiator) {\n      if (!this.s) {\n        throw new Error('static keypair is not set')\n      }\n      if (!this.re) {\n        throw new Error('remote ephemeral public key is not set')\n      }\n      this.ss.mixKey(this.crypto.dh(this.s, this.re))\n    } else {\n      if (!this.e) {\n        throw new Error('ephemeral keypair is not set')\n      }\n      if (!this.rs) {\n        throw new Error('remote static public key is not set')\n      }\n      this.ss.mixKey(this.crypto.dh(this.e, this.rs))\n    }\n  }\n\n  protected readE (message: Uint8ArrayList, offset = 0): void {\n    if (this.re) {\n      throw new Error('remote ephemeral public key is already set')\n    }\n    if (message.byteLength < offset + 32) {\n      throw new Error('message is not long enough')\n    }\n    this.re = message.sublist(offset, offset + 32)\n    this.ss.mixHash(this.re)\n  }\n\n  protected readS (message: Uint8ArrayList, offset = 0): number {\n    if (this.rs) {\n      throw new Error('remote static public key is already set')\n    }\n    const cipherLength = 32 + (this.ss.cs.hasKey() ? 16 : 0)\n    if (message.byteLength < offset + cipherLength) {\n      throw new Error('message is not long enough')\n    }\n    const temp = message.sublist(offset, offset + cipherLength)\n    this.rs = this.ss.decryptAndHash(temp)\n    return cipherLength\n  }\n\n  protected readEE (): void {\n    this.writeEE()\n  }\n\n  protected readES (): void {\n    this.writeES()\n  }\n\n  protected readSE (): void {\n    this.writeSE()\n  }\n}\n\n/**\n * A IHandshakeState that's optimized for the XX pattern\n */\nexport class XXHandshakeState extends AbstractHandshakeState {\n  // e\n  writeMessageA (payload: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    return new Uint8ArrayList(this.writeE(), this.ss.encryptAndHash(payload))\n  }\n\n  // e, ee, s, es\n  writeMessageB (payload: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    const e = this.writeE()\n    this.writeEE()\n    const encS = this.writeS()\n    this.writeES()\n\n    return new Uint8ArrayList(e, encS, this.ss.encryptAndHash(payload))\n  }\n\n  // s, se\n  writeMessageC (payload: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    const encS = this.writeS()\n    this.writeSE()\n\n    return new Uint8ArrayList(encS, this.ss.encryptAndHash(payload))\n  }\n\n  // e\n  readMessageA (message: Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    try {\n      this.readE(message)\n\n      return this.ss.decryptAndHash(message.sublist(32))\n    } catch (e) {\n      throw new InvalidCryptoExchangeError(`handshake stage 0 validation fail: ${(e as Error).message}`)\n    }\n  }\n\n  // e, ee, s, es\n  readMessageB (message: Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    try {\n      this.readE(message)\n      this.readEE()\n      const consumed = this.readS(message, 32)\n      this.readES()\n\n      return this.ss.decryptAndHash(message.sublist(32 + consumed))\n    } catch (e) {\n      throw new InvalidCryptoExchangeError(`handshake stage 1 validation fail: ${(e as Error).message}`)\n    }\n  }\n\n  // s, se\n  readMessageC (message: Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    try {\n      const consumed = this.readS(message)\n      this.readSE()\n\n      return this.ss.decryptAndHash(message.sublist(consumed))\n    } catch (e) {\n      throw new InvalidCryptoExchangeError(`handshake stage 2 validation fail: ${(e as Error).message}`)\n    }\n  }\n}\n\nfunction hashProtocolName (crypto: ICrypto, protocolName: Uint8Array): Uint8Array {\n  if (protocolName.length <= 32) {\n    const h = uint8ArrayAlloc(32)\n    h.set(protocolName)\n    return h\n  } else {\n    return crypto.hash(protocolName)\n  }\n}\n", "import { decodeMessage, encodeMessage, MaxLengthError, message } from 'protons-runtime'\nimport { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc'\nimport type { Codec, DecodeOptions } from 'protons-runtime'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface NoiseExtensions {\n  webtransportCerthashes: Uint8Array[]\n  streamMuxers: string[]\n}\n\nexport namespace NoiseExtensions {\n  let _codec: Codec<NoiseExtensions>\n\n  export const codec = (): Codec<NoiseExtensions> => {\n    if (_codec == null) {\n      _codec = message<NoiseExtensions>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.webtransportCerthashes != null) {\n          for (const value of obj.webtransportCerthashes) {\n            w.uint32(10)\n            w.bytes(value)\n          }\n        }\n\n        if (obj.streamMuxers != null) {\n          for (const value of obj.streamMuxers) {\n            w.uint32(18)\n            w.string(value)\n          }\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          webtransportCerthashes: [],\n          streamMuxers: []\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              if (opts.limits?.webtransportCerthashes != null && obj.webtransportCerthashes.length === opts.limits.webtransportCerthashes) {\n                throw new MaxLengthError('Decode error - map field \"webtransportCerthashes\" had too many elements')\n              }\n\n              obj.webtransportCerthashes.push(reader.bytes())\n              break\n            }\n            case 2: {\n              if (opts.limits?.streamMuxers != null && obj.streamMuxers.length === opts.limits.streamMuxers) {\n                throw new MaxLengthError('Decode error - map field \"streamMuxers\" had too many elements')\n              }\n\n              obj.streamMuxers.push(reader.string())\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<NoiseExtensions>): Uint8Array => {\n    return encodeMessage(obj, NoiseExtensions.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<NoiseExtensions>): NoiseExtensions => {\n    return decodeMessage(buf, NoiseExtensions.codec(), opts)\n  }\n}\n\nexport interface NoiseHandshakePayload {\n  identityKey: Uint8Array\n  identitySig: Uint8Array\n  extensions?: NoiseExtensions\n}\n\nexport namespace NoiseHandshakePayload {\n  let _codec: Codec<NoiseHandshakePayload>\n\n  export const codec = (): Codec<NoiseHandshakePayload> => {\n    if (_codec == null) {\n      _codec = message<NoiseHandshakePayload>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if ((obj.identityKey != null && obj.identityKey.byteLength > 0)) {\n          w.uint32(10)\n          w.bytes(obj.identityKey)\n        }\n\n        if ((obj.identitySig != null && obj.identitySig.byteLength > 0)) {\n          w.uint32(18)\n          w.bytes(obj.identitySig)\n        }\n\n        if (obj.extensions != null) {\n          w.uint32(34)\n          NoiseExtensions.codec().encode(obj.extensions, w)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          identityKey: uint8ArrayAlloc(0),\n          identitySig: uint8ArrayAlloc(0)\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.identityKey = reader.bytes()\n              break\n            }\n            case 2: {\n              obj.identitySig = reader.bytes()\n              break\n            }\n            case 4: {\n              obj.extensions = NoiseExtensions.codec().decode(reader, reader.uint32(), {\n                limits: opts.limits?.extensions\n              })\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<NoiseHandshakePayload>): Uint8Array => {\n    return encodeMessage(obj, NoiseHandshakePayload.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<NoiseHandshakePayload>): NoiseHandshakePayload => {\n    return decodeMessage(buf, NoiseHandshakePayload.codec(), opts)\n  }\n}\n", "import { publicKeyFromProtobuf, publicKeyToProtobuf } from '@libp2p/crypto/keys'\nimport { UnexpectedPeerError } from '@libp2p/interface'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { NoiseHandshakePayload } from './proto/payload.js'\nimport type { NoiseExtensions } from './proto/payload.js'\nimport type { PrivateKey, PublicKey } from '@libp2p/interface'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport async function createHandshakePayload (\n  privateKey: PrivateKey,\n  staticPublicKey: Uint8Array | Uint8ArrayList,\n  extensions?: NoiseExtensions\n): Promise<Uint8Array | Uint8ArrayList> {\n  const identitySig = await privateKey.sign(getSignaturePayload(staticPublicKey))\n\n  return NoiseHandshakePayload.encode({\n    identityKey: publicKeyToProtobuf(privateKey.publicKey),\n    identitySig,\n    extensions\n  })\n}\n\nexport async function decodeHandshakePayload (\n  payloadBytes: Uint8Array | Uint8ArrayList,\n  remoteStaticKey?: Uint8Array | Uint8ArrayList,\n  remoteIdentityKey?: PublicKey\n): Promise<NoiseHandshakePayload> {\n  try {\n    const payload = NoiseHandshakePayload.decode(payloadBytes)\n    const publicKey = publicKeyFromProtobuf(payload.identityKey)\n\n    if (remoteIdentityKey?.equals(publicKey) === false) {\n      throw new Error(`Payload identity key ${publicKey} does not match expected remote identity key ${remoteIdentityKey}`)\n    }\n\n    if (!remoteStaticKey) {\n      throw new Error('Remote static does not exist')\n    }\n\n    const signaturePayload = getSignaturePayload(remoteStaticKey)\n\n    if (!(await publicKey.verify(signaturePayload, payload.identitySig))) {\n      throw new Error('Invalid payload signature')\n    }\n\n    return payload\n  } catch (e) {\n    throw new UnexpectedPeerError((e as Error).message)\n  }\n}\n\nexport function getSignaturePayload (publicKey: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n  const prefix = uint8ArrayFromString('noise-libp2p-static-key:')\n\n  if (publicKey instanceof Uint8Array) {\n    return uint8ArrayConcat([prefix, publicKey], prefix.length + publicKey.length)\n  }\n\n  publicKey.prepend(prefix)\n\n  return publicKey\n}\n", "import {\n  logLocalStaticKeys,\n  logLocalEphemeralKeys,\n  logRemoteEphemeralKey,\n  logRemoteStaticKey,\n  logCipherState\n} from './logger.js'\nimport { ZEROLEN, XXHandshakeState } from './protocol.js'\nimport { createHandshakePayload, decodeHandshakePayload } from './utils.js'\nimport type { HandshakeResult, HandshakeParams } from './types.js'\nimport type { AbortOptions } from '@libp2p/interface'\n\nexport async function performHandshakeInitiator (init: HandshakeParams, options?: AbortOptions): Promise<HandshakeResult> {\n  const { log, connection, crypto, privateKey, prologue, s, remoteIdentityKey, extensions } = init\n\n  const payload = await createHandshakePayload(privateKey, s.publicKey, extensions)\n  const xx = new XXHandshakeState({\n    crypto,\n    protocolName: 'Noise_XX_25519_ChaChaPoly_SHA256',\n    initiator: true,\n    prologue,\n    s\n  })\n\n  logLocalStaticKeys(xx.s, log)\n  log.trace('Stage 0 - Initiator starting to send first message.')\n  await connection.write(xx.writeMessageA(ZEROLEN), options)\n  log.trace('Stage 0 - Initiator finished sending first message.')\n  logLocalEphemeralKeys(xx.e, log)\n\n  log.trace('Stage 1 - Initiator waiting to receive first message from responder...')\n  const plaintext = xx.readMessageB(await connection.read(options))\n  log.trace('Stage 1 - Initiator received the message.')\n  logRemoteEphemeralKey(xx.re, log)\n  logRemoteStaticKey(xx.rs, log)\n\n  log.trace(\"Initiator going to check remote's signature...\")\n  const receivedPayload = await decodeHandshakePayload(plaintext, xx.rs, remoteIdentityKey)\n  log.trace('All good with the signature!')\n\n  log.trace('Stage 2 - Initiator sending third handshake message.')\n  await connection.write(xx.writeMessageC(payload), options)\n  log.trace('Stage 2 - Initiator sent message with signed payload.')\n\n  const [cs1, cs2] = xx.ss.split()\n  logCipherState(cs1, cs2, log)\n\n  return {\n    payload: receivedPayload,\n    encrypt: (plaintext) => cs1.encryptWithAd(ZEROLEN, plaintext),\n    decrypt: (ciphertext, dst) => cs2.decryptWithAd(ZEROLEN, ciphertext, dst)\n  }\n}\n\nexport async function performHandshakeResponder (init: HandshakeParams, options?: AbortOptions): Promise<HandshakeResult> {\n  const { log, connection, crypto, privateKey, prologue, s, remoteIdentityKey, extensions } = init\n\n  const payload = await createHandshakePayload(privateKey, s.publicKey, extensions)\n  const xx = new XXHandshakeState({\n    crypto,\n    protocolName: 'Noise_XX_25519_ChaChaPoly_SHA256',\n    initiator: false,\n    prologue,\n    s\n  })\n\n  logLocalStaticKeys(xx.s, log)\n  log.trace('Stage 0 - Responder waiting to receive first message.')\n  xx.readMessageA(await connection.read(options))\n  log.trace('Stage 0 - Responder received first message.')\n  logRemoteEphemeralKey(xx.re, log)\n\n  log.trace('Stage 1 - Responder sending out first message with signed payload and static key.')\n  await connection.write(xx.writeMessageB(payload), options)\n  log.trace('Stage 1 - Responder sent the second handshake message with signed payload.')\n  logLocalEphemeralKeys(xx.e, log)\n\n  log.trace('Stage 2 - Responder waiting for third handshake message...')\n  const plaintext = xx.readMessageC(await connection.read(options))\n  log.trace('Stage 2 - Responder received the message, finished handshake.')\n  const receivedPayload = await decodeHandshakePayload(plaintext, xx.rs, remoteIdentityKey)\n\n  const [cs1, cs2] = xx.ss.split()\n  logCipherState(cs1, cs2, log)\n\n  return {\n    payload: receivedPayload,\n    encrypt: (plaintext) => cs2.encryptWithAd(ZEROLEN, plaintext),\n    decrypt: (ciphertext, dst) => cs1.decryptWithAd(ZEROLEN, ciphertext, dst)\n  }\n}\n", "import { Uint8ArrayList } from 'uint8arraylist'\nimport { NOISE_MSG_MAX_LENGTH_BYTES, NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG } from './constants.js'\nimport { uint16BEEncode } from './encoder.js'\nimport type { MetricsRegistry } from './metrics.js'\nimport type { HandshakeResult } from './types.js'\nimport type { Transform } from 'it-stream-types'\n\nconst CHACHA_TAG_LENGTH = 16\n\n// Returns generator that encrypts payload from the user\nexport function encryptStream (handshake: HandshakeResult, metrics?: MetricsRegistry): Transform<AsyncGenerator<Uint8Array | Uint8ArrayList>> {\n  return async function * (source) {\n    for await (const chunk of source) {\n      for (let i = 0; i < chunk.length; i += NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG) {\n        let end = i + NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG\n        if (end > chunk.length) {\n          end = chunk.length\n        }\n\n        let data: Uint8Array | Uint8ArrayList\n\n        if (chunk instanceof Uint8Array) {\n          data = handshake.encrypt(chunk.subarray(i, end))\n        } else {\n          data = handshake.encrypt(chunk.sublist(i, end))\n        }\n\n        metrics?.encryptedPackets.increment()\n\n        yield new Uint8ArrayList(uint16BEEncode(data.byteLength), data)\n      }\n    }\n  }\n}\n\n// Decrypt received payload to the user\nexport function decryptStream (handshake: HandshakeResult, metrics?: MetricsRegistry): Transform<AsyncGenerator<Uint8ArrayList>, AsyncGenerator<Uint8Array | Uint8ArrayList>> {\n  return async function * (source) {\n    for await (const chunk of source) {\n      for (let i = 0; i < chunk.length; i += NOISE_MSG_MAX_LENGTH_BYTES) {\n        let end = i + NOISE_MSG_MAX_LENGTH_BYTES\n        if (end > chunk.length) {\n          end = chunk.length\n        }\n\n        if (end - CHACHA_TAG_LENGTH < i) {\n          throw new Error('Invalid chunk')\n        }\n\n        const encrypted = chunk.sublist(i, end)\n        // memory allocation is not cheap so reuse the encrypted Uint8Array\n        // see https://github.com/ChainSafe/js-libp2p-noise/pull/242#issue-1422126164\n        // this is ok because chacha20 reads bytes one by one and don't reread after that\n        // it's also tested in https://github.com/ChainSafe/as-chacha20poly1305/pull/1/files#diff-25252846b58979dcaf4e41d47b3eadd7e4f335e7fb98da6c049b1f9cd011f381R48\n        const dst = chunk.subarray(i, end - CHACHA_TAG_LENGTH)\n        try {\n          const plaintext = handshake.decrypt(encrypted, dst)\n          metrics?.decryptedPackets.increment()\n          yield plaintext\n        } catch (e) {\n          metrics?.decryptErrors.increment()\n          throw e\n        }\n      }\n    }\n  }\n}\n", "import { publicKeyFromProtobuf } from '@libp2p/crypto/keys'\nimport { InvalidCryptoExchangeError, serviceCapabilities } from '@libp2p/interface'\nimport { peerIdFromPublicKey } from '@libp2p/peer-id'\nimport { decode } from 'it-length-prefixed'\nimport { lpStream } from 'it-length-prefixed-stream'\nimport { duplexPair } from 'it-pair/duplex'\nimport { pipe } from 'it-pipe'\nimport { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc'\nimport { NOISE_MSG_MAX_LENGTH_BYTES } from './constants.js'\nimport { defaultCrypto } from './crypto/index.js'\nimport { wrapCrypto } from './crypto.js'\nimport { uint16BEDecode, uint16BEEncode } from './encoder.js'\nimport { registerMetrics } from './metrics.js'\nimport { performHandshakeInitiator, performHandshakeResponder } from './performHandshake.js'\nimport { decryptStream, encryptStream } from './streaming.js'\nimport type { ICryptoInterface } from './crypto.js'\nimport type { NoiseComponents } from './index.js'\nimport type { MetricsRegistry } from './metrics.js'\nimport type { HandshakeResult, ICrypto, INoiseConnection, KeyPair } from './types.js'\nimport type { MultiaddrConnection, SecuredConnection, PrivateKey, PublicKey, StreamMuxerFactory, SecureConnectionOptions } from '@libp2p/interface'\nimport type { LengthPrefixedStream } from 'it-length-prefixed-stream'\nimport type { Duplex } from 'it-stream-types'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface NoiseExtensions {\n  webtransportCerthashes: Uint8Array[]\n}\n\nexport interface NoiseInit {\n  /**\n   * x25519 private key, reuse for faster handshakes\n   */\n  staticNoiseKey?: Uint8Array\n  extensions?: Partial<NoiseExtensions>\n  crypto?: ICryptoInterface\n  prologueBytes?: Uint8Array\n}\n\nexport class Noise implements INoiseConnection {\n  public protocol = '/noise'\n  public crypto: ICrypto\n\n  private readonly prologue: Uint8Array\n  private readonly staticKey: KeyPair\n  private readonly extensions?: NoiseExtensions\n  private readonly metrics?: MetricsRegistry\n  private readonly components: NoiseComponents\n\n  constructor (components: NoiseComponents, init: NoiseInit = {}) {\n    const { staticNoiseKey, extensions, crypto, prologueBytes } = init\n    const { metrics } = components\n\n    this.components = components\n    const _crypto = crypto ?? defaultCrypto\n    this.crypto = wrapCrypto(_crypto)\n    this.extensions = {\n      webtransportCerthashes: [],\n      ...extensions\n    }\n    this.metrics = metrics ? registerMetrics(metrics) : undefined\n\n    if (staticNoiseKey) {\n      // accepts x25519 private key of length 32\n      this.staticKey = _crypto.generateX25519KeyPairFromSeed(staticNoiseKey)\n    } else {\n      this.staticKey = _crypto.generateX25519KeyPair()\n    }\n    this.prologue = prologueBytes ?? uint8ArrayAlloc(0)\n  }\n\n  readonly [Symbol.toStringTag] = '@chainsafe/libp2p-noise'\n\n  readonly [serviceCapabilities]: string[] = [\n    '@libp2p/connection-encryption',\n    '@chainsafe/libp2p-noise'\n  ]\n\n  /**\n   * Encrypt outgoing data to the remote party (handshake as initiator)\n   *\n   * @param connection - streaming iterable duplex that will be encrypted\n   * @param options\n   * @param options.remotePeer - PeerId of the remote peer. Used to validate the integrity of the remote peer\n   * @param options.signal - Used to abort the operation\n   */\n  public async secureOutbound <Stream extends Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>> = MultiaddrConnection> (connection: Stream, options?: SecureConnectionOptions): Promise<SecuredConnection<Stream, NoiseExtensions>> {\n    const wrappedConnection = lpStream(\n      connection,\n      {\n        lengthEncoder: uint16BEEncode,\n        lengthDecoder: uint16BEDecode,\n        maxDataLength: NOISE_MSG_MAX_LENGTH_BYTES\n      }\n    )\n\n    const handshake = await this.performHandshakeInitiator(\n      wrappedConnection,\n      this.components.privateKey,\n      options?.remotePeer?.publicKey,\n      options\n    )\n    const conn = await this.createSecureConnection(wrappedConnection, handshake)\n\n    connection.source = conn.source\n    connection.sink = conn.sink\n\n    const publicKey = publicKeyFromProtobuf(handshake.payload.identityKey)\n\n    return {\n      conn: connection,\n      remoteExtensions: handshake.payload.extensions,\n      remotePeer: peerIdFromPublicKey(publicKey),\n      streamMuxer: options?.skipStreamMuxerNegotiation === true ? undefined : this.getStreamMuxer(handshake.payload.extensions?.streamMuxers)\n    }\n  }\n\n  private getStreamMuxer (protocols?: string[]): StreamMuxerFactory | undefined {\n    if (protocols == null || protocols.length === 0) {\n      return\n    }\n\n    const streamMuxers = this.components.upgrader.getStreamMuxers()\n\n    if (streamMuxers != null) {\n      for (const protocol of protocols) {\n        const streamMuxer = streamMuxers.get(protocol)\n\n        if (streamMuxer != null) {\n          return streamMuxer\n        }\n      }\n    }\n\n    if (protocols.length) {\n      throw new InvalidCryptoExchangeError('Early muxer negotiation was requested but the initiator and responder had no common muxers')\n    }\n  }\n\n  /**\n   * Decrypt incoming data (handshake as responder).\n   *\n   * @param connection - streaming iterable duplex that will be encrypted\n   * @param options\n   * @param options.remotePeer - PeerId of the remote peer. Used to validate the integrity of the remote peer\n   * @param options.signal - Used to abort the operation\n   */\n  public async secureInbound <Stream extends Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>> = MultiaddrConnection> (connection: Stream, options?: SecureConnectionOptions): Promise<SecuredConnection<Stream, NoiseExtensions>> {\n    const wrappedConnection = lpStream(\n      connection,\n      {\n        lengthEncoder: uint16BEEncode,\n        lengthDecoder: uint16BEDecode,\n        maxDataLength: NOISE_MSG_MAX_LENGTH_BYTES\n      }\n    )\n\n    const handshake = await this.performHandshakeResponder(\n      wrappedConnection,\n      this.components.privateKey,\n      options?.remotePeer?.publicKey,\n      options\n    )\n    const conn = await this.createSecureConnection(wrappedConnection, handshake)\n\n    connection.source = conn.source\n    connection.sink = conn.sink\n\n    const publicKey = publicKeyFromProtobuf(handshake.payload.identityKey)\n\n    return {\n      conn: connection,\n      remoteExtensions: handshake.payload.extensions,\n      remotePeer: peerIdFromPublicKey(publicKey),\n      streamMuxer: options?.skipStreamMuxerNegotiation === true ? undefined : this.getStreamMuxer(handshake.payload.extensions?.streamMuxers)\n    }\n  }\n\n  /**\n   * Perform XX handshake as initiator.\n   */\n  private async performHandshakeInitiator (\n    connection: LengthPrefixedStream,\n    // TODO: pass private key in noise constructor via Components\n    privateKey: PrivateKey,\n    remoteIdentityKey?: PublicKey,\n    options?: SecureConnectionOptions\n  ): Promise<HandshakeResult> {\n    let result: HandshakeResult\n    const streamMuxers = options?.skipStreamMuxerNegotiation === true ? [] : [...this.components.upgrader.getStreamMuxers().keys()]\n\n    try {\n      result = await performHandshakeInitiator({\n        connection,\n        privateKey,\n        remoteIdentityKey,\n        log: this.components.logger.forComponent('libp2p:noise:xxhandshake'),\n        crypto: this.crypto,\n        prologue: this.prologue,\n        s: this.staticKey,\n        extensions: {\n          streamMuxers,\n          webtransportCerthashes: [],\n          ...this.extensions\n        }\n      }, options)\n      this.metrics?.xxHandshakeSuccesses.increment()\n    } catch (e: unknown) {\n      this.metrics?.xxHandshakeErrors.increment()\n      throw e\n    }\n\n    return result\n  }\n\n  /**\n   * Perform XX handshake as responder.\n   */\n  private async performHandshakeResponder (\n    connection: LengthPrefixedStream,\n    privateKey: PrivateKey,\n    remoteIdentityKey?: PublicKey,\n    options?: SecureConnectionOptions\n  ): Promise<HandshakeResult> {\n    let result: HandshakeResult\n    const streamMuxers = options?.skipStreamMuxerNegotiation === true ? [] : [...this.components.upgrader.getStreamMuxers().keys()]\n\n    try {\n      result = await performHandshakeResponder({\n        connection,\n        privateKey,\n        remoteIdentityKey,\n        log: this.components.logger.forComponent('libp2p:noise:xxhandshake'),\n        crypto: this.crypto,\n        prologue: this.prologue,\n        s: this.staticKey,\n        extensions: {\n          streamMuxers,\n          webtransportCerthashes: [],\n          ...this.extensions\n        }\n      }, options)\n      this.metrics?.xxHandshakeSuccesses.increment()\n    } catch (e: unknown) {\n      this.metrics?.xxHandshakeErrors.increment()\n      throw e\n    }\n\n    return result\n  }\n\n  private async createSecureConnection (\n    connection: LengthPrefixedStream<Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>>>,\n    handshake: HandshakeResult\n  ): Promise<Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>>> {\n    // Create encryption box/unbox wrapper\n    const [secure, user] = duplexPair<Uint8Array | Uint8ArrayList>()\n    const network = connection.unwrap()\n\n    await pipe(\n      secure, // write to wrapper\n      encryptStream(handshake, this.metrics), // encrypt data + prefix with message length\n      network, // send to the remote peer\n      (source) => decode(source, { lengthDecoder: uint16BEDecode }), // read message length prefix\n      decryptStream(handshake, this.metrics), // decrypt the incoming data\n      secure // pipe to the wrapper\n    )\n\n    return user\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * This repository contains TypeScript implementation of noise protocol, an encryption protocol used in libp2p.\n *\n * ## Usage\n *\n * Install with `yarn add @chainsafe/libp2p-noise` or `npm i @chainsafe/libp2p-noise`.\n *\n * Example of using default noise configuration and passing it to the libp2p config:\n *\n * ```ts\n * import {createLibp2p} from \"libp2p\"\n * import {noise} from \"@chainsafe/libp2p-noise\"\n *\n * //custom noise configuration, pass it instead of `noise()`\n * //x25519 private key\n * const n = noise({ staticNoiseKey });\n *\n * const libp2p = await createLibp2p({\n *   connectionEncrypters: [noise()],\n *   //... other options\n * })\n * ```\n *\n * See the [NoiseInit](https://github.com/ChainSafe/js-libp2p-noise/blob/master/src/noise.ts#L22-L30) interface for noise configuration options.\n *\n * ## API\n *\n * This module exposes an implementation of the [ConnectionEncrypter](https://libp2p.github.io/js-libp2p/interfaces/_libp2p_interface.ConnectionEncrypter.html) interface.\n *\n * ## Bring your own crypto\n *\n * You can provide a custom crypto implementation (instead of the default, based on [@noble](https://paulmillr.com/noble/)) by adding a `crypto` field to the init argument passed to the `Noise` factory.\n *\n * The implementation must conform to the `ICryptoInterface`, defined in <https://github.com/ChainSafe/js-libp2p-noise/blob/master/src/crypto.ts>\n */\n\nimport { Noise } from './noise.js'\nimport type { NoiseInit, NoiseExtensions } from './noise.js'\nimport type { KeyPair } from './types.js'\nimport type { ComponentLogger, ConnectionEncrypter, Metrics, PeerId, PrivateKey, Upgrader } from '@libp2p/interface'\n\nexport { pureJsCrypto } from './crypto/js.js'\nexport type { ICryptoInterface } from './crypto.js'\nexport type { NoiseInit, NoiseExtensions, KeyPair }\n\nexport interface NoiseComponents {\n  peerId: PeerId\n  privateKey: PrivateKey\n  logger: ComponentLogger\n  upgrader: Upgrader\n  metrics?: Metrics\n}\n\nexport function noise (init: NoiseInit = {}): (components: NoiseComponents) => ConnectionEncrypter<NoiseExtensions> {\n  return (components: NoiseComponents) => new Noise(components, init)\n}\n", "\n// If the passed object is an (async) iterable, then get the iterator\n// If it's probably an iterator already (i.e. has next function) return it\n// else throw\nexport function getIterator <T> (obj: AsyncIterable<T>): AsyncIterator<T>\nexport function getIterator <T> (obj: AsyncIterator<T>): AsyncIterator<T>\nexport function getIterator <T> (obj: Iterable<T>): Iterator<T>\nexport function getIterator <T> (obj: Iterator<T>): Iterator<T>\nexport function getIterator <T> (obj: any): AsyncIterator<T> | Iterator <T>\nexport function getIterator <T> (obj: any): AsyncIterator<T> | Iterator <T> {\n  if (obj != null) {\n    if (typeof obj[Symbol.iterator] === 'function') {\n      return obj[Symbol.iterator]()\n    }\n    if (typeof obj[Symbol.asyncIterator] === 'function') {\n      return obj[Symbol.asyncIterator]()\n    }\n    if (typeof obj.next === 'function') {\n      return obj // probably an iterator\n    }\n  }\n  throw new Error('argument is not an iterator or iterable')\n}\n", "export class InvalidFrameError extends Error {\n  static name = 'InvalidFrameError'\n\n  constructor (message = 'The frame was invalid') {\n    super(message)\n    this.name = 'InvalidFrameError'\n  }\n}\n\nexport class UnrequestedPingError extends Error {\n  static name = 'UnrequestedPingError'\n\n  constructor (message = 'Unrequested ping error') {\n    super(message)\n    this.name = 'UnrequestedPingError'\n  }\n}\n\nexport class NotMatchingPingError extends Error {\n  static name = 'NotMatchingPingError'\n\n  constructor (message = 'Unrequested ping error') {\n    super(message)\n    this.name = 'NotMatchingPingError'\n  }\n}\n\nexport class InvalidStateError extends Error {\n  static name = 'InvalidStateError'\n\n  constructor (message = 'Invalid state') {\n    super(message)\n    this.name = 'InvalidStateError'\n  }\n}\n\nexport class StreamAlreadyExistsError extends Error {\n  static name = 'StreamAlreadyExistsError'\n\n  constructor (message = 'Strean already exists') {\n    super(message)\n    this.name = 'StreamAlreadyExistsError'\n  }\n}\n\nexport class DecodeInvalidVersionError extends Error {\n  static name = 'DecodeInvalidVersionError'\n\n  constructor (message = 'Decode invalid version') {\n    super(message)\n    this.name = 'DecodeInvalidVersionError'\n  }\n}\n\nexport class BothClientsError extends Error {\n  static name = 'BothClientsError'\n\n  constructor (message = 'Both clients') {\n    super(message)\n    this.name = 'BothClientsError'\n  }\n}\n\nexport class ReceiveWindowExceededError extends Error {\n  static name = 'ReceiveWindowExceededError'\n\n  constructor (message = 'Receive window exceeded') {\n    super(message)\n    this.name = 'ReceiveWindowExceededError'\n  }\n}\n", "// Protocol violation errors\n\nimport { BothClientsError, DecodeInvalidVersionError, InvalidFrameError, NotMatchingPingError, ReceiveWindowExceededError, StreamAlreadyExistsError, UnrequestedPingError } from './errors.js'\n\nexport const PROTOCOL_ERRORS = new Set([\n  InvalidFrameError.name,\n  UnrequestedPingError.name,\n  NotMatchingPingError.name,\n  StreamAlreadyExistsError.name,\n  DecodeInvalidVersionError.name,\n  BothClientsError.name,\n  ReceiveWindowExceededError.name\n])\n\n/**\n * INITIAL_STREAM_WINDOW is the initial stream window size.\n *\n * Not an implementation choice, this is defined in the specification\n */\nexport const INITIAL_STREAM_WINDOW = 256 * 1024\n\n/**\n * Default max stream window\n */\nexport const MAX_STREAM_WINDOW = 16 * 1024 * 1024\n", "import { InvalidParametersError } from '@libp2p/interface'\nimport { INITIAL_STREAM_WINDOW, MAX_STREAM_WINDOW } from './constants.js'\n\n// TOOD use config items or delete them\nexport interface Config {\n  /**\n   * Used to do periodic keep alive messages using a ping.\n   */\n  enableKeepAlive: boolean\n\n  /**\n   * How often to perform the keep alive\n   *\n   * measured in milliseconds\n   */\n  keepAliveInterval: number\n\n  /**\n   * Maximum number of concurrent inbound streams that we accept.\n   * If the peer tries to open more streams, those will be reset immediately.\n   */\n  maxInboundStreams: number\n\n  /**\n   * Maximum number of concurrent outbound streams that we accept.\n   * If the application tries to open more streams, the call to `newStream` will throw\n   */\n  maxOutboundStreams: number\n\n  /**\n   * Used to control the initial window size that we allow for a stream.\n   *\n   * measured in bytes\n   */\n  initialStreamWindowSize: number\n\n  /**\n   * Used to control the maximum window size that we allow for a stream.\n   */\n  maxStreamWindowSize: number\n\n  /**\n   * Maximum size of a message that we'll send on a stream.\n   * This ensures that a single stream doesn't hog a connection.\n   */\n  maxMessageSize: number\n}\n\nexport const defaultConfig: Config = {\n  enableKeepAlive: true,\n  keepAliveInterval: 30_000,\n  maxInboundStreams: 1_000,\n  maxOutboundStreams: 1_000,\n  initialStreamWindowSize: INITIAL_STREAM_WINDOW,\n  maxStreamWindowSize: MAX_STREAM_WINDOW,\n  maxMessageSize: 64 * 1024\n}\n\nexport function verifyConfig (config: Config): void {\n  if (config.keepAliveInterval <= 0) {\n    throw new InvalidParametersError('keep-alive interval must be positive')\n  }\n  if (config.maxInboundStreams < 0) {\n    throw new InvalidParametersError('max inbound streams must be larger or equal 0')\n  }\n  if (config.maxOutboundStreams < 0) {\n    throw new InvalidParametersError('max outbound streams must be larger or equal 0')\n  }\n  if (config.initialStreamWindowSize < INITIAL_STREAM_WINDOW) {\n    throw new InvalidParametersError('InitialStreamWindowSize must be larger or equal 256 kB')\n  }\n  if (config.maxStreamWindowSize < config.initialStreamWindowSize) {\n    throw new InvalidParametersError('MaxStreamWindowSize must be larger than the InitialStreamWindowSize')\n  }\n  if (config.maxStreamWindowSize > 2 ** 32 - 1) {\n    throw new InvalidParametersError('MaxStreamWindowSize must be less than equal MAX_UINT32')\n  }\n  if (config.maxMessageSize < 1024) {\n    throw new InvalidParametersError('MaxMessageSize must be greater than a kilobyte')\n  }\n}\n", "export enum FrameType {\n  /** Used to transmit data. May transmit zero length payloads depending on the flags. */\n  Data = 0x0,\n  /** Used to updated the senders receive window size. This is used to implement per-session flow control. */\n  WindowUpdate = 0x1,\n  /** Used to measure RTT. It can also be used to heart-beat and do keep-alives over TCP. */\n  Ping = 0x2,\n  /** Used to close a session. */\n  GoAway = 0x3\n}\n\nexport enum Flag {\n  /** Signals the start of a new stream. May be sent with a data or window update message. Also sent with a ping to indicate outbound. */\n  SYN = 0x1,\n  /** Acknowledges the start of a new stream. May be sent with a data or window update message. Also sent with a ping to indicate response. */\n  ACK = 0x2,\n  /** Performs a half-close of a stream. May be sent with a data message or window update. */\n  FIN = 0x4,\n  /** Reset a stream immediately. May be sent with a data or window update message. */\n  RST = 0x8\n}\n\nconst flagCodes = Object.values(Flag).filter((x) => typeof x !== 'string') as Flag[]\n\nexport const YAMUX_VERSION = 0\n\nexport enum GoAwayCode {\n  NormalTermination = 0x0,\n  ProtocolError = 0x1,\n  InternalError = 0x2\n}\n\nexport const HEADER_LENGTH = 12\n\nexport interface FrameHeader {\n  /**\n   * The version field is used for future backward compatibility.\n   * At the current time, the field is always set to 0, to indicate the initial version.\n   */\n  version?: number\n  /** The type field is used to switch the frame message type. */\n  type: FrameType\n  /** The flags field is used to provide additional information related to the message type. */\n  flag: number\n  /**\n   * The StreamID field is used to identify the logical stream the frame is addressing.\n   * The client side should use odd ID's, and the server even.\n   * This prevents any collisions. Additionally, the 0 ID is reserved to represent the session.\n   */\n  streamID: number\n  /**\n   * The meaning of the length field depends on the message type:\n   * Data - provides the length of bytes following the header\n   * Window update - provides a delta update to the window size\n   * Ping - Contains an opaque value, echoed back\n   * Go Away - Contains an error code\n   */\n  length: number\n}\n\nexport function stringifyHeader (header: FrameHeader): string {\n  const flags = flagCodes.filter(f => (header.flag & f) === f).map(f => Flag[f]).join('|')\n  return `streamID=${header.streamID} type=${FrameType[header.type]} flag=${flags} length=${header.length}`\n}\n", "import { Uint8ArrayList } from 'uint8arraylist'\nimport { InvalidFrameError, InvalidStateError } from './errors.js'\nimport { FrameType, HEADER_LENGTH, YAMUX_VERSION } from './frame.js'\nimport type { FrameHeader } from './frame.js'\nimport type { Source } from 'it-stream-types'\n\n// used to bitshift in decoding\n// native bitshift can overflow into a negative number, so we bitshift by multiplying by a power of 2\nconst twoPow24 = 2 ** 24\n\n/**\n * Decode a header from the front of a buffer\n *\n * @param data - Assumed to have enough bytes for a header\n */\nexport function decodeHeader (data: Uint8Array): FrameHeader {\n  if (data[0] !== YAMUX_VERSION) {\n    throw new InvalidFrameError('Invalid frame version')\n  }\n  return {\n    type: data[1],\n    flag: (data[2] << 8) + data[3],\n    streamID: (data[4] * twoPow24) + (data[5] << 16) + (data[6] << 8) + data[7],\n    length: (data[8] * twoPow24) + (data[9] << 16) + (data[10] << 8) + data[11]\n  }\n}\n\n/**\n * Decodes yamux frames from a source\n */\nexport class Decoder {\n  private readonly source: Source<Uint8Array | Uint8ArrayList>\n  /** Buffer for in-progress frames */\n  private readonly buffer: Uint8ArrayList\n  /** Used to sanity check against decoding while in an inconsistent state */\n  private frameInProgress: boolean\n\n  constructor (source: Source<Uint8Array | Uint8ArrayList>) {\n    // Normally, when entering a for-await loop with an iterable/async iterable, the only ways to exit the loop are:\n    // 1. exhaust the iterable\n    // 2. throw an error - slow, undesirable if there's not actually an error\n    // 3. break or return - calls the iterable's `return` method, finalizing the iterable, no more iteration possible\n    //\n    // In this case, we want to enter (and exit) a for-await loop per chunked data frame and continue processing the iterable.\n    // To do this, we strip the `return` method from the iterator and can now `break` early and continue iterating.\n    // Exiting the main for-await is still possible via 1. and 2.\n    this.source = returnlessSource(source)\n    this.buffer = new Uint8ArrayList()\n    this.frameInProgress = false\n  }\n\n  /**\n   * Emits frames from the decoder source.\n   *\n   * Note: If `readData` is emitted, it _must_ be called before the next iteration\n   * Otherwise an error is thrown\n   */\n  async * emitFrames (): AsyncGenerator<{ header: FrameHeader, readData?(): Promise<Uint8ArrayList> }> {\n    for await (const chunk of this.source) {\n      this.buffer.append(chunk)\n\n      // Loop to consume as many bytes from the buffer as possible\n      // Eg: when a single chunk contains several frames\n      while (true) {\n        const header = this.readHeader()\n        if (header === undefined) {\n          break\n        }\n\n        const { type, length } = header\n        if (type === FrameType.Data) {\n          // This is a data frame, the frame body must still be read\n          // `readData` must be called before the next iteration here\n          this.frameInProgress = true\n          yield {\n            header,\n            readData: this.readBytes.bind(this, length)\n          }\n        } else {\n          yield { header }\n        }\n      }\n    }\n  }\n\n  private readHeader (): FrameHeader | undefined {\n    // Sanity check to ensure a header isn't read when another frame is partially decoded\n    // In practice this shouldn't happen\n    if (this.frameInProgress) {\n      throw new InvalidStateError('decoding frame already in progress')\n    }\n\n    if (this.buffer.length < HEADER_LENGTH) {\n      // not enough data yet\n      return\n    }\n\n    const header = decodeHeader(this.buffer.subarray(0, HEADER_LENGTH))\n    this.buffer.consume(HEADER_LENGTH)\n    return header\n  }\n\n  private async readBytes (length: number): Promise<Uint8ArrayList> {\n    if (this.buffer.length < length) {\n      for await (const chunk of this.source) {\n        this.buffer.append(chunk)\n\n        if (this.buffer.length >= length) {\n          // see note above, the iterator is not `return`ed here\n          break\n        }\n      }\n    }\n\n    const out = this.buffer.sublist(0, length)\n    this.buffer.consume(length)\n\n    // The next frame can now be decoded\n    this.frameInProgress = false\n\n    return out\n  }\n}\n\n/**\n * Strip the `return` method from a `Source`\n */\nexport function returnlessSource<T> (source: Source<T>): Source<T> {\n  if ((source as Iterable<T>)[Symbol.iterator] !== undefined) {\n    const iterator = (source as Iterable<T>)[Symbol.iterator]()\n    iterator.return = undefined\n    return {\n      [Symbol.iterator] () { return iterator }\n    }\n  } else if ((source as AsyncIterable<T>)[Symbol.asyncIterator] !== undefined) {\n    const iterator = (source as AsyncIterable<T>)[Symbol.asyncIterator]()\n    iterator.return = undefined\n    return {\n      [Symbol.asyncIterator] () { return iterator }\n    }\n  } else {\n    throw new Error('a source must be either an iterable or an async iterable')\n  }\n}\n", "import { HEADER_LENGTH } from './frame.js'\nimport type { FrameHeader } from './frame.js'\n\nexport function encodeHeader (header: FrameHeader): Uint8Array {\n  const frame = new Uint8Array(HEADER_LENGTH)\n\n  // always assume version 0\n  // frameView.setUint8(0, header.version)\n\n  frame[1] = header.type\n\n  frame[2] = header.flag >>> 8\n  frame[3] = header.flag\n\n  frame[4] = header.streamID >>> 24\n  frame[5] = header.streamID >>> 16\n  frame[6] = header.streamID >>> 8\n  frame[7] = header.streamID\n\n  frame[8] = header.length >>> 24\n  frame[9] = header.length >>> 16\n  frame[10] = header.length >>> 8\n  frame[11] = header.length\n\n  return frame\n}\n", "export function isPromise <T = unknown> (thing: any): thing is Promise<T> {\n  if (thing == null) {\n    return false\n  }\n\n  return typeof thing.then === 'function' &&\n    typeof thing.catch === 'function' &&\n    typeof thing.finally === 'function'\n}\n", "import { getIterator } from 'get-iterator'\nimport { isPromise } from './is-promise.js'\nimport type { Logger } from '@libp2p/logger'\nimport type { Source } from 'it-stream-types'\n\nexport function closeSource (source: Source<unknown>, log: Logger): void {\n  const res = getIterator(source).return?.()\n\n  if (isPromise(res)) {\n    res.catch(err => {\n      log.error('could not cause iterator to return', err)\n    })\n  }\n}\n", "import { StreamResetError, StreamStateError } from '@libp2p/interface'\nimport { pushable } from 'it-pushable'\nimport defer from 'p-defer'\nimport { raceSignal } from 'race-signal'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { closeSource } from './close-source.js'\nimport type { AbortOptions, Direction, ReadStatus, Stream, StreamStatus, StreamTimeline, WriteStatus } from '@libp2p/interface'\nimport type { Logger } from '@libp2p/logger'\nimport type { Pushable } from 'it-pushable'\nimport type { Source } from 'it-stream-types'\nimport type { DeferredPromise } from 'p-defer'\n\nconst DEFAULT_SEND_CLOSE_WRITE_TIMEOUT = 5000\n\nexport interface AbstractStreamInit {\n  /**\n   * A unique identifier for this stream\n   */\n  id: string\n\n  /**\n   * The stream direction\n   */\n  direction: Direction\n\n  /**\n   * A Logger implementation used to log stream-specific information\n   */\n  log: Logger\n\n  /**\n   * User specific stream metadata\n   */\n  metadata?: Record<string, unknown>\n\n  /**\n   * Invoked when the stream ends\n   */\n  onEnd?(err?: Error): void\n\n  /**\n   * Invoked when the readable end of the stream is closed\n   */\n  onCloseRead?(): void\n\n  /**\n   * Invoked when the writable end of the stream is closed\n   */\n  onCloseWrite?(): void\n\n  /**\n   * Invoked when the stream has been reset by the remote\n   */\n  onReset?(): void\n\n  /**\n   * Invoked when the stream has errored\n   */\n  onAbort?(err: Error): void\n\n  /**\n   * How long to wait in ms for stream data to be written to the underlying\n   * connection when closing the writable end of the stream.\n   *\n   * @default 500\n   */\n  closeTimeout?: number\n\n  /**\n   * After the stream sink has closed, a limit on how long it takes to send\n   * a close-write message to the remote peer.\n   */\n  sendCloseWriteTimeout?: number\n}\n\nfunction isPromise <T = unknown> (thing: any): thing is Promise<T> {\n  if (thing == null) {\n    return false\n  }\n\n  return typeof thing.then === 'function' &&\n    typeof thing.catch === 'function' &&\n    typeof thing.finally === 'function'\n}\n\nexport abstract class AbstractStream implements Stream {\n  public id: string\n  public direction: Direction\n  public timeline: StreamTimeline\n  public protocol?: string\n  public metadata: Record<string, unknown>\n  public source: AsyncGenerator<Uint8ArrayList, void, unknown>\n  public status: StreamStatus\n  public readStatus: ReadStatus\n  public writeStatus: WriteStatus\n  public readonly log: Logger\n\n  private readonly sinkController: AbortController\n  private readonly sinkEnd: DeferredPromise<void>\n  private readonly closed: DeferredPromise<void>\n  private endErr: Error | undefined\n  private readonly streamSource: Pushable<Uint8ArrayList>\n  private readonly onEnd?: (err?: Error) => void\n  private readonly onCloseRead?: () => void\n  private readonly onCloseWrite?: () => void\n  private readonly onReset?: () => void\n  private readonly onAbort?: (err: Error) => void\n  private readonly sendCloseWriteTimeout: number\n  private sendingData?: DeferredPromise<void>\n\n  constructor (init: AbstractStreamInit) {\n    this.sinkController = new AbortController()\n    this.sinkEnd = defer()\n    this.closed = defer()\n    this.log = init.log\n\n    // stream status\n    this.status = 'open'\n    this.readStatus = 'ready'\n    this.writeStatus = 'ready'\n\n    this.id = init.id\n    this.metadata = init.metadata ?? {}\n    this.direction = init.direction\n    this.timeline = {\n      open: Date.now()\n    }\n    this.sendCloseWriteTimeout = init.sendCloseWriteTimeout ?? DEFAULT_SEND_CLOSE_WRITE_TIMEOUT\n\n    this.onEnd = init.onEnd\n    this.onCloseRead = init.onCloseRead\n    this.onCloseWrite = init.onCloseWrite\n    this.onReset = init.onReset\n    this.onAbort = init.onAbort\n\n    this.source = this.streamSource = pushable<Uint8ArrayList>({\n      onEnd: (err) => {\n        if (err != null) {\n          this.log.trace('source ended with error', err)\n        } else {\n          this.log.trace('source ended')\n        }\n\n        this.onSourceEnd(err)\n      }\n    })\n\n    // necessary because the libp2p upgrader wraps the sink function\n    this.sink = this.sink.bind(this)\n  }\n\n  async sink (source: Source<Uint8ArrayList | Uint8Array>): Promise<void> {\n    if (this.writeStatus !== 'ready') {\n      throw new StreamStateError(`writable end state is \"${this.writeStatus}\" not \"ready\"`)\n    }\n\n    try {\n      this.writeStatus = 'writing'\n\n      const options: AbortOptions = {\n        signal: this.sinkController.signal\n      }\n\n      if (this.direction === 'outbound') { // If initiator, open a new stream\n        const res = this.sendNewStream(options)\n\n        if (isPromise(res)) {\n          await res\n        }\n      }\n\n      const abortListener = (): void => {\n        closeSource(source, this.log)\n      }\n\n      try {\n        this.sinkController.signal.addEventListener('abort', abortListener)\n\n        this.log.trace('sink reading from source')\n\n        for await (let data of source) {\n          data = data instanceof Uint8Array ? new Uint8ArrayList(data) : data\n\n          const res = this.sendData(data, options)\n\n          if (isPromise(res)) {\n            this.sendingData = defer()\n            await res\n            this.sendingData.resolve()\n            this.sendingData = undefined\n          }\n        }\n      } finally {\n        this.sinkController.signal.removeEventListener('abort', abortListener)\n      }\n\n      this.log.trace('sink finished reading from source, write status is \"%s\"', this.writeStatus)\n\n      if (this.writeStatus === 'writing') {\n        this.writeStatus = 'closing'\n\n        this.log.trace('send close write to remote')\n        await this.sendCloseWrite({\n          signal: AbortSignal.timeout(this.sendCloseWriteTimeout)\n        })\n\n        this.writeStatus = 'closed'\n      }\n\n      this.onSinkEnd()\n    } catch (err: any) {\n      this.log.trace('sink ended with error, calling abort with error', err)\n      this.abort(err)\n\n      throw err\n    } finally {\n      this.log.trace('resolve sink end')\n      this.sinkEnd.resolve()\n    }\n  }\n\n  protected onSourceEnd (err?: Error): void {\n    if (this.timeline.closeRead != null) {\n      return\n    }\n\n    this.timeline.closeRead = Date.now()\n    this.readStatus = 'closed'\n\n    if (err != null && this.endErr == null) {\n      this.endErr = err\n    }\n\n    this.onCloseRead?.()\n\n    if (this.timeline.closeWrite != null) {\n      this.log.trace('source and sink ended')\n      this.timeline.close = Date.now()\n\n      if (this.status !== 'aborted' && this.status !== 'reset') {\n        this.status = 'closed'\n      }\n\n      if (this.onEnd != null) {\n        this.onEnd(this.endErr)\n      }\n\n      this.closed.resolve()\n    } else {\n      this.log.trace('source ended, waiting for sink to end')\n    }\n  }\n\n  protected onSinkEnd (err?: Error): void {\n    if (this.timeline.closeWrite != null) {\n      return\n    }\n\n    this.timeline.closeWrite = Date.now()\n    this.writeStatus = 'closed'\n\n    if (err != null && this.endErr == null) {\n      this.endErr = err\n    }\n\n    this.onCloseWrite?.()\n\n    if (this.timeline.closeRead != null) {\n      this.log.trace('sink and source ended')\n      this.timeline.close = Date.now()\n\n      if (this.status !== 'aborted' && this.status !== 'reset') {\n        this.status = 'closed'\n      }\n\n      if (this.onEnd != null) {\n        this.onEnd(this.endErr)\n      }\n\n      this.closed.resolve()\n    } else {\n      this.log.trace('sink ended, waiting for source to end')\n    }\n  }\n\n  // Close for both Reading and Writing\n  async close (options?: AbortOptions): Promise<void> {\n    if (this.status !== 'open') {\n      return\n    }\n\n    this.log.trace('closing gracefully')\n\n    this.status = 'closing'\n\n    // wait for read and write ends to close\n    await raceSignal(Promise.all([\n      this.closeWrite(options),\n      this.closeRead(options),\n      this.closed.promise\n    ]), options?.signal)\n\n    this.status = 'closed'\n\n    this.log.trace('closed gracefully')\n  }\n\n  async closeRead (options: AbortOptions = {}): Promise<void> {\n    if (this.readStatus === 'closing' || this.readStatus === 'closed') {\n      return\n    }\n\n    this.log.trace('closing readable end of stream with starting read status \"%s\"', this.readStatus)\n\n    const readStatus = this.readStatus\n    this.readStatus = 'closing'\n\n    if (this.status !== 'reset' && this.status !== 'aborted' && this.timeline.closeRead == null) {\n      this.log.trace('send close read to remote')\n      await this.sendCloseRead(options)\n    }\n\n    if (readStatus === 'ready') {\n      this.log.trace('ending internal source queue with %d queued bytes', this.streamSource.readableLength)\n      this.streamSource.end()\n    }\n\n    this.log.trace('closed readable end of stream')\n  }\n\n  async closeWrite (options: AbortOptions = {}): Promise<void> {\n    if (this.writeStatus === 'closing' || this.writeStatus === 'closed') {\n      return\n    }\n\n    this.log.trace('closing writable end of stream with starting write status \"%s\"', this.writeStatus)\n\n    if (this.writeStatus === 'ready') {\n      this.log.trace('sink was never sunk, sink an empty array')\n\n      await raceSignal(this.sink([]), options.signal)\n    }\n\n    if (this.writeStatus === 'writing') {\n      // try to let sending outgoing data succeed\n      if (this.sendingData != null) {\n        await raceSignal(this.sendingData.promise, options.signal)\n      }\n\n      // stop reading from the source passed to `.sink`\n      this.log.trace('aborting source passed to .sink')\n      this.sinkController.abort()\n      await raceSignal(this.sinkEnd.promise, options.signal)\n    }\n\n    this.writeStatus = 'closed'\n\n    this.log.trace('closed writable end of stream')\n  }\n\n  /**\n   * Close immediately for reading and writing and send a reset message (local\n   * error)\n   */\n  abort (err: Error): void {\n    if (this.status === 'closed' || this.status === 'aborted' || this.status === 'reset') {\n      return\n    }\n\n    this.log('abort with error', err)\n\n    // try to send a reset message\n    this.log('try to send reset to remote')\n    const res = this.sendReset()\n\n    if (isPromise(res)) {\n      res.catch((err) => {\n        this.log.error('error sending reset message', err)\n      })\n    }\n\n    this.status = 'aborted'\n    this.timeline.abort = Date.now()\n    this._closeSinkAndSource(err)\n    this.onAbort?.(err)\n  }\n\n  /**\n   * Receive a reset message - close immediately for reading and writing (remote\n   * error)\n   */\n  reset (): void {\n    if (this.status === 'closed' || this.status === 'aborted' || this.status === 'reset') {\n      return\n    }\n\n    const err = new StreamResetError('stream reset')\n\n    this.status = 'reset'\n    this.timeline.reset = Date.now()\n    this._closeSinkAndSource(err)\n    this.onReset?.()\n  }\n\n  _closeSinkAndSource (err?: Error): void {\n    this._closeSink(err)\n    this._closeSource(err)\n  }\n\n  _closeSink (err?: Error): void {\n    // if the sink function is running, cause it to end\n    if (this.writeStatus === 'writing') {\n      this.log.trace('end sink source')\n      this.sinkController.abort()\n    }\n\n    this.onSinkEnd(err)\n  }\n\n  _closeSource (err?: Error): void {\n    // if the source is not ending, end it\n    if (this.readStatus !== 'closing' && this.readStatus !== 'closed') {\n      this.log.trace('ending source with %d bytes to be read by consumer', this.streamSource.readableLength)\n      this.readStatus = 'closing'\n      this.streamSource.end(err)\n    }\n  }\n\n  /**\n   * The remote closed for writing so we should expect to receive no more\n   * messages\n   */\n  remoteCloseWrite (): void {\n    if (this.readStatus === 'closing' || this.readStatus === 'closed') {\n      this.log('received remote close write but local source is already closed')\n      return\n    }\n\n    this.log.trace('remote close write')\n    this._closeSource()\n  }\n\n  /**\n   * The remote closed for reading so we should not send any more\n   * messages\n   */\n  remoteCloseRead (): void {\n    if (this.writeStatus === 'closing' || this.writeStatus === 'closed') {\n      this.log('received remote close read but local sink is already closed')\n      return\n    }\n\n    this.log.trace('remote close read')\n    this._closeSink()\n  }\n\n  /**\n   * The underlying muxer has closed, no more messages can be sent or will\n   * be received, close immediately to free up resources\n   */\n  destroy (): void {\n    if (this.status === 'closed' || this.status === 'aborted' || this.status === 'reset') {\n      this.log('received destroy but we are already closed')\n      return\n    }\n\n    this.log.trace('stream destroyed')\n\n    this._closeSinkAndSource()\n  }\n\n  /**\n   * When an extending class reads data from it's implementation-specific source,\n   * call this method to allow the stream consumer to read the data.\n   */\n  sourcePush (data: Uint8ArrayList): void {\n    this.streamSource.push(data)\n  }\n\n  /**\n   * Returns the amount of unread data - can be used to prevent large amounts of\n   * data building up when the stream consumer is too slow.\n   */\n  sourceReadableLength (): number {\n    return this.streamSource.readableLength\n  }\n\n  /**\n   * Send a message to the remote muxer informing them a new stream is being\n   * opened\n   */\n  abstract sendNewStream (options?: AbortOptions): void | Promise<void>\n\n  /**\n   * Send a data message to the remote muxer\n   */\n  abstract sendData (buf: Uint8ArrayList, options?: AbortOptions): void | Promise<void>\n\n  /**\n   * Send a reset message to the remote muxer\n   */\n  abstract sendReset (options?: AbortOptions): void | Promise<void>\n\n  /**\n   * Send a message to the remote muxer, informing them no more data messages\n   * will be sent by this end of the stream\n   */\n  abstract sendCloseWrite (options?: AbortOptions): void | Promise<void>\n\n  /**\n   * Send a message to the remote muxer, informing them no more data messages\n   * will be read by this end of the stream\n   */\n  abstract sendCloseRead (options?: AbortOptions): void | Promise<void>\n}\n", "import { AbortError } from '@libp2p/interface'\nimport { AbstractStream } from '@libp2p/utils/abstract-stream'\nimport each from 'it-foreach'\nimport { INITIAL_STREAM_WINDOW } from './constants.js'\nimport { ReceiveWindowExceededError } from './errors.js'\nimport { Flag, FrameType, HEADER_LENGTH } from './frame.js'\nimport type { Config } from './config.js'\nimport type { FrameHeader } from './frame.js'\nimport type { AbortOptions } from '@libp2p/interface'\nimport type { AbstractStreamInit } from '@libp2p/utils/abstract-stream'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport enum StreamState {\n  Init,\n  SYNSent,\n  SYNReceived,\n  Established,\n  Finished\n}\n\nexport interface YamuxStreamInit extends AbstractStreamInit {\n  name?: string\n  sendFrame(header: FrameHeader, body?: Uint8ArrayList): void\n  getRTT(): number\n  config: Config\n  state: StreamState\n}\n\n/** YamuxStream is used to represent a logical stream within a session */\nexport class YamuxStream extends AbstractStream {\n  name?: string\n  state: StreamState\n\n  private readonly config: Config\n  private readonly _id: number\n\n  /** The number of available bytes to send */\n  private sendWindowCapacity: number\n  /** Callback to notify that the sendWindowCapacity has been updated */\n  private sendWindowCapacityUpdate?: () => void\n\n  /** The number of bytes available to receive in a full window */\n  private recvWindow: number\n  /** The number of available bytes to receive */\n  private recvWindowCapacity: number\n\n  /**\n   * An 'epoch' is the time it takes to process and read data\n   *\n   * Used in conjunction with RTT to determine whether to increase the recvWindow\n   */\n  private epochStart: number\n  private readonly getRTT: () => number\n\n  private readonly sendFrame: (header: FrameHeader, body?: Uint8ArrayList) => void\n\n  constructor (init: YamuxStreamInit) {\n    super({\n      ...init,\n      onEnd: (err?: Error) => {\n        this.state = StreamState.Finished\n        init.onEnd?.(err)\n      }\n    })\n\n    this.config = init.config\n    this._id = parseInt(init.id, 10)\n    this.name = init.name\n    this.state = init.state\n    this.sendWindowCapacity = INITIAL_STREAM_WINDOW\n    this.recvWindow = this.config.initialStreamWindowSize\n    this.recvWindowCapacity = this.recvWindow\n    this.epochStart = Date.now()\n    this.getRTT = init.getRTT\n\n    this.sendFrame = init.sendFrame\n\n    this.source = each(this.source, () => {\n      this.sendWindowUpdate()\n    })\n  }\n\n  /**\n   * Send a message to the remote muxer informing them a new stream is being\n   * opened.\n   *\n   * This is a noop for Yamux because the first window update is sent when\n   * .newStream is called on the muxer which opens the stream on the remote.\n   */\n  async sendNewStream (): Promise<void> {\n\n  }\n\n  /**\n   * Send a data message to the remote muxer\n   */\n  async sendData (buf: Uint8ArrayList, options: AbortOptions = {}): Promise<void> {\n    buf = buf.sublist()\n\n    // send in chunks, waiting for window updates\n    while (buf.byteLength !== 0) {\n      // wait for the send window to refill\n      if (this.sendWindowCapacity === 0) {\n        this.log?.trace('wait for send window capacity, status %s', this.status)\n        await this.waitForSendWindowCapacity(options)\n\n        // check we didn't close while waiting for send window capacity\n        if (this.status === 'closed' || this.status === 'aborted' || this.status === 'reset') {\n          this.log?.trace('%s while waiting for send window capacity', this.status)\n          return\n        }\n      }\n\n      // send as much as we can\n      const toSend = Math.min(this.sendWindowCapacity, this.config.maxMessageSize - HEADER_LENGTH, buf.length)\n      const flags = this.getSendFlags()\n\n      this.sendFrame({\n        type: FrameType.Data,\n        flag: flags,\n        streamID: this._id,\n        length: toSend\n      }, buf.sublist(0, toSend))\n\n      this.sendWindowCapacity -= toSend\n\n      buf.consume(toSend)\n    }\n  }\n\n  /**\n   * Send a reset message to the remote muxer\n   */\n  async sendReset (): Promise<void> {\n    this.sendFrame({\n      type: FrameType.WindowUpdate,\n      flag: Flag.RST,\n      streamID: this._id,\n      length: 0\n    })\n  }\n\n  /**\n   * Send a message to the remote muxer, informing them no more data messages\n   * will be sent by this end of the stream\n   */\n  async sendCloseWrite (): Promise<void> {\n    const flags = this.getSendFlags() | Flag.FIN\n    this.sendFrame({\n      type: FrameType.WindowUpdate,\n      flag: flags,\n      streamID: this._id,\n      length: 0\n    })\n  }\n\n  /**\n   * Send a message to the remote muxer, informing them no more data messages\n   * will be read by this end of the stream\n   */\n  async sendCloseRead (): Promise<void> {\n\n  }\n\n  /**\n   * Wait for the send window to be non-zero\n   *\n   * Will throw with ERR_STREAM_ABORT if the stream gets aborted\n   */\n  async waitForSendWindowCapacity (options: AbortOptions = {}): Promise<void> {\n    if (this.sendWindowCapacity > 0) {\n      return\n    }\n\n    let resolve: () => void\n    let reject: (err: Error) => void\n    const abort = (): void => {\n      if (this.status === 'open' || this.status === 'closing') {\n        reject(new AbortError('Stream aborted'))\n      } else {\n        // the stream was closed already, ignore the failure to send\n        resolve()\n      }\n    }\n    options.signal?.addEventListener('abort', abort)\n\n    try {\n      await new Promise<void>((_resolve, _reject) => {\n        this.sendWindowCapacityUpdate = () => {\n          _resolve()\n        }\n        reject = _reject\n        resolve = _resolve\n      })\n    } finally {\n      options.signal?.removeEventListener('abort', abort)\n    }\n  }\n\n  /**\n   * handleWindowUpdate is called when the stream receives a window update frame\n   */\n  handleWindowUpdate (header: FrameHeader): void {\n    this.log?.trace('stream received window update id=%s', this._id)\n    this.processFlags(header.flag)\n\n    // increase send window\n    const available = this.sendWindowCapacity\n    this.sendWindowCapacity += header.length\n    // if the update increments a 0 availability, notify the stream that sending can resume\n    if (available === 0 && header.length > 0) {\n      this.sendWindowCapacityUpdate?.()\n    }\n  }\n\n  /**\n   * handleData is called when the stream receives a data frame\n   */\n  async handleData (header: FrameHeader, readData: () => Promise<Uint8ArrayList>): Promise<void> {\n    this.log?.trace('stream received data id=%s', this._id)\n    this.processFlags(header.flag)\n\n    // check that our recv window is not exceeded\n    if (this.recvWindowCapacity < header.length) {\n      throw new ReceiveWindowExceededError('Receive window exceeded')\n    }\n\n    const data = await readData()\n    this.recvWindowCapacity -= header.length\n\n    this.sourcePush(data)\n  }\n\n  /**\n   * processFlags is used to update the state of the stream based on set flags, if any.\n   */\n  private processFlags (flags: number): void {\n    if ((flags & Flag.ACK) === Flag.ACK) {\n      if (this.state === StreamState.SYNSent) {\n        this.state = StreamState.Established\n      }\n    }\n    if ((flags & Flag.FIN) === Flag.FIN) {\n      this.remoteCloseWrite()\n    }\n    if ((flags & Flag.RST) === Flag.RST) {\n      this.reset()\n    }\n  }\n\n  /**\n   * getSendFlags determines any flags that are appropriate\n   * based on the current stream state.\n   *\n   * The state is updated as a side-effect.\n   */\n  private getSendFlags (): number {\n    switch (this.state) {\n      case StreamState.Init:\n        this.state = StreamState.SYNSent\n        return Flag.SYN\n      case StreamState.SYNReceived:\n        this.state = StreamState.Established\n        return Flag.ACK\n      default:\n        return 0\n    }\n  }\n\n  /**\n   * potentially sends a window update enabling further writes to take place.\n   */\n  sendWindowUpdate (): void {\n    // determine the flags if any\n    const flags = this.getSendFlags()\n\n    // If the stream has already been established\n    // and we've processed data within the time it takes for 4 round trips\n    // then we (up to) double the recvWindow\n    const now = Date.now()\n    const rtt = this.getRTT()\n    if (flags === 0 && rtt > -1 && now - this.epochStart < rtt * 4) {\n      // we've already validated that maxStreamWindowSize can't be more than MAX_UINT32\n      this.recvWindow = Math.min(this.recvWindow * 2, this.config.maxStreamWindowSize)\n    }\n\n    if (this.recvWindowCapacity >= this.recvWindow && flags === 0) {\n      // a window update isn't needed\n      return\n    }\n\n    // update the receive window\n    const delta = this.recvWindow - this.recvWindowCapacity\n    this.recvWindowCapacity = this.recvWindow\n\n    // update the epoch start\n    this.epochStart = now\n\n    // send window update\n    this.sendFrame({\n      type: FrameType.WindowUpdate,\n      flag: flags,\n      streamID: this._id,\n      length: delta\n    })\n  }\n}\n", "import { InvalidParametersError, MuxerClosedError, TooManyOutboundProtocolStreamsError, serviceCapabilities, setMaxListeners } from '@libp2p/interface'\nimport { getIterator } from 'get-iterator'\nimport { pushable } from 'it-pushable'\nimport { raceSignal } from 'race-signal'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { defaultConfig, verifyConfig } from './config.js'\nimport { PROTOCOL_ERRORS } from './constants.js'\nimport { Decoder } from './decode.js'\nimport { encodeHeader } from './encode.js'\nimport { InvalidFrameError, NotMatchingPingError, UnrequestedPingError } from './errors.js'\nimport { Flag, FrameType, GoAwayCode } from './frame.js'\nimport { StreamState, YamuxStream } from './stream.js'\nimport type { Config } from './config.js'\nimport type { FrameHeader } from './frame.js'\nimport type { YamuxMuxerComponents } from './index.js'\nimport type { AbortOptions, ComponentLogger, Logger, Stream, StreamMuxer, StreamMuxerFactory, StreamMuxerInit } from '@libp2p/interface'\nimport type { Pushable } from 'it-pushable'\nimport type { Sink, Source } from 'it-stream-types'\n\nconst YAMUX_PROTOCOL_ID = '/yamux/1.0.0'\nconst CLOSE_TIMEOUT = 500\n\nexport interface YamuxMuxerInit extends StreamMuxerInit, Partial<Config> {\n}\n\nexport class Yamux implements StreamMuxerFactory {\n  protocol = YAMUX_PROTOCOL_ID\n  private readonly _components: YamuxMuxerComponents\n  private readonly _init: YamuxMuxerInit\n\n  constructor (components: YamuxMuxerComponents, init: YamuxMuxerInit = {}) {\n    this._components = components\n    this._init = init\n  }\n\n  readonly [Symbol.toStringTag] = '@chainsafe/libp2p-yamux'\n\n  readonly [serviceCapabilities]: string[] = [\n    '@libp2p/stream-multiplexing'\n  ]\n\n  createStreamMuxer (init?: YamuxMuxerInit): YamuxMuxer {\n    return new YamuxMuxer(this._components, {\n      ...this._init,\n      ...init\n    })\n  }\n}\n\nexport interface CloseOptions extends AbortOptions {\n  reason?: GoAwayCode\n}\n\nexport class YamuxMuxer implements StreamMuxer {\n  protocol = YAMUX_PROTOCOL_ID\n  source: Pushable<Uint8ArrayList | Uint8Array>\n  sink: Sink<Source<Uint8ArrayList | Uint8Array>, Promise<void>>\n\n  private readonly config: Config\n  private readonly log?: Logger\n  private readonly logger: ComponentLogger\n\n  /** Used to close the muxer from either the sink or source */\n  private readonly closeController: AbortController\n\n  /** The next stream id to be used when initiating a new stream */\n  private nextStreamID: number\n  /** Primary stream mapping, streamID => stream */\n  private readonly _streams: Map<number, YamuxStream>\n\n  /** The next ping id to be used when pinging */\n  private nextPingID: number\n  /** Tracking info for the currently active ping */\n  private activePing?: { id: number, promise: Promise<void>, resolve(): void }\n  /** Round trip time */\n  private rtt: number\n\n  /** True if client, false if server */\n  private readonly client: boolean\n\n  private localGoAway?: GoAwayCode\n  private remoteGoAway?: GoAwayCode\n\n  /** Number of tracked inbound streams */\n  private numInboundStreams: number\n  /** Number of tracked outbound streams */\n  private numOutboundStreams: number\n\n  private readonly onIncomingStream?: (stream: Stream) => void\n  private readonly onStreamEnd?: (stream: Stream) => void\n\n  constructor (components: YamuxMuxerComponents, init: YamuxMuxerInit) {\n    this.client = init.direction === 'outbound'\n    this.config = { ...defaultConfig, ...init }\n    this.logger = components.logger\n    this.log = this.logger.forComponent('libp2p:yamux')\n    verifyConfig(this.config)\n\n    this.closeController = new AbortController()\n    setMaxListeners(Infinity, this.closeController.signal)\n\n    this.onIncomingStream = init.onIncomingStream\n    this.onStreamEnd = init.onStreamEnd\n\n    this._streams = new Map()\n\n    this.source = pushable({\n      onEnd: (): void => {\n        this.log?.trace('muxer source ended')\n\n        this._streams.forEach(stream => {\n          stream.destroy()\n        })\n      }\n    })\n\n    this.sink = async (source: Source<Uint8ArrayList | Uint8Array>): Promise<void> => {\n      const shutDownListener = (): void => {\n        const iterator = getIterator(source)\n\n        if (iterator.return != null) {\n          const res = iterator.return()\n\n          if (isPromise(res)) {\n            res.catch(err => {\n              this.log?.('could not cause sink source to return', err)\n            })\n          }\n        }\n      }\n\n      let reason, error\n      try {\n        const decoder = new Decoder(source)\n\n        try {\n          this.closeController.signal.addEventListener('abort', shutDownListener)\n\n          for await (const frame of decoder.emitFrames()) {\n            await this.handleFrame(frame.header, frame.readData)\n          }\n        } finally {\n          this.closeController.signal.removeEventListener('abort', shutDownListener)\n        }\n\n        reason = GoAwayCode.NormalTermination\n      } catch (err: any) {\n        // either a protocol or internal error\n        if (PROTOCOL_ERRORS.has(err.name)) {\n          this.log?.error('protocol error in sink', err)\n          reason = GoAwayCode.ProtocolError\n        } else {\n          this.log?.error('internal error in sink', err)\n          reason = GoAwayCode.InternalError\n        }\n\n        error = err as Error\n      }\n\n      this.log?.trace('muxer sink ended')\n\n      if (error != null) {\n        this.abort(error, reason)\n      } else {\n        await this.close({ reason })\n      }\n    }\n\n    this.numInboundStreams = 0\n    this.numOutboundStreams = 0\n\n    // client uses odd streamIDs, server uses even streamIDs\n    this.nextStreamID = this.client ? 1 : 2\n\n    this.nextPingID = 0\n    this.rtt = -1\n\n    this.log?.trace('muxer created')\n\n    if (this.config.enableKeepAlive) {\n      this.keepAliveLoop().catch(e => this.log?.error('keepalive error: %s', e))\n    }\n\n    // send an initial ping to establish RTT\n    this.ping().catch(e => this.log?.error('ping error: %s', e))\n  }\n\n  get streams (): YamuxStream[] {\n    return Array.from(this._streams.values())\n  }\n\n  newStream (name?: string | undefined): YamuxStream {\n    if (this.remoteGoAway !== undefined) {\n      throw new MuxerClosedError('Muxer closed remotely')\n    }\n    if (this.localGoAway !== undefined) {\n      throw new MuxerClosedError('Muxer closed locally')\n    }\n\n    const id = this.nextStreamID\n    this.nextStreamID += 2\n\n    // check against our configured maximum number of outbound streams\n    if (this.numOutboundStreams >= this.config.maxOutboundStreams) {\n      throw new TooManyOutboundProtocolStreamsError('max outbound streams exceeded')\n    }\n\n    this.log?.trace('new outgoing stream id=%s', id)\n\n    const stream = this._newStream(id, name, StreamState.Init, 'outbound')\n    this._streams.set(id, stream)\n\n    this.numOutboundStreams++\n\n    // send a window update to open the stream on the receiver end\n    stream.sendWindowUpdate()\n\n    return stream\n  }\n\n  /**\n   * Initiate a ping and wait for a response\n   *\n   * Note: only a single ping will be initiated at a time.\n   * If a ping is already in progress, a new ping will not be initiated.\n   *\n   * @returns the round-trip-time in milliseconds\n   */\n  async ping (): Promise<number> {\n    if (this.remoteGoAway !== undefined) {\n      throw new MuxerClosedError('Muxer closed remotely')\n    }\n    if (this.localGoAway !== undefined) {\n      throw new MuxerClosedError('Muxer closed locally')\n    }\n\n    // An active ping does not yet exist, handle the process here\n    if (this.activePing === undefined) {\n      // create active ping\n      let _resolve = (): void => {}\n      this.activePing = {\n        id: this.nextPingID++,\n        // this promise awaits resolution or the close controller aborting\n        promise: new Promise<void>((resolve, reject) => {\n          const closed = (): void => {\n            reject(new MuxerClosedError('Muxer closed locally'))\n          }\n          this.closeController.signal.addEventListener('abort', closed, { once: true })\n          _resolve = (): void => {\n            this.closeController.signal.removeEventListener('abort', closed)\n            resolve()\n          }\n        }),\n        resolve: _resolve\n      }\n      // send ping\n      const start = Date.now()\n      this.sendPing(this.activePing.id)\n      // await pong\n      try {\n        await this.activePing.promise\n      } finally {\n        // clean-up active ping\n        delete this.activePing\n      }\n      // update rtt\n      const end = Date.now()\n      this.rtt = end - start\n    } else {\n      // an active ping is already in progress, piggyback off that\n      await this.activePing.promise\n    }\n    return this.rtt\n  }\n\n  /**\n   * Get the ping round trip time\n   *\n   * Note: Will return 0 if no successful ping has yet been completed\n   *\n   * @returns the round-trip-time in milliseconds\n   */\n  getRTT (): number {\n    return this.rtt\n  }\n\n  /**\n   * Close the muxer\n   */\n  async close (options: CloseOptions = {}): Promise<void> {\n    if (this.closeController.signal.aborted) {\n      // already closed\n      return\n    }\n\n    const reason = options?.reason ?? GoAwayCode.NormalTermination\n\n    this.log?.trace('muxer close reason=%s', reason)\n\n    if (options.signal == null) {\n      const signal = AbortSignal.timeout(CLOSE_TIMEOUT)\n      setMaxListeners(Infinity, signal)\n\n      options = {\n        ...options,\n        signal\n      }\n    }\n\n    try {\n      await Promise.all(\n        [...this._streams.values()].map(async s => s.close(options))\n      )\n\n      // send reason to the other side, allow the other side to close gracefully\n      this.sendGoAway(reason)\n\n      this._closeMuxer()\n    } catch (err: any) {\n      this.abort(err)\n    }\n  }\n\n  abort (err: Error, reason?: GoAwayCode): void {\n    if (this.closeController.signal.aborted) {\n      // already closed\n      return\n    }\n\n    reason = reason ?? GoAwayCode.InternalError\n\n    // If reason was provided, use that, otherwise use the presence of `err` to determine the reason\n    this.log?.error('muxer abort reason=%s error=%s', reason, err)\n\n    // Abort all underlying streams\n    for (const stream of this._streams.values()) {\n      stream.abort(err)\n    }\n\n    // send reason to the other side, allow the other side to close gracefully\n    this.sendGoAway(reason)\n\n    this._closeMuxer()\n  }\n\n  isClosed (): boolean {\n    return this.closeController.signal.aborted\n  }\n\n  /**\n   * Called when either the local or remote shuts down the muxer\n   */\n  private _closeMuxer (): void {\n    // stop the sink and any other processes\n    this.closeController.abort()\n\n    // stop the source\n    this.source.end()\n  }\n\n  /** Create a new stream */\n  private _newStream (id: number, name: string | undefined, state: StreamState, direction: 'inbound' | 'outbound'): YamuxStream {\n    if (this._streams.get(id) != null) {\n      throw new InvalidParametersError('Stream already exists with that id')\n    }\n\n    const stream = new YamuxStream({\n      id: id.toString(),\n      name,\n      state,\n      direction,\n      sendFrame: this.sendFrame.bind(this),\n      onEnd: () => {\n        this.closeStream(id)\n        this.onStreamEnd?.(stream)\n      },\n      log: this.logger.forComponent(`libp2p:yamux:${direction}:${id}`),\n      config: this.config,\n      getRTT: this.getRTT.bind(this)\n    })\n\n    return stream\n  }\n\n  /**\n   * closeStream is used to close a stream once both sides have\n   * issued a close.\n   */\n  private closeStream (id: number): void {\n    if (this.client === (id % 2 === 0)) {\n      this.numInboundStreams--\n    } else {\n      this.numOutboundStreams--\n    }\n    this._streams.delete(id)\n  }\n\n  private async keepAliveLoop (): Promise<void> {\n    this.log?.trace('muxer keepalive enabled interval=%s', this.config.keepAliveInterval)\n    while (true) {\n      let timeoutId\n      try {\n        await raceSignal(\n          new Promise((resolve) => {\n            timeoutId = setTimeout(resolve, this.config.keepAliveInterval)\n          }),\n          this.closeController.signal\n        )\n        this.ping().catch(e => this.log?.error('ping error: %s', e))\n      } catch (e) {\n        // closed\n        clearInterval(timeoutId)\n        return\n      }\n    }\n  }\n\n  private async handleFrame (header: FrameHeader, readData?: () => Promise<Uint8ArrayList>): Promise<void> {\n    const {\n      streamID,\n      type,\n      length\n    } = header\n    this.log?.trace('received frame %o', header)\n\n    if (streamID === 0) {\n      switch (type) {\n        case FrameType.Ping:\n        { this.handlePing(header); return }\n        case FrameType.GoAway:\n        { this.handleGoAway(length); return }\n        default:\n          // Invalid state\n          throw new InvalidFrameError('Invalid frame type')\n      }\n    } else {\n      switch (header.type) {\n        case FrameType.Data:\n        case FrameType.WindowUpdate:\n        { await this.handleStreamMessage(header, readData); return }\n        default:\n          // Invalid state\n          throw new InvalidFrameError('Invalid frame type')\n      }\n    }\n  }\n\n  private handlePing (header: FrameHeader): void {\n    // If the ping  is initiated by the sender, send a response\n    if (header.flag === Flag.SYN) {\n      this.log?.trace('received ping request pingId=%s', header.length)\n      this.sendPing(header.length, Flag.ACK)\n    } else if (header.flag === Flag.ACK) {\n      this.log?.trace('received ping response pingId=%s', header.length)\n      this.handlePingResponse(header.length)\n    } else {\n      // Invalid state\n      throw new InvalidFrameError('Invalid frame flag')\n    }\n  }\n\n  private handlePingResponse (pingId: number): void {\n    if (this.activePing === undefined) {\n      // this ping was not requested\n      throw new UnrequestedPingError('ping not requested')\n    }\n    if (this.activePing.id !== pingId) {\n      // this ping doesn't match our active ping request\n      throw new NotMatchingPingError('ping doesn\\'t match our id')\n    }\n\n    // valid ping response\n    this.activePing.resolve()\n  }\n\n  private handleGoAway (reason: GoAwayCode): void {\n    this.log?.trace('received GoAway reason=%s', GoAwayCode[reason] ?? 'unknown')\n    this.remoteGoAway = reason\n\n    // If the other side is friendly, they would have already closed all streams before sending a GoAway\n    // In case they weren't, reset all streams\n    for (const stream of this._streams.values()) {\n      stream.reset()\n    }\n\n    this._closeMuxer()\n  }\n\n  private async handleStreamMessage (header: FrameHeader, readData?: () => Promise<Uint8ArrayList>): Promise<void> {\n    const { streamID, flag, type } = header\n\n    if ((flag & Flag.SYN) === Flag.SYN) {\n      this.incomingStream(streamID)\n    }\n\n    const stream = this._streams.get(streamID)\n    if (stream === undefined) {\n      if (type === FrameType.Data) {\n        this.log?.('discarding data for stream id=%s', streamID)\n        if (readData === undefined) {\n          throw new Error('unreachable')\n        }\n        await readData()\n      } else {\n        this.log?.trace('frame for missing stream id=%s', streamID)\n      }\n      return\n    }\n\n    switch (type) {\n      case FrameType.WindowUpdate: {\n        stream.handleWindowUpdate(header); return\n      }\n      case FrameType.Data: {\n        if (readData === undefined) {\n          throw new Error('unreachable')\n        }\n\n        await stream.handleData(header, readData); return\n      }\n      default:\n        throw new Error('unreachable')\n    }\n  }\n\n  private incomingStream (id: number): void {\n    if (this.client !== (id % 2 === 0)) {\n      throw new InvalidParametersError('Both endpoints are clients')\n    }\n    if (this._streams.has(id)) {\n      return\n    }\n\n    this.log?.trace('new incoming stream id=%s', id)\n\n    if (this.localGoAway !== undefined) {\n      // reject (reset) immediately if we are doing a go away\n      this.sendFrame({\n        type: FrameType.WindowUpdate,\n        flag: Flag.RST,\n        streamID: id,\n        length: 0\n      }); return\n    }\n\n    // check against our configured maximum number of inbound streams\n    if (this.numInboundStreams >= this.config.maxInboundStreams) {\n      this.log?.('maxIncomingStreams exceeded, forcing stream reset')\n      this.sendFrame({\n        type: FrameType.WindowUpdate,\n        flag: Flag.RST,\n        streamID: id,\n        length: 0\n      }); return\n    }\n\n    // allocate a new stream\n    const stream = this._newStream(id, undefined, StreamState.SYNReceived, 'inbound')\n\n    this.numInboundStreams++\n    // the stream should now be tracked\n    this._streams.set(id, stream)\n\n    this.onIncomingStream?.(stream)\n  }\n\n  private sendFrame (header: FrameHeader, data?: Uint8ArrayList): void {\n    this.log?.trace('sending frame %o', header)\n    if (header.type === FrameType.Data) {\n      if (data === undefined) {\n        throw new InvalidFrameError('Invalid frame')\n      }\n      this.source.push(\n        new Uint8ArrayList(encodeHeader(header), data)\n      )\n    } else {\n      this.source.push(encodeHeader(header))\n    }\n  }\n\n  private sendPing (pingId: number, flag: Flag = Flag.SYN): void {\n    if (flag === Flag.SYN) {\n      this.log?.trace('sending ping request pingId=%s', pingId)\n    } else {\n      this.log?.trace('sending ping response pingId=%s', pingId)\n    }\n    this.sendFrame({\n      type: FrameType.Ping,\n      flag,\n      streamID: 0,\n      length: pingId\n    })\n  }\n\n  private sendGoAway (reason: GoAwayCode = GoAwayCode.NormalTermination): void {\n    this.log?.('sending GoAway reason=%s', GoAwayCode[reason])\n    this.localGoAway = reason\n    this.sendFrame({\n      type: FrameType.GoAway,\n      flag: 0,\n      streamID: 0,\n      length: reason\n    })\n  }\n}\n\nfunction isPromise <T = unknown> (thing: any): thing is Promise<T> {\n  return thing != null && typeof thing.then === 'function'\n}\n", "/**\n * @packageDocumentation\n *\n * This module is a JavaScript implementation of [Yamux from Hashicorp](https://github.com/hashicorp/yamux/blob/master/spec.md) designed to be used with [js-libp2p](https://github.com/libp2p/js-libp2p).\n *\n * @example Configure libp2p with Yamux\n *\n * ```typescript\n * import { createLibp2p } from 'libp2p'\n * import { yamux } from '@chainsafe/libp2p-yamux'\n *\n * const node = await createLibp2p({\n *   // ... other options\n *   streamMuxers: [\n *     yamux()\n *   ]\n * })\n * ```\n *\n * @example Using the low-level API\n *\n * ```js\n * import { yamux } from '@chainsafe/libp2p-yamux'\n * import { pipe } from 'it-pipe'\n * import { duplexPair } from 'it-pair/duplex'\n * import all from 'it-all'\n *\n * // Connect two yamux muxers to demo basic stream multiplexing functionality\n *\n * const clientMuxer = yamux({\n *   client: true,\n *   onIncomingStream: stream => {\n *     // echo data on incoming streams\n *     pipe(stream, stream)\n *   },\n *   onStreamEnd: stream => {\n *     // do nothing\n *   }\n * })()\n *\n * const serverMuxer = yamux({\n *   client: false,\n *   onIncomingStream: stream => {\n *     // echo data on incoming streams\n *     pipe(stream, stream)\n *   },\n *   onStreamEnd: stream => {\n *     // do nothing\n *   }\n * })()\n *\n * // `p` is our \"connections\", what we use to connect the two sides\n * // In a real application, a connection is usually to a remote computer\n * const p = duplexPair()\n *\n * // connect the muxers together\n * pipe(p[0], clientMuxer, p[0])\n * pipe(p[1], serverMuxer, p[1])\n *\n * // now either side can open streams\n * const stream0 = clientMuxer.newStream()\n * const stream1 = serverMuxer.newStream()\n *\n * // Send some data to the other side\n * const encoder = new TextEncoder()\n * const data = [encoder.encode('hello'), encoder.encode('world')]\n * pipe(data, stream0)\n *\n * // Receive data back\n * const result = await pipe(stream0, all)\n *\n * // close a stream\n * stream1.close()\n *\n * // close the muxer\n * clientMuxer.close()\n * ```\n */\n\nimport { Yamux } from './muxer.js'\nimport type { YamuxMuxerInit } from './muxer.js'\nimport type { ComponentLogger, StreamMuxerFactory } from '@libp2p/interface'\n\nexport { GoAwayCode, type FrameHeader, type FrameType } from './frame.js'\nexport type { YamuxMuxerInit }\n\nexport interface YamuxMuxerComponents {\n  logger: ComponentLogger\n}\n\nexport function yamux (init: YamuxMuxerInit = {}): (components: YamuxMuxerComponents) => StreamMuxerFactory {\n  return (components) => new Yamux(components, init)\n}\n", "import { cidrContains } from '@chainsafe/netmask'\nimport { CODE_IP6 } from '@multiformats/multiaddr'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * Check if a given multiaddr is an IPv6 global unicast address\n */\nexport function isGlobalUnicast (ma: Multiaddr): boolean {\n  try {\n    for (const { code, value } of ma.getComponents()) {\n      if (value == null) {\n        continue\n      }\n\n      if (code === CODE_IP6) {\n        return cidrContains('2000::/3', value)\n      }\n    }\n  } catch {\n\n  }\n\n  return false\n}\n", "import { anySignal } from 'any-signal'\nimport { setMaxListeners } from 'main-event'\nimport { debounce } from './debounce.ts'\nimport type { AbortOptions } from '@libp2p/interface'\n\nexport interface RepeatingTask {\n  /**\n   * Update the interval after which the next iteration of the task will run.\n   *\n   * This is useful if, for example, you want to retry a task with a short rest\n   * duration until it succeeds, then periodically after that.\n   *\n   * This only affects the next iteration of the task, if it is currently\n   * running, that run will not be interrupted.\n   *\n   * Setting the interval to the current value has no effect.\n   */\n  setInterval(ms: number): void\n\n  /**\n   * Update the amount of time a task will run before the passed abort signal\n   * will fire.\n   *\n   * This only affects the next iteration of the task, if it is currently\n   * running, that run will not be interrupted.\n   */\n  setTimeout(ms: number): void\n\n  /**\n   * Schedule the task to be run immediately - if the task is not running it\n   * will run after a short delay in order to debounce multiple `.run()`\n   * invocations.\n   */\n  run(): void\n\n  /**\n   * Start the task running\n   */\n  start(): void\n\n  /**\n   * Stop the task running\n   */\n  stop(): void\n}\n\nexport interface RepeatingTaskOptions {\n  /**\n   * How long the task is allowed to run before the passed AbortSignal fires an\n   * abort event\n   */\n  timeout?: number\n\n  /**\n   * Whether to schedule the task to run immediately\n   *\n   * @default false\n   */\n  runImmediately?: boolean\n\n  /**\n   * When `.run()` is called to run the task outside of the current interval,\n   * debounce repeated calls to `.run()` by this amount.\n   *\n   * @default 100\n   */\n  debounce?: number\n}\n\nexport function repeatingTask (fn: (options?: AbortOptions) => void | Promise<void>, interval: number, options?: RepeatingTaskOptions): RepeatingTask {\n  let timeout: ReturnType<typeof setTimeout>\n  let shutdownController: AbortController\n  let running = false\n\n  function runTask (): void {\n    const opts: AbortOptions = {\n      signal: shutdownController.signal\n    }\n\n    if (options?.timeout != null) {\n      const signal = anySignal([shutdownController.signal, AbortSignal.timeout(options.timeout)])\n      setMaxListeners(Infinity, signal)\n\n      opts.signal = signal\n    }\n\n    running = true\n\n    Promise.resolve().then(async () => {\n      await fn(opts)\n    })\n      .catch(() => {})\n      .finally(() => {\n        running = false\n\n        if (shutdownController.signal.aborted) {\n          // task has been cancelled, bail\n          return\n        }\n\n        // reschedule\n        timeout = setTimeout(runTask, interval)\n      })\n  }\n\n  const runTaskDebounced = debounce(runTask, options?.debounce ?? 100)\n\n  let started = false\n\n  return {\n    setInterval: (ms): void => {\n      if (interval === ms) {\n        // already running at this interval, nothing to do\n        return\n      }\n\n      interval = ms\n\n      // maybe reschedule\n      if (timeout != null) {\n        clearTimeout(timeout)\n        timeout = setTimeout(runTask, interval)\n      }\n    },\n    setTimeout: (ms): void => {\n      options ??= {}\n      options.timeout = ms\n    },\n    run: (): void => {\n      if (running) {\n        return\n      }\n\n      clearTimeout(timeout)\n      runTaskDebounced()\n    },\n    start: (): void => {\n      if (started) {\n        return\n      }\n\n      started = true\n      shutdownController = new AbortController()\n      setMaxListeners(Infinity, shutdownController.signal)\n\n      // run now\n      if (options?.runImmediately === true) {\n        queueMicrotask(() => {\n          runTask()\n        })\n      } else {\n        // run later\n        timeout = setTimeout(runTask, interval)\n      }\n    },\n    stop: (): void => {\n      clearTimeout(timeout)\n      shutdownController?.abort()\n      started = false\n    }\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * This module makes it easy to send and receive length-prefixed Protobuf encoded\n * messages over streams.\n *\n * @example\n *\n * ```typescript\n * import { pbStream } from 'it-protobuf-stream'\n * import { MessageType } from './src/my-message-type.js'\n *\n * // RequestType and ResponseType have been generate from `.proto` files and have\n * // `.encode` and `.decode` methods for serialization/deserialization\n *\n * const stream = pbStream(duplex)\n *\n * // write a message to the stream\n * stream.write({\n *   foo: 'bar'\n * }, MessageType)\n *\n * // read a message from the stream\n * const res = await stream.read(MessageType)\n * ```\n */\n\nimport { lpStream } from 'it-length-prefixed-stream'\nimport type { AbortOptions } from 'abort-error'\nimport type { LengthPrefixedStreamOpts } from 'it-length-prefixed-stream'\nimport type { Duplex } from 'it-stream-types'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\n/**\n * A protobuf decoder - takes a byte array and returns an object\n */\nexport interface Decoder<T> {\n  (data: Uint8Array | Uint8ArrayList): T\n}\n\n/**\n * A protobuf encoder - takes an object and returns a byte array\n */\nexport interface Encoder<T> {\n  (data: T): Uint8Array\n}\n\n/**\n * Convenience methods for working with protobuf streams\n */\nexport interface ProtobufStream <Stream = unknown> {\n  /**\n   * Read the next length-prefixed byte array from the stream and decode it as the passed protobuf format\n   */\n  read<T>(proto: { decode: Decoder<T> }, options?: AbortOptions): Promise<T>\n\n  /**\n   * Encode the passed object as a protobuf message and write it's length-prefixed bytes to the stream\n   */\n  write<T>(data: T, proto: { encode: Encoder<T> }, options?: AbortOptions): Promise<void>\n\n  /**\n   * Encode the passed objects as protobuf messages and write their length-prefixed bytes to the stream as a single write\n   */\n  writeV<T>(input: T[], proto: { encode: Encoder<T> }, options?: AbortOptions): Promise<void>\n\n  /**\n   * Returns an object with read/write methods for operating on one specific type of protobuf message\n   */\n  pb<T>(proto: { encode: Encoder<T>, decode: Decoder<T> }): MessageStream<T, Stream>\n\n  /**\n   * Returns the underlying stream\n   */\n  unwrap(): Stream\n}\n\n/**\n * A message reader/writer that only uses one type of message\n */\nexport interface MessageStream <T, S = unknown> {\n  /**\n   * Read a message from the stream\n   */\n  read(options?: AbortOptions): Promise<T>\n\n  /**\n   * Write a message to the stream\n   */\n  write(d: T, options?: AbortOptions): Promise<void>\n\n  /**\n   * Write several messages to the stream\n   */\n  writeV(d: T[], options?: AbortOptions): Promise<void>\n\n  /**\n   * Unwrap the underlying protobuf stream\n   */\n  unwrap(): ProtobufStream<S>\n}\n\nexport interface ProtobufStreamOpts extends LengthPrefixedStreamOpts {\n\n}\n\nexport function pbStream <Stream extends Duplex<any, any, any>> (duplex: Stream, opts?: Partial<ProtobufStreamOpts>): ProtobufStream<Stream> {\n  const lp = lpStream(duplex, opts)\n\n  const W: ProtobufStream<Stream> = {\n    read: async (proto, options?: AbortOptions) => {\n      // readLP, decode\n      const value = await lp.read(options)\n\n      return proto.decode(value)\n    },\n    write: async (message, proto, options?: AbortOptions) => {\n      // encode, writeLP\n      await lp.write(proto.encode(message), options)\n    },\n    writeV: async (messages, proto, options?: AbortOptions) => {\n      // encode, writeLP\n      await lp.writeV(messages.map(message => proto.encode(message)), options)\n    },\n    pb: (proto) => {\n      return {\n        read: async (options) => W.read(proto, options),\n        write: async (d, options) => W.write(d, proto, options),\n        writeV: async (d, options) => W.writeV(d, proto, options),\n        unwrap: () => W\n      }\n    },\n    unwrap: () => {\n      return lp.unwrap()\n    }\n  }\n\n  return W\n}\n", "export const empty = new Uint8Array(0)\n\nexport function toHex (d: Uint8Array): string {\n  return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n}\n\nexport function fromHex (hex: string): Uint8Array {\n  const hexes = hex.match(/../g)\n  return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\nexport function equals (aa: Uint8Array, bb: Uint8Array): boolean {\n  if (aa === bb) { return true }\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function coerce (o: ArrayBufferView | ArrayBuffer | Uint8Array): Uint8Array {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') { return o }\n  if (o instanceof ArrayBuffer) { return new Uint8Array(o) }\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\nexport function isBinary (o: unknown): o is ArrayBuffer | ArrayBufferView {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n}\n\nexport function fromString (str: string): Uint8Array {\n  return new TextEncoder().encode(str)\n}\n\nexport function toString (b: Uint8Array): string {\n  return new TextDecoder().decode(b)\n}\n", "/* eslint-disable */\nvar encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  // @ts-ignore\n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      // @ts-ignore\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  // @ts-ignore\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (/** @type {number} */ value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n", "import varint from './vendor/varint.js'\n\nexport function decode (data: Uint8Array, offset = 0): [number, number] {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\nexport function encodeTo (int: number, target: Uint8Array, offset = 0): Uint8Array {\n  varint.encode(int, target, offset)\n  return target\n}\n\nexport function encodingLength (int: number): number {\n  return varint.encodingLength(int)\n}\n", "import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\nimport type { MultihashDigest } from './interface.js'\n\n/**\n * Creates a multihash digest.\n */\nexport function create <Code extends number> (code: Code, digest: Uint8Array): Digest<Code, number> {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode (multihash: Uint8Array): MultihashDigest {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\nexport function equals (a: MultihashDigest, b: unknown): b is MultihashDigest {\n  if (a === b) {\n    return true\n  } else {\n    const data = b as { code?: unknown, size?: unknown, bytes?: unknown }\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest<Code extends number, Size extends number> implements MultihashDigest {\n  readonly code: Code\n  readonly size: Size\n  readonly digest: Uint8Array\n  readonly bytes: Uint8Array\n\n  /**\n   * Creates a multihash digest.\n   */\n  constructor (code: Code, size: Size, digest: Uint8Array, bytes: Uint8Array) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n\n/**\n * Used to check that the passed multihash has the passed code\n */\nexport function hasCode <T extends number> (digest: MultihashDigest, code: T): digest is MultihashDigest<T> {\n  return digest.code === code\n}\n", "/**\n * The prefix to use in the protocol\n */\nexport const PROTOCOL_PREFIX = 'libp2p'\n\n/**\n * The name to use in the protocol\n */\nexport const PROTOCOL_NAME = 'autonat'\n\n/**\n * The version to use in the protocol\n */\nexport const PROTOCOL_VERSION = '1.0.0'\nexport const TIMEOUT = 30000\nexport const MAX_INBOUND_STREAMS = 2\nexport const MAX_OUTBOUND_STREAMS = 20\nexport const DEFAULT_CONNECTION_THRESHOLD = 80\nexport const MAX_MESSAGE_SIZE = 8192\n", "import { decodeMessage, encodeMessage, enumeration, MaxLengthError, message } from 'protons-runtime'\nimport type { Codec, DecodeOptions } from 'protons-runtime'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface Message {\n  type?: Message.MessageType\n  dial?: Message.Dial\n  dialResponse?: Message.DialResponse\n}\n\nexport namespace Message {\n  export enum MessageType {\n    DIAL = 'DIAL',\n    DIAL_RESPONSE = 'DIAL_RESPONSE'\n  }\n\n  enum __MessageTypeValues {\n    DIAL = 0,\n    DIAL_RESPONSE = 1\n  }\n\n  export namespace MessageType {\n    export const codec = (): Codec<MessageType> => {\n      return enumeration<MessageType>(__MessageTypeValues)\n    }\n  }\n\n  export enum ResponseStatus {\n    OK = 'OK',\n    E_DIAL_ERROR = 'E_DIAL_ERROR',\n    E_DIAL_REFUSED = 'E_DIAL_REFUSED',\n    E_BAD_REQUEST = 'E_BAD_REQUEST',\n    E_INTERNAL_ERROR = 'E_INTERNAL_ERROR'\n  }\n\n  enum __ResponseStatusValues {\n    OK = 0,\n    E_DIAL_ERROR = 100,\n    E_DIAL_REFUSED = 101,\n    E_BAD_REQUEST = 200,\n    E_INTERNAL_ERROR = 300\n  }\n\n  export namespace ResponseStatus {\n    export const codec = (): Codec<ResponseStatus> => {\n      return enumeration<ResponseStatus>(__ResponseStatusValues)\n    }\n  }\n\n  export interface PeerInfo {\n    id?: Uint8Array\n    addrs: Uint8Array[]\n  }\n\n  export namespace PeerInfo {\n    let _codec: Codec<PeerInfo>\n\n    export const codec = (): Codec<PeerInfo> => {\n      if (_codec == null) {\n        _codec = message<PeerInfo>((obj, w, opts = {}) => {\n          if (opts.lengthDelimited !== false) {\n            w.fork()\n          }\n\n          if (obj.id != null) {\n            w.uint32(10)\n            w.bytes(obj.id)\n          }\n\n          if (obj.addrs != null) {\n            for (const value of obj.addrs) {\n              w.uint32(18)\n              w.bytes(value)\n            }\n          }\n\n          if (opts.lengthDelimited !== false) {\n            w.ldelim()\n          }\n        }, (reader, length, opts = {}) => {\n          const obj: any = {\n            addrs: []\n          }\n\n          const end = length == null ? reader.len : reader.pos + length\n\n          while (reader.pos < end) {\n            const tag = reader.uint32()\n\n            switch (tag >>> 3) {\n              case 1: {\n                obj.id = reader.bytes()\n                break\n              }\n              case 2: {\n                if (opts.limits?.addrs != null && obj.addrs.length === opts.limits.addrs) {\n                  throw new MaxLengthError('Decode error - map field \"addrs\" had too many elements')\n                }\n\n                obj.addrs.push(reader.bytes())\n                break\n              }\n              default: {\n                reader.skipType(tag & 7)\n                break\n              }\n            }\n          }\n\n          return obj\n        })\n      }\n\n      return _codec\n    }\n\n    export const encode = (obj: Partial<PeerInfo>): Uint8Array => {\n      return encodeMessage(obj, PeerInfo.codec())\n    }\n\n    export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<PeerInfo>): PeerInfo => {\n      return decodeMessage(buf, PeerInfo.codec(), opts)\n    }\n  }\n\n  export interface Dial {\n    peer?: Message.PeerInfo\n  }\n\n  export namespace Dial {\n    let _codec: Codec<Dial>\n\n    export const codec = (): Codec<Dial> => {\n      if (_codec == null) {\n        _codec = message<Dial>((obj, w, opts = {}) => {\n          if (opts.lengthDelimited !== false) {\n            w.fork()\n          }\n\n          if (obj.peer != null) {\n            w.uint32(10)\n            Message.PeerInfo.codec().encode(obj.peer, w)\n          }\n\n          if (opts.lengthDelimited !== false) {\n            w.ldelim()\n          }\n        }, (reader, length, opts = {}) => {\n          const obj: any = {}\n\n          const end = length == null ? reader.len : reader.pos + length\n\n          while (reader.pos < end) {\n            const tag = reader.uint32()\n\n            switch (tag >>> 3) {\n              case 1: {\n                obj.peer = Message.PeerInfo.codec().decode(reader, reader.uint32(), {\n                  limits: opts.limits?.peer\n                })\n                break\n              }\n              default: {\n                reader.skipType(tag & 7)\n                break\n              }\n            }\n          }\n\n          return obj\n        })\n      }\n\n      return _codec\n    }\n\n    export const encode = (obj: Partial<Dial>): Uint8Array => {\n      return encodeMessage(obj, Dial.codec())\n    }\n\n    export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Dial>): Dial => {\n      return decodeMessage(buf, Dial.codec(), opts)\n    }\n  }\n\n  export interface DialResponse {\n    status?: Message.ResponseStatus\n    statusText?: string\n    addr?: Uint8Array\n  }\n\n  export namespace DialResponse {\n    let _codec: Codec<DialResponse>\n\n    export const codec = (): Codec<DialResponse> => {\n      if (_codec == null) {\n        _codec = message<DialResponse>((obj, w, opts = {}) => {\n          if (opts.lengthDelimited !== false) {\n            w.fork()\n          }\n\n          if (obj.status != null) {\n            w.uint32(8)\n            Message.ResponseStatus.codec().encode(obj.status, w)\n          }\n\n          if (obj.statusText != null) {\n            w.uint32(18)\n            w.string(obj.statusText)\n          }\n\n          if (obj.addr != null) {\n            w.uint32(26)\n            w.bytes(obj.addr)\n          }\n\n          if (opts.lengthDelimited !== false) {\n            w.ldelim()\n          }\n        }, (reader, length, opts = {}) => {\n          const obj: any = {}\n\n          const end = length == null ? reader.len : reader.pos + length\n\n          while (reader.pos < end) {\n            const tag = reader.uint32()\n\n            switch (tag >>> 3) {\n              case 1: {\n                obj.status = Message.ResponseStatus.codec().decode(reader)\n                break\n              }\n              case 2: {\n                obj.statusText = reader.string()\n                break\n              }\n              case 3: {\n                obj.addr = reader.bytes()\n                break\n              }\n              default: {\n                reader.skipType(tag & 7)\n                break\n              }\n            }\n          }\n\n          return obj\n        })\n      }\n\n      return _codec\n    }\n\n    export const encode = (obj: Partial<DialResponse>): Uint8Array => {\n      return encodeMessage(obj, DialResponse.codec())\n    }\n\n    export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<DialResponse>): DialResponse => {\n      return decodeMessage(buf, DialResponse.codec(), opts)\n    }\n  }\n\n  let _codec: Codec<Message>\n\n  export const codec = (): Codec<Message> => {\n    if (_codec == null) {\n      _codec = message<Message>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.type != null) {\n          w.uint32(8)\n          Message.MessageType.codec().encode(obj.type, w)\n        }\n\n        if (obj.dial != null) {\n          w.uint32(18)\n          Message.Dial.codec().encode(obj.dial, w)\n        }\n\n        if (obj.dialResponse != null) {\n          w.uint32(26)\n          Message.DialResponse.codec().encode(obj.dialResponse, w)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {}\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.type = Message.MessageType.codec().decode(reader)\n              break\n            }\n            case 2: {\n              obj.dial = Message.Dial.codec().decode(reader, reader.uint32(), {\n                limits: opts.limits?.dial\n              })\n              break\n            }\n            case 3: {\n              obj.dialResponse = Message.DialResponse.codec().decode(reader, reader.uint32(), {\n                limits: opts.limits?.dialResponse\n              })\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Message>): Uint8Array => {\n    return encodeMessage(obj, Message.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Message>): Message => {\n    return decodeMessage(buf, Message.codec(), opts)\n  }\n}\n", "import { serviceCapabilities, serviceDependencies } from '@libp2p/interface'\nimport { peerSet } from '@libp2p/peer-collections'\nimport { peerIdFromMultihash } from '@libp2p/peer-id'\nimport { createScalableCuckooFilter } from '@libp2p/utils/filters'\nimport { isGlobalUnicast } from '@libp2p/utils/multiaddr/is-global-unicast'\nimport { isPrivate } from '@libp2p/utils/multiaddr/is-private'\nimport { PeerQueue } from '@libp2p/utils/peer-queue'\nimport { repeatingTask } from '@libp2p/utils/repeating-task'\nimport { trackedMap } from '@libp2p/utils/tracked-map'\nimport { multiaddr, protocols } from '@multiformats/multiaddr'\nimport { anySignal } from 'any-signal'\nimport { pbStream } from 'it-protobuf-stream'\nimport { setMaxListeners } from 'main-event'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { DEFAULT_CONNECTION_THRESHOLD, MAX_INBOUND_STREAMS, MAX_MESSAGE_SIZE, MAX_OUTBOUND_STREAMS, PROTOCOL_NAME, PROTOCOL_PREFIX, PROTOCOL_VERSION, TIMEOUT } from './constants.js'\nimport { Message } from './pb/index.js'\nimport type { AutoNATComponents, AutoNATServiceInit } from './index.js'\nimport type { Logger, Connection, PeerId, Startable, AbortOptions, IncomingStreamData } from '@libp2p/interface'\nimport type { AddressType } from '@libp2p/interface-internal'\nimport type { PeerSet } from '@libp2p/peer-collections'\nimport type { Filter } from '@libp2p/utils/filters'\nimport type { RepeatingTask } from '@libp2p/utils/repeating-task'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\n// if more than 3 peers manage to dial us on what we believe to be our external\n// IP then we are convinced that it is, in fact, our external IP\n// https://github.com/libp2p/specs/blob/master/autonat/autonat-v1.md#autonat-protocol\nconst REQUIRED_SUCCESSFUL_DIALS = 4\nconst REQUIRED_FAILED_DIALS = 8\n\ninterface TestAddressOptions extends AbortOptions {\n  multiaddr: Multiaddr\n  peerId: PeerId\n}\n\ninterface DialResults {\n  /**\n   * The address being tested\n   */\n  multiaddr: Multiaddr\n\n  /**\n   * The number of successful dials from peers\n   */\n  success: number\n\n  /**\n   * The number of dial failures from peers\n   */\n  failure: number\n\n  /**\n   * For the multiaddr corresponding the the string key of the `dialResults`\n   * map, these are the IP segments that a successful dial result has been\n   * received from\n   */\n  networkSegments: string[]\n\n  /**\n   * Ensure that the same peer id can't verify multiple times\n   */\n  verifyingPeers: PeerSet\n\n  /**\n   * The number of peers currently verifying this address\n   */\n  queue: PeerQueue<void, TestAddressOptions>\n\n  /**\n   * Updated when this address is verified or failed\n   */\n  result?: boolean\n\n  /**\n   * The type of address\n   */\n  type: AddressType\n\n  /**\n   * The last time the address was verified\n   */\n  lastVerified?: number\n}\n\nexport class AutoNATService implements Startable {\n  private readonly components: AutoNATComponents\n  private readonly protocol: string\n  private readonly timeout: number\n  private readonly maxInboundStreams: number\n  private readonly maxOutboundStreams: number\n  private readonly maxMessageSize: number\n  private started: boolean\n  private readonly log: Logger\n  private topologyId?: string\n  private readonly dialResults: Map<string, DialResults>\n  private readonly findPeers: RepeatingTask\n  private readonly addressFilter: Filter\n  private readonly connectionThreshold: number\n\n  constructor (components: AutoNATComponents, init: AutoNATServiceInit) {\n    this.components = components\n    this.log = components.logger.forComponent('libp2p:auto-nat')\n    this.started = false\n    this.protocol = `/${init.protocolPrefix ?? PROTOCOL_PREFIX}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`\n    this.timeout = init.timeout ?? TIMEOUT\n    this.maxInboundStreams = init.maxInboundStreams ?? MAX_INBOUND_STREAMS\n    this.maxOutboundStreams = init.maxOutboundStreams ?? MAX_OUTBOUND_STREAMS\n    this.connectionThreshold = init.connectionThreshold ?? DEFAULT_CONNECTION_THRESHOLD\n    this.maxMessageSize = init.maxMessageSize ?? MAX_MESSAGE_SIZE\n    this.dialResults = trackedMap({\n      name: 'libp2p_autonat_dial_results',\n      metrics: components.metrics\n    })\n    this.findPeers = repeatingTask(this.findRandomPeers.bind(this), 60_000)\n    this.addressFilter = createScalableCuckooFilter(1024)\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/autonat'\n\n  readonly [serviceCapabilities]: string[] = [\n    '@libp2p/autonat'\n  ]\n\n  get [serviceDependencies] (): string[] {\n    return [\n      '@libp2p/identify'\n    ]\n  }\n\n  isStarted (): boolean {\n    return this.started\n  }\n\n  async start (): Promise<void> {\n    if (this.started) {\n      return\n    }\n\n    await this.components.registrar.handle(this.protocol, (data) => {\n      void this.handleIncomingAutonatStream(data)\n        .catch(err => {\n          this.log.error('error handling incoming autonat stream - %e', err)\n        })\n    }, {\n      maxInboundStreams: this.maxInboundStreams,\n      maxOutboundStreams: this.maxOutboundStreams\n    })\n\n    this.topologyId = await this.components.registrar.register(this.protocol, {\n      onConnect: (peerId, connection) => {\n        this.verifyExternalAddresses(connection)\n          .catch(err => {\n            this.log.error('could not verify addresses - %e', err)\n          })\n      }\n    })\n\n    this.findPeers.start()\n    this.started = true\n  }\n\n  async stop (): Promise<void> {\n    await this.components.registrar.unhandle(this.protocol)\n\n    if (this.topologyId != null) {\n      await this.components.registrar.unhandle(this.topologyId)\n    }\n\n    this.dialResults.clear()\n    this.findPeers.stop()\n    this.started = false\n  }\n\n  private allAddressesAreVerified (): boolean {\n    return this.components.addressManager.getAddressesWithMetadata().every(addr => {\n      if (addr.expires > Date.now()) {\n        // ignore any unverified addresses within their TTL\n        return true\n      }\n\n      return addr.verified\n    })\n  }\n\n  async findRandomPeers (options?: AbortOptions): Promise<void> {\n    // skip if all addresses are verified\n    if (this.allAddressesAreVerified()) {\n      return\n    }\n\n    const signal = anySignal([\n      AbortSignal.timeout(10_000),\n      options?.signal\n    ])\n\n    // spend a few seconds finding random peers - dial them which will run\n    // identify to trigger the topology callbacks and run AutoNAT\n    try {\n      this.log('starting random walk to find peers to run AutoNAT')\n\n      for await (const peer of this.components.randomWalk.walk({ signal })) {\n        if (!(await this.components.connectionManager.isDialable(peer.multiaddrs))) {\n          this.log.trace('random peer %p was not dialable %s', peer.id, peer.multiaddrs.map(ma => ma.toString()).join(', '))\n\n          // skip peers we can't dial\n          continue\n        }\n\n        try {\n          this.log.trace('dial random peer %p', peer.id)\n          await this.components.connectionManager.openConnection(peer.multiaddrs, {\n            signal\n          })\n        } catch {}\n\n        if (this.allAddressesAreVerified()) {\n          this.log('stopping random walk, all addresses are verified')\n          return\n        }\n\n        if (!this.hasConnectionCapacity()) {\n          this.log('stopping random walk, too close to max connections')\n          return\n        }\n      }\n    } catch {}\n  }\n\n  /**\n   * Handle an incoming AutoNAT request\n   */\n  async handleIncomingAutonatStream (data: IncomingStreamData): Promise<void> {\n    const signal = AbortSignal.timeout(this.timeout)\n    setMaxListeners(Infinity, signal)\n\n    const messages = pbStream(data.stream, {\n      maxDataLength: this.maxMessageSize\n    }).pb(Message)\n\n    try {\n      const request = await messages.read({\n        signal\n      })\n      const response = await this.handleAutonatMessage(request, data.connection, {\n        signal\n      })\n      await messages.write(response, {\n        signal\n      })\n      await messages.unwrap().unwrap().close({\n        signal\n      })\n    } catch (err: any) {\n      this.log.error('error handling incoming autonat stream - %e', err)\n      data.stream.abort(err)\n    }\n  }\n\n  private async handleAutonatMessage (message: Message, connection: Connection, options?: AbortOptions): Promise<Message> {\n    const ourHosts = this.components.addressManager.getAddresses()\n      .map(ma => ma.toOptions().host)\n\n    const dialRequest = message.dial\n\n    if (dialRequest == null) {\n      this.log.error('dial was missing from message')\n\n      return {\n        type: Message.MessageType.DIAL_RESPONSE,\n        dialResponse: {\n          status: Message.ResponseStatus.E_BAD_REQUEST,\n          statusText: 'No Dial message found in message'\n        }\n      }\n    }\n\n    let peerId: PeerId\n    const peer = dialRequest.peer\n\n    if (peer?.id == null) {\n      this.log.error('PeerId missing from message')\n\n      return {\n        type: Message.MessageType.DIAL_RESPONSE,\n        dialResponse: {\n          status: Message.ResponseStatus.E_BAD_REQUEST,\n          statusText: 'missing peer info'\n        }\n      }\n    }\n\n    try {\n      const digest = Digest.decode(peer.id)\n      peerId = peerIdFromMultihash(digest)\n    } catch (err) {\n      this.log.error('invalid PeerId - %e', err)\n\n      return {\n        type: Message.MessageType.DIAL_RESPONSE,\n        dialResponse: {\n          status: Message.ResponseStatus.E_BAD_REQUEST,\n          statusText: 'bad peer id'\n        }\n      }\n    }\n\n    this.log('incoming request from %p', peerId)\n\n    // reject any dial requests that arrive via relays\n    if (!connection.remotePeer.equals(peerId)) {\n      this.log('target peer %p did not equal sending peer %p', peerId, connection.remotePeer)\n\n      return {\n        type: Message.MessageType.DIAL_RESPONSE,\n        dialResponse: {\n          status: Message.ResponseStatus.E_BAD_REQUEST,\n          statusText: 'peer id mismatch'\n        }\n      }\n    }\n\n    // get a list of multiaddrs to dial\n    const multiaddrs = peer.addrs\n      .map(buf => multiaddr(buf))\n      .filter(ma => {\n        const options = ma.toOptions()\n\n        if (isPrivate(ma)) {\n          // don't try to dial private addresses\n          return false\n        }\n\n        if (options.host !== connection.remoteAddr.toOptions().host) {\n          // skip any Multiaddrs where the target node's IP does not match the sending node's IP\n          this.log.trace('not dialing %a - target host did not match remote host %a', ma, connection.remoteAddr)\n          return false\n        }\n\n        if (ourHosts.includes(options.host)) {\n          // don't try to dial nodes on the same host as us\n          return false\n        }\n\n        if (this.components.transportManager.dialTransportForMultiaddr(ma) == null) {\n          // skip any Multiaddrs that have transports we do not support\n          this.log.trace('not dialing %a - transport unsupported', ma)\n          return false\n        }\n\n        return true\n      })\n      .map(ma => {\n        if (ma.getPeerId() == null) {\n          // make sure we have the PeerId as part of the Multiaddr\n          ma = ma.encapsulate(`/p2p/${peerId.toString()}`)\n        }\n\n        return ma\n      })\n\n    // make sure we have something to dial\n    if (multiaddrs.length === 0) {\n      this.log('refused to dial all multiaddrs for %p from message', peerId)\n\n      return {\n        type: Message.MessageType.DIAL_RESPONSE,\n        dialResponse: {\n          status: Message.ResponseStatus.E_DIAL_REFUSED,\n          statusText: 'no dialable addresses'\n        }\n      }\n    }\n\n    this.log('dial multiaddrs %s for peer %p', multiaddrs.map(ma => ma.toString()).join(', '), peerId)\n\n    let errorMessage = ''\n    let lastMultiaddr = multiaddrs[0]\n\n    for (const multiaddr of multiaddrs) {\n      let connection: Connection | undefined\n      lastMultiaddr = multiaddr\n\n      try {\n        connection = await this.components.connectionManager.openConnection(multiaddr, options)\n\n        if (!connection.remoteAddr.equals(multiaddr)) {\n          this.log.error('tried to dial %a but dialed %a', multiaddr, connection.remoteAddr)\n          throw new Error('Unexpected remote address')\n        }\n\n        this.log('successfully dialed %p via %a', peerId, multiaddr)\n\n        return {\n          type: Message.MessageType.DIAL_RESPONSE,\n          dialResponse: {\n            status: Message.ResponseStatus.OK,\n            addr: connection.remoteAddr.decapsulateCode(protocols('p2p').code).bytes\n          }\n        }\n      } catch (err: any) {\n        this.log.error('could not dial %p - %e', peerId, err)\n        errorMessage = err.message\n      } finally {\n        if (connection != null) {\n          await connection.close()\n        }\n      }\n    }\n\n    return {\n      type: Message.MessageType.DIAL_RESPONSE,\n      dialResponse: {\n        status: Message.ResponseStatus.E_DIAL_ERROR,\n        statusText: errorMessage,\n        addr: lastMultiaddr.bytes\n      }\n    }\n  }\n\n  /**\n   * The AutoNAT v1 server is not required to send us the address that it\n   * dialed successfully.\n   *\n   * When addresses fail, it can be because they are NATed, or because the peer\n   * did't support the transport, we have no way of knowing, so just send them\n   * one address so we can treat the response as:\n   *\n   * - OK - the dial request worked and the address is not NATed\n   * - E_DIAL_ERROR - the dial request failed and the address may be NATed\n   * - E_DIAL_REFUSED/E_BAD_REQUEST/E_INTERNAL_ERROR - the remote didn't dial the address\n   */\n  private getFirstUnverifiedMultiaddr (segment: string, supportsIPv6: boolean): DialResults | undefined {\n    const addrs = this.components.addressManager.getAddressesWithMetadata()\n      .sort((a, b) => {\n        // sort addresses, de-prioritize observed addresses\n        if (a.type === 'observed' && b.type !== 'observed') {\n          return 1\n        }\n\n        if (b.type === 'observed' && a.type !== 'observed') {\n          return -1\n        }\n\n        return 0\n      })\n      .filter(addr => {\n        const expired = addr.expires < Date.now()\n\n        if (!expired) {\n          // skip verified/non-verified addresses within their TTL\n          return false\n        }\n\n        const options = addr.multiaddr.toOptions()\n\n        if (options.family === 6) {\n          // do not send IPv6 addresses to peers without IPv6 addresses\n          if (!supportsIPv6) {\n            return false\n          }\n\n          if (!isGlobalUnicast(addr.multiaddr)) {\n            // skip non-globally routable addresses\n            return false\n          }\n        }\n\n        if (isPrivate(addr.multiaddr)) {\n          // skip private addresses\n          return false\n        }\n\n        return true\n      })\n\n    for (const addr of addrs) {\n      const addrString = addr.multiaddr.toString()\n      let results = this.dialResults.get(addrString)\n\n      if (results != null) {\n        if (results.networkSegments.includes(segment)) {\n          this.log.trace('%a already has a network segment result from %s', results.multiaddr, segment)\n          // skip this address if we already have a dial result from the\n          // network segment the peer is in\n          continue\n        }\n\n        if (results.queue.size > 10) {\n          this.log.trace('%a already has enough peers queued', results.multiaddr)\n          // already have enough peers verifying this address, skip on to the\n          // next one\n          continue\n        }\n      }\n\n      // will include this multiaddr, ensure we have a results object\n      if (results == null) {\n        const needsRevalidating = addr.expires < Date.now()\n\n        // allow re-validating addresses that worked previously\n        if (needsRevalidating) {\n          this.addressFilter.remove?.(addrString)\n        }\n\n        if (this.addressFilter.has(addrString)) {\n          continue\n        }\n\n        // only try to validate the address once\n        this.addressFilter.add(addrString)\n\n        this.log.trace('creating dial result %s %s', needsRevalidating ? 'to revalidate' : 'for', addrString)\n        results = {\n          multiaddr: addr.multiaddr,\n          success: 0,\n          failure: 0,\n          networkSegments: [],\n          verifyingPeers: peerSet(),\n          queue: new PeerQueue({\n            concurrency: 3,\n            maxSize: 50\n          }),\n          type: addr.type,\n          lastVerified: addr.lastVerified\n        }\n\n        this.dialResults.set(addrString, results)\n      }\n\n      return results\n    }\n  }\n\n  /**\n   * Removes any multiaddr result objects created for old multiaddrs that we are\n   * no longer waiting on\n   */\n  private removeOutdatedMultiaddrResults (): void {\n    const unverifiedMultiaddrs = new Set(this.components.addressManager.getAddressesWithMetadata()\n      .filter(({ expires }) => {\n        if (expires < Date.now()) {\n          return true\n        }\n\n        return false\n      })\n      .map(({ multiaddr }) => multiaddr.toString())\n    )\n\n    for (const multiaddr of this.dialResults.keys()) {\n      if (!unverifiedMultiaddrs.has(multiaddr)) {\n        this.log.trace('remove results for %a', multiaddr)\n        this.dialResults.delete(multiaddr)\n      }\n    }\n  }\n\n  /**\n   * Our multicodec topology noticed a new peer that supports autonat\n   */\n  async verifyExternalAddresses (connection: Connection): Promise<void> {\n    // do nothing if we are not running\n    if (!this.isStarted()) {\n      return\n    }\n\n    // perform cleanup\n    this.removeOutdatedMultiaddrResults()\n\n    const peer = await this.components.peerStore.get(connection.remotePeer)\n\n    // if the remote peer has IPv6 addresses, we can probably send them an IPv6\n    // address to verify, otherwise only send them IPv4 addresses\n    const supportsIPv6 = peer.addresses.some(({ multiaddr }) => {\n      return multiaddr.toOptions().family === 6\n    })\n\n    // get multiaddrs this peer is eligible to verify\n    const segment = this.getNetworkSegment(connection.remoteAddr)\n    const results = this.getFirstUnverifiedMultiaddr(segment, supportsIPv6)\n\n    if (results == null) {\n      this.log.trace('no unverified public addresses found for peer %p to verify, not requesting verification', connection.remotePeer)\n      return\n    }\n\n    if (!this.hasConnectionCapacity()) {\n      // we are near the max connection limit - any dial attempts from remote\n      // peers may be rejected which will get flagged as false dial errors and\n      // lead us to un-verify an otherwise reachable address\n\n      if (results.lastVerified != null) {\n        this.log('automatically re-verifying %a because we are too close to the connection limit', results.multiaddr)\n        this.confirmAddress(results)\n      } else {\n        this.log('skipping verifying %a because we are too close to the connection limit', results.multiaddr)\n      }\n\n      return\n    }\n\n    results.queue.add(async (options: TestAddressOptions) => {\n      await this.askPeerToVerify(connection, segment, options)\n    }, {\n      peerId: connection.remotePeer,\n      multiaddr: results.multiaddr\n    })\n      .catch(err => {\n        if (results?.result == null) {\n          this.log.error('error from %p verifying address %a - %e', connection.remotePeer, results?.multiaddr, err)\n        }\n      })\n  }\n\n  private async askPeerToVerify (connection: Connection, segment: string, options: TestAddressOptions): Promise<void> {\n    let results = this.dialResults.get(options.multiaddr.toString())\n\n    if (results == null) {\n      this.log('%a was verified while %p was queued', options.multiaddr, connection.remotePeer)\n      return\n    }\n\n    const signal = AbortSignal.timeout(this.timeout)\n    setMaxListeners(Infinity, signal)\n\n    this.log.trace('asking %p to verify multiaddr %s', connection.remotePeer, options.multiaddr)\n\n    const stream = await connection.newStream(this.protocol, {\n      signal\n    })\n\n    try {\n      const messages = pbStream(stream).pb(Message)\n      const [, response] = await Promise.all([\n        messages.write({\n          type: Message.MessageType.DIAL,\n          dial: {\n            peer: {\n              id: this.components.peerId.toMultihash().bytes,\n              addrs: [options.multiaddr.bytes]\n            }\n          }\n        }, { signal }),\n        messages.read({ signal })\n      ])\n\n      if (response.type !== Message.MessageType.DIAL_RESPONSE || response.dialResponse == null) {\n        this.log('invalid autonat response from %p - %j', connection.remotePeer, response)\n        return\n      }\n\n      const status = response.dialResponse.status\n\n      this.log.trace('autonat response from %p for %a is %s', connection.remotePeer, options.multiaddr, status)\n\n      if (status !== Message.ResponseStatus.OK && status !== Message.ResponseStatus.E_DIAL_ERROR) {\n        return\n      }\n\n      results = this.dialResults.get(options.multiaddr.toString())\n\n      if (results == null) {\n        this.log.trace('peer reported %a as %s but there is no result object', options.multiaddr, response.dialResponse.status)\n        return\n      }\n\n      if (results.networkSegments.includes(segment)) {\n        this.log.trace('%a results included network segment %s', options.multiaddr, segment)\n        return\n      }\n\n      if (results.result != null) {\n        this.log.trace('already resolved result for %a, ignoring response from', options.multiaddr, connection.remotePeer)\n        return\n      }\n\n      if (results.verifyingPeers.has(connection.remotePeer)) {\n        this.log.trace('peer %p has already verified %a, ignoring response', connection.remotePeer, options.multiaddr)\n        return\n      }\n\n      results.verifyingPeers.add(connection.remotePeer)\n      results.networkSegments.push(segment)\n\n      if (status === Message.ResponseStatus.OK) {\n        results.success++\n\n        // observed addresses require more confirmations\n        if (results.type !== 'observed') {\n          this.confirmAddress(results)\n          return\n        }\n      } else if (status === Message.ResponseStatus.E_DIAL_ERROR) {\n        results.failure++\n      }\n\n      this.log('%a success %d failure %d', results.multiaddr, results.success, results.failure)\n\n      if (results.success === REQUIRED_SUCCESSFUL_DIALS) {\n        this.confirmAddress(results)\n      }\n\n      if (results.failure === REQUIRED_FAILED_DIALS) {\n        this.unconfirmAddress(results)\n      }\n    } finally {\n      try {\n        await stream.close({\n          signal\n        })\n      } catch (err: any) {\n        stream.abort(err)\n      }\n    }\n  }\n\n  private hasConnectionCapacity (): boolean {\n    const connections = this.components.connectionManager.getConnections()\n    const currentConnectionCount = connections.length\n    const maxConnections = this.components.connectionManager.getMaxConnections()\n\n    return ((currentConnectionCount / maxConnections) * 100) < this.connectionThreshold\n  }\n\n  private confirmAddress (results: DialResults): void {\n    // we are now convinced\n    this.log('%s address %a is externally dialable', results.type, results.multiaddr)\n    this.components.addressManager.confirmObservedAddr(results.multiaddr)\n    this.dialResults.delete(results.multiaddr.toString())\n\n    // abort & remove any outstanding verification jobs for this multiaddr\n    results.result = true\n    results.queue.abort()\n  }\n\n  private unconfirmAddress (results: DialResults): void {\n    // we are now unconvinced\n    this.log('%s address %a is not externally dialable', results.type, results.multiaddr)\n    this.components.addressManager.removeObservedAddr(results.multiaddr)\n    this.dialResults.delete(results.multiaddr.toString())\n\n    // abort & remove any outstanding verification jobs for this multiaddr\n    results.result = false\n    results.queue.abort()\n  }\n\n  private getNetworkSegment (ma: Multiaddr): string {\n    // make sure we use different network segments\n    const options = ma.toOptions()\n\n    if (options.family === 4) {\n      const octets = options.host.split('.')\n      return octets[0].padStart(3, '0')\n    }\n\n    const octets = options.host.split(':')\n    return octets[0].padStart(4, '0')\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * The AutoNAT service implements the [AutoNAT protocol](https://docs.libp2p.io/concepts/nat/autonat/)\n * to confirm whether addresses the node is listening on are dialable by remote\n * peers.\n *\n * It does not implement NAT hole punching.\n *\n * > [!IMPORTANT]\n * > [AutoNat v2](https://www.npmjs.com/package/@libp2p/autonat-v2) is now\n * > available and should be preferred to this module.\n *\n * @example\n *\n * ```typescript\n * import { createLibp2p } from 'libp2p'\n * import { autoNAT } from '@libp2p/autonat'\n *\n * const node = await createLibp2p({\n *   // ...other options\n *   services: {\n *     autoNAT: autoNAT()\n *   }\n * })\n * ```\n */\n\nimport { AutoNATService } from './autonat.js'\nimport type { ComponentLogger, Libp2pEvents, Metrics, PeerId, PeerStore } from '@libp2p/interface'\nimport type { AddressManager, ConnectionManager, RandomWalk, Registrar, TransportManager } from '@libp2p/interface-internal'\nimport type { TypedEventTarget } from 'main-event'\n\nexport interface AutoNATServiceInit {\n  /**\n   * Allows overriding the protocol prefix used\n   */\n  protocolPrefix?: string\n\n  /**\n   * How long we should wait for a remote peer to verify our external address\n   */\n  timeout?: number\n\n  /**\n   * How long to wait after startup before trying to verify our external address\n   */\n  startupDelay?: number\n\n  /**\n   * Verify our external addresses this often\n   */\n  refreshInterval?: number\n\n  /**\n   * How many parallel inbound autoNAT streams we allow per-connection\n   */\n  maxInboundStreams?: number\n\n  /**\n   * How many parallel outbound autoNAT streams we allow per-connection\n   */\n  maxOutboundStreams?: number\n\n  /**\n   * If the number of currently open connections is higher than this value as\n   * a percentage of the maximum number of allowed connections, automatically\n   * reverify previously verified addresses since auto nat peers may find it\n   * hard to dial and will report that the address is not dialable leading this\n   * node to delist it.\n   *\n   * @default 80\n   */\n  connectionThreshold?: number\n\n  /**\n   * How large incoming autonat messages are allowed to be in bytes. If messages\n   * larger than this are received the stream will be reset.\n   *\n   * @default 8192\n   */\n  maxMessageSize?: number\n}\n\nexport interface AutoNATComponents {\n  registrar: Registrar\n  addressManager: AddressManager\n  transportManager: TransportManager\n  peerId: PeerId\n  connectionManager: ConnectionManager\n  logger: ComponentLogger\n  randomWalk: RandomWalk\n  events: TypedEventTarget<Libp2pEvents>\n  peerStore: PeerStore\n  metrics?: Metrics\n}\n\nexport function autoNAT (init: AutoNATServiceInit = {}): (components: AutoNATComponents) => unknown {\n  return (components) => {\n    return new AutoNATService(components, init)\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * The configured bootstrap peers will be discovered after the configured timeout. This will ensure there are some peers in the peer store for the node to use to discover other peers.\n *\n * They will be tagged with a tag with the name `'bootstrap'` tag, the value `50` and it will expire after two minutes which means the nodes connections may be closed if the maximum number of connections is reached.\n *\n * Clients that need constant connections to bootstrap nodes (e.g. browsers) can set the TTL to `Infinity`.\n *\n * @example Configuring a list of bootstrap nodes\n *\n * ```TypeScript\n * import { createLibp2p } from 'libp2p'\n * import { bootstrap } from '@libp2p/bootstrap'\n *\n * const libp2p = await createLibp2p({\n *   peerDiscovery: [\n *     bootstrap({\n *       list: [\n *         // a list of bootstrap peer multiaddrs to connect to on node startup\n *         '/ip4/104.131.131.82/tcp/4001/ipfs/QmaCpDMGvV2BGHeYERUEnRQAwe3N8SzbUtfsmvsqQLuvuJ',\n *         '/dnsaddr/bootstrap.libp2p.io/ipfs/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN',\n *         '/dnsaddr/bootstrap.libp2p.io/ipfs/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa'\n *       ]\n *     })\n *   ]\n * })\n *\n * libp2p.addEventListener('peer:discovery', (evt) => {\n *   console.log('found peer: ', evt.detail.toString())\n * })\n * ```\n */\n\nimport { peerDiscoverySymbol, serviceCapabilities } from '@libp2p/interface'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { P2P } from '@multiformats/mafmt'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { TypedEventEmitter } from 'main-event'\nimport type { ComponentLogger, Logger, PeerDiscovery, PeerDiscoveryEvents, PeerInfo, PeerStore, Startable } from '@libp2p/interface'\nimport type { ConnectionManager } from '@libp2p/interface-internal'\n\nconst DEFAULT_BOOTSTRAP_TAG_NAME = 'bootstrap'\nconst DEFAULT_BOOTSTRAP_TAG_VALUE = 50\nconst DEFAULT_BOOTSTRAP_DISCOVERY_TIMEOUT = 1000\n\nexport interface BootstrapInit {\n  /**\n   * The list of peer addresses in multi-address format\n   */\n  list: string[]\n\n  /**\n   * How long to wait before discovering bootstrap nodes\n   */\n  timeout?: number\n\n  /**\n   * Tag a bootstrap peer with this name before \"discovering\" it\n   *\n   * @default 'bootstrap'\n   */\n  tagName?: string\n\n  /**\n   * The bootstrap peer tag will have this value\n   *\n   * @default 50\n   */\n  tagValue?: number\n\n  /**\n   * Cause the bootstrap peer tag to be removed after this number of ms\n   */\n  tagTTL?: number\n}\n\nexport interface BootstrapComponents {\n  peerStore: PeerStore\n  logger: ComponentLogger\n  connectionManager: ConnectionManager\n}\n\n/**\n * Emits 'peer' events on a regular interval for each peer in the provided list.\n */\nclass Bootstrap extends TypedEventEmitter<PeerDiscoveryEvents> implements PeerDiscovery, Startable {\n  static tag = 'bootstrap'\n\n  private readonly log: Logger\n  private timer?: ReturnType<typeof setTimeout>\n  private readonly list: PeerInfo[]\n  private readonly timeout: number\n  private readonly components: BootstrapComponents\n  private readonly _init: BootstrapInit\n\n  constructor (components: BootstrapComponents, options: BootstrapInit = { list: [] }) {\n    if (options.list == null || options.list.length === 0) {\n      throw new Error('Bootstrap requires a list of peer addresses')\n    }\n    super()\n\n    this.components = components\n    this.log = components.logger.forComponent('libp2p:bootstrap')\n    this.timeout = options.timeout ?? DEFAULT_BOOTSTRAP_DISCOVERY_TIMEOUT\n    this.list = []\n\n    for (const candidate of options.list) {\n      if (!P2P.matches(candidate)) {\n        this.log.error('Invalid multiaddr')\n        continue\n      }\n\n      const ma = multiaddr(candidate)\n      const peerIdStr = ma.getPeerId()\n\n      if (peerIdStr == null) {\n        this.log.error('Invalid bootstrap multiaddr without peer id')\n        continue\n      }\n\n      const peerData: PeerInfo = {\n        id: peerIdFromString(peerIdStr),\n        multiaddrs: [ma]\n      }\n\n      this.list.push(peerData)\n    }\n\n    this._init = options\n  }\n\n  readonly [peerDiscoverySymbol] = this\n\n  readonly [Symbol.toStringTag] = '@libp2p/bootstrap'\n\n  readonly [serviceCapabilities]: string[] = [\n    '@libp2p/peer-discovery'\n  ]\n\n  isStarted (): boolean {\n    return Boolean(this.timer)\n  }\n\n  /**\n   * Start emitting events\n   */\n  start (): void {\n    if (this.isStarted()) {\n      return\n    }\n\n    this.log('Starting bootstrap node discovery, discovering peers after %s ms', this.timeout)\n    this.timer = setTimeout(() => {\n      void this._discoverBootstrapPeers()\n        .catch(err => {\n          this.log.error(err)\n        })\n    }, this.timeout)\n  }\n\n  /**\n   * Emit each address in the list as a PeerInfo\n   */\n  async _discoverBootstrapPeers (): Promise<void> {\n    if (this.timer == null) {\n      return\n    }\n\n    for (const peerData of this.list) {\n      await this.components.peerStore.merge(peerData.id, {\n        tags: {\n          [this._init.tagName ?? DEFAULT_BOOTSTRAP_TAG_NAME]: {\n            value: this._init.tagValue ?? DEFAULT_BOOTSTRAP_TAG_VALUE,\n            ttl: this._init.tagTTL\n          }\n        },\n        multiaddrs: peerData.multiaddrs\n      })\n\n      // check we are still running\n      if (this.timer == null) {\n        return\n      }\n\n      this.safeDispatchEvent('peer', { detail: peerData })\n      this.components.connectionManager.openConnection(peerData.id)\n        .catch(err => {\n          this.log.error('could not dial bootstrap peer %p', peerData.id, err)\n        })\n    }\n  }\n\n  /**\n   * Stop emitting events\n   */\n  stop (): void {\n    if (this.timer != null) {\n      clearTimeout(this.timer)\n    }\n\n    this.timer = undefined\n  }\n}\n\nexport function bootstrap (init: BootstrapInit): (components: BootstrapComponents) => PeerDiscovery {\n  return (components: BootstrapComponents) => new Bootstrap(components, init)\n}\n", "export const empty = new Uint8Array(0)\n\nexport function toHex (d: Uint8Array): string {\n  return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n}\n\nexport function fromHex (hex: string): Uint8Array {\n  const hexes = hex.match(/../g)\n  return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\nexport function equals (aa: Uint8Array, bb: Uint8Array): boolean {\n  if (aa === bb) { return true }\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function coerce (o: ArrayBufferView | ArrayBuffer | Uint8Array): Uint8Array {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') { return o }\n  if (o instanceof ArrayBuffer) { return new Uint8Array(o) }\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\nexport function isBinary (o: unknown): o is ArrayBuffer | ArrayBufferView {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n}\n\nexport function fromString (str: string): Uint8Array {\n  return new TextEncoder().encode(str)\n}\n\nexport function toString (b: Uint8Array): string {\n  return new TextDecoder().decode(b)\n}\n", "/* eslint-disable */\nvar encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  // @ts-ignore\n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      // @ts-ignore\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  // @ts-ignore\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (/** @type {number} */ value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n", "import varint from './vendor/varint.js'\n\nexport function decode (data: Uint8Array, offset = 0): [number, number] {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\nexport function encodeTo (int: number, target: Uint8Array, offset = 0): Uint8Array {\n  varint.encode(int, target, offset)\n  return target\n}\n\nexport function encodingLength (int: number): number {\n  return varint.encodingLength(int)\n}\n", "import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\nimport type { MultihashDigest } from './interface.js'\n\n/**\n * Creates a multihash digest.\n */\nexport function create <Code extends number> (code: Code, digest: Uint8Array): Digest<Code, number> {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode (multihash: Uint8Array): MultihashDigest {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\nexport function equals (a: MultihashDigest, b: unknown): b is MultihashDigest {\n  if (a === b) {\n    return true\n  } else {\n    const data = b as { code?: unknown, size?: unknown, bytes?: unknown }\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest<Code extends number, Size extends number> implements MultihashDigest {\n  readonly code: Code\n  readonly size: Size\n  readonly digest: Uint8Array\n  readonly bytes: Uint8Array\n\n  /**\n   * Creates a multihash digest.\n   */\n  constructor (code: Code, size: Size, digest: Uint8Array, bytes: Uint8Array) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n\n/**\n * Used to check that the passed multihash has the passed code\n */\nexport function hasCode <T extends number> (digest: MultihashDigest, code: T): digest is MultihashDigest<T> {\n  return digest.code === code\n}\n", "import { KEEP_ALIVE } from '@libp2p/interface'\n\nconst second = 1000\nconst minute = 60 * second\n\n/**\n * Multicodec code\n */\nexport const CIRCUIT_PROTO_CODE = 290\n\n/**\n * The maximum number of relay reservations the relay server will accept\n */\nexport const DEFAULT_MAX_RESERVATION_STORE_SIZE = 15\n\n/**\n * How often to check for reservation expiry\n */\nexport const DEFAULT_MAX_RESERVATION_TTL = 2 * 60 * minute\n\n/**\n * How many reservation attempts to make in parallel\n */\nexport const DEFAULT_RESERVATION_CONCURRENCY = 1\n\n/**\n * How long to wait for a reservation attempt to finish\n */\nexport const DEFAULT_RESERVATION_COMPLETION_TIMEOUT = 2000\n\n/**\n * How long to let the reservation attempt queue to grow\n */\nexport const DEFAULT_MAX_RESERVATION_QUEUE_LENGTH = 100\n\nexport const RELAY_SOURCE_TAG = 'circuit-relay-source'\n\nexport const KEEP_ALIVE_TAG = `${KEEP_ALIVE}-circuit-relay`\nexport const KEEP_ALIVE_SOURCE_TAG = `${KEEP_ALIVE}-circuit-relay-source`\n\n// circuit v2 connection limits\n// https://github.com/libp2p/go-libp2p/blob/master/p2p/protocol/circuitv2/relay/resources.go#L61-L66\n\n// 2 min is the default connection duration\nexport const DEFAULT_DURATION_LIMIT = 2 * minute\n\n// 128k is the default data limit\nexport const DEFAULT_DATA_LIMIT = BigInt(1 << 17)\n\n/**\n * The hop protocol\n */\nexport const RELAY_V2_HOP_CODEC = '/libp2p/circuit/relay/0.2.0/hop'\n\n/**\n * the stop protocol\n */\nexport const RELAY_V2_STOP_CODEC = '/libp2p/circuit/relay/0.2.0/stop'\n\n/**\n * Hop messages must be exchanged inside this timeout\n */\nexport const DEFAULT_HOP_TIMEOUT = 30 * second\n\n/**\n * How long to wait before starting to advertise the relay service\n */\nexport const DEFAULT_ADVERT_BOOT_DELAY = 30 * second\n\nexport const MAX_CONNECTIONS = 300\n\nexport const DEFAULT_DISCOVERY_FILTER_SIZE = 4096\nexport const DEFAULT_DISCOVERY_FILTER_ERROR_RATE = 0.001\n", "import { decodeMessage, encodeMessage, enumeration, MaxLengthError, message } from 'protons-runtime'\nimport { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc'\nimport type { Codec, DecodeOptions } from 'protons-runtime'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface HopMessage {\n  type?: HopMessage.Type\n  peer?: Peer\n  reservation?: Reservation\n  limit?: Limit\n  status?: Status\n}\n\nexport namespace HopMessage {\n  export enum Type {\n    RESERVE = 'RESERVE',\n    CONNECT = 'CONNECT',\n    STATUS = 'STATUS'\n  }\n\n  enum __TypeValues {\n    RESERVE = 0,\n    CONNECT = 1,\n    STATUS = 2\n  }\n\n  export namespace Type {\n    export const codec = (): Codec<Type> => {\n      return enumeration<Type>(__TypeValues)\n    }\n  }\n\n  let _codec: Codec<HopMessage>\n\n  export const codec = (): Codec<HopMessage> => {\n    if (_codec == null) {\n      _codec = message<HopMessage>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.type != null) {\n          w.uint32(8)\n          HopMessage.Type.codec().encode(obj.type, w)\n        }\n\n        if (obj.peer != null) {\n          w.uint32(18)\n          Peer.codec().encode(obj.peer, w)\n        }\n\n        if (obj.reservation != null) {\n          w.uint32(26)\n          Reservation.codec().encode(obj.reservation, w)\n        }\n\n        if (obj.limit != null) {\n          w.uint32(34)\n          Limit.codec().encode(obj.limit, w)\n        }\n\n        if (obj.status != null) {\n          w.uint32(40)\n          Status.codec().encode(obj.status, w)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {}\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.type = HopMessage.Type.codec().decode(reader)\n              break\n            }\n            case 2: {\n              obj.peer = Peer.codec().decode(reader, reader.uint32(), {\n                limits: opts.limits?.peer\n              })\n              break\n            }\n            case 3: {\n              obj.reservation = Reservation.codec().decode(reader, reader.uint32(), {\n                limits: opts.limits?.reservation\n              })\n              break\n            }\n            case 4: {\n              obj.limit = Limit.codec().decode(reader, reader.uint32(), {\n                limits: opts.limits?.limit\n              })\n              break\n            }\n            case 5: {\n              obj.status = Status.codec().decode(reader)\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<HopMessage>): Uint8Array => {\n    return encodeMessage(obj, HopMessage.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<HopMessage>): HopMessage => {\n    return decodeMessage(buf, HopMessage.codec(), opts)\n  }\n}\n\nexport interface StopMessage {\n  type?: StopMessage.Type\n  peer?: Peer\n  limit?: Limit\n  status?: Status\n}\n\nexport namespace StopMessage {\n  export enum Type {\n    CONNECT = 'CONNECT',\n    STATUS = 'STATUS'\n  }\n\n  enum __TypeValues {\n    CONNECT = 0,\n    STATUS = 1\n  }\n\n  export namespace Type {\n    export const codec = (): Codec<Type> => {\n      return enumeration<Type>(__TypeValues)\n    }\n  }\n\n  let _codec: Codec<StopMessage>\n\n  export const codec = (): Codec<StopMessage> => {\n    if (_codec == null) {\n      _codec = message<StopMessage>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.type != null) {\n          w.uint32(8)\n          StopMessage.Type.codec().encode(obj.type, w)\n        }\n\n        if (obj.peer != null) {\n          w.uint32(18)\n          Peer.codec().encode(obj.peer, w)\n        }\n\n        if (obj.limit != null) {\n          w.uint32(26)\n          Limit.codec().encode(obj.limit, w)\n        }\n\n        if (obj.status != null) {\n          w.uint32(32)\n          Status.codec().encode(obj.status, w)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {}\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.type = StopMessage.Type.codec().decode(reader)\n              break\n            }\n            case 2: {\n              obj.peer = Peer.codec().decode(reader, reader.uint32(), {\n                limits: opts.limits?.peer\n              })\n              break\n            }\n            case 3: {\n              obj.limit = Limit.codec().decode(reader, reader.uint32(), {\n                limits: opts.limits?.limit\n              })\n              break\n            }\n            case 4: {\n              obj.status = Status.codec().decode(reader)\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<StopMessage>): Uint8Array => {\n    return encodeMessage(obj, StopMessage.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<StopMessage>): StopMessage => {\n    return decodeMessage(buf, StopMessage.codec(), opts)\n  }\n}\n\nexport interface Peer {\n  id: Uint8Array\n  addrs: Uint8Array[]\n}\n\nexport namespace Peer {\n  let _codec: Codec<Peer>\n\n  export const codec = (): Codec<Peer> => {\n    if (_codec == null) {\n      _codec = message<Peer>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if ((obj.id != null && obj.id.byteLength > 0)) {\n          w.uint32(10)\n          w.bytes(obj.id)\n        }\n\n        if (obj.addrs != null) {\n          for (const value of obj.addrs) {\n            w.uint32(18)\n            w.bytes(value)\n          }\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          id: uint8ArrayAlloc(0),\n          addrs: []\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.id = reader.bytes()\n              break\n            }\n            case 2: {\n              if (opts.limits?.addrs != null && obj.addrs.length === opts.limits.addrs) {\n                throw new MaxLengthError('Decode error - map field \"addrs\" had too many elements')\n              }\n\n              obj.addrs.push(reader.bytes())\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Peer>): Uint8Array => {\n    return encodeMessage(obj, Peer.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Peer>): Peer => {\n    return decodeMessage(buf, Peer.codec(), opts)\n  }\n}\n\nexport interface Reservation {\n  expire: bigint\n  addrs: Uint8Array[]\n  voucher?: Envelope\n}\n\nexport namespace Reservation {\n  let _codec: Codec<Reservation>\n\n  export const codec = (): Codec<Reservation> => {\n    if (_codec == null) {\n      _codec = message<Reservation>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if ((obj.expire != null && obj.expire !== 0n)) {\n          w.uint32(8)\n          w.uint64(obj.expire)\n        }\n\n        if (obj.addrs != null) {\n          for (const value of obj.addrs) {\n            w.uint32(18)\n            w.bytes(value)\n          }\n        }\n\n        if (obj.voucher != null) {\n          w.uint32(26)\n          Envelope.codec().encode(obj.voucher, w)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          expire: 0n,\n          addrs: []\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.expire = reader.uint64()\n              break\n            }\n            case 2: {\n              if (opts.limits?.addrs != null && obj.addrs.length === opts.limits.addrs) {\n                throw new MaxLengthError('Decode error - map field \"addrs\" had too many elements')\n              }\n\n              obj.addrs.push(reader.bytes())\n              break\n            }\n            case 3: {\n              obj.voucher = Envelope.codec().decode(reader, reader.uint32(), {\n                limits: opts.limits?.voucher\n              })\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Reservation>): Uint8Array => {\n    return encodeMessage(obj, Reservation.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Reservation>): Reservation => {\n    return decodeMessage(buf, Reservation.codec(), opts)\n  }\n}\n\nexport interface Limit {\n  duration?: number\n  data?: bigint\n}\n\nexport namespace Limit {\n  let _codec: Codec<Limit>\n\n  export const codec = (): Codec<Limit> => {\n    if (_codec == null) {\n      _codec = message<Limit>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.duration != null) {\n          w.uint32(8)\n          w.uint32(obj.duration)\n        }\n\n        if (obj.data != null) {\n          w.uint32(16)\n          w.uint64(obj.data)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {}\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.duration = reader.uint32()\n              break\n            }\n            case 2: {\n              obj.data = reader.uint64()\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Limit>): Uint8Array => {\n    return encodeMessage(obj, Limit.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Limit>): Limit => {\n    return decodeMessage(buf, Limit.codec(), opts)\n  }\n}\n\nexport enum Status {\n  UNUSED = 'UNUSED',\n  OK = 'OK',\n  RESERVATION_REFUSED = 'RESERVATION_REFUSED',\n  RESOURCE_LIMIT_EXCEEDED = 'RESOURCE_LIMIT_EXCEEDED',\n  PERMISSION_DENIED = 'PERMISSION_DENIED',\n  CONNECTION_FAILED = 'CONNECTION_FAILED',\n  NO_RESERVATION = 'NO_RESERVATION',\n  MALFORMED_MESSAGE = 'MALFORMED_MESSAGE',\n  UNEXPECTED_MESSAGE = 'UNEXPECTED_MESSAGE'\n}\n\nenum __StatusValues {\n  UNUSED = 0,\n  OK = 100,\n  RESERVATION_REFUSED = 200,\n  RESOURCE_LIMIT_EXCEEDED = 201,\n  PERMISSION_DENIED = 202,\n  CONNECTION_FAILED = 203,\n  NO_RESERVATION = 204,\n  MALFORMED_MESSAGE = 400,\n  UNEXPECTED_MESSAGE = 401\n}\n\nexport namespace Status {\n  export const codec = (): Codec<Status> => {\n    return enumeration<Status>(__StatusValues)\n  }\n}\nexport interface ReservationVoucher {\n  relay: Uint8Array\n  peer: Uint8Array\n  expiration: bigint\n}\n\nexport namespace ReservationVoucher {\n  let _codec: Codec<ReservationVoucher>\n\n  export const codec = (): Codec<ReservationVoucher> => {\n    if (_codec == null) {\n      _codec = message<ReservationVoucher>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if ((obj.relay != null && obj.relay.byteLength > 0)) {\n          w.uint32(10)\n          w.bytes(obj.relay)\n        }\n\n        if ((obj.peer != null && obj.peer.byteLength > 0)) {\n          w.uint32(18)\n          w.bytes(obj.peer)\n        }\n\n        if ((obj.expiration != null && obj.expiration !== 0n)) {\n          w.uint32(24)\n          w.uint64(obj.expiration)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          relay: uint8ArrayAlloc(0),\n          peer: uint8ArrayAlloc(0),\n          expiration: 0n\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.relay = reader.bytes()\n              break\n            }\n            case 2: {\n              obj.peer = reader.bytes()\n              break\n            }\n            case 3: {\n              obj.expiration = reader.uint64()\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<ReservationVoucher>): Uint8Array => {\n    return encodeMessage(obj, ReservationVoucher.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<ReservationVoucher>): ReservationVoucher => {\n    return decodeMessage(buf, ReservationVoucher.codec(), opts)\n  }\n}\n\nexport interface Envelope {\n  publicKey: Uint8Array\n  payloadType: Uint8Array\n  payload?: ReservationVoucher\n  signature: Uint8Array\n}\n\nexport namespace Envelope {\n  let _codec: Codec<Envelope>\n\n  export const codec = (): Codec<Envelope> => {\n    if (_codec == null) {\n      _codec = message<Envelope>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if ((obj.publicKey != null && obj.publicKey.byteLength > 0)) {\n          w.uint32(10)\n          w.bytes(obj.publicKey)\n        }\n\n        if ((obj.payloadType != null && obj.payloadType.byteLength > 0)) {\n          w.uint32(18)\n          w.bytes(obj.payloadType)\n        }\n\n        if (obj.payload != null) {\n          w.uint32(26)\n          ReservationVoucher.codec().encode(obj.payload, w)\n        }\n\n        if ((obj.signature != null && obj.signature.byteLength > 0)) {\n          w.uint32(42)\n          w.bytes(obj.signature)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          publicKey: uint8ArrayAlloc(0),\n          payloadType: uint8ArrayAlloc(0),\n          signature: uint8ArrayAlloc(0)\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.publicKey = reader.bytes()\n              break\n            }\n            case 2: {\n              obj.payloadType = reader.bytes()\n              break\n            }\n            case 3: {\n              obj.payload = ReservationVoucher.codec().decode(reader, reader.uint32(), {\n                limits: opts.limits?.payload\n              })\n              break\n            }\n            case 5: {\n              obj.signature = reader.bytes()\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Envelope>): Uint8Array => {\n    return encodeMessage(obj, Envelope.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Envelope>): Envelope => {\n    return decodeMessage(buf, Envelope.codec(), opts)\n  }\n}\n", "import type { Matcher, MultiaddrMatcher } from './index.js'\nimport type { Multiaddr, Component } from '@multiformats/multiaddr'\n\n/**\n * Matches a multiaddr component with the specified code but no value\n */\nexport const code = (code: number): Matcher => {\n  return {\n    match: (vals) => {\n      const component = vals[0]\n\n      if (component == null) {\n        return false\n      }\n\n      if (component.code !== code) {\n        return false\n      }\n\n      if (component.value != null) {\n        return false\n      }\n\n      return vals.slice(1)\n    }\n  }\n}\n\n/**\n * Matches a multiaddr component with the specified code and value. If the value\n * is omitted any non-undefined value is matched.\n */\nexport const value = (code: number, value?: string): Matcher => {\n  return {\n    match: (vals) => {\n      const component = vals[0]\n\n      if (component?.code !== code) {\n        return false\n      }\n\n      if (component.value == null) {\n        return false\n      }\n\n      if (value != null && component.value !== value) {\n        return false\n      }\n\n      return vals.slice(1)\n    }\n  }\n}\n\n/**\n * An optional matcher\n */\nexport const optional = (matcher: Matcher): Matcher => {\n  return {\n    match: (vals) => {\n      const result = matcher.match(vals)\n\n      if (result === false) {\n        return vals\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Matches any one of the passed matches\n */\nexport const or = (...matchers: Matcher[]): Matcher => {\n  return {\n    match: (vals) => {\n      let matches: Component[] | undefined\n\n      for (const matcher of matchers) {\n        const result = matcher.match(vals)\n\n        // no match\n        if (result === false) {\n          continue\n        }\n\n        // choose greediest matcher\n        if (matches == null || result.length < matches.length) {\n          matches = result\n        }\n      }\n\n      if (matches == null) {\n        return false\n      }\n\n      return matches\n    }\n  }\n}\n\n/**\n * Matches all of the passed matchers\n */\nexport const and = (...matchers: Matcher[]): Matcher => {\n  return {\n    match: (vals) => {\n      for (const matcher of matchers) {\n        // pass what's left of the array\n        const result = matcher.match(vals)\n\n        // no match\n        if (result === false) {\n          return false\n        }\n\n        vals = result\n      }\n\n      return vals\n    }\n  }\n}\n\n/**\n * Create a multiaddr matcher from the passed component matchers\n */\nexport function fmt (...matchers: Matcher[]): MultiaddrMatcher {\n  function match (ma?: Multiaddr): Component[] | false {\n    if (ma == null) {\n      return false\n    }\n\n    let parts = ma.getComponents()\n\n    for (const matcher of matchers) {\n      const result = matcher.match(parts)\n\n      if (result === false) {\n        return false\n      }\n\n      parts = result\n    }\n\n    return parts\n  }\n\n  function matches (ma?: Multiaddr): boolean {\n    const result = match(ma)\n\n    return result !== false\n  }\n\n  function exactMatch (ma?: Multiaddr): boolean {\n    const result = match(ma)\n\n    if (result === false) {\n      return false\n    }\n\n    return result.length === 0\n  }\n\n  return {\n    matchers,\n    matches,\n    exactMatch\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * This module exports various matchers that can be used to infer the type of a\n * passed multiaddr.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/dnsaddr/example.org')\n *\n * DNS.matches(ma) // true - this is a multiaddr with a DNS address at the start\n * ```\n *\n * @example\n *\n * The default matching behaviour ignores any subsequent tuples in the multiaddr.\n * If you want stricter matching you can use `.exactMatch`:\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS, Circuit } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/dnsaddr/example.org/p2p/QmFoo/p2p-circuit/p2p/QmBar')\n *\n * DNS.exactMatch(ma) // false - this address has extra tuples after the DNS component\n * Circuit.matches(ma) // true\n * Circuit.exactMatch(ma) // true - the extra tuples are circuit relay related\n * ```\n */\n\nimport { CODE_P2P, CODE_DNS4, CODE_DNS6, CODE_DNSADDR, CODE_DNS, CODE_IP4, CODE_IP6, CODE_TCP, CODE_UDP, CODE_QUIC, CODE_QUIC_V1, CODE_WS, CODE_WSS, CODE_TLS, CODE_SNI, CODE_WEBRTC_DIRECT, CODE_CERTHASH, CODE_WEBTRANSPORT, CODE_P2P_CIRCUIT, CODE_WEBRTC, CODE_HTTP, CODE_UNIX, CODE_HTTPS, CODE_MEMORY, CODE_IP6ZONE, CODE_IPCIDR } from '@multiformats/multiaddr'\nimport { and, or, optional, fmt, code, value } from './utils.js'\nimport type { Multiaddr, Component } from '@multiformats/multiaddr'\n\n/**\n * A matcher accepts multiaddr components and either fails to match and returns\n * false or returns a sublist of unmatched components\n */\nexport interface Matcher {\n  match(parts: Component[]): Component[] | false\n}\n\n/**\n * A MultiaddrMatcher allows interpreting a multiaddr as a certain type of\n * multiaddr\n */\nexport interface MultiaddrMatcher {\n  /**\n   * The matchers that make up this MultiaddrMatcher - useful if you want to\n   * make your own custom matchers\n   */\n  matchers: Matcher[]\n\n  /**\n   * Returns true if the passed multiaddr can be treated as this type of\n   * multiaddr\n   */\n  matches(ma?: Multiaddr): boolean\n\n  /**\n   * Returns true if the passed multiaddr terminates as this type of\n   * multiaddr\n   */\n  exactMatch(ma?: Multiaddr): boolean\n}\n\n/**\n * Matches PeerId addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { PEER_ID } from '@multiformats/multiaddr-matcher'\n *\n * PEER_ID.matches(multiaddr('/p2p/Qmfoo')) // true\n * PEER_ID.matches(multiaddr('/ipfs/Qmfoo')) // true\n * ```\n */\nconst _PEER_ID = value(CODE_P2P)\n\nexport const PEER_ID = fmt(_PEER_ID)\n\n/**\n * DNS matchers\n */\nconst _DNS4 = value(CODE_DNS4)\nconst _DNS6 = value(CODE_DNS6)\nconst _DNSADDR = value(CODE_DNSADDR)\nconst _DNS = value(CODE_DNS)\n\n/**\n * Matches dns4 addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS4 } from '@multiformats/multiaddr-matcher'\n *\n * DNS4.matches(multiaddr('/dns4/example.org')) // true\n * ```\n */\nexport const DNS4 = fmt(_DNS4, optional(value(CODE_P2P)))\n\n/**\n * Matches dns6 addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS6 } from '@multiformats/multiaddr-matcher'\n *\n * DNS6.matches(multiaddr('/dns6/example.org')) // true\n * ```\n */\nexport const DNS6 = fmt(_DNS6, optional(value(CODE_P2P)))\n\n/**\n * Matches dnsaddr addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNSADDR } from '@multiformats/multiaddr-matcher'\n *\n * DNSADDR.matches(multiaddr('/dnsaddr/example.org')) // true\n * DNSADDR.matches(multiaddr('/dnsaddr/example.org/p2p/Qmfoo')) // true\n * ```\n */\nexport const DNSADDR = fmt(_DNSADDR, optional(value(CODE_P2P)))\n\n/**\n * Matches any dns address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS } from '@multiformats/multiaddr-matcher'\n *\n * DNS.matches(multiaddr('/dnsaddr/example.org')) // true\n * DNS.matches(multiaddr('/dns4/example.org')) // true\n * DNS.matches(multiaddr('/dns6/example.org')) // true\n * DNS.matches(multiaddr('/dns6/example.org/p2p/Qmfoo')) // true\n * ```\n */\nexport const DNS = fmt(or(_DNS, _DNSADDR, _DNS4, _DNS6), optional(value(CODE_P2P)))\n\nconst _IP4 = and(\n  value(CODE_IP4),\n  optional(value(CODE_IPCIDR))\n)\nconst _IP6 = and(\n  optional(value(CODE_IP6ZONE)),\n  value(CODE_IP6),\n  optional(value(CODE_IPCIDR))\n)\nconst _IP = or(_IP4, _IP6)\n\nconst _IP_OR_DOMAIN = or(_IP, _DNS, _DNS4, _DNS6, _DNSADDR)\n\n/**\n * A matcher for addresses that start with IP or DNS tuples.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP_OR_DOMAIN } from '@multiformats/multiaddr-matcher'\n *\n * IP_OR_DOMAIN.matches(multiaddr('/ip4/123.123.123.123')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/ip4/123.123.123.123/p2p/QmFoo')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/dns/example.com/p2p/QmFoo')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/p2p/QmFoo')) // false\n * ```\n */\nexport const IP_OR_DOMAIN = fmt(or(_IP, and(or(_DNS, _DNSADDR, _DNS4, _DNS6), optional(value(CODE_P2P)))))\n\n/**\n * Matches ip4 addresses.\n *\n * Use {@link IP IP} instead to match any ip4/ip6 address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP4 } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/ip4/123.123.123.123')\n *\n * IP4.matches(ma) // true\n * ```\n */\nexport const IP4 = fmt(_IP4)\n\n/**\n * Matches ip6 addresses.\n *\n * Use {@link IP IP} instead to match any ip4/ip6 address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP6 } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/ip6/fe80::1cc1:a3b8:322f:cf22')\n *\n * IP6.matches(ma) // true\n * ```\n */\nexport const IP6 = fmt(_IP6)\n\n/**\n * Matches ip4 or ip6 addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP } from '@multiformats/multiaddr-matcher'\n *\n * IP.matches(multiaddr('/ip4/123.123.123.123')) // true\n * IP.matches(multiaddr('/ip6/fe80::1cc1:a3b8:322f:cf22')) // true\n * ```\n */\nexport const IP = fmt(_IP)\n\nconst _TCP = and(_IP_OR_DOMAIN, value(CODE_TCP))\nconst _UDP = and(_IP_OR_DOMAIN, value(CODE_UDP))\n\n/**\n * Matches TCP addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { TCP } from '@multiformats/multiaddr-matcher'\n *\n * TCP.matches(multiaddr('/ip4/123.123.123.123/tcp/1234')) // true\n * ```\n */\nexport const TCP = fmt(and(_TCP, optional(value(CODE_P2P))))\n\n/**\n * Matches UDP addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { UDP } from '@multiformats/multiaddr-matcher'\n *\n * UDP.matches(multiaddr('/ip4/123.123.123.123/udp/1234')) // true\n * ```\n */\nexport const UDP = fmt(_UDP)\n\nconst _QUIC = and(_UDP, code(CODE_QUIC), optional(value(CODE_P2P)))\nconst _QUIC_V1 = and(_UDP, code(CODE_QUIC_V1), optional(value(CODE_P2P)))\n\nconst QUIC_V0_OR_V1 = or(_QUIC, _QUIC_V1)\n\n/**\n * Matches QUIC addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { QUIC } from '@multiformats/multiaddr-matcher'\n *\n * QUIC.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic')) // true\n * ```\n */\nexport const QUIC = fmt(_QUIC)\n\n/**\n * Matches QUICv1 addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { QUIC_V1 } from '@multiformats/multiaddr-matcher'\n *\n * QUIC_V1.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic-v1')) // true\n * ```\n */\nexport const QUIC_V1 = fmt(_QUIC_V1)\n\nconst _WEB = or(\n  _IP_OR_DOMAIN,\n  _TCP,\n  _UDP,\n  _QUIC,\n  _QUIC_V1\n)\n\nconst _WebSockets = or(\n  and(_WEB, code(CODE_WS), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches WebSocket addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebSockets } from '@multiformats/multiaddr-matcher'\n *\n * WebSockets.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/ws')) // true\n * ```\n */\nexport const WebSockets = fmt(_WebSockets)\n\nconst _WebSocketsSecure = or(\n  and(_WEB, code(CODE_WSS), optional(value(CODE_P2P))),\n  and(_WEB, code(CODE_TLS), optional(value(CODE_SNI)), code(CODE_WS), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches secure WebSocket addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebSocketsSecure } from '@multiformats/multiaddr-matcher'\n *\n * WebSocketsSecure.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/wss')) // true\n * ```\n */\nexport const WebSocketsSecure = fmt(_WebSocketsSecure)\n\nconst _WebRTCDirect = and(_UDP, code(CODE_WEBRTC_DIRECT), optional(value(CODE_CERTHASH)), optional(value(CODE_CERTHASH)), optional(value(CODE_P2P)))\n\n/**\n * Matches WebRTC-direct addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTCDirect } from '@multiformats/multiaddr-matcher'\n *\n * WebRTCDirect.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmFoo/webrtc-direct/certhash/u....')) // true\n * ```\n */\nexport const WebRTCDirect = fmt(_WebRTCDirect)\n\nconst _WebTransport = and(_QUIC_V1, code(CODE_WEBTRANSPORT), optional(value(CODE_CERTHASH)), optional(value(CODE_CERTHASH)), optional(value(CODE_P2P)))\n\n/**\n * Matches WebTransport addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTCDirect } from '@multiformats/multiaddr-matcher'\n *\n * WebRTCDirect.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic-v1/webtransport/certhash/u..../certhash/u..../p2p/QmFoo')) // true\n * ```\n */\nexport const WebTransport = fmt(_WebTransport)\n\nconst _P2P = or(\n  _WebSockets,\n  _WebSocketsSecure,\n  and(_TCP, optional(value(CODE_P2P))),\n  and(QUIC_V0_OR_V1, optional(value(CODE_P2P))),\n  and(_IP_OR_DOMAIN, optional(value(CODE_P2P))),\n  _WebRTCDirect,\n  _WebTransport,\n  value(CODE_P2P)\n)\n\n/**\n * Matches peer addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { P2P } from '@multiformats/multiaddr-matcher'\n *\n * P2P.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmFoo')) // true\n * ```\n */\nexport const P2P = fmt(_P2P)\n\nconst _Circuit = and(_P2P, code(CODE_P2P_CIRCUIT), value(CODE_P2P))\n\n/**\n * Matches circuit relay addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Circuit } from '@multiformats/multiaddr-matcher'\n *\n * Circuit.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmRelay/p2p-circuit/p2p/QmTarget')) // true\n * ```\n */\nexport const Circuit = fmt(_Circuit)\n\nconst _WebRTC = or(\n  and(_P2P, code(CODE_P2P_CIRCUIT), code(CODE_WEBRTC), optional(value(CODE_P2P))),\n  and(_P2P, code(CODE_WEBRTC), optional(value(CODE_P2P))),\n  and(code(CODE_WEBRTC), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches WebRTC addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTC } from '@multiformats/multiaddr-matcher'\n *\n * WebRTC.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmRelay/p2p-circuit/webrtc/p2p/QmTarget')) // true\n * ```\n */\nexport const WebRTC = fmt(_WebRTC)\n\nconst _HTTP = or(\n  and(_IP_OR_DOMAIN, value(CODE_TCP), code(CODE_HTTP), optional(value(CODE_P2P))),\n  and(_IP_OR_DOMAIN, code(CODE_HTTP), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches HTTP addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { HTTP } from '@multiformats/multiaddr-matcher'\n *\n * HTTP.matches(multiaddr('/dns/example.org/http')) // true\n * ```\n */\nexport const HTTP = fmt(_HTTP)\n\nconst _HTTPS = and(_IP_OR_DOMAIN, or(\n  and(value(CODE_TCP, '443'), code(CODE_HTTP)),\n  and(value(CODE_TCP), code(CODE_HTTPS)),\n  and(value(CODE_TCP), code(CODE_TLS), code(CODE_HTTP)),\n  and(code(CODE_TLS), code(CODE_HTTP)),\n  code(CODE_TLS),\n  code(CODE_HTTPS)\n),\noptional(value(CODE_P2P))\n)\n\n/**\n * Matches HTTPS addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { HTTP } from '@multiformats/multiaddr-matcher'\n *\n * HTTP.matches(multiaddr('/dns/example.org/tls/http')) // true\n * ```\n */\nexport const HTTPS = fmt(_HTTPS)\n\nconst _Memory = or(\n  and(value(CODE_MEMORY), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches Memory addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Memory } from '@multiformats/multiaddr-matcher'\n *\n * Memory.matches(multiaddr('/memory/0xDEADBEEF')) // true\n * ```\n */\nexport const Memory = fmt(_Memory)\n\nconst _Unix = or(\n  and(value(CODE_UNIX), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches Unix addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Unix } from '@multiformats/multiaddr-matcher'\n *\n * Unix.matches(multiaddr('/unix/%2Fpath%2Fto%2Funix.socket')) // true\n * ```\n */\nexport const Unix = fmt(_Unix)\n", "/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  /**\n   * @param {any[] | Iterable<number>} source\n   */\n  function encode (source) {\n    // @ts-ignore\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  /**\n   * @param {string | string[]} source\n   */\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  /**\n   * @param {string | string[]} string\n   */\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n", "import { coerce } from '../bytes.js'\nimport basex from '../vendor/base-x.js'\nimport type { BaseCodec, BaseDecoder, BaseEncoder, CombobaseDecoder, Multibase, MultibaseCodec, MultibaseDecoder, MultibaseEncoder, UnibaseDecoder } from './interface.js'\n\ninterface EncodeFn { (bytes: Uint8Array): string }\ninterface DecodeFn { (text: string): Uint8Array }\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder<Base extends string, Prefix extends string> implements MultibaseEncoder<Prefix>, BaseEncoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  encode (bytes: Uint8Array): Multibase<Prefix> {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder<Base extends string, Prefix extends string> implements MultibaseDecoder<Prefix>, UnibaseDecoder<Prefix>, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseDecode: DecodeFn\n  private readonly prefixCodePoint: number\n\n  constructor (name: Base, prefix: Prefix, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    const prefixCodePoint = prefix.codePointAt(0)\n    /* c8 ignore next 3 */\n    if (prefixCodePoint === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    this.prefixCodePoint = prefixCodePoint\n    this.baseDecode = baseDecode\n  }\n\n  decode (text: string): Uint8Array {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  or<OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n}\n\ntype Decoders<Prefix extends string> = Record<Prefix, UnibaseDecoder<Prefix>>\n\nclass ComposedDecoder<Prefix extends string> implements MultibaseDecoder<Prefix>, CombobaseDecoder<Prefix> {\n  readonly decoders: Decoders<Prefix>\n\n  constructor (decoders: Decoders<Prefix>) {\n    this.decoders = decoders\n  }\n\n  or <OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n\n  decode (input: string): Uint8Array {\n    const prefix = input[0] as Prefix\n    const decoder = this.decoders[prefix]\n    if (decoder != null) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\nexport function or <L extends string, R extends string> (left: UnibaseDecoder<L> | CombobaseDecoder<L>, right: UnibaseDecoder<R> | CombobaseDecoder<R>): ComposedDecoder<L | R> {\n  return new ComposedDecoder({\n    ...(left.decoders ?? { [(left as UnibaseDecoder<L>).prefix]: left }),\n    ...(right.decoders ?? { [(right as UnibaseDecoder<R>).prefix]: right })\n  } as Decoders<L | R>)\n}\n\nexport class Codec<Base extends string, Prefix extends string> implements MultibaseCodec<Prefix>, MultibaseEncoder<Prefix>, MultibaseDecoder<Prefix>, BaseCodec, BaseEncoder, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n  readonly baseDecode: DecodeFn\n  readonly encoder: Encoder<Base, Prefix>\n  readonly decoder: Decoder<Base, Prefix>\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  encode (input: Uint8Array): string {\n    return this.encoder.encode(input)\n  }\n\n  decode (input: string): Uint8Array {\n    return this.decoder.decode(input)\n  }\n}\n\nexport function from <Base extends string, Prefix extends string> ({ name, prefix, encode, decode }: { name: Base, prefix: Prefix, encode: EncodeFn, decode: DecodeFn }): Codec<Base, Prefix> {\n  return new Codec(name, prefix, encode, decode)\n}\n\nexport function baseX <Base extends string, Prefix extends string> ({ name, prefix, alphabet }: { name: Base, prefix: Prefix, alphabet: string }): Codec<Base, Prefix> {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: (text: string): Uint8Array => coerce(decode(text))\n  })\n}\n\nfunction decode (string: string, alphabetIdx: Record<string, number>, bitsPerChar: number, name: string): Uint8Array {\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = alphabetIdx[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\nfunction encode (data: Uint8Array, alphabet: string, bitsPerChar: number): string {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits !== 0) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (((out.length * bitsPerChar) & 7) !== 0) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\nfunction createAlphabetIdx (alphabet: string): Record<string, number> {\n  // Build the character lookup table:\n  const alphabetIdx: Record<string, number> = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    alphabetIdx[alphabet[i]] = i\n  }\n  return alphabetIdx\n}\n\n/**\n * RFC4648 Factory\n */\nexport function rfc4648 <Base extends string, Prefix extends string> ({ name, prefix, bitsPerChar, alphabet }: { name: Base, prefix: Prefix, bitsPerChar: number, alphabet: string }): Codec<Base, Prefix> {\n  const alphabetIdx = createAlphabetIdx(alphabet)\n  return from({\n    prefix,\n    name,\n    encode (input: Uint8Array): string {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input: string): Uint8Array {\n      return decode(input, alphabetIdx, bitsPerChar, name)\n    }\n  })\n}\n", "import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n", "import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n", "import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n", "import { base32 } from './bases/base32.js'\nimport { base36 } from './bases/base36.js'\nimport { base58btc } from './bases/base58.js'\nimport { coerce } from './bytes.js'\nimport * as Digest from './hashes/digest.js'\nimport * as varint from './varint.js'\nimport type * as API from './link/interface.js'\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\nexport function format <T extends API.Link<unknown, number, number, API.Version>, Prefix extends string> (link: T, base?: API.MultibaseEncoder<Prefix>): API.ToString<T, Prefix> {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        base as API.MultibaseEncoder<'z'> ?? base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        (base ?? base32.encoder) as API.MultibaseEncoder<Prefix>\n      )\n  }\n}\n\nexport function toJSON <Link extends API.UnknownLink> (link: Link): API.LinkJSON<Link> {\n  return {\n    '/': format(link)\n  }\n}\n\nexport function fromJSON <Link extends API.UnknownLink> (json: API.LinkJSON<Link>): CID<unknown, number, number, API.Version> {\n  return CID.parse(json['/'])\n}\n\nconst cache = new WeakMap<API.UnknownLink, Map<string, string>>()\n\nfunction baseCache (cid: API.UnknownLink): Map<string, string> {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\nexport class CID<Data = unknown, Format extends number = number, Alg extends number = number, Version extends API.Version = API.Version> implements API.Link<Data, Format, Alg, Version> {\n  readonly code: Format\n  readonly version: Version\n  readonly multihash: API.MultihashDigest<Alg>\n  readonly bytes: Uint8Array\n  readonly '/': Uint8Array\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param multihash - (Multi)hash of the of the content.\n   */\n  constructor (version: Version, code: Format, multihash: API.MultihashDigest<Alg>, bytes: Uint8Array) {\n    this.code = code\n    this.version = version\n    this.multihash = multihash\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID (): this {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset (): number {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength (): number {\n    return this.bytes.byteLength\n  }\n\n  toV0 (): CID<Data, API.DAG_PB, API.SHA_256, 0> {\n    switch (this.version) {\n      case 0: {\n        return this as CID<Data, API.DAG_PB, API.SHA_256, 0>\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return (\n          CID.createV0(\n            multihash as API.MultihashDigest<API.SHA_256>\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  toV1 (): CID<Data, Format, Alg, 1> {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return this as CID<Data, Format, Alg, 1>\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  equals (other: unknown): other is CID<Data, Format, Alg, Version> {\n    return CID.equals(this, other)\n  }\n\n  static equals <Data, Format extends number, Alg extends number, Version extends API.Version>(self: API.Link<Data, Format, Alg, Version>, other: unknown): other is CID {\n    const unknown = other as { code?: unknown, version?: unknown, multihash?: unknown }\n    return (\n      unknown != null &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  toString (base?: API.MultibaseEncoder<string>): string {\n    return format(this, base)\n  }\n\n  toJSON (): API.LinkJSON<this> {\n    return { '/': format(this) }\n  }\n\n  link (): this {\n    return this\n  }\n\n  readonly [Symbol.toStringTag] = 'CID';\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] (): string {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   */\n  static asCID <Data, Format extends number, Alg extends number, Version extends API.Version, U>(input: API.Link<Data, Format, Alg, Version> | U): CID<Data, Format, Alg, Version> | null {\n    if (input == null) {\n      return null\n    }\n\n    const value = input as any\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        multihash as API.MultihashDigest<Alg>,\n        bytes ?? encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest = Digest.decode(multihash) as API.MultihashDigest<Alg>\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param digest - (Multi)hash of the of the content.\n   */\n  static create <Data, Format extends number, Alg extends number, Version extends API.Version>(version: Version, code: Format, digest: API.MultihashDigest<Alg>): CID<Data, Format, Alg, Version> {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   */\n  static createV0 <T = unknown>(digest: API.MultihashDigest<typeof SHA_256_CODE>): CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0> {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @param code - Content encoding format code.\n   * @param digest - Multihash of the content.\n   */\n  static createV1 <Data, Code extends number, Alg extends number>(code: Code, digest: API.MultihashDigest<Alg>): CID<Data, Code, Alg, 1> {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   */\n  static decode <Data, Code extends number, Alg extends number, Version extends API.Version>(bytes: API.ByteView<API.Link<Data, Code, Alg, Version>>): CID<Data, Code, Alg, Version> {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length !== 0) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   */\n  static decodeFirst <T, C extends number, A extends number, V extends API.Version>(bytes: API.ByteView<API.Link<T, C, A, V>>): [CID<T, C, A, V>, Uint8Array] {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(digest as API.MultihashDigest<API.SHA_256>)\n        : CID.createV1(specs.codec, digest)\n    return [cid as CID<T, C, A, V>, bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   */\n  static inspectBytes <T, C extends number, A extends number, V extends API.Version>(initialBytes: API.ByteView<API.Link<T, C, A, V>>): { version: V, codec: C, multihashCode: A, digestSize: number, multihashSize: number, size: number } {\n    let offset = 0\n    const next = (): number => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = next() as V\n    let codec = DAG_PB_CODE as C\n    if (version as number === 18) {\n      // CIDv0\n      version = 0 as V\n      offset = 0\n    } else {\n      codec = next() as C\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = next() as A // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   */\n  static parse <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version>(source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): CID<Data, Code, Alg, Version> {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\nfunction parseCIDtoBytes <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version> (source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): [Prefix, API.ByteView<API.Link<Data, Code, Alg, Version>>] {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base ?? base58btc\n      return [\n        base58btc.prefix as Prefix,\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base ?? base58btc\n      return [base58btc.prefix as Prefix, decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base ?? base32\n      return [base32.prefix as Prefix, decoder.decode(source)]\n    }\n    case base36.prefix: {\n      const decoder = base ?? base36\n      return [base36.prefix as Prefix, decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [source[0] as Prefix, base.decode(source)]\n    }\n  }\n}\n\nfunction toStringV0 (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<'z'>): string {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nfunction toStringV1 <Prefix extends string> (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<Prefix>): string {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\nfunction encodeCID (version: API.Version, code: number, multihash: Uint8Array): Uint8Array {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n", "import * as Digest from './digest.js'\nimport type { MultihashHasher } from './interface.js'\n\ntype Await<T> = Promise<T> | T\n\nexport function from <Name extends string, Code extends number> ({ name, code, encode }: { name: Name, code: Code, encode(input: Uint8Array): Await<Uint8Array> }): Hasher<Name, Code> {\n  return new Hasher(name, code, encode)\n}\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n */\nexport class Hasher<Name extends string, Code extends number> implements MultihashHasher<Code> {\n  readonly name: Name\n  readonly code: Code\n  readonly encode: (input: Uint8Array) => Await<Uint8Array>\n\n  constructor (name: Name, code: Code, encode: (input: Uint8Array) => Await<Uint8Array>) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  digest (input: Uint8Array): Await<Digest.Digest<Code, number>> {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n", "/* global crypto */\n\nimport { from } from './hasher.js'\n\nfunction sha (name: AlgorithmIdentifier): (data: Uint8Array) => Promise<Uint8Array> {\n  return async data => new Uint8Array(await crypto.subtle.digest(name, data))\n}\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n", "/**\n * A transfer limit was hit\n */\nexport class TransferLimitError extends Error {\n  constructor (message = 'Transfer limit error') {\n    super(message)\n    this.name = 'TransferLimitError'\n  }\n}\n\n/**\n * A duration limit was hit\n */\nexport class DurationLimitError extends Error {\n  constructor (message = 'Duration limit error') {\n    super(message)\n    this.name = 'DurationLimitError'\n  }\n}\n\n/**\n * There were enough relay reservations already\n */\nexport class HadEnoughRelaysError extends Error {\n  static name: string = 'HadEnoughRelaysError'\n  name: string = 'HadEnoughRelaysError'\n}\n\n/**\n * An attempt to open a relayed connection over a relayed connection was made\n */\nexport class DoubleRelayError extends Error {\n  static name: string = 'DoubleRelayError'\n  name: string = 'DoubleRelayError'\n}\n\n/**\n * An attempt to make a reservation on a relay was made while the reservation\n * queue was full\n */\nexport class RelayQueueFullError extends Error {\n  static name: string = 'RelayQueueFullError'\n  name: string = 'RelayQueueFullError'\n}\n", "import { CODE_P2P_CIRCUIT } from '@multiformats/multiaddr'\nimport { P2P } from '@multiformats/multiaddr-matcher'\nimport { fmt, code, and } from '@multiformats/multiaddr-matcher/utils'\nimport { anySignal } from 'any-signal'\nimport { CID } from 'multiformats/cid'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { DurationLimitError, TransferLimitError } from './errors.js'\nimport type { RelayReservation } from './index.js'\nimport type { Limit } from './pb/index.js'\nimport type { ConnectionLimits, LoggerOptions, Stream } from '@libp2p/interface'\nimport type { Source } from 'it-stream-types'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nasync function * countStreamBytes (source: Source<Uint8Array | Uint8ArrayList>, limit: { remaining: bigint }, options: LoggerOptions): AsyncGenerator<Uint8Array | Uint8ArrayList, void, unknown> {\n  const limitBytes = limit.remaining\n\n  for await (const buf of source) {\n    const len = BigInt(buf.byteLength)\n\n    if ((limit.remaining - len) < 0) {\n      // this is a safe downcast since len is guarantee to be in the range for a number\n      const remaining = Number(limit.remaining)\n      limit.remaining = 0n\n\n      try {\n        if (remaining !== 0) {\n          yield buf.subarray(0, remaining)\n        }\n      } catch (err: any) {\n        options.log.error(err)\n      }\n\n      throw new TransferLimitError(`data limit of ${limitBytes} bytes exceeded`)\n    }\n\n    limit.remaining -= len\n    yield buf\n  }\n}\n\nexport function createLimitedRelay (src: Stream, dst: Stream, abortSignal: AbortSignal, reservation: RelayReservation, options: LoggerOptions): void {\n  function abortStreams (err: Error): void {\n    src.abort(err)\n    dst.abort(err)\n  }\n\n  // combine shutdown signal and reservation expiry signal\n  const signals = [abortSignal, reservation.signal]\n\n  if (reservation.limit?.duration != null) {\n    options.log('limiting relayed connection duration to %dms', reservation.limit.duration)\n    signals.push(AbortSignal.timeout(reservation.limit.duration))\n  }\n\n  const signal = anySignal(signals)\n\n  let srcDstFinished = false\n  let dstSrcFinished = false\n\n  let dataLimit: { remaining: bigint } | undefined\n\n  if (reservation.limit?.data != null) {\n    dataLimit = {\n      remaining: reservation.limit.data\n    }\n  }\n\n  queueMicrotask(() => {\n    const onAbort = (): void => {\n      options.log('relayed connection reached time limit')\n      dst.abort(new DurationLimitError(`duration limit of ${reservation.limit?.duration} ms exceeded`))\n    }\n\n    signal.addEventListener('abort', onAbort, { once: true })\n\n    void dst.sink(dataLimit == null ? src.source : countStreamBytes(src.source, dataLimit, options))\n      .catch(err => {\n        options.log.error('error while relaying streams src -> dst', err)\n        abortStreams(err)\n      })\n      .finally(() => {\n        srcDstFinished = true\n\n        if (dstSrcFinished) {\n          signal.removeEventListener('abort', onAbort)\n          signal.clear()\n        }\n      })\n  })\n\n  queueMicrotask(() => {\n    const onAbort = (): void => {\n      options.log('relayed connection reached time limit')\n      src.abort(new DurationLimitError(`duration limit of ${reservation.limit?.duration} ms exceeded`))\n    }\n\n    signal.addEventListener('abort', onAbort, { once: true })\n\n    void src.sink(dataLimit == null ? dst.source : countStreamBytes(dst.source, dataLimit, options))\n      .catch(err => {\n        options.log.error('error while relaying streams dst -> src', err)\n        abortStreams(err)\n      })\n      .finally(() => {\n        dstSrcFinished = true\n\n        if (srcDstFinished) {\n          signal.removeEventListener('abort', onAbort)\n          signal.clear()\n        }\n      })\n  })\n}\n\n/**\n * Convert a namespace string into a cid\n */\nexport async function namespaceToCid (namespace: string): Promise<CID> {\n  const bytes = new TextEncoder().encode(namespace)\n  const hash = await sha256.digest(bytes)\n\n  return CID.createV0(hash)\n}\n\n/**\n * returns number of ms between now and expiration time\n */\nexport function getExpirationMilliseconds (expireTimeSeconds: bigint): number {\n  const expireTimeMillis = expireTimeSeconds * BigInt(1000)\n  const currentTime = new Date().getTime()\n\n  // downcast to number to use with setTimeout\n  return Number(expireTimeMillis - BigInt(currentTime))\n}\n\nexport class LimitTracker {\n  private readonly expires?: number\n  private bytes?: bigint\n\n  constructor (limits?: Limit) {\n    if (limits?.duration != null && limits?.duration !== 0) {\n      this.expires = Date.now() + (limits.duration * 1000)\n    }\n\n    this.bytes = limits?.data\n\n    if (this.bytes === 0n) {\n      this.bytes = undefined\n    }\n\n    this.onData = this.onData.bind(this)\n  }\n\n  onData (buf: Uint8ArrayList | Uint8Array): void {\n    if (this.bytes == null) {\n      return\n    }\n\n    this.bytes -= BigInt(buf.byteLength)\n\n    if (this.bytes < 0n) {\n      this.bytes = 0n\n    }\n  }\n\n  getLimits (): ConnectionLimits | undefined {\n    if (this.expires == null && this.bytes == null) {\n      return\n    }\n\n    const output = {}\n\n    if (this.bytes != null) {\n      const self = this\n\n      Object.defineProperty(output, 'bytes', {\n        get () {\n          return self.bytes\n        }\n      })\n    }\n\n    if (this.expires != null) {\n      const self = this\n\n      Object.defineProperty(output, 'seconds', {\n        get () {\n          return Math.round(((self.expires ?? 0) - Date.now()) / 1000)\n        }\n      })\n    }\n\n    return output\n  }\n}\n\n/**\n * A custom matcher that tells us to listen on a particular relay\n */\nexport const CircuitListen = fmt(\n  and(P2P.matchers[0], code(CODE_P2P_CIRCUIT))\n)\n\n/**\n * A custom matcher that tells us to discover available relays\n */\nexport const CircuitSearch = fmt(\n  code(CODE_P2P_CIRCUIT)\n)\n", "import forEach from 'it-foreach'\nimport { pipe } from 'it-pipe'\nimport type { ComponentLogger, MultiaddrConnection, Stream } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface StreamProperties {\n  stream: Stream\n  remoteAddr: Multiaddr\n  localAddr: Multiaddr\n  logger: ComponentLogger\n\n  /**\n   * A callback invoked when data is read from the stream\n   */\n  onDataRead?(buf: Uint8ArrayList | Uint8Array): void\n\n  /**\n   * A callback invoked when data is written to the stream\n   */\n  onDataWrite?(buf: Uint8ArrayList | Uint8Array): void\n}\n\n/**\n * Convert a duplex iterable into a MultiaddrConnection.\n * https://github.com/libp2p/interface-transport#multiaddrconnection\n */\nexport function streamToMaConnection (props: StreamProperties): MultiaddrConnection {\n  const { stream, remoteAddr, logger, onDataRead, onDataWrite } = props\n  const log = logger.forComponent('libp2p:stream:converter')\n\n  let closedRead = false\n  let closedWrite = false\n\n  // piggyback on `stream.close` invocations to close multiaddr connection\n  const streamClose = stream.close.bind(stream)\n  stream.close = async (options): Promise<void> => {\n    await streamClose(options)\n    close(true)\n  }\n\n  // piggyback on `stream.abort` invocations to close multiaddr connection\n  const streamAbort = stream.abort.bind(stream)\n  stream.abort = (err): void => {\n    streamAbort(err)\n    close(true)\n  }\n\n  // piggyback on `stream.sink` invocations to close multiaddr connection\n  const streamSink = stream.sink.bind(stream)\n  stream.sink = async (source): Promise<void> => {\n    try {\n      await streamSink(\n        pipe(\n          source,\n          (source) => forEach(source, buf => onDataWrite?.(buf))\n        )\n      )\n    } catch (err: any) {\n      // If aborted we can safely ignore\n      if (err.type !== 'aborted') {\n        // If the source errored the socket will already have been destroyed by\n        // toIterable.duplex(). If the socket errored it will already be\n        // destroyed. There's nothing to do here except log the error & return.\n        log.error('%s error in sink', remoteAddr, err)\n      }\n    } finally {\n      closedWrite = true\n      close()\n    }\n  }\n\n  const maConn: MultiaddrConnection = {\n    log,\n    sink: stream.sink,\n    source: (async function * (): AsyncGenerator<Uint8ArrayList> {\n      try {\n        for await (const buf of stream.source) {\n          onDataRead?.(buf)\n          yield buf\n        }\n      } finally {\n        closedRead = true\n        close()\n      }\n    }()),\n    remoteAddr,\n    timeline: { open: Date.now(), close: undefined },\n    close: stream.close,\n    abort: stream.abort\n  }\n\n  function close (force?: boolean): void {\n    if (force === true) {\n      closedRead = true\n      closedWrite = true\n    }\n\n    if (closedRead && closedWrite && maConn.timeline.close == null) {\n      maConn.timeline.close = Date.now()\n    }\n  }\n\n  return maConn\n}\n", "import { PeerQueue } from '@libp2p/utils/peer-queue'\nimport { anySignal } from 'any-signal'\nimport { TypedEventEmitter, setMaxListeners } from 'main-event'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport {\n  RELAY_V2_HOP_CODEC\n} from '../constants.js'\nimport type { ComponentLogger, Libp2pEvents, Logger, Peer, PeerId, PeerInfo, PeerStore, Startable, TopologyFilter, TypedEventTarget } from '@libp2p/interface'\nimport type { ConnectionManager, RandomWalk, Registrar, TransportManager } from '@libp2p/interface-internal'\n\nexport interface RelayDiscoveryEvents {\n  'relay:discover': CustomEvent<PeerId>\n}\n\nexport interface RelayDiscoveryComponents {\n  peerStore: PeerStore\n  connectionManager: ConnectionManager\n  transportManager: TransportManager\n  registrar: Registrar\n  logger: ComponentLogger\n  randomWalk: RandomWalk\n  events: TypedEventTarget<Libp2pEvents>\n}\n\nexport interface RelayDiscoveryInit {\n  filter?: TopologyFilter\n}\n\n/**\n * ReservationManager automatically makes a circuit v2 reservation on any connected\n * peers that support the circuit v2 HOP protocol.\n */\nexport class RelayDiscovery extends TypedEventEmitter<RelayDiscoveryEvents> implements Startable {\n  private readonly components: RelayDiscoveryComponents\n  private started: boolean\n  private running: boolean\n  private topologyId?: string\n  private readonly log: Logger\n  private discoveryController: AbortController\n  private readonly filter?: TopologyFilter\n  private queue?: PeerQueue\n\n  constructor (components: RelayDiscoveryComponents, init: RelayDiscoveryInit = {}) {\n    super()\n\n    this.log = components.logger.forComponent('libp2p:circuit-relay:discover-relays')\n    this.components = components\n    this.started = false\n    this.running = false\n    this.filter = init.filter\n    this.discoveryController = new AbortController()\n    setMaxListeners(Infinity, this.discoveryController.signal)\n    this.dialPeer = this.dialPeer.bind(this)\n    this.onPeer = this.onPeer.bind(this)\n  }\n\n  isStarted (): boolean {\n    return this.started\n  }\n\n  async start (): Promise<void> {\n    // register a topology listener for when new peers are encountered\n    // that support the hop protocol\n    this.topologyId = await this.components.registrar.register(RELAY_V2_HOP_CODEC, {\n      filter: this.filter,\n      onConnect: (peerId) => {\n        this.log.trace('discovered relay %p queue (length: %d, active %d)', peerId, this.queue?.size, this.queue?.running)\n        this.safeDispatchEvent('relay:discover', { detail: peerId })\n      }\n    })\n\n    this.started = true\n  }\n\n  stop (): void {\n    if (this.topologyId != null) {\n      this.components.registrar.unregister(this.topologyId)\n    }\n\n    if (this.running) {\n      this.stopDiscovery()\n    }\n\n    this.started = false\n  }\n\n  /**\n   * Try to listen on available hop relay connections.\n   * The following order will happen while we do not have enough relays:\n   *\n   * 1. Check the metadata store for known relays, try to listen on the ones we are already connected to\n   * 2. Dial and try to listen on the peers we know that support hop but are not connected\n   * 3. Search the network - this requires a peer routing implementation to be configured but will fail gracefully\n   * 4. Dial any peers discovered - this covers when no peer routing implementation has been configured but some peer discovery mechanism is also present\n   */\n  startDiscovery (): void {\n    if (this.running) {\n      return\n    }\n\n    this.log('start discovery')\n    this.running = true\n    this.discoveryController = new AbortController()\n    setMaxListeners(Infinity, this.discoveryController.signal)\n\n    // dial any peer we discover\n    this.components.events.addEventListener('peer:discovery', this.onPeer)\n\n    Promise.resolve()\n      .then(async () => {\n        this.log('searching peer store for relays')\n\n        const peers = (await this.components.peerStore.all({\n          filters: [\n            // filter by a list of peers supporting RELAY_V2_HOP and ones we are not listening on\n            (peer) => {\n              return peer.protocols.includes(RELAY_V2_HOP_CODEC)\n            }\n          ],\n          orders: [\n            // randomize\n            () => Math.random() < 0.5 ? 1 : -1,\n            // prefer peers we've connected to in the past\n            (a, b) => {\n              const lastDialA = getLastDial(a)\n              const lastDialB = getLastDial(b)\n\n              if (lastDialA > lastDialB) {\n                return -1\n              }\n\n              if (lastDialB > lastDialA) {\n                return 1\n              }\n\n              return 0\n            }\n          ]\n        }))\n\n        for (const peer of peers) {\n          this.log.trace('found relay peer %p in peer store', peer.id)\n          this.safeDispatchEvent('relay:discover', { detail: peer.id })\n        }\n\n        this.log('found %d relay peers in peer store', peers.length)\n\n        // perform random walk and dial peers - after identify has run, the network\n        // topology will be notified of new relays\n        const queue = this.queue = new PeerQueue({\n          concurrency: 5\n        })\n\n        this.log('start random walk')\n\n        for await (const peer of this.components.randomWalk.walk({ signal: this.discoveryController.signal })) {\n          this.log.trace('found random peer %p', peer.id)\n\n          if (queue.has(peer.id)) {\n            this.log.trace('random peer %p was already in queue', peer.id)\n\n            // skip peers already in the queue\n            continue\n          }\n\n          if (this.components.connectionManager.getConnections(peer.id)?.length > 0) {\n            this.log.trace('random peer %p was already connected', peer.id)\n\n            // skip peers we are already connected to\n            continue\n          }\n\n          if (!(await this.components.connectionManager.isDialable(peer.multiaddrs))) {\n            this.log.trace('random peer %p was not dialable', peer.id, peer.multiaddrs.map(ma => ma.toString()))\n\n            // skip peers we can't dial\n            continue\n          }\n\n          if (queue.queued > 10) {\n            this.log.trace('wait for space in queue for %p', peer.id)\n\n            // pause the random walk until there is space in the queue\n            await queue.onSizeLessThan(10, {\n              signal: this.discoveryController.signal\n            })\n          }\n\n          this.log('adding random peer %p to dial queue (length: %d, active %d)', peer.id, queue.size, queue.running)\n\n          // dial the peer - this will cause identify to run and our topology to\n          // be notified and we'll attempt to create reservations\n          queue.add(this.dialPeer, {\n            peerId: peer.id,\n            signal: this.discoveryController.signal\n          })\n            .catch(err => {\n              this.log.error('error opening connection to random peer %p', peer.id, err)\n            })\n        }\n\n        this.log('stop random walk')\n\n        await queue.onIdle()\n      })\n      .catch(err => {\n        if (!this.discoveryController.signal.aborted) {\n          this.log.error('failed when finding relays on the network', err)\n        }\n      })\n  }\n\n  stopDiscovery (): void {\n    this.log('stop discovery')\n    this.running = false\n    this.discoveryController?.abort()\n    this.queue?.clear()\n\n    // stop dialing any peer we discover\n    this.components.events.removeEventListener('peer:discovery', this.onPeer)\n  }\n\n  onPeer (evt: CustomEvent<PeerInfo>): void {\n    this.log.trace('maybe dialing discovered peer %p - %e', evt.detail.id)\n\n    this.maybeDialPeer(evt)\n      .catch(err => {\n        this.log.trace('error dialing discovered peer %p - %e', evt.detail.id, err)\n      })\n  }\n\n  async maybeDialPeer (evt: CustomEvent<PeerInfo>): Promise<void> {\n    if (this.queue == null) {\n      return\n    }\n\n    const peerId = evt.detail.id\n    const multiaddrs = evt.detail.multiaddrs\n\n    if (this.queue.has(peerId)) {\n      this.log.trace('random peer %p was already in queue', peerId)\n\n      // skip peers already in the queue\n      return\n    }\n\n    if (this.components.connectionManager.getConnections(peerId)?.length > 0) {\n      this.log.trace('random peer %p was already connected', peerId)\n\n      // skip peers we are already connected to\n      return\n    }\n\n    if (!(await this.components.connectionManager.isDialable(multiaddrs))) {\n      this.log.trace('random peer %p was not dialable', peerId)\n\n      // skip peers we can't dial\n      return\n    }\n\n    this.queue?.add(this.dialPeer, {\n      peerId: evt.detail.id,\n      signal: this.discoveryController.signal\n    })\n      .catch(err => {\n        this.log.error('error opening connection to discovered peer %p', evt.detail.id, err)\n      })\n  }\n\n  async dialPeer ({ peerId, signal }: { peerId: PeerId, signal?: AbortSignal }): Promise<void> {\n    const combinedSignal = anySignal([AbortSignal.timeout(5_000), signal])\n    setMaxListeners(Infinity, combinedSignal)\n\n    try {\n      await this.components.connectionManager.openConnection(peerId, {\n        signal: combinedSignal\n      })\n    } finally {\n      combinedSignal.clear()\n    }\n  }\n}\n\n/**\n * Returns the timestamp of the last time we connected to this peer, if we've\n * not connected to them before return 0\n */\nfunction getLastDial (peer: Peer): number {\n  const lastDial = peer.metadata.get('last-dial-success')\n\n  if (lastDial == null) {\n    return 0\n  }\n\n  return new Date(uint8ArrayToString(lastDial)).getTime()\n}\n", "import { ListenError } from '@libp2p/interface'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { TypedEventEmitter, setMaxListeners } from 'main-event'\nimport { DEFAULT_RESERVATION_COMPLETION_TIMEOUT } from '../constants.js'\nimport { CircuitListen, CircuitSearch } from '../utils.js'\nimport type { RelayReservation, ReservationStore } from './reservation-store.js'\nimport type { ComponentLogger, Logger, Listener, ListenerEvents, PeerId } from '@libp2p/interface'\nimport type { AddressManager, ConnectionManager } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport interface CircuitRelayTransportListenerComponents {\n  peerId: PeerId\n  connectionManager: ConnectionManager\n  addressManager: AddressManager\n  reservationStore: ReservationStore\n  logger: ComponentLogger\n}\n\nexport interface CircuitRelayTransportListenerInit {\n  listenTimeout?: number\n}\n\nclass CircuitRelayTransportListener extends TypedEventEmitter<ListenerEvents> implements Listener {\n  private readonly connectionManager: ConnectionManager\n  private readonly addressManager: AddressManager\n  private readonly reservationStore: ReservationStore\n  private listeningAddrs: Multiaddr[]\n  private readonly log: Logger\n  private readonly listenTimeout: number\n  private reservationId?: string\n  private relay?: PeerId\n\n  constructor (components: CircuitRelayTransportListenerComponents, init: CircuitRelayTransportListenerInit = {}) {\n    super()\n\n    this.log = components.logger.forComponent('libp2p:circuit-relay:transport:listener')\n    this.connectionManager = components.connectionManager\n    this.addressManager = components.addressManager\n    this.reservationStore = components.reservationStore\n    this.listeningAddrs = []\n    this.listenTimeout = init.listenTimeout ?? DEFAULT_RESERVATION_COMPLETION_TIMEOUT\n\n    // remove listening addrs when a relay is removed\n    this.reservationStore.addEventListener('relay:removed', this._onRemoveRelayPeer)\n    this.reservationStore.addEventListener('relay:created-reservation', this._onAddRelayPeer)\n  }\n\n  _onRemoveRelayPeer = (evt: CustomEvent<RelayReservation>): void => {\n    this.log('relay removed %p our relay %p', evt.detail.relay, this.relay, this.relay?.equals(evt.detail.relay))\n\n    if (this.relay?.equals(evt.detail.relay) !== true) {\n      return\n    }\n\n    this.log('relay peer removed %p', evt.detail.relay)\n\n    this.listeningAddrs.forEach(ma => {\n      // mark as externally dialable\n      this.addressManager.removeObservedAddr(ma)\n    })\n\n    this.listeningAddrs = []\n\n    // announce listen addresses change\n    this.safeDispatchEvent('listening')\n  }\n\n  _onAddRelayPeer = (evt: CustomEvent<RelayReservation>): void => {\n    const {\n      details\n    } = evt.detail\n\n    if (details.type === 'configured') {\n      return\n    }\n\n    if (details.id !== this.reservationId) {\n      return\n    }\n\n    this.addedRelay(evt.detail)\n  }\n\n  async listen (addr: Multiaddr): Promise<void> {\n    if (CircuitSearch.exactMatch(addr)) {\n      this.log('searching for circuit relay servers')\n\n      // start relay discovery\n      this.reservationId = this.reservationStore.reserveRelay()\n    } else if (CircuitListen.exactMatch(addr)) {\n      this.log('listen on specific relay server %a', addr)\n\n      const signal = AbortSignal.timeout(this.listenTimeout)\n      setMaxListeners(Infinity, signal)\n\n      // try to make a reservation on one particular relay\n      // remove the circuit part to get the peer id of the relay\n      const relayAddr = addr.decapsulate('/p2p-circuit')\n      const relayConn = await this.connectionManager.openConnection(relayAddr, {\n        signal\n      })\n\n      if (!this.reservationStore.hasReservation(relayConn.remotePeer)) {\n        this.log('making reservation on peer %p', relayConn.remotePeer)\n        const reservation = await this.reservationStore.addRelay(relayConn.remotePeer, 'configured')\n        this.addedRelay(reservation)\n      }\n    } else {\n      throw new ListenError(`Could not listen on p2p-circuit address \"${addr}\"`)\n    }\n  }\n\n  getAddrs (): Multiaddr[] {\n    return [...this.listeningAddrs.values()].flat()\n  }\n\n  updateAnnounceAddrs (): void {\n\n  }\n\n  async close (): Promise<void> {\n    this.reservationStore.cancelReservations()\n    this.listeningAddrs = []\n\n    // remove listener\n    this.reservationStore.removeEventListener('relay:removed', this._onRemoveRelayPeer)\n\n    // announce listen addresses change\n    queueMicrotask(() => {\n      this.safeDispatchEvent('close')\n    })\n  }\n\n  private addedRelay (reservation: RelayReservation): void {\n    this.log('relay peer added %p', reservation.relay)\n\n    this.relay = reservation.relay\n\n    // add all addresses from the relay reservation\n    this.listeningAddrs = reservation.details.reservation.addrs\n      .map(buf => multiaddr(buf).encapsulate('/p2p-circuit'))\n\n    this.listeningAddrs.forEach(ma => {\n      // mark as externally dialable\n      this.addressManager.confirmObservedAddr(ma, {\n        type: 'transport'\n      })\n    })\n\n    // if that succeeded announce listen addresses change\n    queueMicrotask(() => {\n      this.safeDispatchEvent('listening')\n    })\n  }\n}\n\nexport function createListener (options: CircuitRelayTransportListenerComponents): Listener {\n  return new CircuitRelayTransportListener(options)\n}\n", "export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n", "/* @ts-self-types=\"./index.d.ts\" */\nimport { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << Math.log2(alphabet.length - 1)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step | 0\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length >= size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size | 0, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array((size |= 0)))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n", "import { ListenError } from '@libp2p/interface'\nimport { PeerMap } from '@libp2p/peer-collections'\nimport { createScalableCuckooFilter } from '@libp2p/utils/filters'\nimport { PeerQueue } from '@libp2p/utils/peer-queue'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { Circuit } from '@multiformats/multiaddr-matcher'\nimport { pbStream } from 'it-protobuf-stream'\nimport { TypedEventEmitter, setMaxListeners } from 'main-event'\nimport { nanoid } from 'nanoid'\nimport { DEFAULT_MAX_RESERVATION_QUEUE_LENGTH, DEFAULT_RESERVATION_COMPLETION_TIMEOUT, DEFAULT_RESERVATION_CONCURRENCY, KEEP_ALIVE_TAG, RELAY_V2_HOP_CODEC } from '../constants.js'\nimport { DoubleRelayError, HadEnoughRelaysError, RelayQueueFullError } from '../errors.js'\nimport { HopMessage, Status } from '../pb/index.js'\nimport { getExpirationMilliseconds } from '../utils.js'\nimport type { Reservation } from '../pb/index.js'\nimport type { AbortOptions, Libp2pEvents, ComponentLogger, Logger, PeerId, PeerStore, Startable, Metrics, Peer, Connection } from '@libp2p/interface'\nimport type { ConnectionManager } from '@libp2p/interface-internal'\nimport type { Filter } from '@libp2p/utils/filters'\nimport type { TypedEventTarget } from 'main-event'\n\n// allow refreshing a relay reservation if it will expire in the next 10 minutes\nconst REFRESH_WINDOW = (60 * 1000) * 10\n\n// try to refresh relay reservations 5 minutes before expiry\nconst REFRESH_TIMEOUT = (60 * 1000) * 5\n\n// minimum duration before which a reservation must not be refreshed\nconst REFRESH_TIMEOUT_MIN = 30 * 1000\n\nexport interface ReservationStoreComponents {\n  peerId: PeerId\n  connectionManager: ConnectionManager\n  peerStore: PeerStore\n  events: TypedEventTarget<Libp2pEvents>\n  logger: ComponentLogger\n  metrics?: Metrics\n}\n\nexport interface ReservationStoreInit {\n  /**\n   * Multiple relays may be discovered simultaneously - to prevent listening\n   * on too many relays, this value controls how many to attempt to reserve a\n   * slot on at once. If set to more than one, we may end up listening on\n   * more relays than the `maxReservations` value, but on networks with poor\n   * connectivity the user may wish to attempt to reserve on multiple relays\n   * simultaneously.\n   *\n   * @default 1\n   */\n  reservationConcurrency?: number\n\n  /**\n   * Limit the number of potential relays we will dial\n   *\n   * @default 100\n   */\n  maxReservationQueueLength?: number\n\n  /**\n   * When creating a reservation it must complete within this number of ms\n   *\n   * @default 5000\n   */\n  reservationCompletionTimeout?: number\n}\n\nexport type RelayType = 'discovered' | 'configured'\n\nexport interface DiscoveredRelayEntry {\n  timeout: ReturnType<typeof setTimeout>\n  type: 'discovered'\n  reservation: Reservation\n\n  /**\n   * Stores the id of the connection we have to the relay\n   */\n  connection: string\n\n  /**\n   * Stores the identifier returned when the reservation was requested\n   */\n  id: string\n}\n\nexport interface ConfiguredRelayEntry {\n  timeout: ReturnType<typeof setTimeout>\n  type: 'configured'\n  reservation: Reservation\n\n  /**\n   * Stores the id of the connection we have to the relay\n   */\n  connection: string\n}\n\nexport type RelayEntry = DiscoveredRelayEntry | ConfiguredRelayEntry\n\nexport interface RelayReservation {\n  relay: PeerId\n  details: RelayEntry\n}\n\nexport interface ReservationStoreEvents {\n  'relay:not-enough-relays': CustomEvent\n  'relay:found-enough-relays': CustomEvent\n  'relay:removed': CustomEvent<RelayReservation>\n  'relay:created-reservation': CustomEvent<RelayReservation>\n}\n\nexport class ReservationStore extends TypedEventEmitter<ReservationStoreEvents> implements Startable {\n  private readonly peerId: PeerId\n  private readonly connectionManager: ConnectionManager\n  private readonly peerStore: PeerStore\n  private readonly events: TypedEventTarget<Libp2pEvents>\n  private readonly reserveQueue: PeerQueue<RelayReservation>\n  private readonly reservations: PeerMap<RelayEntry>\n  private readonly pendingReservations: string[]\n  private readonly maxReservationQueueLength: number\n  private readonly reservationCompletionTimeout: number\n  private started: boolean\n  private readonly log: Logger\n  private relayFilter: Filter\n\n  constructor (components: ReservationStoreComponents, init?: ReservationStoreInit) {\n    super()\n\n    this.log = components.logger.forComponent('libp2p:circuit-relay:transport:reservation-store')\n    this.peerId = components.peerId\n    this.connectionManager = components.connectionManager\n    this.peerStore = components.peerStore\n    this.events = components.events\n    this.reservations = new PeerMap()\n    this.pendingReservations = []\n    this.maxReservationQueueLength = init?.maxReservationQueueLength ?? DEFAULT_MAX_RESERVATION_QUEUE_LENGTH\n    this.reservationCompletionTimeout = init?.reservationCompletionTimeout ?? DEFAULT_RESERVATION_COMPLETION_TIMEOUT\n    this.started = false\n    this.relayFilter = createScalableCuckooFilter(100)\n\n    // ensure we don't listen on multiple relays simultaneously\n    this.reserveQueue = new PeerQueue({\n      concurrency: init?.reservationConcurrency ?? DEFAULT_RESERVATION_CONCURRENCY,\n      metricName: 'libp2p_relay_reservation_queue',\n      metrics: components.metrics\n    })\n\n    // reservations are only valid while we are still connected to the relay.\n    // if we had a reservation opened via that connection, remove it and maybe\n    // trigger a search for new relays\n    this.events.addEventListener('connection:close', (evt) => {\n      const reservation = [...this.reservations.values()]\n        .find(reservation => reservation.connection === evt.detail.id)\n\n      if (reservation == null) {\n        return\n      }\n\n      this.#removeReservation(evt.detail.remotePeer)\n        .catch(err => {\n          this.log('could not remove relay %p - %e', evt.detail, err)\n        })\n    })\n  }\n\n  isStarted (): boolean {\n    return this.started\n  }\n\n  start (): void {\n    this.started = true\n  }\n\n  afterStart (): void {\n    // remove old relay tags\n    void Promise.resolve()\n      .then(async () => {\n        const relayPeers: Peer[] = await this.peerStore.all({\n          filters: [(peer) => {\n            return peer.tags.has(KEEP_ALIVE_TAG)\n          }]\n        })\n\n        this.log('removing tag from %d old relays', relayPeers.length)\n\n        // remove old relay tag and redial\n        await Promise.all(\n          relayPeers.map(async peer => {\n            await this.peerStore.merge(peer.id, {\n              tags: {\n                [KEEP_ALIVE_TAG]: undefined\n              }\n            })\n          })\n        )\n\n        this.log('redialing %d old relays', relayPeers.length)\n        await Promise.all(\n          relayPeers.map(async peer => this.addRelay(peer.id, 'discovered'))\n        )\n\n        this.#checkReservationCount()\n      })\n      .catch(err => {\n        this.log.error(err)\n      })\n  }\n\n  stop (): void {\n    this.reserveQueue.clear()\n    this.reservations.forEach(({ timeout }) => {\n      clearTimeout(timeout)\n    })\n    this.reservations.clear()\n    this.started = false\n  }\n\n  reserveRelay (): string {\n    const id = nanoid()\n\n    this.pendingReservations.push(id)\n\n    this.#checkReservationCount()\n\n    return id\n  }\n\n  /**\n   * If the number of current relays is beneath the configured `maxReservations`\n   * value, and the passed peer id is not our own, and we have a non-relayed\n   * connection to the remote, and the remote peer speaks the hop protocol, try\n   * to reserve a slot on the remote peer\n   */\n  async addRelay (peerId: PeerId, type: RelayType): Promise<RelayReservation> {\n    if (this.peerId.equals(peerId)) {\n      this.log.trace('not trying to use self as relay')\n      throw new ListenError('Cannot use self as relay')\n    }\n\n    if (this.reserveQueue.size > this.maxReservationQueueLength) {\n      throw new RelayQueueFullError('The reservation queue is full')\n    }\n\n    const existingJob = this.reserveQueue.find(peerId)\n\n    if (existingJob != null) {\n      this.log.trace('potential relay peer %p is already in the reservation queue', peerId)\n      return existingJob.join()\n    }\n\n    if (this.relayFilter.has(peerId.toMultihash().bytes)) {\n      throw new ListenError('The relay was previously invalid')\n    }\n\n    this.log.trace('try to reserve relay slot with %p', peerId)\n\n    return this.reserveQueue.add(async () => {\n      const start = Date.now()\n\n      try {\n        // allow refresh of an existing reservation if it is about to expire\n        const existingReservation = this.reservations.get(peerId)\n\n        if (existingReservation != null) {\n          const connections = this.connectionManager.getConnections(peerId)\n          let connected = false\n\n          if (connections.length === 0) {\n            this.log('already have relay reservation with %p but we are no longer connected', peerId)\n          }\n\n          if (connections.map(conn => conn.id).includes(existingReservation.connection)) {\n            this.log('already have relay reservation with %p and the original connection is still open', peerId)\n            connected = true\n          }\n\n          if (connected && getExpirationMilliseconds(existingReservation.reservation.expire) > REFRESH_WINDOW) {\n            this.log('already have relay reservation with %p but we are still connected and it does not expire soon', peerId)\n            return {\n              relay: peerId,\n              details: existingReservation\n            } satisfies RelayReservation\n          }\n\n          await this.#removeReservation(peerId)\n        }\n\n        if (type === 'discovered' && this.pendingReservations.length === 0) {\n          throw new HadEnoughRelaysError('Not making reservation on discovered relay because we do not need any more relays')\n        }\n\n        const signal = AbortSignal.timeout(this.reservationCompletionTimeout)\n        setMaxListeners(Infinity, signal)\n\n        const connection = await this.connectionManager.openConnection(peerId, {\n          signal\n        })\n\n        if (Circuit.matches(connection.remoteAddr)) {\n          throw new DoubleRelayError('not creating reservation over relayed connection')\n        }\n\n        const reservation = await this.#createReservation(connection, {\n          signal\n        })\n\n        const expiration = getExpirationMilliseconds(reservation.expire)\n\n        this.log('created reservation on relay peer %p, expiry date is %s', peerId, new Date(Date.now() + expiration).toString())\n\n        // sets a lower bound on the timeout, and also don't let it go over\n        // 2^31 - 1 (setTimeout will only accept signed 32 bit integers)\n        const timeoutDuration = Math.min(Math.max(expiration - REFRESH_TIMEOUT, REFRESH_TIMEOUT_MIN), Math.pow(2, 31) - 1)\n\n        const timeout = setTimeout(() => {\n          this.log('refresh reservation to relay %p', peerId)\n\n          this.addRelay(peerId, type)\n            .catch(async err => {\n              this.log.error('could not refresh reservation to relay %p - %e', peerId, err)\n              await this.#removeReservation(peerId)\n            })\n            .catch(err => {\n              this.log.error('could not remove expired reservation to relay %p - %e', peerId, err)\n            })\n        }, timeoutDuration)\n\n        let res: RelayEntry\n\n        // assign a reservation id if one was requested\n        if (type === 'discovered') {\n          const id = this.pendingReservations.pop()\n\n          if (id == null) {\n            throw new HadEnoughRelaysError('Made reservation on relay but did not need any more discovered relays')\n          }\n\n          res = {\n            timeout,\n            reservation,\n            type,\n            connection: connection.id,\n            id\n          }\n        } else {\n          res = {\n            timeout,\n            reservation,\n            type,\n            connection: connection.id\n          }\n        }\n\n        // we've managed to create a reservation successfully\n        this.reservations.set(peerId, res)\n\n        // ensure we don't close the connection to the relay\n        await this.peerStore.merge(peerId, {\n          tags: {\n            [KEEP_ALIVE_TAG]: {\n              value: 1,\n              ttl: expiration\n            }\n          }\n        })\n\n        // check to see if we have discovered enough relays\n        this.#checkReservationCount()\n\n        const result: RelayReservation = {\n          relay: peerId,\n          details: res\n        }\n\n        this.safeDispatchEvent('relay:created-reservation', {\n          detail: result\n        })\n\n        return result\n      } catch (err: any) {\n        if (!(type === 'discovered' && err.name === 'HadEnoughRelaysError')) {\n          this.log.error('could not reserve slot on %p after %dms - %e', peerId, Date.now() - start, err)\n        }\n\n        // don't try this peer again if dialing failed or they do not support\n        // the hop protocol\n        if (err.name === 'DialError' || err.name === 'UnsupportedProtocolError') {\n          this.relayFilter.add(peerId.toMultihash().bytes)\n        }\n\n        // if listening failed, remove the reservation\n        this.#removeReservation(peerId)\n          .catch(err => {\n            this.log.error('could not remove reservation on %p after reserving slot failed - %e', peerId, err)\n          })\n\n        throw err\n      }\n    }, {\n      peerId\n    })\n  }\n\n  hasReservation (peerId: PeerId): boolean {\n    return this.reservations.has(peerId)\n  }\n\n  getReservation (peerId: PeerId): Reservation | undefined {\n    return this.reservations.get(peerId)?.reservation\n  }\n\n  reservationCount (type?: RelayType): number {\n    if (type == null) {\n      return this.reservations.size\n    }\n\n    return [...this.reservations.values()].reduce((acc, curr) => {\n      if (curr.type === type) {\n        acc++\n      }\n\n      return acc\n    }, 0)\n  }\n\n  cancelReservations (): void {\n    [...this.reservations.values()].forEach(reservation => {\n      clearTimeout(reservation.timeout)\n    })\n\n    this.reservations.clear()\n  }\n\n  async #createReservation (connection: Connection, options: AbortOptions): Promise<Reservation> {\n    options.signal?.throwIfAborted()\n\n    this.log('requesting reservation from %p', connection.remotePeer)\n    const stream = await connection.newStream(RELAY_V2_HOP_CODEC, options)\n    const pbstr = pbStream(stream)\n    const hopstr = pbstr.pb(HopMessage)\n\n    this.log.trace('send RESERVE to %p', connection.remotePeer)\n    await hopstr.write({ type: HopMessage.Type.RESERVE }, options)\n\n    let response: HopMessage\n\n    try {\n      this.log.trace('reading response from %p', connection.remotePeer)\n      response = await hopstr.read(options)\n    } catch (err: any) {\n      stream.abort(err)\n      throw err\n    } finally {\n      if (stream.status !== 'closed') {\n        await stream.close(options)\n      }\n    }\n\n    this.log.trace('read response %o', response)\n\n    if (response.status === Status.OK && response.reservation != null) {\n      // check that the returned relay has the relay address - this can be\n      // omitted when requesting a reservation from a go-libp2p relay we\n      // already have a reservation on\n      const addresses = new Set<string>()\n      addresses.add(connection.remoteAddr.toString())\n\n      for (const buf of response.reservation.addrs) {\n        let ma = multiaddr(buf)\n\n        if (ma.getPeerId() == null) {\n          ma = ma.encapsulate(`/p2p/${connection.remotePeer}`)\n        }\n\n        // TODO: workaround for https://github.com/libp2p/go-libp2p/issues/3003\n        ma = multiaddr(ma.toString().replace(\n          `/p2p/${connection.remotePeer}/p2p/${connection.remotePeer}`,\n          `/p2p/${connection.remotePeer}`\n        ))\n\n        addresses.add(ma.toString())\n      }\n\n      response.reservation.addrs = [...addresses].map(str => multiaddr(str).bytes)\n\n      return response.reservation\n    }\n\n    const errMsg = `reservation failed with status ${response.status ?? 'undefined'}`\n    this.log.error(errMsg)\n\n    throw new Error(errMsg)\n  }\n\n  /**\n   * Remove listen relay\n   */\n  async #removeReservation (peerId: PeerId): Promise<void> {\n    const reservation = this.reservations.get(peerId)\n\n    if (reservation == null) {\n      return\n    }\n\n    this.log('removing relay reservation with %p from local store', peerId)\n    clearTimeout(reservation.timeout)\n    this.reservations.delete(peerId)\n\n    // discover a new relay for this discovery request\n    if (reservation.type === 'discovered') {\n      this.pendingReservations.push(\n        reservation.id\n      )\n    }\n\n    // untag the relay\n    await this.peerStore.merge(peerId, {\n      tags: {\n        [KEEP_ALIVE_TAG]: undefined\n      }\n    })\n\n    this.safeDispatchEvent('relay:removed', {\n      detail: {\n        relay: peerId,\n        details: reservation\n      }\n    })\n\n    // maybe trigger discovery of new relays\n    this.#checkReservationCount()\n  }\n\n  #checkReservationCount (): void {\n    if (this.pendingReservations.length === 0) {\n      this.log.trace('have discovered enough relays')\n      this.reserveQueue.clear()\n      this.safeDispatchEvent('relay:found-enough-relays')\n\n      return\n    }\n\n    this.relayFilter = createScalableCuckooFilter(100)\n    this.log('not discovered enough relays %d/%d', this.reservations.size, this.pendingReservations.length)\n    this.safeDispatchEvent('relay:not-enough-relays')\n  }\n}\n", "import { DialError, InvalidMessageError, serviceCapabilities, serviceDependencies, start, stop, transportSymbol } from '@libp2p/interface'\nimport { peerFilter } from '@libp2p/peer-collections'\nimport { peerIdFromMultihash, peerIdFromString } from '@libp2p/peer-id'\nimport { streamToMaConnection } from '@libp2p/utils/stream-to-ma-conn'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { Circuit } from '@multiformats/multiaddr-matcher'\nimport { pbStream } from 'it-protobuf-stream'\nimport { setMaxListeners } from 'main-event'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { CustomProgressEvent } from 'progress-events'\nimport { CIRCUIT_PROTO_CODE, DEFAULT_DISCOVERY_FILTER_ERROR_RATE, DEFAULT_DISCOVERY_FILTER_SIZE, MAX_CONNECTIONS, RELAY_V2_HOP_CODEC, RELAY_V2_STOP_CODEC } from '../constants.js'\nimport { StopMessage, HopMessage, Status } from '../pb/index.js'\nimport { CircuitListen, CircuitSearch, LimitTracker } from '../utils.js'\nimport { RelayDiscovery } from './discovery.js'\nimport { createListener } from './listener.js'\nimport { ReservationStore } from './reservation-store.js'\nimport type { CircuitRelayTransportComponents, CircuitRelayTransportInit } from './index.js'\nimport type { Transport, CreateListenerOptions, Listener, Upgrader, ComponentLogger, Logger, Connection, Stream, ConnectionGater, PeerId, PeerStore, OutboundConnectionUpgradeEvents, DialTransportOptions, OpenConnectionProgressEvents, IncomingStreamData } from '@libp2p/interface'\nimport type { AddressManager, ConnectionManager, Registrar, TransportManager } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { ProgressEvent } from 'progress-events'\n\nconst isValidStop = (request: StopMessage): request is Required<StopMessage> => {\n  if (request.peer == null) {\n    return false\n  }\n\n  try {\n    request.peer.addrs.forEach(multiaddr)\n  } catch {\n    return false\n  }\n\n  return true\n}\n\nconst defaults = {\n  maxInboundStopStreams: MAX_CONNECTIONS,\n  maxOutboundStopStreams: MAX_CONNECTIONS,\n  stopTimeout: 30000\n}\n\nexport type CircuitRelayDialEvents =\n  OutboundConnectionUpgradeEvents |\n  OpenConnectionProgressEvents |\n  ProgressEvent<'circuit-relay:open-connection'> |\n  ProgressEvent<'circuit-relay:reuse-connection'> |\n  ProgressEvent<'circuit-relay:open-hop-stream'> |\n  ProgressEvent<'circuit-relay:write-connect-message'> |\n  ProgressEvent<'circuit-relay:read-connect-response'>\n\nexport class CircuitRelayTransport implements Transport<CircuitRelayDialEvents> {\n  private readonly discovery?: RelayDiscovery\n  private readonly registrar: Registrar\n  private readonly peerStore: PeerStore\n  private readonly connectionManager: ConnectionManager\n  private readonly transportManager: TransportManager\n  private readonly peerId: PeerId\n  private readonly upgrader: Upgrader\n  private readonly addressManager: AddressManager\n  private readonly connectionGater: ConnectionGater\n  public readonly reservationStore: ReservationStore\n  private readonly logger: ComponentLogger\n  private readonly maxInboundStopStreams: number\n  private readonly maxOutboundStopStreams?: number\n  private started: boolean\n  private readonly log: Logger\n  private shutdownController: AbortController\n\n  constructor (components: CircuitRelayTransportComponents, init: CircuitRelayTransportInit = {}) {\n    this.log = components.logger.forComponent('libp2p:circuit-relay:transport')\n    this.registrar = components.registrar\n    this.peerStore = components.peerStore\n    this.connectionManager = components.connectionManager\n    this.transportManager = components.transportManager\n    this.logger = components.logger\n    this.peerId = components.peerId\n    this.upgrader = components.upgrader\n    this.addressManager = components.addressManager\n    this.connectionGater = components.connectionGater\n    this.maxInboundStopStreams = init.maxInboundStopStreams ?? defaults.maxInboundStopStreams\n    this.maxOutboundStopStreams = init.maxOutboundStopStreams ?? defaults.maxOutboundStopStreams\n    this.shutdownController = new AbortController()\n\n    this.discovery = new RelayDiscovery(components, {\n      filter: init.discoveryFilter ?? peerFilter(DEFAULT_DISCOVERY_FILTER_SIZE, DEFAULT_DISCOVERY_FILTER_ERROR_RATE)\n    })\n    this.discovery.addEventListener('relay:discover', (evt) => {\n      this.reservationStore.addRelay(evt.detail, 'discovered')\n        .catch(err => {\n          if (err.name !== 'HadEnoughRelaysError' && err.name !== 'RelayQueueFullError') {\n            this.log.error('could not add discovered relay %p', evt.detail, err)\n          }\n        })\n    })\n    this.reservationStore = new ReservationStore(components, init)\n    this.reservationStore.addEventListener('relay:not-enough-relays', () => {\n      this.discovery?.startDiscovery()\n    })\n    this.reservationStore.addEventListener('relay:found-enough-relays', () => {\n      this.discovery?.stopDiscovery()\n    })\n\n    this.started = false\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/circuit-relay-v2-transport'\n\n  readonly [serviceCapabilities]: string[] = [\n    '@libp2p/transport',\n    '@libp2p/circuit-relay-v2-transport'\n  ]\n\n  get [serviceDependencies] (): string[] {\n    // we only need identify if discovery is enabled\n    if (this.discovery != null) {\n      return [\n        '@libp2p/identify'\n      ]\n    }\n\n    return []\n  }\n\n  readonly [transportSymbol] = true\n\n  isStarted (): boolean {\n    return this.started\n  }\n\n  async start (): Promise<void> {\n    this.shutdownController = new AbortController()\n    setMaxListeners(Infinity, this.shutdownController.signal)\n\n    await this.registrar.handle(RELAY_V2_STOP_CODEC, (data) => {\n      const signal = this.upgrader.createInboundAbortSignal(this.shutdownController.signal)\n\n      void this.onStop(data, signal)\n        .catch(err => {\n          this.log.error('error while handling STOP protocol', err)\n          data.stream.abort(err)\n        })\n        .finally(() => {\n          signal.clear()\n        })\n    }, {\n      maxInboundStreams: this.maxInboundStopStreams,\n      maxOutboundStreams: this.maxOutboundStopStreams,\n      runOnLimitedConnection: true\n    })\n\n    await start(this.discovery, this.reservationStore)\n\n    this.started = true\n  }\n\n  async stop (): Promise<void> {\n    this.shutdownController.abort()\n    await stop(this.discovery, this.reservationStore)\n    await this.registrar.unhandle(RELAY_V2_STOP_CODEC)\n\n    this.started = false\n  }\n\n  /**\n   * Dial a peer over a relay\n   */\n  async dial (ma: Multiaddr, options: DialTransportOptions<CircuitRelayDialEvents>): Promise<Connection> {\n    if (ma.protoCodes().filter(code => code === CIRCUIT_PROTO_CODE).length !== 1) {\n      const errMsg = 'Invalid circuit relay address'\n      this.log.error(errMsg, ma)\n      throw new DialError(errMsg)\n    }\n\n    // Check the multiaddr to see if it contains a relay and a destination peer\n    const addrs = ma.toString().split('/p2p-circuit')\n    const relayAddr = multiaddr(addrs[0])\n    const destinationAddr = multiaddr(addrs[addrs.length - 1])\n    const relayId = relayAddr.getPeerId()\n    const destinationId = destinationAddr.getPeerId()\n\n    if (relayId == null || destinationId == null) {\n      const errMsg = `ircuit relay dial to ${ma.toString()} failed as address did not have both relay and destination PeerIDs`\n      this.log.error(`c${errMsg}`)\n      throw new DialError(`C${errMsg}`)\n    }\n\n    const relayPeer = peerIdFromString(relayId)\n    const destinationPeer = peerIdFromString(destinationId)\n\n    const relayConnections = this.connectionManager.getConnections(relayPeer)\n    let relayConnection = relayConnections[0]\n\n    if (relayConnection == null) {\n      await this.peerStore.merge(relayPeer, {\n        multiaddrs: [relayAddr]\n      })\n\n      options.onProgress?.(new CustomProgressEvent('circuit-relay:open-connection'))\n      relayConnection = await this.connectionManager.openConnection(relayPeer, options)\n    } else {\n      options.onProgress?.(new CustomProgressEvent('circuit-relay:reuse-connection'))\n    }\n\n    let stream: Stream | undefined\n\n    try {\n      options.onProgress?.(new CustomProgressEvent('circuit-relay:open-hop-stream'))\n      stream = await relayConnection.newStream(RELAY_V2_HOP_CODEC, options)\n\n      const pbstr = pbStream(stream)\n      const hopstr = pbstr.pb(HopMessage)\n\n      options.onProgress?.(new CustomProgressEvent('circuit-relay:write-connect-message'))\n      await hopstr.write({\n        type: HopMessage.Type.CONNECT,\n        peer: {\n          id: destinationPeer.toMultihash().bytes,\n          addrs: [multiaddr(destinationAddr).bytes]\n        }\n      }, options)\n\n      options.onProgress?.(new CustomProgressEvent('circuit-relay:read-connect-response'))\n      const status = await hopstr.read(options)\n\n      if (status.status !== Status.OK) {\n        throw new InvalidMessageError(`failed to connect via relay with status ${status?.status?.toString() ?? 'undefined'}`)\n      }\n\n      const limits = new LimitTracker(status.limit)\n\n      const maConn = streamToMaConnection({\n        stream: pbstr.unwrap(),\n        remoteAddr: ma,\n        localAddr: relayAddr.encapsulate(`/p2p-circuit/p2p/${this.peerId.toString()}`),\n        logger: this.logger,\n        onDataRead: limits.onData,\n        onDataWrite: limits.onData\n      })\n\n      this.log('new outbound relayed connection %a', maConn.remoteAddr)\n\n      return await this.upgrader.upgradeOutbound(maConn, {\n        ...options,\n        limits: limits.getLimits()\n      })\n    } catch (err: any) {\n      this.log.error('circuit relay dial to destination %p via relay %p failed', destinationPeer, relayPeer, err)\n      stream?.abort(err)\n\n      throw err\n    }\n  }\n\n  /**\n   * Create a listener\n   */\n  createListener (options: CreateListenerOptions): Listener {\n    return createListener({\n      peerId: this.peerId,\n      connectionManager: this.connectionManager,\n      addressManager: this.addressManager,\n      reservationStore: this.reservationStore,\n      logger: this.logger\n    })\n  }\n\n  /**\n   * Filter check for all Multiaddrs that this transport can listen on\n   */\n  listenFilter (multiaddrs: Multiaddr[]): Multiaddr[] {\n    multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs]\n\n    return multiaddrs.filter((ma) => {\n      return CircuitListen.exactMatch(ma) || CircuitSearch.exactMatch(ma)\n    })\n  }\n\n  /**\n   * Filter check for all Multiaddrs that this transport can dial\n   */\n  dialFilter (multiaddrs: Multiaddr[]): Multiaddr[] {\n    multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs]\n\n    return multiaddrs.filter((ma) => {\n      return Circuit.exactMatch(ma)\n    })\n  }\n\n  /**\n   * An incoming STOP request means a remote peer wants to dial us via a relay\n   */\n  async onStop ({ connection, stream }: IncomingStreamData, signal: AbortSignal): Promise<void> {\n    if (!this.reservationStore.hasReservation(connection.remotePeer)) {\n      try {\n        this.log('dialed via relay we did not have a reservation on, start listening on that relay address')\n        await this.transportManager.listen([connection.remoteAddr.encapsulate('/p2p-circuit')])\n      } catch (err: any) {\n        // failed to refresh our hitherto unknown relay reservation but allow the connection attempt anyway\n        this.log.error('failed to listen on a relay peer we were dialed via but did not have a reservation on', err)\n      }\n    }\n\n    const pbstr = pbStream(stream).pb(StopMessage)\n    const request = await pbstr.read({\n      signal\n    })\n\n    this.log('new circuit relay v2 stop stream from %p with type %s', connection.remotePeer, request.type)\n\n    if (request?.type === undefined) {\n      this.log.error('type was missing from circuit v2 stop protocol request from %s', connection.remotePeer)\n      await pbstr.write({ type: StopMessage.Type.STATUS, status: Status.MALFORMED_MESSAGE }, {\n        signal\n      })\n      await stream.close()\n      return\n    }\n\n    // Validate the STOP request has the required input\n    if (request.type !== StopMessage.Type.CONNECT) {\n      this.log.error('invalid stop connect request via peer %p', connection.remotePeer)\n      await pbstr.write({ type: StopMessage.Type.STATUS, status: Status.UNEXPECTED_MESSAGE }, {\n        signal\n      })\n      await stream.close()\n      return\n    }\n\n    if (!isValidStop(request)) {\n      this.log.error('invalid stop connect request via peer %p', connection.remotePeer)\n      await pbstr.write({ type: StopMessage.Type.STATUS, status: Status.MALFORMED_MESSAGE }, {\n        signal\n      })\n      await stream.close({\n        signal\n      })\n      return\n    }\n\n    const remotePeerId = peerIdFromMultihash(Digest.decode(request.peer.id))\n\n    if ((await this.connectionGater.denyInboundRelayedConnection?.(connection.remotePeer, remotePeerId)) === true) {\n      this.log.error('connection gater denied inbound relayed connection from %p', connection.remotePeer)\n      await pbstr.write({ type: StopMessage.Type.STATUS, status: Status.PERMISSION_DENIED }, {\n        signal\n      })\n      await stream.close({\n        signal\n      })\n      return\n    }\n\n    this.log.trace('sending success response to %p', connection.remotePeer)\n    await pbstr.write({ type: StopMessage.Type.STATUS, status: Status.OK }, {\n      signal\n    })\n\n    const limits = new LimitTracker(request.limit)\n    const remoteAddr = connection.remoteAddr.encapsulate(`/p2p-circuit/p2p/${remotePeerId.toString()}`)\n    const localAddr = this.addressManager.getAddresses()[0]\n    const maConn = streamToMaConnection({\n      stream: pbstr.unwrap().unwrap(),\n      remoteAddr,\n      localAddr,\n      logger: this.logger,\n      onDataRead: limits.onData,\n      onDataWrite: limits.onData\n    })\n\n    this.log('new inbound relayed connection %a', maConn.remoteAddr)\n    await this.upgrader.upgradeInbound(maConn, {\n      limits: limits.getLimits(),\n      signal\n    })\n    this.log('%s connection %a upgraded', 'inbound', maConn.remoteAddr)\n  }\n}\n", "import { CircuitRelayTransport } from './transport.js'\nimport type { RelayDiscoveryComponents } from './discovery.js'\nimport type { ReservationStoreInit } from './reservation-store.js'\nimport type { Transport, Upgrader, Libp2pEvents, ConnectionGater, PeerId, TopologyFilter } from '@libp2p/interface'\nimport type { AddressManager, Registrar } from '@libp2p/interface-internal'\nimport type { TypedEventTarget } from 'main-event'\n\nexport interface CircuitRelayTransportComponents extends RelayDiscoveryComponents {\n  peerId: PeerId\n  registrar: Registrar\n  upgrader: Upgrader\n  addressManager: AddressManager\n  connectionGater: ConnectionGater\n  events: TypedEventTarget<Libp2pEvents>\n}\n\n/**\n * RelayConfig configures the circuit v2 relay transport.\n */\nexport interface CircuitRelayTransportInit extends ReservationStoreInit {\n  /**\n   * An optional filter used to prevent duplicate attempts to reserve relay\n   * slots on the same peer\n   */\n  discoveryFilter?: TopologyFilter\n\n  /**\n   * The maximum number of simultaneous STOP inbound streams that can be open at\n   * once - each inbound relayed connection uses a STOP stream\n   *\n   * @default 300\n   */\n  maxInboundStopStreams?: number\n\n  /**\n   * The maximum number of simultaneous STOP outbound streams that can be open\n   * at once. If this transport is used along with the relay server these\n   * settings should be set to the same value\n   *\n   * @default 300\n   */\n  maxOutboundStopStreams?: number\n\n  /**\n   * Incoming STOP requests (e.g. when a remote peer wants to dial us via a\n   * relay) must finish the initial protocol negotiation within this timeout in\n   * ms\n   *\n   * @deprecated Configure `connectionManager.inboundUpgradeTimeout` instead\n   */\n  stopTimeout?: number\n\n  /**\n   * When creating a reservation it must complete within this number of ms\n   *\n   * @default 10_000\n   */\n  reservationCompletionTimeout?: number\n}\n\nexport function circuitRelayTransport (init: CircuitRelayTransportInit = {}): (components: CircuitRelayTransportComponents) => Transport {\n  return (components) => {\n    return new CircuitRelayTransport(components, init)\n  }\n}\n", "import type { Matcher, MultiaddrMatcher } from './index.js'\nimport type { Multiaddr, Component } from '@multiformats/multiaddr'\n\n/**\n * Matches a multiaddr component with the specified code but no value\n */\nexport const code = (code: number): Matcher => {\n  return {\n    match: (vals) => {\n      const component = vals[0]\n\n      if (component == null) {\n        return false\n      }\n\n      if (component.code !== code) {\n        return false\n      }\n\n      if (component.value != null) {\n        return false\n      }\n\n      return vals.slice(1)\n    }\n  }\n}\n\n/**\n * Matches a multiaddr component with the specified code and value. If the value\n * is omitted any non-undefined value is matched.\n */\nexport const value = (code: number, value?: string): Matcher => {\n  return {\n    match: (vals) => {\n      const component = vals[0]\n\n      if (component?.code !== code) {\n        return false\n      }\n\n      if (component.value == null) {\n        return false\n      }\n\n      if (value != null && component.value !== value) {\n        return false\n      }\n\n      return vals.slice(1)\n    }\n  }\n}\n\n/**\n * An optional matcher\n */\nexport const optional = (matcher: Matcher): Matcher => {\n  return {\n    match: (vals) => {\n      const result = matcher.match(vals)\n\n      if (result === false) {\n        return vals\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Matches any one of the passed matches\n */\nexport const or = (...matchers: Matcher[]): Matcher => {\n  return {\n    match: (vals) => {\n      let matches: Component[] | undefined\n\n      for (const matcher of matchers) {\n        const result = matcher.match(vals)\n\n        // no match\n        if (result === false) {\n          continue\n        }\n\n        // choose greediest matcher\n        if (matches == null || result.length < matches.length) {\n          matches = result\n        }\n      }\n\n      if (matches == null) {\n        return false\n      }\n\n      return matches\n    }\n  }\n}\n\n/**\n * Matches all of the passed matchers\n */\nexport const and = (...matchers: Matcher[]): Matcher => {\n  return {\n    match: (vals) => {\n      for (const matcher of matchers) {\n        // pass what's left of the array\n        const result = matcher.match(vals)\n\n        // no match\n        if (result === false) {\n          return false\n        }\n\n        vals = result\n      }\n\n      return vals\n    }\n  }\n}\n\n/**\n * Create a multiaddr matcher from the passed component matchers\n */\nexport function fmt (...matchers: Matcher[]): MultiaddrMatcher {\n  function match (ma?: Multiaddr): Component[] | false {\n    if (ma == null) {\n      return false\n    }\n\n    let parts = ma.getComponents()\n\n    for (const matcher of matchers) {\n      const result = matcher.match(parts)\n\n      if (result === false) {\n        return false\n      }\n\n      parts = result\n    }\n\n    return parts\n  }\n\n  function matches (ma?: Multiaddr): boolean {\n    const result = match(ma)\n\n    return result !== false\n  }\n\n  function exactMatch (ma?: Multiaddr): boolean {\n    const result = match(ma)\n\n    if (result === false) {\n      return false\n    }\n\n    return result.length === 0\n  }\n\n  return {\n    matchers,\n    matches,\n    exactMatch\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * This module exports various matchers that can be used to infer the type of a\n * passed multiaddr.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/dnsaddr/example.org')\n *\n * DNS.matches(ma) // true - this is a multiaddr with a DNS address at the start\n * ```\n *\n * @example\n *\n * The default matching behaviour ignores any subsequent tuples in the multiaddr.\n * If you want stricter matching you can use `.exactMatch`:\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS, Circuit } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/dnsaddr/example.org/p2p/QmFoo/p2p-circuit/p2p/QmBar')\n *\n * DNS.exactMatch(ma) // false - this address has extra tuples after the DNS component\n * Circuit.matches(ma) // true\n * Circuit.exactMatch(ma) // true - the extra tuples are circuit relay related\n * ```\n */\n\nimport { CODE_P2P, CODE_DNS4, CODE_DNS6, CODE_DNSADDR, CODE_DNS, CODE_IP4, CODE_IP6, CODE_TCP, CODE_UDP, CODE_QUIC, CODE_QUIC_V1, CODE_WS, CODE_WSS, CODE_TLS, CODE_SNI, CODE_WEBRTC_DIRECT, CODE_CERTHASH, CODE_WEBTRANSPORT, CODE_P2P_CIRCUIT, CODE_WEBRTC, CODE_HTTP, CODE_UNIX, CODE_HTTPS, CODE_MEMORY, CODE_IP6ZONE, CODE_IPCIDR } from '@multiformats/multiaddr'\nimport { and, or, optional, fmt, code, value } from './utils.js'\nimport type { Multiaddr, Component } from '@multiformats/multiaddr'\n\n/**\n * A matcher accepts multiaddr components and either fails to match and returns\n * false or returns a sublist of unmatched components\n */\nexport interface Matcher {\n  match(parts: Component[]): Component[] | false\n}\n\n/**\n * A MultiaddrMatcher allows interpreting a multiaddr as a certain type of\n * multiaddr\n */\nexport interface MultiaddrMatcher {\n  /**\n   * The matchers that make up this MultiaddrMatcher - useful if you want to\n   * make your own custom matchers\n   */\n  matchers: Matcher[]\n\n  /**\n   * Returns true if the passed multiaddr can be treated as this type of\n   * multiaddr\n   */\n  matches(ma?: Multiaddr): boolean\n\n  /**\n   * Returns true if the passed multiaddr terminates as this type of\n   * multiaddr\n   */\n  exactMatch(ma?: Multiaddr): boolean\n}\n\n/**\n * Matches PeerId addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { PEER_ID } from '@multiformats/multiaddr-matcher'\n *\n * PEER_ID.matches(multiaddr('/p2p/Qmfoo')) // true\n * PEER_ID.matches(multiaddr('/ipfs/Qmfoo')) // true\n * ```\n */\nconst _PEER_ID = value(CODE_P2P)\n\nexport const PEER_ID = fmt(_PEER_ID)\n\n/**\n * DNS matchers\n */\nconst _DNS4 = value(CODE_DNS4)\nconst _DNS6 = value(CODE_DNS6)\nconst _DNSADDR = value(CODE_DNSADDR)\nconst _DNS = value(CODE_DNS)\n\n/**\n * Matches dns4 addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS4 } from '@multiformats/multiaddr-matcher'\n *\n * DNS4.matches(multiaddr('/dns4/example.org')) // true\n * ```\n */\nexport const DNS4 = fmt(_DNS4, optional(value(CODE_P2P)))\n\n/**\n * Matches dns6 addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS6 } from '@multiformats/multiaddr-matcher'\n *\n * DNS6.matches(multiaddr('/dns6/example.org')) // true\n * ```\n */\nexport const DNS6 = fmt(_DNS6, optional(value(CODE_P2P)))\n\n/**\n * Matches dnsaddr addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNSADDR } from '@multiformats/multiaddr-matcher'\n *\n * DNSADDR.matches(multiaddr('/dnsaddr/example.org')) // true\n * DNSADDR.matches(multiaddr('/dnsaddr/example.org/p2p/Qmfoo')) // true\n * ```\n */\nexport const DNSADDR = fmt(_DNSADDR, optional(value(CODE_P2P)))\n\n/**\n * Matches any dns address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS } from '@multiformats/multiaddr-matcher'\n *\n * DNS.matches(multiaddr('/dnsaddr/example.org')) // true\n * DNS.matches(multiaddr('/dns4/example.org')) // true\n * DNS.matches(multiaddr('/dns6/example.org')) // true\n * DNS.matches(multiaddr('/dns6/example.org/p2p/Qmfoo')) // true\n * ```\n */\nexport const DNS = fmt(or(_DNS, _DNSADDR, _DNS4, _DNS6), optional(value(CODE_P2P)))\n\nconst _IP4 = and(\n  value(CODE_IP4),\n  optional(value(CODE_IPCIDR))\n)\nconst _IP6 = and(\n  optional(value(CODE_IP6ZONE)),\n  value(CODE_IP6),\n  optional(value(CODE_IPCIDR))\n)\nconst _IP = or(_IP4, _IP6)\n\nconst _IP_OR_DOMAIN = or(_IP, _DNS, _DNS4, _DNS6, _DNSADDR)\n\n/**\n * A matcher for addresses that start with IP or DNS tuples.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP_OR_DOMAIN } from '@multiformats/multiaddr-matcher'\n *\n * IP_OR_DOMAIN.matches(multiaddr('/ip4/123.123.123.123')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/ip4/123.123.123.123/p2p/QmFoo')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/dns/example.com/p2p/QmFoo')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/p2p/QmFoo')) // false\n * ```\n */\nexport const IP_OR_DOMAIN = fmt(or(_IP, and(or(_DNS, _DNSADDR, _DNS4, _DNS6), optional(value(CODE_P2P)))))\n\n/**\n * Matches ip4 addresses.\n *\n * Use {@link IP IP} instead to match any ip4/ip6 address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP4 } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/ip4/123.123.123.123')\n *\n * IP4.matches(ma) // true\n * ```\n */\nexport const IP4 = fmt(_IP4)\n\n/**\n * Matches ip6 addresses.\n *\n * Use {@link IP IP} instead to match any ip4/ip6 address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP6 } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/ip6/fe80::1cc1:a3b8:322f:cf22')\n *\n * IP6.matches(ma) // true\n * ```\n */\nexport const IP6 = fmt(_IP6)\n\n/**\n * Matches ip4 or ip6 addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP } from '@multiformats/multiaddr-matcher'\n *\n * IP.matches(multiaddr('/ip4/123.123.123.123')) // true\n * IP.matches(multiaddr('/ip6/fe80::1cc1:a3b8:322f:cf22')) // true\n * ```\n */\nexport const IP = fmt(_IP)\n\nconst _TCP = and(_IP_OR_DOMAIN, value(CODE_TCP))\nconst _UDP = and(_IP_OR_DOMAIN, value(CODE_UDP))\n\n/**\n * Matches TCP addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { TCP } from '@multiformats/multiaddr-matcher'\n *\n * TCP.matches(multiaddr('/ip4/123.123.123.123/tcp/1234')) // true\n * ```\n */\nexport const TCP = fmt(and(_TCP, optional(value(CODE_P2P))))\n\n/**\n * Matches UDP addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { UDP } from '@multiformats/multiaddr-matcher'\n *\n * UDP.matches(multiaddr('/ip4/123.123.123.123/udp/1234')) // true\n * ```\n */\nexport const UDP = fmt(_UDP)\n\nconst _QUIC = and(_UDP, code(CODE_QUIC), optional(value(CODE_P2P)))\nconst _QUIC_V1 = and(_UDP, code(CODE_QUIC_V1), optional(value(CODE_P2P)))\n\nconst QUIC_V0_OR_V1 = or(_QUIC, _QUIC_V1)\n\n/**\n * Matches QUIC addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { QUIC } from '@multiformats/multiaddr-matcher'\n *\n * QUIC.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic')) // true\n * ```\n */\nexport const QUIC = fmt(_QUIC)\n\n/**\n * Matches QUICv1 addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { QUIC_V1 } from '@multiformats/multiaddr-matcher'\n *\n * QUIC_V1.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic-v1')) // true\n * ```\n */\nexport const QUIC_V1 = fmt(_QUIC_V1)\n\nconst _WEB = or(\n  _IP_OR_DOMAIN,\n  _TCP,\n  _UDP,\n  _QUIC,\n  _QUIC_V1\n)\n\nconst _WebSockets = or(\n  and(_WEB, code(CODE_WS), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches WebSocket addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebSockets } from '@multiformats/multiaddr-matcher'\n *\n * WebSockets.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/ws')) // true\n * ```\n */\nexport const WebSockets = fmt(_WebSockets)\n\nconst _WebSocketsSecure = or(\n  and(_WEB, code(CODE_WSS), optional(value(CODE_P2P))),\n  and(_WEB, code(CODE_TLS), optional(value(CODE_SNI)), code(CODE_WS), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches secure WebSocket addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebSocketsSecure } from '@multiformats/multiaddr-matcher'\n *\n * WebSocketsSecure.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/wss')) // true\n * ```\n */\nexport const WebSocketsSecure = fmt(_WebSocketsSecure)\n\nconst _WebRTCDirect = and(_UDP, code(CODE_WEBRTC_DIRECT), optional(value(CODE_CERTHASH)), optional(value(CODE_CERTHASH)), optional(value(CODE_P2P)))\n\n/**\n * Matches WebRTC-direct addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTCDirect } from '@multiformats/multiaddr-matcher'\n *\n * WebRTCDirect.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmFoo/webrtc-direct/certhash/u....')) // true\n * ```\n */\nexport const WebRTCDirect = fmt(_WebRTCDirect)\n\nconst _WebTransport = and(_QUIC_V1, code(CODE_WEBTRANSPORT), optional(value(CODE_CERTHASH)), optional(value(CODE_CERTHASH)), optional(value(CODE_P2P)))\n\n/**\n * Matches WebTransport addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTCDirect } from '@multiformats/multiaddr-matcher'\n *\n * WebRTCDirect.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic-v1/webtransport/certhash/u..../certhash/u..../p2p/QmFoo')) // true\n * ```\n */\nexport const WebTransport = fmt(_WebTransport)\n\nconst _P2P = or(\n  _WebSockets,\n  _WebSocketsSecure,\n  and(_TCP, optional(value(CODE_P2P))),\n  and(QUIC_V0_OR_V1, optional(value(CODE_P2P))),\n  and(_IP_OR_DOMAIN, optional(value(CODE_P2P))),\n  _WebRTCDirect,\n  _WebTransport,\n  value(CODE_P2P)\n)\n\n/**\n * Matches peer addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { P2P } from '@multiformats/multiaddr-matcher'\n *\n * P2P.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmFoo')) // true\n * ```\n */\nexport const P2P = fmt(_P2P)\n\nconst _Circuit = and(_P2P, code(CODE_P2P_CIRCUIT), value(CODE_P2P))\n\n/**\n * Matches circuit relay addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Circuit } from '@multiformats/multiaddr-matcher'\n *\n * Circuit.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmRelay/p2p-circuit/p2p/QmTarget')) // true\n * ```\n */\nexport const Circuit = fmt(_Circuit)\n\nconst _WebRTC = or(\n  and(_P2P, code(CODE_P2P_CIRCUIT), code(CODE_WEBRTC), optional(value(CODE_P2P))),\n  and(_P2P, code(CODE_WEBRTC), optional(value(CODE_P2P))),\n  and(code(CODE_WEBRTC), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches WebRTC addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTC } from '@multiformats/multiaddr-matcher'\n *\n * WebRTC.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmRelay/p2p-circuit/webrtc/p2p/QmTarget')) // true\n * ```\n */\nexport const WebRTC = fmt(_WebRTC)\n\nconst _HTTP = or(\n  and(_IP_OR_DOMAIN, value(CODE_TCP), code(CODE_HTTP), optional(value(CODE_P2P))),\n  and(_IP_OR_DOMAIN, code(CODE_HTTP), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches HTTP addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { HTTP } from '@multiformats/multiaddr-matcher'\n *\n * HTTP.matches(multiaddr('/dns/example.org/http')) // true\n * ```\n */\nexport const HTTP = fmt(_HTTP)\n\nconst _HTTPS = and(_IP_OR_DOMAIN, or(\n  and(value(CODE_TCP, '443'), code(CODE_HTTP)),\n  and(value(CODE_TCP), code(CODE_HTTPS)),\n  and(value(CODE_TCP), code(CODE_TLS), code(CODE_HTTP)),\n  and(code(CODE_TLS), code(CODE_HTTP)),\n  code(CODE_TLS),\n  code(CODE_HTTPS)\n),\noptional(value(CODE_P2P))\n)\n\n/**\n * Matches HTTPS addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { HTTP } from '@multiformats/multiaddr-matcher'\n *\n * HTTP.matches(multiaddr('/dns/example.org/tls/http')) // true\n * ```\n */\nexport const HTTPS = fmt(_HTTPS)\n\nconst _Memory = or(\n  and(value(CODE_MEMORY), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches Memory addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Memory } from '@multiformats/multiaddr-matcher'\n *\n * Memory.matches(multiaddr('/memory/0xDEADBEEF')) // true\n * ```\n */\nexport const Memory = fmt(_Memory)\n\nconst _Unix = or(\n  and(value(CODE_UNIX), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches Unix addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Unix } from '@multiformats/multiaddr-matcher'\n *\n * Unix.matches(multiaddr('/unix/%2Fpath%2Fto%2Funix.socket')) // true\n * ```\n */\nexport const Unix = fmt(_Unix)\n", "import { decodeMessage, encodeMessage, enumeration, MaxLengthError, message } from 'protons-runtime'\nimport type { Codec, DecodeOptions } from 'protons-runtime'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface HolePunch {\n  type?: HolePunch.Type\n  observedAddresses: Uint8Array[]\n}\n\nexport namespace HolePunch {\n  export enum Type {\n    UNUSED = 'UNUSED',\n    CONNECT = 'CONNECT',\n    SYNC = 'SYNC'\n  }\n\n  enum __TypeValues {\n    UNUSED = 0,\n    CONNECT = 100,\n    SYNC = 300\n  }\n\n  export namespace Type {\n    export const codec = (): Codec<Type> => {\n      return enumeration<Type>(__TypeValues)\n    }\n  }\n\n  let _codec: Codec<HolePunch>\n\n  export const codec = (): Codec<HolePunch> => {\n    if (_codec == null) {\n      _codec = message<HolePunch>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.type != null) {\n          w.uint32(8)\n          HolePunch.Type.codec().encode(obj.type, w)\n        }\n\n        if (obj.observedAddresses != null) {\n          for (const value of obj.observedAddresses) {\n            w.uint32(18)\n            w.bytes(value)\n          }\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          observedAddresses: []\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.type = HolePunch.Type.codec().decode(reader)\n              break\n            }\n            case 2: {\n              if (opts.limits?.observedAddresses != null && obj.observedAddresses.length === opts.limits.observedAddresses) {\n                throw new MaxLengthError('Decode error - map field \"observedAddresses\" had too many elements')\n              }\n\n              obj.observedAddresses.push(reader.bytes())\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<HolePunch>): Uint8Array => {\n    return encodeMessage(obj, HolePunch.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<HolePunch>): HolePunch => {\n    return decodeMessage(buf, HolePunch.codec(), opts)\n  }\n}\n", "import { isPrivateIp } from '@libp2p/utils/private-ip'\nimport { Circuit, IP, DNS } from '@multiformats/multiaddr-matcher'\nimport type { TransportManager } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * Returns true if the passed multiaddr is public, not relayed and we have a\n * transport that can dial it\n */\nexport function isPublicAndDialable (ma: Multiaddr, transportManager: TransportManager): boolean {\n  // ignore circuit relay\n  if (Circuit.matches(ma)) {\n    return false\n  }\n\n  const transport = transportManager.dialTransportForMultiaddr(ma)\n\n  if (transport == null) {\n    return false\n  }\n\n  // dns addresses are probably public?\n  if (DNS.matches(ma)) {\n    return true\n  }\n\n  // ensure we have only IPv4/IPv6 addresses\n  if (!IP.matches(ma)) {\n    return false\n  }\n\n  return isPrivateIp(ma.toOptions().host) === false\n}\n", "import { InvalidMessageError, serviceDependencies } from '@libp2p/interface'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { Circuit } from '@multiformats/multiaddr-matcher'\nimport delay from 'delay'\nimport { pbStream } from 'it-protobuf-stream'\nimport { HolePunch } from './pb/message.js'\nimport { isPublicAndDialable } from './utils.js'\nimport { multicodec } from './index.js'\nimport type { DCUtRServiceComponents, DCUtRServiceInit } from './index.js'\nimport type { Logger, Connection, Stream, PeerStore, Startable } from '@libp2p/interface'\nimport type { AddressManager, ConnectionManager, Registrar, TransportManager } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\n// https://github.com/libp2p/specs/blob/master/relay/DCUtR.md#rpc-messages\nconst MAX_DCUTR_MESSAGE_SIZE = 1024 * 4\n// ensure the dial has a high priority to jump to the head of the dial queue\nconst DCUTR_DIAL_PRIORITY = 100\n\nconst defaultValues = {\n  // https://github.com/libp2p/go-libp2p/blob/8d2e54e1637041d5cf4fac1e531287560bd1f4ac/p2p/protocol/holepunch/holepuncher.go#L27\n  timeout: 5000,\n  // https://github.com/libp2p/go-libp2p/blob/8d2e54e1637041d5cf4fac1e531287560bd1f4ac/p2p/protocol/holepunch/holepuncher.go#L28\n  retries: 3,\n  maxInboundStreams: 1,\n  maxOutboundStreams: 1\n}\n\nexport class DefaultDCUtRService implements Startable {\n  private started: boolean\n  private readonly timeout: number\n  private readonly retries: number\n  private readonly maxInboundStreams: number\n  private readonly maxOutboundStreams: number\n  private readonly peerStore: PeerStore\n  private readonly registrar: Registrar\n  private readonly connectionManager: ConnectionManager\n  private readonly addressManager: AddressManager\n  private readonly transportManager: TransportManager\n  private topologyId?: string\n  private readonly log: Logger\n\n  constructor (components: DCUtRServiceComponents, init: DCUtRServiceInit) {\n    this.log = components.logger.forComponent('libp2p:dcutr')\n    this.started = false\n    this.peerStore = components.peerStore\n    this.registrar = components.registrar\n    this.addressManager = components.addressManager\n    this.connectionManager = components.connectionManager\n    this.transportManager = components.transportManager\n\n    this.timeout = init.timeout ?? defaultValues.timeout\n    this.retries = init.retries ?? defaultValues.retries\n    this.maxInboundStreams = init.maxInboundStreams ?? defaultValues.maxInboundStreams\n    this.maxOutboundStreams = init.maxOutboundStreams ?? defaultValues.maxOutboundStreams\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/dcutr'\n\n  readonly [serviceDependencies]: string[] = [\n    '@libp2p/identify'\n  ]\n\n  isStarted (): boolean {\n    return this.started\n  }\n\n  async start (): Promise<void> {\n    if (this.started) {\n      return\n    }\n\n    // register for notifications of when peers that support DCUtR connect\n    // nb. requires the identify service to be enabled\n    this.topologyId = await this.registrar.register(multicodec, {\n      notifyOnLimitedConnection: true,\n      onConnect: (peerId, connection) => {\n        if (!Circuit.exactMatch(connection.remoteAddr)) {\n          // the connection is already direct, no upgrade is required\n          return\n        }\n\n        // the inbound peer starts the connection upgrade\n        if (connection.direction !== 'inbound') {\n          return\n        }\n\n        this.upgradeInbound(connection)\n          .catch(err => {\n            this.log.error('error during outgoing DCUtR attempt', err)\n          })\n      }\n    })\n\n    await this.registrar.handle(multicodec, (data) => {\n      void this.handleIncomingUpgrade(data.stream, data.connection).catch(err => {\n        this.log.error('error during incoming DCUtR attempt', err)\n        data.stream.abort(err)\n      })\n    }, {\n      maxInboundStreams: this.maxInboundStreams,\n      maxOutboundStreams: this.maxOutboundStreams,\n      runOnLimitedConnection: true\n    })\n\n    this.started = true\n  }\n\n  async stop (): Promise<void> {\n    await this.registrar.unhandle(multicodec)\n\n    if (this.topologyId != null) {\n      this.registrar.unregister(this.topologyId)\n    }\n\n    this.started = false\n  }\n\n  /**\n   * Perform the inbound connection upgrade as B\n   *\n   * @see https://github.com/libp2p/specs/blob/master/relay/DCUtR.md#the-protocol\n   */\n  async upgradeInbound (relayedConnection: Connection): Promise<void> {\n    // Upon observing the new connection, the inbound peer (here B) checks the\n    // addresses advertised by A via identify.\n    //\n    // If that set includes public addresses, then A may be reachable by a direct\n    // connection, in which case B attempts a unilateral connection upgrade by\n    // initiating a direct connection to A.\n    if (await this.attemptUnilateralConnectionUpgrade(relayedConnection)) {\n      return\n    }\n\n    let stream: Stream | undefined\n\n    for (let i = 0; i < this.retries; i++) {\n      const options = {\n        signal: AbortSignal.timeout(this.timeout)\n      }\n\n      try {\n        // 1. B opens a stream to A using the /libp2p/dcutr protocol.\n        stream = await relayedConnection.newStream([multicodec], {\n          signal: options.signal,\n          runOnLimitedConnection: true\n        })\n\n        const pb = pbStream(stream, {\n          maxDataLength: MAX_DCUTR_MESSAGE_SIZE\n        }).pb(HolePunch)\n\n        // 2. B sends to A a Connect message containing its observed (and\n        // possibly predicted) addresses from identify and starts a timer\n        // to measure RTT of the relay connection.\n        this.log('B sending connect to %p', relayedConnection.remotePeer)\n        const connectTimer = Date.now()\n        await pb.write({\n          type: HolePunch.Type.CONNECT,\n          observedAddresses: this.addressManager.getAddresses().map(ma => ma.bytes)\n        }, options)\n\n        this.log('B receiving connect from %p', relayedConnection.remotePeer)\n        // 4. Upon receiving the Connect, B sends a Sync message\n        const connect = await pb.read(options)\n\n        if (connect.type !== HolePunch.Type.CONNECT) {\n          this.log('A sent wrong message type')\n          throw new InvalidMessageError('DCUtR message type was incorrect')\n        }\n\n        const multiaddrs = this.getDialableMultiaddrs(connect.observedAddresses)\n\n        if (multiaddrs.length === 0) {\n          this.log('A did not have any dialable multiaddrs')\n          throw new InvalidMessageError('DCUtR connect message had no multiaddrs')\n        }\n\n        const rtt = Date.now() - connectTimer\n\n        this.log('A sending sync, rtt %dms', rtt)\n        await pb.write({\n          type: HolePunch.Type.SYNC,\n          observedAddresses: []\n        }, options)\n\n        this.log('A waiting for half RTT')\n        // ..and starts a timer for half the RTT measured from the time between\n        // sending the initial Connect and receiving the response\n        await delay(rtt / 2)\n\n        // TODO: when we have a QUIC transport, the dial step is different - for\n        // now we only have tcp support\n        // https://github.com/libp2p/specs/blob/master/relay/DCUtR.md#the-protocol\n\n        this.log('B dialing', multiaddrs)\n        // Upon expiry of the timer, B dials the address to A and acts as the\n        // multistream-select server\n        const conn = await this.connectionManager.openConnection(multiaddrs, {\n          signal: options.signal,\n          priority: DCUTR_DIAL_PRIORITY,\n          force: true,\n          initiator: false\n        })\n\n        this.log('DCUtR to %p succeeded to address %a, closing relayed connection', relayedConnection.remotePeer, conn.remoteAddr)\n        await relayedConnection.close(options)\n\n        break\n      } catch (err: any) {\n        this.log.error('error while attempting DCUtR on attempt %d of %d', i + 1, this.retries, err)\n        stream?.abort(err)\n\n        if (i === this.retries) {\n          throw err\n        }\n      } finally {\n        if (stream != null) {\n          await stream.close(options)\n        }\n      }\n    }\n  }\n\n  /**\n   * This is performed when A has dialed B via a relay but A also has a public\n   * address that B can dial directly\n   */\n  async attemptUnilateralConnectionUpgrade (relayedConnection: Connection): Promise<boolean> {\n    // Upon observing the new connection, the inbound peer (here B) checks the\n    // addresses advertised by A via identify.\n    const peerInfo = await this.peerStore.get(relayedConnection.remotePeer)\n\n    // If that set includes public addresses, then A may be reachable by a direct\n    // connection, in which case B attempts a unilateral connection upgrade by\n    // initiating a direct connection to A.\n    const publicAddresses = peerInfo.addresses\n      .map(address => {\n        const ma = address.multiaddr\n\n        // ensure all multiaddrs have the peer id\n        if (ma.getPeerId() == null) {\n          return ma.encapsulate(`/p2p/${relayedConnection.remotePeer}`)\n        }\n\n        return ma\n      })\n      .filter(ma => {\n        return isPublicAndDialable(ma, this.transportManager)\n      })\n\n    if (publicAddresses.length > 0) {\n      const signal = AbortSignal.timeout(this.timeout)\n\n      try {\n        this.log('attempting unilateral connection upgrade to %a', publicAddresses)\n\n        // force-dial the multiaddr(s), otherwise `connectionManager.openConnection`\n        // will return the existing relayed connection\n        const connection = await this.connectionManager.openConnection(publicAddresses, {\n          signal,\n          force: true\n        })\n\n        if (Circuit.exactMatch(connection.remoteAddr)) {\n          throw new Error('Could not open a new, non-limited, connection')\n        }\n\n        this.log('unilateral connection upgrade to %p succeeded via %a, closing relayed connection', relayedConnection.remotePeer, connection.remoteAddr)\n\n        await relayedConnection.close({\n          signal\n        })\n\n        return true\n      } catch (err) {\n        this.log.error('unilateral connection upgrade to %p on addresses %a failed', relayedConnection.remotePeer, publicAddresses, err)\n      }\n    } else {\n      this.log('peer %p has no public addresses, not attempting unilateral connection upgrade', relayedConnection.remotePeer)\n    }\n\n    // no public addresses or failed to dial public addresses\n    return false\n  }\n\n  /**\n   * Perform the connection upgrade as A\n   *\n   * @see https://github.com/libp2p/specs/blob/master/relay/DCUtR.md#the-protocol\n   */\n  async handleIncomingUpgrade (stream: Stream, relayedConnection: Connection): Promise<void> {\n    const options = {\n      signal: AbortSignal.timeout(this.timeout)\n    }\n\n    try {\n      const pb = pbStream(stream, {\n        maxDataLength: MAX_DCUTR_MESSAGE_SIZE\n      }).pb(HolePunch)\n\n      this.log('A receiving connect')\n      // 3. Upon receiving the Connect, A responds back with a Connect message\n      // containing its observed (and possibly predicted) addresses.\n      const connect = await pb.read(options)\n\n      if (connect.type !== HolePunch.Type.CONNECT) {\n        this.log('B sent wrong message type')\n        throw new InvalidMessageError('DCUtR message type was incorrect')\n      }\n\n      if (connect.observedAddresses.length === 0) {\n        this.log('B sent no multiaddrs')\n        throw new InvalidMessageError('DCUtR connect message had no multiaddrs')\n      }\n\n      const multiaddrs = this.getDialableMultiaddrs(connect.observedAddresses)\n\n      if (multiaddrs.length === 0) {\n        this.log('B had no dialable multiaddrs')\n        throw new InvalidMessageError('DCUtR connect message had no dialable multiaddrs')\n      }\n\n      this.log('A sending connect')\n      await pb.write({\n        type: HolePunch.Type.CONNECT,\n        observedAddresses: this.addressManager.getAddresses().map(ma => ma.bytes)\n      })\n\n      this.log('A receiving sync')\n      const sync = await pb.read(options)\n\n      if (sync.type !== HolePunch.Type.SYNC) {\n        throw new InvalidMessageError('DCUtR message type was incorrect')\n      }\n\n      // TODO: when we have a QUIC transport, the dial step is different - for\n      // now we only have tcp support\n      // https://github.com/libp2p/specs/blob/master/relay/DCUtR.md#the-protocol\n\n      // Upon receiving the Sync, A immediately dials the address to B\n      this.log('A dialing', multiaddrs)\n      const connection = await this.connectionManager.openConnection(multiaddrs, {\n        signal: options.signal,\n        priority: DCUTR_DIAL_PRIORITY,\n        force: true\n      })\n\n      this.log('DCUtR to %p succeeded via %a, closing relayed connection', relayedConnection.remotePeer, connection.remoteAddr)\n      await relayedConnection.close(options)\n    } catch (err: any) {\n      this.log.error('incoming DCUtR from %p failed', relayedConnection.remotePeer, err)\n      stream.abort(err)\n    } finally {\n      await stream.close(options)\n    }\n  }\n\n  /**\n   * Takes the `addr` and converts it to a Multiaddr if possible\n   */\n  getDialableMultiaddrs (addrs: Array<Uint8Array | string | null | undefined>): Multiaddr[] {\n    const output = []\n\n    for (const addr of addrs) {\n      if (addr == null || addr.length === 0) {\n        continue\n      }\n\n      try {\n        const ma = multiaddr(addr)\n\n        if (!isPublicAndDialable(ma, this.transportManager)) {\n          continue\n        }\n\n        output.push(ma)\n      } catch {}\n    }\n\n    return output\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * Direct Connection Upgrade through Relay (DCUtR) is a protocol that allows two\n * nodes to connect to each other who would otherwise be prevented doing so due\n * to being behind NATed connections or firewalls.\n *\n * The protocol involves making a relayed connection between the two peers and\n * using the relay to synchronize connection timings so that they dial each other\n * at precisely the same moment.\n *\n * @example\n *\n * ```TypeScript\n * import { createLibp2p } from 'libp2p'\n * import { circuitRelayTransport } from '@libp2p/circuit-relay-v2'\n * import { tcp } from '@libp2p/tcp'\n * import { identify } from '@libp2p/identify'\n * import { dcutr } from '@libp2p/dcutr'\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const node = await createLibp2p({\n *   transports: [\n *     circuitRelayTransport(),\n *     tcp()\n *   ],\n *   services: {\n *     identify: identify(),\n *     dcutr: dcutr()\n *   }\n * })\n *\n * // QmTarget is a peer that is behind a NAT, supports TCP and has a relay\n * // reservation\n * const ma = multiaddr('/ip4/.../p2p/QmRelay/p2p-circuit/p2p/QmTarget')\n * await node.dial(ma)\n *\n * // after a while the connection should automatically get upgraded to a\n * // direct connection (e.g. non-limited)\n * while (true) {\n *   const connections = node.getConnections()\n *\n *   if (connections.find(conn => conn.limits == null)) {\n *     console.info('have direct connection')\n *     break\n *   } else {\n *     console.info('have relayed connection')\n *\n *     // wait a few seconds to see if it's succeeded yet\n *     await new Promise<void>((resolve) => {\n *       setTimeout(() => resolve(), 5000)\n *     })\n *   }\n * }\n * ```\n */\n\nimport { DefaultDCUtRService } from './dcutr.js'\nimport type { ComponentLogger, PeerStore } from '@libp2p/interface'\nimport type { AddressManager, ConnectionManager, Registrar, TransportManager } from '@libp2p/interface-internal'\n\nexport interface DCUtRServiceInit {\n  /**\n   * How long we should wait for the connection upgrade to complete\n   *\n   * @default 5000\n   */\n  timeout?: number\n\n  /**\n   * How many times to retry the connection upgrade\n   *\n   * @default 3\n   */\n  retries?: number\n\n  /**\n   * How many simultaneous inbound DCUtR protocol streams to allow on each\n   * connection\n   *\n   * @default 1\n   */\n  maxInboundStreams?: number\n\n  /**\n   * How many simultaneous outbound DCUtR protocol streams to allow on each\n   * connection\n   *\n   * @default 1\n   */\n  maxOutboundStreams?: number\n}\n\nexport interface DCUtRServiceComponents {\n  peerStore: PeerStore\n  connectionManager: ConnectionManager\n  registrar: Registrar\n  addressManager: AddressManager\n  transportManager: TransportManager\n  logger: ComponentLogger\n}\n\n/**\n * The DCUtR protocol\n */\nexport const multicodec = '/libp2p/dcutr'\n\nexport function dcutr (init: DCUtRServiceInit = {}): (components: DCUtRServiceComponents) => unknown {\n  return (components) => new DefaultDCUtRService(components, init)\n}\n", "export const PROTOCOL_VERSION = 'ipfs/0.1.0' // deprecated\nexport const MULTICODEC_IDENTIFY = '/ipfs/id/1.0.0' // deprecated\nexport const MULTICODEC_IDENTIFY_PUSH = '/ipfs/id/push/1.0.0' // deprecated\n\nexport const IDENTIFY_PROTOCOL_VERSION = '0.1.0'\nexport const MULTICODEC_IDENTIFY_PROTOCOL_NAME = 'id'\nexport const MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME = 'id/push'\nexport const MULTICODEC_IDENTIFY_PROTOCOL_VERSION = '1.0.0'\nexport const MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION = '1.0.0'\n\n// https://github.com/libp2p/go-libp2p/blob/8d2e54e1637041d5cf4fac1e531287560bd1f4ac/p2p/protocol/identify/id.go#L52\nexport const MAX_IDENTIFY_MESSAGE_SIZE = 1024 * 8\n\n// https://github.com/libp2p/go-libp2p/blob/0385ec924bad172f74a74db09939e97c079b1420/p2p/protocol/identify/id.go#L47C7-L47C25\nexport const MAX_PUSH_CONCURRENCY = 32\n\nexport const PUSH_DEBOUNCE_MS = 1_000\n", "import { decodeMessage, encodeMessage, MaxLengthError, message } from 'protons-runtime'\nimport type { Codec, DecodeOptions } from 'protons-runtime'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface Identify {\n  protocolVersion?: string\n  agentVersion?: string\n  publicKey?: Uint8Array\n  listenAddrs: Uint8Array[]\n  observedAddr?: Uint8Array\n  protocols: string[]\n  signedPeerRecord?: Uint8Array\n}\n\nexport namespace Identify {\n  let _codec: Codec<Identify>\n\n  export const codec = (): Codec<Identify> => {\n    if (_codec == null) {\n      _codec = message<Identify>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.protocolVersion != null) {\n          w.uint32(42)\n          w.string(obj.protocolVersion)\n        }\n\n        if (obj.agentVersion != null) {\n          w.uint32(50)\n          w.string(obj.agentVersion)\n        }\n\n        if (obj.publicKey != null) {\n          w.uint32(10)\n          w.bytes(obj.publicKey)\n        }\n\n        if (obj.listenAddrs != null) {\n          for (const value of obj.listenAddrs) {\n            w.uint32(18)\n            w.bytes(value)\n          }\n        }\n\n        if (obj.observedAddr != null) {\n          w.uint32(34)\n          w.bytes(obj.observedAddr)\n        }\n\n        if (obj.protocols != null) {\n          for (const value of obj.protocols) {\n            w.uint32(26)\n            w.string(value)\n          }\n        }\n\n        if (obj.signedPeerRecord != null) {\n          w.uint32(66)\n          w.bytes(obj.signedPeerRecord)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          listenAddrs: [],\n          protocols: []\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 5: {\n              obj.protocolVersion = reader.string()\n              break\n            }\n            case 6: {\n              obj.agentVersion = reader.string()\n              break\n            }\n            case 1: {\n              obj.publicKey = reader.bytes()\n              break\n            }\n            case 2: {\n              if (opts.limits?.listenAddrs != null && obj.listenAddrs.length === opts.limits.listenAddrs) {\n                throw new MaxLengthError('Decode error - map field \"listenAddrs\" had too many elements')\n              }\n\n              obj.listenAddrs.push(reader.bytes())\n              break\n            }\n            case 4: {\n              obj.observedAddr = reader.bytes()\n              break\n            }\n            case 3: {\n              if (opts.limits?.protocols != null && obj.protocols.length === opts.limits.protocols) {\n                throw new MaxLengthError('Decode error - map field \"protocols\" had too many elements')\n              }\n\n              obj.protocols.push(reader.string())\n              break\n            }\n            case 8: {\n              obj.signedPeerRecord = reader.bytes()\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Identify>): Uint8Array => {\n    return encodeMessage(obj, Identify.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Identify>): Identify => {\n    return decodeMessage(buf, Identify.codec(), opts)\n  }\n}\n", "import { publicKeyFromProtobuf } from '@libp2p/crypto/keys'\nimport { InvalidMessageError } from '@libp2p/interface'\nimport { peerIdFromCID, peerIdFromPublicKey } from '@libp2p/peer-id'\nimport { RecordEnvelope, PeerRecord } from '@libp2p/peer-record'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { IDENTIFY_PROTOCOL_VERSION, MAX_IDENTIFY_MESSAGE_SIZE, MAX_PUSH_CONCURRENCY } from './consts.js'\nimport type { IdentifyComponents, IdentifyInit } from './index.js'\nimport type { Identify as IdentifyMessage } from './pb/message.js'\nimport type { Libp2pEvents, IdentifyResult, SignedPeerRecord, Logger, Connection, Peer, PeerData, PeerStore, NodeInfo, Startable, PeerId, IncomingStreamData, PrivateKey } from '@libp2p/interface'\nimport type { AddressManager, Registrar } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { TypedEventTarget } from 'main-event'\n\nexport const defaultValues = {\n  protocolPrefix: 'ipfs',\n  timeout: 5000,\n  maxInboundStreams: 1,\n  maxOutboundStreams: 1,\n  maxObservedAddresses: 10,\n  maxMessageSize: MAX_IDENTIFY_MESSAGE_SIZE,\n  runOnConnectionOpen: true,\n  runOnSelfUpdate: true,\n  runOnLimitedConnection: true,\n  concurrency: MAX_PUSH_CONCURRENCY\n}\n\n/**\n * Takes the `addr` and converts it to a Multiaddr if possible\n */\nexport function getCleanMultiaddr (addr: Uint8Array | string | null | undefined): Multiaddr | undefined {\n  if (addr != null && addr.length > 0) {\n    try {\n      return multiaddr(addr)\n    } catch {\n\n    }\n  }\n}\n\nexport function getAgentVersion (nodeInfo: NodeInfo, agentVersion?: string): string {\n  if (agentVersion != null) {\n    return agentVersion\n  }\n\n  return nodeInfo.userAgent\n}\n\nexport async function consumeIdentifyMessage (peerStore: PeerStore, events: TypedEventTarget<Libp2pEvents>, log: Logger, connection: Connection, message: IdentifyMessage): Promise<IdentifyResult> {\n  log('received identify from %p', connection.remotePeer)\n\n  if (message == null) {\n    throw new InvalidMessageError('message was null or undefined')\n  }\n\n  const peer: PeerData = {}\n\n  if (message.listenAddrs.length > 0) {\n    peer.addresses = message.listenAddrs.map(buf => ({\n      isCertified: false,\n      multiaddr: multiaddr(buf)\n    }))\n  }\n\n  if (message.protocols.length > 0) {\n    peer.protocols = message.protocols\n  }\n\n  if (message.publicKey != null) {\n    const publicKey = publicKeyFromProtobuf(message.publicKey)\n    const peerId = peerIdFromPublicKey(publicKey)\n\n    if (!peerId.equals(connection.remotePeer)) {\n      throw new InvalidMessageError('public key did not match remote PeerId')\n    }\n\n    peer.publicKey = publicKey\n  }\n\n  let output: SignedPeerRecord | undefined\n\n  // if the peer record has been sent, prefer the addresses in the record as they are signed by the remote peer\n  if (message.signedPeerRecord != null) {\n    log.trace('received signedPeerRecord from %p', connection.remotePeer)\n\n    let peerRecordEnvelope = message.signedPeerRecord\n    const envelope = await RecordEnvelope.openAndCertify(peerRecordEnvelope, PeerRecord.DOMAIN)\n    let peerRecord = PeerRecord.createFromProtobuf(envelope.payload)\n    const envelopePeer = peerIdFromCID(envelope.publicKey.toCID())\n\n    // Verify peerId\n    if (!peerRecord.peerId.equals(envelopePeer)) {\n      throw new InvalidMessageError('signing key does not match PeerId in the PeerRecord')\n    }\n\n    // Make sure remote peer is the one sending the record\n    if (!connection.remotePeer.equals(peerRecord.peerId)) {\n      throw new InvalidMessageError('signing key does not match remote PeerId')\n    }\n\n    let existingPeer: Peer | undefined\n\n    try {\n      existingPeer = await peerStore.get(peerRecord.peerId)\n    } catch (err: any) {\n      if (err.name !== 'NotFoundError') {\n        throw err\n      }\n    }\n\n    if (existingPeer != null) {\n      // don't lose any existing metadata\n      peer.metadata = existingPeer.metadata\n\n      // if we have previously received a signed record for this peer, compare it to the incoming one\n      if (existingPeer.peerRecordEnvelope != null) {\n        const storedEnvelope = RecordEnvelope.createFromProtobuf(existingPeer.peerRecordEnvelope)\n        const storedRecord = PeerRecord.createFromProtobuf(storedEnvelope.payload)\n\n        // ensure seq is greater than, or equal to, the last received\n        if (storedRecord.seqNumber >= peerRecord.seqNumber) {\n          log('sequence number was lower or equal to existing sequence number - stored: %d received: %d', storedRecord.seqNumber, peerRecord.seqNumber)\n          peerRecord = storedRecord\n          peerRecordEnvelope = existingPeer.peerRecordEnvelope\n        }\n      }\n    }\n\n    // store the signed record for next time\n    peer.peerRecordEnvelope = peerRecordEnvelope\n\n    // override the stored addresses with the signed multiaddrs\n    peer.addresses = peerRecord.multiaddrs.map(multiaddr => ({\n      isCertified: true,\n      multiaddr\n    }))\n\n    output = {\n      seq: peerRecord.seqNumber,\n      addresses: peerRecord.multiaddrs\n    }\n  } else {\n    log('%p did not send a signed peer record', connection.remotePeer)\n  }\n\n  log.trace('patching %p with', connection.remotePeer, peer)\n  await peerStore.patch(connection.remotePeer, peer)\n\n  if (message.agentVersion != null || message.protocolVersion != null) {\n    const metadata: Record<string, Uint8Array> = {}\n\n    if (message.agentVersion != null) {\n      metadata.AgentVersion = uint8ArrayFromString(message.agentVersion)\n    }\n\n    if (message.protocolVersion != null) {\n      metadata.ProtocolVersion = uint8ArrayFromString(message.protocolVersion)\n    }\n\n    log.trace('merging %p metadata', connection.remotePeer, metadata)\n    await peerStore.merge(connection.remotePeer, {\n      metadata\n    })\n  }\n\n  const result: IdentifyResult = {\n    peerId: connection.remotePeer,\n    protocolVersion: message.protocolVersion,\n    agentVersion: message.agentVersion,\n    publicKey: message.publicKey,\n    listenAddrs: message.listenAddrs.map(buf => multiaddr(buf)),\n    observedAddr: message.observedAddr == null ? undefined : multiaddr(message.observedAddr),\n    protocols: message.protocols,\n    signedPeerRecord: output,\n    connection\n  }\n\n  events.safeDispatchEvent('peer:identify', { detail: result })\n\n  return result\n}\n\nexport interface AbstractIdentifyInit extends IdentifyInit {\n  protocol: string\n  log: Logger\n}\n\nexport abstract class AbstractIdentify implements Startable {\n  public readonly host: {\n    protocolVersion: string\n    agentVersion: string\n  }\n\n  protected protocol: string\n  protected started: boolean\n  protected readonly timeout: number\n  protected readonly peerId: PeerId\n  protected readonly privateKey: PrivateKey\n  protected readonly peerStore: PeerStore\n  protected readonly registrar: Registrar\n  protected readonly addressManager: AddressManager\n  private readonly maxInboundStreams: number\n  private readonly maxOutboundStreams: number\n  protected readonly maxMessageSize: number\n  protected readonly maxObservedAddresses: number\n  protected readonly events: TypedEventTarget<Libp2pEvents>\n  protected readonly runOnLimitedConnection: boolean\n  protected readonly log: Logger\n\n  constructor (components: IdentifyComponents, init: AbstractIdentifyInit) {\n    this.protocol = init.protocol\n    this.started = false\n    this.peerId = components.peerId\n    this.privateKey = components.privateKey\n    this.peerStore = components.peerStore\n    this.registrar = components.registrar\n    this.addressManager = components.addressManager\n    this.events = components.events\n    this.log = init.log\n\n    this.timeout = init.timeout ?? defaultValues.timeout\n    this.maxInboundStreams = init.maxInboundStreams ?? defaultValues.maxInboundStreams\n    this.maxOutboundStreams = init.maxOutboundStreams ?? defaultValues.maxOutboundStreams\n    this.maxMessageSize = init.maxMessageSize ?? defaultValues.maxMessageSize\n    this.maxObservedAddresses = init.maxObservedAddresses ?? defaultValues.maxObservedAddresses\n    this.runOnLimitedConnection = init.runOnLimitedConnection ?? defaultValues.runOnLimitedConnection\n\n    // Store self host metadata\n    this.host = {\n      protocolVersion: `${init.protocolPrefix ?? defaultValues.protocolPrefix}/${IDENTIFY_PROTOCOL_VERSION}`,\n      agentVersion: getAgentVersion(components.nodeInfo, init.agentVersion)\n    }\n  }\n\n  isStarted (): boolean {\n    return this.started\n  }\n\n  async start (): Promise<void> {\n    if (this.started) {\n      return\n    }\n\n    await this.peerStore.merge(this.peerId, {\n      metadata: {\n        AgentVersion: uint8ArrayFromString(this.host.agentVersion),\n        ProtocolVersion: uint8ArrayFromString(this.host.protocolVersion)\n      }\n    })\n\n    await this.registrar.handle(this.protocol, (data) => {\n      void this.handleProtocol(data).catch(err => {\n        this.log.error(err)\n      })\n    }, {\n      maxInboundStreams: this.maxInboundStreams,\n      maxOutboundStreams: this.maxOutboundStreams,\n      runOnLimitedConnection: this.runOnLimitedConnection\n    })\n\n    this.started = true\n  }\n\n  async stop (): Promise<void> {\n    await this.registrar.unhandle(this.protocol)\n\n    this.started = false\n  }\n\n  protected abstract handleProtocol (data: IncomingStreamData): Promise<void>\n}\n", "import { serviceCapabilities } from '@libp2p/interface'\nimport { RecordEnvelope, PeerRecord } from '@libp2p/peer-record'\nimport { debounce } from '@libp2p/utils/debounce'\nimport { protocols } from '@multiformats/multiaddr'\nimport drain from 'it-drain'\nimport parallel from 'it-parallel'\nimport { pbStream } from 'it-protobuf-stream'\nimport { setMaxListeners } from 'main-event'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport {\n  MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME,\n  MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION,\n  PUSH_DEBOUNCE_MS\n} from './consts.js'\nimport { Identify as IdentifyMessage } from './pb/message.js'\nimport { AbstractIdentify, consumeIdentifyMessage, defaultValues } from './utils.js'\nimport type { IdentifyPush as IdentifyPushInterface, IdentifyPushComponents, IdentifyPushInit } from './index.js'\nimport type { Stream, Startable, IncomingStreamData } from '@libp2p/interface'\nimport type { ConnectionManager } from '@libp2p/interface-internal'\n\nexport class IdentifyPush extends AbstractIdentify implements Startable, IdentifyPushInterface {\n  private readonly connectionManager: ConnectionManager\n  private readonly concurrency: number\n  private _push: () => void\n\n  constructor (components: IdentifyPushComponents, init: IdentifyPushInit = {}) {\n    super(components, {\n      ...init,\n      protocol: `/${init.protocolPrefix ?? defaultValues.protocolPrefix}/${MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME}/${MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION}`,\n      log: components.logger.forComponent('libp2p:identify-push')\n    })\n\n    this.connectionManager = components.connectionManager\n    this.concurrency = init.concurrency ?? defaultValues.concurrency\n\n    this._push = debounce(this.sendPushMessage.bind(this), init.debounce ?? PUSH_DEBOUNCE_MS)\n\n    if ((init.runOnSelfUpdate ?? defaultValues.runOnSelfUpdate)) {\n      // When self peer record changes, trigger identify-push\n      components.events.addEventListener('self:peer:update', (evt) => {\n        this.push().catch(err => {\n          this.log.error('error pushing updates to peers - %e', err)\n        })\n      })\n    }\n  }\n\n  [serviceCapabilities]: string[] = [\n    '@libp2p/identify-push'\n  ]\n\n  /**\n   * Calls `push` on all peer connections\n   */\n  async push (): Promise<void> {\n    this._push()\n  }\n\n  private async sendPushMessage (): Promise<void> {\n    // Do not try to push if we are not running\n    if (!this.isStarted()) {\n      return\n    }\n\n    try {\n      const listenAddresses = this.addressManager.getAddresses().map(ma => ma.decapsulateCode(protocols('p2p').code))\n      const peerRecord = new PeerRecord({\n        peerId: this.peerId,\n        multiaddrs: listenAddresses\n      })\n      const signedPeerRecord = await RecordEnvelope.seal(peerRecord, this.privateKey)\n      const supportedProtocols = this.registrar.getProtocols()\n      const peer = await this.peerStore.get(this.peerId)\n      const agentVersion = uint8ArrayToString(peer.metadata.get('AgentVersion') ?? uint8ArrayFromString(this.host.agentVersion))\n      const protocolVersion = uint8ArrayToString(peer.metadata.get('ProtocolVersion') ?? uint8ArrayFromString(this.host.protocolVersion))\n      const self = this\n\n      async function * pushToConnections (): AsyncGenerator<() => Promise<void>> {\n        for (const connection of self.connectionManager.getConnections()) {\n          const peer = await self.peerStore.get(connection.remotePeer)\n\n          if (!peer.protocols.includes(self.protocol)) {\n            continue\n          }\n\n          yield async () => {\n            let stream: Stream | undefined\n            const signal = AbortSignal.timeout(self.timeout)\n\n            setMaxListeners(Infinity, signal)\n\n            try {\n              stream = await connection.newStream(self.protocol, {\n                signal,\n                runOnLimitedConnection: self.runOnLimitedConnection\n              })\n\n              const pb = pbStream(stream, {\n                maxDataLength: self.maxMessageSize\n              }).pb(IdentifyMessage)\n\n              await pb.write({\n                listenAddrs: listenAddresses.map(ma => ma.bytes),\n                signedPeerRecord: signedPeerRecord.marshal(),\n                protocols: supportedProtocols,\n                agentVersion,\n                protocolVersion\n              }, {\n                signal\n              })\n\n              await stream.close({\n                signal\n              })\n            } catch (err: any) {\n              // Just log errors\n              self.log.error('could not push identify update to peer', err)\n              stream?.abort(err)\n            }\n          }\n        }\n      }\n\n      await drain(parallel(pushToConnections(), {\n        concurrency: this.concurrency\n      }))\n    } catch (err: any) {\n      this.log.error('error pushing updates to peers - %e', err)\n    }\n  }\n\n  /**\n   * Reads the Identify Push message from the given `connection`\n   */\n  async handleProtocol (data: IncomingStreamData): Promise<void> {\n    const { connection, stream } = data\n\n    try {\n      if (this.peerId.equals(connection.remotePeer)) {\n        throw new Error('received push from ourselves?')\n      }\n\n      const options = {\n        signal: AbortSignal.timeout(this.timeout)\n      }\n\n      const pb = pbStream(stream, {\n        maxDataLength: this.maxMessageSize\n      }).pb(IdentifyMessage)\n\n      const message = await pb.read(options)\n      await stream.close(options)\n\n      await consumeIdentifyMessage(this.peerStore, this.events, this.log, connection, message)\n    } catch (err: any) {\n      this.log.error('received invalid message', err)\n      stream.abort(err)\n      return\n    }\n\n    this.log.trace('handled push from %p', connection.remotePeer)\n  }\n}\n", "import type { Matcher, MultiaddrMatcher } from './index.js'\nimport type { Multiaddr, Component } from '@multiformats/multiaddr'\n\n/**\n * Matches a multiaddr component with the specified code but no value\n */\nexport const code = (code: number): Matcher => {\n  return {\n    match: (vals) => {\n      const component = vals[0]\n\n      if (component == null) {\n        return false\n      }\n\n      if (component.code !== code) {\n        return false\n      }\n\n      if (component.value != null) {\n        return false\n      }\n\n      return vals.slice(1)\n    }\n  }\n}\n\n/**\n * Matches a multiaddr component with the specified code and value. If the value\n * is omitted any non-undefined value is matched.\n */\nexport const value = (code: number, value?: string): Matcher => {\n  return {\n    match: (vals) => {\n      const component = vals[0]\n\n      if (component?.code !== code) {\n        return false\n      }\n\n      if (component.value == null) {\n        return false\n      }\n\n      if (value != null && component.value !== value) {\n        return false\n      }\n\n      return vals.slice(1)\n    }\n  }\n}\n\n/**\n * An optional matcher\n */\nexport const optional = (matcher: Matcher): Matcher => {\n  return {\n    match: (vals) => {\n      const result = matcher.match(vals)\n\n      if (result === false) {\n        return vals\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Matches any one of the passed matches\n */\nexport const or = (...matchers: Matcher[]): Matcher => {\n  return {\n    match: (vals) => {\n      let matches: Component[] | undefined\n\n      for (const matcher of matchers) {\n        const result = matcher.match(vals)\n\n        // no match\n        if (result === false) {\n          continue\n        }\n\n        // choose greediest matcher\n        if (matches == null || result.length < matches.length) {\n          matches = result\n        }\n      }\n\n      if (matches == null) {\n        return false\n      }\n\n      return matches\n    }\n  }\n}\n\n/**\n * Matches all of the passed matchers\n */\nexport const and = (...matchers: Matcher[]): Matcher => {\n  return {\n    match: (vals) => {\n      for (const matcher of matchers) {\n        // pass what's left of the array\n        const result = matcher.match(vals)\n\n        // no match\n        if (result === false) {\n          return false\n        }\n\n        vals = result\n      }\n\n      return vals\n    }\n  }\n}\n\n/**\n * Create a multiaddr matcher from the passed component matchers\n */\nexport function fmt (...matchers: Matcher[]): MultiaddrMatcher {\n  function match (ma?: Multiaddr): Component[] | false {\n    if (ma == null) {\n      return false\n    }\n\n    let parts = ma.getComponents()\n\n    for (const matcher of matchers) {\n      const result = matcher.match(parts)\n\n      if (result === false) {\n        return false\n      }\n\n      parts = result\n    }\n\n    return parts\n  }\n\n  function matches (ma?: Multiaddr): boolean {\n    const result = match(ma)\n\n    return result !== false\n  }\n\n  function exactMatch (ma?: Multiaddr): boolean {\n    const result = match(ma)\n\n    if (result === false) {\n      return false\n    }\n\n    return result.length === 0\n  }\n\n  return {\n    matchers,\n    matches,\n    exactMatch\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * This module exports various matchers that can be used to infer the type of a\n * passed multiaddr.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/dnsaddr/example.org')\n *\n * DNS.matches(ma) // true - this is a multiaddr with a DNS address at the start\n * ```\n *\n * @example\n *\n * The default matching behaviour ignores any subsequent tuples in the multiaddr.\n * If you want stricter matching you can use `.exactMatch`:\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS, Circuit } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/dnsaddr/example.org/p2p/QmFoo/p2p-circuit/p2p/QmBar')\n *\n * DNS.exactMatch(ma) // false - this address has extra tuples after the DNS component\n * Circuit.matches(ma) // true\n * Circuit.exactMatch(ma) // true - the extra tuples are circuit relay related\n * ```\n */\n\nimport { CODE_P2P, CODE_DNS4, CODE_DNS6, CODE_DNSADDR, CODE_DNS, CODE_IP4, CODE_IP6, CODE_TCP, CODE_UDP, CODE_QUIC, CODE_QUIC_V1, CODE_WS, CODE_WSS, CODE_TLS, CODE_SNI, CODE_WEBRTC_DIRECT, CODE_CERTHASH, CODE_WEBTRANSPORT, CODE_P2P_CIRCUIT, CODE_WEBRTC, CODE_HTTP, CODE_UNIX, CODE_HTTPS, CODE_MEMORY, CODE_IP6ZONE, CODE_IPCIDR } from '@multiformats/multiaddr'\nimport { and, or, optional, fmt, code, value } from './utils.js'\nimport type { Multiaddr, Component } from '@multiformats/multiaddr'\n\n/**\n * A matcher accepts multiaddr components and either fails to match and returns\n * false or returns a sublist of unmatched components\n */\nexport interface Matcher {\n  match(parts: Component[]): Component[] | false\n}\n\n/**\n * A MultiaddrMatcher allows interpreting a multiaddr as a certain type of\n * multiaddr\n */\nexport interface MultiaddrMatcher {\n  /**\n   * The matchers that make up this MultiaddrMatcher - useful if you want to\n   * make your own custom matchers\n   */\n  matchers: Matcher[]\n\n  /**\n   * Returns true if the passed multiaddr can be treated as this type of\n   * multiaddr\n   */\n  matches(ma?: Multiaddr): boolean\n\n  /**\n   * Returns true if the passed multiaddr terminates as this type of\n   * multiaddr\n   */\n  exactMatch(ma?: Multiaddr): boolean\n}\n\n/**\n * Matches PeerId addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { PEER_ID } from '@multiformats/multiaddr-matcher'\n *\n * PEER_ID.matches(multiaddr('/p2p/Qmfoo')) // true\n * PEER_ID.matches(multiaddr('/ipfs/Qmfoo')) // true\n * ```\n */\nconst _PEER_ID = value(CODE_P2P)\n\nexport const PEER_ID = fmt(_PEER_ID)\n\n/**\n * DNS matchers\n */\nconst _DNS4 = value(CODE_DNS4)\nconst _DNS6 = value(CODE_DNS6)\nconst _DNSADDR = value(CODE_DNSADDR)\nconst _DNS = value(CODE_DNS)\n\n/**\n * Matches dns4 addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS4 } from '@multiformats/multiaddr-matcher'\n *\n * DNS4.matches(multiaddr('/dns4/example.org')) // true\n * ```\n */\nexport const DNS4 = fmt(_DNS4, optional(value(CODE_P2P)))\n\n/**\n * Matches dns6 addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS6 } from '@multiformats/multiaddr-matcher'\n *\n * DNS6.matches(multiaddr('/dns6/example.org')) // true\n * ```\n */\nexport const DNS6 = fmt(_DNS6, optional(value(CODE_P2P)))\n\n/**\n * Matches dnsaddr addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNSADDR } from '@multiformats/multiaddr-matcher'\n *\n * DNSADDR.matches(multiaddr('/dnsaddr/example.org')) // true\n * DNSADDR.matches(multiaddr('/dnsaddr/example.org/p2p/Qmfoo')) // true\n * ```\n */\nexport const DNSADDR = fmt(_DNSADDR, optional(value(CODE_P2P)))\n\n/**\n * Matches any dns address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS } from '@multiformats/multiaddr-matcher'\n *\n * DNS.matches(multiaddr('/dnsaddr/example.org')) // true\n * DNS.matches(multiaddr('/dns4/example.org')) // true\n * DNS.matches(multiaddr('/dns6/example.org')) // true\n * DNS.matches(multiaddr('/dns6/example.org/p2p/Qmfoo')) // true\n * ```\n */\nexport const DNS = fmt(or(_DNS, _DNSADDR, _DNS4, _DNS6), optional(value(CODE_P2P)))\n\nconst _IP4 = and(\n  value(CODE_IP4),\n  optional(value(CODE_IPCIDR))\n)\nconst _IP6 = and(\n  optional(value(CODE_IP6ZONE)),\n  value(CODE_IP6),\n  optional(value(CODE_IPCIDR))\n)\nconst _IP = or(_IP4, _IP6)\n\nconst _IP_OR_DOMAIN = or(_IP, _DNS, _DNS4, _DNS6, _DNSADDR)\n\n/**\n * A matcher for addresses that start with IP or DNS tuples.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP_OR_DOMAIN } from '@multiformats/multiaddr-matcher'\n *\n * IP_OR_DOMAIN.matches(multiaddr('/ip4/123.123.123.123')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/ip4/123.123.123.123/p2p/QmFoo')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/dns/example.com/p2p/QmFoo')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/p2p/QmFoo')) // false\n * ```\n */\nexport const IP_OR_DOMAIN = fmt(or(_IP, and(or(_DNS, _DNSADDR, _DNS4, _DNS6), optional(value(CODE_P2P)))))\n\n/**\n * Matches ip4 addresses.\n *\n * Use {@link IP IP} instead to match any ip4/ip6 address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP4 } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/ip4/123.123.123.123')\n *\n * IP4.matches(ma) // true\n * ```\n */\nexport const IP4 = fmt(_IP4)\n\n/**\n * Matches ip6 addresses.\n *\n * Use {@link IP IP} instead to match any ip4/ip6 address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP6 } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/ip6/fe80::1cc1:a3b8:322f:cf22')\n *\n * IP6.matches(ma) // true\n * ```\n */\nexport const IP6 = fmt(_IP6)\n\n/**\n * Matches ip4 or ip6 addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP } from '@multiformats/multiaddr-matcher'\n *\n * IP.matches(multiaddr('/ip4/123.123.123.123')) // true\n * IP.matches(multiaddr('/ip6/fe80::1cc1:a3b8:322f:cf22')) // true\n * ```\n */\nexport const IP = fmt(_IP)\n\nconst _TCP = and(_IP_OR_DOMAIN, value(CODE_TCP))\nconst _UDP = and(_IP_OR_DOMAIN, value(CODE_UDP))\n\n/**\n * Matches TCP addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { TCP } from '@multiformats/multiaddr-matcher'\n *\n * TCP.matches(multiaddr('/ip4/123.123.123.123/tcp/1234')) // true\n * ```\n */\nexport const TCP = fmt(and(_TCP, optional(value(CODE_P2P))))\n\n/**\n * Matches UDP addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { UDP } from '@multiformats/multiaddr-matcher'\n *\n * UDP.matches(multiaddr('/ip4/123.123.123.123/udp/1234')) // true\n * ```\n */\nexport const UDP = fmt(_UDP)\n\nconst _QUIC = and(_UDP, code(CODE_QUIC), optional(value(CODE_P2P)))\nconst _QUIC_V1 = and(_UDP, code(CODE_QUIC_V1), optional(value(CODE_P2P)))\n\nconst QUIC_V0_OR_V1 = or(_QUIC, _QUIC_V1)\n\n/**\n * Matches QUIC addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { QUIC } from '@multiformats/multiaddr-matcher'\n *\n * QUIC.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic')) // true\n * ```\n */\nexport const QUIC = fmt(_QUIC)\n\n/**\n * Matches QUICv1 addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { QUIC_V1 } from '@multiformats/multiaddr-matcher'\n *\n * QUIC_V1.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic-v1')) // true\n * ```\n */\nexport const QUIC_V1 = fmt(_QUIC_V1)\n\nconst _WEB = or(\n  _IP_OR_DOMAIN,\n  _TCP,\n  _UDP,\n  _QUIC,\n  _QUIC_V1\n)\n\nconst _WebSockets = or(\n  and(_WEB, code(CODE_WS), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches WebSocket addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebSockets } from '@multiformats/multiaddr-matcher'\n *\n * WebSockets.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/ws')) // true\n * ```\n */\nexport const WebSockets = fmt(_WebSockets)\n\nconst _WebSocketsSecure = or(\n  and(_WEB, code(CODE_WSS), optional(value(CODE_P2P))),\n  and(_WEB, code(CODE_TLS), optional(value(CODE_SNI)), code(CODE_WS), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches secure WebSocket addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebSocketsSecure } from '@multiformats/multiaddr-matcher'\n *\n * WebSocketsSecure.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/wss')) // true\n * ```\n */\nexport const WebSocketsSecure = fmt(_WebSocketsSecure)\n\nconst _WebRTCDirect = and(_UDP, code(CODE_WEBRTC_DIRECT), optional(value(CODE_CERTHASH)), optional(value(CODE_CERTHASH)), optional(value(CODE_P2P)))\n\n/**\n * Matches WebRTC-direct addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTCDirect } from '@multiformats/multiaddr-matcher'\n *\n * WebRTCDirect.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmFoo/webrtc-direct/certhash/u....')) // true\n * ```\n */\nexport const WebRTCDirect = fmt(_WebRTCDirect)\n\nconst _WebTransport = and(_QUIC_V1, code(CODE_WEBTRANSPORT), optional(value(CODE_CERTHASH)), optional(value(CODE_CERTHASH)), optional(value(CODE_P2P)))\n\n/**\n * Matches WebTransport addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTCDirect } from '@multiformats/multiaddr-matcher'\n *\n * WebRTCDirect.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic-v1/webtransport/certhash/u..../certhash/u..../p2p/QmFoo')) // true\n * ```\n */\nexport const WebTransport = fmt(_WebTransport)\n\nconst _P2P = or(\n  _WebSockets,\n  _WebSocketsSecure,\n  and(_TCP, optional(value(CODE_P2P))),\n  and(QUIC_V0_OR_V1, optional(value(CODE_P2P))),\n  and(_IP_OR_DOMAIN, optional(value(CODE_P2P))),\n  _WebRTCDirect,\n  _WebTransport,\n  value(CODE_P2P)\n)\n\n/**\n * Matches peer addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { P2P } from '@multiformats/multiaddr-matcher'\n *\n * P2P.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmFoo')) // true\n * ```\n */\nexport const P2P = fmt(_P2P)\n\nconst _Circuit = and(_P2P, code(CODE_P2P_CIRCUIT), value(CODE_P2P))\n\n/**\n * Matches circuit relay addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Circuit } from '@multiformats/multiaddr-matcher'\n *\n * Circuit.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmRelay/p2p-circuit/p2p/QmTarget')) // true\n * ```\n */\nexport const Circuit = fmt(_Circuit)\n\nconst _WebRTC = or(\n  and(_P2P, code(CODE_P2P_CIRCUIT), code(CODE_WEBRTC), optional(value(CODE_P2P))),\n  and(_P2P, code(CODE_WEBRTC), optional(value(CODE_P2P))),\n  and(code(CODE_WEBRTC), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches WebRTC addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTC } from '@multiformats/multiaddr-matcher'\n *\n * WebRTC.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmRelay/p2p-circuit/webrtc/p2p/QmTarget')) // true\n * ```\n */\nexport const WebRTC = fmt(_WebRTC)\n\nconst _HTTP = or(\n  and(_IP_OR_DOMAIN, value(CODE_TCP), code(CODE_HTTP), optional(value(CODE_P2P))),\n  and(_IP_OR_DOMAIN, code(CODE_HTTP), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches HTTP addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { HTTP } from '@multiformats/multiaddr-matcher'\n *\n * HTTP.matches(multiaddr('/dns/example.org/http')) // true\n * ```\n */\nexport const HTTP = fmt(_HTTP)\n\nconst _HTTPS = and(_IP_OR_DOMAIN, or(\n  and(value(CODE_TCP, '443'), code(CODE_HTTP)),\n  and(value(CODE_TCP), code(CODE_HTTPS)),\n  and(value(CODE_TCP), code(CODE_TLS), code(CODE_HTTP)),\n  and(code(CODE_TLS), code(CODE_HTTP)),\n  code(CODE_TLS),\n  code(CODE_HTTPS)\n),\noptional(value(CODE_P2P))\n)\n\n/**\n * Matches HTTPS addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { HTTP } from '@multiformats/multiaddr-matcher'\n *\n * HTTP.matches(multiaddr('/dns/example.org/tls/http')) // true\n * ```\n */\nexport const HTTPS = fmt(_HTTPS)\n\nconst _Memory = or(\n  and(value(CODE_MEMORY), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches Memory addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Memory } from '@multiformats/multiaddr-matcher'\n *\n * Memory.matches(multiaddr('/memory/0xDEADBEEF')) // true\n * ```\n */\nexport const Memory = fmt(_Memory)\n\nconst _Unix = or(\n  and(value(CODE_UNIX), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches Unix addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Unix } from '@multiformats/multiaddr-matcher'\n *\n * Unix.matches(multiaddr('/unix/%2Fpath%2Fto%2Funix.socket')) // true\n * ```\n */\nexport const Unix = fmt(_Unix)\n", "import { publicKeyFromProtobuf, publicKeyToProtobuf } from '@libp2p/crypto/keys'\nimport { InvalidMessageError, UnsupportedProtocolError, serviceCapabilities } from '@libp2p/interface'\nimport { peerIdFromCID } from '@libp2p/peer-id'\nimport { RecordEnvelope, PeerRecord } from '@libp2p/peer-record'\nimport { isGlobalUnicast } from '@libp2p/utils/multiaddr/is-global-unicast'\nimport { isPrivate } from '@libp2p/utils/multiaddr/is-private'\nimport { CODE_IP6, CODE_IP6ZONE, protocols } from '@multiformats/multiaddr'\nimport { IP_OR_DOMAIN, TCP } from '@multiformats/multiaddr-matcher'\nimport { pbStream } from 'it-protobuf-stream'\nimport { setMaxListeners } from 'main-event'\nimport {\n  MULTICODEC_IDENTIFY_PROTOCOL_NAME,\n  MULTICODEC_IDENTIFY_PROTOCOL_VERSION\n} from './consts.js'\nimport { Identify as IdentifyMessage } from './pb/message.js'\nimport { AbstractIdentify, consumeIdentifyMessage, defaultValues, getCleanMultiaddr } from './utils.js'\nimport type { Identify as IdentifyInterface, IdentifyComponents, IdentifyInit } from './index.js'\nimport type { IdentifyResult, AbortOptions, Connection, Stream, Startable, IncomingStreamData } from '@libp2p/interface'\n\nexport class Identify extends AbstractIdentify implements Startable, IdentifyInterface {\n  constructor (components: IdentifyComponents, init: IdentifyInit = {}) {\n    super(components, {\n      ...init,\n      protocol: `/${init.protocolPrefix ?? defaultValues.protocolPrefix}/${MULTICODEC_IDENTIFY_PROTOCOL_NAME}/${MULTICODEC_IDENTIFY_PROTOCOL_VERSION}`,\n      log: components.logger.forComponent('libp2p:identify')\n    })\n\n    if (init.runOnConnectionOpen ?? defaultValues.runOnConnectionOpen) {\n      // When a new connection happens, trigger identify\n      components.events.addEventListener('connection:open', (evt) => {\n        const connection = evt.detail\n        this.identify(connection)\n          .catch(err => {\n            if (err.name === UnsupportedProtocolError.name) {\n              // the remote did not support identify, ignore the error\n              return\n            }\n\n            this.log.error('error during identify trigged by connection:open', err)\n          })\n      })\n    }\n  }\n\n  [serviceCapabilities]: string[] = [\n    '@libp2p/identify'\n  ]\n\n  async _identify (connection: Connection, options: AbortOptions = {}): Promise<IdentifyMessage> {\n    let stream: Stream | undefined\n\n    if (options.signal == null) {\n      const signal = AbortSignal.timeout(this.timeout)\n      setMaxListeners(Infinity, signal)\n\n      options = {\n        ...options,\n        signal\n      }\n    }\n\n    try {\n      stream = await connection.newStream(this.protocol, {\n        ...options,\n        runOnLimitedConnection: this.runOnLimitedConnection\n      })\n\n      const pb = pbStream(stream, {\n        maxDataLength: this.maxMessageSize\n      }).pb(IdentifyMessage)\n\n      const message = await pb.read(options)\n\n      await stream.close(options)\n\n      return message\n    } catch (err: any) {\n      stream?.abort(err)\n      throw err\n    }\n  }\n\n  async identify (connection: Connection, options: AbortOptions = {}): Promise<IdentifyResult> {\n    const message = await this._identify(connection, options)\n    const {\n      publicKey,\n      protocols,\n      observedAddr\n    } = message\n\n    if (publicKey == null) {\n      throw new InvalidMessageError('public key was missing from identify message')\n    }\n\n    const key = publicKeyFromProtobuf(publicKey)\n    const id = peerIdFromCID(key.toCID())\n\n    if (!connection.remotePeer.equals(id)) {\n      throw new InvalidMessageError('identified peer does not match the expected peer')\n    }\n\n    if (this.peerId.equals(id)) {\n      throw new InvalidMessageError('identified peer is our own peer id?')\n    }\n\n    // if the observed address is publicly routable, add it to the address\n    // manager for verification via AutoNAT\n    this.maybeAddObservedAddress(observedAddr)\n\n    this.log('identify completed for peer %p and protocols %o', id, protocols)\n\n    return consumeIdentifyMessage(this.peerStore, this.events, this.log, connection, message)\n  }\n\n  private maybeAddObservedAddress (observedAddr: Uint8Array | undefined): void {\n    const cleanObservedAddr = getCleanMultiaddr(observedAddr)\n\n    if (cleanObservedAddr == null) {\n      return\n    }\n\n    this.log.trace('our observed address was %a', cleanObservedAddr)\n\n    if (isPrivate(cleanObservedAddr)) {\n      this.log.trace('our observed address was private')\n      return\n    }\n\n    const tuples = cleanObservedAddr.getComponents()\n\n    if (((tuples[0].code === CODE_IP6) || (tuples[0].code === CODE_IP6ZONE && tuples[1].code === CODE_IP6)) && !isGlobalUnicast(cleanObservedAddr)) {\n      this.log.trace('our observed address was IPv6 but not a global unicast address')\n      return\n    }\n\n    if (TCP.exactMatch(cleanObservedAddr)) {\n      // TODO: because socket dials can't use the same local port as the TCP\n      // listener, many unique observed addresses are reported so ignore all\n      // TCP addresses until https://github.com/libp2p/js-libp2p/issues/2620\n      // is resolved\n      return\n    }\n\n    this.log.trace('storing the observed address')\n    this.addressManager.addObservedAddr(cleanObservedAddr)\n  }\n\n  /**\n   * Sends the `Identify` response with the Signed Peer Record\n   * to the requesting peer over the given `connection`\n   */\n  async handleProtocol (data: IncomingStreamData): Promise<void> {\n    const { connection, stream } = data\n\n    const signal = AbortSignal.timeout(this.timeout)\n\n    setMaxListeners(Infinity, signal)\n\n    try {\n      const peerData = await this.peerStore.get(this.peerId)\n      const multiaddrs = this.addressManager.getAddresses().map(ma => ma.decapsulateCode(protocols('p2p').code))\n      let signedPeerRecord = peerData.peerRecordEnvelope\n\n      if (multiaddrs.length > 0 && signedPeerRecord == null) {\n        const peerRecord = new PeerRecord({\n          peerId: this.peerId,\n          multiaddrs\n        })\n\n        const envelope = await RecordEnvelope.seal(peerRecord, this.privateKey)\n        signedPeerRecord = envelope.marshal().subarray()\n      }\n\n      let observedAddr: Uint8Array | undefined = connection.remoteAddr.bytes\n\n      if (!IP_OR_DOMAIN.matches(connection.remoteAddr)) {\n        observedAddr = undefined\n      }\n\n      const pb = pbStream(stream).pb(IdentifyMessage)\n\n      await pb.write({\n        protocolVersion: this.host.protocolVersion,\n        agentVersion: this.host.agentVersion,\n        publicKey: publicKeyToProtobuf(this.privateKey.publicKey),\n        listenAddrs: multiaddrs.map(addr => addr.bytes),\n        signedPeerRecord,\n        observedAddr,\n        protocols: peerData.protocols\n      }, {\n        signal\n      })\n\n      await stream.close({\n        signal\n      })\n    } catch (err: any) {\n      this.log.error('could not respond to identify request', err)\n      stream.abort(err)\n    }\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * Use the `identify` function to add support for the [Identify protocol](https://github.com/libp2p/specs/blob/master/identify/README.md) to libp2p.\n *\n * This protocol allows network peers to discover the multiaddrs the current node listens on, and the protocols it supports.\n *\n * A second function, `identifyPush` is also exported to add support for [identify/push](https://github.com/libp2p/specs/blob/master/identify/README.md#identifypush).\n *\n * This protocol will send updates to all connected peers when the multiaddrs or protocols of the current node change.\n *\n * > [!TIP]\n * > For maximum network compatibility you should configure both protocols\n *\n * @example Enabling identify\n *\n * ```typescript\n * import { createLibp2p } from 'libp2p'\n * import { identify } from '@libp2p/identify'\n *\n * const node = await createLibp2p({\n *   // ...other options\n *   services: {\n *     identify: identify()\n *   }\n * })\n * ```\n *\n * @example Enabling identify push\n *\n * ```typescript\n * import { createLibp2p } from 'libp2p'\n * import { identifyPush } from '@libp2p/identify'\n *\n * const node = await createLibp2p({\n *   // ...other options\n *   services: {\n *     identifyPush: identifyPush()\n *   }\n * })\n * ```\n */\n\nimport { IdentifyPush as IdentifyPushClass } from './identify-push.js'\nimport { Identify as IdentifyClass } from './identify.js'\nimport type { AbortOptions, IdentifyResult, Libp2pEvents, ComponentLogger, NodeInfo, PeerId, PeerStore, Connection, PrivateKey } from '@libp2p/interface'\nimport type { AddressManager, ConnectionManager, Registrar } from '@libp2p/interface-internal'\nimport type { TypedEventTarget } from 'main-event'\n\nexport interface IdentifyInit {\n  /**\n   * The prefix to use for the protocol\n   *\n   * @default 'ipfs'\n   */\n  protocolPrefix?: string\n\n  /**\n   * What details we should send as part of an identify message\n   *\n   * @deprecated Use `nodeInfo.userAgent` in the main libp2p config instead\n   */\n  agentVersion?: string\n\n  /**\n   * How long we should wait for a remote peer to send their identify response\n   *\n   * @default 5000\n   */\n  timeout?: number\n\n  /**\n   * Identify responses larger than this in bytes will be rejected\n   *\n   * @default 8192\n   */\n  maxMessageSize?: number\n\n  /**\n   * The maximum number of inbound streams that may be open on a single\n   * connection for this protocol\n   *\n   * @default 1\n   */\n  maxInboundStreams?: number\n\n  /**\n   * The maximum number of outbound streams that may be open on a single\n   * connection for this protocol\n   *\n   * @default 1\n   */\n  maxOutboundStreams?: number\n\n  /**\n   * The maximum number of observed addresses to send in an Identify message\n   */\n  maxObservedAddresses?: number\n\n  /**\n   * Whether to run on connections with data or duration limits\n   *\n   * @default true\n   */\n  runOnLimitedConnection?: boolean\n\n  /**\n   * Whether to automatically run identify on newly opened connections\n   *\n   * @default true\n   */\n  runOnConnectionOpen?: boolean\n}\n\nexport interface IdentifyPushInit extends Omit<IdentifyInit, 'runOnConnectionOpen'> {\n  /**\n   * Whether to automatically dial identify-push on self updates\n   *\n   * @default true\n   */\n  runOnSelfUpdate?: boolean\n\n  /**\n   * Push to this many connections in parallel\n   *\n   * @default 32\n   */\n  concurrency?: number\n\n  /**\n   * To prevent rapid flurries of network activity when addresses/protocols\n   * change rapidly in succession, debounce the sending of push message by this\n   * amount in ms\n   *\n   * @default 1_000\n   */\n  debounce?: number\n}\n\nexport interface IdentifyComponents {\n  peerId: PeerId\n  privateKey: PrivateKey\n  peerStore: PeerStore\n  registrar: Registrar\n  addressManager: AddressManager\n  events: TypedEventTarget<Libp2pEvents>\n  logger: ComponentLogger\n  nodeInfo: NodeInfo\n}\n\nexport interface IdentifyPushComponents extends IdentifyComponents {\n  connectionManager: ConnectionManager\n}\n\nexport interface Identify {\n  /**\n   * Please use with caution.\n   *\n   * Due to the default limits on inbound/outbound streams for this protocol,\n   * invoking this method when runOnConnectionOpen is true can lead to\n   * unpredictable results as streams may be closed by the local or the remote\n   * node.\n   *\n   * If you find yourself needing to call this method to discover other peers\n   * that support your protocol, you may be better off configuring a topology to\n   * be notified instead.\n   *\n   * Alternatively the libp2p node itself will emit `peer:identify` events after\n   * identify has taken place which can be used to passively detect new peers.\n   */\n  identify(connection: Connection, options?: AbortOptions): Promise<IdentifyResult>\n}\n\nexport interface IdentifyPush {\n  push(): Promise<void>\n}\n\nexport function identify (init: IdentifyInit = {}): (components: IdentifyComponents) => Identify {\n  return (components) => new IdentifyClass(components, init)\n}\n\nexport function identifyPush (init: IdentifyPushInit = {}): (components: IdentifyPushComponents) => IdentifyPush {\n  return (components) => new IdentifyPushClass(components, init)\n}\n", "import { KEEP_ALIVE } from '@libp2p/interface'\n\nexport const second = 1000\nexport const minute = 60 * second\nexport const hour = 60 * minute\n\nexport const MAX_RECORD_AGE = 36 * hour\n\nexport const PROTOCOL = '/ipfs/kad/1.0.0'\n\n/**\n * @see https://github.com/libp2p/specs/blob/master/kad-dht/README.md#content-provider-advertisement-and-discovery\n */\nexport const PROVIDERS_VALIDITY = 48 * hour\n\nexport const PROVIDERS_CLEANUP_INTERVAL = hour\n\n// Re-run the provide operation when the expiry of our provider records is within this amount\nexport const REPROVIDE_THRESHOLD = 24 * hour\n\n// How many reprovide operations to run at once\nexport const REPROVIDE_CONCURRENCY = 10\n\n// How long to let the reprovide queue grow before we wait for capacity\nexport const REPROVIDE_MAX_QUEUE_SIZE = 16_384\n\n// How often to check if records need re-providing\nexport const REPROVIDE_INTERVAL = hour\n\n// How long to reprovide for\nexport const REPROVIDE_TIMEOUT = hour\n\nexport const READ_MESSAGE_TIMEOUT = 10 * second\n\n// How long to process newly connected peers for\nexport const ON_PEER_CONNECT_TIMEOUT = 10 * second\n\n// The number of records that will be retrieved on a call to getMany()\nexport const GET_MANY_RECORD_COUNT = 16\n\n// K is the maximum number of requests to perform before returning failure\nexport const K = 20\n\n// Alpha is the concurrency for asynchronous requests\nexport const ALPHA = 10\n\n// How often we look for our closest DHT neighbors\nexport const QUERY_SELF_INTERVAL = 5 * minute\n\n// How often we look for the first set of our closest DHT neighbors\nexport const QUERY_SELF_INITIAL_INTERVAL = second\n\n// How long to look for our closest DHT neighbors for\nexport const QUERY_SELF_TIMEOUT = 5 * second\n\n// How often we try to find new peers\nexport const TABLE_REFRESH_INTERVAL = 5 * minute\n\n// How how long to look for new peers for\nexport const TABLE_REFRESH_QUERY_TIMEOUT = 30 * second\n\n// When a timeout is not specified, run a query for this long\nexport const DEFAULT_QUERY_TIMEOUT = 180 * second\n\n// used to ensure connections to our closest peers remain open\nexport const KEEP_ALIVE_TAG = `${KEEP_ALIVE}-kad-dht`\n", "import { decodeMessage, encodeMessage, message } from 'protons-runtime'\nimport { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc'\nimport type { Codec, DecodeOptions } from 'protons-runtime'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface Record {\n  key: Uint8Array\n  value: Uint8Array\n  timeReceived: string\n}\n\nexport namespace Record {\n  let _codec: Codec<Record>\n\n  export const codec = (): Codec<Record> => {\n    if (_codec == null) {\n      _codec = message<Record>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if ((obj.key != null && obj.key.byteLength > 0)) {\n          w.uint32(10)\n          w.bytes(obj.key)\n        }\n\n        if ((obj.value != null && obj.value.byteLength > 0)) {\n          w.uint32(18)\n          w.bytes(obj.value)\n        }\n\n        if ((obj.timeReceived != null && obj.timeReceived !== '')) {\n          w.uint32(42)\n          w.string(obj.timeReceived)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          key: uint8ArrayAlloc(0),\n          value: uint8ArrayAlloc(0),\n          timeReceived: ''\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.key = reader.bytes()\n              break\n            }\n            case 2: {\n              obj.value = reader.bytes()\n              break\n            }\n            case 5: {\n              obj.timeReceived = reader.string()\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Record>): Uint8Array => {\n    return encodeMessage(obj, Record.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Record>): Record => {\n    return decodeMessage(buf, Record.codec(), opts)\n  }\n}\n", "/**\n * Convert a JavaScript date into an `RFC3339Nano` formatted\n * string\n */\nexport function toRFC3339 (time: Date): string {\n  const year = time.getUTCFullYear()\n  const month = String(time.getUTCMonth() + 1).padStart(2, '0')\n  const day = String(time.getUTCDate()).padStart(2, '0')\n  const hour = String(time.getUTCHours()).padStart(2, '0')\n  const minute = String(time.getUTCMinutes()).padStart(2, '0')\n  const seconds = String(time.getUTCSeconds()).padStart(2, '0')\n  const milliseconds = time.getUTCMilliseconds()\n  const nanoseconds = String(milliseconds * 1000 * 1000).padStart(9, '0')\n\n  return `${year}-${month}-${day}T${hour}:${minute}:${seconds}.${nanoseconds}Z`\n}\n\n/**\n * Parses a date string formatted as `RFC3339Nano` into a\n * JavaScript Date object\n */\nexport function parseRFC3339 (time: string): Date {\n  const rfc3339Matcher = new RegExp(\n    // 2006-01-02T\n    '(\\\\d{4})-(\\\\d{2})-(\\\\d{2})T' +\n    // 15:04:05\n    '(\\\\d{2}):(\\\\d{2}):(\\\\d{2})' +\n    // .999999999Z\n    '\\\\.(\\\\d+)Z'\n  )\n  const m = String(time).trim().match(rfc3339Matcher)\n\n  if (m == null) {\n    throw new Error('Invalid format')\n  }\n\n  const year = parseInt(m[1], 10)\n  const month = parseInt(m[2], 10) - 1\n  const date = parseInt(m[3], 10)\n  const hour = parseInt(m[4], 10)\n  const minute = parseInt(m[5], 10)\n  const second = parseInt(m[6], 10)\n  const millisecond = parseInt(m[7].slice(0, -6), 10)\n\n  return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond))\n}\n", "/**\n * @packageDocumentation\n *\n * This is an implementation of the [routing record format](https://github.com/libp2p/specs/blob/b9efe152c29f93f7a87931c14d78ae11e7924d5a/kad-dht/README.md?plain=1#L408-L425) used by libp2p to store data in the datastore passed to the libp2p constructor.\n *\n * @example Deserialization\n *\n * ```TypeScript\n * import { Libp2pRecord } from '@libp2p/record'\n *\n * const buf = Uint8Array.from([0, 1, 2, 3])\n * const record = Libp2pRecord.deserialize(buf)\n * ```\n *\n * @example Serialization\n *\n * ```TypeScript\n * import { Libp2pRecord } from '@libp2p/record'\n *\n * const key = Uint8Array.from([0, 1, 2, 3])\n * const value = Uint8Array.from([0, 1, 2, 3])\n * const timeReceived = new Date()\n *\n * const record = new Libp2pRecord(key, value, timeReceived)\n * const buf = record.serialize()\n * ```\n */\n\nimport {\n  Record\n} from './record.js'\nimport * as utils from './utils.js'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport class Libp2pRecord {\n  public key: Uint8Array\n  public value: Uint8Array\n  public timeReceived: Date\n\n  constructor (key: Uint8Array, value: Uint8Array, timeReceived: Date) {\n    if (!(key instanceof Uint8Array)) {\n      throw new Error('key must be a Uint8Array')\n    }\n\n    if (!(value instanceof Uint8Array)) {\n      throw new Error('value must be a Uint8Array')\n    }\n\n    this.key = key\n    this.value = value\n    this.timeReceived = timeReceived\n  }\n\n  serialize (): Uint8Array {\n    return Record.encode(this.prepareSerialize())\n  }\n\n  /**\n   * Return the object format ready to be given to the protobuf library.\n   */\n  prepareSerialize (): Record {\n    return {\n      key: this.key,\n      value: this.value,\n      timeReceived: utils.toRFC3339(this.timeReceived)\n    }\n  }\n\n  /**\n   * Decode a protobuf encoded record\n   */\n  static deserialize (raw: Uint8Array | Uint8ArrayList): Libp2pRecord {\n    const rec = Record.decode(raw)\n\n    return new Libp2pRecord(rec.key, rec.value, new Date(rec.timeReceived))\n  }\n\n  /**\n   * Create a record from the raw object returned from the protobuf library\n   */\n  static fromDeserialized (obj: Record): Libp2pRecord {\n    const receivedTime = utils.parseRFC3339(obj.timeReceived)\n\n    if (obj.key == null) {\n      throw new Error('key missing from deserialized object')\n    }\n\n    if (obj.value == null) {\n      throw new Error('value missing from deserialized object')\n    }\n\n    const rec = new Libp2pRecord(\n      obj.key, obj.value, receivedTime\n    )\n\n    return rec\n  }\n}\n", "/**\n * An error occurred during a query\n */\nexport class QueryError extends Error {\n  constructor (message = 'Query error') {\n    super(message)\n    this.name = 'QueryError'\n  }\n}\n\n/**\n * An invalid record was received\n */\nexport class InvalidRecordError extends Error {\n  constructor (message = 'Invalid record') {\n    super(message)\n    this.name = 'InvalidRecordError'\n  }\n}\n\n/**\n * A selector function was missing\n */\nexport class MissingSelectorError extends Error {\n  constructor (message = 'No selector function configured for prefix') {\n    super(message)\n    this.name = 'MissingSelectorError'\n  }\n}\n", "import { decodeMessage, encodeMessage, enumeration, MaxLengthError, message } from 'protons-runtime'\nimport { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc'\nimport type { Codec, DecodeOptions } from 'protons-runtime'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface Record {\n  key?: Uint8Array\n  value?: Uint8Array\n  author?: Uint8Array\n  signature?: Uint8Array\n  timeReceived?: string\n}\n\nexport namespace Record {\n  let _codec: Codec<Record>\n\n  export const codec = (): Codec<Record> => {\n    if (_codec == null) {\n      _codec = message<Record>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.key != null) {\n          w.uint32(10)\n          w.bytes(obj.key)\n        }\n\n        if (obj.value != null) {\n          w.uint32(18)\n          w.bytes(obj.value)\n        }\n\n        if (obj.author != null) {\n          w.uint32(26)\n          w.bytes(obj.author)\n        }\n\n        if (obj.signature != null) {\n          w.uint32(34)\n          w.bytes(obj.signature)\n        }\n\n        if (obj.timeReceived != null) {\n          w.uint32(42)\n          w.string(obj.timeReceived)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {}\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.key = reader.bytes()\n              break\n            }\n            case 2: {\n              obj.value = reader.bytes()\n              break\n            }\n            case 3: {\n              obj.author = reader.bytes()\n              break\n            }\n            case 4: {\n              obj.signature = reader.bytes()\n              break\n            }\n            case 5: {\n              obj.timeReceived = reader.string()\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Record>): Uint8Array => {\n    return encodeMessage(obj, Record.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Record>): Record => {\n    return decodeMessage(buf, Record.codec(), opts)\n  }\n}\n\nexport enum MessageType {\n  PUT_VALUE = 'PUT_VALUE',\n  GET_VALUE = 'GET_VALUE',\n  ADD_PROVIDER = 'ADD_PROVIDER',\n  GET_PROVIDERS = 'GET_PROVIDERS',\n  FIND_NODE = 'FIND_NODE',\n  PING = 'PING'\n}\n\nenum __MessageTypeValues {\n  PUT_VALUE = 0,\n  GET_VALUE = 1,\n  ADD_PROVIDER = 2,\n  GET_PROVIDERS = 3,\n  FIND_NODE = 4,\n  PING = 5\n}\n\nexport namespace MessageType {\n  export const codec = (): Codec<MessageType> => {\n    return enumeration<MessageType>(__MessageTypeValues)\n  }\n}\nexport enum ConnectionType {\n  NOT_CONNECTED = 'NOT_CONNECTED',\n  CONNECTED = 'CONNECTED',\n  CAN_CONNECT = 'CAN_CONNECT',\n  CANNOT_CONNECT = 'CANNOT_CONNECT'\n}\n\nenum __ConnectionTypeValues {\n  NOT_CONNECTED = 0,\n  CONNECTED = 1,\n  CAN_CONNECT = 2,\n  CANNOT_CONNECT = 3\n}\n\nexport namespace ConnectionType {\n  export const codec = (): Codec<ConnectionType> => {\n    return enumeration<ConnectionType>(__ConnectionTypeValues)\n  }\n}\nexport interface PeerInfo {\n  id: Uint8Array\n  multiaddrs: Uint8Array[]\n  connection?: ConnectionType\n}\n\nexport namespace PeerInfo {\n  let _codec: Codec<PeerInfo>\n\n  export const codec = (): Codec<PeerInfo> => {\n    if (_codec == null) {\n      _codec = message<PeerInfo>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if ((obj.id != null && obj.id.byteLength > 0)) {\n          w.uint32(10)\n          w.bytes(obj.id)\n        }\n\n        if (obj.multiaddrs != null) {\n          for (const value of obj.multiaddrs) {\n            w.uint32(18)\n            w.bytes(value)\n          }\n        }\n\n        if (obj.connection != null) {\n          w.uint32(24)\n          ConnectionType.codec().encode(obj.connection, w)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          id: uint8ArrayAlloc(0),\n          multiaddrs: []\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.id = reader.bytes()\n              break\n            }\n            case 2: {\n              if (opts.limits?.multiaddrs != null && obj.multiaddrs.length === opts.limits.multiaddrs) {\n                throw new MaxLengthError('Decode error - map field \"multiaddrs\" had too many elements')\n              }\n\n              obj.multiaddrs.push(reader.bytes())\n              break\n            }\n            case 3: {\n              obj.connection = ConnectionType.codec().decode(reader)\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<PeerInfo>): Uint8Array => {\n    return encodeMessage(obj, PeerInfo.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<PeerInfo>): PeerInfo => {\n    return decodeMessage(buf, PeerInfo.codec(), opts)\n  }\n}\n\nexport interface Message {\n  type: MessageType\n  clusterLevel?: number\n  key?: Uint8Array\n  record?: Uint8Array\n  closer: PeerInfo[]\n  providers: PeerInfo[]\n}\n\nexport namespace Message {\n  let _codec: Codec<Message>\n\n  export const codec = (): Codec<Message> => {\n    if (_codec == null) {\n      _codec = message<Message>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.type != null && __MessageTypeValues[obj.type] !== 0) {\n          w.uint32(8)\n          MessageType.codec().encode(obj.type, w)\n        }\n\n        if (obj.clusterLevel != null) {\n          w.uint32(80)\n          w.int32(obj.clusterLevel)\n        }\n\n        if (obj.key != null) {\n          w.uint32(18)\n          w.bytes(obj.key)\n        }\n\n        if (obj.record != null) {\n          w.uint32(26)\n          w.bytes(obj.record)\n        }\n\n        if (obj.closer != null) {\n          for (const value of obj.closer) {\n            w.uint32(66)\n            PeerInfo.codec().encode(value, w)\n          }\n        }\n\n        if (obj.providers != null) {\n          for (const value of obj.providers) {\n            w.uint32(74)\n            PeerInfo.codec().encode(value, w)\n          }\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {\n          type: MessageType.PUT_VALUE,\n          closer: [],\n          providers: []\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.type = MessageType.codec().decode(reader)\n              break\n            }\n            case 10: {\n              obj.clusterLevel = reader.int32()\n              break\n            }\n            case 2: {\n              obj.key = reader.bytes()\n              break\n            }\n            case 3: {\n              obj.record = reader.bytes()\n              break\n            }\n            case 8: {\n              if (opts.limits?.closer != null && obj.closer.length === opts.limits.closer) {\n                throw new MaxLengthError('Decode error - map field \"closer\" had too many elements')\n              }\n\n              obj.closer.push(PeerInfo.codec().decode(reader, reader.uint32(), {\n                limits: opts.limits?.closer$\n              }))\n              break\n            }\n            case 9: {\n              if (opts.limits?.providers != null && obj.providers.length === opts.limits.providers) {\n                throw new MaxLengthError('Decode error - map field \"providers\" had too many elements')\n              }\n\n              obj.providers.push(PeerInfo.codec().decode(reader, reader.uint32(), {\n                limits: opts.limits?.providers$\n              }))\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Message>): Uint8Array => {\n    return encodeMessage(obj, Message.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Message>): Message => {\n    return decodeMessage(buf, Message.codec(), opts)\n  }\n}\n", "import type { MessageType, SendQueryEvent, PeerResponseEvent, AddPeerEvent, ValueEvent, ProviderEvent, QueryErrorEvent, FinalPeerEvent, DisjointPath, PathEndedEvent, DialPeerEvent } from '../index.js'\nimport type { PeerId, PeerInfo } from '@libp2p/interface'\nimport type { Libp2pRecord } from '@libp2p/record'\nimport type { ProgressOptions } from 'progress-events'\n\nexport interface QueryEventFields {\n  to: PeerId\n  type: MessageType\n  path: DisjointPath\n}\n\nexport function sendQueryEvent (fields: QueryEventFields, options: ProgressOptions = {}): SendQueryEvent {\n  const event: SendQueryEvent = {\n    ...fields,\n    name: 'SEND_QUERY',\n    type: 0,\n    messageName: fields.type,\n    messageType: fields.type\n  }\n\n  options.onProgress?.(new CustomEvent('kad-dht:query:send-query', { detail: event }))\n\n  return event\n}\n\nexport interface PeerResponseEventFields {\n  from: PeerId\n  messageType: MessageType\n  path: DisjointPath\n  closer?: PeerInfo[]\n  providers?: PeerInfo[]\n  record?: Libp2pRecord\n}\n\nexport function peerResponseEvent (fields: PeerResponseEventFields, options: ProgressOptions = {}): PeerResponseEvent {\n  const event: PeerResponseEvent = {\n    ...fields,\n    name: 'PEER_RESPONSE',\n    type: 1,\n    messageName: fields.messageType,\n    closer: fields.closer ?? [],\n    providers: fields.providers ?? []\n  }\n\n  options.onProgress?.(new CustomEvent('kad-dht:query:peer-response', { detail: event }))\n\n  return event\n}\n\nexport interface FinalPeerEventFields {\n  from: PeerId\n  peer: PeerInfo\n  path: DisjointPath\n}\n\nexport function finalPeerEvent (fields: FinalPeerEventFields, options: ProgressOptions = {}): FinalPeerEvent {\n  const event: FinalPeerEvent = {\n    ...fields,\n    name: 'FINAL_PEER',\n    type: 2\n  }\n\n  options.onProgress?.(new CustomEvent('kad-dht:query:final-peer', { detail: event }))\n\n  return event\n}\n\nexport interface ErrorEventFields {\n  from: PeerId\n  error: Error\n  path: DisjointPath\n}\n\nexport function queryErrorEvent (fields: ErrorEventFields, options: ProgressOptions = {}): QueryErrorEvent {\n  const event: QueryErrorEvent = {\n    ...fields,\n    name: 'QUERY_ERROR',\n    type: 3\n  }\n\n  options.onProgress?.(new CustomEvent('kad-dht:query:query-error', { detail: event }))\n\n  return event\n}\n\nexport interface ProviderEventFields {\n  from: PeerId\n  providers: PeerInfo[]\n  path: DisjointPath\n}\n\nexport function providerEvent (fields: ProviderEventFields, options: ProgressOptions = {}): ProviderEvent {\n  const event: ProviderEvent = {\n    ...fields,\n    name: 'PROVIDER',\n    type: 4\n  }\n\n  options.onProgress?.(new CustomEvent('kad-dht:query:provider', { detail: event }))\n\n  return event\n}\n\nexport interface ValueEventFields {\n  from: PeerId\n  value: Uint8Array\n  path: DisjointPath\n}\n\nexport function valueEvent (fields: ValueEventFields, options: ProgressOptions = {}): ValueEvent {\n  const event: ValueEvent = {\n    ...fields,\n    name: 'VALUE',\n    type: 5\n  }\n\n  options.onProgress?.(new CustomEvent('kad-dht:query:value', { detail: event }))\n\n  return event\n}\n\nexport interface AddPeerEventFields {\n  peer: PeerId\n  path: DisjointPath\n}\n\nexport function addPeerEvent (fields: AddPeerEventFields, options: ProgressOptions = {}): AddPeerEvent {\n  const event: AddPeerEvent = {\n    ...fields,\n    name: 'ADD_PEER',\n    type: 6\n  }\n\n  options.onProgress?.(new CustomEvent('kad-dht:query:add-peer', { detail: event }))\n\n  return event\n}\n\nexport interface DialPeerEventFields {\n  peer: PeerId\n  path: DisjointPath\n}\n\nexport function dialPeerEvent (fields: DialPeerEventFields, options: ProgressOptions = {}): DialPeerEvent {\n  const event: DialPeerEvent = {\n    ...fields,\n    name: 'DIAL_PEER',\n    type: 7\n  }\n\n  options.onProgress?.(new CustomEvent('kad-dht:query:dial-peer', { detail: event }))\n\n  return event\n}\n\nexport interface PathEndedEventFields {\n  path: DisjointPath\n}\n\nexport function pathEndedEvent (fields: PathEndedEventFields, options: ProgressOptions = {}): PathEndedEvent {\n  const event: PathEndedEvent = {\n    ...fields,\n    name: 'PATH_ENDED',\n    type: 8\n  }\n\n  options.onProgress?.(new CustomEvent('kad-dht:query:path-ended', { detail: event }))\n\n  return event\n}\n", "import { InvalidParametersError } from '@libp2p/interface'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { MissingSelectorError } from '../errors.js'\nimport type { Selectors } from '../index.js'\n\n/**\n * Select the best record out of the given records\n */\nexport function bestRecord (selectors: Selectors, k: Uint8Array, records: Uint8Array[]): number {\n  if (records.length === 0) {\n    throw new InvalidParametersError('No records given')\n  }\n\n  const kStr = uint8ArrayToString(k)\n  const parts = kStr.split('/')\n\n  if (parts.length < 3) {\n    throw new InvalidParametersError('Record key does not have a selector function')\n  }\n\n  const selector = selectors[parts[1].toString()]\n\n  if (selector == null) {\n    throw new MissingSelectorError(`No selector function configured for key type \"${parts[1]}\"`)\n  }\n\n  if (records.length === 1) {\n    return 0\n  }\n\n  return selector(k, records)\n}\n\n/**\n * Best record selector, for public key records.\n * Simply returns the first record, as all valid public key\n * records are equal\n */\nfunction publicKey (k: Uint8Array, records: Uint8Array[]): number {\n  return 0\n}\n\nexport const selectors: Selectors = {\n  pk: publicKey\n}\n", "import { publicKeyFromProtobuf } from '@libp2p/crypto/keys'\nimport { InvalidParametersError } from '@libp2p/interface'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport type { Validators } from '../index.js'\nimport type { Libp2pRecord } from '@libp2p/record'\nimport type { AbortOptions } from 'it-pushable'\n\n/**\n * Checks a record and ensures it is still valid.\n * It runs the needed validators.\n * If verification fails the returned Promise will reject with the error.\n */\nexport async function verifyRecord (validators: Validators, record: Libp2pRecord, options?: AbortOptions): Promise<void> {\n  const key = record.key\n  const keyString = uint8ArrayToString(key)\n  const parts = keyString.split('/')\n\n  if (parts.length < 3) {\n    // No validator available\n    return\n  }\n\n  const validator = validators[parts[1].toString()]\n\n  if (validator == null) {\n    throw new InvalidParametersError(`No validator available for key type \"${parts[1]}\"`)\n  }\n\n  await validator(key, record.value, options)\n}\n\n/**\n * Validator for public key records.\n * Verifies that the passed in record value is the PublicKey\n * that matches the passed in key.\n * If validation fails the returned Promise will reject with the error.\n *\n * @param {Uint8Array} key - A valid key is of the form `'/pk/<keymultihash>'`\n * @param {Uint8Array} publicKey - The public key to validate against (protobuf encoded).\n */\nconst validatePublicKeyRecord = async (key: Uint8Array, publicKey: Uint8Array, options?: AbortOptions): Promise<void> => {\n  if (!(key instanceof Uint8Array)) {\n    throw new InvalidParametersError('\"key\" must be a Uint8Array')\n  }\n\n  if (key.byteLength < 5) {\n    throw new InvalidParametersError('Invalid public key record')\n  }\n\n  const prefix = uint8ArrayToString(key.subarray(0, 4))\n\n  if (prefix !== '/pk/') {\n    throw new InvalidParametersError('key was not prefixed with /pk/')\n  }\n\n  const pubKey = publicKeyFromProtobuf(publicKey)\n  const keyHash = key.slice(4)\n\n  if (!uint8ArrayEquals(keyHash, pubKey.toMultihash().bytes)) {\n    throw new InvalidParametersError('public key does not match passed in key')\n  }\n}\n\nexport const validators: Validators = {\n  pk: validatePublicKeyRecord\n}\n", "export const empty = new Uint8Array(0)\n\nexport function toHex (d: Uint8Array): string {\n  return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n}\n\nexport function fromHex (hex: string): Uint8Array {\n  const hexes = hex.match(/../g)\n  return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\nexport function equals (aa: Uint8Array, bb: Uint8Array): boolean {\n  if (aa === bb) { return true }\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function coerce (o: ArrayBufferView | ArrayBuffer | Uint8Array): Uint8Array {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') { return o }\n  if (o instanceof ArrayBuffer) { return new Uint8Array(o) }\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\nexport function isBinary (o: unknown): o is ArrayBuffer | ArrayBufferView {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n}\n\nexport function fromString (str: string): Uint8Array {\n  return new TextEncoder().encode(str)\n}\n\nexport function toString (b: Uint8Array): string {\n  return new TextDecoder().decode(b)\n}\n", "/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  /**\n   * @param {any[] | Iterable<number>} source\n   */\n  function encode (source) {\n    // @ts-ignore\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  /**\n   * @param {string | string[]} source\n   */\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  /**\n   * @param {string | string[]} string\n   */\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n", "import { coerce } from '../bytes.js'\nimport basex from '../vendor/base-x.js'\nimport type { BaseCodec, BaseDecoder, BaseEncoder, CombobaseDecoder, Multibase, MultibaseCodec, MultibaseDecoder, MultibaseEncoder, UnibaseDecoder } from './interface.js'\n\ninterface EncodeFn { (bytes: Uint8Array): string }\ninterface DecodeFn { (text: string): Uint8Array }\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder<Base extends string, Prefix extends string> implements MultibaseEncoder<Prefix>, BaseEncoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  encode (bytes: Uint8Array): Multibase<Prefix> {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder<Base extends string, Prefix extends string> implements MultibaseDecoder<Prefix>, UnibaseDecoder<Prefix>, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseDecode: DecodeFn\n  private readonly prefixCodePoint: number\n\n  constructor (name: Base, prefix: Prefix, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    const prefixCodePoint = prefix.codePointAt(0)\n    /* c8 ignore next 3 */\n    if (prefixCodePoint === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    this.prefixCodePoint = prefixCodePoint\n    this.baseDecode = baseDecode\n  }\n\n  decode (text: string): Uint8Array {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  or<OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n}\n\ntype Decoders<Prefix extends string> = Record<Prefix, UnibaseDecoder<Prefix>>\n\nclass ComposedDecoder<Prefix extends string> implements MultibaseDecoder<Prefix>, CombobaseDecoder<Prefix> {\n  readonly decoders: Decoders<Prefix>\n\n  constructor (decoders: Decoders<Prefix>) {\n    this.decoders = decoders\n  }\n\n  or <OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n\n  decode (input: string): Uint8Array {\n    const prefix = input[0] as Prefix\n    const decoder = this.decoders[prefix]\n    if (decoder != null) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\nexport function or <L extends string, R extends string> (left: UnibaseDecoder<L> | CombobaseDecoder<L>, right: UnibaseDecoder<R> | CombobaseDecoder<R>): ComposedDecoder<L | R> {\n  return new ComposedDecoder({\n    ...(left.decoders ?? { [(left as UnibaseDecoder<L>).prefix]: left }),\n    ...(right.decoders ?? { [(right as UnibaseDecoder<R>).prefix]: right })\n  } as Decoders<L | R>)\n}\n\nexport class Codec<Base extends string, Prefix extends string> implements MultibaseCodec<Prefix>, MultibaseEncoder<Prefix>, MultibaseDecoder<Prefix>, BaseCodec, BaseEncoder, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n  readonly baseDecode: DecodeFn\n  readonly encoder: Encoder<Base, Prefix>\n  readonly decoder: Decoder<Base, Prefix>\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  encode (input: Uint8Array): string {\n    return this.encoder.encode(input)\n  }\n\n  decode (input: string): Uint8Array {\n    return this.decoder.decode(input)\n  }\n}\n\nexport function from <Base extends string, Prefix extends string> ({ name, prefix, encode, decode }: { name: Base, prefix: Prefix, encode: EncodeFn, decode: DecodeFn }): Codec<Base, Prefix> {\n  return new Codec(name, prefix, encode, decode)\n}\n\nexport function baseX <Base extends string, Prefix extends string> ({ name, prefix, alphabet }: { name: Base, prefix: Prefix, alphabet: string }): Codec<Base, Prefix> {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: (text: string): Uint8Array => coerce(decode(text))\n  })\n}\n\nfunction decode (string: string, alphabetIdx: Record<string, number>, bitsPerChar: number, name: string): Uint8Array {\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = alphabetIdx[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\nfunction encode (data: Uint8Array, alphabet: string, bitsPerChar: number): string {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits !== 0) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (((out.length * bitsPerChar) & 7) !== 0) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\nfunction createAlphabetIdx (alphabet: string): Record<string, number> {\n  // Build the character lookup table:\n  const alphabetIdx: Record<string, number> = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    alphabetIdx[alphabet[i]] = i\n  }\n  return alphabetIdx\n}\n\n/**\n * RFC4648 Factory\n */\nexport function rfc4648 <Base extends string, Prefix extends string> ({ name, prefix, bitsPerChar, alphabet }: { name: Base, prefix: Prefix, bitsPerChar: number, alphabet: string }): Codec<Base, Prefix> {\n  const alphabetIdx = createAlphabetIdx(alphabet)\n  return from({\n    prefix,\n    name,\n    encode (input: Uint8Array): string {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input: string): Uint8Array {\n      return decode(input, alphabetIdx, bitsPerChar, name)\n    }\n  })\n}\n", "import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n", "import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n", "import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n", "/* eslint-disable */\nvar encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  // @ts-ignore\n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      // @ts-ignore\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  // @ts-ignore\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (/** @type {number} */ value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n", "import varint from './vendor/varint.js'\n\nexport function decode (data: Uint8Array, offset = 0): [number, number] {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\nexport function encodeTo (int: number, target: Uint8Array, offset = 0): Uint8Array {\n  varint.encode(int, target, offset)\n  return target\n}\n\nexport function encodingLength (int: number): number {\n  return varint.encodingLength(int)\n}\n", "import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\nimport type { MultihashDigest } from './interface.js'\n\n/**\n * Creates a multihash digest.\n */\nexport function create <Code extends number> (code: Code, digest: Uint8Array): Digest<Code, number> {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode (multihash: Uint8Array): MultihashDigest {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\nexport function equals (a: MultihashDigest, b: unknown): b is MultihashDigest {\n  if (a === b) {\n    return true\n  } else {\n    const data = b as { code?: unknown, size?: unknown, bytes?: unknown }\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest<Code extends number, Size extends number> implements MultihashDigest {\n  readonly code: Code\n  readonly size: Size\n  readonly digest: Uint8Array\n  readonly bytes: Uint8Array\n\n  /**\n   * Creates a multihash digest.\n   */\n  constructor (code: Code, size: Size, digest: Uint8Array, bytes: Uint8Array) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n\n/**\n * Used to check that the passed multihash has the passed code\n */\nexport function hasCode <T extends number> (digest: MultihashDigest, code: T): digest is MultihashDigest<T> {\n  return digest.code === code\n}\n", "import { base32 } from './bases/base32.js'\nimport { base36 } from './bases/base36.js'\nimport { base58btc } from './bases/base58.js'\nimport { coerce } from './bytes.js'\nimport * as Digest from './hashes/digest.js'\nimport * as varint from './varint.js'\nimport type * as API from './link/interface.js'\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\nexport function format <T extends API.Link<unknown, number, number, API.Version>, Prefix extends string> (link: T, base?: API.MultibaseEncoder<Prefix>): API.ToString<T, Prefix> {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        base as API.MultibaseEncoder<'z'> ?? base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        (base ?? base32.encoder) as API.MultibaseEncoder<Prefix>\n      )\n  }\n}\n\nexport function toJSON <Link extends API.UnknownLink> (link: Link): API.LinkJSON<Link> {\n  return {\n    '/': format(link)\n  }\n}\n\nexport function fromJSON <Link extends API.UnknownLink> (json: API.LinkJSON<Link>): CID<unknown, number, number, API.Version> {\n  return CID.parse(json['/'])\n}\n\nconst cache = new WeakMap<API.UnknownLink, Map<string, string>>()\n\nfunction baseCache (cid: API.UnknownLink): Map<string, string> {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\nexport class CID<Data = unknown, Format extends number = number, Alg extends number = number, Version extends API.Version = API.Version> implements API.Link<Data, Format, Alg, Version> {\n  readonly code: Format\n  readonly version: Version\n  readonly multihash: API.MultihashDigest<Alg>\n  readonly bytes: Uint8Array\n  readonly '/': Uint8Array\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param multihash - (Multi)hash of the of the content.\n   */\n  constructor (version: Version, code: Format, multihash: API.MultihashDigest<Alg>, bytes: Uint8Array) {\n    this.code = code\n    this.version = version\n    this.multihash = multihash\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID (): this {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset (): number {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength (): number {\n    return this.bytes.byteLength\n  }\n\n  toV0 (): CID<Data, API.DAG_PB, API.SHA_256, 0> {\n    switch (this.version) {\n      case 0: {\n        return this as CID<Data, API.DAG_PB, API.SHA_256, 0>\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return (\n          CID.createV0(\n            multihash as API.MultihashDigest<API.SHA_256>\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  toV1 (): CID<Data, Format, Alg, 1> {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return this as CID<Data, Format, Alg, 1>\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  equals (other: unknown): other is CID<Data, Format, Alg, Version> {\n    return CID.equals(this, other)\n  }\n\n  static equals <Data, Format extends number, Alg extends number, Version extends API.Version>(self: API.Link<Data, Format, Alg, Version>, other: unknown): other is CID {\n    const unknown = other as { code?: unknown, version?: unknown, multihash?: unknown }\n    return (\n      unknown != null &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  toString (base?: API.MultibaseEncoder<string>): string {\n    return format(this, base)\n  }\n\n  toJSON (): API.LinkJSON<this> {\n    return { '/': format(this) }\n  }\n\n  link (): this {\n    return this\n  }\n\n  readonly [Symbol.toStringTag] = 'CID';\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] (): string {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   */\n  static asCID <Data, Format extends number, Alg extends number, Version extends API.Version, U>(input: API.Link<Data, Format, Alg, Version> | U): CID<Data, Format, Alg, Version> | null {\n    if (input == null) {\n      return null\n    }\n\n    const value = input as any\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        multihash as API.MultihashDigest<Alg>,\n        bytes ?? encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest = Digest.decode(multihash) as API.MultihashDigest<Alg>\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param digest - (Multi)hash of the of the content.\n   */\n  static create <Data, Format extends number, Alg extends number, Version extends API.Version>(version: Version, code: Format, digest: API.MultihashDigest<Alg>): CID<Data, Format, Alg, Version> {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   */\n  static createV0 <T = unknown>(digest: API.MultihashDigest<typeof SHA_256_CODE>): CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0> {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @param code - Content encoding format code.\n   * @param digest - Multihash of the content.\n   */\n  static createV1 <Data, Code extends number, Alg extends number>(code: Code, digest: API.MultihashDigest<Alg>): CID<Data, Code, Alg, 1> {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   */\n  static decode <Data, Code extends number, Alg extends number, Version extends API.Version>(bytes: API.ByteView<API.Link<Data, Code, Alg, Version>>): CID<Data, Code, Alg, Version> {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length !== 0) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   */\n  static decodeFirst <T, C extends number, A extends number, V extends API.Version>(bytes: API.ByteView<API.Link<T, C, A, V>>): [CID<T, C, A, V>, Uint8Array] {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(digest as API.MultihashDigest<API.SHA_256>)\n        : CID.createV1(specs.codec, digest)\n    return [cid as CID<T, C, A, V>, bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   */\n  static inspectBytes <T, C extends number, A extends number, V extends API.Version>(initialBytes: API.ByteView<API.Link<T, C, A, V>>): { version: V, codec: C, multihashCode: A, digestSize: number, multihashSize: number, size: number } {\n    let offset = 0\n    const next = (): number => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = next() as V\n    let codec = DAG_PB_CODE as C\n    if (version as number === 18) {\n      // CIDv0\n      version = 0 as V\n      offset = 0\n    } else {\n      codec = next() as C\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = next() as A // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   */\n  static parse <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version>(source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): CID<Data, Code, Alg, Version> {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\nfunction parseCIDtoBytes <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version> (source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): [Prefix, API.ByteView<API.Link<Data, Code, Alg, Version>>] {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base ?? base58btc\n      return [\n        base58btc.prefix as Prefix,\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base ?? base58btc\n      return [base58btc.prefix as Prefix, decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base ?? base32\n      return [base32.prefix as Prefix, decoder.decode(source)]\n    }\n    case base36.prefix: {\n      const decoder = base ?? base36\n      return [base36.prefix as Prefix, decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [source[0] as Prefix, base.decode(source)]\n    }\n  }\n}\n\nfunction toStringV0 (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<'z'>): string {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nfunction toStringV1 <Prefix extends string> (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<Prefix>): string {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\nfunction encodeCID (version: API.Version, code: number, multihash: Uint8Array): Uint8Array {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n", "import { coerce } from '../bytes.js'\nimport type { ArrayBufferView, ByteView } from './interface.js'\n\nexport const name = 'raw'\nexport const code = 0x55\n\nexport function encode (node: Uint8Array): ByteView<Uint8Array> {\n  return coerce(node)\n}\n\nexport function decode (data: ByteView<Uint8Array> | ArrayBufferView<Uint8Array>): Uint8Array {\n  return coerce(data)\n}\n", "import * as Digest from './digest.js'\nimport type { MultihashHasher } from './interface.js'\n\ntype Await<T> = Promise<T> | T\n\nexport function from <Name extends string, Code extends number> ({ name, code, encode }: { name: Name, code: Code, encode(input: Uint8Array): Await<Uint8Array> }): Hasher<Name, Code> {\n  return new Hasher(name, code, encode)\n}\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n */\nexport class Hasher<Name extends string, Code extends number> implements MultihashHasher<Code> {\n  readonly name: Name\n  readonly code: Code\n  readonly encode: (input: Uint8Array) => Await<Uint8Array>\n\n  constructor (name: Name, code: Code, encode: (input: Uint8Array) => Await<Uint8Array>) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  digest (input: Uint8Array): Await<Digest.Digest<Code, number>> {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n", "/* global crypto */\n\nimport { from } from './hasher.js'\n\nfunction sha (name: AlgorithmIdentifier): (data: Uint8Array) => Promise<Uint8Array> {\n  return async data => new Uint8Array(await crypto.subtle.digest(name, data))\n}\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n", "import { peerIdFromMultihash, peerIdFromString } from '@libp2p/peer-id'\nimport { Libp2pRecord } from '@libp2p/record'\nimport { isPrivateIp } from '@libp2p/utils/private-ip'\nimport { Key } from 'interface-datastore/key'\nimport { CID } from 'multiformats/cid'\nimport * as raw from 'multiformats/codecs/raw'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport * as varint from 'uint8-varint'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport type { Operation, OperationMetrics } from './kad-dht.js'\nimport type { AbortOptions, PeerId, PeerInfo } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\n// const IPNS_PREFIX = uint8ArrayFromString('/ipns/')\nconst PK_PREFIX = uint8ArrayFromString('/pk/')\n\nexport function removePrivateAddressesMapper (peer: PeerInfo): PeerInfo {\n  return {\n    ...peer,\n    multiaddrs: peer.multiaddrs.filter(multiaddr => {\n      const [[type, addr]] = multiaddr.stringTuples()\n\n      // treat /dns, /dns4, and /dns6 addrs as public\n      if (type === 53 || type === 54 || type === 55) {\n        // localhost can be a dns address but it's private\n        if (addr === 'localhost') {\n          return false\n        }\n\n        return true\n      }\n\n      if (type !== 4 && type !== 6) {\n        return false\n      }\n\n      if (addr == null) {\n        return false\n      }\n\n      const isPrivate = isPrivateIp(addr)\n\n      if (isPrivate == null) {\n        // not an ip address\n        return true\n      }\n\n      return !isPrivate\n    })\n  }\n}\n\nexport function removePublicAddressesMapper (peer: PeerInfo): PeerInfo {\n  return {\n    ...peer,\n    multiaddrs: peer.multiaddrs.filter(multiaddr => {\n      const [[type, addr]] = multiaddr.stringTuples()\n\n      if (addr === 'localhost') {\n        return true\n      }\n\n      if (type !== 4 && type !== 6) {\n        return false\n      }\n\n      if (addr == null) {\n        return false\n      }\n\n      const isPrivate = isPrivateIp(addr)\n\n      if (isPrivate == null) {\n        // not an ip address\n        return false\n      }\n\n      return isPrivate\n    })\n  }\n}\n\nexport function passthroughMapper (info: PeerInfo): PeerInfo {\n  return info\n}\n\n/**\n * Creates a DHT ID by hashing a given Uint8Array\n */\nexport async function convertBuffer (buf: Uint8Array, options?: AbortOptions): Promise<Uint8Array> {\n  const multihash = await sha256.digest(buf)\n  options?.signal?.throwIfAborted()\n\n  return multihash.digest\n}\n\n/**\n * Creates a DHT ID by hashing a Peer ID\n */\nexport async function convertPeerId (peerId: PeerId, options?: AbortOptions): Promise<Uint8Array> {\n  return convertBuffer(peerId.toMultihash().bytes, options)\n}\n\n/**\n * Convert a Uint8Array to their SHA2-256 hash\n */\nexport function bufferToKey (buf: Uint8Array): Key {\n  return new Key('/' + uint8ArrayToString(buf, 'base32'), false)\n}\n\n/**\n * Convert a Uint8Array to their SHA2-256 hash\n */\nexport function bufferToRecordKey (prefix: string, buf: Uint8Array): Key {\n  return new Key(`${prefix}/${uint8ArrayToString(buf, 'base32')}`, false)\n}\n\n/**\n * Generate the key for a public key.\n */\nexport function keyForPublicKey (peerId: PeerId): Uint8Array {\n  return uint8ArrayConcat([\n    PK_PREFIX,\n    peerId.toMultihash().bytes\n  ])\n}\n\nexport function isPublicKeyKey (key: Uint8Array): boolean {\n  return uint8ArrayToString(key.subarray(0, 4)) === '/pk/'\n}\n\nexport function isIPNSKey (key: Uint8Array): boolean {\n  return uint8ArrayToString(key.subarray(0, 4)) === '/ipns/'\n}\n\nexport function fromPublicKeyKey (key: Uint8Array): PeerId {\n  const multihash = Digest.decode(key.subarray(4))\n  return peerIdFromMultihash(multihash)\n}\n\nexport function uint8ArrayToBigInt (buf: Uint8Array): bigint {\n  return BigInt(\n    `0x${\n      Array.from(buf)\n        .map(val => val.toString(16).padStart(2, '0')).join('')\n    }`\n  )\n}\n\n/**\n * Create a new put record, encodes and signs it if enabled\n */\nexport function createPutRecord (key: Uint8Array, value: Uint8Array): Uint8Array {\n  const timeReceived = new Date()\n  const rec = new Libp2pRecord(key, value, timeReceived)\n\n  return rec.serialize()\n}\n\nexport function debounce (callback: () => void, wait: number = 100): () => void {\n  let timeout: ReturnType<typeof setTimeout>\n\n  return (): void => {\n    clearTimeout(timeout)\n    timeout = setTimeout(() => { callback() }, wait)\n  }\n}\n\n// see https://github.com/multiformats/multiaddr/blob/master/protocols.csv\nconst P2P_CIRCUIT_CODE = 290\nconst DNS4_CODE = 54\nconst DNS6_CODE = 55\nconst DNSADDR_CODE = 56\nconst IP4_CODE = 4\nconst IP6_CODE = 41\n\nexport function multiaddrIsPublic (multiaddr: Multiaddr): boolean {\n  const tuples = multiaddr.stringTuples()\n\n  // p2p-circuit should not enable server mode\n  for (const tuple of tuples) {\n    if (tuple[0] === P2P_CIRCUIT_CODE) {\n      return false\n    }\n  }\n\n  // dns4 or dns6 or dnsaddr\n  if (tuples[0][0] === DNS4_CODE || tuples[0][0] === DNS6_CODE || tuples[0][0] === DNSADDR_CODE) {\n    return true\n  }\n\n  // ip4 or ip6\n  if (tuples[0][0] === IP4_CODE || tuples[0][0] === IP6_CODE) {\n    const result = isPrivateIp(`${tuples[0][1]}`)\n    const isPublic = result == null || !result\n\n    return isPublic\n  }\n\n  return false\n}\n\n/**\n * Parse the CID and provider peer id from the key\n */\nexport function parseProviderKey (key: Key): { cid: CID, peerId: PeerId } {\n  const parts = key.toString().split('/')\n  const peerIdStr = parts.pop()\n  const cidStr = parts.pop()\n\n  if (peerIdStr == null || cidStr == null) {\n    throw new Error(`incorrectly formatted provider entry key in datastore: ${key.toString()}`)\n  }\n\n  return {\n    cid: CID.createV1(raw.code, Digest.decode(uint8ArrayFromString(cidStr, 'base32'))),\n    peerId: peerIdFromString(peerIdStr)\n  }\n}\n\n/**\n * Encode the given key its matching datastore key\n */\nexport function toProviderKey (prefix: string, cid: CID | string, peerId?: PeerId): Key {\n  const cidStr = typeof cid === 'string' ? cid : uint8ArrayToString(cid.multihash.bytes, 'base32')\n\n  const parts = [\n    prefix,\n    cidStr\n  ]\n\n  if (peerId != null) {\n    parts.push(peerId.toString())\n  }\n\n  return new Key(parts.join('/'))\n}\n\nexport function readProviderTime (buf: Uint8Array): Date {\n  return new Date(varint.decode(buf))\n}\n\n/**\n * Wraps the passed generator function with timing metrics\n */\nexport function timeOperationGenerator (fn: (...args: any[]) => AsyncGenerator<any>, operationMetrics: OperationMetrics, type: Operation): (...args: any[]) => AsyncGenerator<any> {\n  return async function * (...args: any[]): AsyncGenerator<any> {\n    const stopSuccessTimer = operationMetrics.queryTime?.timer(type)\n    const stopErrorTimer = operationMetrics.errorTime?.timer(type)\n    let errored = false\n\n    try {\n      operationMetrics.queries?.increment({ [type]: true })\n\n      yield * fn(...args)\n    } catch (err) {\n      errored = true\n      stopErrorTimer?.()\n      operationMetrics.errors?.increment({ [type]: true })\n\n      throw err\n    } finally {\n      operationMetrics.queries?.decrement({ [type]: true })\n\n      if (!errored) {\n        stopSuccessTimer?.()\n      }\n    }\n  }\n}\n\nexport function timeOperationMethod (fn: (...args: any[]) => Promise<any>, operationMetrics: OperationMetrics, type: Operation): (...args: any[]) => Promise<any> {\n  return async function (...args: any[]): Promise<any> {\n    const stopSuccessTimer = operationMetrics?.queryTime?.timer(type)\n    const stopErrorTimer = operationMetrics?.errorTime?.timer(type)\n    let errored = false\n\n    try {\n      operationMetrics.queries?.increment({ [type]: true })\n\n      return await fn(...args)\n    } catch (err) {\n      errored = true\n      stopErrorTimer?.()\n      operationMetrics.errors?.increment({ [type]: true })\n\n      throw err\n    } finally {\n      operationMetrics.queries?.decrement({ [type]: true })\n\n      if (!errored) {\n        stopSuccessTimer?.()\n      }\n    }\n  }\n}\n", "import { NotFoundError } from '@libp2p/interface'\nimport { Libp2pRecord } from '@libp2p/record'\nimport map from 'it-map'\nimport parallel from 'it-parallel'\nimport { pipe } from 'it-pipe'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport {\n  ALPHA\n} from '../constants.js'\nimport { QueryError } from '../errors.js'\nimport { MessageType } from '../message/dht.js'\nimport {\n  valueEvent,\n  queryErrorEvent\n} from '../query/events.js'\nimport { bestRecord } from '../record/selectors.js'\nimport { verifyRecord } from '../record/validators.js'\nimport { createPutRecord, bufferToRecordKey } from '../utils.js'\nimport type { KadDHTComponents, Validators, Selectors, ValueEvent, QueryEvent } from '../index.js'\nimport type { Message } from '../message/dht.js'\nimport type { Network, SendMessageOptions } from '../network.js'\nimport type { PeerRouting } from '../peer-routing/index.js'\nimport type { QueryManager } from '../query/manager.js'\nimport type { QueryFunc } from '../query/types.js'\nimport type { AbortOptions, Logger, RoutingOptions } from '@libp2p/interface'\n\nexport interface ContentFetchingInit {\n  validators: Validators\n  selectors: Selectors\n  peerRouting: PeerRouting\n  queryManager: QueryManager\n  network: Network\n  logPrefix: string\n  datastorePrefix: string\n}\n\nexport class ContentFetching {\n  private readonly log: Logger\n  private readonly components: KadDHTComponents\n  private readonly validators: Validators\n  private readonly selectors: Selectors\n  private readonly peerRouting: PeerRouting\n  private readonly queryManager: QueryManager\n  private readonly network: Network\n  private readonly datastorePrefix: string\n\n  constructor (components: KadDHTComponents, init: ContentFetchingInit) {\n    const { validators, selectors, peerRouting, queryManager, network, logPrefix } = init\n\n    this.components = components\n    this.log = components.logger.forComponent(`${logPrefix}:content-fetching`)\n    this.datastorePrefix = `${init.datastorePrefix}/record`\n    this.validators = validators\n    this.selectors = selectors\n    this.peerRouting = peerRouting\n    this.queryManager = queryManager\n    this.network = network\n\n    this.get = components.metrics?.traceFunction('libp2p.kadDHT.get', this.get.bind(this), {\n      optionsIndex: 1\n    }) ?? this.get\n    this.put = components.metrics?.traceFunction('libp2p.kadDHT.put', this.put.bind(this), {\n      optionsIndex: 2\n    }) ?? this.put\n  }\n\n  /**\n   * Attempt to retrieve the value for the given key from\n   * the local datastore\n   */\n  async getLocal (key: Uint8Array, options?: AbortOptions): Promise<Libp2pRecord> {\n    this.log('getLocal %b', key)\n\n    const dsKey = bufferToRecordKey(this.datastorePrefix, key)\n\n    this.log('fetching record for key %k', dsKey)\n\n    const raw = await this.components.datastore.get(dsKey, options)\n    this.log('found %k in local datastore', dsKey)\n\n    const rec = Libp2pRecord.deserialize(raw)\n\n    await verifyRecord(this.validators, rec, options)\n\n    return rec\n  }\n\n  /**\n   * Send the best record found to any peers that have an out of date record\n   */\n  async * sendCorrectionRecord (key: Uint8Array, vals: ValueEvent[], best: Uint8Array, options: SendMessageOptions): AsyncGenerator<QueryEvent> {\n    this.log('sendCorrection for %b', key)\n    const fixupRec = createPutRecord(key, best)\n\n    for (const { value, from } of vals) {\n      // no need to do anything\n      if (uint8ArrayEquals(value, best)) {\n        this.log('record was ok')\n        continue\n      }\n\n      // correct ourself\n      if (this.components.peerId.equals(from)) {\n        try {\n          const dsKey = bufferToRecordKey(this.datastorePrefix, key)\n          this.log(`Storing corrected record for key ${dsKey.toString()}`)\n          await this.components.datastore.put(dsKey, fixupRec.subarray(), options)\n        } catch (err: any) {\n          this.log.error('Failed error correcting self', err)\n        }\n\n        continue\n      }\n\n      // send correction\n      let sentCorrection = false\n      const request: Partial<Message> = {\n        type: MessageType.PUT_VALUE,\n        key,\n        record: fixupRec\n      }\n\n      for await (const event of this.network.sendRequest(from, request, options)) {\n        if (event.name === 'PEER_RESPONSE' && (event.record != null) && uint8ArrayEquals(event.record.value, Libp2pRecord.deserialize(fixupRec).value)) {\n          sentCorrection = true\n        }\n\n        yield event\n      }\n\n      if (!sentCorrection) {\n        throw new QueryError('Could not send correction')\n      }\n\n      this.log.error('Failed error correcting entry')\n    }\n  }\n\n  /**\n   * Store the given key/value pair in the DHT\n   */\n  async * put (key: Uint8Array, value: Uint8Array, options: RoutingOptions): AsyncGenerator<unknown, void, undefined> {\n    this.log('put key %b value %b', key, value)\n\n    // create record in the dht format\n    const record = createPutRecord(key, value)\n\n    // store the record locally\n    const dsKey = bufferToRecordKey(this.datastorePrefix, key)\n    this.log(`storing record for key ${dsKey.toString()}`)\n    await this.components.datastore.put(dsKey, record.subarray(), options)\n\n    // put record to the closest peers\n    yield * pipe(\n      this.peerRouting.getClosestPeers(key, {\n        ...options,\n        signal: options.signal\n      }),\n      (source) => map(source, (event) => {\n        return async () => {\n          if (event.name !== 'FINAL_PEER') {\n            return [event]\n          }\n\n          const events = []\n\n          const msg: Partial<Message> = {\n            type: MessageType.PUT_VALUE,\n            key,\n            record\n          }\n\n          this.log('send put to %p', event.peer.id)\n          for await (const putEvent of this.network.sendRequest(event.peer.id, msg, {\n            ...options,\n            path: event.path\n          })) {\n            events.push(putEvent)\n\n            if (putEvent.name !== 'PEER_RESPONSE') {\n              continue\n            }\n\n            if (!(putEvent.record != null && uint8ArrayEquals(putEvent.record.value, Libp2pRecord.deserialize(record).value))) {\n              events.push(queryErrorEvent({\n                from: event.peer.id,\n                error: new QueryError('Value not put correctly'),\n                path: putEvent.path\n              }, options))\n            }\n          }\n\n          return events\n        }\n      }),\n      (source) => parallel(source, {\n        ordered: false,\n        concurrency: ALPHA\n      }),\n      async function * (source) {\n        for await (const events of source) {\n          yield * events\n        }\n      }\n    )\n  }\n\n  /**\n   * Get the value to the given key\n   */\n  async * get (key: Uint8Array, options: RoutingOptions): AsyncGenerator<QueryEvent | ValueEvent> {\n    this.log('get %b', key)\n\n    const vals: ValueEvent[] = []\n\n    for await (const event of this.getMany(key, options)) {\n      if (event.name === 'VALUE') {\n        vals.push(event)\n        continue\n      }\n\n      yield event\n    }\n\n    if (vals.length === 0) {\n      return\n    }\n\n    const records = vals.map((v) => v.value)\n    let i = 0\n\n    try {\n      i = bestRecord(this.selectors, key, records)\n    } catch (err: any) {\n      // Assume the first record if no selector available\n      if (err.name !== 'InvalidParametersError') {\n        throw err\n      }\n    }\n\n    const best = records[i]\n    this.log('GetValue %b %b', key, best)\n\n    if (best == null) {\n      throw new NotFoundError('Best value was not found')\n    }\n\n    yield * this.sendCorrectionRecord(key, vals, best, {\n      ...options,\n      path: {\n        index: -1,\n        queued: 0,\n        running: 0,\n        total: 0\n      }\n    })\n\n    yield vals[i]\n  }\n\n  /**\n   * Get the `n` values to the given key without sorting\n   */\n  async * getMany (key: Uint8Array, options: RoutingOptions = {}): AsyncGenerator<QueryEvent> {\n    this.log('getMany values for %b', key)\n\n    try {\n      const localRec = await this.getLocal(key, options)\n\n      yield valueEvent({\n        value: localRec.value,\n        from: this.components.peerId,\n        path: {\n          index: -1,\n          running: 0,\n          queued: 0,\n          total: 0\n        }\n      }, options)\n    } catch (err: any) {\n      this.log('error getting local value for %b', key, err)\n    }\n\n    const self = this\n\n    const getValueQuery: QueryFunc = async function * ({ peer, signal, path }) {\n      for await (const event of self.peerRouting.getValueOrPeers(peer.id, key, {\n        ...options,\n        signal,\n        path\n      })) {\n        yield event\n\n        if (event.name === 'PEER_RESPONSE' && (event.record != null)) {\n          yield valueEvent({\n            from: peer.id,\n            value: event.record.value,\n            path\n          }, options)\n        }\n      }\n    }\n\n    // we have peers, lets send the actual query to them\n    yield * this.queryManager.run(key, getValueQuery, options)\n  }\n}\n", "import { peerIdFromMultihash } from '@libp2p/peer-id'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport * as Digest from 'multiformats/hashes/digest'\nimport type { PeerInfo as PBPeerInfo, ConnectionType } from './dht.js'\nimport type { PeerInfo } from '@libp2p/interface'\n\nexport function toPbPeerInfo (peer: PeerInfo, connection?: ConnectionType): PBPeerInfo {\n  const output: PBPeerInfo = {\n    id: peer.id.toMultihash().bytes,\n    multiaddrs: (peer.multiaddrs ?? []).map((m) => m.bytes),\n    connection\n  }\n\n  return output\n}\n\nexport function fromPbPeerInfo (peer: PBPeerInfo): PeerInfo {\n  if (peer.id == null) {\n    throw new Error('Invalid peer in message')\n  }\n\n  const multihash = Digest.decode(peer.id)\n\n  return {\n    id: peerIdFromMultihash(multihash),\n    multiaddrs: (peer.multiaddrs ?? []).map((a) => multiaddr(a))\n  }\n}\n", "import { PeerSet } from '@libp2p/peer-collections'\nimport { Queue } from '@libp2p/utils/queue'\nimport { pushable } from 'it-pushable'\nimport { ALPHA } from '../constants.js'\nimport { MessageType } from '../message/dht.js'\nimport { toPbPeerInfo } from '../message/utils.js'\nimport {\n  queryErrorEvent,\n  peerResponseEvent,\n  providerEvent\n} from '../query/events.js'\nimport type { FinalPeerEvent, KadDHTComponents, PeerResponseEvent, ProviderEvent, QueryEvent } from '../index.js'\nimport type { Message } from '../message/dht.js'\nimport type { Network } from '../network.js'\nimport type { PeerRouting } from '../peer-routing/index.js'\nimport type { Providers } from '../providers.js'\nimport type { QueryManager } from '../query/manager.js'\nimport type { QueryFunc } from '../query/types.js'\nimport type { RoutingTable } from '../routing-table/index.js'\nimport type { Logger, PeerInfo, RoutingOptions } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { CID } from 'multiformats/cid'\n\nexport interface ContentRoutingInit {\n  network: Network\n  peerRouting: PeerRouting\n  queryManager: QueryManager\n  routingTable: RoutingTable\n  providers: Providers\n  logPrefix: string\n}\n\nexport class ContentRouting {\n  private readonly log: Logger\n  private readonly components: KadDHTComponents\n  private readonly network: Network\n  private readonly peerRouting: PeerRouting\n  private readonly queryManager: QueryManager\n  private readonly routingTable: RoutingTable\n  private readonly providers: Providers\n\n  constructor (components: KadDHTComponents, init: ContentRoutingInit) {\n    const { network, peerRouting, queryManager, routingTable, providers, logPrefix } = init\n\n    this.components = components\n    this.log = components.logger.forComponent(`${logPrefix}:content-routing`)\n    this.network = network\n    this.peerRouting = peerRouting\n    this.queryManager = queryManager\n    this.routingTable = routingTable\n    this.providers = providers\n\n    this.findProviders = components.metrics?.traceFunction('libp2p.kadDHT.findProviders', this.findProviders.bind(this), {\n      optionsIndex: 1,\n      getAttributesFromYieldedValue: (event, attrs: { providers?: string[] }) => {\n        if (event.name === 'PROVIDER') {\n          attrs.providers ??= []\n          attrs.providers.push(...event.providers.map(info => info.id.toString()))\n        }\n\n        return attrs\n      }\n    }) ?? this.findProviders\n    this.provide = components.metrics?.traceFunction('libp2p.kadDHT.provide', this.provide.bind(this), {\n      optionsIndex: 1,\n      getAttributesFromYieldedValue: (event, attrs: { providers?: string[] }) => {\n        if (event.name === 'PEER_RESPONSE' && event.messageName === 'ADD_PROVIDER') {\n          attrs.providers ??= []\n          attrs.providers.push(event.from.toString())\n        }\n\n        return attrs\n      }\n    }) ?? this.provide\n  }\n\n  /**\n   * Announce to the network that we can provide the value for a given key and\n   * are contactable on the given multiaddrs\n   */\n  async * provide (key: CID, multiaddrs: Multiaddr[], options: RoutingOptions = {}): AsyncGenerator<QueryEvent, void, undefined> {\n    this.log('provide %s', key)\n    const target = key.multihash.bytes\n\n    // Add peer as provider\n    await this.providers.addProvider(key, this.components.peerId, options)\n\n    const msg: Partial<Message> = {\n      type: MessageType.ADD_PROVIDER,\n      key: target,\n      providers: [\n        toPbPeerInfo({\n          id: this.components.peerId,\n          multiaddrs\n        })\n      ]\n    }\n\n    let sent = 0\n    const self = this\n\n    async function * publishProviderRecord (event: FinalPeerEvent): AsyncGenerator<QueryEvent, void, undefined> {\n      try {\n        self.log('sending provider record for %s to %p', key, event.peer.id)\n\n        for await (const addProviderEvent of self.network.sendMessage(event.peer.id, msg, {\n          ...options,\n          path: event.path\n        })) {\n          if (addProviderEvent.name === 'PEER_RESPONSE') {\n            self.log('sent provider record for %s to %p', key, event.peer.id)\n            sent++\n          }\n\n          yield addProviderEvent\n        }\n      } catch (err: any) {\n        self.log.error('error sending provide record to peer %p', event.peer.id, err)\n        yield queryErrorEvent({\n          from: event.peer.id,\n          error: err,\n          path: event.path\n        }, options)\n      }\n    }\n\n    const events = pushable<QueryEvent>({\n      objectMode: true\n    })\n\n    const queue = new Queue({\n      concurrency: ALPHA\n    })\n    queue.addEventListener('idle', () => {\n      events.end()\n    })\n    queue.addEventListener('error', (err) => {\n      this.log.error('error publishing provider record to peer - %e', err)\n    })\n\n    queue.add(async () => {\n      const finalPeerEvents: FinalPeerEvent[] = []\n\n      for await (const event of this.peerRouting.getClosestPeers(target, options)) {\n        events.push(event)\n\n        if (event.name !== 'FINAL_PEER') {\n          continue\n        }\n\n        finalPeerEvents.push(event)\n      }\n\n      finalPeerEvents.forEach(event => {\n        queue.add(async () => {\n          for await (const notifyEvent of publishProviderRecord(event)) {\n            events.push(notifyEvent)\n          }\n        })\n          .catch(err => {\n            this.log.error('error publishing provider record to peer - %e', err)\n          })\n      })\n    })\n      .catch(err => {\n        events.end(err)\n      })\n\n    yield * events\n\n    this.log('sent provider records to %d peers', sent)\n  }\n\n  /**\n   * Search the dht for up to `K` providers of the given CID.\n   */\n  async * findProviders (key: CID, options: RoutingOptions): AsyncGenerator<PeerResponseEvent | ProviderEvent | QueryEvent> {\n    const toFind = this.routingTable.kBucketSize\n    let found = 0\n    const target = key.multihash.bytes\n    const self = this\n\n    this.log('findProviders %c', key)\n\n    const provs = await this.providers.getProviders(key, options)\n\n    // yield values if we have some, also slice because maybe we got lucky and already have too many?\n    if (provs.length > 0) {\n      const providers: PeerInfo[] = []\n\n      for (const peerId of provs.slice(0, toFind)) {\n        try {\n          const peer = await this.components.peerStore.get(peerId, options)\n\n          providers.push({\n            id: peerId,\n            multiaddrs: peer.addresses.map(({ multiaddr }) => multiaddr)\n          })\n        } catch (err: any) {\n          if (err.name !== 'NotFoundError') {\n            throw err\n          }\n\n          this.log('no peer store entry for %p', peerId)\n        }\n      }\n\n      yield peerResponseEvent({\n        from: this.components.peerId,\n        messageType: MessageType.GET_PROVIDERS,\n        providers,\n        path: {\n          index: -1,\n          queued: 0,\n          running: 0,\n          total: 0\n        }\n      }, options)\n      yield providerEvent({\n        from: this.components.peerId,\n        providers,\n        path: {\n          index: -1,\n          queued: 0,\n          running: 0,\n          total: 0\n        }\n      }, options)\n\n      found += providers.length\n\n      if (found >= toFind) {\n        return\n      }\n    }\n\n    /**\n     * The query function to use on this particular disjoint path\n     */\n    const findProvidersQuery: QueryFunc = async function * ({ peer, signal, path }) {\n      const request = {\n        type: MessageType.GET_PROVIDERS,\n        key: target\n      }\n\n      yield * self.network.sendRequest(peer.id, request, {\n        ...options,\n        signal,\n        path\n      })\n    }\n\n    const providers = new PeerSet(provs)\n\n    for await (const event of this.queryManager.run(target, findProvidersQuery, options)) {\n      yield event\n\n      if (event.name === 'PEER_RESPONSE') {\n        this.log('Found %d provider entries for %c and %d closer peers', event.providers.length, key, event.closer.length)\n\n        const newProviders = []\n\n        for (const peer of event.providers) {\n          if (providers.has(peer.id)) {\n            continue\n          }\n\n          providers.add(peer.id)\n          newProviders.push(peer)\n        }\n\n        if (newProviders.length > 0) {\n          yield providerEvent({\n            from: event.from,\n            providers: newProviders,\n            path: event.path\n          }, options)\n\n          found += newProviders.length\n\n          if (found >= toFind) {\n            return\n          }\n        }\n      }\n    }\n  }\n}\n", "import { InvalidParametersError } from '@libp2p/interface'\nimport { Libp2pRecord } from '@libp2p/record'\nimport { AdaptiveTimeout } from '@libp2p/utils/adaptive-timeout'\nimport { pbStream } from 'it-protobuf-stream'\nimport { TypedEventEmitter } from 'main-event'\nimport { Message } from './message/dht.js'\nimport { fromPbPeerInfo } from './message/utils.js'\nimport {\n  sendQueryEvent,\n  peerResponseEvent,\n  queryErrorEvent,\n  dialPeerEvent\n} from './query/events.js'\nimport type { DisjointPath, KadDHTComponents, QueryEvent } from './index.js'\nimport type { AbortOptions, Logger, Stream, PeerId, PeerInfo, Startable, RoutingOptions, CounterGroup } from '@libp2p/interface'\nimport type { AdaptiveTimeoutInit } from '@libp2p/utils/adaptive-timeout'\n\nexport interface NetworkInit {\n  protocol: string\n  logPrefix: string\n  metricsPrefix: string\n  timeout?: Omit<AdaptiveTimeoutInit, 'metricsName' | 'metrics'>\n}\n\ninterface NetworkEvents {\n  peer: CustomEvent<PeerInfo>\n}\n\nexport interface SendMessageOptions extends RoutingOptions {\n  /**\n   * Queries involve following up to `k` disjoint paths through the network -\n   * this option is which index within `k` this message is for, and it\n   * allows observers to collate events together on a per-path basis\n   */\n  path: DisjointPath\n}\n\n/**\n * Handle network operations for the dht\n */\nexport class Network extends TypedEventEmitter<NetworkEvents> implements Startable {\n  private readonly log: Logger\n  private readonly protocol: string\n  private running: boolean\n  private readonly components: KadDHTComponents\n  private readonly timeout: AdaptiveTimeout\n  private readonly metrics: {\n    operations?: CounterGroup\n    errors?: CounterGroup\n  }\n\n  /**\n   * Create a new network\n   */\n  constructor (components: KadDHTComponents, init: NetworkInit) {\n    super()\n\n    this.components = components\n    this.log = components.logger.forComponent(`${init.logPrefix}:network`)\n    this.running = false\n    this.protocol = init.protocol\n    this.timeout = new AdaptiveTimeout({\n      ...(init.timeout ?? {}),\n      metrics: components.metrics,\n      metricName: `${init.metricsPrefix}_network_message_send_times_milliseconds`\n    })\n    this.metrics = {\n      operations: components.metrics?.registerCounterGroup(`${init.metricsPrefix}_outbound_rpc_requests_total`),\n      errors: components.metrics?.registerCounterGroup(`${init.metricsPrefix}_outbound_rpc_errors_total`)\n    }\n\n    this.sendRequest = components.metrics?.traceFunction('libp2p.kadDHT.sendRequest', this.sendRequest.bind(this), {\n      optionsIndex: 2,\n      getAttributesFromArgs ([to, message], attrs) {\n        return {\n          ...attrs,\n          to: to.toString(),\n          'message type': `${message.type}`\n        }\n      },\n      getAttributesFromYieldedValue: (event, attrs) => {\n        if (event.name === 'PEER_RESPONSE') {\n          if (event.providers.length > 0) {\n            event.providers.forEach((value, index) => {\n              attrs[`providers-${index}`] = value.id.toString()\n            })\n          }\n\n          if (event.closer.length > 0) {\n            event.closer.forEach((value, index) => {\n              attrs[`closer-${index}`] = value.id.toString()\n            })\n          }\n        }\n\n        return attrs\n      }\n    }) ?? this.sendRequest\n    this.sendMessage = components.metrics?.traceFunction('libp2p.kadDHT.sendMessage', this.sendMessage.bind(this), {\n      optionsIndex: 2,\n      getAttributesFromArgs ([to, message], attrs) {\n        return {\n          ...attrs,\n          to: to.toString(),\n          'message type': `${message.type}`\n        }\n      },\n      getAttributesFromYieldedValue: (event, attrs) => {\n        if (event.name === 'PEER_RESPONSE') {\n          if (event.providers.length > 0) {\n            event.providers.forEach((value, index) => {\n              attrs[`providers-${index}`] = value.id.toString()\n            })\n          }\n\n          if (event.closer.length > 0) {\n            event.closer.forEach((value, index) => {\n              attrs[`closer-${index}`] = value.id.toString()\n            })\n          }\n        }\n\n        return attrs\n      }\n    }) ?? this.sendMessage\n  }\n\n  /**\n   * Start the network\n   */\n  async start (): Promise<void> {\n    if (this.running) {\n      return\n    }\n\n    this.running = true\n  }\n\n  /**\n   * Stop all network activity\n   */\n  async stop (): Promise<void> {\n    this.running = false\n  }\n\n  /**\n   * Is the network online?\n   */\n  isStarted (): boolean {\n    return this.running\n  }\n\n  /**\n   * Send a request and read a response\n   */\n  async * sendRequest (to: PeerId, msg: Partial<Message>, options: SendMessageOptions): AsyncGenerator<QueryEvent> {\n    if (!this.running) {\n      return\n    }\n\n    const type = msg.type\n\n    if (type == null) {\n      throw new InvalidParametersError('Message type was missing')\n    }\n\n    let stream: Stream | undefined\n    const signal = this.timeout.getTimeoutSignal(options)\n\n    options = {\n      ...options,\n      signal\n    }\n\n    try {\n      this.metrics.operations?.increment({ [type]: true })\n\n      this.log('dialling %p', to)\n      yield dialPeerEvent({ peer: to, path: options.path }, options)\n\n      const connection = await this.components.connectionManager.openConnection(to, options)\n      stream = await connection.newStream(this.protocol, options)\n\n      this.log('sending %s to %p', msg.type, to)\n      yield sendQueryEvent({ to, type, path: options.path }, options)\n\n      const response = await this._writeReadMessage(stream, msg, options)\n\n      stream.close(options)\n        .catch(err => {\n          this.log.error('error closing stream to %p', to, err)\n          stream?.abort(err)\n        })\n\n      yield peerResponseEvent({\n        from: to,\n        messageType: response.type,\n        closer: response.closer.map(fromPbPeerInfo),\n        providers: response.providers.map(fromPbPeerInfo),\n        record: response.record == null ? undefined : Libp2pRecord.deserialize(response.record),\n        path: options.path\n      }, options)\n    } catch (err: any) {\n      this.metrics.errors?.increment({ [type]: true })\n\n      stream?.abort(err)\n\n      // only log if the incoming signal was not aborted - this means we were\n      // no longer interested in the query result\n      if (options.signal?.aborted !== true) {\n        this.log.error('could not send %s to %p - %e', msg.type, to, err)\n      }\n\n      yield queryErrorEvent({ from: to, error: err, path: options.path }, options)\n    } finally {\n      this.timeout.cleanUp(signal)\n    }\n  }\n\n  /**\n   * Sends a message without expecting an answer\n   */\n  async * sendMessage (to: PeerId, msg: Partial<Message>, options: SendMessageOptions): AsyncGenerator<QueryEvent> {\n    if (!this.running) {\n      return\n    }\n\n    const type = msg.type\n\n    if (type == null) {\n      throw new InvalidParametersError('Message type was missing')\n    }\n\n    let stream: Stream | undefined\n    const signal = this.timeout.getTimeoutSignal(options)\n\n    options = {\n      ...options,\n      signal\n    }\n\n    try {\n      this.metrics.operations?.increment({ [type]: true })\n\n      this.log('dialling %p', to)\n      yield dialPeerEvent({ peer: to, path: options.path }, options)\n\n      const connection = await this.components.connectionManager.openConnection(to, options)\n      stream = await connection.newStream(this.protocol, options)\n\n      this.log('sending %s to %p', msg.type, to)\n      yield sendQueryEvent({ to, type, path: options.path }, options)\n\n      await this._writeMessage(stream, msg, options)\n\n      stream.close(options)\n        .catch(err => {\n          this.log.error('error closing stream to %p', to, err)\n          stream?.abort(err)\n        })\n\n      yield peerResponseEvent({ from: to, messageType: type, path: options.path }, options)\n    } catch (err: any) {\n      this.metrics.errors?.increment({ [type]: true })\n\n      stream?.abort(err)\n      yield queryErrorEvent({ from: to, error: err, path: options.path }, options)\n    } finally {\n      this.timeout.cleanUp(signal)\n    }\n  }\n\n  /**\n   * Write a message to the given stream\n   */\n  async _writeMessage (stream: Stream, msg: Partial<Message>, options: AbortOptions): Promise<void> {\n    const pb = pbStream(stream)\n    await pb.write(msg, Message, options)\n  }\n\n  /**\n   * Write a message and read a response\n   */\n  async _writeReadMessage (stream: Stream, msg: Partial<Message>, options: AbortOptions): Promise<Message> {\n    const pb = pbStream(stream)\n\n    await pb.write(msg, Message, options)\n\n    const message = await pb.read(Message, options)\n\n    // tell any listeners about new peers we've seen\n    message.closer.forEach(peerData => {\n      this.safeDispatchEvent<PeerInfo>('peer', {\n        detail: fromPbPeerInfo(peerData)\n      })\n    })\n    message.providers.forEach(peerData => {\n      this.safeDispatchEvent<PeerInfo>('peer', {\n        detail: fromPbPeerInfo(peerData)\n      })\n    })\n\n    return message\n  }\n}\n", "/**\n * Compares two Uint8Arrays representing two xor distances. Returns `-1` if `a`\n * is a lower distance, `1` if `b` is a lower distance or `0` if the distances\n * are equal.\n */\nexport function xorCompare (a: Uint8Array, b: Uint8Array): -1 | 0 | 1 {\n  if (a.byteLength !== b.byteLength) {\n    throw new Error('Inputs should have the same length')\n  }\n\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] === b[i]) {\n      continue\n    }\n\n    return a[i] < b[i] ? -1 : 1\n  }\n\n  return 0\n}\n", "import { xor as uint8ArrayXor } from 'uint8arrays/xor'\nimport { xorCompare as uint8ArrayXorCompare } from 'uint8arrays/xor-compare'\nimport { convertPeerId } from './utils.js'\nimport type { DisjointPath } from './index.js'\nimport type { AbortOptions, PeerId, PeerInfo } from '@libp2p/interface'\n\ninterface PeerDistance {\n  peer: PeerInfo\n  distance: Uint8Array\n  path: DisjointPath\n}\n\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\nexport class PeerDistanceList {\n  /**\n   * The DHT key from which distance is calculated\n   */\n  private readonly originDhtKey: Uint8Array\n\n  /**\n   * The maximum size of the list\n   */\n  private readonly capacity: number\n\n  private peerDistances: PeerDistance[]\n\n  constructor (originDhtKey: Uint8Array, capacity: number) {\n    this.originDhtKey = originDhtKey\n    this.capacity = capacity\n    this.peerDistances = []\n  }\n\n  /**\n   * The length of the list\n   */\n  get length (): number {\n    return this.peerDistances.length\n  }\n\n  /**\n   * The peers in the list, in order of distance from the origin key\n   */\n  get peers (): PeerDistance[] {\n    return [...this.peerDistances]\n  }\n\n  /**\n   * Add a peerId to the list.\n   */\n  async add (peer: PeerInfo, path: DisjointPath = { index: -1, queued: 0, running: 0, total: 0 }, options?: AbortOptions): Promise<void> {\n    const dhtKey = await convertPeerId(peer.id, options)\n\n    this.addWithKadId(peer, dhtKey, path)\n  }\n\n  /**\n   * Add a peerId to the list.\n   */\n  addWithKadId (peer: PeerInfo, kadId: Uint8Array, path: DisjointPath = { index: -1, queued: 0, running: 0, total: 0 }): void {\n    if (this.peerDistances.find(pd => pd.peer.id.equals(peer.id)) != null) {\n      return\n    }\n\n    const el: PeerDistance = {\n      peer,\n      distance: uint8ArrayXor(this.originDhtKey, kadId),\n      path\n    }\n\n    if (this.peerDistances.length === this.capacity) {\n      const lastPeer = this.peerDistances[this.peerDistances.length - 1]\n\n      // only add if it's closer than our furthest peer\n      if (lastPeer != null && uint8ArrayXorCompare(el.distance, lastPeer.distance) !== -1) {\n        return\n      }\n    }\n\n    let added = false\n\n    for (let j = 0; j < this.peerDistances.length; j++) {\n      const distance = uint8ArrayXorCompare(this.peerDistances[j].distance, el.distance)\n      if (distance === 0 || distance === 1) {\n        added = true\n        this.peerDistances.splice(j, 0, el)\n        break\n      }\n    }\n\n    if (!added) {\n      this.peerDistances.push(el)\n    }\n\n    this.peerDistances = this.peerDistances.slice(0, this.capacity)\n  }\n\n  /**\n   * Indicates whether any of the peerIds passed as a parameter are closer\n   * to the origin key than the furthest peerId in the PeerDistanceList.\n   */\n  async isCloser (peerId: PeerId, options?: AbortOptions): Promise<boolean> {\n    if (this.length === 0) {\n      return true\n    }\n\n    const dhtKey = await convertPeerId(peerId, options)\n    const dhtKeyXor = uint8ArrayXor(dhtKey, this.originDhtKey)\n    const furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance\n\n    return uint8ArrayXorCompare(dhtKeyXor, furthestDistance) === -1\n  }\n\n  /**\n   * Indicates whether any of the peerIds passed as a parameter are closer\n   * to the origin key than the furthest peerId in the PeerDistanceList.\n   */\n  async anyCloser (peerIds: PeerId[], options?: AbortOptions): Promise<boolean> {\n    if (peerIds.length === 0) {\n      return false\n    }\n\n    return Promise.any(\n      peerIds.map(async peerId => this.isCloser(peerId, options))\n    )\n  }\n}\n", "import { publicKeyFromProtobuf } from '@libp2p/crypto/keys'\nimport { InvalidPublicKeyError, NotFoundError } from '@libp2p/interface'\nimport { peerIdFromPublicKey, peerIdFromMultihash } from '@libp2p/peer-id'\nimport { Libp2pRecord } from '@libp2p/record'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { QueryError, InvalidRecordError } from '../errors.js'\nimport { MessageType } from '../message/dht.js'\nimport { PeerDistanceList } from '../peer-distance-list.js'\nimport {\n  queryErrorEvent,\n  finalPeerEvent,\n  valueEvent\n} from '../query/events.js'\nimport { verifyRecord } from '../record/validators.js'\nimport { convertBuffer, keyForPublicKey } from '../utils.js'\nimport type { DHTRecord, FinalPeerEvent, QueryEvent, Validators } from '../index.js'\nimport type { Message } from '../message/dht.js'\nimport type { Network, SendMessageOptions } from '../network.js'\nimport type { QueryManager, QueryOptions } from '../query/manager.js'\nimport type { QueryFunc } from '../query/types.js'\nimport type { RoutingTable } from '../routing-table/index.js'\nimport type { GetClosestPeersOptions } from '../routing-table/k-bucket.ts'\nimport type { ComponentLogger, Logger, Metrics, PeerId, PeerInfo, PeerStore, RoutingOptions } from '@libp2p/interface'\nimport type { ConnectionManager } from '@libp2p/interface-internal'\nimport type { AbortOptions } from 'it-pushable'\n\nexport interface PeerRoutingComponents {\n  peerId: PeerId\n  peerStore: PeerStore\n  logger: ComponentLogger\n  metrics?: Metrics\n  connectionManager: ConnectionManager\n}\n\nexport interface PeerRoutingInit {\n  routingTable: RoutingTable\n  network: Network\n  validators: Validators\n  queryManager: QueryManager\n  logPrefix: string\n}\n\nexport class PeerRouting {\n  private readonly log: Logger\n  private readonly routingTable: RoutingTable\n  private readonly network: Network\n  private readonly validators: Validators\n  private readonly queryManager: QueryManager\n  private readonly components: PeerRoutingComponents\n\n  constructor (components: PeerRoutingComponents, init: PeerRoutingInit) {\n    this.routingTable = init.routingTable\n    this.network = init.network\n    this.validators = init.validators\n    this.queryManager = init.queryManager\n    this.components = components\n    this.log = components.logger.forComponent(`${init.logPrefix}:peer-routing`)\n\n    this.findPeer = components.metrics?.traceFunction('libp2p.kadDHT.findPeer', this.findPeer.bind(this), {\n      optionsIndex: 1\n    }) ?? this.findPeer\n    this.getClosestPeers = components.metrics?.traceFunction('libp2p.kadDHT.getClosestPeers', this.getClosestPeers.bind(this), {\n      optionsIndex: 1\n    }) ?? this.getClosestPeers\n  }\n\n  /**\n   * Look if we are connected to a peer with the given id.\n   * Returns its id and addresses, if found, otherwise `undefined`.\n   */\n  async findPeerLocal (peer: PeerId, options?: AbortOptions): Promise<PeerInfo | undefined> {\n    let peerData\n    const p = await this.routingTable.find(peer, options)\n\n    if (p != null) {\n      this.log('findPeerLocal found %p in routing table', peer)\n\n      try {\n        peerData = await this.components.peerStore.get(p, options)\n      } catch (err: any) {\n        if (err.name !== 'NotFoundError') {\n          throw err\n        }\n      }\n    }\n\n    if (peerData == null) {\n      try {\n        peerData = await this.components.peerStore.get(peer, options)\n      } catch (err: any) {\n        if (err.name !== 'NotFoundError') {\n          throw err\n        }\n      }\n    }\n\n    if (peerData != null) {\n      this.log('findPeerLocal found %p in peer store', peer)\n\n      return {\n        id: peerData.id,\n        multiaddrs: peerData.addresses.map((address) => address.multiaddr)\n      }\n    }\n\n    return undefined\n  }\n\n  /**\n   * Get a value via rpc call for the given parameters\n   */\n  async * _getValueSingle (peer: PeerId, key: Uint8Array, options: SendMessageOptions): AsyncGenerator<QueryEvent> {\n    const msg: Partial<Message> = {\n      type: MessageType.GET_VALUE,\n      key\n    }\n\n    yield * this.network.sendRequest(peer, msg, options)\n  }\n\n  /**\n   * Get the public key directly from a node\n   */\n  async * getPublicKeyFromNode (peer: PeerId, options: RoutingOptions = {}): AsyncGenerator<QueryEvent> {\n    const pkKey = keyForPublicKey(peer)\n    const path = {\n      index: -1,\n      queued: 0,\n      running: 0,\n      total: 0\n    }\n\n    for await (const event of this._getValueSingle(peer, pkKey, {\n      ...options,\n      path\n    })) {\n      yield event\n\n      if (event.name === 'PEER_RESPONSE' && event.record != null) {\n        const publicKey = publicKeyFromProtobuf(event.record.value)\n        const recPeer = peerIdFromPublicKey(publicKey)\n\n        // compare hashes of the pub key\n        if (!recPeer.equals(peer)) {\n          throw new InvalidPublicKeyError('public key does not match id')\n        }\n\n        if (recPeer.publicKey == null) {\n          throw new InvalidPublicKeyError('public key missing')\n        }\n\n        yield valueEvent({\n          from: peer,\n          value: event.record.value,\n          path\n        }, options)\n      }\n    }\n\n    throw new QueryError(`Node not responding with its public key: ${peer.toString()}`)\n  }\n\n  /**\n   * Search for a peer with the given ID\n   */\n  async * findPeer (id: PeerId, options: RoutingOptions = {}): AsyncGenerator<FinalPeerEvent | QueryEvent> {\n    this.log('findPeer %p', id)\n\n    if (options.useCache !== false) {\n      // Try to find locally\n      const pi = await this.findPeerLocal(id, options)\n\n      // already got it\n      if (pi != null) {\n        this.log('found local')\n        yield finalPeerEvent({\n          from: this.components.peerId,\n          peer: pi,\n          path: {\n            index: -1,\n            queued: 0,\n            running: 0,\n            total: 0\n          }\n        }, options)\n        return\n      }\n    }\n\n    let foundPeer = false\n\n    if (options.useNetwork !== false) {\n      const self = this\n\n      const findPeerQuery: QueryFunc = async function * ({ peer, signal, path }) {\n        const request: Partial<Message> = {\n          type: MessageType.FIND_NODE,\n          key: id.toMultihash().bytes\n        }\n\n        for await (const event of self.network.sendRequest(peer.id, request, {\n          ...options,\n          signal,\n          path\n        })) {\n          yield event\n\n          if (event.name === 'PEER_RESPONSE') {\n            const match = event.closer.find((p) => p.id.equals(id))\n\n            // found the peer\n            if (match != null) {\n              yield finalPeerEvent({\n                from: event.from,\n                peer: match,\n                path: event.path\n              }, options)\n            }\n          }\n        }\n      }\n\n      for await (const event of this.queryManager.run(id.toMultihash().bytes, findPeerQuery, options)) {\n        if (event.name === 'FINAL_PEER') {\n          foundPeer = true\n        }\n\n        yield event\n      }\n    }\n\n    if (!foundPeer) {\n      throw new NotFoundError('Not found')\n    }\n  }\n\n  /**\n   * Kademlia 'FIND_NODE' operation on a key, which could be the bytes from a\n   * multihash or a peer ID\n   */\n  async * getClosestPeers (key: Uint8Array, options: QueryOptions = {}): AsyncGenerator<QueryEvent> {\n    this.log('getClosestPeers to %b', key)\n    const kadId = await convertBuffer(key, options)\n    const peers = new PeerDistanceList(kadId, this.routingTable.kBucketSize)\n    const self = this\n\n    const getCloserPeersQuery: QueryFunc = async function * ({ peer, path, peerKadId, signal }) {\n      self.log('getClosestPeers asking %p', peer.id)\n      const request: Partial<Message> = {\n        type: MessageType.FIND_NODE,\n        key\n      }\n\n      yield * self.network.sendRequest(peer.id, request, {\n        ...options,\n        signal,\n        path\n      })\n\n      // add the peer to the list if we've managed to contact it successfully\n      peers.addWithKadId(peer, peerKadId, path)\n    }\n\n    yield * this.queryManager.run(key, getCloserPeersQuery, options)\n\n    this.log('found %d peers close to %b', peers.length, key)\n\n    for (let { peer, path } of peers.peers) {\n      try {\n        if (peer.multiaddrs.length === 0) {\n          peer = await self.components.peerStore.getInfo(peer.id, options)\n        }\n\n        if (peer.multiaddrs.length === 0) {\n          continue\n        }\n\n        yield finalPeerEvent({\n          from: this.components.peerId,\n          peer: await self.components.peerStore.getInfo(peer.id, options),\n          path: {\n            index: path.index,\n            queued: 0,\n            running: 0,\n            total: 0\n          }\n        }, options)\n      } catch {\n        continue\n      }\n    }\n  }\n\n  /**\n   * Query a particular peer for the value for the given key.\n   * It will either return the value or a list of closer peers.\n   *\n   * Note: The peerStore is updated with new addresses found for the given peer.\n   */\n  async * getValueOrPeers (peer: PeerId, key: Uint8Array, options: SendMessageOptions): AsyncGenerator<QueryEvent> {\n    for await (const event of this._getValueSingle(peer, key, options)) {\n      if (event.name === 'PEER_RESPONSE') {\n        if (event.record != null) {\n          // We have a record\n          try {\n            await this._verifyRecordOnline(event.record, options)\n          } catch (err: any) {\n            const errMsg = 'invalid record received, discarded'\n            this.log(errMsg)\n\n            yield queryErrorEvent({\n              from: event.from,\n              error: new QueryError(errMsg),\n              path: options.path\n            }, options)\n            continue\n          }\n        }\n      }\n\n      yield event\n    }\n  }\n\n  /**\n   * Verify a record, fetching missing public keys from the network.\n   * Throws an error if the record is invalid.\n   */\n  async _verifyRecordOnline (record: DHTRecord, options?: AbortOptions): Promise<void> {\n    if (record.timeReceived == null) {\n      throw new InvalidRecordError('invalid record received')\n    }\n\n    await verifyRecord(this.validators, new Libp2pRecord(record.key, record.value, record.timeReceived), options)\n  }\n\n  /**\n   * Get the peers in our routing table that are closest to the passed key\n   */\n  async getClosestPeersOffline (key: Uint8Array, options?: GetClosestPeersOptions): Promise<PeerInfo[]> {\n    const output: PeerInfo[] = []\n\n    // try getting the peer directly\n    try {\n      const multihash = Digest.decode(key)\n      const targetPeerId = peerIdFromMultihash(multihash)\n\n      const peer = await this.components.peerStore.get(targetPeerId, options)\n\n      output.push({\n        id: peer.id,\n        multiaddrs: peer.addresses.map(({ multiaddr }) => multiaddr)\n      })\n    } catch {}\n\n    const keyKadId = await convertBuffer(key, options)\n    const ids = this.routingTable.closestPeers(keyKadId, options)\n\n    for (const peerId of ids) {\n      try {\n        output.push(await this.components.peerStore.getInfo(peerId, options))\n      } catch (err: any) {\n        if (err.name !== 'NotFoundError') {\n          throw err\n        }\n      }\n    }\n\n    if (output.length > 0) {\n      this.log('getClosestPeersOffline returning the %d closest peer(s) %b we know', output.length, key)\n    } else {\n      this.log('getClosestPeersOffline could not any peers close to %b with %d peers in the routing table', key, this.routingTable.size)\n    }\n\n    return output\n  }\n}\n", "import { PeerMap } from '@libp2p/peer-collections'\nimport * as varint from 'uint8-varint'\nimport { parseProviderKey, readProviderTime, toProviderKey } from './utils.js'\nimport type { AbortOptions, ComponentLogger, Logger, Metrics, PeerId } from '@libp2p/interface'\nimport type { Datastore } from 'interface-datastore'\nimport type { CID } from 'multiformats'\n\nexport interface ProvidersInit {\n  logPrefix: string\n  datastorePrefix: string\n}\n\nexport interface ProvidersComponents {\n  datastore: Datastore\n  logger: ComponentLogger\n  metrics?: Metrics\n}\n\ninterface WriteProviderEntryOptions extends AbortOptions {\n  time?: Date\n}\n\n/**\n * Provides a mechanism to add and remove provider records from the datastore\n */\nexport class Providers {\n  private readonly log: Logger\n  private readonly datastore: Datastore\n  private readonly datastorePrefix: string\n\n  constructor (components: ProvidersComponents, init: ProvidersInit) {\n    this.log = components.logger.forComponent(`${init.logPrefix}:providers`)\n    this.datastorePrefix = `${init.datastorePrefix}/provider`\n    this.datastore = components.datastore\n  }\n\n  /**\n   * Add a new provider for the given CID\n   */\n  async addProvider (cid: CID, provider: PeerId, options?: AbortOptions): Promise<void> {\n    this.log.trace('%p provides %s', provider, cid)\n    await this.writeProviderEntry(cid, provider, options)\n  }\n\n  /**\n   * Remove a provider for the given CID\n   */\n  async removeProvider (cid: CID, provider: PeerId, options?: AbortOptions): Promise<void> {\n    const key = toProviderKey(this.datastorePrefix, cid, provider)\n    this.log.trace('%p no longer provides %s', provider, cid)\n    await this.datastore.delete(key, options)\n  }\n\n  /**\n   * Get a list of providers for the given CID\n   */\n  async getProviders (cid: CID, options?: AbortOptions): Promise<PeerId[]> {\n    this.log.trace('get providers for %c', cid)\n    const provs = await this.loadProviders(cid, options)\n    this.log.trace('got %d providers for %c', provs.size, cid)\n\n    return [...provs.keys()]\n  }\n\n  /**\n   * Write a provider into the given store\n   */\n  private async writeProviderEntry (cid: CID, peerId: PeerId, options?: WriteProviderEntryOptions): Promise<void> {\n    const key = toProviderKey(this.datastorePrefix, cid, peerId)\n    const buffer = varint.encode(options?.time?.getTime() ?? Date.now())\n\n    await this.datastore.put(key, buffer, options)\n  }\n\n  /**\n   * Load providers for the given CID from the store\n   */\n  private async loadProviders (cid: CID, options?: AbortOptions): Promise<PeerMap<Date>> {\n    const providers = new PeerMap<Date>()\n    const key = toProviderKey(this.datastorePrefix, cid)\n\n    for await (const entry of this.datastore.query({ prefix: key.toString() }, options)) {\n      const { peerId } = parseProviderKey(entry.key)\n      providers.set(peerId, readProviderTime(entry.value))\n    }\n\n    return providers\n  }\n}\n", "import pTimeout from 'p-timeout';\n\nconst normalizeEmitter = emitter => {\n\tconst addListener = emitter.addEventListener || emitter.on || emitter.addListener;\n\tconst removeListener = emitter.removeEventListener || emitter.off || emitter.removeListener;\n\n\tif (!addListener || !removeListener) {\n\t\tthrow new TypeError('Emitter is not compatible');\n\t}\n\n\treturn {\n\t\taddListener: addListener.bind(emitter),\n\t\tremoveListener: removeListener.bind(emitter),\n\t};\n};\n\nexport function pEventMultiple(emitter, event, options) {\n\tlet cancel;\n\tconst returnValue = new Promise((resolve, reject) => {\n\t\toptions = {\n\t\t\trejectionEvents: ['error'],\n\t\t\tmultiArgs: false,\n\t\t\tresolveImmediately: false,\n\t\t\t...options,\n\t\t};\n\n\t\tif (!(options.count >= 0 && (options.count === Number.POSITIVE_INFINITY || Number.isInteger(options.count)))) {\n\t\t\tthrow new TypeError('The `count` option should be at least 0 or more');\n\t\t}\n\n\t\toptions.signal?.throwIfAborted();\n\n\t\t// Allow multiple events\n\t\tconst events = [event].flat();\n\n\t\tconst items = [];\n\t\tconst {addListener, removeListener} = normalizeEmitter(emitter);\n\n\t\tconst onItem = (...arguments_) => {\n\t\t\tconst value = options.multiArgs ? arguments_ : arguments_[0];\n\n\t\t\t// eslint-disable-next-line unicorn/no-array-callback-reference\n\t\t\tif (options.filter && !options.filter(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\titems.push(value);\n\n\t\t\tif (options.count === items.length) {\n\t\t\t\tcancel();\n\t\t\t\tresolve(items);\n\t\t\t}\n\t\t};\n\n\t\tconst rejectHandler = error => {\n\t\t\tcancel();\n\t\t\treject(error);\n\t\t};\n\n\t\tcancel = () => {\n\t\t\tfor (const event of events) {\n\t\t\t\tremoveListener(event, onItem);\n\t\t\t}\n\n\t\t\tfor (const rejectionEvent of options.rejectionEvents) {\n\t\t\t\tremoveListener(rejectionEvent, rejectHandler);\n\t\t\t}\n\t\t};\n\n\t\tfor (const event of events) {\n\t\t\taddListener(event, onItem);\n\t\t}\n\n\t\tfor (const rejectionEvent of options.rejectionEvents) {\n\t\t\taddListener(rejectionEvent, rejectHandler);\n\t\t}\n\n\t\tif (options.signal) {\n\t\t\toptions.signal.addEventListener('abort', () => {\n\t\t\t\trejectHandler(options.signal.reason);\n\t\t\t}, {once: true});\n\t\t}\n\n\t\tif (options.resolveImmediately) {\n\t\t\tresolve(items);\n\t\t}\n\t});\n\n\treturnValue.cancel = cancel;\n\n\tif (typeof options.timeout === 'number') {\n\t\tconst timeout = pTimeout(returnValue, {milliseconds: options.timeout});\n\t\ttimeout.cancel = cancel;\n\t\treturn timeout;\n\t}\n\n\treturn returnValue;\n}\n\nexport function pEvent(emitter, event, options) {\n\tif (typeof options === 'function') {\n\t\toptions = {filter: options};\n\t}\n\n\toptions = {\n\t\t...options,\n\t\tcount: 1,\n\t\tresolveImmediately: false,\n\t};\n\n\tconst arrayPromise = pEventMultiple(emitter, event, options);\n\tconst promise = arrayPromise.then(array => array[0]);\n\tpromise.cancel = arrayPromise.cancel;\n\n\treturn promise;\n}\n\nexport function pEventIterator(emitter, event, options) {\n\tif (typeof options === 'function') {\n\t\toptions = {filter: options};\n\t}\n\n\t// Allow multiple events\n\tconst events = [event].flat();\n\n\toptions = {\n\t\trejectionEvents: ['error'],\n\t\tresolutionEvents: [],\n\t\tlimit: Number.POSITIVE_INFINITY,\n\t\tmultiArgs: false,\n\t\t...options,\n\t};\n\n\tconst {limit} = options;\n\tconst isValidLimit = limit >= 0 && (limit === Number.POSITIVE_INFINITY || Number.isInteger(limit));\n\tif (!isValidLimit) {\n\t\tthrow new TypeError('The `limit` option should be a non-negative integer or Infinity');\n\t}\n\n\toptions.signal?.throwIfAborted();\n\n\tif (limit === 0) {\n\t\t// Return an empty async iterator to avoid any further cost\n\t\treturn {\n\t\t\t[Symbol.asyncIterator]() {\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tasync next() {\n\t\t\t\treturn {\n\t\t\t\t\tdone: true,\n\t\t\t\t\tvalue: undefined,\n\t\t\t\t};\n\t\t\t},\n\t\t};\n\t}\n\n\tconst {addListener, removeListener} = normalizeEmitter(emitter);\n\n\tlet isDone = false;\n\tlet error;\n\tlet hasPendingError = false;\n\tconst nextQueue = [];\n\tconst valueQueue = [];\n\tlet eventCount = 0;\n\tlet isLimitReached = false;\n\n\tconst valueHandler = (...arguments_) => {\n\t\teventCount++;\n\t\tisLimitReached = eventCount === limit;\n\n\t\tconst value = options.multiArgs ? arguments_ : arguments_[0];\n\n\t\tif (nextQueue.length > 0) {\n\t\t\tconst {resolve} = nextQueue.shift();\n\n\t\t\tresolve({done: false, value});\n\n\t\t\tif (isLimitReached) {\n\t\t\t\tcancel();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueQueue.push(value);\n\n\t\tif (isLimitReached) {\n\t\t\tcancel();\n\t\t}\n\t};\n\n\tconst cancel = () => {\n\t\tisDone = true;\n\n\t\tfor (const event of events) {\n\t\t\tremoveListener(event, valueHandler);\n\t\t}\n\n\t\tfor (const rejectionEvent of options.rejectionEvents) {\n\t\t\tremoveListener(rejectionEvent, rejectHandler);\n\t\t}\n\n\t\tfor (const resolutionEvent of options.resolutionEvents) {\n\t\t\tremoveListener(resolutionEvent, resolveHandler);\n\t\t}\n\n\t\twhile (nextQueue.length > 0) {\n\t\t\tconst {resolve} = nextQueue.shift();\n\t\t\tresolve({done: true, value: undefined});\n\t\t}\n\t};\n\n\tconst rejectHandler = (...arguments_) => {\n\t\terror = options.multiArgs ? arguments_ : arguments_[0];\n\n\t\tif (nextQueue.length > 0) {\n\t\t\tconst {reject} = nextQueue.shift();\n\t\t\treject(error);\n\t\t} else {\n\t\t\thasPendingError = true;\n\t\t}\n\n\t\tcancel();\n\t};\n\n\tconst resolveHandler = (...arguments_) => {\n\t\tconst value = options.multiArgs ? arguments_ : arguments_[0];\n\n\t\t// eslint-disable-next-line unicorn/no-array-callback-reference\n\t\tif (options.filter && !options.filter(value)) {\n\t\t\tcancel();\n\t\t\treturn;\n\t\t}\n\n\t\tif (nextQueue.length > 0) {\n\t\t\tconst {resolve} = nextQueue.shift();\n\t\t\tresolve({done: true, value});\n\t\t} else {\n\t\t\tvalueQueue.push(value);\n\t\t}\n\n\t\tcancel();\n\t};\n\n\tfor (const event of events) {\n\t\taddListener(event, valueHandler);\n\t}\n\n\tfor (const rejectionEvent of options.rejectionEvents) {\n\t\taddListener(rejectionEvent, rejectHandler);\n\t}\n\n\tfor (const resolutionEvent of options.resolutionEvents) {\n\t\taddListener(resolutionEvent, resolveHandler);\n\t}\n\n\tif (options.signal) {\n\t\toptions.signal.addEventListener('abort', () => {\n\t\t\trejectHandler(options.signal.reason);\n\t\t}, {once: true});\n\t}\n\n\treturn {\n\t\t[Symbol.asyncIterator]() {\n\t\t\treturn this;\n\t\t},\n\t\tasync next() {\n\t\t\tif (valueQueue.length > 0) {\n\t\t\t\tconst value = valueQueue.shift();\n\t\t\t\treturn {\n\t\t\t\t\tdone: isDone && valueQueue.length === 0 && !isLimitReached,\n\t\t\t\t\tvalue,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (hasPendingError) {\n\t\t\t\thasPendingError = false;\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tif (isDone) {\n\t\t\t\treturn {\n\t\t\t\t\tdone: true,\n\t\t\t\t\tvalue: undefined,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tnextQueue.push({resolve, reject});\n\t\t\t});\n\t\t},\n\t\tasync return(value) {\n\t\t\tcancel();\n\t\t\treturn {\n\t\t\t\tdone: isDone,\n\t\t\t\tvalue,\n\t\t\t};\n\t\t},\n\t};\n}\n\nexport {TimeoutError} from 'p-timeout';\n", "import { AbortError } from '@libp2p/interface'\nimport { Queue } from '@libp2p/utils/queue'\nimport { pushable } from 'it-pushable'\nimport { xor as uint8ArrayXor } from 'uint8arrays/xor'\nimport { xorCompare as uint8ArrayXorCompare } from 'uint8arrays/xor-compare'\nimport { convertPeerId, convertBuffer } from '../utils.js'\nimport { pathEndedEvent, queryErrorEvent } from './events.js'\nimport type { QueryEvent } from '../index.js'\nimport type { QueryFunc } from '../query/types.js'\nimport type { Logger, PeerId, RoutingOptions, AbortOptions, PeerInfo } from '@libp2p/interface'\nimport type { ConnectionManager } from '@libp2p/interface-internal'\nimport type { Filter } from '@libp2p/utils/filters'\n\nexport interface QueryPathOptions extends RoutingOptions {\n  /**\n   * What are we trying to find\n   */\n  key: Uint8Array\n\n  /**\n   * Where we start our query\n   */\n  startingPeers: PeerId[]\n\n  /**\n   * Who we are\n   */\n  ourPeerId: PeerId\n\n  /**\n   * The query function to run with each peer\n   */\n  query: QueryFunc\n\n  /**\n   * How many concurrent node/value lookups to run\n   */\n  alpha: number\n\n  /**\n   * The index within `k` this path represents\n   */\n  path: number\n\n  /**\n   * How many disjoint paths are in this query\n   */\n  numPaths: number\n\n  /**\n   * Query log\n   */\n  log: Logger\n\n  /**\n   * Set of peers seen by this and other paths\n   */\n  peersSeen: Filter\n\n  /**\n   * The libp2p connection manager\n   */\n  connectionManager: ConnectionManager\n\n  /**\n   * The overall query abort signal\n   */\n  signal: AbortSignal\n}\n\ninterface QueryQueueOptions extends AbortOptions {\n  distance: Uint8Array\n}\n\n/**\n * Walks a path through the DHT, calling the passed query function for\n * every peer encountered that we have not seen before\n */\nexport async function * queryPath (options: QueryPathOptions): AsyncGenerator<QueryEvent, void, undefined> {\n  const { key, startingPeers, ourPeerId, query, alpha, path, numPaths, log, peersSeen, connectionManager, signal } = options\n  const events = pushable<QueryEvent>({\n    objectMode: true\n  })\n\n  // Only ALPHA node/value lookups are allowed at any given time for each process\n  // https://github.com/libp2p/specs/tree/master/kad-dht#alpha-concurrency-parameter-%CE%B1\n  const queue = new Queue<undefined, QueryQueueOptions>({\n    concurrency: alpha,\n    sort: (a, b) => uint8ArrayXorCompare(a.options.distance, b.options.distance)\n  })\n  queue.addEventListener('idle', () => {\n    events.push(pathEndedEvent({\n      path: {\n        index: path,\n        queued: queue.queued,\n        running: queue.running,\n        total: queue.size\n      }\n    }, options))\n\n    events.end()\n  })\n  queue.addEventListener('error', (evt) => {\n    log.error('error during query - %e', evt.detail)\n  })\n\n  const onAbort = (): void => {\n    queue.abort()\n    events.end(new AbortError())\n  }\n\n  signal.addEventListener('abort', onAbort)\n\n  try {\n    // perform lookups on kadId, not the actual value\n    const kadId = await convertBuffer(key, {\n      signal\n    })\n\n    /**\n     * Adds the passed peer to the query queue if it's not us and no other path\n     * has passed through this peer\n     */\n    function queryPeer (peer: PeerInfo, peerKadId: Uint8Array): void {\n      if (peer == null) {\n        return\n      }\n\n      peersSeen.add(peer.id.toMultihash().bytes)\n\n      const peerXor = uint8ArrayXor(peerKadId, kadId)\n\n      queue.add(async () => {\n        try {\n          for await (const event of query({\n            ...options,\n            key,\n            peer,\n            path: {\n              index: path,\n              queued: queue.queued,\n              running: queue.running,\n              total: queue.size\n            },\n            numPaths,\n            peerKadId,\n            signal\n          })) {\n            // if there are closer peers and the query has not completed, continue the query\n            if (event.name === 'PEER_RESPONSE') {\n              for (const closerPeer of event.closer) {\n                if (peersSeen.has(closerPeer.id.toMultihash().bytes)) { // eslint-disable-line max-depth\n                  log('already seen %p in query', closerPeer.id)\n                  continue\n                }\n\n                if (ourPeerId.equals(closerPeer.id)) { // eslint-disable-line max-depth\n                  log('not querying ourselves')\n                  continue\n                }\n\n                if (!(await connectionManager.isDialable(closerPeer.multiaddrs))) { // eslint-disable-line max-depth\n                  log('not querying undialable peer')\n                  continue\n                }\n\n                const closerPeerKadId = await convertPeerId(closerPeer.id, {\n                  signal\n                })\n                const closerPeerXor = uint8ArrayXor(closerPeerKadId, kadId)\n\n                // only continue query if closer peer is actually closer\n                if (uint8ArrayXorCompare(closerPeerXor, peerXor) !== -1) { // eslint-disable-line max-depth\n                  log('skipping %p as they are not closer to %b than %p', closerPeer.id, key, peer)\n                  continue\n                }\n\n                log('querying closer peer %p', closerPeer.id)\n                queryPeer(closerPeer, closerPeerKadId)\n              }\n            }\n\n            events.push({\n              ...event,\n              path: {\n                index: path,\n                queued: queue.queued,\n                running: queue.running,\n                total: queue.size\n              }\n            })\n          }\n        } catch (err: any) {\n          // yield error event if query is continuing\n          events.push(queryErrorEvent({\n            from: peer.id,\n            error: err,\n            path: {\n              index: path,\n              queued: queue.queued,\n              running: queue.running - 1,\n              total: queue.size - 1\n            }\n          }, options))\n        }\n      }, {\n        distance: peerXor\n      }).catch(err => {\n        log.error('error during query - %e', err)\n      })\n    }\n\n    // begin the query with the starting peers\n    await Promise.all(\n      startingPeers.map(async startingPeer => {\n        queryPeer({ id: startingPeer, multiaddrs: [] }, await convertPeerId(startingPeer, {\n          signal\n        }))\n      })\n    )\n\n    // yield results as they come in\n    yield * events\n  } finally {\n    signal.removeEventListener('abort', onAbort)\n  }\n}\n", "import { createScalableCuckooFilter } from '@libp2p/utils/filters'\nimport { anySignal } from 'any-signal'\nimport merge from 'it-merge'\nimport { setMaxListeners } from 'main-event'\nimport { pEvent } from 'p-event'\nimport { raceSignal } from 'race-signal'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport {\n  ALPHA, K, DEFAULT_QUERY_TIMEOUT\n} from '../constants.js'\nimport { convertBuffer } from '../utils.js'\nimport { queryPath } from './query-path.js'\nimport type { QueryFunc } from './types.js'\nimport type { QueryEvent } from '../index.js'\nimport type { RoutingTable } from '../routing-table/index.js'\nimport type { ComponentLogger, Metrics, PeerId, RoutingOptions, Startable } from '@libp2p/interface'\nimport type { ConnectionManager } from '@libp2p/interface-internal'\nimport type { DeferredPromise } from 'p-defer'\n\nexport interface CleanUpEvents {\n  cleanup: CustomEvent\n}\n\nexport interface QueryManagerInit {\n  logPrefix: string\n  metricsPrefix: string\n  disjointPaths?: number\n  alpha?: number\n  initialQuerySelfHasRun: DeferredPromise<void>\n  allowQueryWithZeroPeers?: boolean\n  routingTable: RoutingTable\n}\n\nexport interface QueryManagerComponents {\n  peerId: PeerId\n  metrics?: Metrics\n  logger: ComponentLogger\n  connectionManager: ConnectionManager\n}\n\nexport interface QueryOptions extends RoutingOptions {\n  isSelfQuery?: boolean\n}\n\n/**\n * Keeps track of all running queries\n */\nexport class QueryManager implements Startable {\n  public disjointPaths: number\n  private readonly alpha: number\n  private shutDownController: AbortController\n  private running: boolean\n  private readonly logger: ComponentLogger\n  private readonly peerId: PeerId\n  private readonly connectionManager: ConnectionManager\n  private readonly routingTable: RoutingTable\n  private initialQuerySelfHasRun?: DeferredPromise<void>\n  private readonly logPrefix: string\n  private readonly allowQueryWithZeroPeers: boolean\n\n  constructor (components: QueryManagerComponents, init: QueryManagerInit) {\n    this.logPrefix = init.logPrefix\n    this.disjointPaths = init.disjointPaths ?? K\n    this.alpha = init.alpha ?? ALPHA\n    this.initialQuerySelfHasRun = init.initialQuerySelfHasRun\n    this.routingTable = init.routingTable\n    this.logger = components.logger\n    this.peerId = components.peerId\n    this.connectionManager = components.connectionManager\n    this.allowQueryWithZeroPeers = init.allowQueryWithZeroPeers ?? false\n\n    // allow us to stop queries on shut down\n    this.shutDownController = new AbortController()\n    // make sure we don't make a lot of noise in the logs\n    setMaxListeners(Infinity, this.shutDownController.signal)\n\n    this.running = false\n  }\n\n  isStarted (): boolean {\n    return this.running\n  }\n\n  /**\n   * Starts the query manager\n   */\n  async start (): Promise<void> {\n    if (this.running) {\n      return\n    }\n\n    this.running = true\n\n    // allow us to stop queries on shut down\n    this.shutDownController = new AbortController()\n    // make sure we don't make a lot of noise in the logs\n    setMaxListeners(Infinity, this.shutDownController.signal)\n  }\n\n  /**\n   * Stops all queries\n   */\n  async stop (): Promise<void> {\n    this.running = false\n\n    this.shutDownController.abort()\n  }\n\n  async * run (key: Uint8Array, queryFunc: QueryFunc, options: QueryOptions = {}): AsyncGenerator<QueryEvent> {\n    if (!this.running) {\n      throw new Error('QueryManager not started')\n    }\n\n    if (options.signal == null) {\n      // don't let queries run forever\n      const signal = AbortSignal.timeout(DEFAULT_QUERY_TIMEOUT)\n\n      // this signal will get listened to for network requests, etc\n      // so make sure we don't make a lot of noise in the logs\n      setMaxListeners(Infinity, signal)\n\n      options = {\n        ...options,\n        signal\n      }\n    }\n\n    // if the user breaks out of a for..await of loop iterating over query\n    // results we need to cancel any in-flight network requests\n    const queryEarlyExitController = new AbortController()\n\n    const signal = anySignal([\n      this.shutDownController.signal,\n      queryEarlyExitController.signal,\n      options.signal\n    ])\n\n    // this signal will get listened to for every invocation of queryFunc\n    // so make sure we don't make a lot of noise in the logs\n    setMaxListeners(Infinity, signal, queryEarlyExitController.signal)\n\n    const log = this.logger.forComponent(`${this.logPrefix}:query:` + uint8ArrayToString(key, 'base58btc'))\n\n    // query a subset of peers up to `kBucketSize / 2` in length\n    let queryFinished = false\n\n    try {\n      if (this.routingTable.size === 0 && !this.allowQueryWithZeroPeers) {\n        log('routing table was empty, waiting for some peers before running%s query', options.isSelfQuery === true ? ' self' : '')\n        // wait to discover at least one DHT peer that isn't us\n        await pEvent(this.routingTable, 'peer:add', {\n          signal,\n          filter: (event) => !this.peerId.equals(event.detail)\n        })\n        log('routing table has peers, continuing with%s query', options.isSelfQuery === true ? ' self' : '')\n      }\n\n      if (options.isSelfQuery !== true && this.initialQuerySelfHasRun != null) {\n        log('waiting for initial self query before continuing')\n\n        await raceSignal(this.initialQuerySelfHasRun.promise, signal)\n\n        this.initialQuerySelfHasRun = undefined\n      }\n\n      log('query:start')\n\n      const id = await convertBuffer(key, {\n        signal\n      })\n      const peers = this.routingTable.closestPeers(id, {\n        count: this.routingTable.kBucketSize\n      })\n\n      // split peers into d buckets evenly(ish)\n      const peersToQuery = peers.sort(() => {\n        if (Math.random() > 0.5) {\n          return 1\n        }\n\n        return -1\n      })\n        .reduce((acc: PeerId[][], curr, index) => {\n          acc[index % this.disjointPaths].push(curr)\n\n          return acc\n        }, new Array(this.disjointPaths).fill(0).map(() => []))\n        .filter(peers => peers.length > 0)\n\n      if (peers.length === 0) {\n        log.error('running query with no peers')\n        return\n      }\n\n      // make sure we don't get trapped in a loop\n      const peersSeen = createScalableCuckooFilter(1024)\n\n      // Create query paths from the starting peers\n      const paths = peersToQuery.map((peer, index) => {\n        return queryPath({\n          ...options,\n          key,\n          startingPeers: peer,\n          ourPeerId: this.peerId,\n          signal,\n          query: queryFunc,\n          path: index,\n          numPaths: peersToQuery.length,\n          alpha: this.alpha,\n          log,\n          peersSeen,\n          onProgress: options.onProgress,\n          connectionManager: this.connectionManager\n        })\n      })\n\n      // Execute the query along each disjoint path and yield their results as they become available\n      for await (const event of merge(...paths)) {\n        if (event.name === 'QUERY_ERROR') {\n          log.error('query error', event.error)\n        }\n\n        if (event.name === 'PEER_RESPONSE') {\n          for (const peer of [...event.closer, ...event.providers]) {\n            // eslint-disable-next-line max-depth\n            if (!(await this.connectionManager.isDialable(peer.multiaddrs, {\n              signal\n            }))) {\n              continue\n            }\n\n            await this.routingTable.add(peer.id, {\n              signal\n            })\n          }\n        }\n\n        signal.throwIfAborted()\n        yield event\n      }\n\n      queryFinished = true\n    } catch (err) {\n      if (this.running) {\n        // ignore errors thrown during shut down\n        throw err\n      }\n    } finally {\n      if (!queryFinished) {\n        log('query exited early')\n        queryEarlyExitController.abort()\n      }\n\n      signal.clear()\n\n      log('query finished')\n    }\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * Counts the number of items in an (async)iterable.\n *\n * N.b. will consume the iterable\n *\n * @example\n *\n * ```javascript\n * import length from 'it-length'\n *\n * // This can also be an iterator, generator, etc\n * const values = [0, 1, 2, 3, 4]\n *\n * const res = length(values)\n *\n * console.info(res) // 5\n * ```\n *\n * Async sources must be awaited:\n *\n * ```javascript\n * import length from 'it-length'\n *\n * const values = async function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * const res = await length(values())\n *\n * console.info(res) // 5\n * ```\n */\n\nfunction isAsyncIterable <T> (thing: any): thing is AsyncIterable<T> {\n  return thing[Symbol.asyncIterator] != null\n}\n\n/**\n * Consumes the passed iterator and returns the number of items it contained\n */\nfunction length (source: Iterable<unknown>): number\nfunction length (source: Iterable<unknown> | AsyncIterable<unknown>): Promise<number>\nfunction length (source: Iterable<unknown> | AsyncIterable<unknown>): Promise<number> | number {\n  if (isAsyncIterable(source)) {\n    return (async () => {\n      let count = 0\n\n      for await (const _ of source) { // eslint-disable-line @typescript-eslint/no-unused-vars\n        count++\n      }\n\n      return count\n    })()\n  } else {\n    let count = 0\n\n    for (const _ of source) { // eslint-disable-line @typescript-eslint/no-unused-vars\n      count++\n    }\n\n    return count\n  }\n}\n\nexport default length\n", "import { anySignal } from 'any-signal'\nimport length from 'it-length'\nimport { pipe } from 'it-pipe'\nimport take from 'it-take'\nimport { setMaxListeners } from 'main-event'\nimport pDefer from 'p-defer'\nimport { QUERY_SELF_INTERVAL, QUERY_SELF_TIMEOUT, K, QUERY_SELF_INITIAL_INTERVAL } from './constants.js'\nimport { timeOperationMethod } from './utils.js'\nimport type { OperationMetrics } from './kad-dht.js'\nimport type { PeerRouting } from './peer-routing/index.js'\nimport type { ComponentLogger, Logger, Metrics, PeerId, Startable } from '@libp2p/interface'\nimport type { DeferredPromise } from 'p-defer'\n\nexport interface QuerySelfInit {\n  logPrefix: string\n  peerRouting: PeerRouting\n  count?: number\n  interval?: number\n  initialInterval?: number\n  queryTimeout?: number\n  initialQuerySelfHasRun: DeferredPromise<void>\n  operationMetrics: OperationMetrics\n}\n\nexport interface QuerySelfComponents {\n  peerId: PeerId\n  logger: ComponentLogger\n  metrics?: Metrics\n  events: EventTarget\n}\n\n/**\n * Receives notifications of new peers joining the network that support the DHT protocol\n */\nexport class QuerySelf implements Startable {\n  private readonly log: Logger\n  private readonly peerId: PeerId\n  private readonly peerRouting: PeerRouting\n  private readonly events: EventTarget\n  private readonly count: number\n  private readonly interval: number\n  private readonly initialInterval: number\n  private readonly queryTimeout: number\n  private running: boolean\n  private timeoutId?: ReturnType<typeof setTimeout>\n  private controller?: AbortController\n  private initialQuerySelfHasRun?: DeferredPromise<void>\n  private querySelfPromise?: DeferredPromise<void>\n\n  constructor (components: QuerySelfComponents, init: QuerySelfInit) {\n    this.peerId = components.peerId\n    this.log = components.logger.forComponent(`${init.logPrefix}:query-self`)\n    this.events = components.events\n    this.running = false\n    this.peerRouting = init.peerRouting\n    this.count = init.count ?? K\n    this.interval = init.interval ?? QUERY_SELF_INTERVAL\n    this.initialInterval = init.initialInterval ?? QUERY_SELF_INITIAL_INTERVAL\n    this.queryTimeout = init.queryTimeout ?? QUERY_SELF_TIMEOUT\n    this.initialQuerySelfHasRun = init.initialQuerySelfHasRun\n\n    this.querySelf = timeOperationMethod(this.querySelf.bind(this), init.operationMetrics, 'SELF_QUERY')\n  }\n\n  isStarted (): boolean {\n    return this.running\n  }\n\n  start (): void {\n    if (this.running) {\n      return\n    }\n\n    this.running = true\n    clearTimeout(this.timeoutId)\n    this.timeoutId = setTimeout(() => {\n      this.querySelf()\n        .catch(err => {\n          this.log.error('error running self-query', err)\n        })\n    }, this.initialInterval)\n  }\n\n  stop (): void {\n    this.running = false\n\n    if (this.timeoutId != null) {\n      clearTimeout(this.timeoutId)\n    }\n\n    if (this.controller != null) {\n      this.controller.abort()\n    }\n  }\n\n  async querySelf (): Promise<void> {\n    if (!this.running) {\n      this.log('skip self-query because we are not started')\n      return\n    }\n\n    if (this.querySelfPromise != null) {\n      this.log('joining existing self query')\n      return this.querySelfPromise.promise\n    }\n\n    this.querySelfPromise = pDefer()\n\n    if (this.running) {\n      this.controller = new AbortController()\n      const signals = [this.controller.signal]\n\n      // add a shorter timeout if we've already run our initial self query\n      if (this.initialQuerySelfHasRun == null) {\n        const timeoutSignal = AbortSignal.timeout(this.queryTimeout)\n        setMaxListeners(Infinity, timeoutSignal)\n        signals.push(timeoutSignal)\n      }\n\n      const signal = anySignal(signals)\n      setMaxListeners(Infinity, signal, this.controller.signal)\n\n      try {\n        this.log('run self-query, look for %d peers timing out after %dms', this.count, this.queryTimeout)\n        const start = Date.now()\n\n        const peers = await pipe(\n          this.peerRouting.getClosestPeers(this.peerId.toMultihash().bytes, {\n            signal,\n            isSelfQuery: true\n          }),\n          (source) => take(source, this.count),\n          async (source) => length(source)\n        )\n\n        signal?.throwIfAborted()\n\n        const duration = Date.now() - start\n\n        this.log('self-query found %d peers in %dms', peers, duration)\n\n        this.events.dispatchEvent(new CustomEvent('kad-dht:query:self', {\n          detail: {\n            peers,\n            duration\n          }\n        }))\n      } catch (err: any) {\n        this.log.error('self-query error', err)\n      } finally {\n        signal.clear()\n\n        if (this.initialQuerySelfHasRun != null) {\n          this.initialQuerySelfHasRun.resolve()\n          this.initialQuerySelfHasRun = undefined\n        }\n      }\n    }\n\n    this.querySelfPromise.resolve()\n    this.querySelfPromise = undefined\n\n    if (!this.running) {\n      return\n    }\n\n    this.timeoutId = setTimeout(() => {\n      this.querySelf()\n        .catch(err => {\n          this.log.error('error running self-query', err)\n        })\n    }, this.interval)\n  }\n}\n", "import { AdaptiveTimeout } from '@libp2p/utils/adaptive-timeout'\nimport { Queue } from '@libp2p/utils/queue'\nimport drain from 'it-drain'\nimport { TypedEventEmitter, setMaxListeners } from 'main-event'\nimport { PROVIDERS_VALIDITY, REPROVIDE_CONCURRENCY, REPROVIDE_INTERVAL, REPROVIDE_MAX_QUEUE_SIZE, REPROVIDE_THRESHOLD, REPROVIDE_TIMEOUT } from './constants.js'\nimport { parseProviderKey, readProviderTime, timeOperationMethod } from './utils.js'\nimport type { ContentRouting } from './content-routing/index.js'\nimport type { OperationMetrics } from './kad-dht.js'\nimport type { AbortOptions, ComponentLogger, Logger, Metrics, PeerId } from '@libp2p/interface'\nimport type { AddressManager } from '@libp2p/interface-internal'\nimport type { AdaptiveTimeoutInit } from '@libp2p/utils/adaptive-timeout'\nimport type { Datastore } from 'interface-datastore'\nimport type { CID } from 'multiformats/cid'\n\nexport interface ReproviderComponents {\n  peerId: PeerId\n  datastore: Datastore\n  logger: ComponentLogger\n  addressManager: AddressManager\n  metrics?: Metrics\n}\n\nexport interface ReproviderInit {\n  logPrefix: string\n  metricsPrefix: string\n  datastorePrefix: string\n  contentRouting: ContentRouting\n  operationMetrics: OperationMetrics\n  concurrency?: number\n  maxQueueSize?: number\n  threshold?: number\n  validity?: number\n  interval?: number\n  timeout?: Omit<AdaptiveTimeoutInit, 'metricsName' | 'metrics'>\n}\n\ninterface QueueJobOptions extends AbortOptions {\n  cid: CID\n}\n\ninterface ReprovideEvents {\n  'reprovide:start': CustomEvent\n  'reprovide:end': CustomEvent\n}\n\nexport class Reprovider extends TypedEventEmitter<ReprovideEvents> {\n  private readonly log: Logger\n  private readonly reprovideQueue: Queue<void, QueueJobOptions>\n  private readonly maxQueueSize: number\n  private readonly datastore: Datastore\n  private timeout?: ReturnType<typeof setTimeout>\n  private readonly reprovideTimeout: AdaptiveTimeout\n  private running: boolean\n  private shutdownController?: AbortController\n  private readonly reprovideThreshold: number\n  private readonly contentRouting: ContentRouting\n  private readonly datastorePrefix: string\n  private readonly addressManager: AddressManager\n  private readonly validity: number\n  private readonly interval: number\n  private readonly peerId: PeerId\n\n  constructor (components: ReproviderComponents, init: ReproviderInit) {\n    super()\n\n    this.log = components.logger.forComponent(`${init.logPrefix}:reprovider`)\n    this.peerId = components.peerId\n    this.reprovideQueue = new Queue({\n      concurrency: init.concurrency ?? REPROVIDE_CONCURRENCY,\n      metrics: components.metrics,\n      metricName: `${init.metricsPrefix}_reprovide_queue`\n    })\n    this.reprovideTimeout = new AdaptiveTimeout({\n      ...(init.timeout ?? {}),\n      metrics: components.metrics,\n      metricName: `${init.metricsPrefix}_reprovide_timeout_milliseconds`\n    })\n    this.datastore = components.datastore\n    this.addressManager = components.addressManager\n    this.datastorePrefix = `${init.datastorePrefix}/provider`\n    this.reprovideThreshold = init.threshold ?? REPROVIDE_THRESHOLD\n    this.maxQueueSize = init.maxQueueSize ?? REPROVIDE_MAX_QUEUE_SIZE\n    this.validity = init.validity ?? PROVIDERS_VALIDITY\n    this.interval = init.interval ?? REPROVIDE_INTERVAL\n    this.contentRouting = init.contentRouting\n    this.running = false\n\n    this.reprovide = timeOperationMethod(this.reprovide.bind(this), init.operationMetrics, 'PROVIDE')\n  }\n\n  start (): void {\n    if (this.running) {\n      return\n    }\n\n    this.running = true\n\n    this.shutdownController = new AbortController()\n    setMaxListeners(Infinity, this.shutdownController.signal)\n\n    this.timeout = setTimeout(() => {\n      this.cleanUp({\n        signal: AbortSignal.timeout(REPROVIDE_TIMEOUT)\n      }).catch(err => {\n        this.log.error('error running reprovide/cleanup - %e', err)\n      })\n    }, this.interval)\n  }\n\n  stop (): void {\n    this.running = false\n    this.reprovideQueue.clear()\n    clearTimeout(this.timeout)\n    this.shutdownController?.abort()\n  }\n\n  /**\n   * Check all provider records. Delete them if they have expired, reprovide\n   * them if the provider is us and the expiry is within the reprovide window.\n   */\n  private async cleanUp (options?: AbortOptions): Promise<void> {\n    try {\n      this.safeDispatchEvent('reprovide:start')\n\n      // Get all provider entries from the datastore\n      for await (const entry of this.datastore.query({\n        prefix: this.datastorePrefix\n      }, options)) {\n        try {\n          // Add a delete to the batch for each expired entry\n          const { cid, peerId } = parseProviderKey(entry.key)\n          const created = readProviderTime(entry.value).getTime()\n          const expires = created + this.validity\n          const now = Date.now()\n          const expired = now > expires\n\n          this.log.trace('comparing: %d < %d = %s %s', created, now - this.validity, expired, expired ? '(expired)' : '')\n\n          // delete the record if it has expired\n          if (expired) {\n            await this.datastore.delete(entry.key, options)\n          }\n\n          // if the provider is us and we are within the reprovide threshold,\n          // reprovide the record\n          if (this.peerId.equals(peerId) && (now - expires) < this.reprovideThreshold) {\n            this.queueReprovide(cid)\n              .catch(err => {\n                this.log.error('could not reprovide %c - %e', cid, err)\n              })\n          }\n        } catch (err: any) {\n          this.log.error('error processing datastore key %s - %e', entry.key, err.message)\n        }\n      }\n\n      this.log('reprovide/cleanup successful')\n    } finally {\n      this.safeDispatchEvent('reprovide:end')\n\n      if (this.running) {\n        this.timeout = setTimeout(() => {\n          this.cleanUp({\n            signal: AbortSignal.timeout(REPROVIDE_TIMEOUT)\n          }).catch(err => {\n            this.log.error('error running re-provide - %e', err)\n          })\n        }, this.interval)\n      }\n    }\n  }\n\n  private async queueReprovide (cid: CID, options?: AbortOptions): Promise<void> {\n    if (!this.running) {\n      return\n    }\n\n    this.log.trace('waiting for queue capacity before adding %c to re-provide queue', cid)\n    await this.reprovideQueue.onSizeLessThan(this.maxQueueSize, options)\n\n    const existingJob = this.reprovideQueue.queue.find(job => job.options.cid.equals(cid))\n\n    if (existingJob != null) {\n      this.log.trace('not adding %c to re-provide queue - already in queue', cid)\n      return existingJob.join()\n    }\n\n    this.log.trace('adding %c to re-provide queue', cid)\n\n    this.reprovideQueue.add(async (options): Promise<void> => {\n      options.signal?.throwIfAborted()\n\n      if (!this.running) {\n        return\n      }\n\n      this.log.trace('re-providing %c', cid)\n\n      // use adaptive timeout\n      const signal = this.reprovideTimeout.getTimeoutSignal(options)\n\n      try {\n        // reprovide\n        await this.reprovide(options.cid, options)\n      } finally {\n        this.reprovideTimeout.cleanUp(signal)\n      }\n\n      this.log.trace('re-provided %c', cid)\n    }, {\n      signal: this.shutdownController?.signal,\n      cid\n    })\n      .catch(err => {\n        this.log.error('could not re-provide key %c - %e', cid, err)\n      })\n  }\n\n  private async reprovide (cid: CID, options?: AbortOptions): Promise<void> {\n    // reprovide\n    await drain(this.contentRouting.provide(cid, this.addressManager.getAddresses(), options))\n  }\n}\n", "import { PeerSet } from '@libp2p/peer-collections'\nimport { KEEP_ALIVE_TAG } from '../constants.js'\nimport { PeerDistanceList } from '../peer-distance-list.js'\nimport { convertPeerId } from '../utils.js'\nimport type { RoutingTable } from './index.js'\nimport type { ComponentLogger, Logger, Metrics, PeerId, PeerStore, Startable } from '@libp2p/interface'\n\nexport const PEER_SET_SIZE = 20\nexport const REFRESH_INTERVAL = 5000\nexport const KAD_CLOSE_TAG_NAME = 'kad-close'\nexport const KAD_CLOSE_TAG_VALUE = 50\n\nexport interface ClosestPeersInit {\n  logPrefix: string\n  routingTable: RoutingTable\n  peerSetSize?: number\n  refreshInterval?: number\n  closeTagName?: string\n  closeTagValue?: number\n}\n\nexport interface ClosestPeersComponents {\n  peerId: PeerId\n  peerStore: PeerStore\n  metrics?: Metrics\n  logger: ComponentLogger\n}\n\n/**\n * Contains a list of the kad-closest peers encountered on the network.\n *\n * Once every few seconds, if the list has changed, it tags the closest peers.\n */\nexport class ClosestPeers implements Startable {\n  private readonly routingTable: RoutingTable\n  private readonly components: ClosestPeersComponents\n  private closestPeers: PeerSet\n  private newPeers?: PeerDistanceList\n  private readonly refreshInterval: number\n  private readonly peerSetSize: number\n  private timeout?: ReturnType<typeof setTimeout>\n  private readonly closeTagName: string\n  private readonly closeTagValue: number\n  private readonly log: Logger\n  private running: boolean\n\n  constructor (components: ClosestPeersComponents, init: ClosestPeersInit) {\n    this.components = components\n    this.log = components.logger.forComponent(`${init.logPrefix}:routing-table`)\n    this.routingTable = init.routingTable\n    this.refreshInterval = init.refreshInterval ?? REFRESH_INTERVAL\n    this.peerSetSize = init.peerSetSize ?? PEER_SET_SIZE\n    this.closeTagName = init.closeTagName ?? KAD_CLOSE_TAG_NAME\n    this.closeTagValue = init.closeTagValue ?? KAD_CLOSE_TAG_VALUE\n\n    this.closestPeers = new PeerSet()\n    this.onPeerPing = this.onPeerPing.bind(this)\n    this.running = false\n  }\n\n  async start (): Promise<void> {\n    if (this.running) {\n      return\n    }\n\n    this.running = true\n\n    const targetKadId = await convertPeerId(this.components.peerId)\n    this.newPeers = new PeerDistanceList(targetKadId, this.peerSetSize)\n    this.routingTable.addEventListener('peer:ping', this.onPeerPing)\n\n    this.timeout = setInterval(() => {\n      this.updatePeerTags()\n        .catch(err => {\n          this.log.error('error updating peer tags - %e', err)\n        })\n    }, this.refreshInterval)\n  }\n\n  stop (): void {\n    this.running = false\n    this.routingTable.removeEventListener('peer:ping', this.onPeerPing)\n    clearTimeout(this.timeout)\n  }\n\n  onPeerPing (event: CustomEvent<PeerId>): void {\n    this.newPeers?.add({ id: event.detail, multiaddrs: [] })\n      .catch(err => {\n        this.log.error('error adding peer to distance list - %e', err)\n      })\n  }\n\n  async updatePeerTags (): Promise<void> {\n    const newClosest = new PeerSet(this.newPeers?.peers.map(({ peer }) => peer.id))\n    const added = newClosest.difference(this.closestPeers)\n    const removed = this.closestPeers.difference(newClosest)\n    this.closestPeers = newClosest\n\n    await Promise.all([\n      ...[...added].map(async peerId => {\n        await this.components.peerStore.merge(peerId, {\n          tags: {\n            [this.closeTagName]: {\n              value: this.closeTagValue\n            },\n            [KEEP_ALIVE_TAG]: {\n              value: 1\n            }\n          }\n        })\n      }),\n      ...[...removed].map(async peerId => {\n        await this.components.peerStore.merge(peerId, {\n          tags: {\n            [this.closeTagName]: undefined,\n            [KEEP_ALIVE_TAG]: undefined\n          }\n        })\n      })\n    ])\n  }\n}\n", "import { PeerMap, trackedPeerMap } from '@libp2p/peer-collections'\nimport map from 'it-map'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { xor as uint8ArrayXor } from 'uint8arrays/xor'\nimport { PeerDistanceList } from '../peer-distance-list.js'\nimport { convertPeerId } from '../utils.js'\nimport { KBUCKET_SIZE, LAST_PING_THRESHOLD, PING_OLD_CONTACT_COUNT, PREFIX_LENGTH } from './index.js'\nimport type { PeerId, AbortOptions, Metrics } from '@libp2p/interface'\n\nexport interface PingFunction {\n  /**\n   * Return either none or at least one contact that does not respond to a ping\n   * message\n   */\n  (oldContacts: Peer[], options?: AbortOptions): AsyncGenerator<Peer>\n}\n\n/**\n * Before a peer can be added to the table, verify that it is online and working\n * correctly\n */\nexport interface VerifyFunction {\n  (contact: Peer, options?: AbortOptions): Promise<boolean>\n}\n\nexport interface OnAddCallback {\n  /**\n   * Invoked when a new peer is added to the routing tables\n   */\n  (peer: Peer, bucket: LeafBucket, options?: AbortOptions): Promise<void>\n}\n\nexport interface OnRemoveCallback {\n  /**\n   * Invoked when a peer is evicted from the routing tables\n   */\n  (peer: Peer, bucket: LeafBucket, options?: AbortOptions): Promise<void>\n}\n\nexport interface OnMoveCallback {\n  /**\n   * Invoked when a peer is moved between buckets in the routing tables\n   */\n  (peer: Peer, oldBucket: LeafBucket, newBucket: LeafBucket, options?: AbortOptions): Promise<void>\n}\n\nexport interface KBucketComponents {\n  peerId: PeerId\n  metrics?: Metrics\n}\n\nexport interface KBucketOptions {\n  /**\n   * The current peer. All subsequently added peers must have a KadID that is\n   * the same length as this peer.\n   */\n  // localPeer: Peer\n\n  /**\n   * How many bits of the key to use when forming the bucket trie. The larger\n   * this value, the deeper the tree will grow and the slower the lookups will\n   * be but the peers returned will be more specific to the key.\n   *\n   * @default 8\n   */\n  prefixLength?: number\n\n  /**\n   * The number of nodes that a max-depth k-bucket can contain before being\n   * full.\n   *\n   * @default 20\n   */\n  kBucketSize?: number\n\n  /**\n   * The number of nodes that an intermediate k-bucket can contain before being\n   * split.\n   *\n   * @default kBucketSize\n   */\n  splitThreshold?: number\n\n  /**\n   * The number of nodes to ping when a bucket that should not be split becomes\n   * full. KBucket will emit a `ping` event that contains\n   * `numberOfOldContactsToPing` nodes that have not been contacted the longest.\n   *\n   * @default 3\n   */\n  numberOfOldContactsToPing?: number\n\n  /**\n   * Do not re-ping a peer during this time window in ms\n   *\n   * @default 600000\n   */\n  lastPingThreshold?: number\n\n  ping: PingFunction\n  verify: VerifyFunction\n  onAdd?: OnAddCallback\n  onRemove?: OnRemoveCallback\n  metricsPrefix?: string\n}\n\nexport interface Peer {\n  kadId: Uint8Array\n  peerId: PeerId\n  lastPing: number\n}\n\nexport interface LeafBucket {\n  prefix: string\n  depth: number\n  peers: Peer[]\n}\n\nexport interface InternalBucket {\n  prefix: string\n  depth: number\n  left: Bucket\n  right: Bucket\n}\n\nexport type Bucket = LeafBucket | InternalBucket\n\nexport function isLeafBucket (obj: any): obj is LeafBucket {\n  return Array.isArray(obj?.peers)\n}\n\nexport interface GetClosestPeersOptions extends AbortOptions {\n  count?: number\n  exclude?: PeerId[]\n}\n\n/**\n * Implementation of a Kademlia DHT routing table as a prefix binary trie with\n * configurable prefix length, bucket split threshold and size.\n */\nexport class KBucket {\n  private readonly peerId: PeerId\n  public root: Bucket\n  public localPeer?: Peer\n  private readonly prefixLength: number\n  private readonly splitThreshold: number\n  private readonly kBucketSize: number\n  private readonly numberOfNodesToPing: number\n  private readonly lastPingThreshold: number\n  public ping: PingFunction\n  public verify: VerifyFunction\n  private readonly onAdd?: OnAddCallback\n  private readonly onRemove?: OnRemoveCallback\n  private readonly onMove?: OnMoveCallback\n  private readonly addingPeerMap: PeerMap<Promise<void>>\n\n  constructor (components: KBucketComponents, options: KBucketOptions) {\n    this.peerId = components.peerId\n    this.prefixLength = options.prefixLength ?? PREFIX_LENGTH\n    this.kBucketSize = options.kBucketSize ?? KBUCKET_SIZE\n    this.splitThreshold = options.splitThreshold ?? this.kBucketSize\n    this.numberOfNodesToPing = options.numberOfOldContactsToPing ?? PING_OLD_CONTACT_COUNT\n    this.lastPingThreshold = options.lastPingThreshold ?? LAST_PING_THRESHOLD\n    this.ping = options.ping\n    this.verify = options.verify\n    this.onAdd = options.onAdd\n    this.onRemove = options.onRemove\n    this.addingPeerMap = trackedPeerMap({\n      name: `${options.metricsPrefix}_adding_peer_map`,\n      metrics: components.metrics\n    })\n\n    this.root = {\n      prefix: '',\n      depth: 0,\n      peers: []\n    }\n  }\n\n  async start (): Promise<void> {\n    await this.addSelfPeer(this.peerId)\n  }\n\n  stop (): void {\n    this.addingPeerMap.clear()\n\n    this.root = {\n      prefix: '',\n      depth: 0,\n      peers: []\n    }\n  }\n\n  async addSelfPeer (peerId: PeerId, options?: AbortOptions): Promise<void> {\n    this.localPeer = {\n      peerId,\n      kadId: await convertPeerId(peerId, options),\n      lastPing: Date.now()\n    }\n  }\n\n  /**\n   * Adds a contact to the trie\n   */\n  async add (peerId: PeerId, options?: AbortOptions): Promise<void> {\n    const peer = {\n      peerId,\n      kadId: await convertPeerId(peerId, options),\n      lastPing: 0\n    }\n\n    const existingPromise = this.addingPeerMap.get(peerId)\n\n    if (existingPromise != null) {\n      return existingPromise\n    }\n\n    try {\n      const p = this._add(peer, options)\n      this.addingPeerMap.set(peerId, p)\n      await p\n    } finally {\n      this.addingPeerMap.delete(peerId)\n    }\n  }\n\n  private async _add (peer: Peer, options?: AbortOptions): Promise<void> {\n    const bucket = this._determineBucket(peer.kadId)\n\n    // check if the contact already exists\n    if (this._indexOf(bucket, peer.kadId) > -1) {\n      return\n    }\n\n    // are there too many peers in the bucket and can we make the trie deeper?\n    if (bucket.peers.length === this.splitThreshold && bucket.depth < this.prefixLength) {\n      // split the bucket\n      await this._split(bucket, options)\n\n      // try again\n      await this._add(peer, options)\n\n      return\n    }\n\n    // is there space in the bucket?\n    if (bucket.peers.length < this.kBucketSize) {\n      // we've ping this peer previously, just add them to the bucket\n      if (!needsPing(peer, this.lastPingThreshold)) {\n        bucket.peers.push(peer)\n        await this.onAdd?.(peer, bucket, options)\n        return\n      }\n\n      const result = await this.verify(peer, options)\n\n      // only add if peer is online and functioning correctly\n      if (result) {\n        peer.lastPing = Date.now()\n\n        // try again - buckets may have changed during ping\n        await this._add(peer, options)\n      }\n\n      return\n    }\n\n    // we are at the bottom of the trie and the bucket is full so we can't add\n    // any more peers.\n    //\n    // instead ping the first `this.numberOfNodesToPing` in order to determine\n    // if they are still online.\n    //\n    // only add the new peer if one of the pinged nodes does not respond, this\n    // prevents DoS flooding with new invalid contacts.\n    const toPing = bucket.peers\n      .filter(peer => {\n        if (peer.peerId.equals(this.localPeer?.peerId)) {\n          return false\n        }\n\n        if (peer.lastPing > (Date.now() - this.lastPingThreshold)) {\n          return false\n        }\n\n        return true\n      })\n      .sort((a, b) => {\n        // sort oldest ping -> newest\n        if (a.lastPing < b.lastPing) {\n          return -1\n        }\n\n        if (a.lastPing > b.lastPing) {\n          return 1\n        }\n\n        return 0\n      })\n      .slice(0, this.numberOfNodesToPing)\n\n    let evicted = false\n\n    for await (const toEvict of this.ping(toPing, options)) {\n      evicted = true\n      await this.remove(toEvict.kadId, options)\n    }\n\n    // did not evict any peers, cannot add new contact\n    if (!evicted) {\n      return\n    }\n\n    // try again - buckets may have changed during ping\n    await this._add(peer, options)\n  }\n\n  /**\n   * Get 0-n closest contacts to the provided node id. \"Closest\" here means:\n   * closest according to the XOR metric of the contact node id.\n   *\n   * @param {Uint8Array} id - Contact node id\n   * @returns {Generator<Peer, void, undefined>} Array Maximum of n closest contacts to the node id\n   */\n  * closest (id: Uint8Array, options?: GetClosestPeersOptions): Generator<PeerId, void, undefined> {\n    const list = new PeerDistanceList(id, options?.count ?? this.kBucketSize)\n\n    for (const peer of this.toIterable()) {\n      if (options?.exclude?.some(p => p.equals(peer.peerId)) === true) {\n        continue\n      }\n\n      list.addWithKadId({ id: peer.peerId, multiaddrs: [] }, peer.kadId)\n    }\n\n    yield * map(list.peers, ({ peer }) => peer.id)\n  }\n\n  /**\n   * Counts the total number of contacts in the tree.\n   *\n   * @returns {number} The number of contacts held in the tree\n   */\n  count (): number {\n    function countBucket (bucket: Bucket): number {\n      if (isLeafBucket(bucket)) {\n        return bucket.peers.length\n      }\n\n      let count = 0\n\n      if (bucket.left != null) {\n        count += countBucket(bucket.left)\n      }\n\n      if (bucket.right != null) {\n        count += countBucket(bucket.right)\n      }\n\n      return count\n    }\n\n    return countBucket(this.root)\n  }\n\n  /**\n   * Get a contact by its exact ID.\n   * If this is a leaf, loop through the bucket contents and return the correct\n   * contact if we have it or null if not. If this is an inner node, determine\n   * which branch of the tree to traverse and repeat.\n   *\n   * @param {Uint8Array} kadId - The ID of the contact to fetch.\n   * @returns {Peer | undefined} The contact if available, otherwise null\n   */\n  get (kadId: Uint8Array): Peer | undefined {\n    const bucket = this._determineBucket(kadId)\n    const index = this._indexOf(bucket, kadId)\n\n    return bucket.peers[index]\n  }\n\n  /**\n   * Removes contact with the provided id.\n   *\n   * @param {Uint8Array} kadId - The ID of the contact to remove\n   */\n  async remove (kadId: Uint8Array, options?: AbortOptions): Promise<void> {\n    const bucket = this._determineBucket(kadId)\n    const index = this._indexOf(bucket, kadId)\n\n    if (index > -1) {\n      const peer = bucket.peers.splice(index, 1)[0]\n\n      await this.onRemove?.(peer, bucket, options)\n    }\n  }\n\n  /**\n   * Similar to `toArray()` but instead of buffering everything up into an\n   * array before returning it, yields contacts as they are encountered while\n   * walking the tree.\n   *\n   * @returns {Iterable} All of the contacts in the tree, as an iterable\n   */\n  * toIterable (): Generator<Peer, void, undefined> {\n    function * iterate (bucket: Bucket): Generator<Peer, void, undefined> {\n      if (isLeafBucket(bucket)) {\n        yield * bucket.peers\n        return\n      }\n\n      yield * iterate(bucket.left)\n      yield * iterate(bucket.right)\n    }\n\n    yield * iterate(this.root)\n  }\n\n  /**\n   * Default distance function. Finds the XOR distance between firstId and\n   * secondId.\n   *\n   * @param  {Uint8Array} firstId - Uint8Array containing first id.\n   * @param  {Uint8Array} secondId - Uint8Array containing second id.\n   * @returns {number} Integer The XOR distance between firstId and secondId.\n   */\n  distance (firstId: Uint8Array, secondId: Uint8Array): bigint {\n    return BigInt('0x' + uint8ArrayToString(uint8ArrayXor(firstId, secondId), 'base16'))\n  }\n\n  /**\n   * Determines whether the id at the bitIndex is 0 or 1\n   * Return left leaf if `id` at `bitIndex` is 0, right leaf otherwise\n   *\n   * @param {Uint8Array} kadId - Id to compare localNodeId with\n   * @returns {LeafBucket} left leaf if id at bitIndex is 0, right leaf otherwise.\n   */\n  private _determineBucket (kadId: Uint8Array): LeafBucket {\n    const bitString = uint8ArrayToString(kadId, 'base2')\n\n    function findBucket (bucket: Bucket, bitIndex: number = 0): LeafBucket {\n      if (isLeafBucket(bucket)) {\n        return bucket\n      }\n\n      const bit = bitString[bitIndex]\n\n      if (bit === '0') {\n        return findBucket(bucket.left, bitIndex + 1)\n      }\n\n      return findBucket(bucket.right, bitIndex + 1)\n    }\n\n    return findBucket(this.root)\n  }\n\n  /**\n   * Returns the index of the contact with provided\n   * id if it exists, returns -1 otherwise.\n   *\n   * @param {object} bucket - internal object that has 2 leafs: left and right\n   * @param {Uint8Array} kadId - KadId of peer\n   * @returns {number} Integer Index of contact with provided id if it exists, -1 otherwise.\n   */\n  private _indexOf (bucket: LeafBucket, kadId: Uint8Array): number {\n    return bucket.peers.findIndex(peer => uint8ArrayEquals(peer.kadId, kadId))\n  }\n\n  /**\n   * Modify the bucket, turn it from a leaf bucket to an internal bucket\n   *\n   * @param {any} bucket - bucket for splitting\n   */\n  private async _split (bucket: LeafBucket, options?: AbortOptions): Promise<void> {\n    // create child buckets\n    const left: LeafBucket = {\n      prefix: '0',\n      depth: bucket.depth + 1,\n      peers: []\n    }\n    const right: LeafBucket = {\n      prefix: '1',\n      depth: bucket.depth + 1,\n      peers: []\n    }\n\n    // redistribute peers\n    for (const peer of bucket.peers) {\n      const bitString = uint8ArrayToString(peer.kadId, 'base2')\n\n      if (bitString[bucket.depth] === '0') {\n        left.peers.push(peer)\n        await this.onMove?.(peer, bucket, left, options)\n      } else {\n        right.peers.push(peer)\n        await this.onMove?.(peer, bucket, right, options)\n      }\n    }\n\n    // convert old leaf bucket to internal bucket\n    convertToInternalBucket(bucket, left, right)\n  }\n}\n\nfunction convertToInternalBucket (bucket: any, left: any, right: any): bucket is InternalBucket {\n  delete bucket.peers\n  bucket.left = left\n  bucket.right = right\n\n  if (bucket.prefix === '') {\n    delete bucket.depth\n    delete bucket.prefix\n  }\n\n  return true\n}\n\nfunction needsPing (peer: Peer, threshold: number): boolean {\n  return peer.lastPing < (Date.now() - threshold)\n}\n", "import { start, stop } from '@libp2p/interface'\nimport { AdaptiveTimeout } from '@libp2p/utils/adaptive-timeout'\nimport { PeerQueue } from '@libp2p/utils/peer-queue'\nimport { anySignal } from 'any-signal'\nimport parallel from 'it-parallel'\nimport { TypedEventEmitter, setMaxListeners } from 'main-event'\nimport * as utils from '../utils.js'\nimport { ClosestPeers } from './closest-peers.js'\nimport { KBucket, isLeafBucket } from './k-bucket.js'\nimport type { Bucket, GetClosestPeersOptions, LeafBucket, Peer } from './k-bucket.js'\nimport type { Network } from '../network.js'\nimport type { AbortOptions, ComponentLogger, CounterGroup, Logger, Metric, Metrics, PeerId, PeerStore, Startable, Stream } from '@libp2p/interface'\nimport type { Ping } from '@libp2p/ping'\nimport type { AdaptiveTimeoutInit } from '@libp2p/utils/adaptive-timeout'\n\nexport const KBUCKET_SIZE = 20\nexport const PREFIX_LENGTH = 6\nexport const PING_NEW_CONTACT_TIMEOUT = 2000\nexport const PING_NEW_CONTACT_CONCURRENCY = 20\nexport const PING_NEW_CONTACT_MAX_QUEUE_SIZE = 100\nexport const PING_OLD_CONTACT_COUNT = 3\nexport const PING_OLD_CONTACT_TIMEOUT = 2000\nexport const PING_OLD_CONTACT_CONCURRENCY = 20\nexport const PING_OLD_CONTACT_MAX_QUEUE_SIZE = 100\nexport const KAD_PEER_TAG_NAME = 'kad-peer'\nexport const KAD_PEER_TAG_VALUE = 1\nexport const LAST_PING_THRESHOLD = 600000\nexport const POPULATE_FROM_DATASTORE_ON_START = true\nexport const POPULATE_FROM_DATASTORE_LIMIT = 1000\n\nexport interface RoutingTableInit {\n  logPrefix: string\n  metricsPrefix: string\n  protocol: string\n  prefixLength?: number\n  splitThreshold?: number\n  kBucketSize?: number\n  pingNewContactTimeout?: AdaptiveTimeoutInit\n  pingNewContactConcurrency?: number\n  pingNewContactMaxQueueSize?: number\n  pingOldContactTimeout?: AdaptiveTimeoutInit\n  pingOldContactConcurrency?: number\n  pingOldContactMaxQueueSize?: number\n  numberOfOldContactsToPing?: number\n  peerTagName?: string\n  peerTagValue?: number\n  closeTagName?: string\n  closeTagValue?: number\n  network: Network\n  populateFromDatastoreOnStart?: boolean\n  populateFromDatastoreLimit?: number\n  lastPingThreshold?: number\n  closestPeerSetSize?: number\n  closestPeerSetRefreshInterval?: number\n}\n\nexport interface RoutingTableComponents {\n  peerId: PeerId\n  peerStore: PeerStore\n  metrics?: Metrics\n  logger: ComponentLogger\n  ping: Ping\n}\n\nexport interface RoutingTableEvents {\n  'peer:add': CustomEvent<PeerId>\n  'peer:remove': CustomEvent<PeerId>\n  'peer:ping': CustomEvent<PeerId>\n}\n\n/**\n * A wrapper around `k-bucket`, to provide easy store and retrieval for peers.\n */\nexport class RoutingTable extends TypedEventEmitter<RoutingTableEvents> implements Startable {\n  public kBucketSize: number\n  public kb: KBucket\n  public network: Network\n  private readonly closestPeerTagger: ClosestPeers\n  private readonly log: Logger\n  private readonly components: RoutingTableComponents\n  private running: boolean\n  private readonly pingNewContactTimeout: AdaptiveTimeout\n  private readonly pingNewContactQueue: PeerQueue<boolean>\n  private readonly pingOldContactTimeout: AdaptiveTimeout\n  private readonly pingOldContactQueue: PeerQueue<boolean>\n  private readonly populateFromDatastoreOnStart: boolean\n  private readonly populateFromDatastoreLimit: number\n  private readonly protocol: string\n  private readonly peerTagName: string\n  private readonly peerTagValue: number\n  private readonly metrics?: {\n    routingTableSize: Metric\n    routingTableKadBucketTotal: Metric\n    routingTableKadBucketAverageOccupancy: Metric\n    routingTableKadBucketMaxDepth: Metric\n    routingTableKadBucketMinOccupancy: Metric\n    routingTableKadBucketMaxOccupancy: Metric\n    kadBucketEvents: CounterGroup<'ping_old_contact' | 'ping_old_contact_error' | 'ping_new_contact' | 'ping_new_contact_error' | 'peer_added' | 'peer_removed'>\n  }\n\n  private shutdownController: AbortController\n\n  constructor (components: RoutingTableComponents, init: RoutingTableInit) {\n    super()\n\n    this.components = components\n    this.log = components.logger.forComponent(`${init.logPrefix}:routing-table`)\n    this.kBucketSize = init.kBucketSize ?? KBUCKET_SIZE\n    this.running = false\n    this.protocol = init.protocol\n    this.network = init.network\n    this.peerTagName = init.peerTagName ?? KAD_PEER_TAG_NAME\n    this.peerTagValue = init.peerTagValue ?? KAD_PEER_TAG_VALUE\n    this.pingOldContacts = this.pingOldContacts.bind(this)\n    this.verifyNewContact = this.verifyNewContact.bind(this)\n    this.peerAdded = this.peerAdded.bind(this)\n    this.peerRemoved = this.peerRemoved.bind(this)\n    this.populateFromDatastoreOnStart = init.populateFromDatastoreOnStart ?? POPULATE_FROM_DATASTORE_ON_START\n    this.populateFromDatastoreLimit = init.populateFromDatastoreLimit ?? POPULATE_FROM_DATASTORE_LIMIT\n    this.shutdownController = new AbortController()\n\n    this.pingOldContactQueue = new PeerQueue({\n      concurrency: init.pingOldContactConcurrency ?? PING_OLD_CONTACT_CONCURRENCY,\n      metricName: `${init.metricsPrefix}_ping_old_contact_queue`,\n      metrics: this.components.metrics,\n      maxSize: init.pingOldContactMaxQueueSize ?? PING_OLD_CONTACT_MAX_QUEUE_SIZE\n    })\n    this.pingOldContactTimeout = new AdaptiveTimeout({\n      ...(init.pingOldContactTimeout ?? {}),\n      metrics: this.components.metrics,\n      metricName: `${init.metricsPrefix}_routing_table_ping_old_contact_time_milliseconds`\n    })\n\n    this.pingNewContactQueue = new PeerQueue({\n      concurrency: init.pingNewContactConcurrency ?? PING_NEW_CONTACT_CONCURRENCY,\n      metricName: `${init.metricsPrefix}_ping_new_contact_queue`,\n      metrics: this.components.metrics,\n      maxSize: init.pingNewContactMaxQueueSize ?? PING_NEW_CONTACT_MAX_QUEUE_SIZE\n    })\n    this.pingNewContactTimeout = new AdaptiveTimeout({\n      ...(init.pingNewContactTimeout ?? {}),\n      metrics: this.components.metrics,\n      metricName: `${init.metricsPrefix}_routing_table_ping_new_contact_time_milliseconds`\n    })\n\n    this.kb = new KBucket(components, {\n      kBucketSize: init.kBucketSize,\n      prefixLength: init.prefixLength,\n      splitThreshold: init.splitThreshold,\n      numberOfOldContactsToPing: init.numberOfOldContactsToPing,\n      lastPingThreshold: init.lastPingThreshold,\n      ping: this.pingOldContacts,\n      verify: this.verifyNewContact,\n      onAdd: this.peerAdded,\n      onRemove: this.peerRemoved,\n      metricsPrefix: init.metricsPrefix\n    })\n\n    this.closestPeerTagger = new ClosestPeers(this.components, {\n      logPrefix: init.logPrefix,\n      routingTable: this,\n      peerSetSize: init.closestPeerSetSize,\n      refreshInterval: init.closestPeerSetRefreshInterval,\n      closeTagName: init.closeTagName,\n      closeTagValue: init.closeTagValue\n    })\n\n    if (this.components.metrics != null) {\n      this.metrics = {\n        routingTableSize: this.components.metrics.registerMetric(`${init.metricsPrefix}_routing_table_size`),\n        routingTableKadBucketTotal: this.components.metrics.registerMetric(`${init.metricsPrefix}_routing_table_kad_bucket_total`),\n        routingTableKadBucketAverageOccupancy: this.components.metrics.registerMetric(`${init.metricsPrefix}_routing_table_kad_bucket_average_occupancy`),\n        routingTableKadBucketMinOccupancy: this.components.metrics.registerMetric(`${init.metricsPrefix}_routing_table_kad_bucket_min_occupancy`),\n        routingTableKadBucketMaxOccupancy: this.components.metrics.registerMetric(`${init.metricsPrefix}_routing_table_kad_bucket_max_occupancy`),\n        routingTableKadBucketMaxDepth: this.components.metrics.registerMetric(`${init.metricsPrefix}_routing_table_kad_bucket_max_depth`),\n        kadBucketEvents: this.components.metrics.registerCounterGroup(`${init.metricsPrefix}_kad_bucket_events_total`)\n      }\n    }\n  }\n\n  isStarted (): boolean {\n    return this.running\n  }\n\n  async start (): Promise<void> {\n    if (this.running) {\n      return\n    }\n\n    this.running = true\n\n    this.shutdownController = new AbortController()\n    await start(this.closestPeerTagger, this.kb)\n  }\n\n  async afterStart (): Promise<void> {\n    let peerStorePeers = 0\n\n    // do this async to not block startup but iterate serially to not overwhelm\n    // the ping queue\n    Promise.resolve().then(async () => {\n      if (!this.populateFromDatastoreOnStart) {\n        return\n      }\n\n      const signal = anySignal([\n        this.shutdownController.signal,\n        AbortSignal.timeout(20_000)\n      ])\n      setMaxListeners(Infinity, signal)\n\n      try {\n        // add existing peers from the peer store to routing table\n        for (const peer of await this.components.peerStore.all({\n          filters: [(peer) => {\n            return peer.protocols.includes(this.protocol) && peer.tags.has(KAD_PEER_TAG_NAME)\n          }],\n          limit: this.populateFromDatastoreLimit,\n          signal\n        })) {\n          if (!this.running) {\n            // bail if we've been shut down\n            return\n          }\n\n          try {\n            await this.add(peer.id, {\n              signal\n            })\n            peerStorePeers++\n          } catch (err) {\n            this.log('failed to add peer %p to routing table, removing kad-dht peer tags - %e')\n            await this.components.peerStore.merge(peer.id, {\n              tags: {\n                [this.peerTagName]: undefined\n              }\n            })\n          }\n        }\n      } finally {\n        signal.clear()\n      }\n\n      this.log('added %d peer store peers to the routing table', peerStorePeers)\n    })\n      .catch(err => {\n        this.log.error('error adding %d, peer store peers to the routing table - %e', peerStorePeers, err)\n      })\n  }\n\n  async stop (): Promise<void> {\n    this.running = false\n    await stop(this.closestPeerTagger, this.kb)\n    this.pingOldContactQueue.abort()\n    this.pingNewContactQueue.abort()\n    this.shutdownController.abort()\n  }\n\n  private async peerAdded (peer: Peer, bucket: LeafBucket, options?: AbortOptions): Promise<void> {\n    if (!this.components.peerId.equals(peer.peerId)) {\n      await this.components.peerStore.merge(peer.peerId, {\n        tags: {\n          [this.peerTagName]: {\n            value: this.peerTagValue\n          }\n        }\n      }, options)\n    }\n\n    this.updateMetrics()\n    this.metrics?.kadBucketEvents.increment({ peer_added: true })\n    this.safeDispatchEvent('peer:add', { detail: peer.peerId })\n  }\n\n  private async peerRemoved (peer: Peer, bucket: LeafBucket, options?: AbortOptions): Promise<void> {\n    if (!this.components.peerId.equals(peer.peerId)) {\n      await this.components.peerStore.merge(peer.peerId, {\n        tags: {\n          [this.peerTagName]: undefined\n        }\n      }, options)\n    }\n\n    this.updateMetrics()\n    this.metrics?.kadBucketEvents.increment({ peer_removed: true })\n    this.safeDispatchEvent('peer:remove', { detail: peer.peerId })\n  }\n\n  /**\n   * Called on the `ping` event from `k-bucket` when a bucket is full\n   * and cannot split.\n   *\n   * `oldContacts.length` is defined by the `numberOfNodesToPing` param\n   * passed to the `k-bucket` constructor.\n   *\n   * `oldContacts` will not be empty and is the list of contacts that\n   * have not been contacted for the longest.\n   */\n  async * pingOldContacts (oldContacts: Peer[], options?: AbortOptions): AsyncGenerator<Peer> {\n    if (!this.running) {\n      return\n    }\n\n    const jobs: Array<() => Promise<Peer | undefined>> = []\n\n    for (const oldContact of oldContacts) {\n      if (this.kb.get(oldContact.kadId) == null) {\n        this.log('asked to ping contact %p that was not in routing table', oldContact.peerId)\n        continue\n      }\n\n      this.metrics?.kadBucketEvents.increment({ ping_old_contact: true })\n\n      jobs.push(async () => {\n        // if a previous ping wants us to ping this contact, re-use the result\n        const existingJob = this.pingOldContactQueue.find(oldContact.peerId)\n\n        if (existingJob != null) {\n          this.log('asked to ping contact %p was already being pinged', oldContact.peerId)\n          const result = await existingJob.join(options)\n\n          if (!result) {\n            return oldContact\n          }\n\n          return\n        }\n\n        const result = await this.pingOldContactQueue.add(async (options) => {\n          const signal = this.pingOldContactTimeout.getTimeoutSignal()\n          const signals = anySignal([\n            signal,\n            this.shutdownController.signal,\n            options?.signal\n          ])\n          setMaxListeners(Infinity, signal, signals)\n\n          try {\n            return await this.pingContact(oldContact, options)\n          } catch {\n            this.metrics?.kadBucketEvents.increment({ ping_old_contact_error: true })\n            return true\n          } finally {\n            this.pingOldContactTimeout.cleanUp(signal)\n            signals.clear()\n          }\n        }, {\n          peerId: oldContact.peerId,\n          signal: options?.signal\n        })\n\n        if (!result) {\n          return oldContact\n        }\n      })\n    }\n\n    for await (const peer of parallel(jobs)) {\n      if (peer != null) {\n        yield peer\n      }\n    }\n  }\n\n  async verifyNewContact (contact: Peer, options?: AbortOptions): Promise<boolean> {\n    const signal = this.pingNewContactTimeout.getTimeoutSignal()\n    const signals = anySignal([\n      signal,\n      this.shutdownController.signal,\n      options?.signal\n    ])\n    setMaxListeners(Infinity, signal, signals)\n\n    try {\n      const job = this.pingNewContactQueue.find(contact.peerId)\n\n      if (job != null) {\n        this.log('joining existing ping to add new peer %p to routing table', contact.peerId)\n        return await job.join({\n          signal: signals\n        })\n      } else {\n        return await this.pingNewContactQueue.add(async (options) => {\n          this.metrics?.kadBucketEvents.increment({ ping_new_contact: true })\n\n          this.log('pinging new peer %p before adding to routing table', contact.peerId)\n          return this.pingContact(contact, options)\n        }, {\n          peerId: contact.peerId,\n          signal: signals\n        })\n      }\n    } catch (err) {\n      this.log.trace('tried to add peer %p but they were not online', contact.peerId)\n      this.metrics?.kadBucketEvents.increment({ ping_new_contact_error: true })\n\n      return false\n    } finally {\n      this.pingNewContactTimeout.cleanUp(signal)\n      signals.clear()\n    }\n  }\n\n  async pingContact (contact: Peer, options?: AbortOptions): Promise<boolean> {\n    let stream: Stream | undefined\n\n    try {\n      this.log('pinging contact %p', contact.peerId)\n      await this.components.ping.ping(contact.peerId, options)\n      this.log('contact %p ping ok', contact.peerId)\n\n      this.safeDispatchEvent('peer:ping', {\n        detail: contact.peerId\n      })\n\n      return true\n    } catch (err: any) {\n      this.log('error pinging old contact %p - %e', contact.peerId, err)\n      stream?.abort(err)\n      return false\n    }\n  }\n\n  /**\n   * Amount of currently stored peers\n   */\n  get size (): number {\n    if (this.kb == null) {\n      return 0\n    }\n\n    return this.kb.count()\n  }\n\n  /**\n   * Find a specific peer by id\n   */\n  async find (peer: PeerId, options?: AbortOptions): Promise<PeerId | undefined> {\n    const kadId = await utils.convertPeerId(peer, options)\n    return this.kb.get(kadId)?.peerId\n  }\n\n  /**\n   * Retrieve the closest peers to the given kadId\n   */\n  closestPeer (kadId: Uint8Array): PeerId | undefined {\n    const res = this.closestPeers(kadId, {\n      count: 1\n    })\n\n    if (res.length > 0) {\n      return res[0]\n    }\n\n    return undefined\n  }\n\n  /**\n   * Retrieve the `count`-closest peers to the given kadId\n   */\n  closestPeers (kadId: Uint8Array, options?: GetClosestPeersOptions): PeerId[] {\n    if (this.kb == null) {\n      return []\n    }\n\n    return [...this.kb.closest(kadId, options)]\n  }\n\n  /**\n   * Add or update the routing table with the given peer\n   */\n  async add (peerId: PeerId, options?: AbortOptions): Promise<void> {\n    if (this.kb == null) {\n      throw new Error('RoutingTable is not started')\n    }\n\n    await this.kb.add(peerId, options)\n  }\n\n  /**\n   * Remove a given peer from the table\n   */\n  async remove (peer: PeerId, options?: AbortOptions): Promise<void> {\n    if (this.kb == null) {\n      throw new Error('RoutingTable is not started')\n    }\n\n    const kadId = await utils.convertPeerId(peer, options)\n\n    await this.kb.remove(kadId, options)\n  }\n\n  private updateMetrics (): void {\n    if (this.metrics == null || this.kb == null) {\n      return\n    }\n\n    let size = 0\n    let buckets = 0\n    let maxDepth = 0\n    let minOccupancy = 20\n    let maxOccupancy = 0\n\n    function count (bucket: Bucket): void {\n      if (isLeafBucket(bucket)) {\n        if (bucket.depth > maxDepth) {\n          maxDepth = bucket.depth\n        }\n\n        buckets++\n        size += bucket.peers.length\n\n        if (bucket.peers.length < minOccupancy) {\n          minOccupancy = bucket.peers.length\n        }\n\n        if (bucket.peers.length > maxOccupancy) {\n          maxOccupancy = bucket.peers.length\n        }\n\n        return\n      }\n\n      count(bucket.left)\n      count(bucket.right)\n    }\n\n    count(this.kb.root)\n\n    this.metrics.routingTableSize.update(size)\n    this.metrics.routingTableKadBucketTotal.update(buckets)\n    this.metrics.routingTableKadBucketAverageOccupancy.update(Math.round(size / buckets))\n    this.metrics.routingTableKadBucketMinOccupancy.update(minOccupancy)\n    this.metrics.routingTableKadBucketMaxOccupancy.update(maxOccupancy)\n    this.metrics.routingTableKadBucketMaxDepth.update(maxDepth)\n  }\n}\n", "export default [\n  77591, 22417, 43971, 28421, 740, 29829, 71467, 228973, 196661, 78537, 27689, 36431, 44415, 14362, 19456, 106025,\n  96308, 2882, 49509, 21149, 87173, 131409, 75844, 23676, 121838, 30291, 17492, 2953, 7564, 110620, 129477, 127283,\n  53113, 72417, 165166, 109690, 21200, 102125, 24049, 71504, 90342, 25307, 72039, 26812, 26715, 32264, 133800, 71161,\n  88956, 171987, 51779, 24425, 16671, 30251, 186294, 247761, 14202, 2121, 8465, 35024, 4876, 85917, 169730, 3638,\n  256836, 96184, 943, 18678, 6583, 52907, 35807, 112254, 214097, 18796, 11595, 9243, 23554, 887, 268203, 382004,\n  24590, 111335, 11625, 16619, 29039, 102425, 69006, 97976, 92362, 32552, 63717, 41433, 128974, 137630, 59943, 10019,\n  13986, 35430, 33665, 108037, 43799, 43280, 38195, 29078, 58629, 18265, 14425, 46832, 235538, 40830, 77881, 110717,\n  58937, 3463, 325358, 51300, 47623, 117252, 19007, 10170, 20540, 91237, 294813, 4951, 79841, 56232, 36270, 128547,\n  69209, 66275, 100156, 32063, 73531, 34439, 80937, 28892, 44466, 88595, 216307, 32583, 49620, 16605, 82127, 45807,\n  21630, 78726, 20235, 40163, 111007, 96926, 5567, 72083, 21665, 58844, 39419, 179767, 48328, 42662, 51550, 5251,\n  37811, 49608, 81056, 50854, 55513, 20922, 18891, 197409, 164656, 32593, 71449, 220474, 58919, 85682, 67854, 13758,\n  35066, 3565, 61905, 214793, 119572, 141419, 21504, 10302, 27354, 67003, 46131, 32668, 15165, 64871, 34450, 17821,\n  2757, 11452, 34189, 5160, 12257, 85523, 560, 53385, 65887, 119549, 135620, 312353, 115979, 122356, 10867, 193231,\n  124537, 54783, 90675, 120791, 4715, 142253, 50943, 17271, 43358, 25331, 4917, 120566, 34580, 12878, 33786, 160528,\n  32523, 4869, 301307, 104817, 81491, 23276, 8832, 97911, 31265, 52065, 7998, 49622, 9715, 43998, 34091, 84587,\n  20664, 69041, 29419, 53205, 10838, 58288, 116145, 6185, 5154, 141795, 35924, 21307, 144738, 43730, 12085, 8279,\n  10002, 119, 133779, 199668, 72938, 31768, 39176, 67875, 38453, 9700, 44144, 4121, 116048, 41733, 12868, 82669,\n  92308, 128, 34262, 11332, 7712, 90764, 36141, 13553, 71312, 77470, 117314, 96549, 49135, 23602, 54468, 28605,\n  6327, 62308, 17171, 67531, 21319, 14105, 894, 107722, 46157, 8503, 51069, 100472, 45138, 15246, 14577, 35609,\n  191464, 1757, 13364, 161349, 32067, 91705, 81144, 52339, 5408, 91066, 21983, 14157, 100545, 4372, 26630, 129112,\n  1423, 29676, 213626, 4397, 88436, 99190, 6877, 49958, 26122, 114348, 60661, 29818, 293118, 50042, 179738, 16400,\n  163423, 89627, 31040, 43973, 36638, 45952, 5153, 1894, 109322, 1898, 134021, 12402, 112077, 68309, 190269, 69866,\n  31938, 107383, 11522, 105232, 11248, 14868, 39852, 71707, 186525, 16530, 38162, 106212, 11700, 5130, 16608, 26998,\n  59586, 108399, 230033, 43683, 48135, 82179, 2073, 5015, 196684, 189293, 16378, 23452, 8301, 35640, 11632, 214551,\n  29240, 57644, 33137, 91949, 55157, 52384, 117313, 5090, 17717, 89668, 49363, 82238, 241035, 66216, 29066, 184088,\n  97206, 62820, 26595, 4241, 135635, 173672, 8202, 459, 71355, 146294, 29587, 3008, 135385, 141203, 14803, 6634,\n  45094, 69362, 50925, 546, 51884, 62011, 83296, 234584, 44515, 56050, 89476, 87751, 19373, 12691, 149923, 19794,\n  13833, 35846, 87557, 58339, 2884, 19145, 25647, 12224, 11024, 77338, 64608, 122297, 53025, 7205, 36189, 36294,\n  170779, 21750, 7739, 173883, 75192, 35664, 224240, 113121, 30181, 26267, 27036, 117827, 92015, 106516, 55628, 203549,\n  67949, 60462, 60844, 35911, 20457, 1820, 920, 19773, 8738, 73173, 181993, 38521, 98254, 76257, 46008, 92796,\n  5384, 26868, 151566, 22124, 2411, 15919, 186872, 180021, 28099, 152961, 78811, 80237, 62352, 102653, 74259, 184890,\n  16792, 123702, 224945, 29940, 19512, 75283, 14059, 112691, 92811, 233329, 20411, 138569, 53341, 109802, 50600, 134528,\n  66747, 5529, 166531, 31578, 64732, 67189, 1596, 126357, 967, 167999, 206598, 109752, 119431, 207825, 78791, 91938,\n  10301, 27311, 24233, 252343, 28831, 32812, 66002, 112267, 90895, 8786, 8095, 16824, 22866, 21813, 60507, 174833,\n  19549, 130985, 117051, 52110, 6938, 81923, 123864, 38061, 919, 18680, 53534, 46739, 112893, 161529, 85429, 26761,\n  11900, 81121, 91968, 15390, 217947, 56524, 1713, 6654, 37089, 85630, 138866, 61850, 16491, 75577, 16884, 98296,\n  73523, 6140, 44645, 6062, 36366, 29844, 57946, 37932, 42472, 5266, 20834, 19309, 33753, 127182, 134259, 35810,\n  41805, 45878, 312001, 14881, 47757, 49251, 120050, 44252, 3708, 25856, 107864, 120347, 1228, 36550, 41682, 34496,\n  47025, 8393, 173365, 246526, 12894, 161607, 35670, 90785, 126572, 2095, 124731, 157033, 58694, 554, 12786, 9642,\n  4817, 16136, 47864, 174698, 66992, 4639, 69284, 10625, 40710, 27763, 51738, 30404, 264105, 137904, 109882, 52487,\n  42824, 57514, 2740, 10479, 146799, 107390, 16586, 88038, 174951, 9410, 16185, 44158, 5568, 40658, 46108, 12763,\n  97385, 26175, 108859, 664, 230732, 67470, 46663, 14395, 50750, 141320, 93140, 15361, 47997, 55784, 6791, 307840,\n  118569, 107326, 18056, 58281, 260415, 54691, 8790, 73332, 45633, 7511, 45674, 143373, 14031, 11799, 94491, 35646,\n  96544, 14560, 26049, 32983, 25791, 83814, 42094, 231370, 63955, 139212, 2359, 169908, 3108, 183486, 105867, 28197,\n  32941, 124968, 26402, 88267, 149768, 23053, 3078, 19091, 52924, 25383, 19209, 111548, 97361, 3959, 24880, 235061,\n  9099, 24921, 161254, 151405, 20508, 7159, 34381, 20133, 11434, 74036, 19974, 34769, 36585, 1076, 22454, 17354,\n  38727, 235160, 111547, 96454, 117448, 156940, 91330, 37299, 7310, 26915, 117060, 51369, 22620, 61861, 322264, 106850,\n  111694, 15091, 2624, 40345, 300446, 177064, 1707, 27389, 54792, 327783, 132669, 183543, 59003, 17744, 20603, 151134,\n  106923, 53084, 71803, 279424, 319816, 11579, 21946, 16728, 38274, 72711, 5085, 83391, 88646, 40159, 25027, 34680,\n  10752, 12988, 54126, 30365, 18338, 100445, 230674, 44874, 84974, 143877, 123253, 139372, 28082, 91477, 144002, 13096,\n  219729, 46016, 50029, 42377, 14601, 6660, 58244, 58978, 23918, 88206, 113611, 64452, 17541, 41032, 10942, 12021,\n  49189, 10978, 40175, 37156, 10947, 71709, 106894, 112538, 57007, 137486, 150608, 152719, 40615, 7746, 279716, 13101,\n  19524, 28708, 40578, 72320, 1096, 182051, 94527, 51275, 22833, 45164, 81917, 77519, 48508, 5421, 140302, 37845,\n  149830, 5587, 27579, 5357, 428725, 248187, 6326, 206760, 39814, 32585, 89923, 44341, 288753, 284443, 96368, 31201,\n  94189, 119504, 20359, 52073, 103216, 179, 27934, 32801, 96035, 34111, 34309, 101326, 18198, 20704, 210266, 37643,\n  27880, 141873, 106000, 19414, 56614, 167714, 66483, 107885, 86602, 4379, 20796, 75467, 4987, 5017, 118857, 26003,\n  34308, 114428, 29198, 6686, 29697, 73632, 3739, 69795, 16798, 41504, 7207, 30722, 21436, 36735, 28067, 28545,\n  3239, 11221, 36031, 41889, 100010, 19247, 317673, 29495, 174554, 6424, 129725, 53845, 94986, 7955, 59676, 2604,\n  191497, 19735, 102214, 62954, 23844, 11872, 179525, 261436, 34492, 428, 78404, 142035, 16747, 17246, 27578, 37021,\n  33672, 57944, 26056, 135760, 2369, 61674, 122066, 31327, 19374, 157065, 40553, 130982, 69619, 71290, 38855, 72100,\n  92903, 95940, 51422, 165999, 65713, 57873, 50726, 7288, 20272, 2081, 42326, 22624, 81120, 57914, 79352, 19447,\n  1684, 72302, 11774, 302559, 161481, 96396, 13692, 414988, 3721, 79066, 56627, 46883, 21150, 11747, 12184, 5856,\n  113458, 176117, 84416, 52079, 27933, 3354, 59765, 141359, 2212, 216309, 2555, 23458, 196722, 142463, 45701, 44548,\n  28798, 19418, 215, 29916, 9396, 10574, 114226, 84475, 13520, 18694, 34056, 4524, 90302, 62930, 13539, 19407,\n  77209, 7728, 38088, 9535, 2263, 23875, 183945, 17750, 26274, 67172, 10585, 28042, 22199, 7478, 51331, 66030,\n  26774, 192929, 31434, 25850, 50197, 52926, 178158, 4679, 181256, 70184, 229600, 9959, 105594, 72158, 73974, 2726,\n  35085, 78087, 23284, 35568, 51713, 155676, 5401, 27254, 11966, 17569, 223253, 71993, 103357, 111477, 55722, 30504,\n  26034, 46774, 35392, 36285, 214814, 41143, 163465, 1051, 16094, 81044, 6636, 76489, 179102, 20712, 39178, 35683,\n  125177, 54219, 30617, 52994, 25324, 50123, 2543, 87529, 58995, 10688, 125199, 12388, 60158, 125481, 131646, 7642,\n  133350, 65874, 3438, 97277, 101450, 10075, 56344, 116821, 50778, 60547, 98016, 106135, 13859, 14255, 16300, 77373,\n  173521, 8285, 45932, 37426, 4054, 114295, 55947, 7703, 39114, 52, 51119, 128135, 19714, 60715, 9554, 50492,\n  88180, 2823, 118271, 52993, 122625, 97919, 23859, 37895, 25040, 33614, 32102, 20431, 3577, 9275, 15686, 43031,\n  157741, 110358, 1884, 40291, 125391, 13736, 5008, 64881, 87336, 77381, 70711, 43032, 49155, 118587, 70494, 4318,\n  10168, 30126, 12580, 10524, 280104, 104001, 145413, 2862, 84140, 6603, 106005, 13566, 12780, 11251, 42830, 571,\n  179910, 82443, 13146, 469, 42714, 32591, 265217, 424024, 92553, 54721, 134100, 6007, 15242, 114681, 59030, 16718,\n  85465, 200214, 85982, 55174, 165013, 23493, 56964, 82529, 109150, 32706, 27568, 82442, 5350, 14976, 13165, 44890,\n  60021, 21343, 33978, 17264, 4655, 22328, 27819, 75730, 16567, 55483, 14510, 17926, 45827, 150609, 3704, 7385,\n  272531, 161543, 76904, 122163, 52405, 2039, 19165, 41623, 14423, 228354, 3369, 176360, 85491, 7122, 35789, 303724,\n  4465, 13628, 2233, 55311, 118771, 20713, 10006, 221519, 45115, 71021, 35650, 29775, 7337, 10864, 20665, 21142,\n  1746, 15080, 1624, 32449, 10905, 105743, 229797, 7701, 3940, 22997, 178467, 57208, 389057, 39683, 59403, 63344,\n  63125, 54847, 69691, 18336, 56448, 3362, 37202, 18282, 29648, 138224, 35867, 10495, 5911, 28814, 26653, 31514,\n  176702, 26550, 45621, 11734, 4525, 40543, 73944, 121080, 27858, 155561, 14887, 44670, 30742, 8796, 107455, 113472,\n  56369, 75581, 183777, 240095, 133699, 153299, 8768, 160464, 26058, 49078, 103971, 21875, 71486, 44888, 17156, 9678,\n  89541, 123019, 102337, 3972, 83930, 21245, 87852, 109660, 287918, 183019, 686, 10100, 39177, 283941, 11274, 24736,\n  26793, 26214, 25995, 77011, 141580, 4070, 23742, 46285, 46632, 30700, 26669, 19056, 35951, 115575, 174034, 56097,\n  35463, 87425, 24575, 44245, 38701, 82317, 85922, 281616, 100333, 147697, 61503, 7730, 84330, 8530, 59917, 61597,\n  17173, 9092, 32658, 90288, 193136, 39023, 20381, 56654, 31132, 7779, 1919, 1375, 117128, 30819, 11169, 40938,\n  23935, 115201, 101155, 151034, 4835, 11231, 74550, 89388, 59951, 91704, 107312, 167882, 115062, 12732, 72738, 88703,\n  464019, 158267, 57995, 60496, 737, 14371, 123867, 4174, 243339, 159946, 7568, 16025, 134556, 110916, 38103, 191,\n  80226, 88794, 29688, 27230, 10454, 76308, 57647, 77409, 113483, 66864, 14745, 19808, 12023, 46583, 84805, 16015,\n  17102, 2231, 20611, 3547, 95740, 250131, 34559, 108894, 8498, 15853, 159169, 148920, 20942, 2813, 93160, 45188,\n  210613, 45531, 52587, 149062, 39782, 28194, 57849, 60965, 84954, 89766, 84453, 100927, 16501, 27658, 165311, 103841,\n  54192, 207341, 19558, 20084, 319622, 5672, 205467, 98462, 61849, 36279, 13609, 147177, 24726, 165015, 209489, 59591,\n  31157, 6551, 117580, 75060, 141146, 277310, 21072, 22023, 106474, 63041, 137443, 122965, 68371, 5383, 42146, 98961,\n  113467, 30863, 23794, 4843, 99630, 30392, 82679, 13699, 241612, 33601, 93146, 24319, 18643, 32155, 95669, 40440,\n  15333, 34089, 67799, 142144, 58245, 38633, 114531, 117400, 77861, 188726, 5507, 2568, 8853, 10987, 107222, 2663,\n  2421, 11530, 13345, 30075, 41785, 118661, 104786, 17459, 12490, 16281, 71936, 193555, 17431, 5944, 71758, 26485,\n  77317, 20803, 367167, 158, 7362, 93430, 11735, 172445, 46002, 11532, 54482, 930, 62911, 2235, 23004, 179236,\n  4764, 101859, 208113, 22477, 55163, 95579, 14098, 67320, 162556, 90709, 156949, 3826, 57492, 4025, 34092, 87442,\n  104565, 6718, 186015, 28214, 14209, 10039, 107186, 233912, 58877, 81637, 55265, 39828, 6194, 145813, 50831, 105849,\n  4974, 88319, 122296, 10272, 197216, 95714, 51540, 72418, 23324, 91555, 8743, 140452, 250249, 51666, 34124, 7229,\n  38592, 129641, 78169, 174242, 22464, 149964, 51450, 14034, 10026, 95376, 26190, 120062, 14401, 8700, 265, 31386,\n  143573, 7203, 229889, 61567, 4227, 140981, 2466, 72052, 10787, 10062, 30958, 6099, 38471, 30103, 23202, 208101,\n  70847, 467, 58934, 32271, 32984, 36637, 24107, 30771, 17109, 73353, 13650, 2098, 157040, 67366, 66904, 106018,\n  265380, 107238, 18535, 44025, 32681, 144983, 62505, 91295, 56120, 3082, 77508, 10322, 63023, 36700, 81885, 224127,\n  16721, 45023, 239261, 111272, 13852, 7866, 149243, 204199, 32309, 22084, 42029, 38316, 126644, 104973, 14406, 43454,\n  67322, 61310, 15789, 40285, 24026, 181047, 6301, 70927, 23319, 115823, 27248, 66693, 115875, 278566, 63007, 146844,\n  56841, 59007, 87368, 180001, 22370, 42114, 80605, 12022, 10374, 308, 25079, 14689, 12618, 63368, 7936, 264973,\n  212291, 136713, 95999, 105801, 18965, 32075, 48700, 52230, 35119, 96912, 32992, 8586, 16606, 101333, 101812, 14969,\n  39930, 759, 193090, 27387, 42914, 12937, 5058, 62646, 64528, 38624, 25743, 37502, 3716, 4435, 30352, 178687,\n  26461, 132611, 42002, 138442, 35833, 59582, 16345, 8048, 60319, 49349, 309, 47800, 49739, 90482, 26405, 34470,\n  63786, 32479, 85028, 39866, 47846, 11649, 23934, 29466, 2816, 42864, 31828, 7410, 74885, 49632, 47629, 111801,\n  90749, 19536, 18767, 105764, 59606, 21223, 10746, 76298, 22220, 39408, 7190, 79654, 64856, 11602, 82156, 272765,\n  17079, 70089, 245473, 51813, 184407, 384678, 1576, 122249, 5064, 27481, 6188, 25790, 74361, 27541, 318284, 45430,\n  31488, 620, 93579, 45723, 192118, 22670, 51913, 4162, 70244, 35966, 26397, 16199, 50899, 209613, 121702, 287507,\n  2993, 36101, 132229, 67345, 33062, 76295, 118628, 78705, 52316, 34375, 107083, 107454, 44863, 127561, 33964, 3073,\n  154010, 190914, 55967, 39074, 6272, 31047, 5550, 41123, 26154, 98638, 47110, 19998, 148091, 50229, 31329, 59900,\n  195442, 19106, 61347, 73497, 70015, 682, 45850, 25776, 38022, 148951, 6288, 37411, 232526, 109277, 27286, 32342,\n  9262, 5220, 16651, 23175, 46740, 129438, 78614, 121925, 66914, 88710, 127952, 5563, 21500, 34521, 10739, 14863,\n  191006, 62956, 17359, 16749, 67027, 56284, 69134, 43301, 35039, 58883, 54466, 60823, 404451, 75743, 59856, 86979,\n  7923, 34273, 83785, 32142, 7693, 268986, 197428, 282681, 17049, 22346, 22990, 92245, 107180, 3357, 37104, 96724,\n  49153, 7683, 31197, 43267, 82231, 164276, 23696, 20848, 188364, 22309, 24821, 158707, 1018, 22514, 70922, 27792,\n  45589, 59709, 10765, 736, 35218, 63479, 51987, 24275, 63588, 55361, 92929, 81964, 4658, 20122, 12330, 44058,\n  13065, 311456, 72224, 8337, 211229, 38979, 22590, 138478, 52757, 32595, 133600, 8838, 31549, 94412, 43391, 90056,\n  1585, 94802, 127271, 6223, 31889, 137038, 132910, 2165, 57616, 230152, 6080, 10748, 36737, 74579, 134062, 50525,\n  180532, 119270, 34556, 76155, 82394, 52595, 29258, 31435, 87820, 67996, 26943, 183878, 38007, 2410, 13526, 180297,\n  69856, 3503, 187396, 167700, 7838, 16701, 9199, 56267, 3661, 37407, 65994, 23767, 5708, 62508, 221700, 67088,\n  86978, 46776, 84434, 32088, 5612, 9149, 88244, 21685, 95151, 46750, 189612, 2979, 506311, 2594, 3628, 40074,\n  105039, 78243, 28523, 6651, 38058, 71999, 30992, 12764, 68261, 108991, 6165, 26450, 61961, 13400, 22426, 7490,\n  60890, 109623, 2070, 12958, 50355, 67979, 257096, 7213, 42578, 52121, 35716, 65461, 7516, 124758, 39268, 302,\n  64712, 14977, 1467, 219452, 2840, 34229, 11121, 21602, 19270, 63574, 8024, 1532, 17331, 79839, 78885, 52029,\n  180767, 57957, 6069, 91265, 61380, 55767, 8927, 32881, 287603, 22149, 35029, 68876, 6428, 199567, 46926, 13412,\n  104132, 21434, 366616, 45060, 110046, 81924, 128910, 45886, 52821, 130416, 29416, 77342, 21762, 67329, 121432, 79924,\n  11724, 38625, 81006, 102033, 28338, 13326, 3250, 82056, 82526, 38212, 21112, 12382, 111495, 3263, 7414, 86274,\n  93490, 40844, 30224, 45212, 24019, 48411, 71367, 24941, 76729, 57776, 3769, 38114, 202019, 197745, 31953, 237533,\n  33270, 201580, 255648, 100798, 44741, 32241, 98468, 106931, 10085, 15090, 170358, 33154, 66787, 18819, 69760, 25061,\n  234005, 82660, 6295, 131975, 16874, 9076, 4094, 25005, 17740, 40908, 19533, 220019, 44330, 99792, 50040, 19619,\n  13950, 55228, 24423, 31253, 95308, 103177, 184795, 28590, 82285, 5059, 3210, 75525, 49894, 70007, 56178, 10580,\n  36051, 139681, 21617, 98736, 3555, 106306, 164189, 37352, 63915, 47824, 24883, 145530, 61904, 28444, 11483, 19837,\n  145446, 30420, 112972, 85939, 11835, 191233, 2262, 20705, 58630, 1753, 148334, 1197, 144714, 6887, 11223, 107667,\n  60879, 77914, 4151, 57417, 81594, 96681, 169430, 1784, 20444, 95138, 254041, 27038, 596, 7117, 72808, 13759,\n  3353, 126776, 21074, 55322, 27081, 36942, 39547, 139830, 179275, 4453, 713, 8722, 71399, 19204, 25785, 22794,\n  23923, 104114, 11291, 25458, 102309, 88396, 75288, 230440, 206396, 104551, 58447, 130857, 37247, 94734, 31548, 176529,\n  226077, 65159, 20104, 10096, 66881, 94191, 237909, 27109, 37404, 1520, 27421, 25220, 113003, 23423, 24884, 50585,\n  6286, 231877, 150800, 11789, 3226, 90004, 60642, 5053, 202400, 61442, 132531, 175329, 57138, 30116, 103847, 9973,\n  75367, 16452, 32360, 59119, 21246, 10191, 164804, 23305, 61051, 37348, 154530, 13214, 5468, 50403, 66754, 130976,\n  50559, 80515, 14436, 155492, 84017, 5472, 43107, 41240, 2890, 90431, 70188, 382, 76234, 48040, 50211, 281038,\n  237007, 32115, 142178, 1536, 22761, 96429, 1811, 31243, 1679, 49143, 55209, 17402, 235054, 61494, 7462, 77030,\n  34925, 87609, 78002, 9499, 9027, 73289, 201078, 101379, 63544, 27666, 5469, 10642, 30029, 49816, 132979, 95620,\n  58086, 351930, 116300, 2110, 2043, 30845, 6154, 11279, 16727, 4122, 2277, 27281, 4971, 3650, 39060, 61970,\n  65951, 39674, 75686, 38151, 11370, 130809, 177895, 32665, 63725, 122267, 7857, 39618, 118483, 44792, 157755, 178624,\n  136994, 24260, 41308, 22471, 12404, 21707, 12486, 30473, 52781, 50246, 20247, 39065, 909, 56825, 103158, 128603,\n  31542, 1089, 41935, 32744, 12428, 37963, 84420, 33134, 72921, 208449, 42622, 168151, 127335, 147107, 46699, 38216,\n  12591, 94342, 85814, 31423, 24944, 2605, 87542, 67473, 192551, 4496, 56321, 91819, 17630, 6300, 256183, 114569,\n  202090, 33209, 35289, 34897, 24967, 40520, 43470, 5344, 10199, 34810, 14283, 10381, 10017, 62923, 49924, 23233,\n  64539, 13051, 35686, 19698, 11570, 135555, 120868, 44924, 87065, 52318, 52335, 47586, 140906, 245885, 109834, 78668,\n  9065, 46990, 25258, 72022, 61243, 40838, 4545, 146387, 10537, 11557, 17470, 36930, 68104, 46711, 24264, 79401,\n  81043, 18225, 120488, 24746, 84338, 81652, 28266, 13776, 21878, 46973, 1047, 230465, 73357, 95777, 24973, 210160,\n  62210, 58404, 110633, 169651, 6937, 41870, 9909, 26822, 191062, 76553, 27519, 96256, 239070, 2478, 205678, 67955,\n  58532, 20601, 50120, 19148, 78501, 195724, 110740, 8249, 109665, 27446, 30568, 57631, 31425, 49752, 32820, 65504,\n  50079, 3663, 102256, 219898, 23849, 211315, 14645, 4359, 91767, 9528, 12449, 49366, 7941, 49763, 107848, 8930,\n  27086, 50686, 9744, 10447, 81935, 39513, 46514, 1670, 29229, 6172, 22312, 137280, 97759, 9806, 14445, 22976,\n  56458, 73391, 34983, 93760, 174219, 52573, 33149, 59747, 2429, 136277, 75123, 165263, 91040, 7446, 57632, 48633,\n  97140, 246081, 84766, 151684, 79918, 93268, 120346, 54059, 54875, 77858, 32996, 103590, 45276, 11968, 19600, 25849,\n  17159, 132907, 42828, 16817, 4913, 99462, 103303, 27395, 5737, 74184, 20749, 21160, 14377, 77062, 131403, 158735,\n  10999, 27799, 77785, 9320, 34366, 51593, 61070, 33746, 47048, 29268, 36675, 30262, 53297, 9832, 82000, 20188,\n  122292, 39917, 7331, 18160, 68301, 185935, 134830, 15031, 4935, 10004, 165845, 185534, 46923, 30109, 44134, 122631,\n  18874, 22903, 112790, 26561, 18549, 348902, 82871, 140345, 255565, 135390, 63556, 103747, 145055, 179600, 145662, 296111,\n  61661, 211987, 23952, 52342, 126343, 48450, 32919, 44277, 82185, 9591, 62139, 205363, 376969, 394874, 108461, 18040,\n  120885, 14798, 39863, 16571, 16794, 58271, 81025, 55206, 14640, 118656, 6361, 44092, 85970, 6262, 153863, 108244,\n  180200, 72264, 79947, 38044, 10050, 5735, 61221, 80712, 5471, 115689, 11391, 11661, 184257, 20010, 60116, 30320,\n  19327, 134598, 45455, 27542, 18004, 125092, 452272, 1549, 91523, 46567, 180063, 156026, 2608, 11174, 58848, 37788,\n  65907, 80194, 30490, 5786, 40775, 119519, 106241, 11323, 156297, 8425, 61495, 2617, 29675, 2425, 59886, 112582,\n  49142, 59618, 4863, 50597, 86710, 50650, 168632, 27693, 85641, 83643, 18993, 25768, 84284, 28090, 93592, 36627,\n  312804, 43381, 9887, 9402, 100931, 97165, 3311, 173330, 66805, 28935, 4963, 184460, 3201, 78102, 19126, 21607,\n  37496, 24938, 22615, 16153, 32862, 134792, 153318, 61120, 6067, 2812, 12826, 12792, 23825, 37559, 64662, 202250,\n  102694, 155488, 85881, 149193, 46233, 65383, 15521, 106982, 11358, 176786, 25752, 39717, 34208, 24510, 32464, 77742,\n  39371, 72028, 138229, 60688, 71386, 102834, 132477, 2208, 11548, 63670, 271279, 28351, 30338, 38620, 32491, 99845,\n  143885, 152266, 13252, 2825, 178663, 108097, 1775, 78201, 14897, 113573, 163346, 62292, 171129, 22183, 96598, 38733,\n  64971, 166776, 117445, 9968, 146393, 44677, 74867, 20908, 97328, 12761, 25656, 26785, 9148, 112344, 26115, 99176,\n  110121, 22437, 49547, 6180, 79320, 5835, 31392, 43328, 33377, 75870, 119860, 69497, 80273, 7325, 155219, 43167,\n  111173, 28347, 20222, 3763, 71752, 55041, 47252, 14618, 28088, 15012, 97805, 194698, 54636, 2036, 41349, 6173,\n  96604, 61530, 51859, 43782, 13361, 24334, 22668, 24792, 7070, 23441, 16789, 3209, 36211, 208475, 26242, 32880,\n  122181, 182407, 21444, 31060, 88459, 29929, 77907, 12716, 10934, 97005, 20599, 31690, 8403, 58445, 30303, 22700,\n  10336, 86731, 103115, 337709, 72556, 46788, 112566, 47684, 67089, 53548, 36874, 56487, 41387, 125985, 26893, 40071,\n  106683, 73712, 18787, 40105, 72992, 67246, 137276, 50802, 36790, 70328, 138827, 22466, 39263, 183295, 29858, 50975,\n  9322, 57397, 10654, 24364, 30383, 55799, 41600, 23584, 127295, 296610, 129078, 143558, 244131, 86397, 36049, 1085,\n  80677, 3820, 108139, 5476, 34767, 24683, 7758, 13060, 7239, 131671, 250593, 59556, 103392, 29810, 4188, 252323,\n  39404, 116877, 7651, 43600, 40338, 13554, 157253, 39196, 25978, 144387, 61211, 234, 50104, 6129, 10449, 93777,\n  9240, 356378, 274148, 4439, 72970, 3724, 147770, 78680, 62570, 115877, 40027, 40547, 36817, 224392, 64609, 34795,\n  165027, 67440, 2477, 37206, 23431, 50754, 164797, 46018, 94995, 170982, 27051, 7957, 22767, 3674, 27900, 56419,\n  18930, 60701, 41302, 2692, 84749, 339721, 61996, 111094, 80221, 50129, 1045, 8153, 62945, 19202, 8250, 37208,\n  37418, 32560, 79477, 41106, 88569, 33963, 36693, 5892, 30570, 1581, 66471, 49647, 11922, 160717, 29442, 5643,\n  114865, 82962, 95982, 132098, 22633, 22838, 94726, 54556, 28566, 205039, 162340, 33216, 16849, 35847, 221339, 94851,\n  26533, 71469, 1805, 3804, 12935, 45483, 71020, 36310, 65381, 192960, 34240, 35165, 59773, 1248, 46954, 155332,\n  96864, 4246, 388800, 16129, 57133, 74592, 44807, 442014, 38203, 42574, 80818, 91592, 26377, 36424, 65760, 977,\n  77387, 22628, 147610, 28018, 30561, 98454, 6969, 119628, 63648, 18170, 36854, 26601, 64018, 22027, 37279, 51395,\n  152934, 21153, 9430, 58760, 194742, 5330, 55115, 34158, 28917, 174111, 13171, 122326, 1526, 43896, 66094, 25325,\n  4234, 148354, 11450, 275, 18999, 112191, 44365, 22723, 68409, 8733, 57746, 96565, 75007, 14196, 108844, 29475,\n  88599, 177563, 100792, 106156, 86323, 93726, 14248, 135341, 194131, 40126, 47099, 14779, 8272, 39597, 95983, 171398,\n  65882, 28052, 10393, 47213, 40689, 22120, 72212, 106829, 34964, 109146, 753, 648, 21660, 30047, 17527, 181025,\n  5619, 145357, 4085, 216883, 9359, 186951, 24779, 53931, 24545, 36197, 223296, 62628, 168101, 4243, 107313, 30321,\n  26642, 13049, 51059, 31027, 107912, 807, 73550, 26551, 84369, 122422, 165872, 49754, 74213, 234264, 33151, 52014,\n  33100, 87183, 22365, 52500, 40013, 23302, 5652, 72723, 21404, 26107, 48434, 587, 94049, 168493, 96418, 32871,\n  70860, 31709, 25128, 443, 71597, 166253, 15670, 70994, 26341, 133675, 28280, 75491, 54756, 47955, 56028, 26182,\n  11952, 113272, 472197, 64640, 110753, 17919, 337, 50642, 22576, 142, 87371, 53391, 93210, 126694, 15285, 19642,\n  85667, 14148, 1506, 42092, 52962, 33243, 11970, 20734, 135843, 57044, 58880, 13002, 219134, 22876, 64754, 232519,\n  4257, 43120, 321573, 24799, 64526, 124728, 52579, 81472, 70831, 276848, 17403, 74359, 23021, 182101, 74597, 23744,\n  148267, 12055, 7976, 5349, 11772, 67540, 167347, 65318, 18720, 127832, 108238, 22828, 90233, 9987, 259080, 118185,\n  73209, 79270, 13775, 90100, 137742, 90799, 70569, 15699, 19961, 9087, 67475, 57872, 39731, 8810, 134897, 131868,\n  146849, 19898, 3334, 2281, 167061, 91073, 60356, 467742, 74712, 188, 53179, 137679, 92769, 29241, 9537, 132595,\n  80119, 1041, 88962, 5976, 40171, 44911, 102859, 139059, 104558, 98987, 47761, 19272, 71472, 113864, 175377, 73338,\n  10857, 23402, 23758, 1591, 139864, 5644, 4076, 118760, 16427, 134198, 18853, 20291, 100849, 37423, 22038, 36677,\n  19071, 195521, 57445, 11069, 31869, 55718, 66882, 148490, 44, 41296, 75242, 49704, 166810, 9906, 20943, 122258,\n  49112, 105667, 15969, 10344, 6408, 187694, 21399, 72742, 58970, 14867, 14376, 81889, 41856, 23225, 15042, 56993,\n  16074, 131389, 74276, 72407, 53875, 383108, 53597, 37363, 68993, 44854, 122548, 430927, 198279, 38430, 80409, 12245,\n  2981, 628, 2818, 17760, 37437, 238229, 7968, 46892, 2200, 3730, 34190, 65983, 37959, 112291, 87850, 70827,\n  6522, 20750, 73913, 111621, 41652, 19587, 2780, 58668, 25916, 85259, 18200, 168962, 95781, 42445, 102050, 7776,\n  57662, 103313, 47742, 96358, 41964, 66174, 100396, 29069, 204735, 19679, 27978, 7479, 40264, 22534, 61183, 36081,\n  107436, 58223, 14680, 23002, 101311, 24716, 124108, 12908, 5646, 31750, 40380, 14215, 232799, 102772, 14122, 96775,\n  61398, 50917, 12096, 149880, 67833, 598749, 124194, 155871, 49216, 790, 14677, 65319, 56917, 7440, 145744, 95701,\n  12206, 49405, 129269, 76199, 45732, 9767, 11058, 9047, 210885, 11051, 7392, 26307, 2130, 8132, 147526, 20802,\n  232698, 115660, 50060, 59789, 57344, 107623, 80343, 112676, 23291, 9866, 160971, 34032, 118291, 15719, 59730, 164911,\n  28975, 2659, 58046, 78480, 21854, 66209, 53863, 109085, 116045, 29021, 46481, 107552, 22130, 18764, 70254, 31272,\n  11300, 52460, 43933, 84738, 20721, 53869, 190840, 79673, 105300, 7561, 321817, 66924, 13940, 33281, 101046, 183181,\n  32176, 71878, 5678, 62924, 79535, 56646, 40303, 19559, 27703, 93042, 73368, 42187, 3670, 37376, 46440, 7023,\n  36816, 109628, 20680, 5940, 276440, 275233, 170848, 112093, 136996, 14984, 20226, 111441, 77693, 112960, 48577, 39370,\n  55707, 50314, 123404, 26570, 54281, 61372, 123391, 4857, 35928, 246740, 132507, 106646, 44241, 7196, 92258, 9825,\n  37688, 51197, 303141, 5590, 15476, 132986, 10955, 85782, 34486, 26696, 7991, 28813, 18858, 39546, 11703, 11365,\n  38185, 5716, 93555, 11925, 40121, 60002, 6985, 10976, 171384, 3887, 43394, 13337, 56346, 6381, 252336, 39573,\n  75042, 53711, 1028, 31781, 44295, 95925, 131713, 7214, 68125, 43571, 70954, 213234, 1628, 8760, 13391, 65485,\n  17320, 56038, 1710, 25248, 60803, 57399, 19839, 3870, 326, 281556, 50945, 72400, 21460, 316244, 75619, 56246,\n  98775, 481, 13513, 55765, 50427, 7388, 123519, 32929, 57908, 27124, 61316, 101097, 57467, 30228, 48792, 10788,\n  20402, 37318, 50526, 155730, 34456, 158065, 145305, 17832, 43733, 64052, 4506, 35072, 205355, 177028, 184004, 187081,\n  68616, 35938, 83703, 10367, 36892, 93186, 260137, 51934, 89970, 4985, 23445, 26755, 21558, 7948, 78741, 23376,\n  124405, 85594, 68596, 57536, 49351, 12619, 56593, 132668, 99924, 109728, 71844, 71935, 196018, 65464, 17617, 14987,\n  89701, 143773, 33997, 8687, 22701, 33258, 2914, 4436, 72108, 85610, 9671, 49067, 2327, 82988, 1361, 1672,\n  44033, 35777, 30269, 24057, 10605, 82236, 616, 15793, 13919, 47249, 112086, 116698, 9484, 80207, 90574, 33304,\n  68624, 93127, 56101, 42210, 160929, 4827, 38995, 38095, 4701, 125119, 5027, 33680, 9236, 231236, 14135, 87837,\n  23318, 70261, 78893, 30151, 81482, 14332, 1084, 74256, 27532, 46644, 79185, 3148, 62615, 6981, 55672, 31668,\n  36825, 1849, 14536, 37446, 14738, 23779, 43058, 162749, 72199, 1168, 21346, 5592, 85932, 85302, 9668, 18351,\n  57135, 150360, 2080, 228015, 77953, 34670, 119302, 151751, 31009, 106725, 84265, 45214, 59289, 74178, 113071, 263206,\n  111009, 4021, 44449, 188119, 192629, 123592, 392506, 292847, 114487, 12831, 205858, 9852, 20780, 79648, 75767, 357014,\n  97721, 18166, 21005, 67950, 33226, 204009, 16536, 2987, 11335, 66717, 144910, 47950, 17262, 55060, 15063, 2934,\n  51038, 26775, 178497, 66008, 3427, 49433, 128592, 20036, 157553, 63861, 3089, 23015, 51210, 28696, 35933, 49942,\n  71135, 231518, 99620, 17248, 21835, 176536, 20676, 16944, 38700, 165831, 233253, 295625, 36723, 13023, 52745, 10907,\n  19423, 67972, 125868, 95473, 82875, 1183, 108455, 52685, 33417, 64095, 21433, 52438, 33191, 127809, 44505, 211823,\n  7810, 2752, 95548, 162031, 7185, 91196, 47563, 61721, 33359, 17897, 23682, 42806, 178101, 22874, 49707, 199897,\n  75419, 82456, 8618, 11171, 79712, 116847, 18783, 44190, 46564, 5346, 59046, 95032, 7893, 14916, 3214, 26800,\n  24172, 121453, 34362, 10250, 17408, 18888, 4840, 68696, 22831, 13162, 36005, 32512, 14800, 62357, 41723, 45046,\n  27247, 37486, 5372, 2564, 34261, 298500, 66509, 133920, 89138, 31305, 117697, 19097, 108304, 81386, 84106, 23802,\n  46411, 63304, 946, 51417, 41777, 41041, 19501, 115864, 60743, 294354, 37955, 94165, 18116, 1156, 17937, 20645,\n  57114, 90804, 58042, 48643, 92288, 9861, 2557, 88546, 61333, 101008, 12853, 5148, 87856, 4152, 144503, 73841,\n  18718, 9789, 147565, 10846, 42085, 12789, 30223, 8993, 56352, 67203, 2448, 28215, 6052, 23540, 126319, 75933,\n  36689, 80235, 23231, 23561, 21383, 38800, 77548, 102798, 21234, 31468, 158608, 46188, 63960, 191679, 8051, 67014,\n  11185, 170078, 42186, 28827, 34777, 41930, 212079, 12421, 34750, 24111, 110344, 73918, 45171, 70826, 141949, 40063,\n  23979, 24254, 37309, 26724, 27179, 24718, 83648, 54938, 14591, 17425, 29525, 102675, 48975, 48654, 12316, 8929,\n  60640, 41709, 50168, 63264, 89812, 50716, 48632, 38755, 138583, 160123, 55579, 71829, 24230, 233277, 46322, 39650,\n  166388, 34718, 24108, 98252, 7031, 106695, 62498, 18258, 35062, 217827, 78731, 34824, 33354, 19520, 60852, 2432,\n  60224, 8587, 2836, 62955, 702, 20227, 42285, 40560, 95592, 62486, 11094, 53035, 143291, 18842, 46177, 77994,\n  1770, 9657, 107422, 172915, 32655, 128716, 25886, 25164, 156740, 119928, 165875, 85817, 11007, 89110, 33956, 12652,\n  65156, 180266, 8494, 36889, 19958, 20955, 96, 1264, 118288, 135769, 44754, 86671, 5632, 19026, 168220, 289120,\n  33569, 93821, 66144, 70635, 7687, 5642, 2714, 55445, 56636, 71545, 184182, 93133, 7332, 37389, 12643, 52315,\n  22729, 11014, 158742, 17050, 152889, 50178, 34601, 41945, 52136, 9948, 26914, 63548, 95721, 115951, 40759, 8960,\n  158258, 38938, 49232, 48325, 42234, 81523, 253019, 66128, 40978, 20048, 238048, 38760, 62928, 122560, 118532, 43687,\n  137472, 163689, 26680, 9878, 17448, 51035, 16211, 60834, 36749, 29178, 14241, 59868, 150086, 2305, 26477, 42422,\n  34342, 165341, 83279, 33894, 14257, 29928, 12743, 13957, 125571, 89134, 66712, 10952, 16507, 147839, 30146, 7249,\n  16565, 45399, 39874, 114565, 215780, 31990, 230881, 171477, 102, 196546, 44538, 10880, 84948, 281705, 86651, 10617,\n  31395, 2342, 453658, 43569, 60561, 132901, 21845, 17727, 58556, 258242, 22262, 58728, 4008, 77997, 11806, 37431,\n  30599, 81375, 109137, 185787, 114085, 217292, 97453, 169085, 30593, 60212, 11544, 102056, 65580, 2384, 91655, 4855,\n  95725, 7295, 157994, 16228, 20669, 53276, 141590, 105246, 17334, 25440, 76067, 17967, 39321, 38911, 11362, 28559,\n  63807, 21627, 26468, 85816, 40120, 1025, 15234, 58319, 69516, 66512, 124548, 75845, 78873, 22137, 46681, 51242,\n  85683, 32909, 76747, 35555, 43396, 101465, 1765, 73094, 1077, 2962, 39028, 66777, 57831, 42048, 15828, 13962,\n  36041, 63657, 52412, 5242, 58846, 2141, 5506, 219012, 134451, 3936, 182230, 17558, 17153, 152237, 22621, 49377,\n  170216, 35257, 68233, 65374, 6510, 11126, 212151, 7184, 2480, 22517, 3437, 33073, 30156, 16557, 3768, 55067,\n  86829, 91000, 12350, 148650, 66017, 79424, 70885, 49066, 28250, 21369, 51213, 34533, 11510, 3258, 18176, 18465,\n  84413, 6315, 36411, 163765, 4346, 356, 107618, 598, 13727, 285026, 162695, 8749, 14583, 7132, 63521, 184253,\n  32378, 25991, 5604, 30961, 53675, 4874, 84693, 5086, 34811, 26978, 56564, 7904, 33519, 51221, 113942, 69253,\n  6664, 125563, 22055, 220680, 102008, 742, 51930, 19494, 176108, 44424, 35123, 13025, 75685, 11759, 74335, 22250,\n  181453, 131147, 16984, 132115, 154311, 11991, 76452, 52609, 85351, 196, 30969, 9198, 74919, 2529, 56838, 71779,\n  29187, 116304, 3504, 62330, 41190, 86153, 28393, 254926, 104228, 105189, 13264, 84359, 3574, 12415, 8534, 57147,\n  10175, 188174, 59504, 60932, 66318, 16407, 107921, 17638, 99103, 49278, 28403, 39786, 145865, 8462, 3558, 43406,\n  142271, 29139, 21989, 36552, 93955, 72365, 7176, 13556, 106185, 37957, 321774, 17782, 129017, 51154, 27938, 24952,\n  1935, 39366, 2791, 33489, 41582, 56078, 24558, 9311, 5449, 218786, 27808, 190429, 68013, 36020, 86003, 29735,\n  3404, 87348, 119357, 115714, 2324, 86796, 81973, 40992, 43376, 93621, 28784, 16808, 36367, 2517, 2909, 191926,\n  24978, 55303, 53308, 205724, 60068, 3098, 21375, 64784, 23949, 26579, 63121, 12319, 80145, 39967, 97861, 6757,\n  70143, 67642, 37082, 34698, 69140, 122883, 46151, 62187, 80934, 429, 19437, 135071, 137885, 222647, 13331, 154065,\n  327, 61778, 74257, 40116, 37493, 14855, 85079, 237641, 42342, 102164, 199965, 71204, 4662, 29368, 5042, 113914,\n  122214, 8955, 13149, 102503, 43173, 5659, 163787, 69003, 307084, 63392, 171080, 21390, 81918, 86666, 36622, 24126,\n  28887, 5736, 28054, 207170, 163428, 79891, 346467, 95363, 38980, 111806, 80828, 9200, 19288, 294896, 114468, 87405,\n  111715, 141705, 7015, 72754, 68463, 48738, 243147, 33397, 101210, 37051, 98801, 82847, 20397, 4940, 185559, 18716,\n  54718, 83491, 11725, 40803, 1128, 12128, 23060, 5174, 7745, 67007, 46701, 1571, 27807, 180186, 256996, 18975,\n  16837, 7877, 212758, 250379, 15440, 87954, 57755, 24719, 124057, 83461, 258, 50864, 8874, 29038, 71289, 31627,\n  15429, 9005, 4061, 113851, 107716, 82819, 13651, 79656, 117851, 17539, 111446, 12938, 39724, 190787, 4352, 15402,\n  21070, 62708, 8539, 23777, 73853, 13552, 38810, 86117, 16285, 56400, 1718, 75342, 142863, 29033, 378, 110113,\n  180321, 32586, 23606, 26393, 160984, 207987, 23783, 8406, 16904, 24596, 47274, 11693, 46539, 60524, 78595, 48423,\n  31718, 20170, 9009, 146268, 15183, 191060, 172765, 1349, 138436, 37365, 10970, 40509, 225817, 20021, 70394, 152138,\n  21541, 66559, 66544, 89352, 2725, 17258, 91345, 7313, 3815, 115868, 8660, 40362, 4071, 103524, 39388, 118275,\n  21950, 6549, 38226, 32754, 209574, 29201, 43495, 18028, 20296, 40597, 18370, 47520, 202450, 24134, 2219, 8195,\n  69545, 38041, 136934, 46374, 19041, 159811, 84865, 58620, 846, 98749, 13569, 30714, 97246, 32186, 4479, 27355,\n  92973, 35214, 151491, 75963, 37631, 1561, 27200, 238083, 23182, 60756, 12291, 25766, 39355, 102333, 87362, 65741,\n  59906, 19538, 201575, 48772, 102938, 24438, 292580, 39964, 66366, 9004, 61379, 50548, 37622, 38732, 28379, 68180,\n  76622, 17488, 69849, 5963, 7219, 48143, 43413, 55358, 540, 58691, 29506, 19245, 52193, 48621, 5518, 13048,\n  118625, 44755, 191081, 42061, 89197, 2259, 60665, 66994, 71210, 51232, 3585, 142096, 55024, 7892, 8345, 58653,\n  463307, 65658, 64319, 137941, 136323, 53499, 12746, 43492, 6978, 95163, 29925, 60175, 5128, 7352, 41463, 184756,\n  121146, 20473, 18426, 4598, 5309, 54580, 14277, 121151, 10691, 56711, 43880, 63409, 76682, 11830, 172218, 264898,\n  32632, 66536, 81062, 31649, 25788, 92774, 60222, 11100, 63159, 9432, 224657, 25240, 53613, 152, 138620, 163829,\n  2397, 85345, 12501, 37507, 64932, 38575, 43522, 65789, 80198, 78796, 35226, 3851, 108891, 73311, 3060, 28391,\n  93671, 39663, 46142, 30982, 66041, 37281, 68157, 26553, 71872, 81142, 211527, 39747, 118119, 22695, 2859, 11066,\n  20232, 168911, 7933, 197005, 17066, 111071, 44434, 133994, 120798, 12766, 227798, 45756, 132852, 29917, 36076, 55352,\n  65281, 129800, 41958, 18944, 84678, 18580, 168093, 132621, 39997, 54092, 27740, 32354, 3770, 114118, 103242, 43918,\n  15899, 18574, 145944, 3190, 123469, 219903, 24169, 100571, 62403, 16776, 92779, 14535, 17168, 16475, 14304, 37231,\n  1712, 28218, 242754, 61688, 28980, 1318, 51359, 222657, 99200, 67989, 31772, 23932, 35351, 201251, 49041, 27306,\n  19128, 40135, 3986, 77333, 19649, 120683, 151927, 21081, 7076, 78375, 77501, 101599, 8011, 89585, 96715, 58179,\n  5378, 102138, 106793, 26051, 217276, 4197, 16297, 27014, 46721, 13322, 22806, 5278, 29629, 70632, 9647, 71519,\n  58818, 40603, 128530, 8903, 36770, 56900, 31483, 26935, 43845, 34265, 34920, 87658, 6114, 84767, 64250, 47318,\n  50720, 19264, 162514, 33357, 13117, 6705, 46696, 75032, 71054, 87004, 42035, 69138, 11903, 99854, 102328, 19611,\n  34525, 69312, 6431, 49842, 101600, 133178, 108751, 41829, 89939, 225664, 48916, 99556, 9195, 130387, 5960, 36857,\n  116724, 53518, 94002, 39077, 53996, 6945, 22261, 64291, 8314, 152785, 57588, 16522, 9091, 5048, 87671, 35441,\n  39509, 1945, 12423, 158923, 178413, 37549, 14095, 1475, 73188, 62878, 4819, 24012, 68534, 42606, 4010, 120809,\n  57497, 59564, 101758, 103718, 32701, 80116, 12345, 95834, 46918, 21468, 53213, 15665, 31200, 3867, 5140, 96013,\n  250744, 21016, 10069, 13968, 35449, 180829, 27683, 39704, 59956, 22893, 3115, 26293, 32785, 75934, 62445, 141162,\n  62720, 2018, 83638, 19949, 114012, 95006, 3330, 99829, 130935, 309272, 9565, 55874, 121727, 37017, 23586, 319858,\n  40970, 27602, 8625, 112329, 61060, 100088, 118525, 25922, 16232, 1907, 60671, 51583, 44553, 80993, 5262, 94679,\n  8676, 940, 20736, 11823, 3020, 16476, 12340, 152600, 97416, 3703, 25744, 66826, 16245, 16876, 46446, 84798,\n  74227, 176020, 45192, 61955, 75496, 23946, 23626, 40372, 26036, 6149, 11822, 30582, 16541, 41914, 82385, 232823,\n  40921, 80773, 14930, 3631, 7517, 39619, 4348, 36180, 126106, 138939, 62611, 1477, 113512, 47321, 25052, 14546,\n  118881, 29060, 23589, 128322, 36795, 18401, 137921, 104699, 267929, 36194, 172791, 18113, 4766, 188215, 30083, 332586,\n  94089, 5805, 77909, 22194, 68234, 154976, 43220, 40660, 70001, 184893, 138095, 11128, 103010, 22663, 5108, 212615,\n  8485, 5565, 49222, 54614, 26530, 42639, 16319, 55062, 152662, 105595, 21114, 22216, 10294, 68158, 10436, 86950,\n  7206, 62115, 3977, 3657, 59874, 456, 118617, 18156, 106663, 112229, 80992, 17442, 8217, 55551, 5133, 34344,\n  251927, 51153, 39364, 201321, 7816, 66803, 23057, 156724, 145664, 14276, 95705, 979, 2796, 6875, 13429, 212525,\n  50602, 26276, 28284, 3424, 19465, 52397, 46963, 31420, 51399, 206476, 92317, 48851, 637, 100820, 83349, 10317,\n  60227, 21972, 6908, 282439, 32857, 224767, 95629, 83882, 42106, 87338, 69757, 29840, 68709, 37665, 45244, 114577,\n  49188, 175943, 54009, 186746, 106158, 70168, 3358, 234002, 50555, 9221, 129338, 9562, 20118, 32923, 78479, 118280,\n  65752, 4977, 10474, 102174, 60947, 129006, 10570, 83451, 8598, 8078, 159367, 123785, 80438, 16742, 5905, 5281,\n  181513, 42402, 6977, 163136, 93179, 42191, 14968, 50421, 112401, 105440, 33456, 57347, 121611, 4221, 94954, 36517,\n  24046, 27796, 6255, 33394, 72990, 135408, 116627, 1233, 57874, 25654, 95419, 68156, 401399, 313338, 55208, 45573,\n  93124, 119251, 47200, 38196, 11909, 130667, 45391, 73904, 64964, 167846, 4137, 115606, 52036, 62214, 7969, 160925,\n  7187, 1132, 134835, 40309, 73195, 64494, 80472, 444841, 61111, 26500, 45323, 40743, 53625, 52797, 22659, 15631,\n  29739, 36706, 28841, 39147, 102836, 26794, 10536, 14845, 87305, 45874, 12241, 127587, 83833, 57183, 79722, 30844,\n  41304, 84655, 20825, 92500, 3722, 25655, 27811, 10157, 81634, 31362, 34088, 92487, 70123, 22190, 185100, 72658,\n  139035, 192523, 88241, 2078, 230490, 44528, 85638, 100198, 22088, 29982, 291233, 241062, 13865, 4445, 137791, 37835,\n  107218, 31726, 19718, 38234, 72528, 23046, 19177, 66695, 5109, 17251, 28077, 5617, 21554, 47839, 72425, 133825,\n  1486, 73065, 181275, 141508, 21768, 62971, 63082, 2512, 34200, 9904, 120309, 6392, 91243, 68416, 268253, 41199,\n  116757, 138551, 185526, 41246, 28986, 4093, 19057, 17295, 4148, 245766, 122360, 35356, 112075, 20301, 75441, 10998,\n  7977, 19769, 62922, 937, 63547, 100196, 26427, 157820, 20983, 236696, 22935, 8140, 90315, 156004, 47204, 140973,\n  7726, 45097, 52725, 22636, 23436, 257282, 105247, 522, 88389, 216031, 202204, 46812, 211666, 19693, 68828, 81691,\n  45925, 11256, 30292, 372, 5236, 167826, 88328, 232776, 151611, 5360, 82104, 18841, 80393, 25465, 18285, 20320,\n  72377, 31730, 33160, 45803, 38715, 27705, 37379, 24163, 18360, 103586, 4015, 32305, 269494, 91252, 20080, 36567,\n  54650, 7797, 57073, 12650, 31164, 42209, 6375, 261663, 105528, 81661, 106002, 2800, 5375, 17247, 43151, 4442,\n  15727, 194619, 100855, 144898, 62320, 78465, 39929, 16454, 1967, 28311, 61363, 17219, 9395, 8745, 121445, 76939,\n  80385, 162380, 22009, 54191, 44248, 16299, 122830, 48151, 74429, 78291, 64755, 14238, 44966, 2511, 17712, 67954,\n  93583, 829, 105899, 49935, 84750, 11591, 33185, 85447, 42717, 27409, 208542, 28965, 62052, 52525, 5597, 25694,\n  65594, 16343, 63224, 276188, 12475, 9331, 127507, 38522, 57287, 24128, 133161, 79723, 105548, 133695, 48917, 27558,\n  43278, 46520, 13778, 141954, 110785, 83366, 17715, 46317, 105763, 66298, 147013, 41086, 94180, 16478, 220447, 44611,\n  730, 19722, 78975, 117889, 125643, 26254, 16574, 18480, 65006, 15806, 38549, 246418, 46052, 36056, 8440, 34984,\n  30170, 3163, 59800, 4458, 115442, 4283, 41970, 33507, 104078, 1653, 22, 121158, 276486, 3655, 6338, 24048,\n  133421, 23641, 2161, 24422, 36006, 8086, 10675, 181474, 12307, 29514, 59143, 14729, 52509, 87128, 122470, 19446,\n  80852, 33314, 24573, 119864, 14237, 9652, 57779, 6612, 51851, 15284, 98871, 90581, 124466, 156831, 21190, 22015,\n  71380, 161906, 87247, 69201, 18392, 17908, 108470, 72962, 40719, 14338, 17911, 95260, 43339, 20610, 78916, 20710,\n  72451, 11315, 31448, 17263, 58853, 178878, 48111, 116002, 45497, 80506, 82605, 85880, 36300, 121755, 25215, 36118,\n  301929, 88728, 405223, 276136, 553, 34704, 212438, 49970, 78329, 922, 20711, 25036, 257130, 38295, 145369, 18128,\n  15385, 30829, 55656, 48345, 8012, 3561, 28004, 122041, 192900, 58338, 112508, 41085, 29976, 87040, 47117, 23905,\n  4336, 92061, 138880, 97407, 42083, 172121, 6256, 25192, 172671, 5, 93568, 1420, 12677, 31605, 56743, 40620,\n  6015, 78415, 231077, 31298, 80026, 13902, 19048, 24924, 170586, 32955, 176119, 87859, 36731, 6773, 27711, 24658,\n  26475, 115216, 133207, 93250, 95820, 88522, 8317, 5714, 124047, 55219, 86860, 19677, 23961, 22928, 162209, 8904,\n  225992, 359835, 56084, 96201, 29392, 96558, 86071, 93643, 55114, 13347, 8183, 95129, 82012, 2017, 123336, 34219,\n  115554, 157159, 47747, 101684, 41008, 18735, 193781, 104151, 226906, 7552, 179874, 124113, 31159, 21162, 44010, 14771,\n  51268, 166128, 31382, 73124, 77438, 92830, 205709, 12113, 1292, 38937, 13114, 1334, 2118, 15597, 69581, 14449,\n  21934, 76618, 48728, 67038, 14967, 51495, 24243, 87736, 147249, 26720, 11119, 46063, 43749, 5843, 44147, 152629,\n  133428, 65703, 14269, 45604, 57982, 28672, 55616, 45957, 8438, 95433, 37698, 220862, 132034, 39456, 61870, 4161,\n  26501, 73560, 56418, 9845, 4654, 20916, 10456, 88920, 119358, 9015, 65931, 96507, 48029, 38534, 21676, 109081,\n  43078, 34943, 25089, 6131, 28766, 23665, 5477, 10255, 16695, 67, 45778, 42443, 42770, 29534, 23733, 100513,\n  62617, 42630, 48746, 14191, 43753, 50295, 26007, 8792, 57243, 43119, 54725, 164253, 58250, 112304, 131796, 25165,\n  4651, 3188, 24831, 47748, 3705, 19540, 13211, 102095, 5593, 18699, 23666, 32005, 117571, 33541, 60584, 74573,\n  86311, 99443, 25172, 27222, 168938, 7143, 11853, 53560, 18834, 19960, 86522, 28217, 53266, 117700, 72989, 34323,\n  18721, 66450, 34346, 74056, 47217, 202002, 46269, 9429, 68582, 75458, 37823, 82843, 96652, 32549, 145144, 27958,\n  19820, 158086, 31955, 201406, 135379, 31207, 192545, 12950, 51704, 9094, 248263, 76147, 64028, 110009, 79407, 89345,\n  99284, 223492, 47966, 26848, 15359, 201137, 2861, 110507, 71231, 72297, 31851, 118777, 71039, 151051, 240855, 16333,\n  50766, 14727, 7939, 4149, 80908, 418780, 88378, 59276, 1327, 7284, 38576, 79814, 65820, 42199, 84860, 49574,\n  62596, 12396, 70598, 40117, 8648, 7994, 16836, 7630, 14047, 359699, 106878, 525, 29037, 28064, 13380, 11675,\n  50669, 74216, 103539, 180314, 27449, 56299, 172344, 19274, 7301, 246099, 32043, 19422, 36506, 129317, 6806, 30140,\n  4614, 46639, 66926, 932, 86600, 6322, 27847, 233103, 10541, 39025, 34887, 3517, 12972, 26220, 2031, 66561,\n  115015, 48658, 47596, 12714, 33845, 3893, 16165, 35237, 89983, 14769, 11962, 147224, 47018, 29977, 27979, 5552,\n  82338, 86023, 131368, 1218, 24853, 237840, 132193, 15455, 40873, 3668, 65351, 53388, 15229, 59889, 272245, 47934,\n  11858, 34347, 18038, 90853, 86981, 300602, 19343, 114181, 29362, 84921, 6095, 106059, 79472, 38015, 1206, 48741,\n  6208, 80000, 21916, 17423, 6002, 108083, 24479, 34931, 56661, 9511, 26995, 100694, 163853, 35997, 81254, 58321,\n  18919, 171890, 86877, 91341, 74503, 70477, 53412, 7027, 59281, 39892, 131302, 5864, 15947, 61301, 67466, 162369,\n  47956, 27874, 35624, 282324, 21270, 111847, 102548, 41482, 30955, 116737, 28264, 8592, 55458, 22301, 75090, 29821,\n  30697, 51709, 3041, 19208, 8038, 24634, 30467, 87509, 126428, 19389, 18814, 152686, 20701, 83474, 45832, 80891,\n  105808, 11378, 153223, 120770, 98186, 150633, 49838, 9141, 12755, 30962, 5260, 74490, 21256, 31678, 65062, 33326,\n  289838, 187831, 20595, 89768, 2805, 58535, 10844, 70085, 12090, 2451, 138068, 98544, 24461, 4511, 6754, 41684,\n  28203, 3383, 65355, 82833, 30161, 83924, 234361, 128424, 28921, 222594, 33975, 125491, 34069, 11508, 67464, 144226,\n  41850, 98703, 34371, 7901, 21254, 38398, 65651, 23549, 53883, 213340, 123269, 12028, 71764, 177701, 28758, 2623,\n  68395, 11549, 15232, 68603, 9660, 63116, 36079, 57093, 31198, 20475, 48467, 89984, 35619, 186847, 107469, 31389,\n  43631, 73867, 41949, 68841, 114250, 1605, 30564, 63403, 17588, 27680, 99533, 12641, 70325, 50428, 73426, 78379,\n  11855, 91651, 72081, 91720, 60198, 15743, 12065, 83398, 140046, 6761, 46598, 45900, 5068, 886, 62448, 148968,\n  37347, 19405, 9680, 15819, 43496, 63370, 75667, 163700, 37639, 3633, 22774, 34341, 183131, 134335, 37200, 23915,\n  7054, 14194, 12970, 26438, 13350, 285521, 25594, 8219, 104410, 91039, 168804, 138480, 149734, 15907, 33818, 61132,\n  60082, 4622, 110187, 56736, 13551, 73571, 3945, 73463, 65498, 17758, 263266, 17593, 2710, 27585, 54469, 38200,\n  45367, 63754, 28881, 3473, 12791, 98287, 31895, 65787, 4463, 94536, 24951, 36332, 59901, 28803, 52130, 86403,\n  7668, 181822, 74831, 18977, 9850, 177206, 145485, 109798, 7292, 31421, 26280, 77211, 58511, 12507, 127004, 11113,\n  147, 8729, 56208, 43066, 79926, 129937, 31345, 83947, 39915, 46146, 98763, 42566, 1337, 13192, 18323, 105163,\n  80570, 117753, 16555, 72883, 11077, 159438, 40764, 70933, 83329, 26066, 12276, 72059, 21655, 173836, 126713, 69454,\n  153482, 91585, 70644, 102558, 110483, 6764, 127864, 190133, 3961, 101798, 20945, 71138, 82402, 90884, 69669, 44753,\n  923, 16939, 59700, 164258, 25969, 27082, 31399, 43846, 6306, 246093, 51342, 6153, 151581, 202801, 182731, 56475,\n  162188, 89426, 141356, 14355, 121815, 27536, 28023, 65257, 77523, 106668, 127314, 24947, 12790, 38796, 169698, 23555,\n  10725, 44573, 183083, 42088, 62716, 43265, 105958, 32050, 44067, 50118, 1668, 3874, 6243, 318411, 16599, 1691,\n  94999, 52378, 28671, 216728, 123258, 2059, 34969, 69225, 5913, 136280, 171443, 141515, 91662, 22175, 135282, 80020,\n  92270, 1663, 4808, 4482, 3495, 34691, 5226, 109830, 108512, 17342, 107488, 11606, 123190, 100247, 29666, 146527,\n  113014, 15794, 30894, 13224, 39585, 243192, 22351, 9903, 7836, 47699, 11078, 25468, 122291, 48821, 26780, 122679,\n  75521, 81450, 630, 4895, 92900, 55074, 74293, 17441, 3563, 111657, 103102, 51613, 12318, 52370, 36191, 68245,\n  34269, 40445, 41354, 122901, 168604, 182500, 62012, 42557, 11259, 24428, 115113, 86345, 12362, 3909, 78430, 86852,\n  134602, 20459, 47853, 93879, 22577, 7659, 3688, 38555, 13349, 17381, 56715, 91639, 12493, 10895, 92438, 3142,\n  37057, 28928, 2004, 36427, 32268, 34222, 209974, 10432, 67436, 41989, 173518, 107930, 27079, 62729, 30908, 55558,\n  5828, 45031, 14902, 53546, 8204, 144263, 60255, 14520, 88212, 86582, 109589, 69356, 8064, 47449, 8505, 66558,\n  16886, 4844, 52817, 111260, 215129, 12941, 91118, 650, 20770, 6273, 73089, 40618, 62790, 2873, 35002, 14023,\n  97208, 19386, 102646, 36993, 143736, 135457, 35385, 113601, 17893, 32627, 84439, 100619, 56016, 6581, 57264, 172160,\n  45452, 111710, 203627, 70131, 24100, 322787, 1996, 35665, 70078, 22358, 90922, 83658, 4097, 63200, 58499, 14542,\n  99153, 52159, 6615, 12414, 63415, 31986, 16823, 1579, 65405, 137809, 8841, 16898, 48082, 259, 33014, 42375,\n  12260, 179850, 73667, 91389, 98882, 29532, 17311, 326251, 41092, 5928, 20742, 44964, 48019, 43505, 9317, 49265,\n  6643, 192712, 48424, 163487, 19861, 20113, 70848, 31928, 105333, 23685, 78563, 14638, 54755, 7158, 24142, 44018,\n  20774, 125255, 20331, 24280, 10163, 1285, 2336, 39851, 4299, 117269, 46714, 63816, 87779, 159624, 11731, 9971,\n  990, 137317, 108831, 50994, 74554, 162680, 23640, 131597, 146962, 170620, 34829, 91205, 21184, 1913, 63616, 18427,\n  93136, 156592, 17519, 67565, 115882, 138220, 78622, 88535, 18115, 2711, 33554, 109492, 54298, 971, 24914, 25863,\n  36363, 45715, 27099, 194995, 14299, 178181, 111488, 72395, 322385, 157719, 130787, 11897, 81843, 83999, 11369, 49280,\n  118604, 40922, 61332, 110343, 53407, 75639, 40582, 300440, 54722, 25637, 13694, 48248, 48278, 194521, 56203, 52779,\n  48783, 72627, 10953, 376, 16733, 280238, 26351, 230789, 15132, 25168, 137270, 3588, 63704, 73376, 94031, 74284,\n  19443, 159557, 9697, 39901, 13351, 119050, 15406, 146455, 3460, 29556, 75195, 37673, 102524, 92329, 47289, 98413,\n  15311, 100684, 56345, 7116, 95480, 11590, 7200, 167, 23610, 58426, 17730, 136656, 27944, 53151, 2701, 8824,\n  103124, 3017, 90744, 113588, 53216, 79736, 65940, 26931, 498, 29568, 80540, 143543, 21292, 1740, 59268, 16561,\n  180816, 42323, 50174, 40890, 52866, 10703, 57169, 4700, 17191, 4424, 93511, 49698, 166650, 26972, 48631, 165169,\n  82879, 69326, 202970, 4007, 2376, 231325, 139592, 22119, 62851, 37504, 68816, 58345, 67398, 186643, 43331, 277416,\n  53749, 15746, 23102, 17432, 4793, 151138, 48822, 54265, 48203, 198688, 14305, 54287, 2291, 18018, 113378, 123260,\n  7180, 97549, 87027, 120085, 2920, 76080, 8190, 102005, 5641, 64580, 14955, 59802, 54028, 58884, 19367, 81779,\n  412567, 85957, 97053, 103637, 78871, 29364, 27637, 141728, 4767, 30686, 112738, 130146, 42745, 12730, 105040, 14844,\n  232, 210944, 36581, 152317, 135543, 29744, 3129, 55647, 58149, 46319, 27265, 17499, 28005, 59948, 7170, 34138,\n  5702, 293047, 110892, 408, 91760, 218674, 18469, 46095, 81403, 14389, 4610, 35672, 73060, 11006, 74848, 104820,\n  118143, 190357, 20043, 105358, 141735, 5115, 27093, 45924, 123073, 52599, 29433, 9616, 238350, 78610, 24851, 58858,\n  26769, 31969, 24613, 18294, 4982, 32735, 39639, 143563, 112073, 202205, 12567, 4873, 88601, 44897, 81503, 101648,\n  81362, 34662, 85277, 17574, 48173, 21435, 221188, 40215, 39576, 80786, 26544, 64668, 81841, 10731, 37733, 247986,\n  149188, 127703, 495, 18382, 54388, 72446, 43071, 30974, 198723, 89608, 41360, 190, 33045, 8386, 31658, 19992,\n  237838, 119015, 137622, 50890, 100913, 6460, 116233, 267230, 26621, 104129, 65114, 14190, 41542, 14888, 85962, 23342,\n  23041, 26453, 43725, 71809, 45186, 4770, 46452, 53894, 56616, 221286, 18973, 9038, 109299, 55365, 19366, 26863,\n  18808, 60909, 69353, 41738, 83463, 12100, 68561, 72860, 3980, 13796, 49340, 12332, 31311, 27418, 4255, 53430,\n  18976, 45523, 510, 14224, 30477, 26581, 4530, 3651, 101663, 139840, 22709, 150861, 31996, 63923, 120623, 262522,\n  3076, 10528, 2929, 14672, 130238, 18087, 9816, 121894, 100308, 25085, 55111, 14565, 18952, 53293, 2042, 369988,\n  23674, 61789, 133529, 28783, 108293, 35477, 47119, 36448, 71049, 40015, 33055, 78598, 198442, 1833, 159937, 40654,\n  77444, 189245, 113153, 8621, 18599, 38553, 35223, 166072, 2375, 11659, 21786, 89523, 6032, 12116, 63046, 159398,\n  18454, 3678, 32521, 47626, 11411, 103527, 38896, 42946, 15696, 26370, 10185, 8413, 37080, 165583, 4331, 63555,\n  14907, 72220, 50056, 6623, 62236, 36565, 49783, 10049, 17503, 100581, 55951, 146244, 24724, 9626, 17969, 25524,\n  109300, 173965, 99994, 101056, 46459, 43647, 53737, 277968, 8347, 123521, 74858, 33829, 44762, 77574, 877, 81377,\n  222525, 123532, 30602, 43881, 53145, 2973, 16284, 81940, 61281, 127044, 63620, 9875, 14756, 114829, 19032, 9202,\n  52759, 119141, 23928, 120551, 19607, 3599, 33401, 76821, 73233, 117430, 39968, 36539, 7071, 5446, 121735, 194059,\n  15206, 45283, 6706, 15603, 65615, 1207, 165723, 92275, 34773, 104447, 8396, 32353, 205240, 164323, 13600, 60555,\n  79205, 25532, 22907, 33410, 57480, 107111, 69630, 32137, 47832, 70913, 33161, 20321, 2371, 117348, 10714, 86246,\n  1625, 11763, 17900, 268, 78457, 99175, 97940, 101092, 86660, 32221, 14041, 128504, 125080, 53744, 124263, 31017,\n  13897, 403, 31859, 21964, 5633, 111630, 5547, 77329, 17961, 18241, 84995, 25984, 12983, 67491, 62168, 47262,\n  5241, 297, 51191, 7351, 8967, 147212, 82060, 16821, 782, 11033, 82431, 62957, 5026, 43459, 77963, 203477,\n  53528, 6247, 191852, 87774, 74164, 215654, 13467, 1522, 219964, 28589, 244104, 16242, 117821, 67725, 72570, 156792,\n  17186, 15979, 26990, 44128, 193014, 35276, 57125, 16212, 166451, 68017, 6905, 77608, 16364, 53777, 75921, 76426,\n  37975, 26203, 269296, 64099, 84122, 12077, 38533, 830, 4407, 20139, 963, 43028, 38902, 42911, 37503, 83343,\n  85045, 16979, 1165, 60835, 137387, 58380, 86990, 110066, 134540, 56331, 193845, 81238, 17922, 163093, 38744, 110641,\n  12502, 56404, 34862, 26865, 125964, 12965, 111648, 25547, 7771, 27196, 136980, 9555, 29551, 107158, 57885, 18831,\n  37705, 35505, 101742, 13970, 102109, 62548, 124657, 23328, 11124, 89592, 146376, 248050, 6241, 22033, 18337, 80685,\n  29898, 11908, 216623, 67721, 106162, 146610, 21377, 15085, 91552, 42041, 62560, 122532, 125336, 102365, 121537, 142559,\n  29693, 223919, 11515, 110495, 18776, 22494, 5895, 185059, 103592, 229351, 51220, 100102, 37027, 257855, 29359, 54123,\n  36066, 106493, 12244, 79258, 32002, 432, 56205, 94836, 90182, 6726, 14762, 29391, 48938, 26864, 38083, 60364,\n  3310, 60192, 14766, 205567, 57504, 110760, 22649, 24666, 46333, 21517, 3430, 13135, 28873, 27052, 158809, 11597,\n  20529, 6695, 23138, 22960, 37137, 45574, 6545, 305877, 43423, 26153, 24769, 59844, 14501, 10430, 134352, 56169,\n  13213, 103432, 49523, 35181, 13435, 12408, 129475, 64620, 230854, 77390, 51990, 15653, 83248, 33466, 44571, 117828,\n  51481, 2187, 10559, 68019, 18021, 54895, 48247, 18354, 33737, 4554, 108595, 37288, 39767, 116707, 9175, 3726,\n  108877, 21616, 83684, 49862, 1938, 8543, 276466, 20134, 108498, 48770, 102254, 31914, 131520, 185291, 100559, 51890,\n  209, 19526, 76471, 50544, 71814, 99351, 8172, 198526, 28816, 20419, 9109, 98389, 136777, 76479, 75596, 30635,\n  165417, 48216, 120220, 25955, 211071, 39314, 24308, 32164, 2559, 146280, 43403, 9233, 17947, 90585, 1786, 86920,\n  125662, 2457, 64741, 32152, 32918, 122882, 78538, 44001, 31723, 56426, 23375, 103172, 88177, 145697, 52506, 49319,\n  68016, 31664, 41488, 18486, 110400, 7030, 28241, 986, 109199, 19900, 42147, 56864, 65287, 49183, 7858, 24000,\n  30453, 840, 16673, 25907, 68916, 89927, 6309, 158335, 36407, 199737, 130464, 13137, 59603, 201778, 195292, 21015,\n  42466, 179062, 172561, 89492, 11075, 180407, 31868, 72493, 20998, 60217, 9865, 19530, 39274, 130266, 54539, 21623,\n  12535, 13505, 40641, 73375, 4087, 85633, 2153, 3117, 70680, 55788, 92096, 47509, 98493, 37490, 271936, 151475,\n  3032, 16171, 96642, 34106, 78425, 125761, 19591, 3366, 19316, 54508, 24183, 50786, 194248, 91528, 33253, 34622,\n  108355, 41741, 705, 3814, 3883, 108929, 13203, 67831, 10142, 59754, 68208, 29128, 84820, 56880, 38794, 24972,\n  48571, 40821, 40476, 18137, 164254, 24064, 236309, 79181, 11282, 395, 39169, 2013, 51587, 28551, 9645, 701,\n  109513, 115899, 113566, 12762, 62045, 58322, 103726, 41343, 40866, 244102, 143816, 2490, 70346, 40973, 52618, 15412,\n  30720, 104315, 38917, 42027, 93676, 17513, 107418, 20706, 123890, 13399, 97727, 24044, 87962, 65606, 44250, 98044,\n  65276, 74790, 101473, 19350, 91570, 1326, 87790, 172042, 7577, 100813, 86896, 85891, 41512, 108130, 27794, 14875,\n  71431, 12835, 156250, 58135, 3759, 22476, 42176, 115873, 34686, 56523, 73643, 108505, 51491, 20838, 12721, 32863,\n  45700, 29496, 13700, 34294, 55360, 29206, 155942, 123812, 7706, 163234, 203, 132720, 49358, 144431, 8130, 175788,\n  35818, 3270, 76832, 25710, 54095, 97274, 28779, 94621, 74396, 19092, 128242, 58067, 20885, 14670, 93255, 15107,\n  63291, 23654, 126900, 129421, 59294, 262659, 9798, 3251, 67344, 28600, 44629, 50672, 29072, 26999, 31526, 23183,\n  49175, 165843, 175455, 17282, 175411, 32022, 45989, 30298, 90690, 78118, 83156, 23749, 35636, 31317, 7069, 80381,\n  94561, 133756, 14960, 97404, 6138, 41065, 78041, 32843, 16601, 34123, 9559, 146529, 123377, 96395, 54441, 42012,\n  84257, 123541, 10745, 22139, 106459, 11720, 150883, 172651, 154996, 110538, 4728, 53447, 25704, 2009, 71152, 119354,\n  21166, 66604, 1429, 216162, 8637, 122250, 63520, 27180, 29172, 36124, 276428, 107787, 77184, 4680, 14952, 104903,\n  24418, 14793, 51561, 52931, 8371, 26342, 48526, 7118, 92066, 67280, 40653, 8847, 34597, 105438, 14198, 50163,\n  61188, 146286, 50315, 41205, 170829, 161496, 585, 197359, 95056, 1687, 365794, 91349, 48507, 5804, 49263, 5146,\n  104902, 96365, 117343, 132222, 46084, 96919, 16875, 8073, 262381, 79982, 52663, 13928, 16056, 153908, 15145, 109256,\n  132308, 18763, 24904, 167644, 13618, 40750, 18686, 147124, 114709, 150038, 52849, 2938, 12568, 48617, 8778, 5459,\n  44202, 44591, 74914, 17183, 248689, 13878, 7822, 80060, 23116, 194037, 18487, 2067, 7798, 43077, 33678, 244028,\n  31320, 74273, 2794, 19466, 8218, 36280, 183997, 48124, 19416, 29656, 19280, 98734, 7715, 18311, 30701, 133602,\n  150307, 126956, 7378, 2933, 79903, 13178, 12593, 86571, 26604, 92446, 13574, 44205, 65699, 427599, 21118, 8245,\n  14407, 27877, 47936, 33542, 7916, 26460, 117762, 21596, 37818, 2249, 127359, 209394, 60044, 47677, 308089, 36791,\n  154971, 31417, 6998, 150042, 174360, 12255, 43009, 29335, 48739, 3912, 101398, 53340, 2580, 146939, 151295, 45360,\n  125275, 15273, 45383, 27456, 48761, 23314, 8750, 60801, 85823, 104759, 27894, 123685, 66968, 39480, 26917, 55290,\n  83305, 2696, 98390, 57569, 145853, 340733, 4919, 20024, 52268, 30884, 7413, 203685, 70989, 112855, 4129, 50536,\n  349518, 68205, 332641, 159581, 135361, 236026, 37563, 176404, 64899, 6578, 122033, 63871, 1850, 85234, 82089, 66124,\n  74145, 121098, 107351, 12687, 36881, 117334, 13136, 14698, 85933, 93866, 18047, 32620, 310, 15094, 46000, 88451,\n  23632, 36645, 27940, 87618, 80520, 58892, 20976, 27702, 140090, 96075, 67841, 103292, 238964, 87778, 107338, 17019,\n  83427, 67522, 7302, 8261, 47570, 116787, 8730, 80484, 61772, 174422, 56005, 131193, 52875, 14588, 28471, 59817,\n  9586, 15720, 158155, 51307, 109734, 15196, 11025, 59331, 3884, 52626, 102602, 84797, 25158, 27314, 4437, 20488,\n  76214, 189248, 35023, 114952, 157376, 2827, 62439, 102878, 129749, 36405, 10329, 109339, 108633, 36662, 1254, 13267,\n  5470, 87105, 58004, 15397, 10434, 159667, 21864, 52022, 179464, 3013, 32147, 31496, 116832, 18494, 105502, 129227,\n  107267, 50033, 13481, 9954, 24267, 22141, 16257, 116154, 36185, 950, 115685, 11305, 176708, 2048, 178671, 112573,\n  287867, 162328, 497663, 95170, 50979, 193861, 50987, 30368, 136257, 31830, 46549, 15119, 169876, 23788, 17462, 249887,\n  57377, 1949, 35448, 14791, 43769, 210091, 3783, 34612, 282103, 88380, 245190, 5457, 20491, 98908, 11402, 86899,\n  117916, 16028, 162584, 60644, 320177, 156096, 31065, 55876, 22000, 77655, 9992, 23397, 13757, 317623, 63978, 215255,\n  2443, 17648, 93231, 27388, 104529, 93807, 55505, 140477, 12046, 112040, 70887, 40152, 94365, 112353, 25063, 114679,\n  266061, 71248, 119555, 15589, 2244, 617, 14129, 211431, 70110, 100652, 7777, 4383, 85911, 89221, 21010, 120615,\n  58357, 86405, 37554, 41647, 18, 15143, 69662, 60491, 14714, 186134, 148344, 42347, 5410, 168175, 44535, 42449,\n  343894, 129417, 99682, 20659, 27272, 140483, 63455, 222159, 17536, 13722, 42637, 62324, 11976, 114691, 148109, 2283,\n  32057, 182393, 4295, 147364, 33705, 2075, 44303, 30274, 28331, 63740, 69740, 29148, 10346, 44862, 33716, 73937,\n  153333, 12930, 38784, 247159, 2515, 41053, 20256, 83368, 256189, 54639, 115240, 5096, 24661, 175419, 153552, 26516,\n  141, 138176, 63885, 34115, 47222, 55709, 2765, 28479, 38875, 236608, 12229, 22921, 77291, 54426, 45388, 2860,\n  57787, 114579, 295139, 105782, 17826, 71066, 19119, 54364, 69385, 16568, 12323, 28057, 33346, 34919, 124763, 155533,\n  101386, 31644, 8627, 49001, 303600, 29868, 63213, 9103, 77280, 71333, 9696, 138789, 37059, 24823, 5057, 21352,\n  32368, 114208, 56803, 19424, 10445, 58514, 8661, 209508, 26187, 171838, 10460, 63454, 14016, 122504, 41328, 21329,\n  46618, 32493, 38225, 7855, 31763, 7945, 29876, 8734, 6438, 24205, 97490, 139977, 130740, 47323, 33195, 85390,\n  57194, 13813, 60600, 21313, 96251, 7699, 27584, 170521, 139271, 1363, 4402, 336738, 129223, 84983, 69150, 13147,\n  3590, 163929, 207225, 155260, 55916, 20288, 4503, 8398, 98490, 11773, 27512, 37113, 84976, 86558, 28365, 11756,\n  116005, 182148, 13733, 115313, 47644, 67208, 85069, 9347, 14995, 226141, 14704, 101835, 41159, 35314, 13113, 63526,\n  214039, 29978, 50446, 83339, 17440, 129441, 72522, 118641, 97816, 24907, 73844, 15717, 118884, 167255, 96509, 162793,\n  30847, 36849, 51297, 78974, 77793, 10427, 1873, 2972, 9999, 35074, 28190, 64297, 146836, 46298, 60038, 163007,\n  108919, 61219, 2403, 75022, 127339, 4233, 110389, 69022, 9833, 128097, 88016, 79390, 222936, 22570, 94657, 28462,\n  56956, 38803, 81536, 30474, 152794, 19566, 16481, 147408, 74574, 81895, 20731, 1918, 1366, 76367, 187321, 54494,\n  24366, 21690, 61696, 33283, 107477, 77499, 31112, 414383, 74362, 18463, 218441, 120929, 59848, 258629, 201924, 69269,\n  454, 19989, 13054, 59894, 3623, 58908, 20681, 35723, 78523, 102680, 38988, 184112, 108087, 50944, 132704, 52966,\n  21699, 18860, 96349, 201411, 82697, 85395, 95658, 5093, 6427, 177894, 44191, 32755, 26961, 155739, 6249, 31310,\n  81030, 26574, 84311, 120155, 86730, 113535, 7424, 48888, 13516, 45747, 98098, 20077, 183995, 81945, 43210, 26704,\n  40420, 75831, 45648, 11180, 6855, 57927, 65528, 124096, 34851, 2598, 156633, 107572, 127352, 38169, 123845, 60142,\n  62722, 105584, 232364, 23211, 68120, 1601, 22169, 89299, 747, 258039, 80572, 7258, 152249, 11862, 101204, 8834,\n  121434, 33761, 19175, 133142, 46343, 40178, 48723, 3589, 41977, 30210, 38868, 62257, 10087, 82658, 87827, 90646,\n  16415, 47552, 351723, 28298, 72225, 91146, 272760, 1701, 11295, 1652, 109651, 300747, 51863, 198800, 29446, 11794,\n  32345, 37538, 22356, 33102, 37590, 113544, 37970, 11478, 179743, 25454, 103417, 59905, 221970, 105196, 145604, 7817,\n  164809, 102360, 16974, 75840, 255333, 56902, 6659, 1954, 645, 59400, 67769, 7689, 18675, 5215, 13793, 20536,\n  27852, 3387, 29523, 259718, 16860, 94625, 43143, 29245, 15848, 233581, 22685, 63631, 78557, 22836, 133302, 84513,\n  1348, 51826, 47129, 98836, 58284, 1830, 1749, 94642, 10933, 6145, 12506, 10975, 13879, 103781, 144434, 10268,\n  28409, 32346, 52968, 121567, 107374, 77268, 23686, 35097, 10501, 155275, 15303, 47136, 21102, 168741, 55332, 90385,\n  15996, 84817, 681, 137803, 25054, 142275, 6163, 38175, 8056, 124296, 240642, 65621, 4934, 178205, 16101, 62803,\n  60964, 18230, 100622, 76465, 44689, 14545, 9543, 47514, 16852, 93380, 28048, 12047, 107106, 37575, 101485, 77047,\n  57326, 34819, 96137, 76916, 6469, 46264, 115983, 75768, 87668, 69942, 13027, 165, 8373, 114231, 26434, 52844,\n  42799, 182044, 23580, 146254, 38081, 43236, 33883, 146220, 382894, 14606, 46035, 36481, 166621, 35417, 95382, 2957,\n  59384, 60428, 36358, 66343, 75378, 22267, 22950, 83528, 17577, 56474, 25285, 4619, 179691, 75355, 95836, 53295,\n  34588, 171410, 4487, 14679, 84208, 44015, 18562, 109133, 54101, 11531, 86052, 174479, 303157, 28095, 9953, 35642,\n  14564, 39802, 16145, 77606, 117406, 53038, 121117, 53624, 22062, 1212, 7632, 127157, 237292, 189087, 10478, 127345,\n  102515, 181997, 86752, 87623, 10966, 121602, 68783, 68681, 83042, 114380, 138349, 191305, 67176, 50085, 39016, 1427,\n  42384, 1412, 67118, 122616, 72389, 25260, 2237, 13576, 137346, 19938, 20304, 2191, 68759, 5373, 61364, 238507,\n  75814, 23931, 69565, 38993, 131741, 38364, 12528, 87762, 5679, 129853, 5310, 186831, 32653, 90338, 260176, 389531,\n  108118, 26843, 43985, 50175, 30563, 25106, 56965, 18130, 140428, 4542, 165503, 117991, 24219, 229605, 1819, 129663,\n  1240, 3797, 76093, 18398, 71339, 51919, 93043, 27175, 47060, 216257, 6483, 35051, 1217, 16512, 80798, 129064,\n  13225, 69339, 8548, 237079, 72298, 2575, 34280, 51379, 117910, 55671, 53345, 247552, 29486, 39328, 140821, 34681,\n  57045, 60177, 5004, 90269, 78522, 2479, 322607, 48474, 61296, 13057, 31558, 4678, 59271, 6699, 27044, 31988,\n  35944, 12503, 83480, 4389, 136508, 3781, 114121, 70279, 4488, 155829, 42214, 2898, 68191, 75695, 305850, 45041,\n  74344, 106509, 30087, 17429, 93292, 12477, 290, 23080, 114802, 35714, 18751, 26554, 105424, 17775, 2144, 2412,\n  100610, 65192, 113975, 52975, 180272, 135050, 129815, 76238, 106483, 21440, 63186, 4260, 46189, 9711, 28249, 4169,\n  23429, 23390, 8324, 141585, 63809, 67668, 38457, 38063, 39226, 59972, 1189, 203916, 62368, 14403, 16949, 61767,\n  85801, 1739, 40147, 35049, 76757, 33124, 62102, 15780, 103593, 103009, 53484, 22952, 67973, 114645, 6566, 5245,\n  50462, 7601, 8288, 3513, 194571, 80276, 1908, 54592, 5124, 58571, 2513, 6800, 273997, 193904, 1119, 17991,\n  117245, 2508, 129156, 82366, 26278, 71465, 63341, 56943, 39662, 106116, 94966, 156875, 9736, 2204, 122308, 94418,\n  27134, 1280, 24539, 49022, 45314, 3764, 50904, 46424, 30699, 28087, 293839, 9400, 33646, 40165, 822, 147499,\n  50263, 116179, 29085, 11863, 31314, 5578, 17797, 5104, 12454, 1604, 15342, 219206, 10232, 67800, 94261, 25872,\n  13565, 90339, 78971, 75377, 26649, 41184, 47695, 11514, 35369, 20767, 14227, 41953, 309396, 148270, 147938, 33074,\n  14453, 27499, 109019, 39018, 25738, 240196, 158931, 52820, 8612, 95853, 21524, 137010, 84901, 70869, 70021, 116794,\n  48404, 38771, 6732, 1070, 70990, 187297, 49140, 5238, 576, 3564, 253975, 16027, 16483, 2811, 37775, 19034,\n  25259, 4053, 2000, 70083, 95774, 19713, 33431, 92703, 91314, 42381, 288770, 48194, 95985, 3991, 77418, 13406,\n  241328, 245086, 56533, 35275, 62725, 9246, 51924, 70181, 95331, 16163, 31410, 79016, 39312, 120878, 119371, 275987,\n  80124, 27712, 9186, 220, 23598, 146167, 85209, 68238, 282190, 57048, 31273, 30555, 80913, 17594, 75779, 59160,\n  135002, 101219, 189377, 29225, 96735, 60126, 62522, 104000, 27620, 86814, 17240, 147533, 11001, 5425, 43682, 410,\n  49460, 87270, 69480, 46315, 59448, 1816, 76201, 9431, 11788, 87960, 29063, 65539, 47347, 11678, 33846, 7008,\n  196704, 9895, 6753, 8633, 120892, 59970, 572824, 115934, 6646, 202559, 892, 48351, 37611, 251282, 57823, 67263,\n  57750, 26527, 34485, 90747, 7685, 88370, 6144, 64182, 1709, 41969, 21458, 62327, 181657, 49247, 225330, 122600,\n  114574, 107124, 85361, 111833, 63243, 71420, 15655, 191178, 72430, 18063, 51425, 54002, 12364, 53225, 86557, 18193,\n  97580, 41232, 138398, 67821, 128724, 8944, 233212, 101353, 52099, 42127, 14006, 120107, 32789, 32132, 3498, 18123,\n  33758, 56058, 5779, 128760, 59888, 98869, 18445, 84702, 51911, 13234, 218379, 20093, 39031, 8074, 70195, 20708,\n  23462, 24355, 131384, 60189, 26390, 10403, 41060, 7140, 10781, 49410, 42261, 87202, 82566, 41663, 43105, 60276,\n  2768, 5733, 74176, 28329, 2297, 145430, 131632, 83615, 122915, 105441, 655, 224102, 5284, 136426, 67763, 16294,\n  188511, 32538, 61049, 27893, 3394, 13951, 159099, 28542, 17930, 145360, 9492, 190122, 32285, 78855, 26440, 13570,\n  58648, 73908, 4239, 124561, 2444, 74172, 53131, 11468, 10794, 73566, 11623, 35343, 64710, 30481, 4163, 10328,\n  38309, 29901, 10538, 154377, 76132, 92405, 24839, 11679, 3465, 13449, 11637, 7824, 2337, 57754, 1260, 14458,\n  41118, 19878, 38661, 13416, 159180, 37074, 163164, 54137, 28627, 52134, 184900, 8520, 40385, 29546, 30502, 22386,\n  66527, 107458, 6850, 24022, 47983, 30603, 35083, 8934, 304066, 39500, 9, 28261, 33026, 77251, 9374, 44833,\n  116312, 34990, 29236, 63563, 125639, 135405, 165398, 159055, 55690, 88141, 69643, 236964, 31983, 25572, 20436, 36746,\n  60896, 31850, 16179, 11828, 5888, 3043, 66368, 9750, 31167, 7915, 53111, 36430, 1333, 64344, 93659, 20061,\n  60596, 180191, 51630, 6792, 30244, 43509, 101058, 22409, 420, 44210, 109783, 43223, 27030, 72477, 72831, 32679,\n  29235, 7675, 47556, 12258, 39907, 149412, 84926, 118247, 24692, 71717, 105038, 86009, 45941, 41189, 89453, 29856,\n  52543, 30627, 226798, 67303, 59230, 67415, 34408, 1367, 99685, 16867, 128419, 52147, 4111, 125381, 117881, 16173,\n  44093, 102224, 31575, 23234, 24870, 83790, 127407, 239098, 3200, 994, 1255, 100903, 242275, 117266, 55116, 38205,\n  16140, 29662, 11307, 40414, 208793, 123355, 56470, 4862, 75600, 30119, 58218, 70828, 24075, 26974, 7802, 192353,\n  4851, 5475, 78720, 66596, 3409, 28573, 64396, 30381, 30690, 59859, 88256, 5406, 99945, 103064, 34463, 37727,\n  24238, 86643, 60088, 4057, 23741, 5967, 162904, 38240, 28356, 93858, 25510, 122879, 6897, 3278, 7057, 11971,\n  4400, 35461, 211413, 21395, 59615, 39471, 87233, 55795, 128426, 3051, 22470, 41950, 14705, 3974, 180108, 80476,\n  78442, 204996, 91987, 15634, 67610, 139015, 142373, 35611, 51134, 10387, 4353, 153456, 57749, 181039, 14183, 68447,\n  151532, 21107, 36452, 20551, 3186, 46247, 46383, 129666, 88736, 140662, 146243, 2066, 8360, 7978, 64818, 106963,\n  17896, 47801, 10723, 114821, 223295, 74192, 3293, 3393, 16987, 74064, 11277, 91622, 4270, 29828, 27951, 387869,\n  103235, 1374, 61988, 120083, 477, 145892, 128378, 11779, 211263, 61354, 18221, 17869, 46530, 83061, 108538, 157981,\n  90608, 67199, 95080, 49064, 195814, 12302, 66307, 10348, 231346, 160732, 112859, 63633, 146558, 21271, 31037, 198802,\n  47622, 12862, 95710, 3910, 77850, 73961, 85585, 34752, 61000, 4082, 24595, 103679, 71107, 8208, 79568, 150019,\n  16615, 24961, 139857, 32664, 197366, 4559, 54735, 32696, 4126, 162019, 75698, 13916, 70108, 159638, 19834, 9349,\n  24675, 175560, 49643, 18206, 52459, 27992, 10809, 88865, 401975, 133172, 29000, 34558, 30915, 3658, 25834, 42430,\n  36562, 125265, 18182, 10155, 40149, 97082, 208980, 19575, 60853, 90529, 66545, 9600, 789, 46420, 2317, 88593,\n  55595, 98980, 115302, 5742, 169155, 1073, 177901, 3472, 11189, 63711, 78643, 65472, 50459, 127979, 93, 42202,\n  67053, 21720, 157650, 11145, 141378, 42033, 22824, 85705, 79114, 35584, 15974, 1510, 54172, 28562, 12451, 104226,\n  19190, 97151, 73024, 20948, 5151, 81741, 21499, 29006, 84183, 198074, 54003, 45120, 170125, 26240, 35177, 28389,\n  64863, 79974, 60778, 176915, 232183, 45342, 2038, 80253, 41564, 40703, 32689, 5430, 100689, 5366, 23007, 134279,\n  14266, 26712, 73993, 24934, 64242, 52113, 102887, 61801, 46415, 201049, 54251, 62133, 122757, 164883, 30815, 139966,\n  2319, 30842, 766, 13362, 10287, 134518, 86111, 81665, 82440, 28333, 43019, 18963, 8804, 161944, 23439, 102144,\n  101145, 80029, 39052, 248708, 30350, 117340, 11878, 128467, 974, 138625, 63961, 5237, 74778, 61834, 67040, 43814,\n  13690, 65947, 33809, 232476, 115258, 181745, 28824, 94013, 9510, 10246, 93722, 81976, 7217, 114383, 3493, 16014,\n  69045, 72692, 12145, 80981, 9507, 6692, 1620, 60820, 330444, 35474, 33962, 4797, 7053, 295463, 46445, 27026,\n  12491, 77988, 49524, 35675, 90947, 29114, 166705, 101385, 133782, 32704, 6186, 84595, 176031, 185623, 45966, 151302,\n  63069, 1699, 107491, 947, 15458, 74452, 196212, 6046, 10498, 12163, 10239, 35191, 243951, 9277, 9090, 29539,\n  54460, 22820, 26514, 112549, 60372, 51753, 48756, 21812, 70861, 260326, 41, 44222, 10441, 16961, 48148, 138771,\n  216194, 5914, 52153, 53400, 212036, 56519, 26245, 10117, 45888, 15294, 138019, 90913, 26368, 43842, 42111, 23348,\n  6082, 194845, 161089, 156206, 51546, 11647, 30759, 302912, 262094, 8635, 78876, 26535, 35283, 54183, 31183, 85484,\n  147873, 12989, 5197, 6356, 72894, 65347, 20150, 27370, 73787, 1493, 45918, 12366, 190217, 20724, 13858, 10981,\n  67449, 81213, 7553, 14115, 72242, 271517, 11842, 48310, 88743, 143726, 22177, 3290, 243231, 58452, 62937, 12592,\n  1654, 40066, 33477, 13751, 9921, 128442, 15868, 7106, 75236, 83773, 10775, 36938, 10482, 170465, 17368, 17469,\n  161508, 32752, 98340, 800, 19824, 264456, 3901, 87319, 2867, 26782, 9630, 113102, 185815, 24197, 44584, 86366,\n  40224, 3636, 140916, 31731, 267731, 9567, 53678, 72984, 29389, 27963, 17106, 50282, 284911, 60170, 8322, 12608,\n  23374, 89652, 5268, 39044, 229766, 8869, 151350, 31436, 177342, 12269, 183212, 120418, 116270, 2843, 78888, 69192,\n  7865, 184099, 1086, 129897, 18383, 70508, 20242, 18508, 229924, 124569, 35749, 50589, 55626, 9884, 83115, 40971,\n  30671, 18135, 14452, 38861, 17844, 201826, 5549, 26413, 17189, 13561, 38539, 10679, 143331, 3314, 36785, 171194,\n  49685, 187713, 67506, 4618, 104039, 17060, 195080, 50648, 33159, 19238, 67559, 134840, 28599, 157523, 17130, 38064,\n  117398, 94355, 31918, 13575, 34538, 40326, 13997, 3494, 348283, 62481, 26862, 3603, 104426, 244363, 153709, 112487,\n  304612, 199674, 41239, 35545, 54869, 293005, 28223, 26277, 26899, 4533, 18518, 15492, 38587, 80488, 70485, 160395,\n  263, 60162, 11382, 222152, 4696, 250751, 51921, 182609, 10707, 48463, 46243, 1227, 49111, 111564, 46502, 33342,\n  56846, 68541, 63559, 858, 139927, 16654, 229375, 76759, 26478, 33205, 95828, 23399, 92945, 2637, 35630, 28470,\n  143992, 50214, 14174, 21456, 166191, 65665, 1711, 21594, 78019, 97599, 111701, 36, 147151, 110246, 189022, 43021,\n  30397, 40757, 131935, 42065, 73335, 48039, 26596, 28984, 15102, 2361, 7421, 202167, 69744, 43766, 52826, 3642,\n  83304, 33873, 75140, 63169, 192389, 36551, 92748, 13039, 123959, 233220, 21738, 84447, 77230, 20228, 187852, 19095,\n  25799, 92136, 108774, 29237, 53947, 2299, 118106, 2687, 8830, 42331, 202924, 33667, 2023, 73763, 30704, 19363,\n  19779, 16737, 35629, 48081, 24068, 101013, 162338, 291912, 13749, 24745, 328289, 167679, 70086, 48299, 23306, 16732,\n  17801, 43322, 54589, 3586, 63653, 43624, 53474, 925, 109177, 251316, 43805, 13082, 19511, 86565, 142182, 92461,\n  17117, 101033, 103319, 64589, 4022, 4351, 235897, 5352, 82705, 107142, 46391, 156084, 5860, 61365, 10558, 13045,\n  7717, 18357, 33922, 12590, 33065, 6928, 46993, 783, 46937, 67846, 8952, 26295, 6107, 119656, 18799, 17458,\n  50747, 4229, 179559, 112727, 118080, 20683, 41464, 125468, 51560, 49749, 44231, 7359, 35339, 62988, 136487, 67015,\n  5208, 29150, 24956, 105186, 48858, 6143, 18097, 6972, 16404, 73489, 58742, 97196, 36357, 164616, 5834, 32267,\n  13746, 147733, 15113, 132091, 34127, 106298, 39729, 106426, 22294, 9780, 15602, 36213, 71502, 42808, 66802, 599,\n  60755, 5851, 39120, 67363, 108623, 126368, 72770, 91263, 32486, 30596, 151717, 7951, 52002, 43103, 11768, 68942,\n  40901, 39344, 24037, 127500, 116890, 48403, 16926, 86750, 17745, 48648, 159545, 34460, 58419, 5634, 114317, 67865,\n  31462, 23352, 24010, 98185, 125708, 69686, 68337, 13610, 26271, 70691, 2980, 4768, 27225, 102402, 75453, 28106,\n  8104, 6931, 1176, 6274, 6475, 112635, 22498, 6176, 238686, 26832, 28893, 90319, 14441, 15682, 15087, 39517,\n  45270, 109134, 104440, 45965, 47645, 81772, 7876, 52683, 87720, 12898, 4505, 185665, 2769, 113401, 15664, 57592,\n  105229, 137381, 97059, 119268, 6876, 43309, 33886, 128363, 35476, 144249, 67013, 143587, 83367, 25703, 91436, 59347,\n  53236, 2289, 16519, 19844, 46309, 58558, 99834, 23313, 218816, 231303, 36388, 51333, 183535, 109792, 139277, 54306,\n  90139, 18235, 8275, 32710, 37677, 82464, 86025, 92204, 88842, 117723, 37570, 128723, 234242, 76350, 73795, 34896,\n  148247, 58424, 11105, 11744, 45746, 63372, 17118, 49772, 199520, 81902, 38004, 22911, 33752, 3125, 1995, 53792,\n  4689, 26909, 108150, 146062, 69674, 41811, 161444, 84855, 8999, 28561, 16731, 93937, 3189, 21967, 24890, 22943,\n  1356, 145300, 51569, 28802, 517, 118679, 31703, 40607, 48098, 108854, 25003, 10233, 73969, 177495, 5248, 24516,\n  215347, 146192, 48712, 60626, 69188, 40735, 5866, 586, 101541, 6509, 47590, 52129, 5969, 222045, 110933, 25733,\n  24223, 65339, 62812, 2414, 155418, 35819, 16022, 78423, 43138, 20995, 128255, 240673, 46745, 236093, 72176, 57085,\n  97841, 61248, 107, 36068, 193177, 105427, 55726, 215229, 20446, 47228, 100420, 87091, 14429, 121708, 23605, 21157,\n  187721, 21880, 2997, 203976, 99166, 95068, 25877, 7724, 98925, 83401, 4829, 13182, 18229, 13718, 239662, 38653,\n  116505, 153497, 30589, 89029, 38962, 181302, 43853, 78872, 180301, 4786, 248240, 7401, 106136, 112590, 77745, 19731,\n  60880, 77789, 125748, 135487, 5975, 48627, 34084, 12419, 215770, 47557, 254582, 10364, 106495, 21856, 67539, 88981,\n  38805, 21428, 48732, 42316, 12149, 16078, 52808, 25327, 51322, 33850, 51147, 12253, 122354, 46077, 56483, 254553,\n  115417, 81834, 150991, 94662, 86668, 7381, 12841, 100650, 18218, 15741, 22372, 68294, 50705, 15535, 84660, 61887,\n  22553, 72299, 31361, 24824, 17743, 46820, 64288, 31582, 77006, 111674, 116384, 30760, 80920, 86149, 77192, 51979,\n  79691, 60342, 122805, 103800, 240873, 160744, 233114, 78962, 54920, 8608, 3484, 316104, 72548, 24337, 5088, 230040,\n  21926, 10172, 36838, 26, 86221, 83458, 102176, 12062, 17571, 41929, 41170, 28428, 68239, 41750, 103930, 2634,\n  18313, 53019, 34825, 97837, 63115, 24606, 73157, 152474, 14715, 91439, 37033, 109806, 140259, 30668, 174760, 380,\n  135597, 95673, 136073, 65073, 134249, 13829, 17279, 122305, 4420, 46444, 10237, 64848, 203623, 70728, 10349, 182885,\n  65075, 24519, 25783, 40318, 34139, 22222, 63394, 55266, 102764, 41422, 20126, 65100, 90408, 53640, 35128, 48932,\n  11192, 38935, 96839, 34782, 39492, 19396, 41332, 6250, 5511, 19492, 51304, 25936, 104466, 54099, 73771, 86115,\n  5080, 7669, 30891, 111700, 13931, 25276, 72289, 135447, 14820, 258641, 25265, 31005, 281179, 75286, 393, 95359,\n  14623, 13584, 6680, 101227, 80173, 44933, 76666, 54542, 13244, 39348, 458, 25379, 109451, 134348, 81143, 6959,\n  65554, 12027, 51311, 8716, 57589, 140731, 28467, 23316, 17272, 30458, 25980, 55229, 77197, 83798, 28302, 114784,\n  7428, 34548, 26241, 14712, 39336, 103304, 18928, 54080, 12870, 334, 87722, 15208, 16895, 142098, 114262, 39820,\n  83913, 57817, 28682, 7721, 14900, 108672, 11250, 62246, 42849, 415188, 1724, 26555, 24549, 25505, 26443, 107450,\n  145899, 61035, 43528, 6901, 60726, 65906, 267741, 21338, 147590, 42079, 18924, 73017, 135236, 15393, 5206, 4026,\n  84185, 1531, 5988, 113890, 82647, 303391, 7386, 69844, 71611, 189865, 76523, 31877, 13315, 19314, 198575, 32821,\n  1928, 67641, 25913, 104475, 103489, 3297, 70391, 18406, 15446, 113347, 19295, 93790, 27856, 1792, 167471, 116449,\n  8541, 4408, 41757, 63233, 25765, 86680, 64501, 27034, 24816, 34975, 6079, 4486, 49693, 36229, 16917, 21581,\n  62426, 27862, 11612, 54284, 35702, 194034, 355, 24277, 48262, 87411, 70504, 310164, 118018, 12516, 47559, 43502,\n  57433, 107139, 9290, 66533, 80863, 14634, 34312, 91725, 28606, 21342, 67241, 72355, 43244, 375789, 37402, 174015,\n  105070, 8342, 44167, 67494, 1890, 16365, 11723, 271002, 1865, 47918, 8350, 45564, 27742, 25110, 125803, 8553,\n  49504, 81925, 62211, 4534, 15491, 19011, 80373, 206920, 667, 102405, 128623, 245524, 5553, 113309, 192739, 65766,\n  19567, 22832, 261958, 29679, 21293, 71134, 20962, 105123, 24721, 860, 21752, 33448, 18372, 157167, 94822, 35770,\n  173224, 232737, 75729, 28937, 46828, 28062, 25453, 5207, 140366, 36665, 30652, 6169, 67920, 150458, 92040, 23186,\n  184604, 92330, 20891, 176492, 49427, 27828, 38305, 42495, 143982, 49560, 25503, 90043, 29747, 65328, 47830, 12932,\n  11068, 77721, 9003, 25213, 94205, 140426, 46090, 89945, 138173, 192691, 33329, 112232, 129905, 35709, 27514, 1841,\n  19957, 31411, 127476, 53572, 17497, 173549, 55063, 175135, 19841, 69314, 5192, 237921, 117660, 150697, 4060, 273045,\n  50414, 98940, 65348, 153665, 164423, 58804, 156695, 48994, 213928, 86036, 28608, 8355, 39574, 34540, 16927, 135680,\n  18374, 151587, 10830, 53805, 16878, 16623, 4282, 48030, 8537, 14986, 46102, 13062, 72897, 72, 33050, 108227,\n  39451, 45935, 651, 113320, 40535, 95176, 57450, 48843, 5003, 19019, 10407, 211163, 3848, 1068, 4988, 32091,\n  30095, 41692, 15099, 43602, 107434, 50744, 7627, 171349, 16313, 150832, 352665, 207750, 33937, 38256, 51091, 156000,\n  87889, 90663, 84175, 24908, 114900, 50365, 31494, 83829, 5398, 169342, 47521, 54818, 18935, 8356, 43094, 41212,\n  174536, 10082, 92550, 6678, 60614, 23355, 69721, 14796, 34149, 128830, 58187, 3179, 208, 40325, 28399, 225029,\n  401412, 51150, 31580, 207268, 6657, 10993, 69818, 64282, 289845, 23308, 12961, 38447, 6681, 52944, 31855, 2572,\n  47646, 120728, 179148, 37240, 45196, 218274, 4816, 3695, 21961, 50084, 35209, 18073, 51452, 27004, 6100, 33941,\n  1377, 84831, 171214, 85, 141510, 9078, 99227, 32610, 6417, 11718, 49868, 65579, 87902, 73018, 49062, 46280,\n  61742, 21512, 40862, 107733, 15941, 29168, 157765, 144919, 14487, 5767, 158014, 140070, 7241, 573, 71584, 16921,\n  223566, 40331, 179473, 35081, 47926, 140885, 41508, 52104, 59180, 42310, 32811, 29048, 123517, 102413, 80208, 10104,\n  14746, 12649, 153641, 126022, 37965, 113017, 4171, 83, 142592, 2809, 6362, 50416, 71323, 116894, 260776, 16204,\n  1524, 5760, 30351, 12658, 20703, 54403, 36083, 45408, 74772, 4946, 14485, 50759, 111222, 10890, 2195, 167147,\n  92962, 130534, 16283, 177256, 35016, 15472, 210156, 151187, 73922, 117691, 43250, 52051, 37392, 24811, 24358, 30830,\n  5775, 818, 21969, 1476, 127322, 151783, 58392, 31021, 106913, 65215, 89407, 90802, 28531, 11690, 20234, 95249,\n  44602, 37256, 18707, 11928, 5161, 4410, 26571, 51903, 49768, 22008, 25252, 65780, 209499, 68769, 203726, 13249,\n  137363, 48845, 86823, 6658, 5674, 31881, 1083, 1823, 108676, 34518, 166752, 13791, 14287, 91576, 91429, 8665,\n  11529, 26401, 16191, 91972, 30964, 5254, 28486, 54697, 79613, 66520, 18447, 22870, 45203, 194466, 22822, 51703,\n  12278, 76716, 44595, 73455, 33546, 12235, 144843, 36154, 51247, 11116, 33040, 3180, 225753, 60864, 1972, 28469,\n  12891, 28879, 10338, 144157, 56294, 353058, 38302, 41447, 87532, 110616, 27065, 168438, 6557, 1213, 50804, 144643,\n  24817, 2390, 136531, 38174, 247513, 16190, 4059, 122791, 131994, 137430, 39506, 57650, 16305, 5188, 54309, 106128,\n  20628, 88071, 67394, 395446, 250285, 66176, 91254, 1399, 114196, 43915, 60230, 44853, 27206, 106353, 43013, 18733,\n  345105, 226453, 51202, 16607, 57106, 117175, 35492, 10476, 89598, 127439, 15187, 39624, 13688, 61570, 10615, 31111,\n  59370, 6238, 175252, 32143, 224492, 41388, 95408, 34384, 148238, 78307, 38959, 9340, 160091, 61443, 15737, 11216,\n  41244, 170, 38299, 102443, 113097, 26382, 14027, 33707, 3957, 76300, 66160, 19431, 18900, 6952, 1717, 108656,\n  82206, 188021, 257335, 27295, 43999, 41210, 31777, 46956, 57457, 12657, 11489, 15697, 48060, 204748, 53583, 82422,\n  284790, 30503, 137341, 8120, 19615, 220311, 15991, 10217, 63424, 9808, 67431, 70976, 98221, 4491, 15177, 28535,\n  144789, 751, 13230, 2394, 1504, 33977, 132104, 30316, 22230, 931, 97193, 185240, 24826, 22687, 174322, 15307,\n  22988, 1390, 188745, 180325, 29580, 59068, 74903, 18994, 29195, 79, 15436, 7622, 38462, 11566, 138710, 44828,\n  45774, 37768, 99236, 68137, 84083, 19282, 22698, 17134, 74807, 126662, 173497, 46248, 16938, 119735, 3212, 28292,\n  213652, 49013, 9975, 32180, 45660, 86250, 4801, 68788, 95490, 77482, 113751, 11994, 44624, 94452, 46839, 128497,\n  100316, 5798, 58588, 73184, 202987, 65417, 37790, 88524, 1606, 43156, 97964, 105717, 34947, 11203, 100060, 37742,\n  130074, 93653, 107799, 94311, 196106, 41347, 8035, 10780, 16390, 27883, 118236, 167395, 1979, 25006, 19375, 31628,\n  18916, 144723, 78502, 114047, 103107, 86492, 107686, 5844, 20934, 206963, 23556, 22591, 16562, 146333, 20167, 10471,\n  117434, 33085, 2863, 9740, 36669, 41849, 37271, 22790, 18209, 28979, 8231, 12952, 54408, 21731, 25130, 45208,\n  55748, 138120, 75826, 414, 29593, 9925, 292865, 25999, 683, 123149, 7036, 92159, 86055, 61827, 103680, 23176,\n  54918, 58466, 57578, 13305, 5709, 86479, 16697, 31064, 17660, 200919, 10770, 49793, 33423, 32370, 52047, 16488,\n  62555, 6459, 8426, 83493, 7763, 59725, 82812, 18628, 67760, 79405, 68557, 9612, 7673, 28102, 56517, 69620,\n  171797, 32458, 29541, 15870, 81109, 32080, 207644, 71495, 21202, 11039, 91036, 61230, 2810, 130800, 32260, 4613,\n  60590, 37112, 75214, 33979, 126402, 155062, 30642, 63875, 12810, 194463, 82799, 47664, 16725, 36685, 43367, 61099,\n  449, 172150, 102867, 21691, 301838, 36745, 7130, 18671, 57316, 34852, 38034, 54182, 35578, 65900, 99486, 19771,\n  3456, 2658, 16914, 99866, 28390, 28109, 8262, 21147, 34353, 20006, 4228, 137085, 1675, 203023, 283196, 198286,\n  214375, 163329, 290603, 152574, 40471, 83506, 30068, 14730, 23177, 131539, 34759, 27668, 32178, 71896, 104799, 116305,\n  85430, 119262, 42860, 25160, 8911, 23428, 49437, 105322, 6519, 16203, 6349, 74711, 1230, 38045, 8540, 75165,\n  44736, 25909, 51026, 317034, 4984, 32281, 91312, 27060, 44431, 17817, 45363, 155937, 239085, 35697, 59784, 91993,\n  29531, 126740, 213757, 76560, 167776, 285273, 24262, 8237, 65030, 41160, 74437, 48804, 118916, 13159, 37842, 1031,\n  75349, 1478, 11655, 108777, 23435, 277425, 101734, 67469, 70231, 124711, 43532, 28514, 65526, 54956, 1000, 21882,\n  17728, 25302, 40952, 52214, 149632, 1999, 2111, 3259, 63362, 89961, 220561, 39777, 26335, 9063, 10572, 12416,\n  34551, 34623, 38604, 24723, 5947, 15588, 69927, 66252, 119177, 69173, 46629, 28714, 70715, 212408, 20521, 406913,\n  74380, 11716, 50659, 50862, 37009, 88460, 130101, 7210, 53853, 538, 65120, 151950, 55806, 163748, 52837, 13153,\n  21100, 16674, 64536, 6091, 138201, 44837, 58547, 3723, 163, 2177, 32288, 85454, 34033, 8497, 14282, 25742,\n  10535, 10741, 79559, 117493, 243787, 49337, 100718, 79495, 40139, 42956, 7551, 55433, 15421, 31509, 23034, 45081,\n  547, 61176, 53434, 328001, 8470, 36263, 30145, 4519, 74173, 53935, 11845, 73774, 60211, 78025, 3, 4102,\n  73782, 109293, 315332, 48412, 26683, 13714, 6865, 20128, 18490, 104141, 325, 39470, 171970, 115860, 15707, 7268,\n  73301, 74336, 31370, 2368, 111827, 107757, 136231, 142844, 97138, 96638, 84053, 38691, 23801, 1588, 10573, 122098,\n  77039, 240, 186135, 146101, 11996, 18143, 112963, 46171, 155836, 348769, 47795, 121213, 116266, 132515, 3344, 144804,\n  31286, 99187, 255838, 129694, 35894, 48779, 55235, 148582, 71967, 65282, 15174, 13920, 47080, 6147, 108242, 157593,\n  125025, 7136, 1286, 28957, 127956, 28402, 98813, 20805, 7532, 109417, 40610, 5041, 32958, 15142, 18408, 108596,\n  33543, 50517, 27748, 80114, 233434, 91447, 487, 37094, 100048, 30541, 43477, 10639, 89862, 155868, 37667, 8726,\n  60684, 237903, 73408, 99589, 12190, 38739, 97348, 3914, 13594, 2680, 149016, 13907, 30171, 28343, 23530, 115225,\n  61104, 35821, 147679, 14337, 4297, 244282, 24085, 326976, 56428, 7851, 21303, 131620, 71446, 83253, 68692, 111870,\n  5224, 15813, 38197, 49026, 45057, 13660, 3306, 76345, 40671, 27905, 91072, 996, 68527, 62085, 91351, 122634,\n  55109, 168209, 2024, 27560, 112707, 17352, 8306, 167115, 169921, 166958, 5031, 46020, 11844, 67284, 19130, 76185,\n  6920, 32849, 5450, 14610, 22451, 21002, 17392, 31872, 66682, 84796, 13709, 40210, 59898, 12029, 8719, 53564,\n  21462, 91884, 21647, 88379, 194428, 12754, 37797, 132826, 160016, 22567, 54383, 53186, 77611, 31107, 8339, 4694,\n  19185, 90355, 23597, 17222, 140675, 28442, 23668, 55977, 9128, 61555, 28774, 155229, 17658, 9390, 24379, 69357,\n  15752, 127381, 239631, 62460, 93181, 55913, 45133, 140155, 18676, 25249, 33164, 29581, 82837, 67223, 22362, 29975,\n  7317, 52813, 1943, 29613, 20012, 207130, 49617, 49651, 5636, 15334, 36313, 29226, 28084, 95247, 72072, 19000,\n  224932, 15811, 114, 32127, 38097, 37508, 88507, 37225, 27359, 91626, 12193, 69279, 20608, 11055, 88156, 92808,\n  2152, 57259, 55275, 72789, 24475, 104414, 1708, 9882, 3818, 48661, 66897, 1631, 34806, 227930, 85815, 87753,\n  18321, 250664, 72733, 25107, 206797, 50891, 8082, 196411, 92596, 96764, 152823, 65514, 22819, 387277, 62176, 51225,\n  40329, 15563, 189, 3659, 73670, 64357, 51793, 275136, 33482, 86653, 74615, 67058, 11318, 125720, 15388, 22388,\n  8267, 1730, 102663, 170910, 40784, 7144, 85373, 13040, 7088, 94309, 583, 44224, 140424, 77439, 18496, 164026,\n  36578, 4722, 9151, 5824, 63365, 26510, 35199, 40500, 79277, 32495, 44614, 35233, 9566, 203293, 152144, 7097,\n  2330, 183480, 98629, 13423, 330887, 44130, 68600, 30939, 97829, 31012, 345465, 56747, 94879, 4939, 160027, 149761,\n  99423, 46099, 32251, 15332, 8761, 96094, 128555, 5763, 235318, 222223, 55729, 30241, 55420, 201746, 3987, 81382,\n  8259, 49325, 23287, 7719, 24633, 251100, 92311, 18591, 110533, 64759, 170260, 393860, 7175, 21144, 132887, 3593,\n  75346, 101277, 91109, 16387, 259187, 11627, 57459, 173829, 44694, 55780, 49797, 89192, 120443, 62622, 3904, 14814,\n  23887, 1027, 112258, 64955, 99800, 11132, 66353, 36202, 48624, 18158, 88481, 96882, 43059, 11040, 2455, 7077,\n  21651, 181159, 99126, 100434, 61388, 68186, 19161, 110468, 120052, 8819, 55324, 41494, 7014, 37689, 3618, 87729,\n  92615, 207943, 9823, 128657, 12587, 15857, 6379, 67628, 51216, 71775, 157617, 63244, 1503, 3864, 218754, 110864,\n  5769, 21492, 7243, 1192, 87921, 85529, 31512, 18537, 42698, 35350, 73510, 84474, 34301, 8991, 21013, 35034,\n  566, 38832, 19838, 35586, 37216, 39413, 55006, 12178, 59742, 856, 84563, 6900, 25632, 17437, 49786, 30723,\n  13847, 70845, 4044, 7843, 23944, 235976, 55530, 48942, 6518, 20939, 73769, 192653, 52936, 95207, 23895, 132542,\n  142982, 22632, 87452, 48042, 54018, 178468, 10728, 26230, 23559, 363, 81269, 142012, 5718, 346258, 31456, 84333,\n  246476, 51018, 66692, 101804, 120570, 39962, 30373, 70593, 2864, 60541, 19425, 54209, 104092, 7201, 31545, 48018,\n  25865, 15442, 46257, 40443, 8328, 6451, 111782, 47527, 97754, 33046, 470, 245116, 31095, 39, 91934, 87208,\n  73470, 36708, 36521, 12801, 70624, 36272, 8892, 79768, 12427, 55454, 103756, 5908, 52390, 62962, 22720, 141138,\n  94634, 41689, 128402, 126390, 6628, 106394, 35527, 134394, 82727, 254651, 194502, 148064, 89549, 3202, 28359, 957,\n  21954, 27906, 49840, 142747, 8307, 24206, 48978, 1186, 71728, 133038, 71474, 91306, 6333, 110959, 74600, 70387,\n  18983, 62609, 56057, 22970, 1147, 135850, 1321, 28834, 3578, 59715, 102227, 32827, 81415, 99952, 55636, 257598,\n  390, 22702, 35701, 85872, 402916, 39216, 189795, 14929, 19467, 10112, 144422, 61514, 5279, 63421, 134686, 41436,\n  8424, 51925, 10598, 132295, 124416, 4604, 194739, 210929, 57866, 31829, 51626, 50007, 9976, 91878, 61906, 56168,\n  81906, 60918, 61859, 40017, 23059, 16887, 40927, 62064, 12785, 32893, 32913, 21782, 93965, 20169, 44387, 79084,\n  38463, 11457, 93950, 27127, 157050, 2697, 337088, 5116, 54128, 48255, 33279, 8821, 27352, 25515, 124022, 65710,\n  28906, 38557, 33390, 1722, 104435, 72215, 38551, 12094, 30978, 25113, 6671, 37355, 175109, 42862, 98024, 65406,\n  221276, 59624, 118012, 64637, 78760, 86697, 21426, 1639, 40350, 12584, 67193, 84144, 31396, 7863, 143011, 69629,\n  63112, 9454, 28666, 65798, 46372, 134721, 6314, 51402, 30837, 151922, 2847, 38676, 38008, 92823, 136245, 17540,\n  5504, 109295, 205242, 37606, 5211, 214892, 1586, 20670, 208711, 137743, 19328, 40652, 16995, 20023, 14657, 154919,\n  34422, 12996, 13918, 38221, 47690, 16398, 2959, 37680, 89122, 6721, 198469, 91876, 172043, 83898, 101992, 26084,\n  94570, 3635, 76958, 22853, 76497, 38266, 176590, 168403, 44464, 142840, 79180, 184594, 1984, 41806, 83147, 11985,\n  6546, 366068, 59732, 24533, 271505, 8736, 39084, 222992, 93429, 28962, 58985, 86665, 8432, 30028, 14548, 32439,\n  54424, 165029, 55175, 27458, 69046, 121277, 46168, 33732, 20661, 24581, 135574, 123110, 37556, 79260, 72611, 16957,\n  12939, 46162, 58238, 44907, 72936, 253758, 41324, 32518, 96480, 11949, 124438, 65280, 43256, 34107, 53533, 43531,\n  37037, 28366, 45970, 32741, 173438, 6121, 194202, 62969, 26355, 30314, 58370, 28455, 1848, 50519, 82830, 90393,\n  21761, 295490, 10936, 256940, 133568, 44050, 20269, 4089, 27457, 21610, 219460, 36743, 14821, 101388, 52005, 13124,\n  30979, 140816, 167362, 26054, 18458, 60789, 34917, 40447, 26606, 33422, 9066, 3452, 83614, 5761, 20263, 137238,\n  25038, 91310, 101, 52322, 74548, 42572, 38084, 214054, 186568, 31802, 17665, 30620, 141936, 37730, 14420, 4265,\n  187218, 49640, 188208, 51441, 55388, 96452, 66659, 40869, 42039, 60967, 221027, 19234, 178581, 29105, 96050, 9165,\n  196118, 157335, 3738, 40354, 117436, 2965, 34136, 59659, 15570, 50843, 230035, 31444, 71260, 43886, 18316, 5387,\n  38500, 168508, 17406, 32174, 8828, 103373, 143806, 90367, 3560, 18719, 122310, 16508, 26719, 2541, 105429, 6645,\n  37998, 73190, 10591, 235916, 49737, 87112, 233941, 53188, 32193, 79154, 4544, 52905, 126477, 7580, 63501, 57314,\n  3216, 31337, 6541, 103083, 60846, 49, 9756, 15481, 1355, 43840, 14319, 13743, 27486, 10222, 73114, 230718,\n  418644, 16706, 6674, 279748, 23058, 45273, 295831, 86306, 2743, 5535, 88773, 21829, 35253, 120938, 31153, 3169,\n  16839, 42847, 8751, 80974, 33942, 36867, 35514, 16485, 26474, 77775, 56877, 5391, 48346, 3882, 108713, 31403,\n  27804, 55248, 26235, 43821, 136104, 40118, 175507, 28034, 203908, 18732, 1788, 34030, 106427, 36958, 54359, 7251,\n  44936, 15356, 69139, 455, 157915, 22173, 140291, 50348, 43275, 82066, 49621, 54952, 15216, 36226, 96695, 66855,\n  6936, 1987, 8227, 196087, 4631, 68827, 99004, 47541, 110265, 17953, 147605, 110242, 58520, 31312, 38724, 329975,\n  642, 3155, 34497, 75937, 6207, 73843, 6120, 17249, 51429, 117746, 3218, 910, 68961, 319671, 14938, 29555,\n  34700, 1649, 66673, 72268, 9655, 76800, 153087, 6941, 210168, 27130, 35398, 1780, 73242, 3135, 56689, 19556,\n  165307, 8765, 35967, 121458, 13333, 70453, 17350, 117253, 22265, 13340, 44265, 39869, 441, 3742, 135025, 23581,\n  33309, 16543, 17731, 13291, 157637, 283005, 21408, 101360, 63887, 52312, 83873, 5338, 233779, 23759, 186949, 34531,\n  177320, 38069, 156465, 91004, 19353, 59852, 68160, 14891, 1338, 1072, 29823, 1950, 28901, 81407, 313445, 73038,\n  84807, 162348, 240257, 37162, 138934, 16111, 58013, 41253, 102951, 16457, 96056, 19541, 56402, 67217, 41638, 94381,\n  89674, 29481, 37456, 80815, 151579, 13937, 13683, 132537, 19699, 134545, 67020, 29816, 222341, 141235, 427578, 48868,\n  129557, 233342, 23077, 87871, 16213, 18728, 16184, 9469, 37913, 19680, 2798, 171356, 178328, 13216, 50049, 72690,\n  71904, 124644, 55455, 7504, 29052, 41036, 266546, 19899, 30391, 188755, 8659, 59469, 16, 104298, 112943, 53865,\n  76203, 138226, 68857, 139953, 14125, 107625, 119795, 173133, 4398, 50273, 48808, 54390, 16466, 122086, 31835, 67035,\n  50971, 48859, 7508, 46427, 66477, 73021, 84615, 39985, 83076, 46779, 201569, 53336, 36443, 60865, 168164, 143810,\n  51393, 25548, 169307, 32896, 24485, 38424, 21837, 29087, 275813, 51674, 6714, 64883, 46169, 187369, 55186, 76192,\n  12852, 12018, 62134, 31067, 118303, 16542, 12125, 10579, 4928, 26291, 43854, 7091, 10946, 253716, 109062, 39283,\n  17261, 113012, 258512, 47764, 125126, 32646, 55892, 80279, 201623, 149872, 3192, 385, 1208, 48750, 5376, 58738,\n  22335, 5427, 82416, 47811, 32435, 143086, 38930, 94128, 59975, 156037, 37977, 38224, 62485, 7698, 50405, 71027,\n  16462, 21559, 136153, 34131, 107506, 162069, 63703, 3101, 215029, 40407, 4178, 3774, 9187, 80019, 17880, 97926,\n  67579, 2600, 18405, 8351, 47924, 86638, 70820, 92206, 86453, 29610, 42241, 119200, 3198, 15466, 67813, 57863,\n  35454, 4779, 99518, 4649, 104641, 144269, 33730, 38073, 65864, 6838, 109456, 193298, 154007, 5623, 45741, 30846,\n  182578, 25573, 157224, 1543, 58575, 138703, 146140, 44971, 49356, 18275, 59064, 20300, 13122, 11848, 24453, 11973,\n  9797, 86843, 2919, 25530, 49210, 1130, 161220, 76788, 75373, 85604, 34926, 36014, 17777, 17255, 51533, 11676,\n  92226, 51845, 119859, 21525, 5936, 18507, 28050, 1140, 31418, 14857, 34207, 47859, 10750, 36382, 32079, 106909,\n  59426, 87757, 38393, 110042, 15965, 97104, 33757, 35344, 97993, 53979, 33651, 45407, 41884, 82515, 173089, 7177,\n  58371, 35365, 47543, 51927, 35587, 10670, 23544, 29306, 84233, 39976, 76076, 62097, 9007, 8668, 28119, 78281,\n  120790, 19835, 143020, 54968, 18670, 64959, 20649, 34469, 42570, 33001, 136570, 87796, 120044, 1106, 58700, 63951,\n  127623, 12805, 83057, 40212, 31773, 49850, 7361, 54336, 347524, 101314, 23751, 19569, 48791, 29174, 49369, 20467,\n  7465, 75842, 38281, 623, 112457, 60210, 28849, 51003, 94720, 6426, 90047, 85560, 43761, 3579, 85105, 34607,\n  90410, 118528, 7224, 42907, 111163, 18168, 6960, 161135, 191298, 5247, 100584, 127552, 171568, 20121, 91173, 12636,\n  54615, 20199, 63730, 98105, 2396, 40387, 14438, 125012, 4765, 33235, 12865, 45299, 37728, 82098, 77872, 114037,\n  59253, 19675, 24838, 398016, 102561, 11446, 17069, 57508, 178277, 65836, 99941, 26114, 2585, 271882, 136866, 50126,\n  11027, 155648, 118367, 14585, 8910, 123015, 335383, 40434, 41016, 53021, 14439, 87098, 176860, 201543, 121888, 2358,\n  9286, 5739, 22666, 54270, 37884, 169381, 33984, 93859, 16124, 89364, 72207, 51639, 76366, 99029, 65812, 2198,\n  12147, 174891, 194289, 6986, 30252, 88822, 21284, 11445, 288337, 160821, 33034, 100869, 43852, 25761, 52882, 1144,\n  103809, 1924, 84458, 86079, 43411, 13542, 139276, 18141, 34978, 41298, 7276, 26481, 173800, 33210, 17951, 142652,\n  33616, 33677, 2210, 19941, 98568, 2486, 192414, 80136, 12058, 235883, 50963, 249638, 29572, 27221, 47034, 6124,\n  72107, 63346, 97620, 158513, 299699, 40388, 23235, 37176, 224244, 198386, 121323, 67992, 23827, 63170, 17838, 106622,\n  158590, 26807, 5345, 23489, 91891, 55474, 74834, 37981, 13058, 5977, 72552, 34706, 26828, 145172, 19904, 21367,\n  34043, 960, 77092, 91381, 4733, 47446, 7680, 41697, 5170, 16960, 14741, 46101, 13656, 473, 51842, 37433,\n  11103, 11551, 121951, 13191, 97536, 165932, 50397, 51628, 129028, 9069, 44885, 6590, 59195, 47045, 32940, 225472,\n  90345, 21833, 13303, 29407, 96615, 141951, 5198, 6028, 18395, 7181, 3861, 14966, 156358, 167182, 36529, 55253,\n  25942, 173153, 30959, 27261, 50691, 150176, 162201, 38467, 48462, 80602, 42163, 118482, 168, 108756, 26011, 17166,\n  54149, 456538, 22512, 91374, 13816, 90358, 131615, 18132, 226707, 1824, 28139, 26860, 42253, 93877, 77351, 65575,\n  8980, 80574, 22020, 27948, 40422, 91324, 76376, 13528, 39281, 91685, 82215, 122541, 144066, 1983, 193851, 17283,\n  26320, 2739, 194978, 4790, 26845, 42627, 61300, 65815, 174612, 55133, 4200, 191130, 79771, 158321, 52280, 166796,\n  221620, 62461, 11278, 4067, 88152, 83409, 31717, 121367, 13522, 47325, 37945, 10406, 174348, 249321, 154101, 64912,\n  29938, 51775, 17220, 15776, 166138, 78890, 84425, 54121, 42861, 16368, 24572, 291647, 10197, 32073, 22651, 11677,\n  97509, 26952, 35787, 18424, 41910, 71614, 94977, 72318, 41594, 70024, 275419, 37702, 60199, 7335, 39107, 61315,\n  18271, 18394, 33768, 87884, 104277, 123724, 7277, 56288, 71981, 189803, 49320, 3352, 6798, 14240, 8954, 69220,\n  94433, 57372, 28620, 68863, 193727, 85575, 42309, 41667, 67689, 42081, 22543, 44824, 12719, 28540, 114236, 101553,\n  27638, 27296, 4300, 5353, 4663, 19379, 94098, 3758, 95888, 95144, 80344, 87320, 28447, 259518, 12718, 71391,\n  152731, 37063, 24132, 31911, 104896, 15672, 103782, 1521, 4945, 72541, 23717, 122632, 15619, 87175, 206120, 29428,\n  189780, 61416, 28350, 44457, 972, 1175, 47233, 198738, 95789, 41907, 21953, 97034, 59341, 22864, 53713, 16873,\n  32971, 20693, 20954, 31336, 21477, 16169, 38370, 16412, 9019, 3841, 24599, 21938, 17085, 6484, 81198, 76413,\n  5849, 72514, 12320, 65247, 276175, 37234, 59796, 52642, 16312, 57349, 198507, 94148, 46134, 18958, 125552, 1747,\n  18725, 151873, 14901, 5490, 68287, 29470, 3689, 64794, 40814, 26018, 25692, 54450, 2703, 88278, 124886, 173087,\n  174000, 24159, 179477, 24276, 46004, 201876, 209202, 445, 52876, 31948, 30206, 157610, 39180, 18439, 44124, 50469,\n  5774, 96278, 222758, 200216, 50290, 45486, 20435, 46986, 46276, 140133, 142326, 15569, 13363, 47522, 92583, 2182,\n  7135, 16853, 22998, 30272, 4952, 63263, 35623, 39096, 53789, 44864, 20053, 110392, 124213, 4630, 16087, 28221,\n  127787, 25839, 77481, 44693, 13464, 113146, 6983, 27069, 55717, 50102, 4760, 7107, 26186, 66507, 59145, 36032,\n  104182, 71328, 29425, 64317, 50781, 47465, 94298, 69706, 74899, 22754, 120756, 25108, 93077, 56834, 73286, 39928,\n  16218, 41699, 176763, 7555, 70819, 50083, 26895, 23315, 26014, 16773, 123079, 41712, 5719, 31516, 90427, 158540,\n  85051, 183128, 40864, 27505, 55392, 9058, 45224, 96857, 30901, 136622, 96557, 56304, 120061, 11501, 151448, 5773,\n  89743, 7769, 86069, 2935, 18471, 41628, 10114, 33660, 110170, 49479, 26745, 92846, 33221, 26731, 18795, 87076,\n  8550, 2100, 29972, 120289, 3077, 72490, 33784, 2630, 208722, 50861, 63483, 79029, 6419, 39467, 14302, 45286,\n  64207, 9686, 67513, 44170, 1050, 77246, 59266, 17055, 53801, 7150, 11111, 42432, 4278, 94579, 362117, 36175,\n  42902, 41933, 39002, 98489, 22913, 74161, 84773, 57036, 17556, 162288, 74485, 178760, 93867, 73635, 128860, 50362,\n  261, 67455, 80001, 46080, 35662, 4368, 25247, 19230, 74393, 22588, 1822, 27682, 235324, 13798, 85998, 13194,\n  235067, 23514, 71669, 147632, 23191, 134748, 214683, 105101, 1518, 25489, 247114, 7380, 54842, 26922, 3971, 26361,\n  20844, 68642, 170517, 77339, 123255, 8963, 77818, 150998, 48466, 36806, 2732, 23261, 11741, 236162, 18243, 126216,\n  28690, 50546, 16385, 92760, 197383, 246558, 201295, 88255, 67588, 71687, 176076, 172653, 169058, 33906, 63747, 24835,\n  157621, 43338, 30050, 46152, 132741, 2770, 51371, 94835, 6614, 15112, 11749, 56936, 1250, 19027, 399017, 58036,\n  100215, 23388, 55815, 308768, 124152, 94803, 9521, 64186, 8971, 28, 30427, 62163, 7616, 103838, 35079, 29203,\n  131235, 7743, 17389, 10882, 37420, 61460, 228512, 85363, 41581, 131077, 62822, 119647, 10130, 54445, 26925, 19968,\n  29016, 24446, 74028, 24176, 61448, 67185, 9254, 8563, 119129, 9771, 99184, 37716, 39514, 10532, 221512, 258753,\n  218630, 55980, 23394, 32141, 61924, 66749, 32411, 3741, 36475, 26678, 77010, 44946, 91203, 128749, 116953, 20476,\n  49625, 53116, 13735, 102335, 29376, 51946, 83407, 67892, 59212, 34685, 21083, 1546, 112982, 32972, 74397, 1078,\n  190545, 16082, 86140, 58591, 89611, 101531, 10061, 105104, 76319, 20035, 17551, 52611, 169061, 190842, 100780, 23907,\n  90413, 115619, 9675, 34710, 193435, 49443, 129734, 11183, 258877, 16318, 136182, 126808, 44635, 27304, 192375, 2599,\n  125648, 47051, 12091, 23814, 721, 58800, 40137, 66726, 97930, 60877, 74487, 7942, 54326, 9841, 41428, 13762,\n  8211, 85383, 6950, 99177, 79806, 201786, 296464, 124087, 13144, 29741, 41721, 47634, 55088, 254286, 106408, 17041,\n  99064, 12942, 64086, 45233, 14005, 2612, 55827, 255, 7984, 13980, 38574, 12776, 46654, 73499, 249951, 2101,\n  26676, 25996, 132326, 116415, 119062, 50449, 31033, 23038, 11589, 179252, 20007, 14860, 129270, 21143, 17796, 144715,\n  60106, 70758, 69842, 34674, 282133, 44014, 16774, 57268, 38528, 24053, 46373, 201667, 28327, 471023, 51889, 102667,\n  21193, 114909, 84132, 69317, 96723, 67969, 16134, 68145, 15058, 28765, 32035, 2524, 101089, 98664, 25045, 76571,\n  14957, 86040, 118506, 262428, 154764, 81573, 39681, 283900, 73287, 127825, 544, 80448, 52347, 38512, 175971, 15180,\n  45467, 33086, 46552, 48894, 81107, 43213, 36672, 54025, 76703, 8053, 7608, 13299, 56619, 20752, 238099, 54164,\n  105133, 1444, 32942, 953, 37564, 8000, 66316, 119463, 106817, 404, 13667, 149108, 128597, 31267, 10269, 49836,\n  106150, 1484, 52330, 76965, 160486, 171648, 38456, 31263, 22424, 37738, 66245, 67467, 143369, 60471, 75610, 20895,\n  115528, 86070, 60854, 40796, 49347, 18989, 15030, 11371, 37578, 15779, 79867, 10187, 86462, 46402, 155626, 93200,\n  40229, 7090, 57547, 108053, 99598, 11088, 47505, 41218, 206017, 2173, 20988, 30219, 22919, 80563, 57566, 42369,\n  93141, 41675, 2407, 182519, 120495, 27154, 16702, 29456, 14349, 7958, 16688, 117177, 140375, 42467, 261919, 74916,\n  153569, 10836, 34742, 49526, 7621, 105997, 12212, 2270, 392377, 7755, 17959, 25086, 232152, 138791, 33847, 13860,\n  35316, 5811, 1344, 71259, 50452, 207539, 92635, 50359, 5821, 33674, 30255, 2086, 2587, 96264, 17543, 42,\n  6029, 9580, 43007, 139248, 82831, 12917, 29607, 25786, 51467, 42137, 85161, 100698, 31561, 88989, 121990, 278500,\n  3602, 109344, 37982, 15279, 116442, 28936, 30880, 87894, 58079, 128661, 126731, 67392, 28051, 146885, 4861, 16216,\n  97344, 42827, 147561, 153948, 22684, 21335, 47685, 1853, 43349, 15185, 59642, 10229, 25520, 187921, 108972, 5579,\n  98037, 24945, 6697, 19193, 63734, 137934, 75056, 89740, 19767, 224268, 56138, 63643, 151661, 39313, 70618, 84031,\n  89723, 84074, 13703, 85626, 35460, 8867, 64845, 3439, 57906, 99776, 63968, 49270, 81130, 34356, 16210, 23547,\n  36446, 34090, 140028, 72439, 2221, 22163, 57058, 363492, 113754, 18913, 95451, 48663, 54464, 54037, 176097, 68425,\n  3023, 34906, 29482, 117389, 341780, 80431, 58330, 16753, 92616, 60907, 94846, 147486, 4498, 48646, 7773, 46801,\n  7778, 18946, 464978, 47558, 33223, 177444, 7328, 15626, 63337, 94700, 11743, 9351, 255024, 39098, 16447, 42647,\n  96230, 39769, 58840, 10068, 63439, 35800, 65843, 58823, 413844, 9156, 51258, 7434, 61791, 85018, 6872, 3692,\n  28096, 7121, 33024, 6009, 75532, 31997, 192535, 9661, 3304, 9547, 14753, 31987, 25314, 55689, 15896, 20430,\n  39472, 31340, 99744, 25398, 115569, 54883, 28719, 205423, 23071, 57855, 64638, 149867, 25671, 82403, 37616, 20668,\n  39989, 77996, 74948, 140555, 175248, 64810, 36515, 46595, 4958, 248773, 24045, 28728, 136673, 168704, 20804, 114833,\n  100325, 27135, 21205, 96151, 153134, 45992, 7093, 13992, 76047, 1980, 19432, 145001, 75159, 87462, 17710, 1013,\n  45556, 34297, 144882, 20648, 26061, 11319, 129567, 108555, 18872, 464580, 33386, 22717, 65948, 167189, 5603, 135042,\n  79542, 8801, 202632, 18114, 91882, 5973, 5239, 67315, 4431, 60916, 47819, 71693, 32597, 32606, 18183, 45072,\n  80329, 76385, 24749, 51305, 40314, 156514, 14693, 130345, 13168, 66214, 18029, 12858, 34801, 27628, 14544, 10823,\n  40522, 40185, 33739, 148694, 23548, 9923, 61012, 28859, 17933, 19442, 34364, 99849, 164107, 141167, 30629, 21054,\n  6744, 36491, 8096, 42474, 41706, 155060, 30650, 10600, 163442, 1143, 96655, 61390, 52359, 7559, 51568, 64256,\n  203854, 4467, 22453, 14504, 436398, 7878, 6980, 8293, 63610, 293747, 16167, 35763, 19627, 147603, 15419, 18032,\n  110744, 51346, 33681, 54571, 40472, 48615, 39073, 21604, 13754, 173027, 92560, 11083, 47299, 63062, 11813, 52007,\n  29883, 9734, 139722, 15953, 1550, 20651, 13616, 49306, 16113, 90089, 92326, 7584, 30712, 72424, 164858, 6831,\n  152871, 55746, 197721, 34167, 196442, 6022, 112107, 55215, 7538, 123381, 4920, 43539, 77165, 8939, 50392, 34192,\n  20225, 79762, 22505, 58667, 40770, 29788, 97180, 82835, 4568, 8579, 13273, 363569, 35898, 49983, 436, 36598,\n  3237, 131691, 62418, 35591, 8101, 4073, 379438, 65218, 76072, 33887, 2968, 27573, 212619, 288680, 68278, 72851,\n  150504, 217896, 6913, 121339, 22017, 35340, 51072, 43616, 75043, 31437, 10833, 81487, 4364, 22968, 41454, 106687,\n  85446, 19863, 109625, 149241, 524, 141850, 214404, 54376, 657, 237023, 9401, 108137, 53800, 32474, 49712, 53334,\n  126876, 27337, 45552, 177696, 8269, 15036, 12097, 42240, 2328, 125374, 119295, 99715, 2500, 19624, 39441, 27220,\n  102691, 60957, 94543, 39101, 18566, 67362, 13975, 78230, 25017, 34017, 239007, 90027, 39351, 41681, 35354, 43822,\n  1043, 916, 58587, 141983, 94818, 38799, 75459, 41114, 67432, 16195, 36606, 59568, 22272, 126769, 31424, 68659,\n  12287, 134302, 257977, 5756, 207285, 95637, 47248, 117689, 19583, 77451, 22373, 12200, 54993, 117118, 34244, 29386,\n  34562, 53819, 71267, 64172, 77665, 49368, 7716, 59301, 25749, 45426, 194789, 17297, 2650, 1766, 32501, 45198,\n  20403, 20984, 6600, 14171, 94604, 19037, 5402, 29896, 9938, 59935, 109708, 88081, 145182, 44844, 39167, 352626,\n  164173, 35374, 45982, 6122, 154, 73419, 220487, 53834, 53601, 17992, 8609, 229321, 5610, 68098, 66815, 71012,\n  95069, 140968, 27396, 8957, 134489, 24656, 86659, 56598, 134852, 17316, 123838, 255436, 6613, 41610, 138033, 81452,\n  32023, 32396, 123687, 63398, 8693, 29712, 30407, 19296, 121188, 3551, 36099, 20032, 111948, 56624, 16547, 27453,\n  35916, 15378, 52039, 56849, 13489, 22214, 73177, 53097, 277349, 2157, 14029, 187886, 10260, 141743, 246460, 91880,\n  50869, 3788, 49486, 133566, 54950, 33120, 129337, 53768, 18333, 9525, 26902, 312251, 10297, 9020, 70759, 16647,\n  112432, 59260, 84609, 9818, 82766, 73569, 468, 46001, 75780, 55028, 52106, 11498, 43645, 108069, 17150, 17753,\n  29417, 16705, 31799, 9606, 289, 122254, 115975, 8620, 6133, 255357, 56908, 14456, 133464, 43554, 79224, 11247,\n  29630, 160, 12756, 25464, 65960, 350428, 62521, 321796, 100359, 67358, 35169, 46172, 113128, 48988, 88868, 31094,\n  33266, 6847, 60887, 98188, 49659, 69117, 92977, 220228, 13947, 80181, 35103, 62170, 97351, 13475, 2440, 199768,\n  19498, 36597, 46971, 25234, 67806, 62881, 84717, 73648, 181966, 10488, 94149, 21550, 26655, 63436, 48375, 14405,\n  165650, 9621, 24439, 28043, 42735, 4490, 29963, 56674, 45373, 1934, 262446, 50855, 67098, 26898, 5261, 52696,\n  40644, 33900, 9440, 180286, 87162, 22940, 19704, 26936, 69769, 10254, 101759, 27406, 12243, 48000, 73926, 113215,\n  54935, 5726, 192787, 4312, 106216, 9366, 11550, 52949, 23457, 212271, 277152, 133895, 108374, 6191, 96477, 29980,\n  218916, 58024, 54696, 40853, 91124, 65894, 91170, 65908, 252552, 6793, 29212, 15389, 44516, 122515, 52617, 35058,\n  9017, 103536, 39510, 49136, 19242, 130652, 662077, 74699, 47024, 31422, 8517, 73351, 24399, 13867, 128360, 4810,\n  4434, 61779, 111983, 61036, 17798, 110240, 59722, 102960, 39688, 10001, 23803, 23039, 176498, 56659, 44814, 134295,\n  17188, 77577, 74466, 226175, 102472, 154333, 63900, 111747, 18062, 41171, 79669, 32773, 408933, 42562, 28931, 30907,\n  107388, 43487, 2946, 240310, 23938, 24354, 319, 184983, 7927, 6488, 1422, 10790, 68809, 68209, 64775, 4361,\n  202, 17123, 59634, 51200, 44391, 18188, 17843, 2619, 74278, 3230, 9540, 47187, 21702, 36274, 56894, 43907,\n  16310, 34790, 16866, 6150, 5561, 13587, 107545, 108873, 126867, 86986, 28640, 33427, 19017, 5762, 80637, 17430,\n  46903, 2047, 131055, 25958, 13558, 5444, 47152, 13900, 44563, 122857, 45348, 70863, 39593, 54332, 38068, 33637,\n  318, 40310, 143467, 18502, 24520, 11377, 62013, 28942, 27246, 28269, 83545, 17999, 59015, 90707, 30065, 15161,\n  34720, 1263, 37008, 2012, 6060, 98575, 92933, 5721, 299, 199555, 24578, 29223, 2985, 743, 115825, 109523,\n  136657, 47454, 26378, 53586, 3733, 174945, 93340, 244456, 5693, 37386, 28782, 89767, 27545, 23573, 18798, 136425,\n  34320, 84778, 20041, 48453, 38215, 7477, 71958, 40621, 8773, 5874, 187927, 105965, 51100, 43533, 18083, 8443,\n  10180, 43597, 2003, 183999, 69689, 12216, 129696, 146188, 62389, 34044, 68410, 12765, 43273, 26949, 266807, 3345,\n  34477, 79197, 5688, 47539, 213110, 21634, 22257, 50092, 32222, 42346, 39530, 63668, 98, 134978, 74022, 5152,\n  59088, 174145, 37220, 9934, 9545, 118937, 5724, 87240, 19875, 15784, 40143, 23263, 87513, 181654, 285152, 37881,\n  263241, 4966, 43934, 10433, 186657, 6470, 74416, 225854, 25908, 142677, 246262, 32280, 6192, 75890, 45546, 143264,\n  135305, 29742, 47013, 77787, 11732, 126658, 8763, 37950, 21806, 57557, 113464, 89465, 108995, 164574, 23894, 22996,\n  23169, 15369, 23117, 17642, 130607, 40503, 36239, 280990, 44666, 9981, 40427, 147487, 26869, 168452, 32886, 32991,\n  46798, 240839, 15111, 70502, 65697, 88548, 44145, 28701, 48767, 31139, 206777, 35659, 181164, 166262, 14554, 171445,\n  31786, 66523, 76607, 17956, 6507, 31279, 90476, 116611, 167918, 6560, 1243, 115324, 80128, 41867, 55897, 187323,\n  37069, 32596, 189444, 145931, 13390, 105530, 65709, 26805, 6999, 55714, 41300, 22915, 68951, 22138, 21120, 22264,\n  10058, 19945, 33635, 56123, 99085, 10032, 5818, 6016, 46649, 57476, 35264, 94413, 112522, 262288, 93686, 83038,\n  14341, 23204, 28807, 66084, 77987, 6101, 126673, 7133, 38126, 5923, 122091, 170240, 97772, 46874, 215746, 43948,\n  41622, 3272, 55596, 8332, 146411, 251315, 13533, 8561, 81521, 115449, 48616, 175175, 2063, 186556, 3036, 134537,\n  75772, 29728, 82360, 22973, 186559, 86348, 89100, 38388, 82297, 45610, 2613, 87082, 9986, 177812, 57884, 23591,\n  47485, 42543, 33582, 44713, 74439, 257444, 252451, 31825, 35631, 38540, 33066, 5147, 13973, 4343, 51830, 70378,\n  22827, 26448, 95560, 36896, 241741, 48067, 203953, 298860, 61620, 20450, 3220, 67272, 6586, 107662, 100160, 108684,\n  6929, 57226, 4762, 7457, 1320, 40404, 77204, 99309, 62750, 208653, 59977, 44000, 74315, 34332, 5819, 172217,\n  64904, 114077, 18147, 84012, 1791, 98456, 90930, 21446, 116669, 103938, 7422, 85140, 59713, 5768, 326211, 16239,\n  75411, 13229, 29398, 10758, 236107, 1539, 112472, 95979, 152154, 151294, 306, 21196, 38146, 10700, 6891, 84282,\n  109646, 56492, 40539, 6589, 119491, 51354, 30685, 140209, 136906, 29622, 73617, 49553, 70525, 51671, 166869, 139616,\n  74395, 37439, 49595, 45678, 11959, 33211, 86560, 52434, 9282, 62690, 112155, 130810, 5243, 108261, 99970, 265613,\n  72551, 80049, 6391, 33365, 90721, 66737, 69872, 87011, 1860, 9032, 112544, 60905, 37371, 89015, 140351, 19076,\n  850, 373531, 2802, 36725, 218795, 72062, 28990, 16550, 24614, 7815, 6187, 26336, 33373, 32162, 42791, 73555,\n  32062, 23386, 10244, 56392, 49442, 27076, 136262, 12412, 14883, 1134, 33675, 97153, 199281, 15608, 100152, 74072,\n  47942, 254301, 36451, 16026, 10687, 65067, 56708, 254030, 30290, 50490, 13864, 57941, 259331, 35588, 23485, 43486,\n  24869, 21620, 92971, 22072, 88645, 1048, 182050, 13343, 32452, 14825, 19509, 3325, 216938, 45740, 99716, 189082,\n  53740, 78245, 25609, 24311, 176777, 47340, 308354, 40669, 66085, 14102, 125339, 9225, 128709, 97207, 1271, 200933,\n  78439, 113451, 88975, 18324, 46521, 11819, 18570, 141756, 72512, 170020, 52754, 63550, 118515, 103073, 93330, 32736,\n  50499, 14722, 31600, 68452, 398867, 29316, 172786, 18417, 104924, 2606, 5670, 84818, 16288, 67106, 59580, 82929,\n  607401, 291, 85829, 359, 15897, 35830, 50696, 65630, 52672, 22115, 356968, 29895, 40837, 231192, 34024, 38957,\n  26722, 406, 23335, 124952, 72068, 68804, 13268, 147101, 164740, 276569, 162596, 66943, 11569, 26654, 66358, 4777,\n  23229, 102127, 5848, 978, 2921, 59666, 5371, 28212, 90108, 42938, 39320, 2499, 4271, 108792, 33510, 125072,\n  71653, 65239, 38250, 66357, 38577, 13964, 86251, 35708, 50755, 36010, 29448, 12209, 3844, 38222, 206337, 100876,\n  67827, 137088, 14167, 252225, 84163, 195270, 1306, 5703, 54198, 779, 46802, 22028, 51124, 86759, 70560, 113164,\n  35685, 162145, 45471, 34561, 422, 2611, 6464, 47486, 19223, 38246, 9191, 18331, 89942, 243642, 212364, 15893,\n  17518, 22617, 6409, 30046, 126182, 59716, 36560, 104428, 18846, 26592, 19458, 50793, 147333, 30826, 1388, 27647,\n  10922, 14495, 33545, 19269, 135828, 39727, 41601, 46931, 233379, 49169, 131130, 182112, 16276, 82381, 118209, 142445,\n  128310, 19672, 28740, 82907, 33436, 3118, 102206, 28723, 24819, 41937, 38854, 5157, 3881, 111491, 1142, 9776,\n  421673, 152241, 29309, 14961, 87854, 6054, 15424, 3796, 82656, 54996, 2108, 55367, 239450, 154525, 9643, 118103,\n  106041, 64601, 68549, 48707, 30266, 25772, 18740, 9462, 229669, 91798, 112152, 191327, 14493, 72828, 8175, 66636,\n  236474, 25817, 87351, 129027, 76653, 20422, 22983, 71240, 27846, 44661, 12399, 46158, 77704, 53101, 35032, 11072,\n  17300, 109294, 33638, 24408, 1895, 11241, 760, 17584, 82479, 125877, 63150, 141075, 34259, 23274, 81698, 15732,\n  43577, 48340, 91584, 14688, 16379, 24481, 150280, 96420, 262050, 48635, 43727, 61819, 56268, 72003, 88178, 17281,\n  79912, 13218, 122519, 125295, 166396, 11811, 2171, 118930, 67746, 17636, 178278, 174656, 95661, 173039, 83845, 79689,\n  17473, 98555, 127696, 203415, 54730, 22925, 232239, 9309, 12136, 175026, 20740, 180188, 10747, 39816, 314017, 266131,\n  10040, 175732, 112550, 220651, 31974, 37393, 888, 23008, 86799, 4303, 64905, 148467, 75337, 251, 3284, 370102,\n  50264, 9835, 5438, 23655, 4481, 29851, 329, 12855, 7162, 64931, 78141, 12804, 42372, 296771, 83547, 18624,\n  34874, 86271, 3360, 48665, 77735, 88767, 11463, 63527, 28889, 22258, 29140, 194315, 113924, 25499, 6406, 31334,\n  1845, 4802, 49184, 43455, 35469, 127594, 92970, 61038, 115005, 38840, 87761, 106838, 8811, 20572, 55637, 11162,\n  96721, 132425, 108925, 2948, 125457, 36356, 3502, 75270, 27622, 127192, 2561, 123095, 49394, 61155, 16897, 110064,\n  9699, 89448, 53356, 19628, 220310, 21622, 83036, 9885, 112214, 6087, 26713, 17901, 161912, 91492, 3440, 68594,\n  9266, 92238, 8087, 6866, 150194, 72175, 80701, 13459, 31836, 43243, 239700, 95846, 44749, 50647, 21945, 230538,\n  120612, 132371, 244604, 5193, 105637, 34661, 41341, 68775, 85393, 1874, 8771, 33718, 49672, 77403, 595452, 99507,\n  6490, 58895, 128742, 7704, 39239, 73217, 43816, 62824, 37804, 199976, 22361, 80005, 87514, 94832, 14089, 4574,\n  139975, 59142, 75523, 100268, 43906, 53442, 15152, 2547, 186002, 17011, 19513, 204282, 3343, 60568, 128318, 119250,\n  4298, 51871, 41336, 71759, 21921, 45074, 98169, 145889, 99427, 11350, 1237, 5520, 28799, 7803, 53702, 21026,\n  136352, 38293, 128690, 12158, 90132, 44600, 10184, 26957, 39459, 126025, 78904, 82999, 59373, 39301, 150198, 120529,\n  153042, 20177, 50089, 14764, 271571, 30530, 123161, 38975, 101562, 22941, 5648, 124654, 109243, 69817, 71675, 49162,\n  106884, 21241, 107795, 30258, 16572, 188262, 141456, 7688, 60718, 8271, 11044, 32440, 104608, 103419, 236109, 93156,\n  43293, 128929, 42107, 67180, 25201, 115254, 185488, 130954, 72813, 167547, 20537, 39969, 38432, 22582, 184022, 1139,\n  27199, 5655, 17767, 97412, 122606, 209377, 27070, 35871, 326617, 188954, 42680, 73512, 80911, 22629, 3011, 95021,\n  315242, 157737, 383, 41821, 41808, 19335, 27950, 15674, 25677, 110950, 35375, 76835, 59108, 57370, 35262, 16569,\n  160415, 37706, 78086, 32041, 49691, 137143, 9782, 172080, 50148, 77917, 6323, 10110, 69172, 17711, 21795, 59511,\n  76184, 135114, 31046, 132319, 59105, 157578, 20549, 80778, 57649, 158421, 65143, 4575, 72235, 21899, 10797, 92745,\n  34035, 106079, 80159, 4508, 78304, 25350, 75457, 46458, 32937, 25623, 47, 8531, 104751, 84953, 8138, 36508,\n  187199, 66310, 115274, 13253, 32461, 38536, 1916, 42007, 187160, 35055, 26325, 84394, 35963, 94216, 45590, 97782\n]\n", "import { randomBytes } from '@libp2p/crypto'\nimport { peerIdFromMultihash } from '@libp2p/peer-id'\nimport { anySignal } from 'any-signal'\nimport length from 'it-length'\nimport { setMaxListeners } from 'main-event'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { xor as uint8ArrayXor } from 'uint8arrays/xor'\nimport { TABLE_REFRESH_INTERVAL, TABLE_REFRESH_QUERY_TIMEOUT } from '../constants.js'\nimport GENERATED_PREFIXES from './generated-prefix-list.js'\nimport type { RoutingTable } from './index.js'\nimport type { PeerRouting } from '../peer-routing/index.js'\nimport type { AbortOptions, ComponentLogger, Logger, PeerId } from '@libp2p/interface'\n\n/**\n * Cannot generate random KadIds longer than this + 1\n */\nconst MAX_COMMON_PREFIX_LENGTH = 15\n\nexport interface RoutingTableRefreshComponents {\n  logger: ComponentLogger\n}\n\nexport interface RoutingTableRefreshInit {\n  peerRouting: PeerRouting\n  routingTable: RoutingTable\n  logPrefix: string\n  refreshInterval?: number\n  refreshQueryTimeout?: number\n}\n\n/**\n * A wrapper around `k-bucket`, to provide easy store and\n * retrieval for peers.\n */\nexport class RoutingTableRefresh {\n  private readonly log: Logger\n  private readonly peerRouting: PeerRouting\n  private readonly routingTable: RoutingTable\n  private readonly refreshInterval: number\n  private readonly refreshQueryTimeout: number\n  private readonly commonPrefixLengthRefreshedAt: Date[]\n  private refreshTimeoutId?: ReturnType<typeof setTimeout>\n\n  constructor (components: RoutingTableRefreshComponents, init: RoutingTableRefreshInit) {\n    const { peerRouting, routingTable, refreshInterval, refreshQueryTimeout, logPrefix } = init\n    this.log = components.logger.forComponent(`${logPrefix}:routing-table:refresh`)\n    this.peerRouting = peerRouting\n    this.routingTable = routingTable\n    this.refreshInterval = refreshInterval ?? TABLE_REFRESH_INTERVAL\n    this.refreshQueryTimeout = refreshQueryTimeout ?? TABLE_REFRESH_QUERY_TIMEOUT\n    this.commonPrefixLengthRefreshedAt = []\n\n    this.refreshTable = this.refreshTable.bind(this)\n  }\n\n  async afterStart (): Promise<void> {\n    this.log(`refreshing routing table every ${this.refreshInterval}ms`)\n    this.refreshTable(true)\n  }\n\n  async stop (): Promise<void> {\n    if (this.refreshTimeoutId != null) {\n      clearTimeout(this.refreshTimeoutId)\n    }\n  }\n\n  /**\n   * To speed lookups, we seed the table with random PeerIds. This means\n   * when we are asked to locate a peer on the network, we can find a KadId\n   * that is close to the requested peer ID and query that, then network\n   * peers will tell us who they know who is close to the fake ID\n   */\n  refreshTable (force: boolean = false, options?: AbortOptions): void {\n    this.log('refreshing routing table')\n\n    const prefixLength = this._maxCommonPrefix()\n    const refreshCommonPrefixLengths = this._getTrackedCommonPrefixLengthsForRefresh(prefixLength)\n\n    this.log(`max common prefix length ${prefixLength}`)\n    this.log(`tracked CPLs [ ${refreshCommonPrefixLengths.map(date => date.toISOString()).join(', ')} ]`)\n\n    /**\n     * If we see a gap at a common prefix length in the Routing table, we ONLY refresh up until\n     * the maximum cpl we have in the Routing Table OR (2 * (Cpl+ 1) with the gap), whichever\n     * is smaller.\n     *\n     * This is to prevent refreshes for common-prefix-lengths that have no peers in the network but happen to be\n     * before a very high max common-prefix-length for which we do have peers in the network.\n     *\n     * The number of 2 * (common-prefix-length + 1) can be proved and a proof would have been written here if\n     * the programmer had paid more attention in the Math classes at university.\n     *\n     * So, please be patient and a doc explaining it will be published soon.\n     *\n     * https://github.com/libp2p/go-libp2p-kad-dht/commit/2851c88acb0a3f86bcfe3cfd0f4604a03db801d8#diff-ad45f4ba97ffbc4083c2eb87a4420c1157057b233f048030d67c6b551855ccf6R219\n     */\n    Promise.all(\n      refreshCommonPrefixLengths.map(async (lastRefresh, index) => {\n        try {\n          await this._refreshCommonPrefixLength(index, lastRefresh, force, options)\n\n          if (this._numPeersForCpl(prefixLength) === 0) {\n            const lastCpl = Math.min(2 * (index + 1), refreshCommonPrefixLengths.length - 1)\n\n            for (let n = index + 1; n < lastCpl + 1; n++) {\n              try {\n                await this._refreshCommonPrefixLength(n, lastRefresh, force, options)\n              } catch (err: any) {\n                this.log.error(err)\n              }\n            }\n          }\n        } catch (err: any) {\n          this.log.error(err)\n        }\n      })\n    ).catch(err => {\n      this.log.error(err)\n    }).then(() => {\n      this.refreshTimeoutId = setTimeout(this.refreshTable, this.refreshInterval)\n\n      if (this.refreshTimeoutId.unref != null) {\n        this.refreshTimeoutId.unref()\n      }\n    }).catch(err => {\n      this.log.error(err)\n    })\n  }\n\n  async _refreshCommonPrefixLength (cpl: number, lastRefresh: Date, force: boolean, options?: AbortOptions): Promise<void> {\n    if (!force && lastRefresh.getTime() > (Date.now() - this.refreshInterval)) {\n      this.log('not running refresh for cpl %s as time since last refresh not above interval', cpl)\n      return\n    }\n\n    // gen a key for the query to refresh the cpl\n    const peerId = this._generateRandomPeerId(cpl)\n\n    this.log('starting refreshing cpl %s with key %p (routing table size was %s)', cpl, peerId, this.routingTable.size)\n\n    const signal = anySignal([options?.signal, AbortSignal.timeout(this.refreshQueryTimeout)])\n    setMaxListeners(Infinity, signal)\n\n    try {\n      const peers = await length(this.peerRouting.getClosestPeers(peerId.toMultihash().bytes, {\n        signal\n      }))\n\n      this.log(`found ${peers} peers that were close to imaginary peer %p`, peerId)\n      this.log('finished refreshing cpl %s with key %p (routing table size is now %s)', cpl, peerId, this.routingTable.size)\n    } finally {\n      signal.clear()\n    }\n  }\n\n  _getTrackedCommonPrefixLengthsForRefresh (maxCommonPrefix: number): Date[] {\n    if (maxCommonPrefix > MAX_COMMON_PREFIX_LENGTH) {\n      maxCommonPrefix = MAX_COMMON_PREFIX_LENGTH\n    }\n\n    const dates: Date[] = []\n\n    for (let i = 0; i <= maxCommonPrefix; i++) {\n      // defaults to the zero value if we haven't refreshed it yet.\n      dates[i] = this.commonPrefixLengthRefreshedAt[i] ?? new Date()\n    }\n\n    return dates\n  }\n\n  _generateRandomPeerId (targetCommonPrefixLength: number): PeerId {\n    if (this.routingTable.kb == null) {\n      throw new Error('Routing table not started')\n    }\n\n    if (this.routingTable.kb.localPeer == null) {\n      throw new Error('Local peer not set')\n    }\n\n    const randomData = randomBytes(2)\n    const randomUint16 = (randomData[1] << 8) + randomData[0]\n\n    const key = this._makePeerId(this.routingTable.kb.localPeer.kadId, randomUint16, targetCommonPrefixLength)\n    const multihash = Digest.decode(key)\n\n    return peerIdFromMultihash(multihash)\n  }\n\n  _makePeerId (localKadId: Uint8Array, randomPrefix: number, targetCommonPrefixLength: number): Uint8Array {\n    if (targetCommonPrefixLength > MAX_COMMON_PREFIX_LENGTH) {\n      throw new Error(`Cannot generate peer ID for common prefix length greater than ${MAX_COMMON_PREFIX_LENGTH}`)\n    }\n\n    const view = new DataView(localKadId.buffer, localKadId.byteOffset, localKadId.byteLength)\n    const localPrefix = view.getUint16(0, false)\n\n    // For host with ID `L`, an ID `K` belongs to a bucket with ID `B` ONLY IF CommonPrefixLen(L,K) is EXACTLY B.\n    // Hence, to achieve a targetPrefix `T`, we must toggle the (T+1)th bit in L & then copy (T+1) bits from L\n    // to our randomly generated prefix.\n    const toggledLocalPrefix = localPrefix ^ (0x8000 >> targetCommonPrefixLength)\n\n    // Combine the toggled local prefix and the random bits at the correct offset\n    // such that ONLY the first `targetCommonPrefixLength` bits match the local ID.\n    const mask = 65535 << (16 - (targetCommonPrefixLength + 1))\n    const targetPrefix = (toggledLocalPrefix & mask) | (randomPrefix & ~mask)\n\n    // Convert to a known peer ID.\n    const keyPrefix = GENERATED_PREFIXES[targetPrefix]\n\n    const keyBuffer = new ArrayBuffer(34)\n    const keyView = new DataView(keyBuffer, 0, keyBuffer.byteLength)\n    keyView.setUint8(0, sha256.code)\n    keyView.setUint8(1, 32)\n    keyView.setUint32(2, keyPrefix, false)\n\n    return new Uint8Array(keyView.buffer, keyView.byteOffset, keyView.byteLength)\n  }\n\n  /**\n   * returns the maximum common prefix length between any peer in the table\n   * and the current peer\n   */\n  _maxCommonPrefix (): number {\n    // xor our KadId with every KadId in the k-bucket tree,\n    // return the longest id prefix that is the same\n    let prefixLength = 0\n\n    for (const length of this._prefixLengths()) {\n      if (length > prefixLength) {\n        prefixLength = length\n      }\n    }\n\n    return prefixLength\n  }\n\n  /**\n   * Returns the number of peers in the table with a given prefix length\n   */\n  _numPeersForCpl (prefixLength: number): number {\n    let count = 0\n\n    for (const length of this._prefixLengths()) {\n      if (length === prefixLength) {\n        count++\n      }\n    }\n\n    return count\n  }\n\n  /**\n   * Yields the common prefix length of every peer in the table\n   */\n  * _prefixLengths (): Generator<number> {\n    if (this.routingTable.kb?.localPeer == null) {\n      return\n    }\n\n    for (const { kadId } of this.routingTable.kb.toIterable()) {\n      const distance = uint8ArrayXor(this.routingTable.kb.localPeer.kadId, kadId)\n      let leadingZeros = 0\n\n      for (const byte of distance) {\n        if (byte === 0) {\n          leadingZeros++\n        } else {\n          break\n        }\n      }\n\n      yield leadingZeros\n    }\n  }\n}\n", "import { InvalidMessageError } from '@libp2p/interface'\nimport { peerIdFromMultihash } from '@libp2p/peer-id'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { CID } from 'multiformats/cid'\nimport * as Digest from 'multiformats/hashes/digest'\nimport type { Message } from '../../message/dht.js'\nimport type { Providers } from '../../providers.js'\nimport type { DHTMessageHandler } from '../index.js'\nimport type { ComponentLogger, Logger, PeerId, PeerStore } from '@libp2p/interface'\n\nexport interface AddProviderComponents {\n  peerId: PeerId\n  peerStore: PeerStore\n  logger: ComponentLogger\n}\n\nexport interface AddProviderHandlerInit {\n  providers: Providers\n  logPrefix: string\n}\n\nexport class AddProviderHandler implements DHTMessageHandler {\n  private readonly peerId: PeerId\n  private readonly providers: Providers\n  private readonly peerStore: PeerStore\n  private readonly log: Logger\n\n  constructor (components: AddProviderComponents, init: AddProviderHandlerInit) {\n    this.log = components.logger.forComponent(`${init.logPrefix}:rpc:handlers:add-provider`)\n    this.peerId = components.peerId\n    this.providers = init.providers\n    this.peerStore = components.peerStore\n  }\n\n  async handle (peerId: PeerId, msg: Message): Promise<Message | undefined> {\n    if (msg.key == null || msg.key.length === 0) {\n      throw new InvalidMessageError('Missing key')\n    }\n\n    let cid: CID\n    try {\n      // this is actually just the multihash, not the whole CID\n      cid = CID.decode(msg.key)\n    } catch (err: any) {\n      throw new InvalidMessageError('Invalid CID')\n    }\n\n    if (msg.providers == null || msg.providers.length === 0) {\n      this.log.error('no providers found in message')\n    }\n\n    this.log('%p asked us, %p to store provider record for for %c', peerId, this.peerId, cid)\n\n    await Promise.all(\n      msg.providers.map(async (pi) => {\n        const digest = Digest.decode(pi.id)\n        const providerId = peerIdFromMultihash(digest)\n        const providerMultiaddrs = pi.multiaddrs.map(buf => multiaddr(buf))\n\n        // Ignore providers not from the originator\n        if (!peerId.equals(providerId)) {\n          this.log('invalid provider peer %p from %p', pi.id, peerId)\n          return\n        }\n\n        if (pi.multiaddrs.length < 1) {\n          this.log('no valid addresses for provider %p. Ignore', peerId)\n          return\n        }\n\n        this.log.trace('received provider %p for %s (addrs %s)', peerId, cid, providerMultiaddrs)\n\n        await this.providers.addProvider(cid, providerId)\n        await this.peerStore.merge(providerId, {\n          multiaddrs: providerMultiaddrs\n        })\n      })\n    )\n\n    return undefined\n  }\n}\n", "import { InvalidMessageError } from '@libp2p/interface'\nimport { protocols } from '@multiformats/multiaddr'\nimport { equals as uint8ArrayEquals } from 'uint8arrays'\nimport { MessageType } from '../../message/dht.js'\nimport type { PeerInfoMapper } from '../../index.js'\nimport type { Message } from '../../message/dht.js'\nimport type { PeerRouting } from '../../peer-routing/index.js'\nimport type { DHTMessageHandler } from '../index.js'\nimport type { ComponentLogger, Logger, PeerId, PeerInfo } from '@libp2p/interface'\nimport type { AddressManager } from '@libp2p/interface-internal'\n\nexport interface FindNodeHandlerInit {\n  peerRouting: PeerRouting\n  logPrefix: string\n  peerInfoMapper: PeerInfoMapper\n}\n\nexport interface FindNodeHandlerComponents {\n  peerId: PeerId\n  addressManager: AddressManager\n  logger: ComponentLogger\n}\n\nexport class FindNodeHandler implements DHTMessageHandler {\n  private readonly peerRouting: PeerRouting\n  private readonly peerInfoMapper: PeerInfoMapper\n  private readonly peerId: PeerId\n  private readonly addressManager: AddressManager\n  private readonly log: Logger\n\n  constructor (components: FindNodeHandlerComponents, init: FindNodeHandlerInit) {\n    const { peerRouting, logPrefix } = init\n\n    this.log = components.logger.forComponent(`${logPrefix}:rpc:handlers:find-node`)\n    this.peerId = components.peerId\n    this.addressManager = components.addressManager\n    this.peerRouting = peerRouting\n    this.peerInfoMapper = init.peerInfoMapper\n  }\n\n  /**\n   * Process `FindNode` DHT messages\n   */\n  async handle (peerId: PeerId, msg: Message): Promise<Message> {\n    this.log('incoming request from %p for peers close to %b', peerId, msg.key)\n    try {\n      if (msg.key == null) {\n        throw new InvalidMessageError('Invalid FIND_NODE message received - key was missing')\n      }\n\n      const closer: PeerInfo[] = await this.peerRouting.getClosestPeersOffline(msg.key, {\n        exclude: [\n        // never tell a peer about itself\n          peerId,\n\n          // do not include the server in the results\n          this.peerId\n        ]\n      })\n\n      if (uint8ArrayEquals(this.peerId.toMultihash().bytes, msg.key)) {\n        closer.push({\n          id: this.peerId,\n          multiaddrs: this.addressManager.getAddresses().map(ma => ma.decapsulateCode(protocols('p2p').code))\n        })\n      }\n\n      const response: Message = {\n        type: MessageType.FIND_NODE,\n        clusterLevel: msg.clusterLevel,\n        closer: closer\n          .map(this.peerInfoMapper)\n          .filter(({ multiaddrs }) => multiaddrs.length)\n          .map(peerInfo => ({\n            id: peerInfo.id.toMultihash().bytes,\n            multiaddrs: peerInfo.multiaddrs.map(ma => ma.bytes)\n          })),\n        providers: []\n      }\n\n      if (response.closer.length === 0) {\n        this.log('could not find any peers closer to %b for %p', msg.key, peerId)\n      } else {\n        this.log('found %d peers close to %b for %p', response.closer.length, msg.key, peerId)\n      }\n\n      return response\n    } catch (err: any) {\n      this.log('error during finding peers closer to %b for %p - %e', msg.key, peerId, err)\n      throw err\n    }\n  }\n}\n", "import { InvalidMessageError } from '@libp2p/interface'\nimport all from 'it-all'\nimport map from 'it-map'\nimport { CID } from 'multiformats/cid'\nimport { MessageType } from '../../message/dht.js'\nimport type { PeerInfoMapper } from '../../index.js'\nimport type { Message } from '../../message/dht.js'\nimport type { PeerRouting } from '../../peer-routing/index.js'\nimport type { Providers } from '../../providers.js'\nimport type { DHTMessageHandler } from '../index.js'\nimport type { ComponentLogger, Logger, PeerId, PeerInfo, PeerStore } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport interface GetProvidersHandlerInit {\n  peerRouting: PeerRouting\n  providers: Providers\n  logPrefix: string\n  peerInfoMapper: PeerInfoMapper\n}\n\nexport interface GetProvidersHandlerComponents {\n  peerId: PeerId\n  peerStore: PeerStore\n  logger: ComponentLogger\n}\n\nexport class GetProvidersHandler implements DHTMessageHandler {\n  private readonly peerId: PeerId\n  private readonly peerRouting: PeerRouting\n  private readonly providers: Providers\n  private readonly peerStore: PeerStore\n  private readonly peerInfoMapper: PeerInfoMapper\n  private readonly log: Logger\n\n  constructor (components: GetProvidersHandlerComponents, init: GetProvidersHandlerInit) {\n    const { peerRouting, providers, logPrefix } = init\n\n    this.log = components.logger.forComponent(`${logPrefix}:rpc:handlers:get-providers`)\n    this.peerId = components.peerId\n    this.peerStore = components.peerStore\n    this.peerRouting = peerRouting\n    this.providers = providers\n    this.peerInfoMapper = init.peerInfoMapper\n  }\n\n  async handle (peerId: PeerId, msg: Message): Promise<Message> {\n    if (msg.key == null) {\n      throw new InvalidMessageError('Invalid GET_PROVIDERS message received - key was missing')\n    }\n\n    let cid\n    try {\n      cid = CID.decode(msg.key)\n    } catch (err: any) {\n      throw new InvalidMessageError('Invalid CID')\n    }\n\n    this.log('%p asking for providers for %s', peerId, cid)\n\n    const [providerPeers, closerPeers] = await Promise.all([\n      all(map(await this.providers.getProviders(cid), async (peerId) => {\n        const peer = await this.peerStore.get(peerId)\n        const info: PeerInfo = {\n          id: peer.id,\n          multiaddrs: peer.addresses.map(({ multiaddr }) => multiaddr)\n        }\n\n        return info\n      })),\n      this.peerRouting.getClosestPeersOffline(msg.key)\n    ])\n\n    const response: Message = {\n      type: MessageType.GET_PROVIDERS,\n      key: msg.key,\n      clusterLevel: msg.clusterLevel,\n      closer: closerPeers\n        .map(this.peerInfoMapper)\n        .filter(({ id, multiaddrs }) => multiaddrs.length > 0)\n        .map(peerInfo => ({\n          id: peerInfo.id.toMultihash().bytes,\n          multiaddrs: peerInfo.multiaddrs.map(ma => ma.bytes)\n        })),\n      providers: providerPeers\n        .map(this.peerInfoMapper)\n        .filter(({ id, multiaddrs }) => multiaddrs.length > 0)\n        .map(peerInfo => ({\n          id: peerInfo.id.toMultihash().bytes,\n          multiaddrs: peerInfo.multiaddrs.map(ma => ma.bytes)\n        }))\n    }\n\n    this.log('got %s providers %s closerPeers', response.providers.length, response.closer.length)\n\n    return response\n  }\n\n  async _getAddresses (peerId: PeerId): Promise<Multiaddr[]> {\n    return []\n  }\n}\n", "import { publicKeyToProtobuf } from '@libp2p/crypto/keys'\nimport { InvalidMessageError, NotFoundError } from '@libp2p/interface'\nimport { Libp2pRecord } from '@libp2p/record'\nimport {\n  MAX_RECORD_AGE\n} from '../../constants.js'\nimport { MessageType } from '../../message/dht.js'\nimport { bufferToRecordKey, isPublicKeyKey, fromPublicKeyKey } from '../../utils.js'\nimport type { Message } from '../../message/dht.js'\nimport type { PeerRouting } from '../../peer-routing/index.js'\nimport type { DHTMessageHandler } from '../index.js'\nimport type { ComponentLogger, Logger, PeerId, PeerStore } from '@libp2p/interface'\nimport type { Datastore } from 'interface-datastore'\n\nexport interface GetValueHandlerInit {\n  peerRouting: PeerRouting\n  logPrefix: string\n  datastorePrefix: string\n}\n\nexport interface GetValueHandlerComponents {\n  peerStore: PeerStore\n  datastore: Datastore\n  logger: ComponentLogger\n}\n\nexport class GetValueHandler implements DHTMessageHandler {\n  private readonly peerStore: PeerStore\n  private readonly datastore: Datastore\n  private readonly peerRouting: PeerRouting\n  private readonly log: Logger\n  private readonly datastorePrefix: string\n\n  constructor (components: GetValueHandlerComponents, init: GetValueHandlerInit) {\n    this.log = components.logger.forComponent(`${init.logPrefix}:rpc:handlers:get-value`)\n    this.datastorePrefix = `${init.datastorePrefix}/record`\n    this.peerStore = components.peerStore\n    this.datastore = components.datastore\n    this.peerRouting = init.peerRouting\n  }\n\n  async handle (peerId: PeerId, msg: Message): Promise<Message> {\n    const key = msg.key\n\n    this.log('%p asked for key %b', peerId, key)\n\n    if (key == null || key.length === 0) {\n      throw new InvalidMessageError('Invalid key')\n    }\n\n    const response: Message = {\n      type: MessageType.GET_VALUE,\n      key,\n      clusterLevel: msg.clusterLevel,\n      closer: [],\n      providers: []\n    }\n\n    if (isPublicKeyKey(key)) {\n      this.log('is public key')\n      const idFromKey = fromPublicKeyKey(key)\n      let pubKey: Uint8Array | undefined\n\n      try {\n        const peer = await this.peerStore.get(idFromKey)\n\n        if (peer.id.publicKey == null) {\n          throw new NotFoundError('No public key found in key book')\n        }\n\n        pubKey = publicKeyToProtobuf(peer.id.publicKey)\n      } catch (err: any) {\n        if (err.name !== 'NotFoundError') {\n          throw err\n        }\n      }\n\n      if (pubKey != null) {\n        this.log('returning found public key')\n        response.record = new Libp2pRecord(key, pubKey, new Date()).serialize()\n        return response\n      }\n    }\n\n    const [record, closer] = await Promise.all([\n      this._checkLocalDatastore(key),\n      this.peerRouting.getClosestPeersOffline(key)\n    ])\n\n    if (record != null) {\n      this.log('had record for %b in local datastore', key)\n      response.record = record.serialize()\n    }\n\n    if (closer.length > 0) {\n      this.log('had %s closer peers in routing table', closer.length)\n      response.closer = closer.map(peerInfo => ({\n        id: peerInfo.id.toMultihash().bytes,\n        multiaddrs: peerInfo.multiaddrs.map(ma => ma.bytes)\n      }))\n    }\n\n    return response\n  }\n\n  /**\n   * Try to fetch a given record by from the local datastore.\n   * Returns the record if it is still valid, meaning\n   * - it was either authored by this node, or\n   * - it was received less than `MAX_RECORD_AGE` ago.\n   */\n  async _checkLocalDatastore (key: Uint8Array): Promise<Libp2pRecord | undefined> {\n    this.log('checkLocalDatastore looking for %b', key)\n    const dsKey = bufferToRecordKey(this.datastorePrefix, key)\n\n    // Fetch value from ds\n    let rawRecord\n    try {\n      rawRecord = await this.datastore.get(dsKey)\n    } catch (err: any) {\n      if (err.name === 'NotFoundError') {\n        return undefined\n      }\n      throw err\n    }\n\n    // Create record from the returned bytes\n    const record = Libp2pRecord.deserialize(rawRecord)\n\n    // Check validity: compare time received with max record age\n    if (record.timeReceived == null ||\n      Date.now() - record.timeReceived.getTime() > MAX_RECORD_AGE) {\n      // If record is bad delete it and return\n      await this.datastore.delete(dsKey)\n      return undefined\n    }\n\n    // Record is valid\n    return record\n  }\n}\n", "import type { Message } from '../../message/dht.js'\nimport type { DHTMessageHandler } from '../index.js'\nimport type { ComponentLogger, Logger, PeerId } from '@libp2p/interface'\n\nexport interface PingComponents {\n  logger: ComponentLogger\n}\n\nexport interface PingHandlerInit {\n  logPrefix: string\n}\n\nexport class PingHandler implements DHTMessageHandler {\n  private readonly log: Logger\n\n  constructor (components: PingComponents, init: PingHandlerInit) {\n    this.log = components.logger.forComponent(`${init.logPrefix}:rpc:handlers:ping`)\n  }\n\n  async handle (peerId: PeerId, msg: Message): Promise<Message> {\n    this.log('ping from %p', peerId)\n    return msg\n  }\n}\n", "import { InvalidMessageError } from '@libp2p/interface'\nimport { Libp2pRecord } from '@libp2p/record'\nimport { verifyRecord } from '../../record/validators.js'\nimport { bufferToRecordKey } from '../../utils.js'\nimport type { Validators } from '../../index.js'\nimport type { Message } from '../../message/dht.js'\nimport type { DHTMessageHandler } from '../index.js'\nimport type { ComponentLogger, Logger, PeerId } from '@libp2p/interface'\nimport type { Datastore } from 'interface-datastore'\n\nexport interface PutValueHandlerInit {\n  validators: Validators\n  logPrefix: string\n  datastorePrefix: string\n}\n\nexport interface PutValueHandlerComponents {\n  datastore: Datastore\n  logger: ComponentLogger\n}\n\nexport class PutValueHandler implements DHTMessageHandler {\n  private readonly components: PutValueHandlerComponents\n  private readonly validators: Validators\n  private readonly log: Logger\n  private readonly datastorePrefix: string\n\n  constructor (components: PutValueHandlerComponents, init: PutValueHandlerInit) {\n    const { validators } = init\n\n    this.components = components\n    this.log = components.logger.forComponent(`${init.logPrefix}:rpc:handlers:put-value`)\n    this.datastorePrefix = `${init.datastorePrefix}/record`\n    this.validators = validators\n  }\n\n  async handle (peerId: PeerId, msg: Message): Promise<Message> {\n    const key = msg.key\n    this.log('%p asked us to store value for key %b', peerId, key)\n\n    if (msg.record == null) {\n      const errMsg = `Empty record from: ${peerId.toString()}`\n\n      this.log.error(errMsg)\n      throw new InvalidMessageError(errMsg)\n    }\n\n    try {\n      const deserializedRecord = Libp2pRecord.deserialize(msg.record)\n\n      await verifyRecord(this.validators, deserializedRecord)\n\n      deserializedRecord.timeReceived = new Date()\n      const recordKey = bufferToRecordKey(this.datastorePrefix, deserializedRecord.key)\n      await this.components.datastore.put(recordKey, deserializedRecord.serialize().subarray())\n      this.log('put record for %b into datastore under key %k', key, recordKey)\n    } catch (err: any) {\n      this.log('did not put record for key %b into datastore %o', key, err)\n    }\n\n    return msg\n  }\n}\n", "import { TimeoutError } from '@libp2p/interface'\nimport { pbStream } from 'it-protobuf-stream'\nimport { Message, MessageType } from '../message/dht.js'\nimport { AddProviderHandler } from './handlers/add-provider.js'\nimport { FindNodeHandler } from './handlers/find-node.js'\nimport { GetProvidersHandler } from './handlers/get-providers.js'\nimport { GetValueHandler } from './handlers/get-value.js'\nimport { PingHandler } from './handlers/ping.js'\nimport { PutValueHandler } from './handlers/put-value.js'\nimport type { PeerInfoMapper, Validators } from '../index.js'\nimport type { PeerRouting } from '../peer-routing/index.js'\nimport type { Providers } from '../providers.js'\nimport type { FindNodeHandlerComponents } from './handlers/find-node.js'\nimport type { GetProvidersHandlerComponents } from './handlers/get-providers.js'\nimport type { GetValueHandlerComponents } from './handlers/get-value.js'\nimport type { PutValueHandlerComponents } from './handlers/put-value.js'\nimport type { RoutingTable } from '../routing-table/index.js'\nimport type { CounterGroup, Logger, Metrics, PeerId, IncomingStreamData, MetricGroup } from '@libp2p/interface'\n\nexport interface DHTMessageHandler {\n  handle(peerId: PeerId, msg: Message): Promise<Message | undefined>\n}\n\nexport interface RPCInit {\n  routingTable: RoutingTable\n  providers: Providers\n  peerRouting: PeerRouting\n  validators: Validators\n  logPrefix: string\n  metricsPrefix: string\n  datastorePrefix: string\n  peerInfoMapper: PeerInfoMapper\n  incomingMessageTimeout?: number\n}\n\nexport interface RPCComponents extends GetValueHandlerComponents, PutValueHandlerComponents, FindNodeHandlerComponents, GetProvidersHandlerComponents {\n  metrics?: Metrics\n}\n\nexport class RPC {\n  private readonly handlers: Record<string, DHTMessageHandler>\n  private readonly log: Logger\n  private readonly metrics: {\n    operations?: CounterGroup\n    errors?: CounterGroup\n    rpcTime?: MetricGroup\n  }\n\n  private readonly incomingMessageTimeout: number\n\n  constructor (components: RPCComponents, init: RPCInit) {\n    this.metrics = {\n      operations: components.metrics?.registerCounterGroup(`${init.metricsPrefix}_inbound_rpc_requests_total`),\n      errors: components.metrics?.registerCounterGroup(`${init.metricsPrefix}_inbound_rpc_errors_total`),\n      rpcTime: components.metrics?.registerMetricGroup(`${init.metricsPrefix}_inbound_rpc_time_seconds`, { label: 'operation' })\n    }\n\n    this.log = components.logger.forComponent(`${init.logPrefix}:rpc`)\n    this.incomingMessageTimeout = init.incomingMessageTimeout ?? 10_000\n    this.handlers = {\n      [MessageType.GET_VALUE.toString()]: new GetValueHandler(components, init),\n      [MessageType.PUT_VALUE.toString()]: new PutValueHandler(components, init),\n      [MessageType.FIND_NODE.toString()]: new FindNodeHandler(components, init),\n      [MessageType.ADD_PROVIDER.toString()]: new AddProviderHandler(components, init),\n      [MessageType.GET_PROVIDERS.toString()]: new GetProvidersHandler(components, init),\n      [MessageType.PING.toString()]: new PingHandler(components, init)\n    }\n  }\n\n  /**\n   * Process incoming DHT messages\n   */\n  async handleMessage (peerId: PeerId, msg: Message): Promise<Message | undefined> {\n    // get handler & execute it\n    const handler = this.handlers[msg.type]\n\n    if (handler == null) {\n      this.log.error(`no handler found for message type: ${msg.type}`)\n      return\n    }\n\n    try {\n      this.metrics.operations?.increment({\n        [msg.type]: true\n      })\n\n      return await handler.handle(peerId, msg)\n    } catch {\n      this.metrics.errors?.increment({\n        [msg.type]: true\n      })\n    }\n  }\n\n  /**\n   * Handle incoming streams on the dht protocol\n   */\n  onIncomingStream (data: IncomingStreamData): void {\n    const message = 'unknown'\n\n    Promise.resolve().then(async () => {\n      const { stream, connection } = data\n\n      const abortListener = (): void => {\n        stream.abort(new TimeoutError())\n      }\n\n      let signal = AbortSignal.timeout(this.incomingMessageTimeout)\n      signal.addEventListener('abort', abortListener)\n\n      const messages = pbStream(stream).pb(Message)\n\n      try {\n        while (true) {\n          const message = await messages.read({\n            signal\n          })\n\n          const stopSuccessTimer = this.metrics?.rpcTime?.timer(message.type.toString())\n          const stopErrorTimer = this.metrics?.rpcTime?.timer(message.type.toString())\n          let errored = false\n\n          try {\n            // handle the message\n            this.log('incoming %s from %p', message.type, connection.remotePeer)\n            const res = await this.handleMessage(connection.remotePeer, message)\n\n            // Not all handlers will return a response\n            if (res != null) {\n              await messages.write(res, {\n                signal\n              })\n            }\n          } catch (err) {\n            errored = true\n            stopErrorTimer?.()\n\n            throw err\n          } finally {\n            if (!errored) {\n              stopSuccessTimer?.()\n            }\n          }\n\n          // we have received a message so reset the timeout controller to\n          // allow the remote to send another\n          signal.removeEventListener('abort', abortListener)\n          signal = AbortSignal.timeout(this.incomingMessageTimeout)\n          signal.addEventListener('abort', abortListener)\n        }\n      } catch (err: any) {\n        stream.abort(err)\n      }\n    })\n      .catch(err => {\n        this.log.error('error handling %s RPC message from %p - %e', message, data.connection.remotePeer, err)\n      })\n  }\n}\n", "import { TypedEventEmitter } from 'main-event'\nimport type { KadDHTComponents } from './index.js'\nimport type { Logger, PeerId, Startable } from '@libp2p/interface'\n\nexport interface TopologyListenerInit {\n  protocol: string\n  logPrefix: string\n}\n\nexport interface TopologyListenerEvents {\n  peer: CustomEvent<PeerId>\n}\n\n/**\n * Receives notifications of new peers joining the network that support the DHT protocol\n */\nexport class TopologyListener extends TypedEventEmitter<TopologyListenerEvents> implements Startable {\n  private readonly log: Logger\n  private readonly components: KadDHTComponents\n  private readonly protocol: string\n  private running: boolean\n  private registrarId?: string\n\n  constructor (components: KadDHTComponents, init: TopologyListenerInit) {\n    super()\n\n    const { protocol, logPrefix } = init\n\n    this.components = components\n    this.log = components.logger.forComponent(`${logPrefix}:topology-listener`)\n    this.running = false\n    this.protocol = protocol\n  }\n\n  isStarted (): boolean {\n    return this.running\n  }\n\n  /**\n   * Start the network\n   */\n  async start (): Promise<void> {\n    if (this.running) {\n      return\n    }\n\n    this.running = true\n\n    // register protocol with topology\n    this.registrarId = await this.components.registrar.register(this.protocol, {\n      onConnect: (peerId) => {\n        this.log('observed peer %p with protocol %s', peerId, this.protocol)\n        this.dispatchEvent(new CustomEvent('peer', {\n          detail: peerId\n        }))\n      }\n    })\n  }\n\n  /**\n   * Stop all network activity\n   */\n  async stop (): Promise<void> {\n    this.running = false\n\n    // unregister protocol and handlers\n    if (this.registrarId != null) {\n      this.components.registrar.unregister(this.registrarId)\n      this.registrarId = undefined\n    }\n  }\n}\n", "import { NotFoundError, contentRoutingSymbol, peerDiscoverySymbol, peerRoutingSymbol, serviceCapabilities, serviceDependencies, start, stop } from '@libp2p/interface'\nimport drain from 'it-drain'\nimport { setMaxListeners, TypedEventEmitter } from 'main-event'\nimport pDefer from 'p-defer'\nimport { ALPHA, ON_PEER_CONNECT_TIMEOUT, PROTOCOL } from './constants.js'\nimport { ContentFetching } from './content-fetching/index.js'\nimport { ContentRouting as KADDHTContentRouting } from './content-routing/index.js'\nimport { Network } from './network.js'\nimport { PeerRouting as KADDHTPeerRouting } from './peer-routing/index.js'\nimport { Providers } from './providers.js'\nimport { QueryManager } from './query/manager.js'\nimport { QuerySelf } from './query-self.js'\nimport { selectors as recordSelectors } from './record/selectors.js'\nimport { validators as recordValidators } from './record/validators.js'\nimport { Reprovider } from './reprovider.js'\nimport { KBUCKET_SIZE, RoutingTable } from './routing-table/index.js'\nimport { RoutingTableRefresh } from './routing-table/refresh.js'\nimport { RPC } from './rpc/index.js'\nimport { TopologyListener } from './topology-listener.js'\nimport {\n  multiaddrIsPublic,\n  removePrivateAddressesMapper,\n  timeOperationGenerator\n} from './utils.js'\nimport type { KadDHTComponents, KadDHTInit, Validators, Selectors, KadDHT as KadDHTInterface, QueryEvent, PeerInfoMapper, SetModeOptions } from './index.js'\nimport type { ContentRouting, CounterGroup, Logger, MetricGroup, PeerDiscovery, PeerDiscoveryEvents, PeerId, PeerInfo, PeerRouting, RoutingOptions, Startable } from '@libp2p/interface'\nimport type { AbortOptions } from 'it-pushable'\nimport type { CID } from 'multiformats/cid'\n\n/**\n * Wrapper class to convert events into returned values\n */\nclass DHTContentRouting implements ContentRouting {\n  private readonly dht: KadDHTInterface\n\n  constructor (dht: KadDHTInterface) {\n    this.dht = dht\n  }\n\n  async provide (cid: CID, options: RoutingOptions = {}): Promise<void> {\n    await drain(this.dht.provide(cid, options))\n  }\n\n  async cancelReprovide (key: CID): Promise<void> {\n    await this.dht.cancelReprovide(key)\n  }\n\n  async * findProviders (cid: CID, options: RoutingOptions = {}): AsyncGenerator<PeerInfo, void, undefined> {\n    for await (const event of this.dht.findProviders(cid, options)) {\n      if (event.name === 'PROVIDER') {\n        yield * event.providers\n      }\n    }\n  }\n\n  async put (key: Uint8Array, value: Uint8Array, options?: RoutingOptions): Promise<void> {\n    await drain(this.dht.put(key, value, options))\n  }\n\n  async get (key: Uint8Array, options?: RoutingOptions): Promise<Uint8Array> {\n    for await (const event of this.dht.get(key, options)) {\n      if (event.name === 'VALUE') {\n        return event.value\n      }\n    }\n\n    throw new NotFoundError('Could not find value for key')\n  }\n}\n\n/**\n * Wrapper class to convert events into returned values\n */\nclass DHTPeerRouting implements PeerRouting {\n  private readonly dht: KadDHTInterface\n\n  constructor (dht: KadDHTInterface) {\n    this.dht = dht\n  }\n\n  async findPeer (peerId: PeerId, options: RoutingOptions = {}): Promise<PeerInfo> {\n    for await (const event of this.dht.findPeer(peerId, options)) {\n      if (event.name === 'FINAL_PEER') {\n        return event.peer\n      }\n    }\n\n    throw new NotFoundError('Peer not found')\n  }\n\n  async * getClosestPeers (key: Uint8Array, options: RoutingOptions = {}): AsyncIterable<PeerInfo> {\n    for await (const event of this.dht.getClosestPeers(key, options)) {\n      if (event.name === 'FINAL_PEER') {\n        yield event.peer\n      }\n    }\n  }\n}\n\nexport const DEFAULT_MAX_INBOUND_STREAMS = 32\nexport const DEFAULT_MAX_OUTBOUND_STREAMS = 64\n\nexport type Operation = 'GET_VALUE' | 'FIND_PROVIDERS' | 'FIND_PEER' | 'GET_CLOSEST_PEERS' | 'PROVIDE' | 'PUT_VALUE' | 'SELF_QUERY'\n\nexport interface OperationMetrics {\n  queries?: MetricGroup<Operation>\n  errors?: CounterGroup<Operation>\n  queryTime?: MetricGroup<Operation>\n  errorTime?: MetricGroup<Operation>\n}\n\n/**\n * A DHT implementation modelled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\nexport class KadDHT extends TypedEventEmitter<PeerDiscoveryEvents> implements KadDHTInterface, Startable {\n  public readonly k: number\n  public readonly a: number\n  public readonly d: number\n  public protocol: string\n  public routingTable: RoutingTable\n  public providers: Providers\n  public network: Network\n  public peerRouting: KADDHTPeerRouting\n\n  public readonly components: KadDHTComponents\n  private readonly log: Logger\n  private running: boolean\n  private clientMode: boolean\n  private readonly validators: Validators\n  private readonly selectors: Selectors\n  private readonly queryManager: QueryManager\n  private readonly contentFetching: ContentFetching\n  private readonly contentRouting: KADDHTContentRouting\n  private readonly routingTableRefresh: RoutingTableRefresh\n  private readonly rpc: RPC\n  private readonly topologyListener: TopologyListener\n  private readonly querySelf: QuerySelf\n  private readonly maxInboundStreams: number\n  private readonly maxOutboundStreams: number\n\n  private readonly dhtContentRouting: DHTContentRouting\n  private readonly dhtPeerRouting: DHTPeerRouting\n  private readonly peerInfoMapper: PeerInfoMapper\n  private readonly reprovider: Reprovider\n  private readonly onPeerConnectTimeout: number\n\n  /**\n   * Create a new KadDHT\n   */\n  constructor (components: KadDHTComponents, init: KadDHTInit = {}) {\n    super()\n\n    const logPrefix = init.logPrefix ?? 'libp2p:kad-dht'\n    const datastorePrefix = init.datastorePrefix ?? '/dht'\n    const metricsPrefix = init.metricsPrefix ?? 'libp2p_kad_dht'\n\n    const operationMetrics: OperationMetrics = {\n      queries: components.metrics?.registerMetricGroup(`${metricsPrefix}_operations_total`, { label: 'operation' }),\n      errors: components.metrics?.registerCounterGroup(`${metricsPrefix}_operation_errors_total`, { label: 'operation' }),\n      queryTime: components.metrics?.registerMetricGroup(`${metricsPrefix}_operation_time_seconds`, { label: 'operation' }),\n      errorTime: components.metrics?.registerMetricGroup(`${metricsPrefix}_operation_error_time_seconds`, { label: 'operation' })\n    }\n\n    this.running = false\n    this.components = components\n    this.log = components.logger.forComponent(logPrefix)\n    this.k = init.kBucketSize ?? KBUCKET_SIZE\n    this.a = init.alpha ?? ALPHA\n    this.d = init.disjointPaths ?? this.a\n    this.protocol = init.protocol ?? PROTOCOL\n    this.clientMode = init.clientMode ?? true\n    this.maxInboundStreams = init.maxInboundStreams ?? DEFAULT_MAX_INBOUND_STREAMS\n    this.maxOutboundStreams = init.maxOutboundStreams ?? DEFAULT_MAX_OUTBOUND_STREAMS\n    this.peerInfoMapper = init.peerInfoMapper ?? removePrivateAddressesMapper\n    this.onPeerConnectTimeout = init.onPeerConnectTimeout ?? ON_PEER_CONNECT_TIMEOUT\n\n    this.providers = new Providers(components, {\n      ...init.providers,\n      logPrefix,\n      datastorePrefix\n    })\n\n    this.validators = {\n      ...recordValidators,\n      ...init.validators\n    }\n    this.selectors = {\n      ...recordSelectors,\n      ...init.selectors\n    }\n    this.network = new Network(components, {\n      protocol: this.protocol,\n      logPrefix,\n      metricsPrefix\n    })\n\n    this.routingTable = new RoutingTable(components, {\n      kBucketSize: this.k,\n      pingOldContactTimeout: init.pingOldContactTimeout,\n      pingOldContactConcurrency: init.pingOldContactConcurrency,\n      pingOldContactMaxQueueSize: init.pingOldContactMaxQueueSize,\n      pingNewContactTimeout: init.pingNewContactTimeout,\n      pingNewContactConcurrency: init.pingNewContactConcurrency,\n      pingNewContactMaxQueueSize: init.pingNewContactMaxQueueSize,\n      protocol: this.protocol,\n      logPrefix,\n      metricsPrefix,\n      prefixLength: init.prefixLength,\n      splitThreshold: init.kBucketSplitThreshold,\n      network: this.network\n    })\n\n    // all queries should wait for the initial query-self query to run so we have\n    // some peers and don't force consumers to use arbitrary timeouts\n    const initialQuerySelfHasRun = pDefer<any>()\n\n    // if the user doesn't want to wait for query peers, resolve the initial\n    // self-query promise immediately\n    if (init.allowQueryWithZeroPeers === true) {\n      initialQuerySelfHasRun.resolve()\n    }\n\n    this.queryManager = new QueryManager(components, {\n      disjointPaths: this.d,\n      alpha: this.a,\n      logPrefix,\n      metricsPrefix,\n      initialQuerySelfHasRun,\n      routingTable: this.routingTable,\n      allowQueryWithZeroPeers: init.allowQueryWithZeroPeers\n    })\n\n    // DHT components\n    this.peerRouting = new KADDHTPeerRouting(components, {\n      routingTable: this.routingTable,\n      network: this.network,\n      validators: this.validators,\n      queryManager: this.queryManager,\n      logPrefix\n    })\n    this.contentFetching = new ContentFetching(components, {\n      validators: this.validators,\n      selectors: this.selectors,\n      peerRouting: this.peerRouting,\n      queryManager: this.queryManager,\n      network: this.network,\n      logPrefix,\n      datastorePrefix\n    })\n    this.contentRouting = new KADDHTContentRouting(components, {\n      network: this.network,\n      peerRouting: this.peerRouting,\n      queryManager: this.queryManager,\n      routingTable: this.routingTable,\n      providers: this.providers,\n      logPrefix\n    })\n    this.routingTableRefresh = new RoutingTableRefresh(components, {\n      peerRouting: this.peerRouting,\n      routingTable: this.routingTable,\n      logPrefix\n    })\n    this.rpc = new RPC(components, {\n      routingTable: this.routingTable,\n      providers: this.providers,\n      peerRouting: this.peerRouting,\n      validators: this.validators,\n      logPrefix,\n      metricsPrefix,\n      datastorePrefix,\n      peerInfoMapper: this.peerInfoMapper\n    })\n    this.topologyListener = new TopologyListener(components, {\n      protocol: this.protocol,\n      logPrefix\n    })\n    this.querySelf = new QuerySelf(components, {\n      peerRouting: this.peerRouting,\n      interval: init.querySelfInterval,\n      initialInterval: init.initialQuerySelfInterval,\n      logPrefix,\n      initialQuerySelfHasRun,\n      operationMetrics\n    })\n    this.reprovider = new Reprovider(components, {\n      ...init.reprovide,\n      logPrefix,\n      metricsPrefix,\n      datastorePrefix,\n      contentRouting: this.contentRouting,\n      operationMetrics\n    })\n\n    // handle peers being discovered during processing of DHT messages\n    this.network.addEventListener('peer', (evt) => {\n      const peerData = evt.detail\n\n      this.onPeerConnect(peerData).catch(err => {\n        this.log.error('could not add %p to routing table', peerData.id, err)\n      })\n\n      this.dispatchEvent(new CustomEvent('peer', {\n        detail: peerData\n      }))\n    })\n\n    // handle peers being discovered via other peer discovery mechanisms\n    this.topologyListener.addEventListener('peer', (evt) => {\n      const peerId = evt.detail\n\n      Promise.resolve().then(async () => {\n        const peer = await this.components.peerStore.get(peerId)\n\n        const peerData = {\n          id: peerId,\n          multiaddrs: peer.addresses.map(({ multiaddr }) => multiaddr),\n          protocols: peer.protocols\n        }\n\n        await this.onPeerConnect(peerData)\n      }).catch(err => {\n        this.log.error('could not add %p to routing table - %e - %e', peerId, err)\n      })\n    })\n\n    this.dhtPeerRouting = new DHTPeerRouting(this)\n    this.dhtContentRouting = new DHTContentRouting(this)\n\n    // if client mode has not been explicitly specified, auto-switch to server\n    // mode when the node's peer data is updated with publicly dialable\n    // addresses\n    if (init.clientMode == null) {\n      components.events.addEventListener('self:peer:update', (evt) => {\n        this.log('received update of self-peer info')\n\n        void Promise.resolve().then(async () => {\n          const hasPublicAddress = evt.detail.peer.addresses\n            .some(({ multiaddr }) => multiaddrIsPublic(multiaddr))\n\n          const mode = this.getMode()\n\n          if (hasPublicAddress && mode === 'client') {\n            await this.setMode('server')\n          } else if (mode === 'server' && !hasPublicAddress) {\n            await this.setMode('client')\n          }\n        })\n          .catch(err => {\n            this.log.error('error setting dht server mode', err)\n          })\n      })\n    }\n\n    this.get = timeOperationGenerator(this.get.bind(this), operationMetrics, 'GET_VALUE')\n    this.findProviders = timeOperationGenerator(this.findProviders.bind(this), operationMetrics, 'FIND_PROVIDERS')\n    this.findPeer = timeOperationGenerator(this.findPeer.bind(this), operationMetrics, 'FIND_PEER')\n    this.getClosestPeers = timeOperationGenerator(this.getClosestPeers.bind(this), operationMetrics, 'GET_CLOSEST_PEERS')\n    this.provide = timeOperationGenerator(this.provide.bind(this), operationMetrics, 'PROVIDE')\n    this.put = timeOperationGenerator(this.put.bind(this), operationMetrics, 'PUT_VALUE')\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/kad-dht'\n\n  readonly [serviceCapabilities]: string[] = [\n    '@libp2p/content-routing',\n    '@libp2p/peer-routing',\n    '@libp2p/peer-discovery',\n    '@libp2p/kad-dht'\n  ]\n\n  readonly [serviceDependencies]: string[] = [\n    '@libp2p/identify',\n    '@libp2p/ping'\n  ]\n\n  get [contentRoutingSymbol] (): ContentRouting {\n    return this.dhtContentRouting\n  }\n\n  get [peerRoutingSymbol] (): PeerRouting {\n    return this.dhtPeerRouting\n  }\n\n  get [peerDiscoverySymbol] (): PeerDiscovery {\n    return this\n  }\n\n  async onPeerConnect (peerData: PeerInfo): Promise<void> {\n    this.log.trace('peer %p connected', peerData.id)\n\n    peerData = this.peerInfoMapper(peerData)\n\n    if (peerData.multiaddrs.length === 0) {\n      this.log.trace('ignoring %p as there were no valid addresses in %s after filtering', peerData.id, peerData.multiaddrs.map(addr => addr.toString()))\n      return\n    }\n\n    const signal = AbortSignal.timeout(this.onPeerConnectTimeout)\n    setMaxListeners(Infinity, signal)\n\n    try {\n      await this.routingTable.add(peerData.id, {\n        signal\n      })\n    } catch (err: any) {\n      this.log.error('could not add %p to routing table', peerData.id, err)\n    }\n  }\n\n  /**\n   * Is this DHT running.\n   */\n  isStarted (): boolean {\n    return this.running\n  }\n\n  /**\n   * If 'server' this node will respond to DHT queries, if 'client' this node will not\n   */\n  getMode (): 'client' | 'server' {\n    return this.clientMode ? 'client' : 'server'\n  }\n\n  /**\n   * If 'server' this node will respond to DHT queries, if 'client' this node will not\n   */\n  async setMode (mode: 'client' | 'server', options?: SetModeOptions): Promise<void> {\n    if (mode === this.getMode() && options?.force !== true) {\n      this.log('already in %s mode', mode)\n      return\n    }\n\n    await this.components.registrar.unhandle(this.protocol, options)\n\n    // check again after async work\n    if (mode === this.getMode() && options?.force !== true) {\n      this.log('already in %s mode', mode)\n      return\n    }\n\n    if (mode === 'client') {\n      this.log('enabling client mode while in %s mode', this.getMode())\n      this.clientMode = true\n    } else {\n      this.log('enabling server mode while in %s mode', this.getMode())\n      this.clientMode = false\n      await this.components.registrar.handle(this.protocol, this.rpc.onIncomingStream.bind(this.rpc), {\n        signal: options?.signal,\n        maxInboundStreams: this.maxInboundStreams,\n        maxOutboundStreams: this.maxOutboundStreams\n      })\n    }\n  }\n\n  /**\n   * Start listening to incoming connections.\n   */\n  async start (): Promise<void> {\n    if (this.running) {\n      return\n    }\n\n    this.running = true\n\n    // Only respond to queries when not in client mode\n    await this.setMode(this.clientMode ? 'client' : 'server', {\n      force: true\n    })\n\n    await start(\n      this.routingTable,\n      this.queryManager,\n      this.network,\n      this.topologyListener,\n      this.routingTableRefresh,\n      this.reprovider\n    )\n\n    // Query self after other components are configured\n    await start(\n      this.querySelf\n    )\n  }\n\n  /**\n   * Stop accepting incoming connections and sending outgoing\n   * messages.\n   */\n  async stop (): Promise<void> {\n    this.running = false\n\n    await stop(\n      this.querySelf,\n      this.queryManager,\n      this.network,\n      this.routingTable,\n      this.routingTableRefresh,\n      this.topologyListener,\n      this.reprovider\n    )\n  }\n\n  /**\n   * Store the given key/value pair in the DHT\n   */\n  async * put (key: Uint8Array, value: Uint8Array, options: RoutingOptions = {}): AsyncGenerator<any, void, undefined> {\n    yield * this.contentFetching.put(key, value, options)\n  }\n\n  /**\n   * Get the value that corresponds to the passed key\n   */\n  async * get (key: Uint8Array, options: RoutingOptions = {}): AsyncGenerator<QueryEvent, void, undefined> {\n    yield * this.contentFetching.get(key, options)\n  }\n\n  // ----------- Content Routing\n\n  /**\n   * Announce to the network that we can provide given key's value\n   */\n  async * provide (key: CID, options: RoutingOptions = {}): AsyncGenerator<QueryEvent, void, undefined> {\n    yield * this.contentRouting.provide(key, this.components.addressManager.getAddresses(), options)\n  }\n\n  /**\n   * Provider records must be re-published every 24 hours - pass a previously\n   * provided CID here to not re-publish a record for it any more\n   */\n  async cancelReprovide (key: CID, options?: AbortOptions): Promise<void> {\n    await this.providers.removeProvider(key, this.components.peerId, options)\n  }\n\n  /**\n   * Search the dht for providers of the given CID\n   */\n  async * findProviders (key: CID, options: RoutingOptions = {}): AsyncGenerator<QueryEvent, any, unknown> {\n    yield * this.contentRouting.findProviders(key, options)\n  }\n\n  // ----------- Peer Routing -----------\n\n  /**\n   * Search for a peer with the given ID\n   */\n  async * findPeer (id: PeerId, options: RoutingOptions = {}): AsyncGenerator<QueryEvent, any, unknown> {\n    yield * this.peerRouting.findPeer(id, options)\n  }\n\n  /**\n   * Kademlia 'node lookup' operation\n   */\n  async * getClosestPeers (key: Uint8Array, options: RoutingOptions = {}): AsyncGenerator<QueryEvent, any, unknown> {\n    yield * this.peerRouting.getClosestPeers(key, options)\n  }\n\n  async refreshRoutingTable (options?: AbortOptions): Promise<void> {\n    this.routingTableRefresh.refreshTable(true, options)\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * This module implements the [libp2p Kademlia spec](https://github.com/libp2p/specs/blob/master/kad-dht/README.md) in TypeScript.\n *\n * The Kademlia DHT allow for several operations such as finding peers, searching for providers of DHT records, etc.\n *\n * @example Using with libp2p\n *\n * ```TypeScript\n * import { kadDHT } from '@libp2p/kad-dht'\n * import { createLibp2p } from 'libp2p'\n * import { peerIdFromString } from '@libp2p/peer-id'\n * import { ping } from '@libp2p/ping'\n * import { identify } from '@libp2p/identify'\n *\n * const node = await createLibp2p({\n *   services: {\n *     dht: kadDHT({\n *       // DHT options\n *     }),\n *     ping: ping(),\n *     identify: identify()\n *   }\n * })\n *\n * const peerId = peerIdFromString('QmFoo')\n * const peerInfo = await node.peerRouting.findPeer(peerId)\n *\n * console.info(peerInfo) // peer id, multiaddrs\n * ```\n *\n * @example Connecting to the IPFS Amino DHT\n *\n * The [Amino DHT](https://blog.ipfs.tech/2023-09-amino-refactoring/) is a public-good DHT used by IPFS to fetch content, find peers, etc.\n *\n * If you are trying to access content on the public internet, this is the implementation you want.\n *\n * ```TypeScript\n * import { kadDHT, removePrivateAddressesMapper } from '@libp2p/kad-dht'\n * import { createLibp2p } from 'libp2p'\n * import { peerIdFromString } from '@libp2p/peer-id'\n * import { ping } from '@libp2p/ping'\n * import { identify } from '@libp2p/identify'\n *\n * const node = await createLibp2p({\n *   services: {\n *     aminoDHT: kadDHT({\n *       protocol: '/ipfs/kad/1.0.0',\n *       peerInfoMapper: removePrivateAddressesMapper\n *     }),\n *     ping: ping(),\n *     identify: identify()\n *   }\n * })\n *\n * const peerId = peerIdFromString('QmFoo')\n * const peerInfo = await node.peerRouting.findPeer(peerId)\n *\n * console.info(peerInfo) // peer id, multiaddrs\n * ```\n *\n * @example Connecting to a LAN-only DHT\n *\n * This DHT only works with privately dialable peers.\n *\n * This is for use when peers are on the local area network.\n *\n * ```TypeScript\n * import { kadDHT, removePublicAddressesMapper } from '@libp2p/kad-dht'\n * import { createLibp2p } from 'libp2p'\n * import { peerIdFromString } from '@libp2p/peer-id'\n * import { ping } from '@libp2p/ping'\n * import { identify } from '@libp2p/identify'\n *\n * const node = await createLibp2p({\n *   services: {\n *     lanDHT: kadDHT({\n *       protocol: '/ipfs/lan/kad/1.0.0',\n *       peerInfoMapper: removePublicAddressesMapper,\n *       clientMode: false\n *     }),\n *     ping: ping(),\n *     identify: identify()\n *   }\n * })\n *\n * const peerId = peerIdFromString('QmFoo')\n * const peerInfo = await node.peerRouting.findPeer(peerId)\n *\n * console.info(peerInfo) // peer id, multiaddrs\n * ```\n *\n * @example Connecting to both a LAN-only DHT and the IPFS Amino DHT\n *\n * When using multiple DHTs, you should specify distinct datastore, metrics and\n * log prefixes to ensure that data is kept separate for each instance.\n *\n * ```TypeScript\n * import { kadDHT, removePublicAddressesMapper, removePrivateAddressesMapper } from '@libp2p/kad-dht'\n * import { createLibp2p } from 'libp2p'\n * import { peerIdFromString } from '@libp2p/peer-id'\n * import { ping } from '@libp2p/ping'\n * import { identify } from '@libp2p/identify'\n *\n * const node = await createLibp2p({\n *   services: {\n *     lanDHT: kadDHT({\n *       protocol: '/ipfs/lan/kad/1.0.0',\n *       peerInfoMapper: removePublicAddressesMapper,\n *       clientMode: false,\n *       logPrefix: 'libp2p:dht-lan',\n *       datastorePrefix: '/dht-lan',\n *       metricsPrefix: 'libp2p_dht_lan'\n *     }),\n *     aminoDHT: kadDHT({\n *       protocol: '/ipfs/kad/1.0.0',\n *       peerInfoMapper: removePrivateAddressesMapper,\n *       logPrefix: 'libp2p:dht-amino',\n *       datastorePrefix: '/dht-amino',\n *       metricsPrefix: 'libp2p_dht_amino'\n *     }),\n *     ping: ping(),\n *     identify: identify()\n *   }\n * })\n *\n * const peerId = peerIdFromString('QmFoo')\n * const peerInfo = await node.peerRouting.findPeer(peerId)\n *\n * console.info(peerInfo) // peer id, multiaddrs\n * ```\n */\n\nimport { KadDHT as KadDHTClass } from './kad-dht.js'\nimport { MessageType } from './message/dht.js'\nimport { removePrivateAddressesMapper, removePublicAddressesMapper, passthroughMapper } from './utils.js'\nimport type { Libp2pEvents, ComponentLogger, Metrics, PeerId, PeerInfo, PeerStore, RoutingOptions, PrivateKey, AbortOptions } from '@libp2p/interface'\nimport type { AddressManager, ConnectionManager, Registrar } from '@libp2p/interface-internal'\nimport type { Ping } from '@libp2p/ping'\nimport type { AdaptiveTimeoutInit } from '@libp2p/utils/adaptive-timeout'\nimport type { Datastore } from 'interface-datastore'\nimport type { TypedEventTarget } from 'main-event'\nimport type { CID } from 'multiformats/cid'\nimport type { ProgressEvent } from 'progress-events'\n\nexport { Libp2pRecord as Record } from '@libp2p/record'\nexport { removePrivateAddressesMapper, removePublicAddressesMapper, passthroughMapper }\n\n/**\n * The types of events emitted during DHT queries\n */\nexport enum EventTypes {\n  SEND_QUERY = 0,\n  PEER_RESPONSE,\n  FINAL_PEER,\n  QUERY_ERROR,\n  PROVIDER,\n  VALUE,\n  ADD_PEER,\n  DIAL_PEER,\n  PATH_ENDED\n}\n\n/**\n * The types of messages sent to peers during DHT queries\n */\nexport { MessageType }\n\nexport type MessageName = keyof typeof MessageType\n\nexport interface DHTRecord {\n  key: Uint8Array\n  value: Uint8Array\n  timeReceived?: Date\n}\n\nexport type DHTProgressEvents =\n  ProgressEvent<'kad-dht:query:send-query', SendQueryEvent> |\n  ProgressEvent<'kad-dht:query:peer-response', PeerResponseEvent> |\n  ProgressEvent<'kad-dht:query:final-peer', FinalPeerEvent> |\n  ProgressEvent<'kad-dht:query:query-error', QueryErrorEvent> |\n  ProgressEvent<'kad-dht:query:provider', ProviderEvent> |\n  ProgressEvent<'kad-dht:query:value', ValueEvent> |\n  ProgressEvent<'kad-dht:query:add-peer', AddPeerEvent> |\n  ProgressEvent<'kad-dht:query:dial-peer', DialPeerEvent>\n\nexport interface DisjointPath {\n  index: number\n  queued: number\n  running: number\n  total: number\n}\n\n/**\n * Emitted when sending queries to remote peers\n */\nexport interface SendQueryEvent {\n  to: PeerId\n  type: EventTypes.SEND_QUERY\n  name: 'SEND_QUERY'\n  messageName: keyof typeof MessageType\n  messageType: MessageType\n  path: DisjointPath\n}\n\n/**\n * Emitted when query responses are received form remote peers.  Depending on the query\n * these events may be followed by a `FinalPeerEvent`, a `ValueEvent` or a `ProviderEvent`.\n */\nexport interface PeerResponseEvent {\n  from: PeerId\n  type: EventTypes.PEER_RESPONSE\n  name: 'PEER_RESPONSE'\n  messageName: keyof typeof MessageType\n  messageType: MessageType\n  closer: PeerInfo[]\n  providers: PeerInfo[]\n  record?: DHTRecord\n  path: DisjointPath\n}\n\n/**\n * Emitted at the end of a `findPeer` query\n */\nexport interface FinalPeerEvent {\n  from: PeerId\n  peer: PeerInfo\n  type: EventTypes.FINAL_PEER\n  name: 'FINAL_PEER'\n  path: DisjointPath\n}\n\n/**\n * Something went wrong with the query\n */\nexport interface QueryErrorEvent {\n  from: PeerId\n  type: EventTypes.QUERY_ERROR\n  name: 'QUERY_ERROR'\n  error: Error\n  path: DisjointPath\n}\n\n/**\n * Emitted when providers are found\n */\nexport interface ProviderEvent {\n  from: PeerId\n  type: EventTypes.PROVIDER\n  name: 'PROVIDER'\n  providers: PeerInfo[]\n  path: DisjointPath\n}\n\n/**\n * Emitted when values are found\n */\nexport interface ValueEvent {\n  from: PeerId\n  type: EventTypes.VALUE\n  name: 'VALUE'\n  value: Uint8Array\n  path: DisjointPath\n}\n\n/**\n * Emitted when peers are added to a query\n */\nexport interface AddPeerEvent {\n  type: EventTypes.ADD_PEER\n  name: 'ADD_PEER'\n  peer: PeerId\n  path: DisjointPath\n}\n\n/**\n * Emitted when peers are dialled and a new stream is opened as part of a query\n */\nexport interface DialPeerEvent {\n  peer: PeerId\n  type: EventTypes.DIAL_PEER\n  name: 'DIAL_PEER'\n  path: DisjointPath\n}\n\n/**\n * Emitted when sending queries to remote peers\n */\nexport interface PathEndedEvent {\n  type: EventTypes.PATH_ENDED\n  name: 'PATH_ENDED'\n  path: DisjointPath\n}\n\nexport type QueryEvent = SendQueryEvent | PeerResponseEvent | FinalPeerEvent | QueryErrorEvent | ProviderEvent | ValueEvent | AddPeerEvent | DialPeerEvent | PathEndedEvent\n\nexport interface RoutingTable {\n  size: number\n}\n\nexport interface PeerInfoMapper {\n  (peer: PeerInfo): PeerInfo\n}\n\nexport interface SetModeOptions extends AbortOptions {\n  force?: boolean\n}\n\nexport interface KadDHT {\n  /**\n   * This is the maximum size of the k-buckets and how many peers are looked up\n   * when searching for peers close to a key.\n   */\n  readonly k: number\n\n  /**\n   * Query concurrency factor - this controls how many peers we contact in\n   * parallel during a query.\n   */\n  readonly a: number\n\n  /**\n   * From section 4.4 of the S/Kademlia paper - this is how many disjoint paths\n   * are used during a query.\n   */\n  readonly d: number\n\n  /**\n   * Get a value from the DHT, the final ValueEvent will be the best value\n   */\n  get(key: Uint8Array, options?: RoutingOptions): AsyncIterable<QueryEvent>\n\n  /**\n   * Find providers of a given CID\n   */\n  findProviders(key: CID, options?: RoutingOptions): AsyncIterable<QueryEvent>\n\n  /**\n   * Find a peer on the DHT\n   */\n  findPeer(id: PeerId, options?: RoutingOptions): AsyncIterable<QueryEvent>\n\n  /**\n   * Find the closest peers to the passed key\n   */\n  getClosestPeers(key: Uint8Array, options?: RoutingOptions): AsyncIterable<QueryEvent>\n\n  /**\n   * Store provider records for the passed CID on the DHT pointing to us\n   */\n  provide(key: CID, options?: RoutingOptions): AsyncIterable<QueryEvent>\n\n  /**\n   * Provider records must be re-published every 24 hours - pass a previously\n   * provided CID here to not re-publish a record for it any more\n   */\n  cancelReprovide(key: CID, options?: AbortOptions): Promise<void>\n\n  /**\n   * Store the passed value under the passed key on the DHT\n   */\n  put(key: Uint8Array, value: Uint8Array, options?: RoutingOptions): AsyncIterable<QueryEvent>\n\n  /**\n   * Returns the mode this node is in\n   */\n  getMode(): 'client' | 'server'\n\n  /**\n   * If 'server' this node will respond to DHT queries, if 'client' this node\n   * will not.\n   */\n  setMode(mode: 'client' | 'server', options?: SetModeOptions): Promise<void>\n\n  /**\n   * Force a routing table refresh\n   */\n  refreshRoutingTable(options?: AbortOptions): Promise<void>\n}\n\nexport interface SingleKadDHT extends KadDHT {\n  routingTable: RoutingTable\n}\n\n/**\n * A selector function takes a DHT key and a list of records and returns the\n * index of the best record in the list\n */\nexport interface SelectFn { (key: Uint8Array, records: Uint8Array[]): number }\n\n/**\n * A validator function takes a DHT key and the value of the record for that key\n * and throws if the record is invalid\n */\nexport interface ValidateFn { (key: Uint8Array, value: Uint8Array, options?: AbortOptions): Promise<void> }\n\n/**\n * Selectors are a map of key prefixes to selector functions\n */\nexport type Selectors = Record<string, SelectFn>\n\n/**\n * Validators are a map of key prefixes to validator functions\n */\nexport type Validators = Record<string, ValidateFn>\n\nexport interface ProvidersInit {\n  /**\n   * @default 256\n   */\n  cacheSize?: number\n  /**\n   * How often invalid records are cleaned in seconds\n   *\n   * @default 5_400\n   */\n  cleanupInterval?: number\n  /**\n   * How long is a provider valid for in seconds\n   *\n   * @default 86_400\n   */\n  provideValidity?: number\n}\n\nexport interface ReProvideInit {\n  /**\n   * How many re-provide operations to run simultaneously\n   *\n   * @default 10\n   */\n  concurrency?: number\n\n  /**\n   * How long to let the re-provide queue grow\n   *\n   * @default 16_384\n   */\n  maxQueueSize?: number\n\n  /**\n   * How long before the record expiry to re-provide in ms\n   *\n   * @default 86_400_000 (24 hours)\n   */\n  threshold?: number\n\n  /**\n   * How often to check which records need re-providing in ms\n   *\n   * @default 3_600_000 (1 hour)\n   */\n  interval?: number\n\n  /**\n   * How long provider records are valid for in ms\n   *\n   * @default 172_800_000 (48 hours)\n   */\n  validity?: number\n}\n\nexport interface KadDHTInit {\n  /**\n   * How many peers to store in each kBucket. Once there are more than this\n   * number of peers for a given prefix in a kBucket, the node will start to\n   * ping existing peers to see if they are still online - if they are offline\n   * they will be evicted and the new peer added.\n   *\n   * @default 20\n   */\n  kBucketSize?: number\n\n  /**\n   * The threshold at which a kBucket will be split into two smaller kBuckets.\n   *\n   * KBuckets will not be split once the maximum trie depth is reached\n   * (controlled by the `prefixLength` option) so one can replicate go-libp2p's\n   * accelerated DHT client by (for example) setting `kBucketSize` to `Infinity`\n   * and `kBucketSplitThreshold` to 20.\n   *\n   * @default kBucketSize\n   */\n  kBucketSplitThreshold?: number\n\n  /**\n   * How many peers are queried in parallel during a query.\n   *\n   * @default 3\n   */\n  alpha?: number\n\n  /**\n   * How many disjoint paths are used during a query\n   *\n   * @see https://telematics.tm.kit.edu/publications/Files/267/SKademlia_2007.pdf - section 4.4\n   *\n   * @default alpha\n   */\n  disjointPaths?: number\n\n  /**\n   * How many bits of the KAD-ID of peers to use when creating the routing\n   * table.\n   *\n   * The routing table is a binary trie with peers stored in the leaf nodes. The\n   * larger this number gets, the taller the trie can grow and the more peers\n   * can be stored.\n   *\n   * Storing more peers means fewer lookups (and network operations) are needed\n   * to locate a certain peer, but also that more memory is consumed and more\n   * CPU while responding to queries (e.g. with more peers in the table sorting\n   * the closest peers becomes more expensive) and CPU/network during table\n   * maintenance (e.g. checking peers are still online).\n   *\n   * The larger this value, the more prefix bits must be the same for a peer to\n   * be stored in a KAD bucket, so the fewer nodes that bucket is likely to\n   * contain.\n   *\n   * The total number of peers in the table is a factor of `prefixLength` and\n   * `kBucketSize`:\n   *\n   * ```\n   * (2 ^ prefixLength) * kBucketSize\n   * ```\n   *\n   * @default 6\n   */\n  prefixLength?: number\n\n  /**\n   * If true, only ever be a DHT client. If false, be a DHT client until told\n   * to be a DHT server via `setMode`.\n   *\n   * In general this should be left as the default because server mode will be\n   * selected automatically when libp2p establishes that the current node has\n   * a publicly dialable address.\n   *\n   * The exception to this is LAN-only DHT (e.g. for testing purposes) where it\n   * is safe to assume that the current node is dialable.\n   *\n   * @default false\n   */\n  clientMode?: boolean\n\n  /**\n   * Record selectors\n   */\n  selectors?: Selectors\n\n  /**\n   * Record validators\n   */\n  validators?: Validators\n\n  /**\n   * How often to query our own PeerId in order to ensure we have a\n   * good view on the KAD address space local to our PeerId\n   */\n  querySelfInterval?: number\n\n  /**\n   * During startup we run the self-query at a shorter interval to ensure\n   * the containing node can respond to queries quickly. Set this interval\n   * here in ms.\n   *\n   * @default 1000\n   */\n  initialQuerySelfInterval?: number\n\n  /**\n   * After startup by default all queries will be paused until there is at least\n   * one peer in the routing table.\n   *\n   * Pass true here to disable this behavior.\n   *\n   * @default false\n   */\n  allowQueryWithZeroPeers?: boolean\n\n  /**\n   * The network protocol to use\n   *\n   * @default \"/ipfs/kad/1.0.0\"\n   */\n  protocol?: string\n\n  /**\n   * The logging prefix to use\n   *\n   * @default \"libp2p:kad-dht\"\n   */\n  logPrefix?: string\n\n  /**\n   * The datastore prefix to use\n   *\n   * @default \"/dht\"\n   */\n  datastorePrefix?: string\n\n  /**\n   * The metrics prefix to use\n   *\n   * @default \"libp2p_kad_dht\"\n   */\n  metricsPrefix?: string\n\n  /**\n   * Settings for how long to wait in ms when pinging DHT peers to decide if\n   * they should be evicted from the routing table or not.\n   */\n  pingOldContactTimeout?: Omit<AdaptiveTimeoutInit, 'metricsName' | 'metrics'>\n\n  /**\n   * How many peers to ping in parallel when deciding if they should\n   * be evicted from the routing table or not\n   *\n   * @default 10\n   */\n  pingOldContactConcurrency?: number\n\n  /**\n   * How long the queue to ping peers is allowed to grow\n   *\n   * @default 100\n   */\n  pingOldContactMaxQueueSize?: number\n\n  /**\n   * Settings for how long to wait in ms when pinging DHT peers to decide if\n   * they should be added to the routing table or not.\n   */\n  pingNewContactTimeout?: Omit<AdaptiveTimeoutInit, 'metricsName' | 'metrics'>\n\n  /**\n   * How many peers to ping in parallel when deciding if they should be added to\n   * the routing table or not\n   *\n   * @default 10\n   */\n  pingNewContactConcurrency?: number\n\n  /**\n   * How long the queue to ping peers is allowed to grow\n   *\n   * @default 100\n   */\n  pingNewContactMaxQueueSize?: number\n\n  /**\n   * How many parallel incoming streams to allow on the DHT protocol per\n   * connection\n   *\n   * @default 32\n   */\n  maxInboundStreams?: number\n\n  /**\n   * How many parallel outgoing streams to allow on the DHT protocol per\n   * connection\n   *\n   * @default 64\n   */\n  maxOutboundStreams?: number\n\n  /**\n   * Initialization options for the Providers component\n   */\n  providers?: ProvidersInit\n\n  /**\n   * Initialization options for the Reprovider component\n   */\n  reprovide?: ReProvideInit\n\n  /**\n   * For every incoming and outgoing PeerInfo, override address configuration\n   * with this filter.\n   */\n  peerInfoMapper?(peer: PeerInfo): PeerInfo\n\n  /**\n   * Dynamic network timeout settings for sending messages to peers\n   */\n  networkDialTimeout?: Omit<AdaptiveTimeoutInit, 'metricsName' | 'metrics'>\n\n  /**\n   * When a peer that supports the KAD-DHT protocol connects we try to add it to\n   * the routing table. This setting is how long we will try to do that for in\n   * ms.\n   *\n   * @default 10_000\n   */\n  onPeerConnectTimeout?: number\n\n  /**\n   * When acting as a DHT server, all incoming RPC requests must complete within\n   * this timeout in ms otherwise the stream will be closed.\n   *\n   * @default 10_000\n   */\n  incomingMessageTimeout?: number\n}\n\nexport interface KadDHTComponents {\n  peerId: PeerId\n  privateKey: PrivateKey\n  registrar: Registrar\n  addressManager: AddressManager\n  peerStore: PeerStore\n  metrics?: Metrics\n  connectionManager: ConnectionManager\n  datastore: Datastore\n  events: TypedEventTarget<Libp2pEvents>\n  logger: ComponentLogger\n  ping: Ping\n}\n\n/**\n * Creates a custom DHT implementation, please ensure you pass a `protocol`\n * string as an option.\n */\nexport function kadDHT (init: KadDHTInit = {}): (components: KadDHTComponents) => KadDHT {\n  return (components: KadDHTComponents) => new KadDHTClass(components, init)\n}\n", "import type { Uint8ArrayList } from 'uint8arraylist'\n\ntype INITIATOR_NAME = 'NEW_STREAM' | 'MESSAGE' | 'CLOSE' | 'RESET'\ntype RECEIVER_NAME = 'MESSAGE' | 'CLOSE' | 'RESET'\ntype NAME = 'NEW_STREAM' | 'MESSAGE_INITIATOR' | 'CLOSE_INITIATOR' | 'RESET_INITIATOR' | 'MESSAGE_RECEIVER' | 'CLOSE_RECEIVER' | 'RESET_RECEIVER'\ntype CODE = 0 | 1 | 2 | 3 | 4 | 5 | 6\n\nexport enum MessageTypes {\n  NEW_STREAM = 0,\n  MESSAGE_RECEIVER = 1,\n  MESSAGE_INITIATOR = 2,\n  CLOSE_RECEIVER = 3,\n  CLOSE_INITIATOR = 4,\n  RESET_RECEIVER = 5,\n  RESET_INITIATOR = 6\n}\n\nexport const MessageTypeNames: Record<CODE, NAME> = Object.freeze({\n  0: 'NEW_STREAM',\n  1: 'MESSAGE_RECEIVER',\n  2: 'MESSAGE_INITIATOR',\n  3: 'CLOSE_RECEIVER',\n  4: 'CLOSE_INITIATOR',\n  5: 'RESET_RECEIVER',\n  6: 'RESET_INITIATOR'\n})\n\nexport const InitiatorMessageTypes: Record<INITIATOR_NAME, CODE> = Object.freeze({\n  NEW_STREAM: MessageTypes.NEW_STREAM,\n  MESSAGE: MessageTypes.MESSAGE_INITIATOR,\n  CLOSE: MessageTypes.CLOSE_INITIATOR,\n  RESET: MessageTypes.RESET_INITIATOR\n})\n\nexport const ReceiverMessageTypes: Record<RECEIVER_NAME, CODE> = Object.freeze({\n  MESSAGE: MessageTypes.MESSAGE_RECEIVER,\n  CLOSE: MessageTypes.CLOSE_RECEIVER,\n  RESET: MessageTypes.RESET_RECEIVER\n})\n\nexport interface NewStreamMessage {\n  id: number\n  type: MessageTypes.NEW_STREAM\n  data: Uint8ArrayList\n}\n\nexport interface MessageReceiverMessage {\n  id: number\n  type: MessageTypes.MESSAGE_RECEIVER\n  data: Uint8ArrayList\n}\n\nexport interface MessageInitiatorMessage {\n  id: number\n  type: MessageTypes.MESSAGE_INITIATOR\n  data: Uint8ArrayList\n}\n\nexport interface CloseReceiverMessage {\n  id: number\n  type: MessageTypes.CLOSE_RECEIVER\n}\n\nexport interface CloseInitiatorMessage {\n  id: number\n  type: MessageTypes.CLOSE_INITIATOR\n}\n\nexport interface ResetReceiverMessage {\n  id: number\n  type: MessageTypes.RESET_RECEIVER\n}\n\nexport interface ResetInitiatorMessage {\n  id: number\n  type: MessageTypes.RESET_INITIATOR\n}\n\nexport type Message = NewStreamMessage | MessageReceiverMessage | MessageInitiatorMessage | CloseReceiverMessage | CloseInitiatorMessage | ResetReceiverMessage | ResetInitiatorMessage\n", "import { InvalidMessageError } from '@libp2p/interface'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { MessageTypeNames, MessageTypes } from './message-types.js'\nimport type { Message } from './message-types.js'\n\nexport const MAX_MSG_SIZE = 1 << 20 // 1MB\nexport const MAX_MSG_QUEUE_SIZE = 4 << 20 // 4MB\n\ninterface MessageHeader {\n  id: number\n  type: keyof typeof MessageTypeNames\n  offset: number\n  length: number\n}\n\nexport class Decoder {\n  private readonly _buffer: Uint8ArrayList\n  private _headerInfo: MessageHeader | null\n  private readonly _maxMessageSize: number\n  private readonly _maxUnprocessedMessageQueueSize: number\n\n  constructor (maxMessageSize: number = MAX_MSG_SIZE, maxUnprocessedMessageQueueSize: number = MAX_MSG_QUEUE_SIZE) {\n    this._buffer = new Uint8ArrayList()\n    this._headerInfo = null\n    this._maxMessageSize = maxMessageSize\n    this._maxUnprocessedMessageQueueSize = maxUnprocessedMessageQueueSize\n  }\n\n  write (chunk: Uint8Array | Uint8ArrayList): Message[] {\n    if (chunk == null || chunk.length === 0) {\n      return []\n    }\n\n    this._buffer.append(chunk)\n\n    if (this._buffer.byteLength > this._maxUnprocessedMessageQueueSize) {\n      throw new InvalidMessageError('Unprocessed message queue size too large!')\n    }\n\n    const msgs: Message[] = []\n\n    while (this._buffer.length !== 0) {\n      if (this._headerInfo == null) {\n        try {\n          this._headerInfo = this._decodeHeader(this._buffer)\n        } catch (err: any) {\n          if (err.name === 'InvalidMessageError') {\n            throw err\n          }\n\n          break // We haven't received enough data yet\n        }\n      }\n\n      const { id, type, length, offset } = this._headerInfo\n      const bufferedDataLength = this._buffer.length - offset\n\n      if (bufferedDataLength < length) {\n        break // not enough data yet\n      }\n\n      const msg: any = {\n        id,\n        type\n      }\n\n      if (type === MessageTypes.NEW_STREAM || type === MessageTypes.MESSAGE_INITIATOR || type === MessageTypes.MESSAGE_RECEIVER) {\n        msg.data = this._buffer.sublist(offset, offset + length)\n      }\n\n      msgs.push(msg)\n\n      this._buffer.consume(offset + length)\n      this._headerInfo = null\n    }\n\n    return msgs\n  }\n\n  /**\n   * Attempts to decode the message header from the buffer\n   */\n  _decodeHeader (data: Uint8ArrayList): MessageHeader {\n    const {\n      value: h,\n      offset\n    } = readVarInt(data)\n    const {\n      value: length,\n      offset: end\n    } = readVarInt(data, offset)\n\n    const type = h & 7\n\n    // @ts-expect-error h is a number not a CODE\n    if (MessageTypeNames[type] == null) {\n      throw new Error(`Invalid type received: ${type}`)\n    }\n\n    // test message type varint + data length\n    if (length > this._maxMessageSize) {\n      throw new InvalidMessageError('Message size too large')\n    }\n\n    // @ts-expect-error h is a number not a CODE\n    return { id: h >> 3, type, offset: offset + end, length }\n  }\n}\n\nconst MSB = 0x80\nconst REST = 0x7F\n\nexport interface ReadVarIntResult {\n  value: number\n  offset: number\n}\n\nfunction readVarInt (buf: Uint8ArrayList, offset: number = 0): ReadVarIntResult {\n  let res = 0\n  let shift = 0\n  let counter = offset\n  let b: number\n  const l = buf.length\n\n  do {\n    if (counter >= l || shift > 49) {\n      offset = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf.get(counter++)\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  offset = counter - offset\n\n  return {\n    value: res,\n    offset\n  }\n}\n", "import * as varint from 'uint8-varint'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { allocUnsafe } from 'uint8arrays/alloc'\nimport { MessageTypes } from './message-types.js'\nimport type { Message } from './message-types.js'\nimport type { Source } from 'it-stream-types'\n\nconst POOL_SIZE = 10 * 1024\n\nclass Encoder {\n  private _pool: Uint8Array\n  private _poolOffset: number\n\n  constructor () {\n    this._pool = allocUnsafe(POOL_SIZE)\n    this._poolOffset = 0\n  }\n\n  /**\n   * Encodes the given message and adds it to the passed list\n   */\n  write (msg: Message, list: Uint8ArrayList): void {\n    const pool = this._pool\n    let offset = this._poolOffset\n\n    varint.encode(msg.id << 3 | msg.type, pool, offset)\n    offset += varint.encodingLength(msg.id << 3 | msg.type)\n\n    if ((msg.type === MessageTypes.NEW_STREAM || msg.type === MessageTypes.MESSAGE_INITIATOR || msg.type === MessageTypes.MESSAGE_RECEIVER) && msg.data != null) {\n      varint.encode(msg.data.length, pool, offset)\n      offset += varint.encodingLength(msg.data.length)\n    } else {\n      varint.encode(0, pool, offset)\n      offset += varint.encodingLength(0)\n    }\n\n    const header = pool.subarray(this._poolOffset, offset)\n\n    if (POOL_SIZE - offset < 100) {\n      this._pool = allocUnsafe(POOL_SIZE)\n      this._poolOffset = 0\n    } else {\n      this._poolOffset = offset\n    }\n\n    list.append(header)\n\n    if ((msg.type === MessageTypes.NEW_STREAM || msg.type === MessageTypes.MESSAGE_INITIATOR || msg.type === MessageTypes.MESSAGE_RECEIVER) && msg.data != null) {\n      list.append(msg.data)\n    }\n  }\n}\n\nconst encoder = new Encoder()\n\n/**\n * Encode and yield one or more messages\n */\nexport async function * encode (source: Source<Message>): AsyncGenerator<Uint8Array | Uint8ArrayList, void, undefined> {\n  for await (const message of source) {\n    const list = new Uint8ArrayList()\n    encoder.write(message, list)\n    yield list\n  }\n}\n", "/**\n * There was an error in the stream input buffer\n */\nexport class StreamInputBufferError extends Error {\n  constructor (message = 'Stream input buffer error') {\n    super(message)\n    this.name = 'StreamInputBufferError'\n  }\n}\n", "import { AbstractStream } from '@libp2p/utils/abstract-stream'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { MAX_MSG_SIZE } from './decode.js'\nimport { InitiatorMessageTypes, ReceiverMessageTypes } from './message-types.js'\nimport type { Message } from './message-types.js'\nimport type { ComponentLogger } from '@libp2p/interface'\nimport type { AbstractStreamInit } from '@libp2p/utils/abstract-stream'\n\nexport interface Options {\n  id: number\n  send(msg: Message): Promise<void>\n  name?: string\n  onEnd?(err?: Error): void\n  type?: 'initiator' | 'receiver'\n  maxMsgSize?: number\n  logger: ComponentLogger\n}\n\ninterface MplexStreamInit extends AbstractStreamInit {\n  streamId: number\n  name: string\n  send(msg: Message): Promise<void>\n\n  /**\n   * The maximum allowable data size, any data larger than this will be\n   * chunked and sent in multiple data messages\n   */\n  maxDataSize: number\n}\n\nexport class MplexStream extends AbstractStream {\n  private readonly name: string\n  private readonly streamId: number\n  private readonly send: (msg: Message) => Promise<void>\n  private readonly types: Record<string, number>\n  private readonly maxDataSize: number\n\n  constructor (init: MplexStreamInit) {\n    super(init)\n\n    this.types = init.direction === 'outbound' ? InitiatorMessageTypes : ReceiverMessageTypes\n    this.send = init.send\n    this.name = init.name\n    this.streamId = init.streamId\n    this.maxDataSize = init.maxDataSize\n  }\n\n  async sendNewStream (): Promise<void> {\n    await this.send({ id: this.streamId, type: InitiatorMessageTypes.NEW_STREAM, data: new Uint8ArrayList(uint8ArrayFromString(this.name)) })\n  }\n\n  async sendData (data: Uint8ArrayList): Promise<void> {\n    data = data.sublist()\n\n    while (data.byteLength > 0) {\n      const toSend = Math.min(data.byteLength, this.maxDataSize)\n      await this.send({\n        id: this.streamId,\n        type: this.types.MESSAGE,\n        data: data.sublist(0, toSend)\n      })\n\n      data.consume(toSend)\n    }\n  }\n\n  async sendReset (): Promise<void> {\n    await this.send({ id: this.streamId, type: this.types.RESET })\n  }\n\n  async sendCloseWrite (): Promise<void> {\n    await this.send({ id: this.streamId, type: this.types.CLOSE })\n  }\n\n  async sendCloseRead (): Promise<void> {\n    // mplex does not support close read, only close write\n  }\n}\n\nexport function createStream (options: Options): MplexStream {\n  const { id, name, send, onEnd, type = 'initiator', maxMsgSize = MAX_MSG_SIZE } = options\n\n  return new MplexStream({\n    id: type === 'initiator' ? (`i${id}`) : `r${id}`,\n    streamId: id,\n    name: `${name ?? id}`,\n    direction: type === 'initiator' ? 'outbound' : 'inbound',\n    maxDataSize: maxMsgSize,\n    onEnd,\n    send,\n    log: options.logger.forComponent(`libp2p:mplex:stream:${type}:${id}`)\n  })\n}\n", "import { TooManyOutboundProtocolStreamsError, MuxerClosedError } from '@libp2p/interface'\nimport { closeSource } from '@libp2p/utils/close-source'\nimport { RateLimiter } from '@libp2p/utils/rate-limiter'\nimport { pipe } from 'it-pipe'\nimport { pushable } from 'it-pushable'\nimport { toString as uint8ArrayToString } from 'uint8arrays'\nimport { Decoder } from './decode.js'\nimport { encode } from './encode.js'\nimport { StreamInputBufferError } from './errors.js'\nimport { MessageTypes, MessageTypeNames } from './message-types.js'\nimport { createStream } from './stream.js'\nimport type { MplexInit } from './index.js'\nimport type { Message } from './message-types.js'\nimport type { MplexStream } from './stream.js'\nimport type { AbortOptions, ComponentLogger, Logger, Stream, StreamMuxer, StreamMuxerInit } from '@libp2p/interface'\nimport type { Pushable } from 'it-pushable'\nimport type { Sink, Source } from 'it-stream-types'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nconst MAX_STREAMS_INBOUND_STREAMS_PER_CONNECTION = 1024\nconst MAX_STREAMS_OUTBOUND_STREAMS_PER_CONNECTION = 1024\nconst MAX_STREAM_BUFFER_SIZE = 1024 * 1024 * 4 // 4MB\nconst DISCONNECT_THRESHOLD = 5\nconst CLOSE_TIMEOUT = 500\n\nfunction printMessage (msg: Message): any {\n  const output: any = {\n    ...msg,\n    type: `${MessageTypeNames[msg.type]} (${msg.type})`\n  }\n\n  if (msg.type === MessageTypes.NEW_STREAM) {\n    output.data = uint8ArrayToString(msg.data instanceof Uint8Array ? msg.data : msg.data.subarray())\n  }\n\n  if (msg.type === MessageTypes.MESSAGE_INITIATOR || msg.type === MessageTypes.MESSAGE_RECEIVER) {\n    output.data = uint8ArrayToString(msg.data instanceof Uint8Array ? msg.data : msg.data.subarray(), 'base16')\n  }\n\n  return output\n}\n\nexport interface MplexComponents {\n  logger: ComponentLogger\n}\n\ninterface MplexStreamMuxerInit extends MplexInit, StreamMuxerInit {\n  /**\n   * The default timeout to use in ms when shutting down the muxer.\n   */\n  closeTimeout?: number\n}\n\nexport class MplexStreamMuxer implements StreamMuxer {\n  public protocol = '/mplex/6.7.0'\n\n  public sink: Sink<Source<Uint8ArrayList | Uint8Array>, Promise<void>>\n  public source: AsyncGenerator<Uint8ArrayList | Uint8Array>\n\n  private readonly log: Logger\n  private _streamId: number\n  private readonly _streams: { initiators: Map<number, MplexStream>, receivers: Map<number, MplexStream> }\n  private readonly _init: MplexStreamMuxerInit\n  private readonly _source: Pushable<Message>\n  private readonly closeController: AbortController\n  private readonly rateLimiter: RateLimiter\n  private readonly closeTimeout: number\n  private readonly logger: ComponentLogger\n\n  constructor (components: MplexComponents, init?: MplexStreamMuxerInit) {\n    init = init ?? {}\n\n    this.log = components.logger.forComponent('libp2p:mplex')\n    this.logger = components.logger\n    this._streamId = 0\n    this._streams = {\n      /**\n       * Stream to ids map\n       */\n      initiators: new Map<number, MplexStream>(),\n      /**\n       * Stream to ids map\n       */\n      receivers: new Map<number, MplexStream>()\n    }\n    this._init = init\n    this.closeTimeout = init.closeTimeout ?? CLOSE_TIMEOUT\n\n    /**\n     * An iterable sink\n     */\n    this.sink = this._createSink()\n\n    /**\n     * An iterable source\n     */\n    this._source = pushable<Message>({\n      objectMode: true,\n      onEnd: (): void => {\n        // the source has ended, we can't write any more messages to gracefully\n        // close streams so all we can do is destroy them\n        for (const stream of this._streams.initiators.values()) {\n          stream.destroy()\n        }\n\n        for (const stream of this._streams.receivers.values()) {\n          stream.destroy()\n        }\n      }\n    })\n    this.source = pipe(\n      this._source,\n      source => encode(source)\n    )\n\n    /**\n     * Close controller\n     */\n    this.closeController = new AbortController()\n\n    this.rateLimiter = new RateLimiter({\n      points: init.disconnectThreshold ?? DISCONNECT_THRESHOLD,\n      duration: 1\n    })\n  }\n\n  /**\n   * Returns a Map of streams and their ids\n   */\n  get streams (): Stream[] {\n    // Inbound and Outbound streams may have the same ids, so we need to make those unique\n    const streams: Stream[] = []\n    for (const stream of this._streams.initiators.values()) {\n      streams.push(stream)\n    }\n\n    for (const stream of this._streams.receivers.values()) {\n      streams.push(stream)\n    }\n    return streams\n  }\n\n  /**\n   * Initiate a new stream with the given name. If no name is\n   * provided, the id of the stream will be used.\n   */\n  newStream (name?: string): Stream {\n    if (this.closeController.signal.aborted) {\n      throw new MuxerClosedError('Muxer already closed')\n    }\n    const id = this._streamId++\n    name = name == null ? id.toString() : name.toString()\n    const registry = this._streams.initiators\n    return this._newStream({ id, name, type: 'initiator', registry })\n  }\n\n  /**\n   * Close or abort all tracked streams and stop the muxer\n   */\n  async close (options?: AbortOptions): Promise<void> {\n    if (this.closeController.signal.aborted) {\n      return\n    }\n\n    const signal = options?.signal ?? AbortSignal.timeout(this.closeTimeout)\n\n    try {\n      // try to gracefully close all streams\n      await Promise.all(\n        this.streams.map(async s => s.close({\n          signal\n        }))\n      )\n\n      this._source.end()\n\n      // try to gracefully close the muxer\n      await this._source.onEmpty({\n        signal\n      })\n\n      this.closeController.abort()\n    } catch (err: any) {\n      this.abort(err)\n    }\n  }\n\n  abort (err: Error): void {\n    if (this.closeController.signal.aborted) {\n      return\n    }\n\n    this.streams.forEach(s => { s.abort(err) })\n    this.closeController.abort(err)\n  }\n\n  /**\n   * Called whenever an inbound stream is created\n   */\n  _newReceiverStream (options: { id: number, name: string }): MplexStream {\n    const { id, name } = options\n    const registry = this._streams.receivers\n    return this._newStream({ id, name, type: 'receiver', registry })\n  }\n\n  _newStream (options: { id: number, name: string, type: 'initiator' | 'receiver', registry: Map<number, MplexStream> }): MplexStream {\n    const { id, name, type, registry } = options\n\n    this.log('new %s stream %s', type, id)\n\n    if (type === 'initiator' && this._streams.initiators.size === (this._init.maxOutboundStreams ?? MAX_STREAMS_OUTBOUND_STREAMS_PER_CONNECTION)) {\n      throw new TooManyOutboundProtocolStreamsError('Too many outbound streams open')\n    }\n\n    if (registry.has(id)) {\n      throw new Error(`${type} stream ${id} already exists!`)\n    }\n\n    const send = async (msg: Message): Promise<void> => {\n      if (this.log.enabled) {\n        this.log.trace('%s stream %s send', type, id, printMessage(msg))\n      }\n\n      this._source.push(msg)\n    }\n\n    const onEnd = (): void => {\n      this.log('%s stream with id %s and protocol %s ended', type, id, stream.protocol)\n      registry.delete(id)\n\n      if (this._init.onStreamEnd != null) {\n        this._init.onStreamEnd(stream)\n      }\n    }\n\n    const stream = createStream({ id, name, send, type, onEnd, maxMsgSize: this._init.maxMsgSize, logger: this.logger })\n    registry.set(id, stream)\n    return stream\n  }\n\n  /**\n   * Creates a sink with an abortable source. Incoming messages will\n   * also have their size restricted. All messages will be varint decoded.\n   */\n  _createSink (): Sink<Source<Uint8ArrayList | Uint8Array>, Promise<void>> {\n    const sink: Sink<Source<Uint8ArrayList | Uint8Array>, Promise<void>> = async source => {\n      const abortListener = (): void => {\n        closeSource(source, this.log)\n      }\n\n      this.closeController.signal.addEventListener('abort', abortListener)\n\n      try {\n        const decoder = new Decoder(this._init.maxMsgSize, this._init.maxUnprocessedMessageQueueSize)\n\n        for await (const chunk of source) {\n          for (const msg of decoder.write(chunk)) {\n            await this._handleIncoming(msg)\n          }\n        }\n\n        this._source.end()\n      } catch (err: any) {\n        this.log('error in sink', err)\n        this._source.end(err) // End the source with an error\n      } finally {\n        this.closeController.signal.removeEventListener('abort', abortListener)\n      }\n    }\n\n    return sink\n  }\n\n  async _handleIncoming (message: Message): Promise<void> {\n    const { id, type } = message\n\n    if (this.log.enabled) {\n      this.log.trace('incoming message', printMessage(message))\n    }\n\n    // Create a new stream?\n    if (message.type === MessageTypes.NEW_STREAM) {\n      if (this._streams.receivers.size === (this._init.maxInboundStreams ?? MAX_STREAMS_INBOUND_STREAMS_PER_CONNECTION)) {\n        this.log('too many inbound streams open')\n\n        // not going to allow this stream, send the reset message manually\n        // instead of setting it up just to tear it down\n        this._source.push({\n          id,\n          type: MessageTypes.RESET_RECEIVER\n        })\n\n        // if we've hit our stream limit, and the remote keeps trying to open\n        // more new streams, if they are doing this very quickly maybe they\n        // are attacking us and we should close the connection\n        try {\n          await this.rateLimiter.consume('new-stream', 1)\n        } catch {\n          this.log('rate limit hit when opening too many new streams over the inbound stream limit - closing remote connection')\n          // since there's no backpressure in mplex, the only thing we can really do to protect ourselves is close the connection\n          this.abort(new Error('Too many open streams'))\n          return\n        }\n\n        return\n      }\n\n      const stream = this._newReceiverStream({ id, name: uint8ArrayToString(message.data instanceof Uint8Array ? message.data : message.data.subarray()) })\n\n      if (this._init.onIncomingStream != null) {\n        this._init.onIncomingStream(stream)\n      }\n\n      return\n    }\n\n    const list = (type & 1) === 1 ? this._streams.initiators : this._streams.receivers\n    const stream = list.get(id)\n\n    if (stream == null) {\n      this.log('missing stream %s for message type %s', id, MessageTypeNames[type])\n\n      // if the remote keeps sending us messages for streams that have been\n      // closed or were never opened they may be attacking us so if they do\n      // this very quickly all we can do is close the connection\n      try {\n        await this.rateLimiter.consume('missing-stream', 1)\n      } catch {\n        this.log('rate limit hit when receiving messages for streams that do not exist - closing remote connection')\n        // since there's no backpressure in mplex, the only thing we can really do to protect ourselves is close the connection\n        this.abort(new Error('Too many messages for missing streams'))\n        return\n      }\n\n      return\n    }\n\n    const maxBufferSize = this._init.maxStreamBufferSize ?? MAX_STREAM_BUFFER_SIZE\n\n    try {\n      switch (type) {\n        case MessageTypes.MESSAGE_INITIATOR:\n        case MessageTypes.MESSAGE_RECEIVER:\n          if (stream.sourceReadableLength() > maxBufferSize) {\n            // Stream buffer has got too large, reset the stream\n            this._source.push({\n              id: message.id,\n              type: type === MessageTypes.MESSAGE_INITIATOR ? MessageTypes.RESET_RECEIVER : MessageTypes.RESET_INITIATOR\n            })\n\n            // Inform the stream consumer they are not fast enough\n            throw new StreamInputBufferError('Input buffer full - increase Mplex maxBufferSize to accommodate slow consumers')\n          }\n\n          // We got data from the remote, push it into our local stream\n          stream.sourcePush(message.data)\n          break\n        case MessageTypes.CLOSE_INITIATOR:\n        case MessageTypes.CLOSE_RECEIVER:\n          // The remote has stopped writing, so we can stop reading\n          stream.remoteCloseWrite()\n          break\n        case MessageTypes.RESET_INITIATOR:\n        case MessageTypes.RESET_RECEIVER:\n          // The remote has errored, stop reading and writing to the stream immediately\n          stream.reset()\n          break\n        default:\n          this.log('unknown message type %s', type)\n      }\n    } catch (err: any) {\n      this.log.error('error while processing message', err)\n      stream.abort(err)\n    }\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * This is a [simple stream multiplexer(https://docs.libp2p.io/concepts/multiplex/mplex/) that has been deprecated.\n *\n * Please use [@chainsafe/libp2p-yamux](https://www.npmjs.com/package/@chainsafe/libp2p-yamux) instead.\n *\n * @example\n *\n * ```TypeScript\n * import { mplex } from '@libp2p/mplex'\n * import { pipe } from 'it-pipe'\n *\n * const factory = mplex()\n *\n * const muxer = factory.createStreamMuxer(components, {\n *   onStream: stream => { // Receive a duplex stream from the remote\n *     // ...receive data from the remote and optionally send data back\n *   },\n *   onStreamEnd: stream => {\n *     // ...handle any tracking you may need of stream closures\n *   }\n * })\n *\n * pipe(conn, muxer, conn) // conn is duplex connection to another peer\n *\n * const stream = muxer.newStream() // Create a new duplex stream to the remote\n *\n * // Use the duplex stream to send some data to the remote...\n * pipe([1, 2, 3], stream)\n * ```\n */\n\nimport { serviceCapabilities } from '@libp2p/interface'\nimport { MplexStreamMuxer } from './mplex.js'\nimport type { MplexComponents } from './mplex.js'\nimport type { StreamMuxer, StreamMuxerFactory, StreamMuxerInit } from '@libp2p/interface'\n\nexport type { MplexComponents }\n\nexport interface MplexInit {\n  /**\n   * The maximum size of message that can be sent in one go in bytes.\n   * Messages larger than this will be split into multiple smaller\n   * messages. If we receive a message larger than this an error will\n   * be thrown and the connection closed.\n   *\n   * @default 1048576\n   */\n  maxMsgSize?: number\n\n  /**\n   * Constrains the size of the unprocessed message queue buffer.\n   * Before messages are deserialized, the raw bytes are buffered to ensure\n   * we have the complete message to deserialized. If the queue gets longer\n   * than this value an error will be thrown and the connection closed.\n   *\n   * @default 4194304\n   */\n  maxUnprocessedMessageQueueSize?: number\n\n  /**\n   * The maximum number of multiplexed streams that can be open at any\n   * one time. A request to open more than this will have a stream\n   * reset message sent immediately as a response for the newly opened\n   * stream id\n   *\n   * @default 1024\n   */\n  maxInboundStreams?: number\n\n  /**\n   * The maximum number of multiplexed streams that can be open at any\n   * one time. An attempt to open more than this will throw\n   *\n   * @default 1024\n   */\n  maxOutboundStreams?: number\n\n  /**\n   * Incoming stream messages are buffered until processed by the stream\n   * handler. If the buffer reaches this size in bytes the stream will\n   * be reset\n   *\n   * @default 4194304\n   */\n  maxStreamBufferSize?: number\n\n  /**\n   * When `maxInboundStreams` is hit, if the remote continues try to open\n   * more than this many new multiplexed streams per second the connection\n   * will be closed\n   *\n   * @default 5\n   */\n  disconnectThreshold?: number\n}\n\nclass Mplex implements StreamMuxerFactory {\n  public protocol = '/mplex/6.7.0'\n  private readonly _init: MplexInit\n  private readonly components: MplexComponents\n\n  constructor (components: MplexComponents, init: MplexInit = {}) {\n    this.components = components\n    this._init = init\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/mplex'\n\n  readonly [serviceCapabilities]: string[] = [\n    '@libp2p/stream-multiplexing'\n  ]\n\n  createStreamMuxer (init: StreamMuxerInit = {}): StreamMuxer {\n    return new MplexStreamMuxer(this.components, {\n      ...init,\n      ...this._init\n    })\n  }\n}\n\n/**\n * @deprecated mplex is deprecated as it has no flow control. Please use yamux instead.\n */\nexport function mplex (init: MplexInit = {}): (components: MplexComponents) => StreamMuxerFactory {\n  return (components) => new Mplex(components, init)\n}\n", "export const PING_PROTOCOL = '/ipfs/ping/1.0.0'\nexport const PING_LENGTH = 32\nexport const PROTOCOL_VERSION = '1.0.0'\nexport const PROTOCOL_NAME = 'ping'\nexport const PROTOCOL_PREFIX = 'ipfs'\nexport const TIMEOUT = 10000\n\n// See https://github.com/libp2p/specs/blob/d4b5fb0152a6bb86cfd9ea/ping/ping.md?plain=1#L38-L43\n// The dialing peer MUST NOT keep more than one outbound stream for the ping protocol per peer.\n// The listening peer SHOULD accept at most two streams per peer since cross-stream behavior is\n// non-linear and stream writes occur asynchronously. The listening peer may perceive the\n// dialing peer closing and opening the wrong streams (for instance, closing stream B and\n// opening stream A even though the dialing peer is opening stream B and closing stream A).\nexport const MAX_INBOUND_STREAMS = 2\nexport const MAX_OUTBOUND_STREAMS = 1\n", "import { randomBytes } from '@libp2p/crypto'\nimport { ProtocolError, TimeoutError, serviceCapabilities } from '@libp2p/interface'\nimport { byteStream } from 'it-byte-stream'\nimport { setMaxListeners } from 'main-event'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { PROTOCOL_PREFIX, PROTOCOL_NAME, PING_LENGTH, PROTOCOL_VERSION, TIMEOUT, MAX_INBOUND_STREAMS, MAX_OUTBOUND_STREAMS } from './constants.js'\nimport type { PingComponents, PingInit, Ping as PingInterface } from './index.js'\nimport type { AbortOptions, Logger, Stream, PeerId, Startable, IncomingStreamData } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport class Ping implements Startable, PingInterface {\n  public readonly protocol: string\n  private readonly components: PingComponents\n  private started: boolean\n  private readonly timeout: number\n  private readonly maxInboundStreams: number\n  private readonly maxOutboundStreams: number\n  private readonly runOnLimitedConnection: boolean\n  private readonly log: Logger\n\n  constructor (components: PingComponents, init: PingInit = {}) {\n    this.components = components\n    this.log = components.logger.forComponent('libp2p:ping')\n    this.started = false\n    this.protocol = `/${init.protocolPrefix ?? PROTOCOL_PREFIX}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`\n    this.timeout = init.timeout ?? TIMEOUT\n    this.maxInboundStreams = init.maxInboundStreams ?? MAX_INBOUND_STREAMS\n    this.maxOutboundStreams = init.maxOutboundStreams ?? MAX_OUTBOUND_STREAMS\n    this.runOnLimitedConnection = init.runOnLimitedConnection ?? true\n\n    this.handleMessage = this.handleMessage.bind(this)\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/ping'\n\n  readonly [serviceCapabilities]: string[] = [\n    '@libp2p/ping'\n  ]\n\n  async start (): Promise<void> {\n    await this.components.registrar.handle(this.protocol, this.handleMessage, {\n      maxInboundStreams: this.maxInboundStreams,\n      maxOutboundStreams: this.maxOutboundStreams,\n      runOnLimitedConnection: this.runOnLimitedConnection\n    })\n    this.started = true\n  }\n\n  async stop (): Promise<void> {\n    await this.components.registrar.unhandle(this.protocol)\n    this.started = false\n  }\n\n  isStarted (): boolean {\n    return this.started\n  }\n\n  /**\n   * A handler to register with Libp2p to process ping messages\n   */\n  handleMessage (data: IncomingStreamData): void {\n    this.log('incoming ping from %p', data.connection.remotePeer)\n\n    const { stream } = data\n    const start = Date.now()\n    const bytes = byteStream(stream)\n    let pinged = false\n\n    Promise.resolve().then(async () => {\n      while (true) {\n        const signal = AbortSignal.timeout(this.timeout)\n        setMaxListeners(Infinity, signal)\n        signal.addEventListener('abort', () => {\n          stream?.abort(new TimeoutError('ping timeout'))\n        })\n\n        const buf = await bytes.read({\n          bytes: PING_LENGTH,\n          signal\n        })\n        await bytes.write(buf, {\n          signal\n        })\n\n        pinged = true\n      }\n    })\n      .catch(err => {\n        // ignore the error if we've processed at least one ping, the remote\n        // closed the stream and we handled or are handling the close cleanly\n        if (pinged && err.name === 'UnexpectedEOFError' && stream.readStatus !== 'ready') {\n          return\n        }\n\n        this.log.error('incoming ping from %p failed with error - %e', data.connection.remotePeer, err)\n        stream?.abort(err)\n      })\n      .finally(() => {\n        const ms = Date.now() - start\n        this.log('incoming ping from %p complete in %dms', data.connection.remotePeer, ms)\n\n        const signal = AbortSignal.timeout(this.timeout)\n        setMaxListeners(Infinity, signal)\n\n        stream.close({\n          signal\n        })\n          .catch(err => {\n            this.log.error('error closing ping stream from %p - %e', data.connection.remotePeer, err)\n            stream?.abort(err)\n          })\n      })\n  }\n\n  /**\n   * Ping a given peer and wait for its response, getting the operation latency.\n   */\n  async ping (peer: PeerId | Multiaddr | Multiaddr[], options: AbortOptions = {}): Promise<number> {\n    this.log('pinging %p', peer)\n\n    const start = Date.now()\n    const data = randomBytes(PING_LENGTH)\n    const connection = await this.components.connectionManager.openConnection(peer, options)\n    let stream: Stream | undefined\n\n    if (options.signal == null) {\n      const signal = AbortSignal.timeout(this.timeout)\n\n      options = {\n        ...options,\n        signal\n      }\n    }\n\n    try {\n      stream = await connection.newStream(this.protocol, {\n        ...options,\n        runOnLimitedConnection: this.runOnLimitedConnection\n      })\n\n      const bytes = byteStream(stream)\n\n      const [, result] = await Promise.all([\n        bytes.write(data, options),\n        bytes.read({\n          ...options,\n          bytes: PING_LENGTH\n        })\n      ])\n\n      const ms = Date.now() - start\n\n      if (!uint8ArrayEquals(data, result.subarray())) {\n        throw new ProtocolError(`Received wrong ping ack after ${ms}ms`)\n      }\n\n      this.log('ping %p complete in %dms', connection.remotePeer, ms)\n\n      return ms\n    } catch (err: any) {\n      this.log.error('error while pinging %p', connection.remotePeer, err)\n\n      stream?.abort(err)\n\n      throw err\n    } finally {\n      if (stream != null) {\n        await stream.close(options)\n      }\n    }\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * The ping service implements the [libp2p ping spec](https://github.com/libp2p/specs/blob/master/ping/ping.md) allowing you to make a latency measurement to a remote peer.\n *\n * @example\n *\n * ```typescript\n * import { createLibp2p } from 'libp2p'\n * import { ping } from '@libp2p/ping'\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const node = await createLibp2p({\n *   services: {\n *     ping: ping()\n *   }\n * })\n *\n * const rtt = await node.services.ping.ping(multiaddr('/ip4/...'))\n *\n * console.info(rtt)\n * ```\n */\n\nimport { Ping as PingClass } from './ping.js'\nimport type { AbortOptions, ComponentLogger, PeerId } from '@libp2p/interface'\nimport type { ConnectionManager, Registrar } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport interface Ping {\n  ping(peer: PeerId | Multiaddr | Multiaddr[], options?: AbortOptions): Promise<number>\n}\n\n/**\n * @deprecated Use the `Ping` export instead\n */\nexport type PingService = Ping\n\nexport interface PingInit {\n  protocolPrefix?: string\n  maxInboundStreams?: number\n  maxOutboundStreams?: number\n  runOnLimitedConnection?: boolean\n\n  /**\n   * How long we should wait for a ping response\n   */\n  timeout?: number\n}\n\n/**\n * @deprecated Use the `PingInit` export instead\n */\nexport type PingServiceInit = PingInit\n\nexport interface PingComponents {\n  registrar: Registrar\n  connectionManager: ConnectionManager\n  logger: ComponentLogger\n}\n\nexport function ping (init: PingInit = {}): (components: PingComponents) => Ping {\n  return (components) => new PingClass(components, init)\n}\n\nexport { PING_PROTOCOL } from './constants.js'\n", "import type { Matcher, MultiaddrMatcher } from './index.js'\nimport type { Multiaddr, Component } from '@multiformats/multiaddr'\n\n/**\n * Matches a multiaddr component with the specified code but no value\n */\nexport const code = (code: number): Matcher => {\n  return {\n    match: (vals) => {\n      const component = vals[0]\n\n      if (component == null) {\n        return false\n      }\n\n      if (component.code !== code) {\n        return false\n      }\n\n      if (component.value != null) {\n        return false\n      }\n\n      return vals.slice(1)\n    }\n  }\n}\n\n/**\n * Matches a multiaddr component with the specified code and value. If the value\n * is omitted any non-undefined value is matched.\n */\nexport const value = (code: number, value?: string): Matcher => {\n  return {\n    match: (vals) => {\n      const component = vals[0]\n\n      if (component?.code !== code) {\n        return false\n      }\n\n      if (component.value == null) {\n        return false\n      }\n\n      if (value != null && component.value !== value) {\n        return false\n      }\n\n      return vals.slice(1)\n    }\n  }\n}\n\n/**\n * An optional matcher\n */\nexport const optional = (matcher: Matcher): Matcher => {\n  return {\n    match: (vals) => {\n      const result = matcher.match(vals)\n\n      if (result === false) {\n        return vals\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Matches any one of the passed matches\n */\nexport const or = (...matchers: Matcher[]): Matcher => {\n  return {\n    match: (vals) => {\n      let matches: Component[] | undefined\n\n      for (const matcher of matchers) {\n        const result = matcher.match(vals)\n\n        // no match\n        if (result === false) {\n          continue\n        }\n\n        // choose greediest matcher\n        if (matches == null || result.length < matches.length) {\n          matches = result\n        }\n      }\n\n      if (matches == null) {\n        return false\n      }\n\n      return matches\n    }\n  }\n}\n\n/**\n * Matches all of the passed matchers\n */\nexport const and = (...matchers: Matcher[]): Matcher => {\n  return {\n    match: (vals) => {\n      for (const matcher of matchers) {\n        // pass what's left of the array\n        const result = matcher.match(vals)\n\n        // no match\n        if (result === false) {\n          return false\n        }\n\n        vals = result\n      }\n\n      return vals\n    }\n  }\n}\n\n/**\n * Create a multiaddr matcher from the passed component matchers\n */\nexport function fmt (...matchers: Matcher[]): MultiaddrMatcher {\n  function match (ma?: Multiaddr): Component[] | false {\n    if (ma == null) {\n      return false\n    }\n\n    let parts = ma.getComponents()\n\n    for (const matcher of matchers) {\n      const result = matcher.match(parts)\n\n      if (result === false) {\n        return false\n      }\n\n      parts = result\n    }\n\n    return parts\n  }\n\n  function matches (ma?: Multiaddr): boolean {\n    const result = match(ma)\n\n    return result !== false\n  }\n\n  function exactMatch (ma?: Multiaddr): boolean {\n    const result = match(ma)\n\n    if (result === false) {\n      return false\n    }\n\n    return result.length === 0\n  }\n\n  return {\n    matchers,\n    matches,\n    exactMatch\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * This module exports various matchers that can be used to infer the type of a\n * passed multiaddr.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/dnsaddr/example.org')\n *\n * DNS.matches(ma) // true - this is a multiaddr with a DNS address at the start\n * ```\n *\n * @example\n *\n * The default matching behaviour ignores any subsequent tuples in the multiaddr.\n * If you want stricter matching you can use `.exactMatch`:\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS, Circuit } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/dnsaddr/example.org/p2p/QmFoo/p2p-circuit/p2p/QmBar')\n *\n * DNS.exactMatch(ma) // false - this address has extra tuples after the DNS component\n * Circuit.matches(ma) // true\n * Circuit.exactMatch(ma) // true - the extra tuples are circuit relay related\n * ```\n */\n\nimport { CODE_P2P, CODE_DNS4, CODE_DNS6, CODE_DNSADDR, CODE_DNS, CODE_IP4, CODE_IP6, CODE_TCP, CODE_UDP, CODE_QUIC, CODE_QUIC_V1, CODE_WS, CODE_WSS, CODE_TLS, CODE_SNI, CODE_WEBRTC_DIRECT, CODE_CERTHASH, CODE_WEBTRANSPORT, CODE_P2P_CIRCUIT, CODE_WEBRTC, CODE_HTTP, CODE_UNIX, CODE_HTTPS, CODE_MEMORY, CODE_IP6ZONE, CODE_IPCIDR } from '@multiformats/multiaddr'\nimport { and, or, optional, fmt, code, value } from './utils.js'\nimport type { Multiaddr, Component } from '@multiformats/multiaddr'\n\n/**\n * A matcher accepts multiaddr components and either fails to match and returns\n * false or returns a sublist of unmatched components\n */\nexport interface Matcher {\n  match(parts: Component[]): Component[] | false\n}\n\n/**\n * A MultiaddrMatcher allows interpreting a multiaddr as a certain type of\n * multiaddr\n */\nexport interface MultiaddrMatcher {\n  /**\n   * The matchers that make up this MultiaddrMatcher - useful if you want to\n   * make your own custom matchers\n   */\n  matchers: Matcher[]\n\n  /**\n   * Returns true if the passed multiaddr can be treated as this type of\n   * multiaddr\n   */\n  matches(ma?: Multiaddr): boolean\n\n  /**\n   * Returns true if the passed multiaddr terminates as this type of\n   * multiaddr\n   */\n  exactMatch(ma?: Multiaddr): boolean\n}\n\n/**\n * Matches PeerId addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { PEER_ID } from '@multiformats/multiaddr-matcher'\n *\n * PEER_ID.matches(multiaddr('/p2p/Qmfoo')) // true\n * PEER_ID.matches(multiaddr('/ipfs/Qmfoo')) // true\n * ```\n */\nconst _PEER_ID = value(CODE_P2P)\n\nexport const PEER_ID = fmt(_PEER_ID)\n\n/**\n * DNS matchers\n */\nconst _DNS4 = value(CODE_DNS4)\nconst _DNS6 = value(CODE_DNS6)\nconst _DNSADDR = value(CODE_DNSADDR)\nconst _DNS = value(CODE_DNS)\n\n/**\n * Matches dns4 addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS4 } from '@multiformats/multiaddr-matcher'\n *\n * DNS4.matches(multiaddr('/dns4/example.org')) // true\n * ```\n */\nexport const DNS4 = fmt(_DNS4, optional(value(CODE_P2P)))\n\n/**\n * Matches dns6 addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS6 } from '@multiformats/multiaddr-matcher'\n *\n * DNS6.matches(multiaddr('/dns6/example.org')) // true\n * ```\n */\nexport const DNS6 = fmt(_DNS6, optional(value(CODE_P2P)))\n\n/**\n * Matches dnsaddr addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNSADDR } from '@multiformats/multiaddr-matcher'\n *\n * DNSADDR.matches(multiaddr('/dnsaddr/example.org')) // true\n * DNSADDR.matches(multiaddr('/dnsaddr/example.org/p2p/Qmfoo')) // true\n * ```\n */\nexport const DNSADDR = fmt(_DNSADDR, optional(value(CODE_P2P)))\n\n/**\n * Matches any dns address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS } from '@multiformats/multiaddr-matcher'\n *\n * DNS.matches(multiaddr('/dnsaddr/example.org')) // true\n * DNS.matches(multiaddr('/dns4/example.org')) // true\n * DNS.matches(multiaddr('/dns6/example.org')) // true\n * DNS.matches(multiaddr('/dns6/example.org/p2p/Qmfoo')) // true\n * ```\n */\nexport const DNS = fmt(or(_DNS, _DNSADDR, _DNS4, _DNS6), optional(value(CODE_P2P)))\n\nconst _IP4 = and(\n  value(CODE_IP4),\n  optional(value(CODE_IPCIDR))\n)\nconst _IP6 = and(\n  optional(value(CODE_IP6ZONE)),\n  value(CODE_IP6),\n  optional(value(CODE_IPCIDR))\n)\nconst _IP = or(_IP4, _IP6)\n\nconst _IP_OR_DOMAIN = or(_IP, _DNS, _DNS4, _DNS6, _DNSADDR)\n\n/**\n * A matcher for addresses that start with IP or DNS tuples.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP_OR_DOMAIN } from '@multiformats/multiaddr-matcher'\n *\n * IP_OR_DOMAIN.matches(multiaddr('/ip4/123.123.123.123')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/ip4/123.123.123.123/p2p/QmFoo')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/dns/example.com/p2p/QmFoo')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/p2p/QmFoo')) // false\n * ```\n */\nexport const IP_OR_DOMAIN = fmt(or(_IP, and(or(_DNS, _DNSADDR, _DNS4, _DNS6), optional(value(CODE_P2P)))))\n\n/**\n * Matches ip4 addresses.\n *\n * Use {@link IP IP} instead to match any ip4/ip6 address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP4 } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/ip4/123.123.123.123')\n *\n * IP4.matches(ma) // true\n * ```\n */\nexport const IP4 = fmt(_IP4)\n\n/**\n * Matches ip6 addresses.\n *\n * Use {@link IP IP} instead to match any ip4/ip6 address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP6 } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/ip6/fe80::1cc1:a3b8:322f:cf22')\n *\n * IP6.matches(ma) // true\n * ```\n */\nexport const IP6 = fmt(_IP6)\n\n/**\n * Matches ip4 or ip6 addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP } from '@multiformats/multiaddr-matcher'\n *\n * IP.matches(multiaddr('/ip4/123.123.123.123')) // true\n * IP.matches(multiaddr('/ip6/fe80::1cc1:a3b8:322f:cf22')) // true\n * ```\n */\nexport const IP = fmt(_IP)\n\nconst _TCP = and(_IP_OR_DOMAIN, value(CODE_TCP))\nconst _UDP = and(_IP_OR_DOMAIN, value(CODE_UDP))\n\n/**\n * Matches TCP addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { TCP } from '@multiformats/multiaddr-matcher'\n *\n * TCP.matches(multiaddr('/ip4/123.123.123.123/tcp/1234')) // true\n * ```\n */\nexport const TCP = fmt(and(_TCP, optional(value(CODE_P2P))))\n\n/**\n * Matches UDP addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { UDP } from '@multiformats/multiaddr-matcher'\n *\n * UDP.matches(multiaddr('/ip4/123.123.123.123/udp/1234')) // true\n * ```\n */\nexport const UDP = fmt(_UDP)\n\nconst _QUIC = and(_UDP, code(CODE_QUIC), optional(value(CODE_P2P)))\nconst _QUIC_V1 = and(_UDP, code(CODE_QUIC_V1), optional(value(CODE_P2P)))\n\nconst QUIC_V0_OR_V1 = or(_QUIC, _QUIC_V1)\n\n/**\n * Matches QUIC addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { QUIC } from '@multiformats/multiaddr-matcher'\n *\n * QUIC.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic')) // true\n * ```\n */\nexport const QUIC = fmt(_QUIC)\n\n/**\n * Matches QUICv1 addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { QUIC_V1 } from '@multiformats/multiaddr-matcher'\n *\n * QUIC_V1.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic-v1')) // true\n * ```\n */\nexport const QUIC_V1 = fmt(_QUIC_V1)\n\nconst _WEB = or(\n  _IP_OR_DOMAIN,\n  _TCP,\n  _UDP,\n  _QUIC,\n  _QUIC_V1\n)\n\nconst _WebSockets = or(\n  and(_WEB, code(CODE_WS), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches WebSocket addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebSockets } from '@multiformats/multiaddr-matcher'\n *\n * WebSockets.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/ws')) // true\n * ```\n */\nexport const WebSockets = fmt(_WebSockets)\n\nconst _WebSocketsSecure = or(\n  and(_WEB, code(CODE_WSS), optional(value(CODE_P2P))),\n  and(_WEB, code(CODE_TLS), optional(value(CODE_SNI)), code(CODE_WS), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches secure WebSocket addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebSocketsSecure } from '@multiformats/multiaddr-matcher'\n *\n * WebSocketsSecure.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/wss')) // true\n * ```\n */\nexport const WebSocketsSecure = fmt(_WebSocketsSecure)\n\nconst _WebRTCDirect = and(_UDP, code(CODE_WEBRTC_DIRECT), optional(value(CODE_CERTHASH)), optional(value(CODE_CERTHASH)), optional(value(CODE_P2P)))\n\n/**\n * Matches WebRTC-direct addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTCDirect } from '@multiformats/multiaddr-matcher'\n *\n * WebRTCDirect.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmFoo/webrtc-direct/certhash/u....')) // true\n * ```\n */\nexport const WebRTCDirect = fmt(_WebRTCDirect)\n\nconst _WebTransport = and(_QUIC_V1, code(CODE_WEBTRANSPORT), optional(value(CODE_CERTHASH)), optional(value(CODE_CERTHASH)), optional(value(CODE_P2P)))\n\n/**\n * Matches WebTransport addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTCDirect } from '@multiformats/multiaddr-matcher'\n *\n * WebRTCDirect.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic-v1/webtransport/certhash/u..../certhash/u..../p2p/QmFoo')) // true\n * ```\n */\nexport const WebTransport = fmt(_WebTransport)\n\nconst _P2P = or(\n  _WebSockets,\n  _WebSocketsSecure,\n  and(_TCP, optional(value(CODE_P2P))),\n  and(QUIC_V0_OR_V1, optional(value(CODE_P2P))),\n  and(_IP_OR_DOMAIN, optional(value(CODE_P2P))),\n  _WebRTCDirect,\n  _WebTransport,\n  value(CODE_P2P)\n)\n\n/**\n * Matches peer addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { P2P } from '@multiformats/multiaddr-matcher'\n *\n * P2P.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmFoo')) // true\n * ```\n */\nexport const P2P = fmt(_P2P)\n\nconst _Circuit = and(_P2P, code(CODE_P2P_CIRCUIT), value(CODE_P2P))\n\n/**\n * Matches circuit relay addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Circuit } from '@multiformats/multiaddr-matcher'\n *\n * Circuit.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmRelay/p2p-circuit/p2p/QmTarget')) // true\n * ```\n */\nexport const Circuit = fmt(_Circuit)\n\nconst _WebRTC = or(\n  and(_P2P, code(CODE_P2P_CIRCUIT), code(CODE_WEBRTC), optional(value(CODE_P2P))),\n  and(_P2P, code(CODE_WEBRTC), optional(value(CODE_P2P))),\n  and(code(CODE_WEBRTC), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches WebRTC addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTC } from '@multiformats/multiaddr-matcher'\n *\n * WebRTC.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmRelay/p2p-circuit/webrtc/p2p/QmTarget')) // true\n * ```\n */\nexport const WebRTC = fmt(_WebRTC)\n\nconst _HTTP = or(\n  and(_IP_OR_DOMAIN, value(CODE_TCP), code(CODE_HTTP), optional(value(CODE_P2P))),\n  and(_IP_OR_DOMAIN, code(CODE_HTTP), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches HTTP addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { HTTP } from '@multiformats/multiaddr-matcher'\n *\n * HTTP.matches(multiaddr('/dns/example.org/http')) // true\n * ```\n */\nexport const HTTP = fmt(_HTTP)\n\nconst _HTTPS = and(_IP_OR_DOMAIN, or(\n  and(value(CODE_TCP, '443'), code(CODE_HTTP)),\n  and(value(CODE_TCP), code(CODE_HTTPS)),\n  and(value(CODE_TCP), code(CODE_TLS), code(CODE_HTTP)),\n  and(code(CODE_TLS), code(CODE_HTTP)),\n  code(CODE_TLS),\n  code(CODE_HTTPS)\n),\noptional(value(CODE_P2P))\n)\n\n/**\n * Matches HTTPS addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { HTTP } from '@multiformats/multiaddr-matcher'\n *\n * HTTP.matches(multiaddr('/dns/example.org/tls/http')) // true\n * ```\n */\nexport const HTTPS = fmt(_HTTPS)\n\nconst _Memory = or(\n  and(value(CODE_MEMORY), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches Memory addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Memory } from '@multiformats/multiaddr-matcher'\n *\n * Memory.matches(multiaddr('/memory/0xDEADBEEF')) // true\n * ```\n */\nexport const Memory = fmt(_Memory)\n\nconst _Unix = or(\n  and(value(CODE_UNIX), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches Unix addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Unix } from '@multiformats/multiaddr-matcher'\n *\n * Unix.matches(multiaddr('/unix/%2Fpath%2Fto%2Funix.socket')) // true\n * ```\n */\nexport const Unix = fmt(_Unix)\n", "import { decodeMessage, encodeMessage, enumeration, message } from 'protons-runtime'\nimport type { Codec, DecodeOptions } from 'protons-runtime'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface Message {\n  flag?: Message.Flag\n  message?: Uint8Array\n}\n\nexport namespace Message {\n  export enum Flag {\n    FIN = 'FIN',\n    STOP_SENDING = 'STOP_SENDING',\n    RESET = 'RESET',\n    FIN_ACK = 'FIN_ACK'\n  }\n\n  enum __FlagValues {\n    FIN = 0,\n    STOP_SENDING = 1,\n    RESET = 2,\n    FIN_ACK = 3\n  }\n\n  export namespace Flag {\n    export const codec = (): Codec<Flag> => {\n      return enumeration<Flag>(__FlagValues)\n    }\n  }\n\n  let _codec: Codec<Message>\n\n  export const codec = (): Codec<Message> => {\n    if (_codec == null) {\n      _codec = message<Message>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.flag != null) {\n          w.uint32(8)\n          Message.Flag.codec().encode(obj.flag, w)\n        }\n\n        if (obj.message != null) {\n          w.uint32(18)\n          w.bytes(obj.message)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {}\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.flag = Message.Flag.codec().decode(reader)\n              break\n            }\n            case 2: {\n              obj.message = reader.bytes()\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Message>): Uint8Array => {\n    return encodeMessage(obj, Message.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Message>): Message => {\n    return decodeMessage(buf, Message.codec(), opts)\n  }\n}\n", "import { encodingLength } from 'uint8-varint'\nimport { Message } from './private-to-public/pb/message.js'\n\n/**\n * STUN servers help clients discover their own public IPs.\n *\n * Using five or more servers causes warnings to be printed so\n * ensure we limit it to max x4\n *\n * @see https://gist.github.com/mondain/b0ec1cf5f60ae726202e\n */\nexport const DEFAULT_ICE_SERVERS = [\n  'stun:stun.l.google.com:19302',\n  'stun:global.stun.twilio.com:3478',\n  'stun:stun.cloudflare.com:3478',\n  'stun:stun.services.mozilla.com:3478'\n]\n\n/**\n * Characters that can be present in a ufrag\n */\nexport const UFRAG_ALPHABET = Array.from('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890')\n\n/**\n * Used to detect the version of the WebRTC Direct connection protocol in use\n */\nexport const UFRAG_PREFIX = 'libp2p+webrtc+v1/'\n\n/**\n * The multicodec code for webrtc-direct tuples\n */\nexport const CODEC_WEBRTC_DIRECT = 0x0118\n\n/**\n * The multicodec code for certhash tuples\n */\nexport const CODEC_CERTHASH = 0x01d2\n\n/**\n * How much can be buffered to the DataChannel at once\n */\nexport const MAX_BUFFERED_AMOUNT = 2 * 1024 * 1024\n\n/**\n * How long time we wait for the 'bufferedamountlow' event to be emitted\n */\nexport const BUFFERED_AMOUNT_LOW_TIMEOUT = 30 * 1000\n\n/**\n * Max message size that can be sent to the DataChannel. In browsers this is\n * 256KiB but go-libp2p and rust-libp2p only support 16KiB at the time of\n * writing.\n *\n * @see https://blog.mozilla.org/webrtc/large-data-channel-messages/\n * @see https://issues.webrtc.org/issues/40644524\n */\nexport const MAX_MESSAGE_SIZE = 16 * 1024\n\n/**\n * max protobuf overhead:\n *\n * ```\n * [message-length][flag-field-id+type][flag-field-length][flag-field][message-field-id+type][message-field-length][message-field]\n * ```\n */\nfunction calculateProtobufOverhead (maxMessageSize = MAX_MESSAGE_SIZE): number {\n  // these have a fixed size\n  const messageLength = encodingLength(maxMessageSize - encodingLength(maxMessageSize))\n  const flagField = 1 + encodingLength(Object.keys(Message.Flag).length - 1) // id+type/value\n  const messageFieldIdType = 1 // id+type\n  const available = maxMessageSize - messageLength - flagField - messageFieldIdType\n\n  // let message-length/message-data fill the rest of the message\n  const messageFieldLengthLength = encodingLength(available)\n\n  return messageLength + flagField + messageFieldIdType + messageFieldLengthLength\n}\n\n/**\n * The protobuf message overhead includes the maximum amount of all bytes in the\n * protobuf that aren't message field bytes\n */\nexport const PROTOBUF_OVERHEAD = calculateProtobufOverhead()\n\n/**\n * When closing streams we send a FIN then wait for the remote to\n * reply with a FIN_ACK. If that does not happen within this timeout\n * we close the stream anyway.\n */\nexport const FIN_ACK_TIMEOUT = 5_000\n\n/**\n * When sending data messages, if the channel is not in the \"open\" state, wait\n * this long for the \"open\" event to fire.\n */\nexport const OPEN_TIMEOUT = 5_000\n\n/**\n * When closing a stream, we wait for `bufferedAmount` to become 0 before\n * closing the underlying RTCDataChannel - this controls how long we wait in ms\n */\nexport const DATA_CHANNEL_DRAIN_TIMEOUT = 30_000\n\n/**\n * Set as the 'negotiated' muxer protocol name\n */\nexport const MUXER_PROTOCOL = '/webrtc'\n\n/**\n * The protocol used for the signalling stream protocol\n */\nexport const SIGNALING_PROTOCOL = '/webrtc-signaling/0.0.1'\n\n/**\n * Used to store generated certificates in the datastore\n */\nexport const DEFAULT_CERTIFICATE_DATASTORE_KEY = '/libp2p/webrtc-direct/certificate'\n\n/**\n * Used to store the certificate private key in the keychain\n */\nexport const DEFAULT_CERTIFICATE_PRIVATE_KEY_NAME = 'webrtc-direct-certificate-private-key'\n\n/**\n * The default type of certificate private key\n */\nexport const DEFAULT_CERTIFICATE_PRIVATE_KEY_TYPE = 'ECDSA'\n\n/**\n * How long the certificate is valid for\n */\nexport const DEFAULT_CERTIFICATE_LIFESPAN = 1_209_600_000\n\n/**\n * Renew the certificate this long before it expires\n */\nexport const DEFAULT_CERTIFICATE_RENEWAL_THRESHOLD = 86_400_000\n", "import { detect } from 'detect-browser'\nimport pDefer from 'p-defer'\nimport pTimeout from 'p-timeout'\nimport { DATA_CHANNEL_DRAIN_TIMEOUT, DEFAULT_ICE_SERVERS, UFRAG_ALPHABET, UFRAG_PREFIX } from './constants.js'\nimport type { PeerConnection } from '@ipshipyard/node-datachannel'\nimport type { LoggerOptions } from '@libp2p/interface'\n\nconst browser = detect()\nexport const isFirefox = ((browser != null) && browser.name === 'firefox')\n\nexport const nopSource = async function * nop (): AsyncGenerator<Uint8Array, any, unknown> {}\n\nexport const nopSink = async (_: any): Promise<void> => {}\n\nexport function drainAndClose (channel: RTCDataChannel, direction: string, drainTimeout: number = DATA_CHANNEL_DRAIN_TIMEOUT, options: LoggerOptions): void {\n  if (channel.readyState !== 'open') {\n    return\n  }\n\n  void Promise.resolve()\n    .then(async () => {\n      // wait for bufferedAmount to become zero\n      if (channel.bufferedAmount > 0) {\n        options.log('%s drain channel with %d buffered bytes', direction, channel.bufferedAmount)\n        const deferred = pDefer()\n        let drained = false\n\n        channel.bufferedAmountLowThreshold = 0\n\n        const closeListener = (): void => {\n          if (!drained) {\n            options.log('%s drain channel closed before drain', direction)\n            deferred.resolve()\n          }\n        }\n\n        channel.addEventListener('close', closeListener, {\n          once: true\n        })\n\n        channel.addEventListener('bufferedamountlow', () => {\n          drained = true\n          channel.removeEventListener('close', closeListener)\n          deferred.resolve()\n        })\n\n        await pTimeout(deferred.promise, {\n          milliseconds: drainTimeout\n        })\n      }\n    })\n    .then(async () => {\n      // only close if the channel is still open\n      if (channel.readyState === 'open') {\n        channel.close()\n      }\n    })\n    .catch(err => {\n      options.log.error('error closing outbound stream', err)\n    })\n}\n\nexport interface AbortPromiseOptions {\n  signal?: AbortSignal\n  message?: string\n}\n\nexport function isPeerConnection (obj: any): obj is PeerConnection {\n  return typeof obj.state === 'function'\n}\n\nexport async function getRtcConfiguration (config?: RTCConfiguration | (() => RTCConfiguration | Promise<RTCConfiguration>)): Promise<RTCConfiguration> {\n  config = config ?? {}\n\n  if (typeof config === 'function') {\n    config = await config()\n  }\n\n  config.iceServers = config.iceServers ?? DEFAULT_ICE_SERVERS.map(url => ({\n    urls: [\n      url\n    ]\n  }))\n\n  return config\n}\n\nexport const genUfrag = (len: number = 32): string => {\n  return UFRAG_PREFIX + [...Array(len)].map(() => UFRAG_ALPHABET.at(Math.floor(Math.random() * UFRAG_ALPHABET.length))).join('')\n}\n", "import { nopSink, nopSource } from './util.js'\nimport type { RTCPeerConnection } from './webrtc/index.js'\nimport type { ComponentLogger, Logger, MultiaddrConnection, MultiaddrConnectionTimeline, CounterGroup } from '@libp2p/interface'\nimport type { AbortOptions, Multiaddr } from '@multiformats/multiaddr'\nimport type { Source, Sink } from 'it-stream-types'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\ninterface WebRTCMultiaddrConnectionInit {\n  /**\n   * WebRTC Peer Connection\n   */\n  peerConnection: RTCPeerConnection\n\n  /**\n   * The multiaddr address used to communicate with the remote peer\n   */\n  remoteAddr: Multiaddr\n\n  /**\n   * Holds the relevant events timestamps of the connection\n   */\n  timeline: MultiaddrConnectionTimeline\n\n  /**\n   * Optional metrics counter group for this connection\n   */\n  metrics?: CounterGroup\n}\n\nexport interface WebRTCMultiaddrConnectionComponents {\n  logger: ComponentLogger\n}\n\nexport class WebRTCMultiaddrConnection implements MultiaddrConnection {\n  readonly log: Logger\n\n  /**\n   * WebRTC Peer Connection\n   */\n  readonly peerConnection: RTCPeerConnection\n\n  /**\n   * The multiaddr address used to communicate with the remote peer\n   */\n  remoteAddr: Multiaddr\n\n  /**\n   * Holds the life cycle times of the connection\n   */\n  timeline: MultiaddrConnectionTimeline\n\n  /**\n   * Optional metrics counter group for this connection\n   */\n  metrics?: CounterGroup\n\n  /**\n   * The stream source, a no-op as the transport natively supports multiplexing\n   */\n  source: AsyncGenerator<Uint8Array, any, unknown> = nopSource()\n\n  /**\n   * The stream destination, a no-op as the transport natively supports multiplexing\n   */\n  sink: Sink<Source<Uint8Array | Uint8ArrayList>, Promise<void>> = nopSink\n\n  constructor (components: WebRTCMultiaddrConnectionComponents, init: WebRTCMultiaddrConnectionInit) {\n    this.log = components.logger.forComponent('libp2p:webrtc:maconn')\n    this.remoteAddr = init.remoteAddr\n    this.timeline = init.timeline\n    this.peerConnection = init.peerConnection\n\n    const peerConnection = this.peerConnection\n    const initialState = peerConnection.connectionState\n\n    this.peerConnection.onconnectionstatechange = () => {\n      this.log.trace('peer connection state change', peerConnection.connectionState, 'initial state', initialState)\n\n      if (peerConnection.connectionState === 'disconnected' || peerConnection.connectionState === 'failed' || peerConnection.connectionState === 'closed') {\n        // nothing else to do but close the connection\n        this.timeline.close = Date.now()\n      }\n    }\n  }\n\n  async close (options?: AbortOptions): Promise<void> {\n    this.log.trace('closing connection')\n\n    this.peerConnection.close()\n    this.timeline.close = Date.now()\n    this.metrics?.increment({ close: true })\n  }\n\n  abort (err: Error): void {\n    this.log.error('closing connection due to error', err)\n\n    this.peerConnection.close()\n    this.timeline.close = Date.now()\n    this.metrics?.increment({ abort: true })\n  }\n}\n", "import { StreamStateError, TimeoutError } from '@libp2p/interface'\nimport { AbstractStream } from '@libp2p/utils/abstract-stream'\nimport { anySignal } from 'any-signal'\nimport * as lengthPrefixed from 'it-length-prefixed'\nimport { pushable } from 'it-pushable'\nimport pDefer from 'p-defer'\nimport pTimeout from 'p-timeout'\nimport { raceEvent } from 'race-event'\nimport { raceSignal } from 'race-signal'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { BUFFERED_AMOUNT_LOW_TIMEOUT, FIN_ACK_TIMEOUT, MAX_BUFFERED_AMOUNT, MAX_MESSAGE_SIZE, OPEN_TIMEOUT, PROTOBUF_OVERHEAD } from './constants.js'\nimport { Message } from './private-to-public/pb/message.js'\nimport type { DataChannelOptions } from './index.js'\nimport type { AbortOptions, ComponentLogger, Direction } from '@libp2p/interface'\nimport type { AbstractStreamInit } from '@libp2p/utils/abstract-stream'\nimport type { Pushable } from 'it-pushable'\nimport type { DeferredPromise } from 'p-defer'\n\nexport interface WebRTCStreamInit extends AbstractStreamInit, DataChannelOptions {\n  /**\n   * The network channel used for bidirectional peer-to-peer transfers of\n   * arbitrary data\n   *\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel}\n   */\n  channel: RTCDataChannel\n\n  logger: ComponentLogger\n}\n\nexport class WebRTCStream extends AbstractStream {\n  /**\n   * The data channel used to send and receive data\n   */\n  private readonly channel: RTCDataChannel\n\n  /**\n   * push data from the underlying datachannel to the length prefix decoder\n   * and then the protobuf decoder.\n   */\n  private readonly incomingData: Pushable<Uint8Array>\n\n  private readonly maxBufferedAmount: number\n\n  private readonly bufferedAmountLowEventTimeout: number\n\n  /**\n   * The maximum size of a message in bytes\n   */\n  private readonly maxMessageSize: number\n\n  /**\n   * When this promise is resolved, the remote has sent us a FIN flag\n   */\n  private readonly receiveFinAck: DeferredPromise<void>\n  private readonly finAckTimeout: number\n  private readonly openTimeout: number\n  private readonly closeController: AbortController\n\n  constructor (init: WebRTCStreamInit) {\n    // override onEnd to send/receive FIN_ACK before closing the stream\n    const originalOnEnd = init.onEnd\n    init.onEnd = (err?: Error): void => {\n      this.log.trace('readable and writeable ends closed with status \"%s\"', this.status)\n\n      void Promise.resolve(async () => {\n        if (this.timeline.abort != null || this.timeline.reset !== null) {\n          return\n        }\n\n        // wait for FIN_ACK if we haven't received it already\n        try {\n          await pTimeout(this.receiveFinAck.promise, {\n            milliseconds: this.finAckTimeout\n          })\n        } catch (err) {\n          this.log.error('error receiving FIN_ACK', err)\n        }\n      })\n        .then(() => {\n          // stop processing incoming messages\n          this.incomingData.end()\n\n          // final cleanup\n          originalOnEnd?.(err)\n        })\n        .catch(err => {\n          this.log.error('error ending stream', err)\n        })\n        .finally(() => {\n          this.channel.close()\n        })\n    }\n\n    super(init)\n\n    this.channel = init.channel\n    this.channel.binaryType = 'arraybuffer'\n    this.incomingData = pushable<Uint8Array>()\n    this.bufferedAmountLowEventTimeout = init.bufferedAmountLowEventTimeout ?? BUFFERED_AMOUNT_LOW_TIMEOUT\n    this.maxBufferedAmount = init.maxBufferedAmount ?? MAX_BUFFERED_AMOUNT\n    this.maxMessageSize = (init.maxMessageSize ?? MAX_MESSAGE_SIZE) - PROTOBUF_OVERHEAD\n    this.receiveFinAck = pDefer()\n    this.finAckTimeout = init.closeTimeout ?? FIN_ACK_TIMEOUT\n    this.openTimeout = init.openTimeout ?? OPEN_TIMEOUT\n    this.closeController = new AbortController()\n\n    // set up initial state\n    switch (this.channel.readyState) {\n      case 'open':\n        this.timeline.open = new Date().getTime()\n        break\n\n      case 'closed':\n      case 'closing':\n        if (this.timeline.close === undefined || this.timeline.close === 0) {\n          this.timeline.close = Date.now()\n        }\n        break\n      case 'connecting':\n        // noop\n        break\n\n      default:\n        this.log.error('unknown datachannel state %s', this.channel.readyState)\n        throw new StreamStateError('Unknown datachannel state')\n    }\n\n    // handle RTCDataChannel events\n    this.channel.onopen = (_evt) => {\n      this.timeline.open = new Date().getTime()\n    }\n\n    this.channel.onclose = (_evt) => {\n      this.log.trace('received onclose event')\n\n      // stop any in-progress writes\n      this.closeController.abort()\n\n      // if the channel has closed we'll never receive a FIN_ACK so resolve the\n      // promise so we don't try to wait later\n      this.receiveFinAck.resolve()\n\n      void this.close().catch(err => {\n        this.log.error('error closing stream after channel closed', err)\n      })\n    }\n\n    this.channel.onerror = (evt) => {\n      this.log.trace('received onerror event')\n\n      // stop any in-progress writes\n      this.closeController.abort()\n\n      const err = (evt as RTCErrorEvent).error\n      this.abort(err)\n    }\n\n    this.channel.onmessage = async (event: MessageEvent<ArrayBuffer>) => {\n      const { data } = event\n\n      if (data === null || data.byteLength === 0) {\n        return\n      }\n\n      this.incomingData.push(new Uint8Array(data, 0, data.byteLength))\n    }\n\n    const self = this\n\n    // pipe framed protobuf messages through a length prefixed decoder, and\n    // surface data from the `Message.message` field through a source.\n    Promise.resolve().then(async () => {\n      for await (const buf of lengthPrefixed.decode(this.incomingData)) {\n        const message = self.processIncomingProtobuf(buf)\n\n        if (message != null) {\n          self.sourcePush(new Uint8ArrayList(message))\n        }\n      }\n    })\n      .catch(err => {\n        this.log.error('error processing incoming data channel messages', err)\n      })\n  }\n\n  sendNewStream (): void {\n    // opening new streams is handled by WebRTC so this is a noop\n  }\n\n  async _sendMessage (data: Uint8ArrayList, checkBuffer: boolean = true): Promise<void> {\n    if (this.channel.readyState === 'closed' || this.channel.readyState === 'closing') {\n      throw new StreamStateError(`Invalid datachannel state - ${this.channel.readyState}`)\n    }\n\n    if (this.channel.readyState !== 'open') {\n      const timeout = AbortSignal.timeout(this.openTimeout)\n      const signal = anySignal([\n        this.closeController.signal,\n        timeout\n      ])\n\n      try {\n        this.log('channel state is \"%s\" and not \"open\", waiting for \"open\" event before sending data', this.channel.readyState)\n        await raceEvent(this.channel, 'open', signal)\n      } finally {\n        signal.clear()\n      }\n\n      this.log('channel state is now \"%s\", sending data', this.channel.readyState)\n    }\n\n    if (checkBuffer && this.channel.bufferedAmount > this.maxBufferedAmount) {\n      const timeout = AbortSignal.timeout(this.bufferedAmountLowEventTimeout)\n      const signal = anySignal([\n        this.closeController.signal,\n        timeout\n      ])\n\n      try {\n        this.log('channel buffer is %d, wait for \"bufferedamountlow\" event', this.channel.bufferedAmount)\n        await raceEvent(this.channel, 'bufferedamountlow', signal)\n      } catch (err: any) {\n        if (timeout.aborted) {\n          throw new TimeoutError(`Timed out waiting for DataChannel buffer to clear after ${this.bufferedAmountLowEventTimeout}ms`)\n        }\n\n        throw err\n      } finally {\n        signal.clear()\n      }\n    }\n\n    try {\n      this.log.trace('sending message, channel state \"%s\"', this.channel.readyState)\n      // send message without copying data\n      this.channel.send(data.subarray())\n    } catch (err: any) {\n      this.log.error('error while sending message', err)\n    }\n  }\n\n  async sendData (data: Uint8ArrayList): Promise<void> {\n    const bytesTotal = data.byteLength\n    // sending messages is an async operation so use a copy of the list as it\n    // may be changed beneath us\n    data = data.sublist()\n\n    while (data.byteLength > 0) {\n      const toSend = Math.min(data.byteLength, this.maxMessageSize)\n      const buf = data.subarray(0, toSend)\n      const messageBuf = Message.encode({ message: buf })\n      const sendBuf = lengthPrefixed.encode.single(messageBuf)\n      this.log.trace('sending %d/%d bytes on channel', buf.byteLength, bytesTotal)\n      await this._sendMessage(sendBuf)\n\n      data.consume(toSend)\n    }\n\n    this.log.trace('finished sending data, channel state \"%s\"', this.channel.readyState)\n  }\n\n  async sendReset (): Promise<void> {\n    try {\n      await this._sendFlag(Message.Flag.RESET)\n    } catch (err) {\n      this.log.error('failed to send reset - %e', err)\n    } finally {\n      this.channel.close()\n    }\n  }\n\n  async sendCloseWrite (options: AbortOptions): Promise<void> {\n    if (this.channel.readyState !== 'open') {\n      this.receiveFinAck.resolve()\n      return\n    }\n\n    const sent = await this._sendFlag(Message.Flag.FIN)\n\n    if (sent) {\n      this.log.trace('awaiting FIN_ACK')\n      try {\n        await raceSignal(this.receiveFinAck.promise, options?.signal, {\n          errorMessage: 'sending close-write was aborted before FIN_ACK was received',\n          errorName: 'FinAckNotReceivedError'\n        })\n      } catch (err) {\n        this.log.error('failed to await FIN_ACK', err)\n      }\n    } else {\n      this.log.trace('sending FIN failed, not awaiting FIN_ACK')\n    }\n\n    // if we've attempted to receive a FIN_ACK, do not try again\n    this.receiveFinAck.resolve()\n  }\n\n  async sendCloseRead (): Promise<void> {\n    if (this.channel.readyState !== 'open') {\n      return\n    }\n\n    await this._sendFlag(Message.Flag.STOP_SENDING)\n  }\n\n  /**\n   * Handle incoming\n   */\n  private processIncomingProtobuf (buffer: Uint8ArrayList): Uint8Array | undefined {\n    const message = Message.decode(buffer)\n\n    if (message.flag !== undefined) {\n      this.log.trace('incoming flag %s, write status \"%s\", read status \"%s\"', message.flag, this.writeStatus, this.readStatus)\n\n      if (message.flag === Message.Flag.FIN) {\n        // We should expect no more data from the remote, stop reading\n        this.remoteCloseWrite()\n\n        this.log.trace('sending FIN_ACK')\n        void this._sendFlag(Message.Flag.FIN_ACK)\n          .catch(err => {\n            this.log.error('error sending FIN_ACK immediately', err)\n          })\n      }\n\n      if (message.flag === Message.Flag.RESET) {\n        // Stop reading and writing to the stream immediately\n        this.reset()\n      }\n\n      if (message.flag === Message.Flag.STOP_SENDING) {\n        // The remote has stopped reading\n        this.remoteCloseRead()\n      }\n\n      if (message.flag === Message.Flag.FIN_ACK) {\n        this.log.trace('received FIN_ACK')\n        this.receiveFinAck.resolve()\n      }\n    }\n\n    // ignore data messages if we've closed the readable end already\n    if (this.readStatus === 'ready') {\n      return message.message\n    }\n  }\n\n  private async _sendFlag (flag: Message.Flag): Promise<boolean> {\n    if (this.channel.readyState !== 'open') {\n      // flags can be sent while we or the remote are closing the datachannel so\n      // if the channel isn't open, don't try to send it but return false to let\n      // the caller know and act if they need to\n      this.log.trace('not sending flag %s because channel is \"%s\" and not \"open\"', flag.toString(), this.channel.readyState)\n      return false\n    }\n\n    this.log.trace('sending flag %s', flag.toString())\n    const messageBuf = Message.encode({ flag })\n    const prefixedBuf = lengthPrefixed.encode.single(messageBuf)\n\n    try {\n      await this._sendMessage(prefixedBuf, false)\n\n      return true\n    } catch (err: any) {\n      this.log.error('could not send flag %s - %e', flag.toString(), err)\n    }\n\n    return false\n  }\n}\n\nexport interface WebRTCStreamOptions extends DataChannelOptions {\n  /**\n   * The network channel used for bidirectional peer-to-peer transfers of\n   * arbitrary data\n   *\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel}\n   */\n  channel: RTCDataChannel\n\n  /**\n   * The stream direction\n   */\n  direction: Direction\n\n  /**\n   * A callback invoked when the channel ends\n   */\n  onEnd?(err?: Error | undefined): void\n\n  logger: ComponentLogger\n\n  /**\n   * If true the underlying datachannel is being used to perform the noise\n   * handshake during connection establishment\n   */\n  handshake?: boolean\n}\n\nexport function createStream (options: WebRTCStreamOptions): WebRTCStream {\n  const { channel, direction, handshake } = options\n\n  return new WebRTCStream({\n    id: `${channel.id}`,\n    log: options.logger.forComponent(`libp2p:webrtc:stream:${handshake === true ? 'handshake' : direction}:${channel.id}`),\n    ...options\n  })\n}\n", "import { MUXER_PROTOCOL } from './constants.js'\nimport { createStream } from './stream.js'\nimport { drainAndClose, nopSink, nopSource } from './util.js'\nimport type { DataChannelOptions } from './index.js'\nimport type { ComponentLogger, Logger, Stream, CounterGroup, StreamMuxer, StreamMuxerFactory, StreamMuxerInit } from '@libp2p/interface'\nimport type { AbortOptions } from '@multiformats/multiaddr'\nimport type { Source, Sink } from 'it-stream-types'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface DataChannelMuxerFactoryInit {\n  /**\n   * WebRTC Peer Connection\n   */\n  peerConnection: RTCPeerConnection\n\n  /**\n   * The protocol to use\n   */\n  protocol?: string\n\n  /**\n   * Optional metrics for this data channel muxer\n   */\n  metrics?: CounterGroup\n\n  dataChannelOptions?: DataChannelOptions\n}\n\nexport interface DataChannelMuxerFactoryComponents {\n  logger: ComponentLogger\n}\n\ninterface BufferedStream {\n  stream: Stream\n  channel: RTCDataChannel\n  onEnd(err?: Error): void\n}\n\nexport class DataChannelMuxerFactory implements StreamMuxerFactory {\n  public readonly protocol: string\n\n  /**\n   * WebRTC Peer Connection\n   */\n  private readonly peerConnection: RTCPeerConnection\n  private bufferedStreams: BufferedStream[] = []\n  private readonly metrics?: CounterGroup\n  private readonly dataChannelOptions?: DataChannelOptions\n  private readonly components: DataChannelMuxerFactoryComponents\n  private readonly log: Logger\n\n  constructor (components: DataChannelMuxerFactoryComponents, init: DataChannelMuxerFactoryInit) {\n    this.components = components\n    this.peerConnection = init.peerConnection\n    this.metrics = init.metrics\n    this.protocol = init.protocol ?? MUXER_PROTOCOL\n    this.dataChannelOptions = init.dataChannelOptions ?? {}\n    this.log = components.logger.forComponent('libp2p:webrtc:muxerfactory')\n\n    // store any data channels opened before upgrade has been completed\n    this.peerConnection.ondatachannel = ({ channel }) => {\n      this.log.trace('incoming early datachannel with channel id %d and label \"%s\"', channel.id)\n\n      // 'init' channel is only used during connection establishment\n      if (channel.label === 'init') {\n        this.log.trace('closing early init channel')\n        channel.close()\n\n        return\n      }\n\n      // @ts-expect-error fields are set below\n      const bufferedStream: BufferedStream = {}\n\n      const stream = createStream({\n        channel,\n        direction: 'inbound',\n        onEnd: (err) => {\n          bufferedStream.onEnd(err)\n        },\n        logger: components.logger,\n        ...this.dataChannelOptions\n      })\n\n      bufferedStream.stream = stream\n      bufferedStream.channel = channel\n      bufferedStream.onEnd = () => {\n        this.bufferedStreams = this.bufferedStreams.filter(s => s.stream.id !== stream.id)\n      }\n\n      this.bufferedStreams.push(bufferedStream)\n    }\n  }\n\n  createStreamMuxer (init?: StreamMuxerInit): StreamMuxer {\n    return new DataChannelMuxer(this.components, {\n      ...init,\n      peerConnection: this.peerConnection,\n      dataChannelOptions: this.dataChannelOptions,\n      metrics: this.metrics,\n      streams: this.bufferedStreams,\n      protocol: this.protocol\n    })\n  }\n}\n\nexport interface DataChannelMuxerInit extends DataChannelMuxerFactoryInit, StreamMuxerInit {\n  streams: BufferedStream[]\n}\n\nexport interface DataChannelMuxerComponents {\n  logger: ComponentLogger\n}\n\n/**\n * A libp2p data channel stream muxer\n */\nexport class DataChannelMuxer implements StreamMuxer {\n  /**\n   * Array of streams in the data channel\n   */\n  public streams: Stream[]\n  public protocol: string\n\n  private readonly log: Logger\n  private readonly peerConnection: RTCPeerConnection\n  private readonly dataChannelOptions: DataChannelOptions\n  private readonly metrics?: CounterGroup\n  private readonly logger: ComponentLogger\n\n  constructor (components: DataChannelMuxerComponents, readonly init: DataChannelMuxerInit) {\n    this.log = components.logger.forComponent('libp2p:webrtc:muxer')\n    this.logger = components.logger\n    this.streams = init.streams.map(s => s.stream)\n    this.peerConnection = init.peerConnection\n    this.protocol = init.protocol ?? MUXER_PROTOCOL\n    this.metrics = init.metrics\n    this.dataChannelOptions = init.dataChannelOptions ?? {}\n\n    /**\n     * Fired when a data channel has been added to the connection has been\n     * added by the remote peer.\n     *\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/datachannel_event}\n     */\n    this.peerConnection.ondatachannel = ({ channel }) => {\n      this.log.trace('incoming datachannel with channel id %d', channel.id)\n\n      // 'init' channel is only used during connection establishment\n      if (channel.label === 'init') {\n        this.log.trace('closing init channel')\n        channel.close()\n\n        return\n      }\n\n      // lib-datachannel throws if `.getId` is called on a closed channel so\n      // memoize it\n      const id = channel.id\n\n      const stream = createStream({\n        channel,\n        direction: 'inbound',\n        onEnd: () => {\n          this.#onStreamEnd(stream, channel)\n          this.log('incoming channel %s ended', id)\n        },\n        logger: this.logger,\n        ...this.dataChannelOptions\n      })\n\n      this.streams.push(stream)\n      this.metrics?.increment({ incoming_stream: true })\n      init?.onIncomingStream?.(stream)\n    }\n\n    // the DataChannelMuxer constructor is called during set up of the\n    // connection by the upgrader.\n    //\n    // If we invoke `init.onIncomingStream` immediately, the connection object\n    // will not be set up yet so add a tiny delay before letting the\n    // connection know about early streams\n    if (this.init.streams.length > 0) {\n      queueMicrotask(() => {\n        this.init.streams.forEach(bufferedStream => {\n          bufferedStream.onEnd = () => {\n            this.log('incoming early channel %s ended with state %s', bufferedStream.channel.id, bufferedStream.channel.readyState)\n            this.#onStreamEnd(bufferedStream.stream, bufferedStream.channel)\n          }\n\n          this.metrics?.increment({ incoming_stream: true })\n          this.init?.onIncomingStream?.(bufferedStream.stream)\n        })\n      })\n    }\n  }\n\n  #onStreamEnd (stream: Stream, channel: RTCDataChannel): void {\n    this.log.trace('stream %s %s %s onEnd', stream.direction, stream.id, stream.protocol)\n    drainAndClose(\n      channel,\n      `${stream.direction} ${stream.id} ${stream.protocol}`,\n      this.dataChannelOptions.drainTimeout, {\n        log: this.log\n      }\n    )\n    this.streams = this.streams.filter(s => s.id !== stream.id)\n    this.metrics?.increment({ stream_end: true })\n    this.init?.onStreamEnd?.(stream)\n  }\n\n  /**\n   * Gracefully close all tracked streams and stop the muxer\n   */\n  async close (options?: AbortOptions): Promise<void> {\n    try {\n      await Promise.all(\n        this.streams.map(async stream => stream.close(options))\n      )\n    } catch (err: any) {\n      this.abort(err)\n    }\n  }\n\n  /**\n   * Abort all tracked streams and stop the muxer\n   */\n  abort (err: Error): void {\n    for (const stream of this.streams) {\n      stream.abort(err)\n    }\n  }\n\n  /**\n   * The stream source, a no-op as the transport natively supports multiplexing\n   */\n  source: AsyncGenerator<Uint8Array, any, unknown> = nopSource()\n\n  /**\n   * The stream destination, a no-op as the transport natively supports multiplexing\n   */\n  sink: Sink<Source<Uint8Array | Uint8ArrayList>, Promise<void>> = nopSink\n\n  newStream (): Stream {\n    // The spec says the label MUST be an empty string: https://github.com/libp2p/specs/blob/master/webrtc/README.md#rtcdatachannel-label\n    const channel = this.peerConnection.createDataChannel('')\n    // lib-datachannel throws if `.getId` is called on a closed channel so\n    // memoize it\n    const id = channel.id\n\n    this.log.trace('opened outgoing datachannel with channel id %s', id)\n\n    const stream = createStream({\n      channel,\n      direction: 'outbound',\n      onEnd: () => {\n        this.#onStreamEnd(stream, channel)\n        this.log('outgoing channel %s ended', id)\n      },\n      logger: this.logger,\n      ...this.dataChannelOptions\n    })\n    this.streams.push(stream)\n    this.metrics?.increment({ outgoing_stream: true })\n\n    return stream\n  }\n}\n", "export const RTCPeerConnection = globalThis.RTCPeerConnection\nexport const RTCSessionDescription = globalThis.RTCSessionDescription\nexport const RTCIceCandidate = globalThis.RTCIceCandidate\n", "export class WebRTCTransportError extends Error {\n  constructor (msg: string) {\n    super(`WebRTC transport error: ${msg}`)\n    this.name = 'WebRTCTransportError'\n  }\n}\n\nexport class SDPHandshakeFailedError extends WebRTCTransportError {\n  constructor (message = 'SDP handshake failed') {\n    super(message)\n    this.name = 'SDPHandshakeFailedError'\n  }\n}\n\nexport class ConnectionClosedError extends WebRTCTransportError {\n  constructor (state: RTCPeerConnectionState, msg: string) {\n    super(`peerconnection moved to state: ${state}: ${msg}`)\n    this.name = 'WebRTC/ConnectionClosed'\n  }\n}\n\nexport class DataChannelError extends WebRTCTransportError {\n  constructor (streamLabel: string, msg: string) {\n    super(`[stream: ${streamLabel}] data channel error: ${msg}`)\n    this.name = 'WebRTC/DataChannelError'\n  }\n}\n\nexport class InappropriateMultiaddrError extends WebRTCTransportError {\n  constructor (msg: string) {\n    super(`There was a problem with the Multiaddr which was passed in: ${msg}`)\n    this.name = 'WebRTC/InappropriateMultiaddrError'\n  }\n}\n\nexport class InvalidArgumentError extends WebRTCTransportError {\n  constructor (msg: string) {\n    super(`There was a problem with a provided argument: ${msg}`)\n    this.name = 'WebRTC/InvalidArgumentError'\n  }\n}\n\nexport class InvalidFingerprintError extends WebRTCTransportError {\n  constructor (fingerprint: string, source: string) {\n    super(`Invalid fingerprint \"${fingerprint}\" within ${source}`)\n    this.name = 'WebRTC/InvalidFingerprintError'\n  }\n}\n\nexport class OperationAbortedError extends WebRTCTransportError {\n  constructor (context: string, abortReason: string) {\n    super(`Signalled to abort because (${abortReason}}) ${context}`)\n    this.name = 'WebRTC/OperationAbortedError'\n  }\n}\n\nexport class OverStreamLimitError extends WebRTCTransportError {\n  constructor (msg: string) {\n    super(msg)\n    this.name = 'WebRTC/OverStreamLimitError'\n  }\n}\n\nexport class UnimplementedError extends WebRTCTransportError {\n  constructor (methodName: string) {\n    super(`A method (${methodName}) was called though it has been intentionally left unimplemented.`)\n    this.name = 'WebRTC/UnimplementedError'\n  }\n}\n\nexport class UnsupportedHashAlgorithmError extends WebRTCTransportError {\n  constructor (algo: number) {\n    super(`unsupported hash algorithm code: ${algo} please see the codes at https://github.com/multiformats/multicodec/blob/master/table.csv `)\n    this.name = 'WebRTC/UnsupportedHashAlgorithmError'\n  }\n}\n", "import { decodeMessage, encodeMessage, enumeration, message } from 'protons-runtime'\nimport type { Codec, DecodeOptions } from 'protons-runtime'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface Message {\n  type?: Message.Type\n  data?: string\n}\n\nexport namespace Message {\n  export enum Type {\n    SDP_OFFER = 'SDP_OFFER',\n    SDP_ANSWER = 'SDP_ANSWER',\n    ICE_CANDIDATE = 'ICE_CANDIDATE'\n  }\n\n  enum __TypeValues {\n    SDP_OFFER = 0,\n    SDP_ANSWER = 1,\n    ICE_CANDIDATE = 2\n  }\n\n  export namespace Type {\n    export const codec = (): Codec<Type> => {\n      return enumeration<Type>(__TypeValues)\n    }\n  }\n\n  let _codec: Codec<Message>\n\n  export const codec = (): Codec<Message> => {\n    if (_codec == null) {\n      _codec = message<Message>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.type != null) {\n          w.uint32(8)\n          Message.Type.codec().encode(obj.type, w)\n        }\n\n        if (obj.data != null) {\n          w.uint32(18)\n          w.string(obj.data)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length, opts = {}) => {\n        const obj: any = {}\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.type = Message.Type.codec().decode(reader)\n              break\n            }\n            case 2: {\n              obj.data = reader.string()\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Message>): Uint8Array => {\n    return encodeMessage(obj, Message.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<Message>): Message => {\n    return decodeMessage(buf, Message.codec(), opts)\n  }\n}\n", "import { ConnectionFailedError, InvalidMessageError } from '@libp2p/interface'\nimport pDefer from 'p-defer'\nimport { CustomProgressEvent } from 'progress-events'\nimport { isFirefox } from '../util.js'\nimport { RTCIceCandidate } from '../webrtc/index.js'\nimport { Message } from './pb/message.js'\nimport type { WebRTCDialEvents } from './transport.js'\nimport type { RTCPeerConnection } from '../webrtc/index.js'\nimport type { AbortOptions, LoggerOptions, Stream } from '@libp2p/interface'\nimport type { MessageStream } from 'it-protobuf-stream'\nimport type { DeferredPromise } from 'p-defer'\nimport type { ProgressOptions } from 'progress-events'\n\nexport interface ReadCandidatesOptions extends AbortOptions, LoggerOptions, ProgressOptions<WebRTCDialEvents> {\n  direction: string\n}\n\nexport const readCandidatesUntilConnected = async (pc: RTCPeerConnection, stream: MessageStream<Message, Stream>, options: ReadCandidatesOptions): Promise<void> => {\n  try {\n    const connectedPromise: DeferredPromise<void> = pDefer()\n    resolveOnConnected(pc, connectedPromise)\n\n    // read candidates until we are connected or we reach the end of the stream\n    while (true) {\n      // if we connect, stop trying to read from the stream\n      const message = await Promise.race([\n        connectedPromise.promise,\n        stream.read({\n          signal: options.signal\n        }).catch(() => {})\n      ])\n\n      // stream ended or we became connected\n      if (message == null) {\n        // throw if we timed out\n        options.signal?.throwIfAborted()\n\n        break\n      }\n\n      if (message.type !== Message.Type.ICE_CANDIDATE) {\n        throw new InvalidMessageError('ICE candidate message expected')\n      }\n\n      const candidateInit = JSON.parse(message.data ?? 'null')\n\n      // an empty string means this generation of candidates is complete, a null\n      // candidate means candidate gathering has finished\n      // see - https://www.w3.org/TR/webrtc/#rtcpeerconnectioniceevent\n      if (candidateInit === '' || candidateInit === null) {\n        options.onProgress?.(new CustomProgressEvent('webrtc:end-of-ice-candidates'))\n        options.log.trace('end-of-candidates received')\n\n        continue\n      }\n\n      const candidate = new RTCIceCandidate(candidateInit)\n\n      options.log.trace('%s received new ICE candidate %o', options.direction, candidateInit)\n\n      try {\n        options.onProgress?.(new CustomProgressEvent<string>('webrtc:add-ice-candidate', candidate.candidate))\n        await pc.addIceCandidate(candidate)\n      } catch (err) {\n        options.log.error('%s bad candidate received', options.direction, candidateInit, err)\n      }\n    }\n  } catch (err) {\n    options.log.error('%s error parsing ICE candidate', options.direction, err)\n\n    if (options.signal?.aborted === true && getConnectionState(pc) !== 'connected') {\n      throw err\n    }\n  }\n}\n\nexport function getConnectionState (pc: RTCPeerConnection): string {\n  return isFirefox ? pc.iceConnectionState : pc.connectionState\n}\n\nfunction resolveOnConnected (pc: RTCPeerConnection, promise: DeferredPromise<void>): void {\n  pc[isFirefox ? 'oniceconnectionstatechange' : 'onconnectionstatechange'] = (_) => {\n    switch (getConnectionState(pc)) {\n      case 'connected':\n        promise.resolve()\n        break\n      case 'failed':\n      case 'disconnected':\n      case 'closed':\n        promise.reject(new ConnectionFailedError('RTCPeerConnection was closed'))\n        break\n      default:\n        break\n    }\n  }\n}\n", "import { pbStream } from 'it-protobuf-stream'\nimport { CustomProgressEvent } from 'progress-events'\nimport { SIGNALING_PROTOCOL } from '../constants.js'\nimport { SDPHandshakeFailedError } from '../error.js'\nimport { DataChannelMuxerFactory } from '../muxer.js'\nimport { RTCPeerConnection, RTCSessionDescription } from '../webrtc/index.js'\nimport { Message } from './pb/message.js'\nimport { splitAddr } from './transport.js'\nimport { readCandidatesUntilConnected } from './util.js'\nimport type { WebRTCDialEvents, WebRTCTransportMetrics } from './transport.js'\nimport type { DataChannelOptions } from '../index.js'\nimport type { LoggerOptions, Connection, ComponentLogger, IncomingStreamData } from '@libp2p/interface'\nimport type { ConnectionManager, TransportManager } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { ProgressOptions } from 'progress-events'\n\nexport interface IncomingStreamOpts extends IncomingStreamData {\n  rtcConfiguration?: RTCConfiguration\n  dataChannelOptions?: Partial<DataChannelOptions>\n  signal: AbortSignal\n}\n\nexport interface ConnectOptions extends LoggerOptions, ProgressOptions<WebRTCDialEvents> {\n  rtcConfiguration?: RTCConfiguration\n  dataChannel?: DataChannelOptions\n  multiaddr: Multiaddr\n  connectionManager: ConnectionManager\n  transportManager: TransportManager\n  dataChannelOptions?: Partial<DataChannelOptions>\n  signal?: AbortSignal\n  metrics?: WebRTCTransportMetrics\n  logger: ComponentLogger\n}\n\nexport async function initiateConnection ({ rtcConfiguration, dataChannel, signal, metrics, multiaddr: ma, connectionManager, transportManager, log, logger, onProgress }: ConnectOptions): Promise<{ remoteAddress: Multiaddr, peerConnection: RTCPeerConnection, muxerFactory: DataChannelMuxerFactory }> {\n  const { circuitAddress, targetPeer } = splitAddr(ma)\n\n  metrics?.dialerEvents.increment({ open: true })\n\n  log.trace('dialing circuit address: %a', circuitAddress)\n\n  const connections = connectionManager.getConnections(targetPeer)\n  let connection: Connection\n\n  if (connections.length === 0) {\n    onProgress?.(new CustomProgressEvent('webrtc:dial-relay'))\n\n    // use the transport manager to open a connection. Initiating a WebRTC\n    // connection takes place in the context of a dial - if we use the\n    // connection manager instead we can end up joining our own dial context\n    connection = await transportManager.dial(circuitAddress, {\n      signal,\n      onProgress\n    })\n  } else {\n    onProgress?.(new CustomProgressEvent('webrtc:reuse-relay-connection'))\n\n    connection = connections[0]\n  }\n\n  onProgress?.(new CustomProgressEvent('webrtc:open-signaling-stream'))\n\n  const stream = await connection.newStream(SIGNALING_PROTOCOL, {\n    signal,\n    runOnLimitedConnection: true\n  })\n\n  const messageStream = pbStream(stream).pb(Message)\n  const peerConnection = new RTCPeerConnection(rtcConfiguration)\n  const muxerFactory = new DataChannelMuxerFactory({\n    logger\n  }, {\n    peerConnection,\n    dataChannelOptions: dataChannel\n  })\n\n  try {\n    // we create the channel so that the RTCPeerConnection has a component for\n    // which to collect candidates. The label is not relevant to connection\n    // initiation but can be useful for debugging\n    const channel = peerConnection.createDataChannel('init')\n\n    // setup callback to write ICE candidates to the remote peer\n    peerConnection.onicecandidate = ({ candidate }) => {\n      // a null candidate means end-of-candidates, an empty string candidate\n      // means end-of-candidates for this generation, otherwise this should\n      // be a valid candidate object\n      // see - https://www.w3.org/TR/webrtc/#rtcpeerconnectioniceevent\n      const data = JSON.stringify(candidate?.toJSON() ?? null)\n\n      log.trace('initiator sending ICE candidate %o', candidate)\n\n      void messageStream.write({\n        type: Message.Type.ICE_CANDIDATE,\n        data\n      }, {\n        signal\n      })\n        .catch(err => {\n          log.error('error sending ICE candidate', err)\n        })\n    }\n    peerConnection.onicecandidateerror = (event) => {\n      log.error('initiator ICE candidate error', event)\n    }\n\n    // create an offer\n    const offerSdp = await peerConnection.createOffer().catch(err => {\n      log.error('could not execute createOffer', err)\n      throw new SDPHandshakeFailedError('Failed to set createOffer')\n    })\n\n    log.trace('initiator send SDP offer %s', offerSdp.sdp)\n\n    onProgress?.(new CustomProgressEvent('webrtc:send-sdp-offer'))\n\n    // write the offer to the stream\n    await messageStream.write({ type: Message.Type.SDP_OFFER, data: offerSdp.sdp }, {\n      signal\n    })\n\n    // set offer as local description\n    await peerConnection.setLocalDescription(offerSdp).catch(err => {\n      log.error('could not execute setLocalDescription', err)\n      throw new SDPHandshakeFailedError('Failed to set localDescription')\n    })\n\n    onProgress?.(new CustomProgressEvent('webrtc:read-sdp-answer'))\n\n    log.trace('initiator read SDP answer')\n\n    // read answer\n    const answerMessage = await messageStream.read({\n      signal\n    })\n\n    if (answerMessage.type !== Message.Type.SDP_ANSWER) {\n      throw new SDPHandshakeFailedError('Remote should send an SDP answer')\n    }\n\n    log.trace('initiator received SDP answer %s', answerMessage.data)\n\n    const answerSdp = new RTCSessionDescription({ type: 'answer', sdp: answerMessage.data })\n    await peerConnection.setRemoteDescription(answerSdp).catch(err => {\n      log.error('could not execute setRemoteDescription', err)\n      throw new SDPHandshakeFailedError('Failed to set remoteDescription')\n    })\n\n    log.trace('initiator read candidates until connected')\n\n    onProgress?.(new CustomProgressEvent('webrtc:read-ice-candidates'))\n\n    await readCandidatesUntilConnected(peerConnection, messageStream, {\n      direction: 'initiator',\n      signal,\n      log,\n      onProgress\n    })\n\n    log.trace('initiator connected, closing init channel')\n    channel.close()\n\n    onProgress?.(new CustomProgressEvent('webrtc:close-signaling-stream'))\n\n    log.trace('closing signaling channel')\n    await stream.close({\n      signal\n    })\n\n    log.trace('initiator connected to remote address %s', ma)\n\n    return {\n      remoteAddress: ma,\n      peerConnection,\n      muxerFactory\n    }\n  } catch (err: any) {\n    log.error('outgoing signaling error', err)\n\n    peerConnection.close()\n    stream.abort(err)\n    throw err\n  } finally {\n    peerConnection.onicecandidate = null\n    peerConnection.onicecandidateerror = null\n  }\n}\n", "import { CODE_P2P_CIRCUIT } from '@multiformats/multiaddr'\nimport { P2P } from '@multiformats/multiaddr-matcher'\nimport { fmt, code } from '@multiformats/multiaddr-matcher/utils'\nimport { TypedEventEmitter } from 'main-event'\nimport type { PeerId, ListenerEvents, Listener, Libp2pEvents } from '@libp2p/interface'\nimport type { TransportManager } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { TypedEventTarget } from 'main-event'\n\nconst Circuit = fmt(P2P.matchers[0], code(CODE_P2P_CIRCUIT))\n\nexport interface WebRTCPeerListenerComponents {\n  peerId: PeerId\n  transportManager: TransportManager\n  events: TypedEventTarget<Libp2pEvents>\n}\n\nexport interface WebRTCPeerListenerInit {\n  shutdownController: AbortController\n}\n\nexport class WebRTCPeerListener extends TypedEventEmitter<ListenerEvents> implements Listener {\n  private readonly transportManager: TransportManager\n  private readonly shutdownController: AbortController\n  private readonly events: TypedEventTarget<Libp2pEvents>\n\n  constructor (components: WebRTCPeerListenerComponents, init: WebRTCPeerListenerInit) {\n    super()\n\n    this.transportManager = components.transportManager\n    this.events = components.events\n    this.shutdownController = init.shutdownController\n\n    this.onTransportListening = this.onTransportListening.bind(this)\n  }\n\n  async listen (): Promise<void> {\n    this.events.addEventListener('transport:listening', this.onTransportListening)\n  }\n\n  onTransportListening (event: CustomEvent<Listener>): void {\n    const circuitAddresses = event.detail.getAddrs()\n      .filter(ma => Circuit.exactMatch(ma))\n      .map(ma => {\n        return ma.encapsulate('/webrtc')\n      })\n\n    if (circuitAddresses.length > 0) {\n      this.safeDispatchEvent('listening')\n    }\n  }\n\n  getAddrs (): Multiaddr[] {\n    return this.transportManager\n      .getListeners()\n      .filter(l => !(l instanceof WebRTCPeerListener))\n      .map(l => l.getAddrs()\n        .filter(ma => Circuit.exactMatch(ma))\n        .map(ma => {\n          return ma.encapsulate('/webrtc')\n        })\n      )\n      .flat()\n  }\n\n  updateAnnounceAddrs (): void {\n\n  }\n\n  async close (): Promise<void> {\n    this.events.removeEventListener('transport:listening', this.onTransportListening)\n\n    this.shutdownController.abort()\n    queueMicrotask(() => {\n      this.safeDispatchEvent('close')\n    })\n  }\n}\n", "import { multiaddr } from '@multiformats/multiaddr'\nimport { pbStream } from 'it-protobuf-stream'\nimport { SDPHandshakeFailedError } from '../error.js'\nimport { RTCSessionDescription } from '../webrtc/index.js'\nimport { Message } from './pb/message.js'\nimport { getConnectionState, readCandidatesUntilConnected } from './util.js'\nimport type { RTCPeerConnection } from '../webrtc/index.js'\nimport type { Logger, IncomingStreamData } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport interface IncomingStreamOpts extends IncomingStreamData {\n  peerConnection: RTCPeerConnection\n  signal: AbortSignal\n  log: Logger\n}\n\nexport async function handleIncomingStream ({ peerConnection, stream, signal, connection, log }: IncomingStreamOpts): Promise<{ remoteAddress: Multiaddr }> {\n  log.trace('new inbound signaling stream')\n\n  const messageStream = pbStream(stream).pb(Message)\n\n  try {\n    // candidate callbacks\n    peerConnection.onicecandidate = ({ candidate }) => {\n      // a null candidate means end-of-candidates, an empty string candidate\n      // means end-of-candidates for this generation, otherwise this should\n      // be a valid candidate object\n      // see - https://www.w3.org/TR/webrtc/#rtcpeerconnectioniceevent\n      const data = JSON.stringify(candidate?.toJSON() ?? null)\n\n      log.trace('recipient sending ICE candidate %s', data)\n\n      messageStream.write({\n        type: Message.Type.ICE_CANDIDATE,\n        data\n      }, {\n        signal\n      })\n        .catch(err => {\n          log.error('error sending ICE candidate', err)\n        })\n    }\n\n    log.trace('recipient read SDP offer')\n\n    // read an SDP offer\n    const pbOffer = await messageStream.read({\n      signal\n    })\n\n    if (pbOffer.type !== Message.Type.SDP_OFFER) {\n      throw new SDPHandshakeFailedError(`expected message type SDP_OFFER, received: ${pbOffer.type ?? 'undefined'} `)\n    }\n\n    log.trace('recipient received SDP offer %s', pbOffer.data)\n\n    const offer = new RTCSessionDescription({\n      type: 'offer',\n      sdp: pbOffer.data\n    })\n\n    await peerConnection.setRemoteDescription(offer).catch(err => {\n      log.error('could not execute setRemoteDescription', err)\n      throw new SDPHandshakeFailedError('Failed to set remoteDescription')\n    })\n\n    // create and write an SDP answer\n    const answer = await peerConnection.createAnswer().catch(err => {\n      log.error('could not execute createAnswer', err)\n      throw new SDPHandshakeFailedError('Failed to create answer')\n    })\n\n    log.trace('recipient send SDP answer %s', answer.sdp)\n\n    // write the answer to the remote\n    await messageStream.write({ type: Message.Type.SDP_ANSWER, data: answer.sdp }, {\n      signal\n    })\n\n    await peerConnection.setLocalDescription(answer).catch(err => {\n      log.error('could not execute setLocalDescription', err)\n      throw new SDPHandshakeFailedError('Failed to set localDescription')\n    })\n\n    log.trace('recipient read candidates until connected')\n\n    // wait until candidates are connected\n    await readCandidatesUntilConnected(peerConnection, messageStream, {\n      direction: 'recipient',\n      signal,\n      log\n    })\n  } catch (err: any) {\n    if (getConnectionState(peerConnection) !== 'connected') {\n      log.error('error while handling signaling stream from peer %a', connection.remoteAddr, err)\n\n      peerConnection.close()\n      throw err\n    } else {\n      log('error while handling signaling stream from peer %a, ignoring as the RTCPeerConnection is already connected', connection.remoteAddr, err)\n    }\n  }\n\n  const remoteAddress = multiaddr(`/webrtc/p2p/${connection.remoteAddr.getPeerId()}`)\n\n  log.trace('recipient connected to remote address %s', remoteAddress)\n\n  return { remoteAddress }\n}\n", "import { InvalidParametersError, serviceCapabilities, serviceDependencies, transportSymbol } from '@libp2p/interface'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { WebRTC } from '@multiformats/multiaddr-matcher'\nimport { setMaxListeners } from 'main-event'\nimport { SIGNALING_PROTOCOL } from '../constants.js'\nimport { WebRTCMultiaddrConnection } from '../maconn.js'\nimport { DataChannelMuxerFactory } from '../muxer.js'\nimport { getRtcConfiguration } from '../util.js'\nimport { RTCPeerConnection } from '../webrtc/index.js'\nimport { initiateConnection } from './initiate-connection.js'\nimport { WebRTCPeerListener } from './listener.js'\nimport { handleIncomingStream } from './signaling-stream-handler.js'\nimport type { DataChannelOptions } from '../index.js'\nimport type { OutboundConnectionUpgradeEvents, CreateListenerOptions, DialTransportOptions, Transport, Listener, Upgrader, ComponentLogger, Logger, Connection, PeerId, CounterGroup, Metrics, Startable, OpenConnectionProgressEvents, IncomingStreamData, Libp2pEvents } from '@libp2p/interface'\nimport type { Registrar, ConnectionManager, TransportManager } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { TypedEventTarget } from 'main-event'\nimport type { ProgressEvent } from 'progress-events'\n\nexport interface WebRTCTransportInit {\n  /**\n   * Add additional configuration to any RTCPeerConnections that are created.\n   *\n   * This could be extra STUN/TURN servers, certificate, etc.\n   */\n  rtcConfiguration?: RTCConfiguration | (() => RTCConfiguration | Promise<RTCConfiguration>)\n\n  /**\n   * Any options here will be applied to any RTCDataChannels that are opened.\n   */\n  dataChannel?: DataChannelOptions\n\n  /**\n   * Inbound connections must complete the upgrade within this many ms\n   *\n   * @default 30_000\n   * @deprecated configure `connectionManager.inboundUpgradeTimeout` instead\n   */\n  inboundConnectionTimeout?: number\n}\n\nexport interface WebRTCTransportComponents {\n  peerId: PeerId\n  registrar: Registrar\n  upgrader: Upgrader\n  transportManager: TransportManager\n  connectionManager: ConnectionManager\n  metrics?: Metrics\n  logger: ComponentLogger\n  events: TypedEventTarget<Libp2pEvents>\n}\n\nexport interface WebRTCTransportMetrics {\n  dialerEvents: CounterGroup\n  listenerEvents: CounterGroup\n}\n\nexport type WebRTCDialEvents =\n  OutboundConnectionUpgradeEvents |\n  OpenConnectionProgressEvents |\n  ProgressEvent<'webrtc:dial-relay'> |\n  ProgressEvent<'webrtc:reuse-relay-connection'> |\n  ProgressEvent<'webrtc:open-signaling-stream'> |\n  ProgressEvent<'webrtc:send-sdp-offer'> |\n  ProgressEvent<'webrtc:read-sdp-answer'> |\n  ProgressEvent<'webrtc:read-ice-candidates'> |\n  ProgressEvent<'webrtc:add-ice-candidate', string> |\n  ProgressEvent<'webrtc:end-of-ice-candidates'> |\n  ProgressEvent<'webrtc:close-signaling-stream'>\n\nexport class WebRTCTransport implements Transport<WebRTCDialEvents>, Startable {\n  private readonly log: Logger\n  private _started = false\n  private readonly metrics?: WebRTCTransportMetrics\n  private readonly shutdownController: AbortController\n\n  constructor (\n    private readonly components: WebRTCTransportComponents,\n    private readonly init: WebRTCTransportInit = {}\n  ) {\n    this.log = components.logger.forComponent('libp2p:webrtc')\n    this.shutdownController = new AbortController()\n    setMaxListeners(Infinity, this.shutdownController.signal)\n\n    if (components.metrics != null) {\n      this.metrics = {\n        dialerEvents: components.metrics.registerCounterGroup('libp2p_webrtc_dialer_events_total', {\n          label: 'event',\n          help: 'Total count of WebRTC dialer events by type'\n        }),\n        listenerEvents: components.metrics.registerCounterGroup('libp2p_webrtc_listener_events_total', {\n          label: 'event',\n          help: 'Total count of WebRTC listener events by type'\n        })\n      }\n    }\n  }\n\n  readonly [transportSymbol] = true\n\n  readonly [Symbol.toStringTag] = '@libp2p/webrtc'\n\n  readonly [serviceCapabilities]: string[] = [\n    '@libp2p/transport'\n  ]\n\n  readonly [serviceDependencies]: string[] = [\n    '@libp2p/identify',\n    '@libp2p/circuit-relay-v2-transport'\n  ]\n\n  isStarted (): boolean {\n    return this._started\n  }\n\n  async start (): Promise<void> {\n    await this.components.registrar.handle(SIGNALING_PROTOCOL, (data: IncomingStreamData) => {\n      // ensure we don't try to upgrade forever\n      const signal = this.components.upgrader.createInboundAbortSignal(this.shutdownController.signal)\n\n      this._onProtocol(data, signal)\n        .catch(err => {\n          this.log.error('failed to handle incoming connect from %p', data.connection.remotePeer, err)\n        })\n        .finally(() => {\n          signal.clear()\n        })\n    }, {\n      runOnLimitedConnection: true\n    })\n    this._started = true\n  }\n\n  async stop (): Promise<void> {\n    await this.components.registrar.unhandle(SIGNALING_PROTOCOL)\n    this._started = false\n  }\n\n  createListener (options: CreateListenerOptions): Listener {\n    return new WebRTCPeerListener(this.components, {\n      shutdownController: this.shutdownController\n    })\n  }\n\n  /**\n   * Filter check for all Multiaddrs that this transport can listen on\n   */\n  listenFilter (multiaddrs: Multiaddr[]): Multiaddr[] {\n    return multiaddrs.filter(WebRTC.exactMatch)\n  }\n\n  /**\n   * Filter check for all Multiaddrs that this transport can dial\n   */\n  dialFilter (multiaddrs: Multiaddr[]): Multiaddr[] {\n    return this.listenFilter(multiaddrs)\n  }\n\n  /*\n   * dial connects to a remote via the circuit relay or any other protocol\n   * and proceeds to upgrade to a webrtc connection.\n   * multiaddr of the form: <multiaddr>/webrtc/p2p/<destination-peer>\n   * For a circuit relay, this will be of the form\n   * <relay address>/p2p/<relay-peer>/p2p-circuit/webrtc/p2p/<destination-peer>\n  */\n  async dial (ma: Multiaddr, options: DialTransportOptions<WebRTCDialEvents>): Promise<Connection> {\n    this.log.trace('dialing address: %a', ma)\n\n    const { remoteAddress, peerConnection, muxerFactory } = await initiateConnection({\n      rtcConfiguration: await getRtcConfiguration(this.init.rtcConfiguration),\n      dataChannel: this.init.dataChannel,\n      multiaddr: ma,\n      dataChannelOptions: this.init.dataChannel,\n      signal: options.signal,\n      connectionManager: this.components.connectionManager,\n      transportManager: this.components.transportManager,\n      log: this.log,\n      logger: this.components.logger,\n      onProgress: options.onProgress\n    })\n\n    const webRTCConn = new WebRTCMultiaddrConnection(this.components, {\n      peerConnection,\n      timeline: { open: Date.now() },\n      remoteAddr: remoteAddress,\n      metrics: this.metrics?.dialerEvents\n    })\n\n    const connection = await options.upgrader.upgradeOutbound(webRTCConn, {\n      skipProtection: true,\n      skipEncryption: true,\n      muxerFactory,\n      onProgress: options.onProgress,\n      signal: options.signal\n    })\n\n    // close the connection on shut down\n    this._closeOnShutdown(peerConnection, webRTCConn)\n\n    return connection\n  }\n\n  async _onProtocol ({ connection, stream }: IncomingStreamData, signal: AbortSignal): Promise<void> {\n    const peerConnection = new RTCPeerConnection(await getRtcConfiguration(this.init.rtcConfiguration))\n    const muxerFactory = new DataChannelMuxerFactory(this.components, {\n      peerConnection,\n      dataChannelOptions: this.init.dataChannel\n    })\n\n    try {\n      const { remoteAddress } = await handleIncomingStream({\n        peerConnection,\n        connection,\n        stream,\n        signal,\n        log: this.log\n      })\n\n      // close the stream if SDP messages have been exchanged successfully\n      await stream.close({\n        signal\n      })\n\n      const webRTCConn = new WebRTCMultiaddrConnection(this.components, {\n        peerConnection,\n        timeline: { open: (new Date()).getTime() },\n        remoteAddr: remoteAddress,\n        metrics: this.metrics?.listenerEvents\n      })\n\n      await this.components.upgrader.upgradeInbound(webRTCConn, {\n        skipEncryption: true,\n        skipProtection: true,\n        muxerFactory,\n        signal\n      })\n\n      // close the connection on shut down\n      this._closeOnShutdown(peerConnection, webRTCConn)\n    } catch (err: any) {\n      this.log.error('incoming signaling error', err)\n\n      peerConnection.close()\n      stream.abort(err)\n      throw err\n    }\n  }\n\n  private _closeOnShutdown (pc: RTCPeerConnection, webRTCConn: WebRTCMultiaddrConnection): void {\n    // close the connection on shut down\n    const shutDownListener = (): void => {\n      webRTCConn.close()\n        .catch(err => {\n          this.log.error('could not close WebRTCMultiaddrConnection', err)\n        })\n    }\n\n    this.shutdownController.signal.addEventListener('abort', shutDownListener)\n\n    pc.addEventListener('close', () => {\n      this.shutdownController.signal.removeEventListener('abort', shutDownListener)\n    })\n  }\n}\n\nexport function splitAddr (ma: Multiaddr): { circuitAddress: Multiaddr, targetPeer: PeerId } {\n  const target = ma.getComponents()\n    .filter(({ name }) => name === 'p2p')\n    .map(({ value }) => value)\n    .pop()\n\n  if (target == null) {\n    throw new InvalidParametersError('Destination peer id was missing')\n  }\n\n  const circuitAddress = multiaddr(\n    ma.getComponents()\n      .filter(({ name }) => name !== 'webrtc')\n  )\n\n  return { circuitAddress, targetPeer: peerIdFromString(target) }\n}\n", "/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof globalThis === \"object\" ? globalThis :\n            typeof global === \"object\" ? global :\n                typeof self === \"object\" ? self :\n                    typeof this === \"object\" ? this :\n                        sloppyModeThis();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect !== \"undefined\") {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter, root);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                if (previous)\n                    previous(key, value);\n            };\n        }\n        function functionThis() {\n            try {\n                return Function(\"return this;\")();\n            }\n            catch (_) { }\n        }\n        function indirectEvalThis() {\n            try {\n                return (void 0, eval)(\"(function() { return this; })()\");\n            }\n            catch (_) { }\n        }\n        function sloppyModeThis() {\n            return functionThis() || indirectEvalThis();\n        }\n    })(function (exporter, root) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var _Map = typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        var registrySymbol = supportsSymbol ? Symbol.for(\"@reflect-metadata:registry\") : undefined;\n        var metadataRegistry = GetOrCreateMetadataRegistry();\n        var metadataProvider = CreateMetadataProvider(metadataRegistry);\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var provider = GetMetadataProvider(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(provider))\n                return false;\n            return provider.OrdinaryDeleteMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var provider = GetMetadataProvider(O, P, /*Create*/ false);\n            if (IsUndefined(provider))\n                return false;\n            return ToBoolean(provider.OrdinaryHasOwnMetadata(MetadataKey, O, P));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var provider = GetMetadataProvider(O, P, /*Create*/ false);\n            if (IsUndefined(provider))\n                return;\n            return provider.OrdinaryGetOwnMetadata(MetadataKey, O, P);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var provider = GetMetadataProvider(O, P, /*Create*/ true);\n            provider.OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var provider = GetMetadataProvider(O, P, /*create*/ false);\n            if (!provider) {\n                return [];\n            }\n            return provider.OrdinaryOwnMetadataKeys(O, P);\n        }\n        // 6 ECMAScript Data Types and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        function SameValueZero(x, y) {\n            return x === y || x !== x && y !== y;\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // Global metadata registry\n        // - Allows `import \"reflect-metadata\"` and `import \"reflect-metadata/no-conflict\"` to interoperate.\n        // - Uses isolated metadata if `Reflect` is frozen before the registry can be installed.\n        /**\n         * Creates a registry used to allow multiple `reflect-metadata` providers.\n         */\n        function CreateMetadataRegistry() {\n            var fallback;\n            if (!IsUndefined(registrySymbol) &&\n                typeof root.Reflect !== \"undefined\" &&\n                !(registrySymbol in root.Reflect) &&\n                typeof root.Reflect.defineMetadata === \"function\") {\n                // interoperate with older version of `reflect-metadata` that did not support a registry.\n                fallback = CreateFallbackProvider(root.Reflect);\n            }\n            var first;\n            var second;\n            var rest;\n            var targetProviderMap = new _WeakMap();\n            var registry = {\n                registerProvider: registerProvider,\n                getProvider: getProvider,\n                setProvider: setProvider,\n            };\n            return registry;\n            function registerProvider(provider) {\n                if (!Object.isExtensible(registry)) {\n                    throw new Error(\"Cannot add provider to a frozen registry.\");\n                }\n                switch (true) {\n                    case fallback === provider: break;\n                    case IsUndefined(first):\n                        first = provider;\n                        break;\n                    case first === provider: break;\n                    case IsUndefined(second):\n                        second = provider;\n                        break;\n                    case second === provider: break;\n                    default:\n                        if (rest === undefined)\n                            rest = new _Set();\n                        rest.add(provider);\n                        break;\n                }\n            }\n            function getProviderNoCache(O, P) {\n                if (!IsUndefined(first)) {\n                    if (first.isProviderFor(O, P))\n                        return first;\n                    if (!IsUndefined(second)) {\n                        if (second.isProviderFor(O, P))\n                            return first;\n                        if (!IsUndefined(rest)) {\n                            var iterator = GetIterator(rest);\n                            while (true) {\n                                var next = IteratorStep(iterator);\n                                if (!next) {\n                                    return undefined;\n                                }\n                                var provider = IteratorValue(next);\n                                if (provider.isProviderFor(O, P)) {\n                                    IteratorClose(iterator);\n                                    return provider;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!IsUndefined(fallback) && fallback.isProviderFor(O, P)) {\n                    return fallback;\n                }\n                return undefined;\n            }\n            function getProvider(O, P) {\n                var providerMap = targetProviderMap.get(O);\n                var provider;\n                if (!IsUndefined(providerMap)) {\n                    provider = providerMap.get(P);\n                }\n                if (!IsUndefined(provider)) {\n                    return provider;\n                }\n                provider = getProviderNoCache(O, P);\n                if (!IsUndefined(provider)) {\n                    if (IsUndefined(providerMap)) {\n                        providerMap = new _Map();\n                        targetProviderMap.set(O, providerMap);\n                    }\n                    providerMap.set(P, provider);\n                }\n                return provider;\n            }\n            function hasProvider(provider) {\n                if (IsUndefined(provider))\n                    throw new TypeError();\n                return first === provider || second === provider || !IsUndefined(rest) && rest.has(provider);\n            }\n            function setProvider(O, P, provider) {\n                if (!hasProvider(provider)) {\n                    throw new Error(\"Metadata provider not registered.\");\n                }\n                var existingProvider = getProvider(O, P);\n                if (existingProvider !== provider) {\n                    if (!IsUndefined(existingProvider)) {\n                        return false;\n                    }\n                    var providerMap = targetProviderMap.get(O);\n                    if (IsUndefined(providerMap)) {\n                        providerMap = new _Map();\n                        targetProviderMap.set(O, providerMap);\n                    }\n                    providerMap.set(P, provider);\n                }\n                return true;\n            }\n        }\n        /**\n         * Gets or creates the shared registry of metadata providers.\n         */\n        function GetOrCreateMetadataRegistry() {\n            var metadataRegistry;\n            if (!IsUndefined(registrySymbol) && IsObject(root.Reflect) && Object.isExtensible(root.Reflect)) {\n                metadataRegistry = root.Reflect[registrySymbol];\n            }\n            if (IsUndefined(metadataRegistry)) {\n                metadataRegistry = CreateMetadataRegistry();\n            }\n            if (!IsUndefined(registrySymbol) && IsObject(root.Reflect) && Object.isExtensible(root.Reflect)) {\n                Object.defineProperty(root.Reflect, registrySymbol, {\n                    enumerable: false,\n                    configurable: false,\n                    writable: false,\n                    value: metadataRegistry\n                });\n            }\n            return metadataRegistry;\n        }\n        function CreateMetadataProvider(registry) {\n            // [[Metadata]] internal slot\n            // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n            var metadata = new _WeakMap();\n            var provider = {\n                isProviderFor: function (O, P) {\n                    var targetMetadata = metadata.get(O);\n                    if (IsUndefined(targetMetadata))\n                        return false;\n                    return targetMetadata.has(P);\n                },\n                OrdinaryDefineOwnMetadata: OrdinaryDefineOwnMetadata,\n                OrdinaryHasOwnMetadata: OrdinaryHasOwnMetadata,\n                OrdinaryGetOwnMetadata: OrdinaryGetOwnMetadata,\n                OrdinaryOwnMetadataKeys: OrdinaryOwnMetadataKeys,\n                OrdinaryDeleteMetadata: OrdinaryDeleteMetadata,\n            };\n            metadataRegistry.registerProvider(provider);\n            return provider;\n            function GetOrCreateMetadataMap(O, P, Create) {\n                var targetMetadata = metadata.get(O);\n                var createdTargetMetadata = false;\n                if (IsUndefined(targetMetadata)) {\n                    if (!Create)\n                        return undefined;\n                    targetMetadata = new _Map();\n                    metadata.set(O, targetMetadata);\n                    createdTargetMetadata = true;\n                }\n                var metadataMap = targetMetadata.get(P);\n                if (IsUndefined(metadataMap)) {\n                    if (!Create)\n                        return undefined;\n                    metadataMap = new _Map();\n                    targetMetadata.set(P, metadataMap);\n                    if (!registry.setProvider(O, P, provider)) {\n                        targetMetadata.delete(P);\n                        if (createdTargetMetadata) {\n                            metadata.delete(O);\n                        }\n                        throw new Error(\"Wrong provider for target.\");\n                    }\n                }\n                return metadataMap;\n            }\n            // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n            function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return false;\n                return ToBoolean(metadataMap.has(MetadataKey));\n            }\n            // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n            function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return undefined;\n                return metadataMap.get(MetadataKey);\n            }\n            // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n            function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n                metadataMap.set(MetadataKey, MetadataValue);\n            }\n            // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n            function OrdinaryOwnMetadataKeys(O, P) {\n                var keys = [];\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return keys;\n                var keysObj = metadataMap.keys();\n                var iterator = GetIterator(keysObj);\n                var k = 0;\n                while (true) {\n                    var next = IteratorStep(iterator);\n                    if (!next) {\n                        keys.length = k;\n                        return keys;\n                    }\n                    var nextValue = IteratorValue(next);\n                    try {\n                        keys[k] = nextValue;\n                    }\n                    catch (e) {\n                        try {\n                            IteratorClose(iterator);\n                        }\n                        finally {\n                            throw e;\n                        }\n                    }\n                    k++;\n                }\n            }\n            function OrdinaryDeleteMetadata(MetadataKey, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return false;\n                if (!metadataMap.delete(MetadataKey))\n                    return false;\n                if (metadataMap.size === 0) {\n                    var targetMetadata = metadata.get(O);\n                    if (!IsUndefined(targetMetadata)) {\n                        targetMetadata.delete(P);\n                        if (targetMetadata.size === 0) {\n                            metadata.delete(targetMetadata);\n                        }\n                    }\n                }\n                return true;\n            }\n        }\n        function CreateFallbackProvider(reflect) {\n            var defineMetadata = reflect.defineMetadata, hasOwnMetadata = reflect.hasOwnMetadata, getOwnMetadata = reflect.getOwnMetadata, getOwnMetadataKeys = reflect.getOwnMetadataKeys, deleteMetadata = reflect.deleteMetadata;\n            var metadataOwner = new _WeakMap();\n            var provider = {\n                isProviderFor: function (O, P) {\n                    var metadataPropertySet = metadataOwner.get(O);\n                    if (!IsUndefined(metadataPropertySet) && metadataPropertySet.has(P)) {\n                        return true;\n                    }\n                    if (getOwnMetadataKeys(O, P).length) {\n                        if (IsUndefined(metadataPropertySet)) {\n                            metadataPropertySet = new _Set();\n                            metadataOwner.set(O, metadataPropertySet);\n                        }\n                        metadataPropertySet.add(P);\n                        return true;\n                    }\n                    return false;\n                },\n                OrdinaryDefineOwnMetadata: defineMetadata,\n                OrdinaryHasOwnMetadata: hasOwnMetadata,\n                OrdinaryGetOwnMetadata: getOwnMetadata,\n                OrdinaryOwnMetadataKeys: getOwnMetadataKeys,\n                OrdinaryDeleteMetadata: deleteMetadata,\n            };\n            return provider;\n        }\n        /**\n         * Gets the metadata provider for an object. If the object has no metadata provider and this is for a create operation,\n         * then this module's metadata provider is assigned to the object.\n         */\n        function GetMetadataProvider(O, P, Create) {\n            var registeredProvider = metadataRegistry.getProvider(O, P);\n            if (!IsUndefined(registeredProvider)) {\n                return registeredProvider;\n            }\n            if (Create) {\n                if (metadataRegistry.setProvider(O, P, metadataProvider)) {\n                    return metadataProvider;\n                }\n                throw new Error(\"Illegal state.\");\n            }\n            return undefined;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            var Map = /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (SameValueZero(key, this._cacheKey)) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (!SameValueZero(this._cacheKey, key)) {\n                        this._cacheIndex = -1;\n                        for (var i = 0; i < this._keys.length; i++) {\n                            if (SameValueZero(this._keys[i], key)) {\n                                this._cacheIndex = i;\n                                break;\n                            }\n                        }\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            return Map;\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            var Set = /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.keys(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n            return Set;\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    var array = new Uint8Array(size);\n                    if (typeof crypto !== \"undefined\") {\n                        crypto.getRandomValues(array);\n                    }\n                    else if (typeof msCrypto !== \"undefined\") {\n                        msCrypto.getRandomValues(array);\n                    }\n                    else {\n                        FillRandomBytes(array, size);\n                    }\n                    return array;\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 § 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n", "export var AsnTypeTypes;\n(function (AsnTypeTypes) {\n    AsnTypeTypes[AsnTypeTypes[\"Sequence\"] = 0] = \"Sequence\";\n    AsnTypeTypes[AsnTypeTypes[\"Set\"] = 1] = \"Set\";\n    AsnTypeTypes[AsnTypeTypes[\"Choice\"] = 2] = \"Choice\";\n})(AsnTypeTypes || (AsnTypeTypes = {}));\nexport var AsnPropTypes;\n(function (AsnPropTypes) {\n    AsnPropTypes[AsnPropTypes[\"Any\"] = 1] = \"Any\";\n    AsnPropTypes[AsnPropTypes[\"Boolean\"] = 2] = \"Boolean\";\n    AsnPropTypes[AsnPropTypes[\"OctetString\"] = 3] = \"OctetString\";\n    AsnPropTypes[AsnPropTypes[\"BitString\"] = 4] = \"BitString\";\n    AsnPropTypes[AsnPropTypes[\"Integer\"] = 5] = \"Integer\";\n    AsnPropTypes[AsnPropTypes[\"Enumerated\"] = 6] = \"Enumerated\";\n    AsnPropTypes[AsnPropTypes[\"ObjectIdentifier\"] = 7] = \"ObjectIdentifier\";\n    AsnPropTypes[AsnPropTypes[\"Utf8String\"] = 8] = \"Utf8String\";\n    AsnPropTypes[AsnPropTypes[\"BmpString\"] = 9] = \"BmpString\";\n    AsnPropTypes[AsnPropTypes[\"UniversalString\"] = 10] = \"UniversalString\";\n    AsnPropTypes[AsnPropTypes[\"NumericString\"] = 11] = \"NumericString\";\n    AsnPropTypes[AsnPropTypes[\"PrintableString\"] = 12] = \"PrintableString\";\n    AsnPropTypes[AsnPropTypes[\"TeletexString\"] = 13] = \"TeletexString\";\n    AsnPropTypes[AsnPropTypes[\"VideotexString\"] = 14] = \"VideotexString\";\n    AsnPropTypes[AsnPropTypes[\"IA5String\"] = 15] = \"IA5String\";\n    AsnPropTypes[AsnPropTypes[\"GraphicString\"] = 16] = \"GraphicString\";\n    AsnPropTypes[AsnPropTypes[\"VisibleString\"] = 17] = \"VisibleString\";\n    AsnPropTypes[AsnPropTypes[\"GeneralString\"] = 18] = \"GeneralString\";\n    AsnPropTypes[AsnPropTypes[\"CharacterString\"] = 19] = \"CharacterString\";\n    AsnPropTypes[AsnPropTypes[\"UTCTime\"] = 20] = \"UTCTime\";\n    AsnPropTypes[AsnPropTypes[\"GeneralizedTime\"] = 21] = \"GeneralizedTime\";\n    AsnPropTypes[AsnPropTypes[\"DATE\"] = 22] = \"DATE\";\n    AsnPropTypes[AsnPropTypes[\"TimeOfDay\"] = 23] = \"TimeOfDay\";\n    AsnPropTypes[AsnPropTypes[\"DateTime\"] = 24] = \"DateTime\";\n    AsnPropTypes[AsnPropTypes[\"Duration\"] = 25] = \"Duration\";\n    AsnPropTypes[AsnPropTypes[\"TIME\"] = 26] = \"TIME\";\n    AsnPropTypes[AsnPropTypes[\"Null\"] = 27] = \"Null\";\n})(AsnPropTypes || (AsnPropTypes = {}));\n", "import * as asn1js from \"asn1js\";\nimport { BufferSourceConverter } from \"pvtsutils\";\nexport class BitString {\n    constructor(params, unusedBits = 0) {\n        this.unusedBits = 0;\n        this.value = new ArrayBuffer(0);\n        if (params) {\n            if (typeof params === \"number\") {\n                this.fromNumber(params);\n            }\n            else if (BufferSourceConverter.isBufferSource(params)) {\n                this.unusedBits = unusedBits;\n                this.value = BufferSourceConverter.toArrayBuffer(params);\n            }\n            else {\n                throw TypeError(\"Unsupported type of 'params' argument for BitString\");\n            }\n        }\n    }\n    fromASN(asn) {\n        if (!(asn instanceof asn1js.BitString)) {\n            throw new TypeError(\"Argument 'asn' is not instance of ASN.1 BitString\");\n        }\n        this.unusedBits = asn.valueBlock.unusedBits;\n        this.value = asn.valueBlock.valueHex;\n        return this;\n    }\n    toASN() {\n        return new asn1js.BitString({ unusedBits: this.unusedBits, valueHex: this.value });\n    }\n    toSchema(name) {\n        return new asn1js.BitString({ name });\n    }\n    toNumber() {\n        let res = \"\";\n        const uintArray = new Uint8Array(this.value);\n        for (const octet of uintArray) {\n            res += octet.toString(2).padStart(8, \"0\");\n        }\n        res = res.split(\"\").reverse().join(\"\");\n        if (this.unusedBits) {\n            res = res.slice(this.unusedBits).padStart(this.unusedBits, \"0\");\n        }\n        return parseInt(res, 2);\n    }\n    fromNumber(value) {\n        let bits = value.toString(2);\n        const octetSize = (bits.length + 7) >> 3;\n        this.unusedBits = (octetSize << 3) - bits.length;\n        const octets = new Uint8Array(octetSize);\n        bits = bits\n            .padStart(octetSize << 3, \"0\")\n            .split(\"\")\n            .reverse()\n            .join(\"\");\n        let index = 0;\n        while (index < octetSize) {\n            octets[index] = parseInt(bits.slice(index << 3, (index << 3) + 8), 2);\n            index++;\n        }\n        this.value = octets.buffer;\n    }\n}\n", "import * as asn1js from \"asn1js\";\nimport { BufferSourceConverter } from \"pvtsutils\";\nexport class OctetString {\n    get byteLength() {\n        return this.buffer.byteLength;\n    }\n    get byteOffset() {\n        return 0;\n    }\n    constructor(param) {\n        if (typeof param === \"number\") {\n            this.buffer = new ArrayBuffer(param);\n        }\n        else {\n            if (BufferSourceConverter.isBufferSource(param)) {\n                this.buffer = BufferSourceConverter.toArrayBuffer(param);\n            }\n            else if (Array.isArray(param)) {\n                this.buffer = new Uint8Array(param);\n            }\n            else {\n                this.buffer = new ArrayBuffer(0);\n            }\n        }\n    }\n    fromASN(asn) {\n        if (!(asn instanceof asn1js.OctetString)) {\n            throw new TypeError(\"Argument 'asn' is not instance of ASN.1 OctetString\");\n        }\n        this.buffer = asn.valueBlock.valueHex;\n        return this;\n    }\n    toASN() {\n        return new asn1js.OctetString({ valueHex: this.buffer });\n    }\n    toSchema(name) {\n        return new asn1js.OctetString({ name });\n    }\n}\n", "import * as asn1js from \"asn1js\";\nimport { AsnPropTypes } from \"./enums\";\nimport { OctetString } from \"./types/index\";\nexport const AsnAnyConverter = {\n    fromASN: (value) => value instanceof asn1js.Null ? null : value.valueBeforeDecodeView,\n    toASN: (value) => {\n        if (value === null) {\n            return new asn1js.Null();\n        }\n        const schema = asn1js.fromBER(value);\n        if (schema.result.error) {\n            throw new Error(schema.result.error);\n        }\n        return schema.result;\n    },\n};\nexport const AsnIntegerConverter = {\n    fromASN: (value) => value.valueBlock.valueHexView.byteLength >= 4\n        ? value.valueBlock.toString()\n        : value.valueBlock.valueDec,\n    toASN: (value) => new asn1js.Integer({ value: +value }),\n};\nexport const AsnEnumeratedConverter = {\n    fromASN: (value) => value.valueBlock.valueDec,\n    toASN: (value) => new asn1js.Enumerated({ value }),\n};\nexport const AsnIntegerArrayBufferConverter = {\n    fromASN: (value) => value.valueBlock.valueHexView,\n    toASN: (value) => new asn1js.Integer({ valueHex: value }),\n};\nexport const AsnIntegerBigIntConverter = {\n    fromASN: (value) => value.toBigInt(),\n    toASN: (value) => asn1js.Integer.fromBigInt(value),\n};\nexport const AsnBitStringConverter = {\n    fromASN: (value) => value.valueBlock.valueHexView,\n    toASN: (value) => new asn1js.BitString({ valueHex: value }),\n};\nexport const AsnObjectIdentifierConverter = {\n    fromASN: (value) => value.valueBlock.toString(),\n    toASN: (value) => new asn1js.ObjectIdentifier({ value }),\n};\nexport const AsnBooleanConverter = {\n    fromASN: (value) => value.valueBlock.value,\n    toASN: (value) => new asn1js.Boolean({ value }),\n};\nexport const AsnOctetStringConverter = {\n    fromASN: (value) => value.valueBlock.valueHexView,\n    toASN: (value) => new asn1js.OctetString({ valueHex: value }),\n};\nexport const AsnConstructedOctetStringConverter = {\n    fromASN: (value) => new OctetString(value.getValue()),\n    toASN: (value) => value.toASN(),\n};\nfunction createStringConverter(Asn1Type) {\n    return {\n        fromASN: (value) => value.valueBlock.value,\n        toASN: (value) => new Asn1Type({ value }),\n    };\n}\nexport const AsnUtf8StringConverter = createStringConverter(asn1js.Utf8String);\nexport const AsnBmpStringConverter = createStringConverter(asn1js.BmpString);\nexport const AsnUniversalStringConverter = createStringConverter(asn1js.UniversalString);\nexport const AsnNumericStringConverter = createStringConverter(asn1js.NumericString);\nexport const AsnPrintableStringConverter = createStringConverter(asn1js.PrintableString);\nexport const AsnTeletexStringConverter = createStringConverter(asn1js.TeletexString);\nexport const AsnVideotexStringConverter = createStringConverter(asn1js.VideotexString);\nexport const AsnIA5StringConverter = createStringConverter(asn1js.IA5String);\nexport const AsnGraphicStringConverter = createStringConverter(asn1js.GraphicString);\nexport const AsnVisibleStringConverter = createStringConverter(asn1js.VisibleString);\nexport const AsnGeneralStringConverter = createStringConverter(asn1js.GeneralString);\nexport const AsnCharacterStringConverter = createStringConverter(asn1js.CharacterString);\nexport const AsnUTCTimeConverter = {\n    fromASN: (value) => value.toDate(),\n    toASN: (value) => new asn1js.UTCTime({ valueDate: value }),\n};\nexport const AsnGeneralizedTimeConverter = {\n    fromASN: (value) => value.toDate(),\n    toASN: (value) => new asn1js.GeneralizedTime({ valueDate: value }),\n};\nexport const AsnNullConverter = {\n    fromASN: () => null,\n    toASN: () => {\n        return new asn1js.Null();\n    },\n};\nexport function defaultConverter(type) {\n    switch (type) {\n        case AsnPropTypes.Any:\n            return AsnAnyConverter;\n        case AsnPropTypes.BitString:\n            return AsnBitStringConverter;\n        case AsnPropTypes.BmpString:\n            return AsnBmpStringConverter;\n        case AsnPropTypes.Boolean:\n            return AsnBooleanConverter;\n        case AsnPropTypes.CharacterString:\n            return AsnCharacterStringConverter;\n        case AsnPropTypes.Enumerated:\n            return AsnEnumeratedConverter;\n        case AsnPropTypes.GeneralString:\n            return AsnGeneralStringConverter;\n        case AsnPropTypes.GeneralizedTime:\n            return AsnGeneralizedTimeConverter;\n        case AsnPropTypes.GraphicString:\n            return AsnGraphicStringConverter;\n        case AsnPropTypes.IA5String:\n            return AsnIA5StringConverter;\n        case AsnPropTypes.Integer:\n            return AsnIntegerConverter;\n        case AsnPropTypes.Null:\n            return AsnNullConverter;\n        case AsnPropTypes.NumericString:\n            return AsnNumericStringConverter;\n        case AsnPropTypes.ObjectIdentifier:\n            return AsnObjectIdentifierConverter;\n        case AsnPropTypes.OctetString:\n            return AsnOctetStringConverter;\n        case AsnPropTypes.PrintableString:\n            return AsnPrintableStringConverter;\n        case AsnPropTypes.TeletexString:\n            return AsnTeletexStringConverter;\n        case AsnPropTypes.UTCTime:\n            return AsnUTCTimeConverter;\n        case AsnPropTypes.UniversalString:\n            return AsnUniversalStringConverter;\n        case AsnPropTypes.Utf8String:\n            return AsnUtf8StringConverter;\n        case AsnPropTypes.VideotexString:\n            return AsnVideotexStringConverter;\n        case AsnPropTypes.VisibleString:\n            return AsnVisibleStringConverter;\n        default:\n            return null;\n    }\n}\n", "export function isConvertible(target) {\n    if (typeof target === \"function\" && target.prototype) {\n        if (target.prototype.toASN && target.prototype.fromASN) {\n            return true;\n        }\n        else {\n            return isConvertible(target.prototype);\n        }\n    }\n    else {\n        return !!(target && typeof target === \"object\" && \"toASN\" in target && \"fromASN\" in target);\n    }\n}\nexport function isTypeOfArray(target) {\n    var _a;\n    if (target) {\n        const proto = Object.getPrototypeOf(target);\n        if (((_a = proto === null || proto === void 0 ? void 0 : proto.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === Array) {\n            return true;\n        }\n        return isTypeOfArray(proto);\n    }\n    return false;\n}\nexport function isArrayEqual(bytes1, bytes2) {\n    if (!(bytes1 && bytes2)) {\n        return false;\n    }\n    if (bytes1.byteLength !== bytes2.byteLength) {\n        return false;\n    }\n    const b1 = new Uint8Array(bytes1);\n    const b2 = new Uint8Array(bytes2);\n    for (let i = 0; i < bytes1.byteLength; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n", "import * as asn1js from \"asn1js\";\nimport { AsnPropTypes, AsnTypeTypes } from \"./enums\";\nimport { isConvertible } from \"./helper\";\nexport class AsnSchemaStorage {\n    constructor() {\n        this.items = new WeakMap();\n    }\n    has(target) {\n        return this.items.has(target);\n    }\n    get(target, checkSchema = false) {\n        const schema = this.items.get(target);\n        if (!schema) {\n            throw new Error(`Cannot get schema for '${target.prototype.constructor.name}' target`);\n        }\n        if (checkSchema && !schema.schema) {\n            throw new Error(`Schema '${target.prototype.constructor.name}' doesn't contain ASN.1 schema. Call 'AsnSchemaStorage.cache'.`);\n        }\n        return schema;\n    }\n    cache(target) {\n        const schema = this.get(target);\n        if (!schema.schema) {\n            schema.schema = this.create(target, true);\n        }\n    }\n    createDefault(target) {\n        const schema = {\n            type: AsnTypeTypes.Sequence,\n            items: {},\n        };\n        const parentSchema = this.findParentSchema(target);\n        if (parentSchema) {\n            Object.assign(schema, parentSchema);\n            schema.items = Object.assign({}, schema.items, parentSchema.items);\n        }\n        return schema;\n    }\n    create(target, useNames) {\n        const schema = this.items.get(target) || this.createDefault(target);\n        const asn1Value = [];\n        for (const key in schema.items) {\n            const item = schema.items[key];\n            const name = useNames ? key : \"\";\n            let asn1Item;\n            if (typeof item.type === \"number\") {\n                const Asn1TypeName = AsnPropTypes[item.type];\n                const Asn1Type = asn1js[Asn1TypeName];\n                if (!Asn1Type) {\n                    throw new Error(`Cannot get ASN1 class by name '${Asn1TypeName}'`);\n                }\n                asn1Item = new Asn1Type({ name });\n            }\n            else if (isConvertible(item.type)) {\n                const instance = new item.type();\n                asn1Item = instance.toSchema(name);\n            }\n            else if (item.optional) {\n                const itemSchema = this.get(item.type);\n                if (itemSchema.type === AsnTypeTypes.Choice) {\n                    asn1Item = new asn1js.Any({ name });\n                }\n                else {\n                    asn1Item = this.create(item.type, false);\n                    asn1Item.name = name;\n                }\n            }\n            else {\n                asn1Item = new asn1js.Any({ name });\n            }\n            const optional = !!item.optional || item.defaultValue !== undefined;\n            if (item.repeated) {\n                asn1Item.name = \"\";\n                const Container = item.repeated === \"set\" ? asn1js.Set : asn1js.Sequence;\n                asn1Item = new Container({\n                    name: \"\",\n                    value: [\n                        new asn1js.Repeated({\n                            name,\n                            value: asn1Item,\n                        }),\n                    ],\n                });\n            }\n            if (item.context !== null && item.context !== undefined) {\n                if (item.implicit) {\n                    if (typeof item.type === \"number\" || isConvertible(item.type)) {\n                        const Container = item.repeated ? asn1js.Constructed : asn1js.Primitive;\n                        asn1Value.push(new Container({\n                            name,\n                            optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: item.context,\n                            },\n                        }));\n                    }\n                    else {\n                        this.cache(item.type);\n                        const isRepeated = !!item.repeated;\n                        let value = !isRepeated ? this.get(item.type, true).schema : asn1Item;\n                        value =\n                            \"valueBlock\" in value\n                                ? value.valueBlock.value\n                                : value.value;\n                        asn1Value.push(new asn1js.Constructed({\n                            name: !isRepeated ? name : \"\",\n                            optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: item.context,\n                            },\n                            value: value,\n                        }));\n                    }\n                }\n                else {\n                    asn1Value.push(new asn1js.Constructed({\n                        optional,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: item.context,\n                        },\n                        value: [asn1Item],\n                    }));\n                }\n            }\n            else {\n                asn1Item.optional = optional;\n                asn1Value.push(asn1Item);\n            }\n        }\n        switch (schema.type) {\n            case AsnTypeTypes.Sequence:\n                return new asn1js.Sequence({ value: asn1Value, name: \"\" });\n            case AsnTypeTypes.Set:\n                return new asn1js.Set({ value: asn1Value, name: \"\" });\n            case AsnTypeTypes.Choice:\n                return new asn1js.Choice({ value: asn1Value, name: \"\" });\n            default:\n                throw new Error(`Unsupported ASN1 type in use`);\n        }\n    }\n    set(target, schema) {\n        this.items.set(target, schema);\n        return this;\n    }\n    findParentSchema(target) {\n        const parent = Object.getPrototypeOf(target);\n        if (parent) {\n            const schema = this.items.get(parent);\n            return schema || this.findParentSchema(parent);\n        }\n        return null;\n    }\n}\n", "import { AsnSchemaStorage } from \"./schema\";\nexport const schemaStorage = new AsnSchemaStorage();\n", "import * as converters from \"./converters\";\nimport { AsnTypeTypes } from \"./enums\";\nimport { schemaStorage } from \"./storage\";\nexport const AsnType = (options) => (target) => {\n    let schema;\n    if (!schemaStorage.has(target)) {\n        schema = schemaStorage.createDefault(target);\n        schemaStorage.set(target, schema);\n    }\n    else {\n        schema = schemaStorage.get(target);\n    }\n    Object.assign(schema, options);\n};\nexport const AsnChoiceType = () => AsnType({ type: AsnTypeTypes.Choice });\nexport const AsnSetType = (options) => AsnType({ type: AsnTypeTypes.Set, ...options });\nexport const AsnSequenceType = (options) => AsnType({ type: AsnTypeTypes.Sequence, ...options });\nexport const AsnProp = (options) => (target, propertyKey) => {\n    let schema;\n    if (!schemaStorage.has(target.constructor)) {\n        schema = schemaStorage.createDefault(target.constructor);\n        schemaStorage.set(target.constructor, schema);\n    }\n    else {\n        schema = schemaStorage.get(target.constructor);\n    }\n    const copyOptions = Object.assign({}, options);\n    if (typeof copyOptions.type === \"number\" && !copyOptions.converter) {\n        const defaultConverter = converters.defaultConverter(options.type);\n        if (!defaultConverter) {\n            throw new Error(`Cannot get default converter for property '${propertyKey}' of ${target.constructor.name}`);\n        }\n        copyOptions.converter = defaultConverter;\n    }\n    schema.items[propertyKey] = copyOptions;\n};\n", "export class AsnSchemaValidationError extends Error {\n    constructor() {\n        super(...arguments);\n        this.schemas = [];\n    }\n}\n", "import * as asn1js from \"asn1js\";\nimport { AsnPropTypes, AsnTypeTypes } from \"./enums\";\nimport * as converters from \"./converters\";\nimport { AsnSchemaValidationError } from \"./errors\";\nimport { isConvertible, isTypeOfArray } from \"./helper\";\nimport { schemaStorage } from \"./storage\";\nexport class AsnParser {\n    static parse(data, target) {\n        const asn1Parsed = asn1js.fromBER(data);\n        if (asn1Parsed.result.error) {\n            throw new Error(asn1Parsed.result.error);\n        }\n        const res = this.fromASN(asn1Parsed.result, target);\n        return res;\n    }\n    static fromASN(asn1Schema, target) {\n        var _a;\n        try {\n            if (isConvertible(target)) {\n                const value = new target();\n                return value.fromASN(asn1Schema);\n            }\n            const schema = schemaStorage.get(target);\n            schemaStorage.cache(target);\n            let targetSchema = schema.schema;\n            if (asn1Schema.constructor === asn1js.Constructed && schema.type !== AsnTypeTypes.Choice) {\n                targetSchema = new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: asn1Schema.idBlock.tagNumber,\n                    },\n                    value: schema.schema.valueBlock.value,\n                });\n                for (const key in schema.items) {\n                    delete asn1Schema[key];\n                }\n            }\n            const asn1ComparedSchema = asn1js.compareSchema({}, asn1Schema, targetSchema);\n            if (!asn1ComparedSchema.verified) {\n                throw new AsnSchemaValidationError(`Data does not match to ${target.name} ASN1 schema. ${asn1ComparedSchema.result.error}`);\n            }\n            const res = new target();\n            if (isTypeOfArray(target)) {\n                if (!(\"value\" in asn1Schema.valueBlock && Array.isArray(asn1Schema.valueBlock.value))) {\n                    throw new Error(`Cannot get items from the ASN.1 parsed value. ASN.1 object is not constructed.`);\n                }\n                const itemType = schema.itemType;\n                if (typeof itemType === \"number\") {\n                    const converter = converters.defaultConverter(itemType);\n                    if (!converter) {\n                        throw new Error(`Cannot get default converter for array item of ${target.name} ASN1 schema`);\n                    }\n                    return target.from(asn1Schema.valueBlock.value, (element) => converter.fromASN(element));\n                }\n                else {\n                    return target.from(asn1Schema.valueBlock.value, (element) => this.fromASN(element, itemType));\n                }\n            }\n            for (const key in schema.items) {\n                const asn1SchemaValue = asn1ComparedSchema.result[key];\n                if (!asn1SchemaValue) {\n                    continue;\n                }\n                const schemaItem = schema.items[key];\n                const schemaItemType = schemaItem.type;\n                if (typeof schemaItemType === \"number\" || isConvertible(schemaItemType)) {\n                    const converter = (_a = schemaItem.converter) !== null && _a !== void 0 ? _a : (isConvertible(schemaItemType)\n                        ? new schemaItemType()\n                        : null);\n                    if (!converter) {\n                        throw new Error(\"Converter is empty\");\n                    }\n                    if (schemaItem.repeated) {\n                        if (schemaItem.implicit) {\n                            const Container = schemaItem.repeated === \"sequence\" ? asn1js.Sequence : asn1js.Set;\n                            const newItem = new Container();\n                            newItem.valueBlock = asn1SchemaValue.valueBlock;\n                            const newItemAsn = asn1js.fromBER(newItem.toBER(false));\n                            if (newItemAsn.offset === -1) {\n                                throw new Error(`Cannot parse the child item. ${newItemAsn.result.error}`);\n                            }\n                            if (!(\"value\" in newItemAsn.result.valueBlock &&\n                                Array.isArray(newItemAsn.result.valueBlock.value))) {\n                                throw new Error(\"Cannot get items from the ASN.1 parsed value. ASN.1 object is not constructed.\");\n                            }\n                            const value = newItemAsn.result.valueBlock.value;\n                            res[key] = Array.from(value, (element) => converter.fromASN(element));\n                        }\n                        else {\n                            res[key] = Array.from(asn1SchemaValue, (element) => converter.fromASN(element));\n                        }\n                    }\n                    else {\n                        let value = asn1SchemaValue;\n                        if (schemaItem.implicit) {\n                            let newItem;\n                            if (isConvertible(schemaItemType)) {\n                                newItem = new schemaItemType().toSchema(\"\");\n                            }\n                            else {\n                                const Asn1TypeName = AsnPropTypes[schemaItemType];\n                                const Asn1Type = asn1js[Asn1TypeName];\n                                if (!Asn1Type) {\n                                    throw new Error(`Cannot get '${Asn1TypeName}' class from asn1js module`);\n                                }\n                                newItem = new Asn1Type();\n                            }\n                            newItem.valueBlock = value.valueBlock;\n                            value = asn1js.fromBER(newItem.toBER(false)).result;\n                        }\n                        res[key] = converter.fromASN(value);\n                    }\n                }\n                else {\n                    if (schemaItem.repeated) {\n                        if (!Array.isArray(asn1SchemaValue)) {\n                            throw new Error(\"Cannot get list of items from the ASN.1 parsed value. ASN.1 value should be iterable.\");\n                        }\n                        res[key] = Array.from(asn1SchemaValue, (element) => this.fromASN(element, schemaItemType));\n                    }\n                    else {\n                        res[key] = this.fromASN(asn1SchemaValue, schemaItemType);\n                    }\n                }\n            }\n            return res;\n        }\n        catch (error) {\n            if (error instanceof AsnSchemaValidationError) {\n                error.schemas.push(target.name);\n            }\n            throw error;\n        }\n    }\n}\n", "import * as asn1js from \"asn1js\";\nimport * as converters from \"./converters\";\nimport { AsnPropTypes, AsnTypeTypes } from \"./enums\";\nimport { isConvertible, isArrayEqual } from \"./helper\";\nimport { schemaStorage } from \"./storage\";\nexport class AsnSerializer {\n    static serialize(obj) {\n        if (obj instanceof asn1js.BaseBlock) {\n            return obj.toBER(false);\n        }\n        return this.toASN(obj).toBER(false);\n    }\n    static toASN(obj) {\n        if (obj && typeof obj === \"object\" && isConvertible(obj)) {\n            return obj.toASN();\n        }\n        if (!(obj && typeof obj === \"object\")) {\n            throw new TypeError(\"Parameter 1 should be type of Object.\");\n        }\n        const target = obj.constructor;\n        const schema = schemaStorage.get(target);\n        schemaStorage.cache(target);\n        let asn1Value = [];\n        if (schema.itemType) {\n            if (!Array.isArray(obj)) {\n                throw new TypeError(\"Parameter 1 should be type of Array.\");\n            }\n            if (typeof schema.itemType === \"number\") {\n                const converter = converters.defaultConverter(schema.itemType);\n                if (!converter) {\n                    throw new Error(`Cannot get default converter for array item of ${target.name} ASN1 schema`);\n                }\n                asn1Value = obj.map((o) => converter.toASN(o));\n            }\n            else {\n                asn1Value = obj.map((o) => this.toAsnItem({ type: schema.itemType }, \"[]\", target, o));\n            }\n        }\n        else {\n            for (const key in schema.items) {\n                const schemaItem = schema.items[key];\n                const objProp = obj[key];\n                if (objProp === undefined ||\n                    schemaItem.defaultValue === objProp ||\n                    (typeof schemaItem.defaultValue === \"object\" &&\n                        typeof objProp === \"object\" &&\n                        isArrayEqual(this.serialize(schemaItem.defaultValue), this.serialize(objProp)))) {\n                    continue;\n                }\n                const asn1Item = AsnSerializer.toAsnItem(schemaItem, key, target, objProp);\n                if (typeof schemaItem.context === \"number\") {\n                    if (schemaItem.implicit) {\n                        if (!schemaItem.repeated &&\n                            (typeof schemaItem.type === \"number\" || isConvertible(schemaItem.type))) {\n                            const value = {};\n                            value.valueHex =\n                                asn1Item instanceof asn1js.Null\n                                    ? asn1Item.valueBeforeDecodeView\n                                    : asn1Item.valueBlock.toBER();\n                            asn1Value.push(new asn1js.Primitive({\n                                optional: schemaItem.optional,\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: schemaItem.context,\n                                },\n                                ...value,\n                            }));\n                        }\n                        else {\n                            asn1Value.push(new asn1js.Constructed({\n                                optional: schemaItem.optional,\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: schemaItem.context,\n                                },\n                                value: asn1Item.valueBlock.value,\n                            }));\n                        }\n                    }\n                    else {\n                        asn1Value.push(new asn1js.Constructed({\n                            optional: schemaItem.optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: schemaItem.context,\n                            },\n                            value: [asn1Item],\n                        }));\n                    }\n                }\n                else if (schemaItem.repeated) {\n                    asn1Value = asn1Value.concat(asn1Item);\n                }\n                else {\n                    asn1Value.push(asn1Item);\n                }\n            }\n        }\n        let asnSchema;\n        switch (schema.type) {\n            case AsnTypeTypes.Sequence:\n                asnSchema = new asn1js.Sequence({ value: asn1Value });\n                break;\n            case AsnTypeTypes.Set:\n                asnSchema = new asn1js.Set({ value: asn1Value });\n                break;\n            case AsnTypeTypes.Choice:\n                if (!asn1Value[0]) {\n                    throw new Error(`Schema '${target.name}' has wrong data. Choice cannot be empty.`);\n                }\n                asnSchema = asn1Value[0];\n                break;\n        }\n        return asnSchema;\n    }\n    static toAsnItem(schemaItem, key, target, objProp) {\n        let asn1Item;\n        if (typeof schemaItem.type === \"number\") {\n            const converter = schemaItem.converter;\n            if (!converter) {\n                throw new Error(`Property '${key}' doesn't have converter for type ${AsnPropTypes[schemaItem.type]} in schema '${target.name}'`);\n            }\n            if (schemaItem.repeated) {\n                if (!Array.isArray(objProp)) {\n                    throw new TypeError(\"Parameter 'objProp' should be type of Array.\");\n                }\n                const items = Array.from(objProp, (element) => converter.toASN(element));\n                const Container = schemaItem.repeated === \"sequence\" ? asn1js.Sequence : asn1js.Set;\n                asn1Item = new Container({\n                    value: items,\n                });\n            }\n            else {\n                asn1Item = converter.toASN(objProp);\n            }\n        }\n        else {\n            if (schemaItem.repeated) {\n                if (!Array.isArray(objProp)) {\n                    throw new TypeError(\"Parameter 'objProp' should be type of Array.\");\n                }\n                const items = Array.from(objProp, (element) => this.toASN(element));\n                const Container = schemaItem.repeated === \"sequence\" ? asn1js.Sequence : asn1js.Set;\n                asn1Item = new Container({\n                    value: items,\n                });\n            }\n            else {\n                asn1Item = this.toASN(objProp);\n            }\n        }\n        return asn1Item;\n    }\n}\n", "export class AsnArray extends Array {\n    constructor(items = []) {\n        if (typeof items === \"number\") {\n            super(items);\n        }\n        else {\n            super();\n            for (const item of items) {\n                this.push(item);\n            }\n        }\n    }\n}\n", "import * as asn1js from \"asn1js\";\nimport { BufferSourceConverter } from \"pvtsutils\";\nimport { AsnParser } from \"./parser\";\nimport { AsnSerializer } from \"./serializer\";\nexport class AsnConvert {\n    static serialize(obj) {\n        return AsnSerializer.serialize(obj);\n    }\n    static parse(data, target) {\n        return AsnParser.parse(data, target);\n    }\n    static toString(data) {\n        const buf = BufferSourceConverter.isBufferSource(data)\n            ? BufferSourceConverter.toArrayBuffer(data)\n            : AsnConvert.serialize(data);\n        const asn = asn1js.fromBER(buf);\n        if (asn.offset === -1) {\n            throw new Error(`Cannot decode ASN.1 data. ${asn.result.error}`);\n        }\n        return asn.result.toString();\n    }\n}\n", "/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n", "import { Convert } from \"pvtsutils\";\nexport class IpConverter {\n    static isIPv4(ip) {\n        return /^(\\d{1,3}\\.){3}\\d{1,3}$/.test(ip);\n    }\n    static parseIPv4(ip) {\n        const parts = ip.split(\".\");\n        if (parts.length !== 4) {\n            throw new Error(\"Invalid IPv4 address\");\n        }\n        return parts.map((part) => {\n            const num = parseInt(part, 10);\n            if (isNaN(num) || num < 0 || num > 255) {\n                throw new Error(\"Invalid IPv4 address part\");\n            }\n            return num;\n        });\n    }\n    static parseIPv6(ip) {\n        const expandedIP = this.expandIPv6(ip);\n        const parts = expandedIP.split(\":\");\n        if (parts.length !== 8) {\n            throw new Error(\"Invalid IPv6 address\");\n        }\n        return parts.reduce((bytes, part) => {\n            const num = parseInt(part, 16);\n            if (isNaN(num) || num < 0 || num > 0xffff) {\n                throw new Error(\"Invalid IPv6 address part\");\n            }\n            bytes.push((num >> 8) & 0xff);\n            bytes.push(num & 0xff);\n            return bytes;\n        }, []);\n    }\n    static expandIPv6(ip) {\n        if (!ip.includes(\"::\")) {\n            return ip;\n        }\n        const parts = ip.split(\"::\");\n        if (parts.length > 2) {\n            throw new Error(\"Invalid IPv6 address\");\n        }\n        const left = parts[0] ? parts[0].split(\":\") : [];\n        const right = parts[1] ? parts[1].split(\":\") : [];\n        const missing = 8 - (left.length + right.length);\n        if (missing < 0) {\n            throw new Error(\"Invalid IPv6 address\");\n        }\n        return [...left, ...Array(missing).fill(\"0\"), ...right].join(\":\");\n    }\n    static formatIPv6(bytes) {\n        const parts = [];\n        for (let i = 0; i < 16; i += 2) {\n            parts.push(((bytes[i] << 8) | bytes[i + 1]).toString(16));\n        }\n        return this.compressIPv6(parts.join(\":\"));\n    }\n    static compressIPv6(ip) {\n        const parts = ip.split(\":\");\n        let longestZeroStart = -1;\n        let longestZeroLength = 0;\n        let currentZeroStart = -1;\n        let currentZeroLength = 0;\n        for (let i = 0; i < parts.length; i++) {\n            if (parts[i] === \"0\") {\n                if (currentZeroStart === -1) {\n                    currentZeroStart = i;\n                }\n                currentZeroLength++;\n            }\n            else {\n                if (currentZeroLength > longestZeroLength) {\n                    longestZeroStart = currentZeroStart;\n                    longestZeroLength = currentZeroLength;\n                }\n                currentZeroStart = -1;\n                currentZeroLength = 0;\n            }\n        }\n        if (currentZeroLength > longestZeroLength) {\n            longestZeroStart = currentZeroStart;\n            longestZeroLength = currentZeroLength;\n        }\n        if (longestZeroLength > 1) {\n            const before = parts.slice(0, longestZeroStart).join(\":\");\n            const after = parts.slice(longestZeroStart + longestZeroLength).join(\":\");\n            return `${before}::${after}`;\n        }\n        return ip;\n    }\n    static parseCIDR(text) {\n        const [addr, prefixStr] = text.split(\"/\");\n        const prefix = parseInt(prefixStr, 10);\n        if (this.isIPv4(addr)) {\n            if (prefix < 0 || prefix > 32) {\n                throw new Error(\"Invalid IPv4 prefix length\");\n            }\n            return [this.parseIPv4(addr), prefix];\n        }\n        else {\n            if (prefix < 0 || prefix > 128) {\n                throw new Error(\"Invalid IPv6 prefix length\");\n            }\n            return [this.parseIPv6(addr), prefix];\n        }\n    }\n    static decodeIP(value) {\n        if (value.length === 64 && parseInt(value, 16) === 0) {\n            return \"::/0\";\n        }\n        if (value.length !== 16) {\n            return value;\n        }\n        const mask = parseInt(value.slice(8), 16)\n            .toString(2)\n            .split(\"\")\n            .reduce((a, k) => a + +k, 0);\n        let ip = value.slice(0, 8).replace(/(.{2})/g, (match) => `${parseInt(match, 16)}.`);\n        ip = ip.slice(0, -1);\n        return `${ip}/${mask}`;\n    }\n    static toString(buf) {\n        const uint8 = new Uint8Array(buf);\n        if (uint8.length === 4) {\n            return Array.from(uint8).join(\".\");\n        }\n        if (uint8.length === 16) {\n            return this.formatIPv6(uint8);\n        }\n        if (uint8.length === 8 || uint8.length === 32) {\n            const half = uint8.length / 2;\n            const addrBytes = uint8.slice(0, half);\n            const maskBytes = uint8.slice(half);\n            const isAllZeros = uint8.every((byte) => byte === 0);\n            if (isAllZeros) {\n                return uint8.length === 8 ? \"0.0.0.0/0\" : \"::/0\";\n            }\n            const prefixLen = maskBytes.reduce((a, b) => a + (b.toString(2).match(/1/g) || []).length, 0);\n            if (uint8.length === 8) {\n                const addrStr = Array.from(addrBytes).join(\".\");\n                return `${addrStr}/${prefixLen}`;\n            }\n            else {\n                const addrStr = this.formatIPv6(addrBytes);\n                return `${addrStr}/${prefixLen}`;\n            }\n        }\n        return this.decodeIP(Convert.ToHex(buf));\n    }\n    static fromString(text) {\n        if (text.includes(\"/\")) {\n            const [addr, prefix] = this.parseCIDR(text);\n            const maskBytes = new Uint8Array(addr.length);\n            let bitsLeft = prefix;\n            for (let i = 0; i < maskBytes.length; i++) {\n                if (bitsLeft >= 8) {\n                    maskBytes[i] = 0xff;\n                    bitsLeft -= 8;\n                }\n                else if (bitsLeft > 0) {\n                    maskBytes[i] = 0xff << (8 - bitsLeft);\n                    bitsLeft = 0;\n                }\n            }\n            const out = new Uint8Array(addr.length * 2);\n            out.set(addr, 0);\n            out.set(maskBytes, addr.length);\n            return out.buffer;\n        }\n        const bytes = this.isIPv4(text) ? this.parseIPv4(text) : this.parseIPv6(text);\n        return new Uint8Array(bytes).buffer;\n    }\n}\n", "var RelativeDistinguishedName_1, RDNSequence_1, Name_1;\nimport { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnType, AsnTypeTypes, AsnArray } from \"@peculiar/asn1-schema\";\nimport { Convert } from \"pvtsutils\";\nlet DirectoryString = class DirectoryString {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n    toString() {\n        return (this.bmpString ||\n            this.printableString ||\n            this.teletexString ||\n            this.universalString ||\n            this.utf8String ||\n            \"\");\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.TeletexString })\n], DirectoryString.prototype, \"teletexString\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.PrintableString })\n], DirectoryString.prototype, \"printableString\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.UniversalString })\n], DirectoryString.prototype, \"universalString\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Utf8String })\n], DirectoryString.prototype, \"utf8String\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.BmpString })\n], DirectoryString.prototype, \"bmpString\", void 0);\nDirectoryString = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], DirectoryString);\nexport { DirectoryString };\nlet AttributeValue = class AttributeValue extends DirectoryString {\n    constructor(params = {}) {\n        super(params);\n        Object.assign(this, params);\n    }\n    toString() {\n        return this.ia5String || (this.anyValue ? Convert.ToHex(this.anyValue) : super.toString());\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.IA5String })\n], AttributeValue.prototype, \"ia5String\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Any })\n], AttributeValue.prototype, \"anyValue\", void 0);\nAttributeValue = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], AttributeValue);\nexport { AttributeValue };\nexport class AttributeTypeAndValue {\n    constructor(params = {}) {\n        this.type = \"\";\n        this.value = new AttributeValue();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], AttributeTypeAndValue.prototype, \"type\", void 0);\n__decorate([\n    AsnProp({ type: AttributeValue })\n], AttributeTypeAndValue.prototype, \"value\", void 0);\nlet RelativeDistinguishedName = RelativeDistinguishedName_1 = class RelativeDistinguishedName extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, RelativeDistinguishedName_1.prototype);\n    }\n};\nRelativeDistinguishedName = RelativeDistinguishedName_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Set, itemType: AttributeTypeAndValue })\n], RelativeDistinguishedName);\nexport { RelativeDistinguishedName };\nlet RDNSequence = RDNSequence_1 = class RDNSequence extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, RDNSequence_1.prototype);\n    }\n};\nRDNSequence = RDNSequence_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: RelativeDistinguishedName })\n], RDNSequence);\nexport { RDNSequence };\nlet Name = Name_1 = class Name extends RDNSequence {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, Name_1.prototype);\n    }\n};\nName = Name_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], Name);\nexport { Name };\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnType, AsnTypeTypes, AsnOctetStringConverter, } from \"@peculiar/asn1-schema\";\nimport { IpConverter } from \"./ip_converter\";\nimport { DirectoryString, Name } from \"./name\";\nexport const AsnIpConverter = {\n    fromASN: (value) => IpConverter.toString(AsnOctetStringConverter.fromASN(value)),\n    toASN: (value) => AsnOctetStringConverter.toASN(IpConverter.fromString(value)),\n};\nexport class OtherName {\n    constructor(params = {}) {\n        this.typeId = \"\";\n        this.value = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], OtherName.prototype, \"typeId\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Any, context: 0 })\n], OtherName.prototype, \"value\", void 0);\nexport class EDIPartyName {\n    constructor(params = {}) {\n        this.partyName = new DirectoryString();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: DirectoryString, optional: true, context: 0, implicit: true })\n], EDIPartyName.prototype, \"nameAssigner\", void 0);\n__decorate([\n    AsnProp({ type: DirectoryString, context: 1, implicit: true })\n], EDIPartyName.prototype, \"partyName\", void 0);\nlet GeneralName = class GeneralName {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n};\n__decorate([\n    AsnProp({ type: OtherName, context: 0, implicit: true })\n], GeneralName.prototype, \"otherName\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.IA5String, context: 1, implicit: true })\n], GeneralName.prototype, \"rfc822Name\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.IA5String, context: 2, implicit: true })\n], GeneralName.prototype, \"dNSName\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Any, context: 3, implicit: true })\n], GeneralName.prototype, \"x400Address\", void 0);\n__decorate([\n    AsnProp({ type: Name, context: 4, implicit: false })\n], GeneralName.prototype, \"directoryName\", void 0);\n__decorate([\n    AsnProp({ type: EDIPartyName, context: 5 })\n], GeneralName.prototype, \"ediPartyName\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.IA5String, context: 6, implicit: true })\n], GeneralName.prototype, \"uniformResourceIdentifier\", void 0);\n__decorate([\n    AsnProp({\n        type: AsnPropTypes.OctetString,\n        context: 7,\n        implicit: true,\n        converter: AsnIpConverter,\n    })\n], GeneralName.prototype, \"iPAddress\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier, context: 8, implicit: true })\n], GeneralName.prototype, \"registeredID\", void 0);\nGeneralName = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], GeneralName);\nexport { GeneralName };\n", "export const id_pkix = \"1.3.6.1.5.5.7\";\nexport const id_pe = `${id_pkix}.1`;\nexport const id_qt = `${id_pkix}.2`;\nexport const id_kp = `${id_pkix}.3`;\nexport const id_ad = `${id_pkix}.48`;\nexport const id_qt_csp = `${id_qt}.1`;\nexport const id_qt_unotice = `${id_qt}.2`;\nexport const id_ad_ocsp = `${id_ad}.1`;\nexport const id_ad_caIssuers = `${id_ad}.2`;\nexport const id_ad_timeStamping = `${id_ad}.3`;\nexport const id_ad_caRepository = `${id_ad}.5`;\nexport const id_ce = \"2.5.29\";\n", "var AuthorityInfoAccessSyntax_1;\nimport { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnArray, AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { GeneralName } from \"../general_name\";\nimport { id_pe } from \"../object_identifiers\";\nexport const id_pe_authorityInfoAccess = `${id_pe}.1`;\nexport class AccessDescription {\n    constructor(params = {}) {\n        this.accessMethod = \"\";\n        this.accessLocation = new GeneralName();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], AccessDescription.prototype, \"accessMethod\", void 0);\n__decorate([\n    AsnProp({ type: GeneralName })\n], AccessDescription.prototype, \"accessLocation\", void 0);\nlet AuthorityInfoAccessSyntax = AuthorityInfoAccessSyntax_1 = class AuthorityInfoAccessSyntax extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, AuthorityInfoAccessSyntax_1.prototype);\n    }\n};\nAuthorityInfoAccessSyntax = AuthorityInfoAccessSyntax_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: AccessDescription })\n], AuthorityInfoAccessSyntax);\nexport { AuthorityInfoAccessSyntax };\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnIntegerArrayBufferConverter, OctetString, } from \"@peculiar/asn1-schema\";\nimport { GeneralName } from \"../general_name\";\nimport { id_ce } from \"../object_identifiers\";\nexport const id_ce_authorityKeyIdentifier = `${id_ce}.35`;\nexport class KeyIdentifier extends OctetString {\n}\nexport class AuthorityKeyIdentifier {\n    constructor(params = {}) {\n        if (params) {\n            Object.assign(this, params);\n        }\n    }\n}\n__decorate([\n    AsnProp({ type: KeyIdentifier, context: 0, optional: true, implicit: true })\n], AuthorityKeyIdentifier.prototype, \"keyIdentifier\", void 0);\n__decorate([\n    AsnProp({ type: GeneralName, context: 1, optional: true, implicit: true, repeated: \"sequence\" })\n], AuthorityKeyIdentifier.prototype, \"authorityCertIssuer\", void 0);\n__decorate([\n    AsnProp({\n        type: AsnPropTypes.Integer,\n        context: 2,\n        optional: true,\n        implicit: true,\n        converter: AsnIntegerArrayBufferConverter,\n    })\n], AuthorityKeyIdentifier.prototype, \"authorityCertSerialNumber\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport { id_ce } from \"../object_identifiers\";\nexport const id_ce_basicConstraints = `${id_ce}.19`;\nexport class BasicConstraints {\n    constructor(params = {}) {\n        this.cA = false;\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Boolean, defaultValue: false })\n], BasicConstraints.prototype, \"cA\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, optional: true })\n], BasicConstraints.prototype, \"pathLenConstraint\", void 0);\n", "var GeneralNames_1;\nimport { __decorate } from \"tslib\";\nimport { AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { GeneralName } from \"./general_name\";\nimport { AsnArray } from \"@peculiar/asn1-schema\";\nlet GeneralNames = GeneralNames_1 = class GeneralNames extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, GeneralNames_1.prototype);\n    }\n};\nGeneralNames = GeneralNames_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: GeneralName })\n], GeneralNames);\nexport { GeneralNames };\n", "var CertificateIssuer_1;\nimport { __decorate } from \"tslib\";\nimport { AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { GeneralNames } from \"../general_names\";\nimport { id_ce } from \"../object_identifiers\";\nexport const id_ce_certificateIssuer = `${id_ce}.29`;\nlet CertificateIssuer = CertificateIssuer_1 = class CertificateIssuer extends GeneralNames {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, CertificateIssuer_1.prototype);\n    }\n};\nCertificateIssuer = CertificateIssuer_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], CertificateIssuer);\nexport { CertificateIssuer };\n", "var CertificatePolicies_1;\nimport { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnType, AsnTypeTypes, AsnArray } from \"@peculiar/asn1-schema\";\nimport { id_ce } from \"../object_identifiers\";\nexport const id_ce_certificatePolicies = `${id_ce}.32`;\nexport const id_ce_certificatePolicies_anyPolicy = `${id_ce_certificatePolicies}.0`;\nlet DisplayText = class DisplayText {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n    toString() {\n        return this.ia5String || this.visibleString || this.bmpString || this.utf8String || \"\";\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.IA5String })\n], DisplayText.prototype, \"ia5String\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.VisibleString })\n], DisplayText.prototype, \"visibleString\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.BmpString })\n], DisplayText.prototype, \"bmpString\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Utf8String })\n], DisplayText.prototype, \"utf8String\", void 0);\nDisplayText = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], DisplayText);\nexport { DisplayText };\nexport class NoticeReference {\n    constructor(params = {}) {\n        this.organization = new DisplayText();\n        this.noticeNumbers = [];\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: DisplayText })\n], NoticeReference.prototype, \"organization\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, repeated: \"sequence\" })\n], NoticeReference.prototype, \"noticeNumbers\", void 0);\nexport class UserNotice {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: NoticeReference, optional: true })\n], UserNotice.prototype, \"noticeRef\", void 0);\n__decorate([\n    AsnProp({ type: DisplayText, optional: true })\n], UserNotice.prototype, \"explicitText\", void 0);\nlet Qualifier = class Qualifier {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.IA5String })\n], Qualifier.prototype, \"cPSuri\", void 0);\n__decorate([\n    AsnProp({ type: UserNotice })\n], Qualifier.prototype, \"userNotice\", void 0);\nQualifier = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], Qualifier);\nexport { Qualifier };\nexport class PolicyQualifierInfo {\n    constructor(params = {}) {\n        this.policyQualifierId = \"\";\n        this.qualifier = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], PolicyQualifierInfo.prototype, \"policyQualifierId\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Any })\n], PolicyQualifierInfo.prototype, \"qualifier\", void 0);\nexport class PolicyInformation {\n    constructor(params = {}) {\n        this.policyIdentifier = \"\";\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], PolicyInformation.prototype, \"policyIdentifier\", void 0);\n__decorate([\n    AsnProp({ type: PolicyQualifierInfo, repeated: \"sequence\", optional: true })\n], PolicyInformation.prototype, \"policyQualifiers\", void 0);\nlet CertificatePolicies = CertificatePolicies_1 = class CertificatePolicies extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, CertificatePolicies_1.prototype);\n    }\n};\nCertificatePolicies = CertificatePolicies_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: PolicyInformation })\n], CertificatePolicies);\nexport { CertificatePolicies };\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { id_ce } from \"../object_identifiers\";\nexport const id_ce_cRLNumber = `${id_ce}.20`;\nlet CRLNumber = class CRLNumber {\n    constructor(value = 0) {\n        this.value = value;\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer })\n], CRLNumber.prototype, \"value\", void 0);\nCRLNumber = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], CRLNumber);\nexport { CRLNumber };\n", "import { __decorate } from \"tslib\";\nimport { AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { id_ce } from \"../object_identifiers\";\nimport { CRLNumber } from \"./crl_number\";\nexport const id_ce_deltaCRLIndicator = `${id_ce}.27`;\nlet BaseCRLNumber = class BaseCRLNumber extends CRLNumber {\n};\nBaseCRLNumber = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], BaseCRLNumber);\nexport { BaseCRLNumber };\n", "var CRLDistributionPoints_1;\nimport { __decorate } from \"tslib\";\nimport { AsnProp, AsnType, AsnTypeTypes, AsnArray, BitString } from \"@peculiar/asn1-schema\";\nimport { RelativeDistinguishedName } from \"../name\";\nimport { GeneralName } from \"../general_name\";\nimport { id_ce } from \"../object_identifiers\";\nexport const id_ce_cRLDistributionPoints = `${id_ce}.31`;\nexport var ReasonFlags;\n(function (ReasonFlags) {\n    ReasonFlags[ReasonFlags[\"unused\"] = 1] = \"unused\";\n    ReasonFlags[ReasonFlags[\"keyCompromise\"] = 2] = \"keyCompromise\";\n    ReasonFlags[ReasonFlags[\"cACompromise\"] = 4] = \"cACompromise\";\n    ReasonFlags[ReasonFlags[\"affiliationChanged\"] = 8] = \"affiliationChanged\";\n    ReasonFlags[ReasonFlags[\"superseded\"] = 16] = \"superseded\";\n    ReasonFlags[ReasonFlags[\"cessationOfOperation\"] = 32] = \"cessationOfOperation\";\n    ReasonFlags[ReasonFlags[\"certificateHold\"] = 64] = \"certificateHold\";\n    ReasonFlags[ReasonFlags[\"privilegeWithdrawn\"] = 128] = \"privilegeWithdrawn\";\n    ReasonFlags[ReasonFlags[\"aACompromise\"] = 256] = \"aACompromise\";\n})(ReasonFlags || (ReasonFlags = {}));\nexport class Reason extends BitString {\n    toJSON() {\n        const res = [];\n        const flags = this.toNumber();\n        if (flags & ReasonFlags.aACompromise) {\n            res.push(\"aACompromise\");\n        }\n        if (flags & ReasonFlags.affiliationChanged) {\n            res.push(\"affiliationChanged\");\n        }\n        if (flags & ReasonFlags.cACompromise) {\n            res.push(\"cACompromise\");\n        }\n        if (flags & ReasonFlags.certificateHold) {\n            res.push(\"certificateHold\");\n        }\n        if (flags & ReasonFlags.cessationOfOperation) {\n            res.push(\"cessationOfOperation\");\n        }\n        if (flags & ReasonFlags.keyCompromise) {\n            res.push(\"keyCompromise\");\n        }\n        if (flags & ReasonFlags.privilegeWithdrawn) {\n            res.push(\"privilegeWithdrawn\");\n        }\n        if (flags & ReasonFlags.superseded) {\n            res.push(\"superseded\");\n        }\n        if (flags & ReasonFlags.unused) {\n            res.push(\"unused\");\n        }\n        return res;\n    }\n    toString() {\n        return `[${this.toJSON().join(\", \")}]`;\n    }\n}\nlet DistributionPointName = class DistributionPointName {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n};\n__decorate([\n    AsnProp({ type: GeneralName, context: 0, repeated: \"sequence\", implicit: true })\n], DistributionPointName.prototype, \"fullName\", void 0);\n__decorate([\n    AsnProp({ type: RelativeDistinguishedName, context: 1, implicit: true })\n], DistributionPointName.prototype, \"nameRelativeToCRLIssuer\", void 0);\nDistributionPointName = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], DistributionPointName);\nexport { DistributionPointName };\nexport class DistributionPoint {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: DistributionPointName, context: 0, optional: true })\n], DistributionPoint.prototype, \"distributionPoint\", void 0);\n__decorate([\n    AsnProp({ type: Reason, context: 1, optional: true, implicit: true })\n], DistributionPoint.prototype, \"reasons\", void 0);\n__decorate([\n    AsnProp({ type: GeneralName, context: 2, optional: true, repeated: \"sequence\", implicit: true })\n], DistributionPoint.prototype, \"cRLIssuer\", void 0);\nlet CRLDistributionPoints = CRLDistributionPoints_1 = class CRLDistributionPoints extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, CRLDistributionPoints_1.prototype);\n    }\n};\nCRLDistributionPoints = CRLDistributionPoints_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: DistributionPoint })\n], CRLDistributionPoints);\nexport { CRLDistributionPoints };\n", "var FreshestCRL_1;\nimport { __decorate } from \"tslib\";\nimport { AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { id_ce } from \"../object_identifiers\";\nimport { CRLDistributionPoints, DistributionPoint } from \"./crl_distribution_points\";\nexport const id_ce_freshestCRL = `${id_ce}.46`;\nlet FreshestCRL = FreshestCRL_1 = class FreshestCRL extends CRLDistributionPoints {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, FreshestCRL_1.prototype);\n    }\n};\nFreshestCRL = FreshestCRL_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: DistributionPoint })\n], FreshestCRL);\nexport { FreshestCRL };\n", "import { __decorate } from \"tslib\";\nimport { AsnProp } from \"@peculiar/asn1-schema\";\nimport { DistributionPointName, Reason } from \"./crl_distribution_points\";\nimport { id_ce } from \"../object_identifiers\";\nimport { AsnPropTypes } from \"@peculiar/asn1-schema\";\nexport const id_ce_issuingDistributionPoint = `${id_ce}.28`;\nexport class IssuingDistributionPoint {\n    constructor(params = {}) {\n        this.onlyContainsUserCerts = IssuingDistributionPoint.ONLY;\n        this.onlyContainsCACerts = IssuingDistributionPoint.ONLY;\n        this.indirectCRL = IssuingDistributionPoint.ONLY;\n        this.onlyContainsAttributeCerts = IssuingDistributionPoint.ONLY;\n        Object.assign(this, params);\n    }\n}\nIssuingDistributionPoint.ONLY = false;\n__decorate([\n    AsnProp({ type: DistributionPointName, context: 0, optional: true })\n], IssuingDistributionPoint.prototype, \"distributionPoint\", void 0);\n__decorate([\n    AsnProp({\n        type: AsnPropTypes.Boolean,\n        context: 1,\n        defaultValue: IssuingDistributionPoint.ONLY,\n        implicit: true,\n    })\n], IssuingDistributionPoint.prototype, \"onlyContainsUserCerts\", void 0);\n__decorate([\n    AsnProp({\n        type: AsnPropTypes.Boolean,\n        context: 2,\n        defaultValue: IssuingDistributionPoint.ONLY,\n        implicit: true,\n    })\n], IssuingDistributionPoint.prototype, \"onlyContainsCACerts\", void 0);\n__decorate([\n    AsnProp({ type: Reason, context: 3, optional: true, implicit: true })\n], IssuingDistributionPoint.prototype, \"onlySomeReasons\", void 0);\n__decorate([\n    AsnProp({\n        type: AsnPropTypes.Boolean,\n        context: 4,\n        defaultValue: IssuingDistributionPoint.ONLY,\n        implicit: true,\n    })\n], IssuingDistributionPoint.prototype, \"indirectCRL\", void 0);\n__decorate([\n    AsnProp({\n        type: AsnPropTypes.Boolean,\n        context: 5,\n        defaultValue: IssuingDistributionPoint.ONLY,\n        implicit: true,\n    })\n], IssuingDistributionPoint.prototype, \"onlyContainsAttributeCerts\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { id_ce } from \"../object_identifiers\";\nexport const id_ce_cRLReasons = `${id_ce}.21`;\nexport var CRLReasons;\n(function (CRLReasons) {\n    CRLReasons[CRLReasons[\"unspecified\"] = 0] = \"unspecified\";\n    CRLReasons[CRLReasons[\"keyCompromise\"] = 1] = \"keyCompromise\";\n    CRLReasons[CRLReasons[\"cACompromise\"] = 2] = \"cACompromise\";\n    CRLReasons[CRLReasons[\"affiliationChanged\"] = 3] = \"affiliationChanged\";\n    CRLReasons[CRLReasons[\"superseded\"] = 4] = \"superseded\";\n    CRLReasons[CRLReasons[\"cessationOfOperation\"] = 5] = \"cessationOfOperation\";\n    CRLReasons[CRLReasons[\"certificateHold\"] = 6] = \"certificateHold\";\n    CRLReasons[CRLReasons[\"removeFromCRL\"] = 8] = \"removeFromCRL\";\n    CRLReasons[CRLReasons[\"privilegeWithdrawn\"] = 9] = \"privilegeWithdrawn\";\n    CRLReasons[CRLReasons[\"aACompromise\"] = 10] = \"aACompromise\";\n})(CRLReasons || (CRLReasons = {}));\nlet CRLReason = class CRLReason {\n    constructor(reason = CRLReasons.unspecified) {\n        this.reason = CRLReasons.unspecified;\n        this.reason = reason;\n    }\n    toJSON() {\n        return CRLReasons[this.reason];\n    }\n    toString() {\n        return this.toJSON();\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.Enumerated })\n], CRLReason.prototype, \"reason\", void 0);\nCRLReason = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], CRLReason);\nexport { CRLReason };\n", "var ExtendedKeyUsage_1;\nimport { __decorate } from \"tslib\";\nimport { AsnPropTypes, AsnArray, AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { id_ce, id_kp } from \"../object_identifiers\";\nexport const id_ce_extKeyUsage = `${id_ce}.37`;\nlet ExtendedKeyUsage = ExtendedKeyUsage_1 = class ExtendedKeyUsage extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, ExtendedKeyUsage_1.prototype);\n    }\n};\nExtendedKeyUsage = ExtendedKeyUsage_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: AsnPropTypes.ObjectIdentifier })\n], ExtendedKeyUsage);\nexport { ExtendedKeyUsage };\nexport const anyExtendedKeyUsage = `${id_ce_extKeyUsage}.0`;\nexport const id_kp_serverAuth = `${id_kp}.1`;\nexport const id_kp_clientAuth = `${id_kp}.2`;\nexport const id_kp_codeSigning = `${id_kp}.3`;\nexport const id_kp_emailProtection = `${id_kp}.4`;\nexport const id_kp_timeStamping = `${id_kp}.8`;\nexport const id_kp_OCSPSigning = `${id_kp}.9`;\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnType, AsnTypeTypes, AsnIntegerArrayBufferConverter, } from \"@peculiar/asn1-schema\";\nimport { id_ce } from \"../object_identifiers\";\nexport const id_ce_inhibitAnyPolicy = `${id_ce}.54`;\nlet InhibitAnyPolicy = class InhibitAnyPolicy {\n    constructor(value = new ArrayBuffer(0)) {\n        this.value = value;\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], InhibitAnyPolicy.prototype, \"value\", void 0);\nInhibitAnyPolicy = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], InhibitAnyPolicy);\nexport { InhibitAnyPolicy };\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { id_ce } from \"../object_identifiers\";\nexport const id_ce_invalidityDate = `${id_ce}.24`;\nlet InvalidityDate = class InvalidityDate {\n    constructor(value) {\n        this.value = new Date();\n        if (value) {\n            this.value = value;\n        }\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.GeneralizedTime })\n], InvalidityDate.prototype, \"value\", void 0);\nInvalidityDate = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], InvalidityDate);\nexport { InvalidityDate };\n", "var IssueAlternativeName_1;\nimport { __decorate } from \"tslib\";\nimport { AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { GeneralNames } from \"../general_names\";\nimport { id_ce } from \"../object_identifiers\";\nexport const id_ce_issuerAltName = `${id_ce}.18`;\nlet IssueAlternativeName = IssueAlternativeName_1 = class IssueAlternativeName extends GeneralNames {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, IssueAlternativeName_1.prototype);\n    }\n};\nIssueAlternativeName = IssueAlternativeName_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], IssueAlternativeName);\nexport { IssueAlternativeName };\n", "import { BitString } from \"@peculiar/asn1-schema\";\nimport { id_ce } from \"../object_identifiers\";\nexport const id_ce_keyUsage = `${id_ce}.15`;\nexport var KeyUsageFlags;\n(function (KeyUsageFlags) {\n    KeyUsageFlags[KeyUsageFlags[\"digitalSignature\"] = 1] = \"digitalSignature\";\n    KeyUsageFlags[KeyUsageFlags[\"nonRepudiation\"] = 2] = \"nonRepudiation\";\n    KeyUsageFlags[KeyUsageFlags[\"keyEncipherment\"] = 4] = \"keyEncipherment\";\n    KeyUsageFlags[KeyUsageFlags[\"dataEncipherment\"] = 8] = \"dataEncipherment\";\n    KeyUsageFlags[KeyUsageFlags[\"keyAgreement\"] = 16] = \"keyAgreement\";\n    KeyUsageFlags[KeyUsageFlags[\"keyCertSign\"] = 32] = \"keyCertSign\";\n    KeyUsageFlags[KeyUsageFlags[\"cRLSign\"] = 64] = \"cRLSign\";\n    KeyUsageFlags[KeyUsageFlags[\"encipherOnly\"] = 128] = \"encipherOnly\";\n    KeyUsageFlags[KeyUsageFlags[\"decipherOnly\"] = 256] = \"decipherOnly\";\n})(KeyUsageFlags || (KeyUsageFlags = {}));\nexport class KeyUsage extends BitString {\n    toJSON() {\n        const flag = this.toNumber();\n        const res = [];\n        if (flag & KeyUsageFlags.cRLSign) {\n            res.push(\"crlSign\");\n        }\n        if (flag & KeyUsageFlags.dataEncipherment) {\n            res.push(\"dataEncipherment\");\n        }\n        if (flag & KeyUsageFlags.decipherOnly) {\n            res.push(\"decipherOnly\");\n        }\n        if (flag & KeyUsageFlags.digitalSignature) {\n            res.push(\"digitalSignature\");\n        }\n        if (flag & KeyUsageFlags.encipherOnly) {\n            res.push(\"encipherOnly\");\n        }\n        if (flag & KeyUsageFlags.keyAgreement) {\n            res.push(\"keyAgreement\");\n        }\n        if (flag & KeyUsageFlags.keyCertSign) {\n            res.push(\"keyCertSign\");\n        }\n        if (flag & KeyUsageFlags.keyEncipherment) {\n            res.push(\"keyEncipherment\");\n        }\n        if (flag & KeyUsageFlags.nonRepudiation) {\n            res.push(\"nonRepudiation\");\n        }\n        return res;\n    }\n    toString() {\n        return `[${this.toJSON().join(\", \")}]`;\n    }\n}\n", "var GeneralSubtrees_1;\nimport { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnArray, AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { GeneralName } from \"../general_name\";\nimport { id_ce } from \"../object_identifiers\";\nexport const id_ce_nameConstraints = `${id_ce}.30`;\nexport class GeneralSubtree {\n    constructor(params = {}) {\n        this.base = new GeneralName();\n        this.minimum = 0;\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: GeneralName })\n], GeneralSubtree.prototype, \"base\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, context: 0, defaultValue: 0, implicit: true })\n], GeneralSubtree.prototype, \"minimum\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, context: 1, optional: true, implicit: true })\n], GeneralSubtree.prototype, \"maximum\", void 0);\nlet GeneralSubtrees = GeneralSubtrees_1 = class GeneralSubtrees extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, GeneralSubtrees_1.prototype);\n    }\n};\nGeneralSubtrees = GeneralSubtrees_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: GeneralSubtree })\n], GeneralSubtrees);\nexport { GeneralSubtrees };\nexport class NameConstraints {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: GeneralSubtrees, context: 0, optional: true, implicit: true })\n], NameConstraints.prototype, \"permittedSubtrees\", void 0);\n__decorate([\n    AsnProp({ type: GeneralSubtrees, context: 1, optional: true, implicit: true })\n], NameConstraints.prototype, \"excludedSubtrees\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnIntegerArrayBufferConverter } from \"@peculiar/asn1-schema\";\nimport { id_ce } from \"../object_identifiers\";\nexport const id_ce_policyConstraints = `${id_ce}.36`;\nexport class PolicyConstraints {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({\n        type: AsnPropTypes.Integer,\n        context: 0,\n        implicit: true,\n        optional: true,\n        converter: AsnIntegerArrayBufferConverter,\n    })\n], PolicyConstraints.prototype, \"requireExplicitPolicy\", void 0);\n__decorate([\n    AsnProp({\n        type: AsnPropTypes.Integer,\n        context: 1,\n        implicit: true,\n        optional: true,\n        converter: AsnIntegerArrayBufferConverter,\n    })\n], PolicyConstraints.prototype, \"inhibitPolicyMapping\", void 0);\n", "var PolicyMappings_1;\nimport { __decorate } from \"tslib\";\nimport { AsnArray, AsnProp, AsnPropTypes, AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { id_ce } from \"../object_identifiers\";\nexport const id_ce_policyMappings = `${id_ce}.33`;\nexport class PolicyMapping {\n    constructor(params = {}) {\n        this.issuerDomainPolicy = \"\";\n        this.subjectDomainPolicy = \"\";\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], PolicyMapping.prototype, \"issuerDomainPolicy\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], PolicyMapping.prototype, \"subjectDomainPolicy\", void 0);\nlet PolicyMappings = PolicyMappings_1 = class PolicyMappings extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, PolicyMappings_1.prototype);\n    }\n};\nPolicyMappings = PolicyMappings_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: PolicyMapping })\n], PolicyMappings);\nexport { PolicyMappings };\n", "var SubjectAlternativeName_1;\nimport { __decorate } from \"tslib\";\nimport { AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { GeneralNames } from \"../general_names\";\nimport { id_ce } from \"../object_identifiers\";\nexport const id_ce_subjectAltName = `${id_ce}.17`;\nlet SubjectAlternativeName = SubjectAlternativeName_1 = class SubjectAlternativeName extends GeneralNames {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, SubjectAlternativeName_1.prototype);\n    }\n};\nSubjectAlternativeName = SubjectAlternativeName_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], SubjectAlternativeName);\nexport { SubjectAlternativeName };\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nexport class Attribute {\n    constructor(params = {}) {\n        this.type = \"\";\n        this.values = [];\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], Attribute.prototype, \"type\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Any, repeated: \"set\" })\n], Attribute.prototype, \"values\", void 0);\n", "var SubjectDirectoryAttributes_1;\nimport { __decorate } from \"tslib\";\nimport { AsnArray, AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { Attribute } from \"../attribute\";\nimport { id_ce } from \"../object_identifiers\";\nexport const id_ce_subjectDirectoryAttributes = `${id_ce}.9`;\nlet SubjectDirectoryAttributes = SubjectDirectoryAttributes_1 = class SubjectDirectoryAttributes extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, SubjectDirectoryAttributes_1.prototype);\n    }\n};\nSubjectDirectoryAttributes = SubjectDirectoryAttributes_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: Attribute })\n], SubjectDirectoryAttributes);\nexport { SubjectDirectoryAttributes };\n", "import { id_ce } from \"../object_identifiers\";\nimport { KeyIdentifier } from \"./authority_key_identifier\";\nexport const id_ce_subjectKeyIdentifier = `${id_ce}.14`;\nexport class SubjectKeyIdentifier extends KeyIdentifier {\n}\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport { id_ce } from \"../object_identifiers\";\nexport const id_ce_privateKeyUsagePeriod = `${id_ce}.16`;\nexport class PrivateKeyUsagePeriod {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.GeneralizedTime, context: 0, implicit: true, optional: true })\n], PrivateKeyUsagePeriod.prototype, \"notBefore\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.GeneralizedTime, context: 1, implicit: true, optional: true })\n], PrivateKeyUsagePeriod.prototype, \"notAfter\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, BitString } from \"@peculiar/asn1-schema\";\nexport const id_entrust_entrustVersInfo = \"1.2.840.113533.7.65.0\";\nexport var EntrustInfoFlags;\n(function (EntrustInfoFlags) {\n    EntrustInfoFlags[EntrustInfoFlags[\"keyUpdateAllowed\"] = 1] = \"keyUpdateAllowed\";\n    EntrustInfoFlags[EntrustInfoFlags[\"newExtensions\"] = 2] = \"newExtensions\";\n    EntrustInfoFlags[EntrustInfoFlags[\"pKIXCertificate\"] = 4] = \"pKIXCertificate\";\n})(EntrustInfoFlags || (EntrustInfoFlags = {}));\nexport class EntrustInfo extends BitString {\n    toJSON() {\n        const res = [];\n        const flags = this.toNumber();\n        if (flags & EntrustInfoFlags.pKIXCertificate) {\n            res.push(\"pKIXCertificate\");\n        }\n        if (flags & EntrustInfoFlags.newExtensions) {\n            res.push(\"newExtensions\");\n        }\n        if (flags & EntrustInfoFlags.keyUpdateAllowed) {\n            res.push(\"keyUpdateAllowed\");\n        }\n        return res;\n    }\n    toString() {\n        return `[${this.toJSON().join(\", \")}]`;\n    }\n}\nexport class EntrustVersionInfo {\n    constructor(params = {}) {\n        this.entrustVers = \"\";\n        this.entrustInfoFlags = new EntrustInfo();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.GeneralString })\n], EntrustVersionInfo.prototype, \"entrustVers\", void 0);\n__decorate([\n    AsnProp({ type: EntrustInfo })\n], EntrustVersionInfo.prototype, \"entrustInfoFlags\", void 0);\n", "var SubjectInfoAccessSyntax_1;\nimport { __decorate } from \"tslib\";\nimport { AsnArray, AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { id_pe } from \"../object_identifiers\";\nimport { AccessDescription } from \"./authority_information_access\";\nexport const id_pe_subjectInfoAccess = `${id_pe}.11`;\nlet SubjectInfoAccessSyntax = SubjectInfoAccessSyntax_1 = class SubjectInfoAccessSyntax extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, SubjectInfoAccessSyntax_1.prototype);\n    }\n};\nSubjectInfoAccessSyntax = SubjectInfoAccessSyntax_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: AccessDescription })\n], SubjectInfoAccessSyntax);\nexport { SubjectInfoAccessSyntax };\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport * as pvtsutils from \"pvtsutils\";\nexport class AlgorithmIdentifier {\n    constructor(params = {}) {\n        this.algorithm = \"\";\n        Object.assign(this, params);\n    }\n    isEqual(data) {\n        return (data instanceof AlgorithmIdentifier &&\n            data.algorithm == this.algorithm &&\n            ((data.parameters &&\n                this.parameters &&\n                pvtsutils.isEqual(data.parameters, this.parameters)) ||\n                data.parameters === this.parameters));\n    }\n}\n__decorate([\n    AsnProp({\n        type: AsnPropTypes.ObjectIdentifier,\n    })\n], AlgorithmIdentifier.prototype, \"algorithm\", void 0);\n__decorate([\n    AsnProp({\n        type: AsnPropTypes.Any,\n        optional: true,\n    })\n], AlgorithmIdentifier.prototype, \"parameters\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport { AlgorithmIdentifier } from \"./algorithm_identifier\";\nexport class SubjectPublicKeyInfo {\n    constructor(params = {}) {\n        this.algorithm = new AlgorithmIdentifier();\n        this.subjectPublicKey = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AlgorithmIdentifier })\n], SubjectPublicKeyInfo.prototype, \"algorithm\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.BitString })\n], SubjectPublicKeyInfo.prototype, \"subjectPublicKey\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nlet Time = class Time {\n    constructor(time) {\n        if (time) {\n            if (typeof time === \"string\" || typeof time === \"number\" || time instanceof Date) {\n                const date = new Date(time);\n                if (date.getUTCFullYear() > 2049) {\n                    this.generalTime = date;\n                }\n                else {\n                    this.utcTime = date;\n                }\n            }\n            else {\n                Object.assign(this, time);\n            }\n        }\n    }\n    getTime() {\n        const time = this.utcTime || this.generalTime;\n        if (!time) {\n            throw new Error(\"Cannot get time from CHOICE object\");\n        }\n        return time;\n    }\n};\n__decorate([\n    AsnProp({\n        type: AsnPropTypes.UTCTime,\n    })\n], Time.prototype, \"utcTime\", void 0);\n__decorate([\n    AsnProp({\n        type: AsnPropTypes.GeneralizedTime,\n    })\n], Time.prototype, \"generalTime\", void 0);\nTime = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], Time);\nexport { Time };\n", "import { __decorate } from \"tslib\";\nimport { AsnProp } from \"@peculiar/asn1-schema\";\nimport { Time } from \"./time\";\nexport class Validity {\n    constructor(params) {\n        this.notBefore = new Time(new Date());\n        this.notAfter = new Time(new Date());\n        if (params) {\n            this.notBefore = new Time(params.notBefore);\n            this.notAfter = new Time(params.notAfter);\n        }\n    }\n}\n__decorate([\n    AsnProp({ type: Time })\n], Validity.prototype, \"notBefore\", void 0);\n__decorate([\n    AsnProp({ type: Time })\n], Validity.prototype, \"notAfter\", void 0);\n", "var Extensions_1;\nimport { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnArray, AsnType, AsnTypeTypes, OctetString, } from \"@peculiar/asn1-schema\";\nexport class Extension {\n    constructor(params = {}) {\n        this.extnID = \"\";\n        this.critical = Extension.CRITICAL;\n        this.extnValue = new OctetString();\n        Object.assign(this, params);\n    }\n}\nExtension.CRITICAL = false;\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], Extension.prototype, \"extnID\", void 0);\n__decorate([\n    AsnProp({\n        type: AsnPropTypes.Boolean,\n        defaultValue: Extension.CRITICAL,\n    })\n], Extension.prototype, \"critical\", void 0);\n__decorate([\n    AsnProp({ type: OctetString })\n], Extension.prototype, \"extnValue\", void 0);\nlet Extensions = Extensions_1 = class Extensions extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, Extensions_1.prototype);\n    }\n};\nExtensions = Extensions_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: Extension })\n], Extensions);\nexport { Extensions };\n", "export var Version;\n(function (Version) {\n    Version[Version[\"v1\"] = 0] = \"v1\";\n    Version[Version[\"v2\"] = 1] = \"v2\";\n    Version[Version[\"v3\"] = 2] = \"v3\";\n})(Version || (Version = {}));\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnIntegerArrayBufferConverter } from \"@peculiar/asn1-schema\";\nimport { AlgorithmIdentifier } from \"./algorithm_identifier\";\nimport { Name } from \"./name\";\nimport { SubjectPublicKeyInfo } from \"./subject_public_key_info\";\nimport { Validity } from \"./validity\";\nimport { Extensions } from \"./extension\";\nimport { Version } from \"./types\";\nexport class TBSCertificate {\n    constructor(params = {}) {\n        this.version = Version.v1;\n        this.serialNumber = new ArrayBuffer(0);\n        this.signature = new AlgorithmIdentifier();\n        this.issuer = new Name();\n        this.validity = new Validity();\n        this.subject = new Name();\n        this.subjectPublicKeyInfo = new SubjectPublicKeyInfo();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({\n        type: AsnPropTypes.Integer,\n        context: 0,\n        defaultValue: Version.v1,\n    })\n], TBSCertificate.prototype, \"version\", void 0);\n__decorate([\n    AsnProp({\n        type: AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter,\n    })\n], TBSCertificate.prototype, \"serialNumber\", void 0);\n__decorate([\n    AsnProp({ type: AlgorithmIdentifier })\n], TBSCertificate.prototype, \"signature\", void 0);\n__decorate([\n    AsnProp({ type: Name })\n], TBSCertificate.prototype, \"issuer\", void 0);\n__decorate([\n    AsnProp({ type: Validity })\n], TBSCertificate.prototype, \"validity\", void 0);\n__decorate([\n    AsnProp({ type: Name })\n], TBSCertificate.prototype, \"subject\", void 0);\n__decorate([\n    AsnProp({ type: SubjectPublicKeyInfo })\n], TBSCertificate.prototype, \"subjectPublicKeyInfo\", void 0);\n__decorate([\n    AsnProp({\n        type: AsnPropTypes.BitString,\n        context: 1,\n        implicit: true,\n        optional: true,\n    })\n], TBSCertificate.prototype, \"issuerUniqueID\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.BitString, context: 2, implicit: true, optional: true })\n], TBSCertificate.prototype, \"subjectUniqueID\", void 0);\n__decorate([\n    AsnProp({ type: Extensions, context: 3, optional: true })\n], TBSCertificate.prototype, \"extensions\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport { AlgorithmIdentifier } from \"./algorithm_identifier\";\nimport { TBSCertificate } from \"./tbs_certificate\";\nexport class Certificate {\n    constructor(params = {}) {\n        this.tbsCertificate = new TBSCertificate();\n        this.signatureAlgorithm = new AlgorithmIdentifier();\n        this.signatureValue = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: TBSCertificate })\n], Certificate.prototype, \"tbsCertificate\", void 0);\n__decorate([\n    AsnProp({ type: AlgorithmIdentifier })\n], Certificate.prototype, \"signatureAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.BitString })\n], Certificate.prototype, \"signatureValue\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnIntegerArrayBufferConverter } from \"@peculiar/asn1-schema\";\nimport { AlgorithmIdentifier } from \"./algorithm_identifier\";\nimport { Name } from \"./name\";\nimport { Time } from \"./time\";\nimport { Extension } from \"./extension\";\nexport class RevokedCertificate {\n    constructor(params = {}) {\n        this.userCertificate = new ArrayBuffer(0);\n        this.revocationDate = new Time();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], RevokedCertificate.prototype, \"userCertificate\", void 0);\n__decorate([\n    AsnProp({ type: Time })\n], RevokedCertificate.prototype, \"revocationDate\", void 0);\n__decorate([\n    AsnProp({ type: Extension, optional: true, repeated: \"sequence\" })\n], RevokedCertificate.prototype, \"crlEntryExtensions\", void 0);\nexport class TBSCertList {\n    constructor(params = {}) {\n        this.signature = new AlgorithmIdentifier();\n        this.issuer = new Name();\n        this.thisUpdate = new Time();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, optional: true })\n], TBSCertList.prototype, \"version\", void 0);\n__decorate([\n    AsnProp({ type: AlgorithmIdentifier })\n], TBSCertList.prototype, \"signature\", void 0);\n__decorate([\n    AsnProp({ type: Name })\n], TBSCertList.prototype, \"issuer\", void 0);\n__decorate([\n    AsnProp({ type: Time })\n], TBSCertList.prototype, \"thisUpdate\", void 0);\n__decorate([\n    AsnProp({ type: Time, optional: true })\n], TBSCertList.prototype, \"nextUpdate\", void 0);\n__decorate([\n    AsnProp({ type: RevokedCertificate, repeated: \"sequence\", optional: true })\n], TBSCertList.prototype, \"revokedCertificates\", void 0);\n__decorate([\n    AsnProp({ type: Extension, optional: true, context: 0, repeated: \"sequence\" })\n], TBSCertList.prototype, \"crlExtensions\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport { AlgorithmIdentifier } from \"./algorithm_identifier\";\nimport { TBSCertList } from \"./tbs_cert_list\";\nexport class CertificateList {\n    constructor(params = {}) {\n        this.tbsCertList = new TBSCertList();\n        this.signatureAlgorithm = new AlgorithmIdentifier();\n        this.signature = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: TBSCertList })\n], CertificateList.prototype, \"tbsCertList\", void 0);\n__decorate([\n    AsnProp({ type: AlgorithmIdentifier })\n], CertificateList.prototype, \"signatureAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.BitString })\n], CertificateList.prototype, \"signature\", void 0);\n", "/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnIntegerArrayBufferConverter } from \"@peculiar/asn1-schema\";\nimport { Name } from \"@peculiar/asn1-x509\";\nexport class IssuerAndSerialNumber {\n    constructor(params = {}) {\n        this.issuer = new Name();\n        this.serialNumber = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: Name })\n], IssuerAndSerialNumber.prototype, \"issuer\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], IssuerAndSerialNumber.prototype, \"serialNumber\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { IssuerAndSerialNumber } from \"./issuer_and_serial_number\";\nimport { SubjectKeyIdentifier } from \"@peculiar/asn1-x509\";\nlet SignerIdentifier = class SignerIdentifier {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n};\n__decorate([\n    AsnProp({ type: SubjectKeyIdentifier, context: 0, implicit: true })\n], SignerIdentifier.prototype, \"subjectKeyIdentifier\", void 0);\n__decorate([\n    AsnProp({ type: IssuerAndSerialNumber })\n], SignerIdentifier.prototype, \"issuerAndSerialNumber\", void 0);\nSignerIdentifier = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], SignerIdentifier);\nexport { SignerIdentifier };\n", "import { __decorate } from \"tslib\";\nimport { AlgorithmIdentifier } from \"@peculiar/asn1-x509\";\nimport { AsnTypeTypes, AsnType } from \"@peculiar/asn1-schema\";\nexport var CMSVersion;\n(function (CMSVersion) {\n    CMSVersion[CMSVersion[\"v0\"] = 0] = \"v0\";\n    CMSVersion[CMSVersion[\"v1\"] = 1] = \"v1\";\n    CMSVersion[CMSVersion[\"v2\"] = 2] = \"v2\";\n    CMSVersion[CMSVersion[\"v3\"] = 3] = \"v3\";\n    CMSVersion[CMSVersion[\"v4\"] = 4] = \"v4\";\n    CMSVersion[CMSVersion[\"v5\"] = 5] = \"v5\";\n})(CMSVersion || (CMSVersion = {}));\nlet DigestAlgorithmIdentifier = class DigestAlgorithmIdentifier extends AlgorithmIdentifier {\n};\nDigestAlgorithmIdentifier = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], DigestAlgorithmIdentifier);\nexport { DigestAlgorithmIdentifier };\nlet SignatureAlgorithmIdentifier = class SignatureAlgorithmIdentifier extends AlgorithmIdentifier {\n};\nSignatureAlgorithmIdentifier = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], SignatureAlgorithmIdentifier);\nexport { SignatureAlgorithmIdentifier };\nlet KeyEncryptionAlgorithmIdentifier = class KeyEncryptionAlgorithmIdentifier extends AlgorithmIdentifier {\n};\nKeyEncryptionAlgorithmIdentifier = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], KeyEncryptionAlgorithmIdentifier);\nexport { KeyEncryptionAlgorithmIdentifier };\nlet ContentEncryptionAlgorithmIdentifier = class ContentEncryptionAlgorithmIdentifier extends AlgorithmIdentifier {\n};\nContentEncryptionAlgorithmIdentifier = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], ContentEncryptionAlgorithmIdentifier);\nexport { ContentEncryptionAlgorithmIdentifier };\nlet MessageAuthenticationCodeAlgorithm = class MessageAuthenticationCodeAlgorithm extends AlgorithmIdentifier {\n};\nMessageAuthenticationCodeAlgorithm = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], MessageAuthenticationCodeAlgorithm);\nexport { MessageAuthenticationCodeAlgorithm };\nlet KeyDerivationAlgorithmIdentifier = class KeyDerivationAlgorithmIdentifier extends AlgorithmIdentifier {\n};\nKeyDerivationAlgorithmIdentifier = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], KeyDerivationAlgorithmIdentifier);\nexport { KeyDerivationAlgorithmIdentifier };\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nexport class Attribute {\n    constructor(params = {}) {\n        this.attrType = \"\";\n        this.attrValues = [];\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], Attribute.prototype, \"attrType\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Any, repeated: \"set\" })\n], Attribute.prototype, \"attrValues\", void 0);\n", "var SignerInfos_1;\nimport { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnArray, AsnType, AsnTypeTypes, OctetString, } from \"@peculiar/asn1-schema\";\nimport { SignerIdentifier } from \"./signer_identifier\";\nimport { CMSVersion, SignatureAlgorithmIdentifier, DigestAlgorithmIdentifier } from \"./types\";\nimport { Attribute } from \"./attribute\";\nexport class SignerInfo {\n    constructor(params = {}) {\n        this.version = CMSVersion.v0;\n        this.sid = new SignerIdentifier();\n        this.digestAlgorithm = new DigestAlgorithmIdentifier();\n        this.signatureAlgorithm = new SignatureAlgorithmIdentifier();\n        this.signature = new OctetString();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer })\n], SignerInfo.prototype, \"version\", void 0);\n__decorate([\n    AsnProp({ type: SignerIdentifier })\n], SignerInfo.prototype, \"sid\", void 0);\n__decorate([\n    AsnProp({ type: DigestAlgorithmIdentifier })\n], SignerInfo.prototype, \"digestAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: Attribute, repeated: \"set\", context: 0, implicit: true, optional: true })\n], SignerInfo.prototype, \"signedAttrs\", void 0);\n__decorate([\n    AsnProp({ type: SignatureAlgorithmIdentifier })\n], SignerInfo.prototype, \"signatureAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: OctetString })\n], SignerInfo.prototype, \"signature\", void 0);\n__decorate([\n    AsnProp({ type: Attribute, repeated: \"set\", context: 1, implicit: true, optional: true })\n], SignerInfo.prototype, \"unsignedAttrs\", void 0);\nlet SignerInfos = SignerInfos_1 = class SignerInfos extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, SignerInfos_1.prototype);\n    }\n};\nSignerInfos = SignerInfos_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Set, itemType: SignerInfo })\n], SignerInfos);\nexport { SignerInfos };\n", "import { __decorate } from \"tslib\";\nimport { AsnTypeTypes, AsnType } from \"@peculiar/asn1-schema\";\nimport { Time } from \"@peculiar/asn1-x509\";\nimport { SignerInfo } from \"./signer_info\";\nlet SigningTime = class SigningTime extends Time {\n};\nSigningTime = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], SigningTime);\nexport { SigningTime };\nlet CounterSignature = class CounterSignature extends SignerInfo {\n};\nCounterSignature = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], CounterSignature);\nexport { CounterSignature };\n", "/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport { GeneralName, Attribute } from \"@peculiar/asn1-x509\";\nexport class ACClearAttrs {\n    constructor(params = {}) {\n        this.acIssuer = new GeneralName();\n        this.acSerial = 0;\n        this.attrs = [];\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: GeneralName })\n], ACClearAttrs.prototype, \"acIssuer\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer })\n], ACClearAttrs.prototype, \"acSerial\", void 0);\n__decorate([\n    AsnProp({ type: Attribute, repeated: \"sequence\" })\n], ACClearAttrs.prototype, \"attrs\", void 0);\n", "var AttrSpec_1;\nimport { __decorate } from \"tslib\";\nimport { AsnType, AsnTypeTypes, AsnPropTypes, AsnArray } from \"@peculiar/asn1-schema\";\nlet AttrSpec = AttrSpec_1 = class AttrSpec extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, AttrSpec_1.prototype);\n    }\n};\nAttrSpec = AttrSpec_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: AsnPropTypes.ObjectIdentifier })\n], AttrSpec);\nexport { AttrSpec };\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport { AttrSpec } from \"./attr_spec\";\nexport class AAControls {\n    constructor(params = {}) {\n        this.permitUnSpecified = true;\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, optional: true })\n], AAControls.prototype, \"pathLenConstraint\", void 0);\n__decorate([\n    AsnProp({ type: AttrSpec, implicit: true, context: 0, optional: true })\n], AAControls.prototype, \"permittedAttrs\", void 0);\n__decorate([\n    AsnProp({ type: AttrSpec, implicit: true, context: 1, optional: true })\n], AAControls.prototype, \"excludedAttrs\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Boolean, defaultValue: true })\n], AAControls.prototype, \"permitUnSpecified\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnIntegerArrayBufferConverter } from \"@peculiar/asn1-schema\";\nimport { GeneralNames } from \"@peculiar/asn1-x509\";\nexport class IssuerSerial {\n    constructor(params = {}) {\n        this.issuer = new GeneralNames();\n        this.serial = new ArrayBuffer(0);\n        this.issuerUID = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: GeneralNames })\n], IssuerSerial.prototype, \"issuer\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], IssuerSerial.prototype, \"serial\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.BitString, optional: true })\n], IssuerSerial.prototype, \"issuerUID\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport { AlgorithmIdentifier } from \"@peculiar/asn1-x509\";\nexport var DigestedObjectType;\n(function (DigestedObjectType) {\n    DigestedObjectType[DigestedObjectType[\"publicKey\"] = 0] = \"publicKey\";\n    DigestedObjectType[DigestedObjectType[\"publicKeyCert\"] = 1] = \"publicKeyCert\";\n    DigestedObjectType[DigestedObjectType[\"otherObjectTypes\"] = 2] = \"otherObjectTypes\";\n})(DigestedObjectType || (DigestedObjectType = {}));\nexport class ObjectDigestInfo {\n    constructor(params = {}) {\n        this.digestedObjectType = DigestedObjectType.publicKey;\n        this.digestAlgorithm = new AlgorithmIdentifier();\n        this.objectDigest = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Enumerated })\n], ObjectDigestInfo.prototype, \"digestedObjectType\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier, optional: true })\n], ObjectDigestInfo.prototype, \"otherObjectTypeID\", void 0);\n__decorate([\n    AsnProp({ type: AlgorithmIdentifier })\n], ObjectDigestInfo.prototype, \"digestAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.BitString })\n], ObjectDigestInfo.prototype, \"objectDigest\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp } from \"@peculiar/asn1-schema\";\nimport { GeneralNames } from \"@peculiar/asn1-x509\";\nimport { IssuerSerial } from \"./issuer_serial\";\nimport { ObjectDigestInfo } from \"./object_digest_info\";\nexport class V2Form {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: GeneralNames, optional: true })\n], V2Form.prototype, \"issuerName\", void 0);\n__decorate([\n    AsnProp({ type: IssuerSerial, context: 0, implicit: true, optional: true })\n], V2Form.prototype, \"baseCertificateID\", void 0);\n__decorate([\n    AsnProp({ type: ObjectDigestInfo, context: 1, implicit: true, optional: true })\n], V2Form.prototype, \"objectDigestInfo\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnType, AsnTypeTypes, AsnProp } from \"@peculiar/asn1-schema\";\nimport { GeneralName } from \"@peculiar/asn1-x509\";\nimport { V2Form } from \"./v2_form\";\nlet AttCertIssuer = class AttCertIssuer {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n};\n__decorate([\n    AsnProp({ type: GeneralName, repeated: \"sequence\" })\n], AttCertIssuer.prototype, \"v1Form\", void 0);\n__decorate([\n    AsnProp({ type: V2Form, context: 0, implicit: true })\n], AttCertIssuer.prototype, \"v2Form\", void 0);\nAttCertIssuer = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], AttCertIssuer);\nexport { AttCertIssuer };\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nexport class AttCertValidityPeriod {\n    constructor(params = {}) {\n        this.notBeforeTime = new Date();\n        this.notAfterTime = new Date();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.GeneralizedTime })\n], AttCertValidityPeriod.prototype, \"notBeforeTime\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.GeneralizedTime })\n], AttCertValidityPeriod.prototype, \"notAfterTime\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp } from \"@peculiar/asn1-schema\";\nimport { IssuerSerial } from \"./issuer_serial\";\nimport { GeneralNames } from \"@peculiar/asn1-x509\";\nimport { ObjectDigestInfo } from \"./object_digest_info\";\nexport class Holder {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: IssuerSerial, implicit: true, context: 0, optional: true })\n], Holder.prototype, \"baseCertificateID\", void 0);\n__decorate([\n    AsnProp({ type: GeneralNames, implicit: true, context: 1, optional: true })\n], Holder.prototype, \"entityName\", void 0);\n__decorate([\n    AsnProp({ type: ObjectDigestInfo, implicit: true, context: 2, optional: true })\n], Holder.prototype, \"objectDigestInfo\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnIntegerArrayBufferConverter } from \"@peculiar/asn1-schema\";\nimport { AlgorithmIdentifier, Attribute, Extensions, } from \"@peculiar/asn1-x509\";\nimport { Holder } from \"./holder\";\nimport { AttCertIssuer } from \"./attr_cert_issuer\";\nimport { AttCertValidityPeriod } from \"./attr_cert_validity_period\";\nexport var AttCertVersion;\n(function (AttCertVersion) {\n    AttCertVersion[AttCertVersion[\"v2\"] = 1] = \"v2\";\n})(AttCertVersion || (AttCertVersion = {}));\nexport class AttributeCertificateInfo {\n    constructor(params = {}) {\n        this.version = AttCertVersion.v2;\n        this.holder = new Holder();\n        this.issuer = new AttCertIssuer();\n        this.signature = new AlgorithmIdentifier();\n        this.serialNumber = new ArrayBuffer(0);\n        this.attrCertValidityPeriod = new AttCertValidityPeriod();\n        this.attributes = [];\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer })\n], AttributeCertificateInfo.prototype, \"version\", void 0);\n__decorate([\n    AsnProp({ type: Holder })\n], AttributeCertificateInfo.prototype, \"holder\", void 0);\n__decorate([\n    AsnProp({ type: AttCertIssuer })\n], AttributeCertificateInfo.prototype, \"issuer\", void 0);\n__decorate([\n    AsnProp({ type: AlgorithmIdentifier })\n], AttributeCertificateInfo.prototype, \"signature\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], AttributeCertificateInfo.prototype, \"serialNumber\", void 0);\n__decorate([\n    AsnProp({ type: AttCertValidityPeriod })\n], AttributeCertificateInfo.prototype, \"attrCertValidityPeriod\", void 0);\n__decorate([\n    AsnProp({ type: Attribute, repeated: \"sequence\" })\n], AttributeCertificateInfo.prototype, \"attributes\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.BitString, optional: true })\n], AttributeCertificateInfo.prototype, \"issuerUniqueID\", void 0);\n__decorate([\n    AsnProp({ type: Extensions, optional: true })\n], AttributeCertificateInfo.prototype, \"extensions\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport { AlgorithmIdentifier } from \"@peculiar/asn1-x509\";\nimport { AttributeCertificateInfo } from \"./attribute_certificate_info\";\nexport class AttributeCertificate {\n    constructor(params = {}) {\n        this.acinfo = new AttributeCertificateInfo();\n        this.signatureAlgorithm = new AlgorithmIdentifier();\n        this.signatureValue = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AttributeCertificateInfo })\n], AttributeCertificate.prototype, \"acinfo\", void 0);\n__decorate([\n    AsnProp({ type: AlgorithmIdentifier })\n], AttributeCertificate.prototype, \"signatureAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.BitString })\n], AttributeCertificate.prototype, \"signatureValue\", void 0);\n", "import { BitString } from \"@peculiar/asn1-schema\";\nexport var ClassListFlags;\n(function (ClassListFlags) {\n    ClassListFlags[ClassListFlags[\"unmarked\"] = 1] = \"unmarked\";\n    ClassListFlags[ClassListFlags[\"unclassified\"] = 2] = \"unclassified\";\n    ClassListFlags[ClassListFlags[\"restricted\"] = 4] = \"restricted\";\n    ClassListFlags[ClassListFlags[\"confidential\"] = 8] = \"confidential\";\n    ClassListFlags[ClassListFlags[\"secret\"] = 16] = \"secret\";\n    ClassListFlags[ClassListFlags[\"topSecret\"] = 32] = \"topSecret\";\n})(ClassListFlags || (ClassListFlags = {}));\nexport class ClassList extends BitString {\n}\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nexport class SecurityCategory {\n    constructor(params = {}) {\n        this.type = \"\";\n        this.value = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier, implicit: true, context: 0 })\n], SecurityCategory.prototype, \"type\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Any, implicit: true, context: 1 })\n], SecurityCategory.prototype, \"value\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport { ClassList, ClassListFlags } from \"./class_list\";\nimport { SecurityCategory } from \"./security_category\";\nexport class Clearance {\n    constructor(params = {}) {\n        this.policyId = \"\";\n        this.classList = new ClassList(ClassListFlags.unclassified);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], Clearance.prototype, \"policyId\", void 0);\n__decorate([\n    AsnProp({ type: ClassList, defaultValue: new ClassList(ClassListFlags.unclassified) })\n], Clearance.prototype, \"classList\", void 0);\n__decorate([\n    AsnProp({ type: SecurityCategory, repeated: \"set\" })\n], Clearance.prototype, \"securityCategories\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, OctetString, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport { GeneralNames } from \"@peculiar/asn1-x509\";\nexport class IetfAttrSyntaxValueChoices {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: OctetString })\n], IetfAttrSyntaxValueChoices.prototype, \"cotets\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], IetfAttrSyntaxValueChoices.prototype, \"oid\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Utf8String })\n], IetfAttrSyntaxValueChoices.prototype, \"string\", void 0);\nexport class IetfAttrSyntax {\n    constructor(params = {}) {\n        this.values = [];\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: GeneralNames, implicit: true, context: 0, optional: true })\n], IetfAttrSyntax.prototype, \"policyAuthority\", void 0);\n__decorate([\n    AsnProp({ type: IetfAttrSyntaxValueChoices, repeated: \"sequence\" })\n], IetfAttrSyntax.prototype, \"values\", void 0);\n", "import { id_pe, id_ce, id_pkix } from \"@peculiar/asn1-x509\";\nexport const id_pe_ac_auditIdentity = `${id_pe}.4`;\nexport const id_pe_aaControls = `${id_pe}.6`;\nexport const id_pe_ac_proxying = `${id_pe}.10`;\nexport const id_ce_targetInformation = `${id_ce}.55`;\nexport const id_aca = `${id_pkix}.10`;\nexport const id_aca_authenticationInfo = `${id_aca}.1`;\nexport const id_aca_accessIdentity = `${id_aca}.2`;\nexport const id_aca_chargingIdentity = `${id_aca}.3`;\nexport const id_aca_group = `${id_aca}.4`;\nexport const id_aca_encAttrs = `${id_aca}.6`;\nexport const id_at = \"2.5.4\";\nexport const id_at_role = `${id_at}.72`;\nexport const id_at_clearance = \"2.5.1.5.55\";\n", "var Targets_1;\nimport { __decorate } from \"tslib\";\nimport { AsnProp, AsnType, AsnTypeTypes, AsnArray } from \"@peculiar/asn1-schema\";\nimport { GeneralName } from \"@peculiar/asn1-x509\";\nimport { IssuerSerial } from \"./issuer_serial\";\nimport { ObjectDigestInfo } from \"./object_digest_info\";\nexport class TargetCert {\n    constructor(params = {}) {\n        this.targetCertificate = new IssuerSerial();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: IssuerSerial })\n], TargetCert.prototype, \"targetCertificate\", void 0);\n__decorate([\n    AsnProp({ type: GeneralName, optional: true })\n], TargetCert.prototype, \"targetName\", void 0);\n__decorate([\n    AsnProp({ type: ObjectDigestInfo, optional: true })\n], TargetCert.prototype, \"certDigestInfo\", void 0);\nlet Target = class Target {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n};\n__decorate([\n    AsnProp({ type: GeneralName, context: 0, implicit: true })\n], Target.prototype, \"targetName\", void 0);\n__decorate([\n    AsnProp({ type: GeneralName, context: 1, implicit: true })\n], Target.prototype, \"targetGroup\", void 0);\n__decorate([\n    AsnProp({ type: TargetCert, context: 2, implicit: true })\n], Target.prototype, \"targetCert\", void 0);\nTarget = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], Target);\nexport { Target };\nlet Targets = Targets_1 = class Targets extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, Targets_1.prototype);\n    }\n};\nTargets = Targets_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: Target })\n], Targets);\nexport { Targets };\n", "var ProxyInfo_1;\nimport { __decorate } from \"tslib\";\nimport { AsnType, AsnTypeTypes, AsnArray } from \"@peculiar/asn1-schema\";\nimport { Targets } from \"./target\";\nlet ProxyInfo = ProxyInfo_1 = class ProxyInfo extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, ProxyInfo_1.prototype);\n    }\n};\nProxyInfo = ProxyInfo_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: Targets })\n], ProxyInfo);\nexport { ProxyInfo };\n", "import { __decorate } from \"tslib\";\nimport { AsnProp } from \"@peculiar/asn1-schema\";\nimport { GeneralNames, GeneralName } from \"@peculiar/asn1-x509\";\nexport class RoleSyntax {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: GeneralNames, implicit: true, context: 0, optional: true })\n], RoleSyntax.prototype, \"roleAuthority\", void 0);\n__decorate([\n    AsnProp({ type: GeneralName, implicit: true, context: 1 })\n], RoleSyntax.prototype, \"roleName\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, OctetString } from \"@peculiar/asn1-schema\";\nimport { GeneralName } from \"@peculiar/asn1-x509\";\nexport class SvceAuthInfo {\n    constructor(params = {}) {\n        this.service = new GeneralName();\n        this.ident = new GeneralName();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: GeneralName })\n], SvceAuthInfo.prototype, \"service\", void 0);\n__decorate([\n    AsnProp({ type: GeneralName })\n], SvceAuthInfo.prototype, \"ident\", void 0);\n__decorate([\n    AsnProp({ type: OctetString, optional: true })\n], SvceAuthInfo.prototype, \"authInfo\", void 0);\n", "var CertificateSet_1;\nimport { __decorate } from \"tslib\";\nimport { AsnType, AsnTypeTypes, AsnProp, AsnPropTypes, AsnArray } from \"@peculiar/asn1-schema\";\nimport { Certificate } from \"@peculiar/asn1-x509\";\nimport { AttributeCertificate } from \"@peculiar/asn1-x509-attr\";\nexport class OtherCertificateFormat {\n    constructor(params = {}) {\n        this.otherCertFormat = \"\";\n        this.otherCert = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], OtherCertificateFormat.prototype, \"otherCertFormat\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Any })\n], OtherCertificateFormat.prototype, \"otherCert\", void 0);\nlet CertificateChoices = class CertificateChoices {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n};\n__decorate([\n    AsnProp({ type: Certificate })\n], CertificateChoices.prototype, \"certificate\", void 0);\n__decorate([\n    AsnProp({ type: AttributeCertificate, context: 2, implicit: true })\n], CertificateChoices.prototype, \"v2AttrCert\", void 0);\n__decorate([\n    AsnProp({ type: OtherCertificateFormat, context: 3, implicit: true })\n], CertificateChoices.prototype, \"other\", void 0);\nCertificateChoices = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], CertificateChoices);\nexport { CertificateChoices };\nlet CertificateSet = CertificateSet_1 = class CertificateSet extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, CertificateSet_1.prototype);\n    }\n};\nCertificateSet = CertificateSet_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Set, itemType: CertificateChoices })\n], CertificateSet);\nexport { CertificateSet };\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nexport class ContentInfo {\n    constructor(params = {}) {\n        this.contentType = \"\";\n        this.content = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], ContentInfo.prototype, \"contentType\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Any, context: 0 })\n], ContentInfo.prototype, \"content\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnType, AsnTypeTypes, OctetString } from \"@peculiar/asn1-schema\";\nlet EncapsulatedContent = class EncapsulatedContent {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n};\n__decorate([\n    AsnProp({ type: OctetString })\n], EncapsulatedContent.prototype, \"single\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Any })\n], EncapsulatedContent.prototype, \"any\", void 0);\nEncapsulatedContent = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], EncapsulatedContent);\nexport { EncapsulatedContent };\nexport class EncapsulatedContentInfo {\n    constructor(params = {}) {\n        this.eContentType = \"\";\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], EncapsulatedContentInfo.prototype, \"eContentType\", void 0);\n__decorate([\n    AsnProp({ type: EncapsulatedContent, context: 0, optional: true })\n], EncapsulatedContentInfo.prototype, \"eContent\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnConstructedOctetStringConverter, AsnProp, AsnPropTypes, AsnType, AsnTypeTypes, OctetString, } from \"@peculiar/asn1-schema\";\nimport { ContentEncryptionAlgorithmIdentifier } from \"./types\";\nlet EncryptedContent = class EncryptedContent {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n};\n__decorate([\n    AsnProp({ type: OctetString, context: 0, implicit: true, optional: true })\n], EncryptedContent.prototype, \"value\", void 0);\n__decorate([\n    AsnProp({\n        type: OctetString,\n        converter: AsnConstructedOctetStringConverter,\n        context: 0,\n        implicit: true,\n        optional: true,\n        repeated: \"sequence\",\n    })\n], EncryptedContent.prototype, \"constructedValue\", void 0);\nEncryptedContent = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], EncryptedContent);\nexport { EncryptedContent };\nexport class EncryptedContentInfo {\n    constructor(params = {}) {\n        this.contentType = \"\";\n        this.contentEncryptionAlgorithm = new ContentEncryptionAlgorithmIdentifier();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], EncryptedContentInfo.prototype, \"contentType\", void 0);\n__decorate([\n    AsnProp({ type: ContentEncryptionAlgorithmIdentifier })\n], EncryptedContentInfo.prototype, \"contentEncryptionAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: EncryptedContent, optional: true })\n], EncryptedContentInfo.prototype, \"encryptedContent\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nexport class OtherKeyAttribute {\n    constructor(params = {}) {\n        this.keyAttrId = \"\";\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], OtherKeyAttribute.prototype, \"keyAttrId\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Any, optional: true })\n], OtherKeyAttribute.prototype, \"keyAttr\", void 0);\n", "var RecipientEncryptedKeys_1;\nimport { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnArray, AsnType, AsnTypeTypes, OctetString, } from \"@peculiar/asn1-schema\";\nimport { CMSVersion, KeyEncryptionAlgorithmIdentifier } from \"./types\";\nimport { IssuerAndSerialNumber } from \"./issuer_and_serial_number\";\nimport { AlgorithmIdentifier, SubjectKeyIdentifier } from \"@peculiar/asn1-x509\";\nimport { OtherKeyAttribute } from \"./other_key_attribute\";\nexport class RecipientKeyIdentifier {\n    constructor(params = {}) {\n        this.subjectKeyIdentifier = new SubjectKeyIdentifier();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: SubjectKeyIdentifier })\n], RecipientKeyIdentifier.prototype, \"subjectKeyIdentifier\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.GeneralizedTime, optional: true })\n], RecipientKeyIdentifier.prototype, \"date\", void 0);\n__decorate([\n    AsnProp({ type: OtherKeyAttribute, optional: true })\n], RecipientKeyIdentifier.prototype, \"other\", void 0);\nlet KeyAgreeRecipientIdentifier = class KeyAgreeRecipientIdentifier {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n};\n__decorate([\n    AsnProp({ type: RecipientKeyIdentifier, context: 0, implicit: true, optional: true })\n], KeyAgreeRecipientIdentifier.prototype, \"rKeyId\", void 0);\n__decorate([\n    AsnProp({ type: IssuerAndSerialNumber, optional: true })\n], KeyAgreeRecipientIdentifier.prototype, \"issuerAndSerialNumber\", void 0);\nKeyAgreeRecipientIdentifier = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], KeyAgreeRecipientIdentifier);\nexport { KeyAgreeRecipientIdentifier };\nexport class RecipientEncryptedKey {\n    constructor(params = {}) {\n        this.rid = new KeyAgreeRecipientIdentifier();\n        this.encryptedKey = new OctetString();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: KeyAgreeRecipientIdentifier })\n], RecipientEncryptedKey.prototype, \"rid\", void 0);\n__decorate([\n    AsnProp({ type: OctetString })\n], RecipientEncryptedKey.prototype, \"encryptedKey\", void 0);\nlet RecipientEncryptedKeys = RecipientEncryptedKeys_1 = class RecipientEncryptedKeys extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, RecipientEncryptedKeys_1.prototype);\n    }\n};\nRecipientEncryptedKeys = RecipientEncryptedKeys_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: RecipientEncryptedKey })\n], RecipientEncryptedKeys);\nexport { RecipientEncryptedKeys };\nexport class OriginatorPublicKey {\n    constructor(params = {}) {\n        this.algorithm = new AlgorithmIdentifier();\n        this.publicKey = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AlgorithmIdentifier })\n], OriginatorPublicKey.prototype, \"algorithm\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.BitString })\n], OriginatorPublicKey.prototype, \"publicKey\", void 0);\nlet OriginatorIdentifierOrKey = class OriginatorIdentifierOrKey {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n};\n__decorate([\n    AsnProp({ type: SubjectKeyIdentifier, context: 0, implicit: true, optional: true })\n], OriginatorIdentifierOrKey.prototype, \"subjectKeyIdentifier\", void 0);\n__decorate([\n    AsnProp({ type: OriginatorPublicKey, context: 1, implicit: true, optional: true })\n], OriginatorIdentifierOrKey.prototype, \"originatorKey\", void 0);\n__decorate([\n    AsnProp({ type: IssuerAndSerialNumber, optional: true })\n], OriginatorIdentifierOrKey.prototype, \"issuerAndSerialNumber\", void 0);\nOriginatorIdentifierOrKey = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], OriginatorIdentifierOrKey);\nexport { OriginatorIdentifierOrKey };\nexport class KeyAgreeRecipientInfo {\n    constructor(params = {}) {\n        this.version = CMSVersion.v3;\n        this.originator = new OriginatorIdentifierOrKey();\n        this.keyEncryptionAlgorithm = new KeyEncryptionAlgorithmIdentifier();\n        this.recipientEncryptedKeys = new RecipientEncryptedKeys();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer })\n], KeyAgreeRecipientInfo.prototype, \"version\", void 0);\n__decorate([\n    AsnProp({ type: OriginatorIdentifierOrKey, context: 0 })\n], KeyAgreeRecipientInfo.prototype, \"originator\", void 0);\n__decorate([\n    AsnProp({ type: OctetString, context: 1, optional: true })\n], KeyAgreeRecipientInfo.prototype, \"ukm\", void 0);\n__decorate([\n    AsnProp({ type: KeyEncryptionAlgorithmIdentifier })\n], KeyAgreeRecipientInfo.prototype, \"keyEncryptionAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: RecipientEncryptedKeys })\n], KeyAgreeRecipientInfo.prototype, \"recipientEncryptedKeys\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnType, AsnTypeTypes, OctetString } from \"@peculiar/asn1-schema\";\nimport { CMSVersion, KeyEncryptionAlgorithmIdentifier } from \"./types\";\nimport { IssuerAndSerialNumber } from \"./issuer_and_serial_number\";\nimport { SubjectKeyIdentifier } from \"@peculiar/asn1-x509\";\nlet RecipientIdentifier = class RecipientIdentifier {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n};\n__decorate([\n    AsnProp({ type: SubjectKeyIdentifier, context: 0, implicit: true })\n], RecipientIdentifier.prototype, \"subjectKeyIdentifier\", void 0);\n__decorate([\n    AsnProp({ type: IssuerAndSerialNumber })\n], RecipientIdentifier.prototype, \"issuerAndSerialNumber\", void 0);\nRecipientIdentifier = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], RecipientIdentifier);\nexport { RecipientIdentifier };\nexport class KeyTransRecipientInfo {\n    constructor(params = {}) {\n        this.version = CMSVersion.v0;\n        this.rid = new RecipientIdentifier();\n        this.keyEncryptionAlgorithm = new KeyEncryptionAlgorithmIdentifier();\n        this.encryptedKey = new OctetString();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer })\n], KeyTransRecipientInfo.prototype, \"version\", void 0);\n__decorate([\n    AsnProp({ type: RecipientIdentifier })\n], KeyTransRecipientInfo.prototype, \"rid\", void 0);\n__decorate([\n    AsnProp({ type: KeyEncryptionAlgorithmIdentifier })\n], KeyTransRecipientInfo.prototype, \"keyEncryptionAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: OctetString })\n], KeyTransRecipientInfo.prototype, \"encryptedKey\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, OctetString } from \"@peculiar/asn1-schema\";\nimport { OtherKeyAttribute } from \"./other_key_attribute\";\nimport { CMSVersion, KeyEncryptionAlgorithmIdentifier } from \"./types\";\nexport class KEKIdentifier {\n    constructor(params = {}) {\n        this.keyIdentifier = new OctetString();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: OctetString })\n], KEKIdentifier.prototype, \"keyIdentifier\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.GeneralizedTime, optional: true })\n], KEKIdentifier.prototype, \"date\", void 0);\n__decorate([\n    AsnProp({ type: OtherKeyAttribute, optional: true })\n], KEKIdentifier.prototype, \"other\", void 0);\nexport class KEKRecipientInfo {\n    constructor(params = {}) {\n        this.version = CMSVersion.v4;\n        this.kekid = new KEKIdentifier();\n        this.keyEncryptionAlgorithm = new KeyEncryptionAlgorithmIdentifier();\n        this.encryptedKey = new OctetString();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer })\n], KEKRecipientInfo.prototype, \"version\", void 0);\n__decorate([\n    AsnProp({ type: KEKIdentifier })\n], KEKRecipientInfo.prototype, \"kekid\", void 0);\n__decorate([\n    AsnProp({ type: KeyEncryptionAlgorithmIdentifier })\n], KEKRecipientInfo.prototype, \"keyEncryptionAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: OctetString })\n], KEKRecipientInfo.prototype, \"encryptedKey\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, OctetString } from \"@peculiar/asn1-schema\";\nimport { CMSVersion, KeyDerivationAlgorithmIdentifier, KeyEncryptionAlgorithmIdentifier, } from \"./types\";\nexport class PasswordRecipientInfo {\n    constructor(params = {}) {\n        this.version = CMSVersion.v0;\n        this.keyEncryptionAlgorithm = new KeyEncryptionAlgorithmIdentifier();\n        this.encryptedKey = new OctetString();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer })\n], PasswordRecipientInfo.prototype, \"version\", void 0);\n__decorate([\n    AsnProp({ type: KeyDerivationAlgorithmIdentifier, context: 0, optional: true })\n], PasswordRecipientInfo.prototype, \"keyDerivationAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: KeyEncryptionAlgorithmIdentifier })\n], PasswordRecipientInfo.prototype, \"keyEncryptionAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: OctetString })\n], PasswordRecipientInfo.prototype, \"encryptedKey\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { KeyAgreeRecipientInfo } from \"./key_agree_recipient_info\";\nimport { KeyTransRecipientInfo } from \"./key_trans_recipient_info\";\nimport { KEKRecipientInfo } from \"./kek_recipient_info\";\nimport { PasswordRecipientInfo } from \"./password_recipient_info\";\nexport class OtherRecipientInfo {\n    constructor(params = {}) {\n        this.oriType = \"\";\n        this.oriValue = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], OtherRecipientInfo.prototype, \"oriType\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Any })\n], OtherRecipientInfo.prototype, \"oriValue\", void 0);\nlet RecipientInfo = class RecipientInfo {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n};\n__decorate([\n    AsnProp({ type: KeyTransRecipientInfo, optional: true })\n], RecipientInfo.prototype, \"ktri\", void 0);\n__decorate([\n    AsnProp({ type: KeyAgreeRecipientInfo, context: 1, implicit: true, optional: true })\n], RecipientInfo.prototype, \"kari\", void 0);\n__decorate([\n    AsnProp({ type: KEKRecipientInfo, context: 2, implicit: true, optional: true })\n], RecipientInfo.prototype, \"kekri\", void 0);\n__decorate([\n    AsnProp({ type: PasswordRecipientInfo, context: 3, implicit: true, optional: true })\n], RecipientInfo.prototype, \"pwri\", void 0);\n__decorate([\n    AsnProp({ type: OtherRecipientInfo, context: 4, implicit: true, optional: true })\n], RecipientInfo.prototype, \"ori\", void 0);\nRecipientInfo = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], RecipientInfo);\nexport { RecipientInfo };\n", "var RecipientInfos_1;\nimport { __decorate } from \"tslib\";\nimport { AsnArray, AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { RecipientInfo } from \"./recipient_info\";\nlet RecipientInfos = RecipientInfos_1 = class RecipientInfos extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, RecipientInfos_1.prototype);\n    }\n};\nRecipientInfos = RecipientInfos_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Set, itemType: RecipientInfo })\n], RecipientInfos);\nexport { RecipientInfos };\n", "var RevocationInfoChoices_1;\nimport { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnType, AsnTypeTypes, AsnArray } from \"@peculiar/asn1-schema\";\nimport { id_pkix } from \"@peculiar/asn1-x509\";\nexport const id_ri = `${id_pkix}.16`;\nexport const id_ri_ocsp_response = `${id_ri}.2`;\nexport const id_ri_scvp = `${id_ri}.4`;\nexport class OtherRevocationInfoFormat {\n    constructor(params = {}) {\n        this.otherRevInfoFormat = \"\";\n        this.otherRevInfo = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], OtherRevocationInfoFormat.prototype, \"otherRevInfoFormat\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Any })\n], OtherRevocationInfoFormat.prototype, \"otherRevInfo\", void 0);\nlet RevocationInfoChoice = class RevocationInfoChoice {\n    constructor(params = {}) {\n        this.other = new OtherRevocationInfoFormat();\n        Object.assign(this, params);\n    }\n};\n__decorate([\n    AsnProp({ type: OtherRevocationInfoFormat, context: 1, implicit: true })\n], RevocationInfoChoice.prototype, \"other\", void 0);\nRevocationInfoChoice = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], RevocationInfoChoice);\nexport { RevocationInfoChoice };\nlet RevocationInfoChoices = RevocationInfoChoices_1 = class RevocationInfoChoices extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, RevocationInfoChoices_1.prototype);\n    }\n};\nRevocationInfoChoices = RevocationInfoChoices_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Set, itemType: RevocationInfoChoice })\n], RevocationInfoChoices);\nexport { RevocationInfoChoices };\n", "import { __decorate } from \"tslib\";\nimport { AsnProp } from \"@peculiar/asn1-schema\";\nimport { CertificateSet } from \"./certificate_choices\";\nimport { RevocationInfoChoices } from \"./revocation_info_choice\";\nexport class OriginatorInfo {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: CertificateSet, context: 0, implicit: true, optional: true })\n], OriginatorInfo.prototype, \"certs\", void 0);\n__decorate([\n    AsnProp({ type: RevocationInfoChoices, context: 1, implicit: true, optional: true })\n], OriginatorInfo.prototype, \"crls\", void 0);\n", "var UnprotectedAttributes_1;\nimport { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnArray, AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { CMSVersion } from \"./types\";\nimport { Attribute } from \"./attribute\";\nimport { RecipientInfos } from \"./recipient_infos\";\nimport { OriginatorInfo } from \"./originator_info\";\nimport { EncryptedContentInfo } from \"./encrypted_content_info\";\nlet UnprotectedAttributes = UnprotectedAttributes_1 = class UnprotectedAttributes extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, UnprotectedAttributes_1.prototype);\n    }\n};\nUnprotectedAttributes = UnprotectedAttributes_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Set, itemType: Attribute })\n], UnprotectedAttributes);\nexport { UnprotectedAttributes };\nexport class EnvelopedData {\n    constructor(params = {}) {\n        this.version = CMSVersion.v0;\n        this.recipientInfos = new RecipientInfos();\n        this.encryptedContentInfo = new EncryptedContentInfo();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer })\n], EnvelopedData.prototype, \"version\", void 0);\n__decorate([\n    AsnProp({ type: OriginatorInfo, context: 0, implicit: true, optional: true })\n], EnvelopedData.prototype, \"originatorInfo\", void 0);\n__decorate([\n    AsnProp({ type: RecipientInfos })\n], EnvelopedData.prototype, \"recipientInfos\", void 0);\n__decorate([\n    AsnProp({ type: EncryptedContentInfo })\n], EnvelopedData.prototype, \"encryptedContentInfo\", void 0);\n__decorate([\n    AsnProp({ type: UnprotectedAttributes, context: 1, implicit: true, optional: true })\n], EnvelopedData.prototype, \"unprotectedAttrs\", void 0);\n", "export const id_ct_contentInfo = \"1.2.840.113549.1.9.16.1.6\";\nexport const id_data = \"1.2.840.113549.1.7.1\";\nexport const id_signedData = \"1.2.840.113549.1.7.2\";\nexport const id_envelopedData = \"1.2.840.113549.1.7.3\";\nexport const id_digestedData = \"1.2.840.113549.1.7.5\";\nexport const id_encryptedData = \"1.2.840.113549.1.7.6\";\nexport const id_authData = \"1.2.840.113549.1.9.16.1.2\";\n", "var DigestAlgorithmIdentifiers_1;\nimport { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnArray, AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { CertificateSet } from \"./certificate_choices\";\nimport { CMSVersion, DigestAlgorithmIdentifier } from \"./types\";\nimport { EncapsulatedContentInfo } from \"./encapsulated_content_info\";\nimport { RevocationInfoChoices } from \"./revocation_info_choice\";\nimport { SignerInfos } from \"./signer_info\";\nlet DigestAlgorithmIdentifiers = DigestAlgorithmIdentifiers_1 = class DigestAlgorithmIdentifiers extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, DigestAlgorithmIdentifiers_1.prototype);\n    }\n};\nDigestAlgorithmIdentifiers = DigestAlgorithmIdentifiers_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Set, itemType: DigestAlgorithmIdentifier })\n], DigestAlgorithmIdentifiers);\nexport { DigestAlgorithmIdentifiers };\nexport class SignedData {\n    constructor(params = {}) {\n        this.version = CMSVersion.v0;\n        this.digestAlgorithms = new DigestAlgorithmIdentifiers();\n        this.encapContentInfo = new EncapsulatedContentInfo();\n        this.signerInfos = new SignerInfos();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer })\n], SignedData.prototype, \"version\", void 0);\n__decorate([\n    AsnProp({ type: DigestAlgorithmIdentifiers })\n], SignedData.prototype, \"digestAlgorithms\", void 0);\n__decorate([\n    AsnProp({ type: EncapsulatedContentInfo })\n], SignedData.prototype, \"encapContentInfo\", void 0);\n__decorate([\n    AsnProp({ type: CertificateSet, context: 0, implicit: true, optional: true })\n], SignedData.prototype, \"certificates\", void 0);\n__decorate([\n    AsnProp({ type: RevocationInfoChoices, context: 1, implicit: true, optional: true })\n], SignedData.prototype, \"crls\", void 0);\n__decorate([\n    AsnProp({ type: SignerInfos })\n], SignedData.prototype, \"signerInfos\", void 0);\n", "export const id_ecPublicKey = \"1.2.840.10045.2.1\";\nexport const id_ecDH = \"1.3.132.1.12\";\nexport const id_ecMQV = \"1.3.132.1.13\";\nexport const id_ecdsaWithSHA1 = \"1.2.840.10045.4.1\";\nexport const id_ecdsaWithSHA224 = \"1.2.840.10045.4.3.1\";\nexport const id_ecdsaWithSHA256 = \"1.2.840.10045.4.3.2\";\nexport const id_ecdsaWithSHA384 = \"1.2.840.10045.4.3.3\";\nexport const id_ecdsaWithSHA512 = \"1.2.840.10045.4.3.4\";\nexport const id_secp192r1 = \"1.2.840.10045.3.1.1\";\nexport const id_sect163k1 = \"1.3.132.0.1\";\nexport const id_sect163r2 = \"1.3.132.0.15\";\nexport const id_secp224r1 = \"1.3.132.0.33\";\nexport const id_sect233k1 = \"1.3.132.0.26\";\nexport const id_sect233r1 = \"1.3.132.0.27\";\nexport const id_secp256r1 = \"1.2.840.10045.3.1.7\";\nexport const id_sect283k1 = \"1.3.132.0.16\";\nexport const id_sect283r1 = \"1.3.132.0.17\";\nexport const id_secp384r1 = \"1.3.132.0.34\";\nexport const id_sect409k1 = \"1.3.132.0.36\";\nexport const id_sect409r1 = \"1.3.132.0.37\";\nexport const id_secp521r1 = \"1.3.132.0.35\";\nexport const id_sect571k1 = \"1.3.132.0.38\";\nexport const id_sect571r1 = \"1.3.132.0.39\";\n", "import { AlgorithmIdentifier } from \"@peculiar/asn1-x509\";\nimport * as oid from \"./object_identifiers\";\nfunction create(algorithm) {\n    return new AlgorithmIdentifier({ algorithm });\n}\nexport const ecdsaWithSHA1 = create(oid.id_ecdsaWithSHA1);\nexport const ecdsaWithSHA224 = create(oid.id_ecdsaWithSHA224);\nexport const ecdsaWithSHA256 = create(oid.id_ecdsaWithSHA256);\nexport const ecdsaWithSHA384 = create(oid.id_ecdsaWithSHA384);\nexport const ecdsaWithSHA512 = create(oid.id_ecdsaWithSHA512);\n", "/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n", "import { __decorate } from \"tslib\";\nimport { AsnType, AsnTypeTypes, AsnProp, AsnPropTypes, OctetString, AsnIntegerArrayBufferConverter, } from \"@peculiar/asn1-schema\";\nlet FieldID = class FieldID {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], FieldID.prototype, \"fieldType\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Any })\n], FieldID.prototype, \"parameters\", void 0);\nFieldID = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], FieldID);\nexport { FieldID };\nexport class ECPoint extends OctetString {\n}\nexport class FieldElement extends OctetString {\n}\nlet Curve = class Curve {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.OctetString })\n], Curve.prototype, \"a\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.OctetString })\n], Curve.prototype, \"b\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.BitString, optional: true })\n], Curve.prototype, \"seed\", void 0);\nCurve = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], Curve);\nexport { Curve };\nexport var ECPVer;\n(function (ECPVer) {\n    ECPVer[ECPVer[\"ecpVer1\"] = 1] = \"ecpVer1\";\n})(ECPVer || (ECPVer = {}));\nlet SpecifiedECDomain = class SpecifiedECDomain {\n    constructor(params = {}) {\n        this.version = ECPVer.ecpVer1;\n        Object.assign(this, params);\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer })\n], SpecifiedECDomain.prototype, \"version\", void 0);\n__decorate([\n    AsnProp({ type: FieldID })\n], SpecifiedECDomain.prototype, \"fieldID\", void 0);\n__decorate([\n    AsnProp({ type: Curve })\n], SpecifiedECDomain.prototype, \"curve\", void 0);\n__decorate([\n    AsnProp({ type: ECPoint })\n], SpecifiedECDomain.prototype, \"base\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], SpecifiedECDomain.prototype, \"order\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, optional: true })\n], SpecifiedECDomain.prototype, \"cofactor\", void 0);\nSpecifiedECDomain = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], SpecifiedECDomain);\nexport { SpecifiedECDomain };\n", "import { __decorate } from \"tslib\";\nimport { AsnType, AsnTypeTypes, AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport { SpecifiedECDomain } from \"./rfc3279\";\nlet ECParameters = class ECParameters {\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], ECParameters.prototype, \"namedCurve\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Null })\n], ECParameters.prototype, \"implicitCurve\", void 0);\n__decorate([\n    AsnProp({ type: SpecifiedECDomain })\n], ECParameters.prototype, \"specifiedCurve\", void 0);\nECParameters = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], ECParameters);\nexport { ECParameters };\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, OctetString } from \"@peculiar/asn1-schema\";\nimport { ECParameters } from \"./ec_parameters\";\nexport class ECPrivateKey {\n    constructor(params = {}) {\n        this.version = 1;\n        this.privateKey = new OctetString();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer })\n], ECPrivateKey.prototype, \"version\", void 0);\n__decorate([\n    AsnProp({ type: OctetString })\n], ECPrivateKey.prototype, \"privateKey\", void 0);\n__decorate([\n    AsnProp({ type: ECParameters, context: 0, optional: true })\n], ECPrivateKey.prototype, \"parameters\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.BitString, context: 1, optional: true })\n], ECPrivateKey.prototype, \"publicKey\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnIntegerArrayBufferConverter } from \"@peculiar/asn1-schema\";\nexport class ECDSASigValue {\n    constructor(params = {}) {\n        this.r = new ArrayBuffer(0);\n        this.s = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], ECDSASigValue.prototype, \"r\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], ECDSASigValue.prototype, \"s\", void 0);\n", "/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n", "export const id_pkcs_1 = \"1.2.840.113549.1.1\";\nexport const id_rsaEncryption = `${id_pkcs_1}.1`;\nexport const id_RSAES_OAEP = `${id_pkcs_1}.7`;\nexport const id_pSpecified = `${id_pkcs_1}.9`;\nexport const id_RSASSA_PSS = `${id_pkcs_1}.10`;\nexport const id_md2WithRSAEncryption = `${id_pkcs_1}.2`;\nexport const id_md5WithRSAEncryption = `${id_pkcs_1}.4`;\nexport const id_sha1WithRSAEncryption = `${id_pkcs_1}.5`;\nexport const id_sha224WithRSAEncryption = `${id_pkcs_1}.14`;\nexport const id_ssha224WithRSAEncryption = id_sha224WithRSAEncryption;\nexport const id_sha256WithRSAEncryption = `${id_pkcs_1}.11`;\nexport const id_sha384WithRSAEncryption = `${id_pkcs_1}.12`;\nexport const id_sha512WithRSAEncryption = `${id_pkcs_1}.13`;\nexport const id_sha512_224WithRSAEncryption = `${id_pkcs_1}.15`;\nexport const id_sha512_256WithRSAEncryption = `${id_pkcs_1}.16`;\nexport const id_sha1 = \"1.3.14.3.2.26\";\nexport const id_sha224 = \"2.16.840.1.101.3.4.2.4\";\nexport const id_sha256 = \"2.16.840.1.101.3.4.2.1\";\nexport const id_sha384 = \"2.16.840.1.101.3.4.2.2\";\nexport const id_sha512 = \"2.16.840.1.101.3.4.2.3\";\nexport const id_sha512_224 = \"2.16.840.1.101.3.4.2.5\";\nexport const id_sha512_256 = \"2.16.840.1.101.3.4.2.6\";\nexport const id_md2 = \"1.2.840.113549.2.2\";\nexport const id_md5 = \"1.2.840.113549.2.5\";\nexport const id_mgf1 = `${id_pkcs_1}.8`;\n", "import { AsnConvert, AsnOctetStringConverter } from \"@peculiar/asn1-schema\";\nimport { AlgorithmIdentifier } from \"@peculiar/asn1-x509\";\nimport * as oid from \"./object_identifiers\";\nfunction create(algorithm) {\n    return new AlgorithmIdentifier({ algorithm, parameters: null });\n}\nexport const md2 = create(oid.id_md2);\nexport const md4 = create(oid.id_md5);\nexport const sha1 = create(oid.id_sha1);\nexport const sha224 = create(oid.id_sha224);\nexport const sha256 = create(oid.id_sha256);\nexport const sha384 = create(oid.id_sha384);\nexport const sha512 = create(oid.id_sha512);\nexport const sha512_224 = create(oid.id_sha512_224);\nexport const sha512_256 = create(oid.id_sha512_256);\nexport const mgf1SHA1 = new AlgorithmIdentifier({\n    algorithm: oid.id_mgf1,\n    parameters: AsnConvert.serialize(sha1),\n});\nexport const pSpecifiedEmpty = new AlgorithmIdentifier({\n    algorithm: oid.id_pSpecified,\n    parameters: AsnConvert.serialize(AsnOctetStringConverter.toASN(new Uint8Array([\n        0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55, 0xbf, 0xef, 0x95, 0x60, 0x18,\n        0x90, 0xaf, 0xd8, 0x07, 0x09,\n    ]).buffer)),\n});\nexport const rsaEncryption = create(oid.id_rsaEncryption);\nexport const md2WithRSAEncryption = create(oid.id_md2WithRSAEncryption);\nexport const md5WithRSAEncryption = create(oid.id_md5WithRSAEncryption);\nexport const sha1WithRSAEncryption = create(oid.id_sha1WithRSAEncryption);\nexport const sha224WithRSAEncryption = create(oid.id_sha512_224WithRSAEncryption);\nexport const sha256WithRSAEncryption = create(oid.id_sha512_256WithRSAEncryption);\nexport const sha384WithRSAEncryption = create(oid.id_sha384WithRSAEncryption);\nexport const sha512WithRSAEncryption = create(oid.id_sha512WithRSAEncryption);\nexport const sha512_224WithRSAEncryption = create(oid.id_sha512_224WithRSAEncryption);\nexport const sha512_256WithRSAEncryption = create(oid.id_sha512_256WithRSAEncryption);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnConvert } from \"@peculiar/asn1-schema\";\nimport { AlgorithmIdentifier } from \"@peculiar/asn1-x509\";\nimport { id_mgf1, id_RSAES_OAEP } from \"../object_identifiers\";\nimport { sha1, mgf1SHA1, pSpecifiedEmpty } from \"../algorithms\";\nexport class RsaEsOaepParams {\n    constructor(params = {}) {\n        this.hashAlgorithm = new AlgorithmIdentifier(sha1);\n        this.maskGenAlgorithm = new AlgorithmIdentifier({\n            algorithm: id_mgf1,\n            parameters: AsnConvert.serialize(sha1),\n        });\n        this.pSourceAlgorithm = new AlgorithmIdentifier(pSpecifiedEmpty);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AlgorithmIdentifier, context: 0, defaultValue: sha1 })\n], RsaEsOaepParams.prototype, \"hashAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: AlgorithmIdentifier, context: 1, defaultValue: mgf1SHA1 })\n], RsaEsOaepParams.prototype, \"maskGenAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: AlgorithmIdentifier, context: 2, defaultValue: pSpecifiedEmpty })\n], RsaEsOaepParams.prototype, \"pSourceAlgorithm\", void 0);\nexport const RSAES_OAEP = new AlgorithmIdentifier({\n    algorithm: id_RSAES_OAEP,\n    parameters: AsnConvert.serialize(new RsaEsOaepParams()),\n});\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnConvert, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport { AlgorithmIdentifier } from \"@peculiar/asn1-x509\";\nimport { id_mgf1, id_RSASSA_PSS } from \"../object_identifiers\";\nimport { sha1, mgf1SHA1 } from \"../algorithms\";\nexport class RsaSaPssParams {\n    constructor(params = {}) {\n        this.hashAlgorithm = new AlgorithmIdentifier(sha1);\n        this.maskGenAlgorithm = new AlgorithmIdentifier({\n            algorithm: id_mgf1,\n            parameters: AsnConvert.serialize(sha1),\n        });\n        this.saltLength = 20;\n        this.trailerField = 1;\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AlgorithmIdentifier, context: 0, defaultValue: sha1 })\n], RsaSaPssParams.prototype, \"hashAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: AlgorithmIdentifier, context: 1, defaultValue: mgf1SHA1 })\n], RsaSaPssParams.prototype, \"maskGenAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, context: 2, defaultValue: 20 })\n], RsaSaPssParams.prototype, \"saltLength\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, context: 3, defaultValue: 1 })\n], RsaSaPssParams.prototype, \"trailerField\", void 0);\nexport const RSASSA_PSS = new AlgorithmIdentifier({\n    algorithm: id_RSASSA_PSS,\n    parameters: AsnConvert.serialize(new RsaSaPssParams()),\n});\n", "import { __decorate } from \"tslib\";\nimport { AlgorithmIdentifier } from \"@peculiar/asn1-x509\";\nimport { AsnProp, OctetString } from \"@peculiar/asn1-schema\";\nexport class DigestInfo {\n    constructor(params = {}) {\n        this.digestAlgorithm = new AlgorithmIdentifier();\n        this.digest = new OctetString();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AlgorithmIdentifier })\n], DigestInfo.prototype, \"digestAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: OctetString })\n], DigestInfo.prototype, \"digest\", void 0);\n", "var OtherPrimeInfos_1;\nimport { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnIntegerArrayBufferConverter, AsnArray, AsnType, AsnTypeTypes, } from \"@peculiar/asn1-schema\";\nexport class OtherPrimeInfo {\n    constructor(params = {}) {\n        this.prime = new ArrayBuffer(0);\n        this.exponent = new ArrayBuffer(0);\n        this.coefficient = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], OtherPrimeInfo.prototype, \"prime\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], OtherPrimeInfo.prototype, \"exponent\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], OtherPrimeInfo.prototype, \"coefficient\", void 0);\nlet OtherPrimeInfos = OtherPrimeInfos_1 = class OtherPrimeInfos extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, OtherPrimeInfos_1.prototype);\n    }\n};\nOtherPrimeInfos = OtherPrimeInfos_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: OtherPrimeInfo })\n], OtherPrimeInfos);\nexport { OtherPrimeInfos };\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnIntegerArrayBufferConverter } from \"@peculiar/asn1-schema\";\nimport { OtherPrimeInfos } from \"./other_prime_info\";\nexport class RSAPrivateKey {\n    constructor(params = {}) {\n        this.version = 0;\n        this.modulus = new ArrayBuffer(0);\n        this.publicExponent = new ArrayBuffer(0);\n        this.privateExponent = new ArrayBuffer(0);\n        this.prime1 = new ArrayBuffer(0);\n        this.prime2 = new ArrayBuffer(0);\n        this.exponent1 = new ArrayBuffer(0);\n        this.exponent2 = new ArrayBuffer(0);\n        this.coefficient = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer })\n], RSAPrivateKey.prototype, \"version\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], RSAPrivateKey.prototype, \"modulus\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], RSAPrivateKey.prototype, \"publicExponent\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], RSAPrivateKey.prototype, \"privateExponent\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], RSAPrivateKey.prototype, \"prime1\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], RSAPrivateKey.prototype, \"prime2\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], RSAPrivateKey.prototype, \"exponent1\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], RSAPrivateKey.prototype, \"exponent2\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], RSAPrivateKey.prototype, \"coefficient\", void 0);\n__decorate([\n    AsnProp({ type: OtherPrimeInfos, optional: true })\n], RSAPrivateKey.prototype, \"otherPrimeInfos\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnIntegerArrayBufferConverter } from \"@peculiar/asn1-schema\";\nexport class RSAPublicKey {\n    constructor(params = {}) {\n        this.modulus = new ArrayBuffer(0);\n        this.publicExponent = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], RSAPublicKey.prototype, \"modulus\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter })\n], RSAPublicKey.prototype, \"publicExponent\", void 0);\n", "/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n", "var Lifecycle;\n(function (Lifecycle) {\n    Lifecycle[Lifecycle[\"Transient\"] = 0] = \"Transient\";\n    Lifecycle[Lifecycle[\"Singleton\"] = 1] = \"Singleton\";\n    Lifecycle[Lifecycle[\"ResolutionScoped\"] = 2] = \"ResolutionScoped\";\n    Lifecycle[Lifecycle[\"ContainerScoped\"] = 3] = \"ContainerScoped\";\n})(Lifecycle || (Lifecycle = {}));\nexport default Lifecycle;\n", "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n", "export var INJECTION_TOKEN_METADATA_KEY = \"injectionTokens\";\nexport function getParamInfo(target) {\n    var params = Reflect.getMetadata(\"design:paramtypes\", target) || [];\n    var injectionTokens = Reflect.getOwnMetadata(INJECTION_TOKEN_METADATA_KEY, target) || {};\n    Object.keys(injectionTokens).forEach(function (key) {\n        params[+key] = injectionTokens[key];\n    });\n    return params;\n}\nexport function defineInjectionTokenMetadata(data, transform) {\n    return function (target, _propertyKey, parameterIndex) {\n        var descriptors = Reflect.getOwnMetadata(INJECTION_TOKEN_METADATA_KEY, target) || {};\n        descriptors[parameterIndex] = transform\n            ? {\n                token: data,\n                transform: transform.transformToken,\n                transformArgs: transform.args || []\n            }\n            : data;\n        Reflect.defineMetadata(INJECTION_TOKEN_METADATA_KEY, descriptors, target);\n    };\n}\n", "export function isClassProvider(provider) {\n    return !!provider.useClass;\n}\n", "export function isFactoryProvider(provider) {\n    return !!provider.useFactory;\n}\n", "import { __read, __spread } from \"tslib\";\nvar DelayedConstructor = (function () {\n    function DelayedConstructor(wrap) {\n        this.wrap = wrap;\n        this.reflectMethods = [\n            \"get\",\n            \"getPrototypeOf\",\n            \"setPrototypeOf\",\n            \"getOwnPropertyDescriptor\",\n            \"defineProperty\",\n            \"has\",\n            \"set\",\n            \"deleteProperty\",\n            \"apply\",\n            \"construct\",\n            \"ownKeys\"\n        ];\n    }\n    DelayedConstructor.prototype.createProxy = function (createObject) {\n        var _this = this;\n        var target = {};\n        var init = false;\n        var value;\n        var delayedObject = function () {\n            if (!init) {\n                value = createObject(_this.wrap());\n                init = true;\n            }\n            return value;\n        };\n        return new Proxy(target, this.createHandler(delayedObject));\n    };\n    DelayedConstructor.prototype.createHandler = function (delayedObject) {\n        var handler = {};\n        var install = function (name) {\n            handler[name] = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                args[0] = delayedObject();\n                var method = Reflect[name];\n                return method.apply(void 0, __spread(args));\n            };\n        };\n        this.reflectMethods.forEach(install);\n        return handler;\n    };\n    return DelayedConstructor;\n}());\nexport { DelayedConstructor };\nexport function delay(wrappedConstructor) {\n    if (typeof wrappedConstructor === \"undefined\") {\n        throw new Error(\"Attempt to `delay` undefined. Constructor must be wrapped in a callback\");\n    }\n    return new DelayedConstructor(wrappedConstructor);\n}\n", "import { DelayedConstructor } from \"../lazy-helpers\";\nexport function isNormalToken(token) {\n    return typeof token === \"string\" || typeof token === \"symbol\";\n}\nexport function isTokenDescriptor(descriptor) {\n    return (typeof descriptor === \"object\" &&\n        \"token\" in descriptor &&\n        \"multiple\" in descriptor);\n}\nexport function isTransformDescriptor(descriptor) {\n    return (typeof descriptor === \"object\" &&\n        \"token\" in descriptor &&\n        \"transform\" in descriptor);\n}\nexport function isConstructorToken(token) {\n    return typeof token === \"function\" || token instanceof DelayedConstructor;\n}\n", "export function isTokenProvider(provider) {\n    return !!provider.useToken;\n}\n", "export function isValueProvider(provider) {\n    return provider.useValue != undefined;\n}\n", "import { isClassProvider } from \"./class-provider\";\nimport { isValueProvider } from \"./value-provider\";\nimport { isTokenProvider } from \"./token-provider\";\nimport { isFactoryProvider } from \"./factory-provider\";\nexport function isProvider(provider) {\n    return (isClassProvider(provider) ||\n        isValueProvider(provider) ||\n        isTokenProvider(provider) ||\n        isFactoryProvider(provider));\n}\n", "var RegistryBase = (function () {\n    function RegistryBase() {\n        this._registryMap = new Map();\n    }\n    RegistryBase.prototype.entries = function () {\n        return this._registryMap.entries();\n    };\n    RegistryBase.prototype.getAll = function (key) {\n        this.ensure(key);\n        return this._registryMap.get(key);\n    };\n    RegistryBase.prototype.get = function (key) {\n        this.ensure(key);\n        var value = this._registryMap.get(key);\n        return value[value.length - 1] || null;\n    };\n    RegistryBase.prototype.set = function (key, value) {\n        this.ensure(key);\n        this._registryMap.get(key).push(value);\n    };\n    RegistryBase.prototype.setAll = function (key, value) {\n        this._registryMap.set(key, value);\n    };\n    RegistryBase.prototype.has = function (key) {\n        this.ensure(key);\n        return this._registryMap.get(key).length > 0;\n    };\n    RegistryBase.prototype.clear = function () {\n        this._registryMap.clear();\n    };\n    RegistryBase.prototype.ensure = function (key) {\n        if (!this._registryMap.has(key)) {\n            this._registryMap.set(key, []);\n        }\n    };\n    return RegistryBase;\n}());\nexport default RegistryBase;\n", "import { __extends } from \"tslib\";\nimport RegistryBase from \"./registry-base\";\nvar Registry = (function (_super) {\n    __extends(Registry, _super);\n    function Registry() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Registry;\n}(RegistryBase));\nexport default Registry;\n", "var ResolutionContext = (function () {\n    function ResolutionContext() {\n        this.scopedResolutions = new Map();\n    }\n    return ResolutionContext;\n}());\nexport default ResolutionContext;\n", "import { __read, __spread } from \"tslib\";\nfunction formatDependency(params, idx) {\n    if (params === null) {\n        return \"at position #\" + idx;\n    }\n    var argName = params.split(\",\")[idx].trim();\n    return \"\\\"\" + argName + \"\\\" at position #\" + idx;\n}\nfunction composeErrorMessage(msg, e, indent) {\n    if (indent === void 0) { indent = \"    \"; }\n    return __spread([msg], e.message.split(\"\\n\").map(function (l) { return indent + l; })).join(\"\\n\");\n}\nexport function formatErrorCtor(ctor, paramIdx, error) {\n    var _a = __read(ctor.toString().match(/constructor\\(([\\w, ]+)\\)/) || [], 2), _b = _a[1], params = _b === void 0 ? null : _b;\n    var dep = formatDependency(params, paramIdx);\n    return composeErrorMessage(\"Cannot inject the dependency \" + dep + \" of \\\"\" + ctor.name + \"\\\" constructor. Reason:\", error);\n}\n", "export function isDisposable(value) {\n    if (typeof value.dispose !== \"function\")\n        return false;\n    var disposeFun = value.dispose;\n    if (disposeFun.length > 0) {\n        return false;\n    }\n    return true;\n}\n", "import { __extends } from \"tslib\";\nimport RegistryBase from \"./registry-base\";\nvar PreResolutionInterceptors = (function (_super) {\n    __extends(PreResolutionInterceptors, _super);\n    function PreResolutionInterceptors() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return PreResolutionInterceptors;\n}(RegistryBase));\nexport { PreResolutionInterceptors };\nvar PostResolutionInterceptors = (function (_super) {\n    __extends(PostResolutionInterceptors, _super);\n    function PostResolutionInterceptors() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return PostResolutionInterceptors;\n}(RegistryBase));\nexport { PostResolutionInterceptors };\nvar Interceptors = (function () {\n    function Interceptors() {\n        this.preResolution = new PreResolutionInterceptors();\n        this.postResolution = new PostResolutionInterceptors();\n    }\n    return Interceptors;\n}());\nexport default Interceptors;\n", "import { __awaiter, __generator, __read, __spread, __values } from \"tslib\";\nimport { isClassProvider, isFactoryProvider, isNormalToken, isTokenProvider, isValueProvider } from \"./providers\";\nimport { isProvider } from \"./providers/provider\";\nimport { isConstructorToken, isTokenDescriptor, isTransformDescriptor } from \"./providers/injection-token\";\nimport Registry from \"./registry\";\nimport Lifecycle from \"./types/lifecycle\";\nimport ResolutionContext from \"./resolution-context\";\nimport { formatErrorCtor } from \"./error-helpers\";\nimport { DelayedConstructor } from \"./lazy-helpers\";\nimport { isDisposable } from \"./types/disposable\";\nimport Interceptors from \"./interceptors\";\nexport var typeInfo = new Map();\nvar InternalDependencyContainer = (function () {\n    function InternalDependencyContainer(parent) {\n        this.parent = parent;\n        this._registry = new Registry();\n        this.interceptors = new Interceptors();\n        this.disposed = false;\n        this.disposables = new Set();\n    }\n    InternalDependencyContainer.prototype.register = function (token, providerOrConstructor, options) {\n        if (options === void 0) { options = { lifecycle: Lifecycle.Transient }; }\n        this.ensureNotDisposed();\n        var provider;\n        if (!isProvider(providerOrConstructor)) {\n            provider = { useClass: providerOrConstructor };\n        }\n        else {\n            provider = providerOrConstructor;\n        }\n        if (isTokenProvider(provider)) {\n            var path = [token];\n            var tokenProvider = provider;\n            while (tokenProvider != null) {\n                var currentToken = tokenProvider.useToken;\n                if (path.includes(currentToken)) {\n                    throw new Error(\"Token registration cycle detected! \" + __spread(path, [currentToken]).join(\" -> \"));\n                }\n                path.push(currentToken);\n                var registration = this._registry.get(currentToken);\n                if (registration && isTokenProvider(registration.provider)) {\n                    tokenProvider = registration.provider;\n                }\n                else {\n                    tokenProvider = null;\n                }\n            }\n        }\n        if (options.lifecycle === Lifecycle.Singleton ||\n            options.lifecycle == Lifecycle.ContainerScoped ||\n            options.lifecycle == Lifecycle.ResolutionScoped) {\n            if (isValueProvider(provider) || isFactoryProvider(provider)) {\n                throw new Error(\"Cannot use lifecycle \\\"\" + Lifecycle[options.lifecycle] + \"\\\" with ValueProviders or FactoryProviders\");\n            }\n        }\n        this._registry.set(token, { provider: provider, options: options });\n        return this;\n    };\n    InternalDependencyContainer.prototype.registerType = function (from, to) {\n        this.ensureNotDisposed();\n        if (isNormalToken(to)) {\n            return this.register(from, {\n                useToken: to\n            });\n        }\n        return this.register(from, {\n            useClass: to\n        });\n    };\n    InternalDependencyContainer.prototype.registerInstance = function (token, instance) {\n        this.ensureNotDisposed();\n        return this.register(token, {\n            useValue: instance\n        });\n    };\n    InternalDependencyContainer.prototype.registerSingleton = function (from, to) {\n        this.ensureNotDisposed();\n        if (isNormalToken(from)) {\n            if (isNormalToken(to)) {\n                return this.register(from, {\n                    useToken: to\n                }, { lifecycle: Lifecycle.Singleton });\n            }\n            else if (to) {\n                return this.register(from, {\n                    useClass: to\n                }, { lifecycle: Lifecycle.Singleton });\n            }\n            throw new Error('Cannot register a type name as a singleton without a \"to\" token');\n        }\n        var useClass = from;\n        if (to && !isNormalToken(to)) {\n            useClass = to;\n        }\n        return this.register(from, {\n            useClass: useClass\n        }, { lifecycle: Lifecycle.Singleton });\n    };\n    InternalDependencyContainer.prototype.resolve = function (token, context, isOptional) {\n        if (context === void 0) { context = new ResolutionContext(); }\n        if (isOptional === void 0) { isOptional = false; }\n        this.ensureNotDisposed();\n        var registration = this.getRegistration(token);\n        if (!registration && isNormalToken(token)) {\n            if (isOptional) {\n                return undefined;\n            }\n            throw new Error(\"Attempted to resolve unregistered dependency token: \\\"\" + token.toString() + \"\\\"\");\n        }\n        this.executePreResolutionInterceptor(token, \"Single\");\n        if (registration) {\n            var result = this.resolveRegistration(registration, context);\n            this.executePostResolutionInterceptor(token, result, \"Single\");\n            return result;\n        }\n        if (isConstructorToken(token)) {\n            var result = this.construct(token, context);\n            this.executePostResolutionInterceptor(token, result, \"Single\");\n            return result;\n        }\n        throw new Error(\"Attempted to construct an undefined constructor. Could mean a circular dependency problem. Try using `delay` function.\");\n    };\n    InternalDependencyContainer.prototype.executePreResolutionInterceptor = function (token, resolutionType) {\n        var e_1, _a;\n        if (this.interceptors.preResolution.has(token)) {\n            var remainingInterceptors = [];\n            try {\n                for (var _b = __values(this.interceptors.preResolution.getAll(token)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var interceptor = _c.value;\n                    if (interceptor.options.frequency != \"Once\") {\n                        remainingInterceptors.push(interceptor);\n                    }\n                    interceptor.callback(token, resolutionType);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            this.interceptors.preResolution.setAll(token, remainingInterceptors);\n        }\n    };\n    InternalDependencyContainer.prototype.executePostResolutionInterceptor = function (token, result, resolutionType) {\n        var e_2, _a;\n        if (this.interceptors.postResolution.has(token)) {\n            var remainingInterceptors = [];\n            try {\n                for (var _b = __values(this.interceptors.postResolution.getAll(token)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var interceptor = _c.value;\n                    if (interceptor.options.frequency != \"Once\") {\n                        remainingInterceptors.push(interceptor);\n                    }\n                    interceptor.callback(token, result, resolutionType);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            this.interceptors.postResolution.setAll(token, remainingInterceptors);\n        }\n    };\n    InternalDependencyContainer.prototype.resolveRegistration = function (registration, context) {\n        this.ensureNotDisposed();\n        if (registration.options.lifecycle === Lifecycle.ResolutionScoped &&\n            context.scopedResolutions.has(registration)) {\n            return context.scopedResolutions.get(registration);\n        }\n        var isSingleton = registration.options.lifecycle === Lifecycle.Singleton;\n        var isContainerScoped = registration.options.lifecycle === Lifecycle.ContainerScoped;\n        var returnInstance = isSingleton || isContainerScoped;\n        var resolved;\n        if (isValueProvider(registration.provider)) {\n            resolved = registration.provider.useValue;\n        }\n        else if (isTokenProvider(registration.provider)) {\n            resolved = returnInstance\n                ? registration.instance ||\n                    (registration.instance = this.resolve(registration.provider.useToken, context))\n                : this.resolve(registration.provider.useToken, context);\n        }\n        else if (isClassProvider(registration.provider)) {\n            resolved = returnInstance\n                ? registration.instance ||\n                    (registration.instance = this.construct(registration.provider.useClass, context))\n                : this.construct(registration.provider.useClass, context);\n        }\n        else if (isFactoryProvider(registration.provider)) {\n            resolved = registration.provider.useFactory(this);\n        }\n        else {\n            resolved = this.construct(registration.provider, context);\n        }\n        if (registration.options.lifecycle === Lifecycle.ResolutionScoped) {\n            context.scopedResolutions.set(registration, resolved);\n        }\n        return resolved;\n    };\n    InternalDependencyContainer.prototype.resolveAll = function (token, context, isOptional) {\n        var _this = this;\n        if (context === void 0) { context = new ResolutionContext(); }\n        if (isOptional === void 0) { isOptional = false; }\n        this.ensureNotDisposed();\n        var registrations = this.getAllRegistrations(token);\n        if (!registrations && isNormalToken(token)) {\n            if (isOptional) {\n                return [];\n            }\n            throw new Error(\"Attempted to resolve unregistered dependency token: \\\"\" + token.toString() + \"\\\"\");\n        }\n        this.executePreResolutionInterceptor(token, \"All\");\n        if (registrations) {\n            var result_1 = registrations.map(function (item) {\n                return _this.resolveRegistration(item, context);\n            });\n            this.executePostResolutionInterceptor(token, result_1, \"All\");\n            return result_1;\n        }\n        var result = [this.construct(token, context)];\n        this.executePostResolutionInterceptor(token, result, \"All\");\n        return result;\n    };\n    InternalDependencyContainer.prototype.isRegistered = function (token, recursive) {\n        if (recursive === void 0) { recursive = false; }\n        this.ensureNotDisposed();\n        return (this._registry.has(token) ||\n            (recursive &&\n                (this.parent || false) &&\n                this.parent.isRegistered(token, true)));\n    };\n    InternalDependencyContainer.prototype.reset = function () {\n        this.ensureNotDisposed();\n        this._registry.clear();\n        this.interceptors.preResolution.clear();\n        this.interceptors.postResolution.clear();\n    };\n    InternalDependencyContainer.prototype.clearInstances = function () {\n        var e_3, _a;\n        this.ensureNotDisposed();\n        try {\n            for (var _b = __values(this._registry.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), token = _d[0], registrations = _d[1];\n                this._registry.setAll(token, registrations\n                    .filter(function (registration) { return !isValueProvider(registration.provider); })\n                    .map(function (registration) {\n                    registration.instance = undefined;\n                    return registration;\n                }));\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n    };\n    InternalDependencyContainer.prototype.createChildContainer = function () {\n        var e_4, _a;\n        this.ensureNotDisposed();\n        var childContainer = new InternalDependencyContainer(this);\n        try {\n            for (var _b = __values(this._registry.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), token = _d[0], registrations = _d[1];\n                if (registrations.some(function (_a) {\n                    var options = _a.options;\n                    return options.lifecycle === Lifecycle.ContainerScoped;\n                })) {\n                    childContainer._registry.setAll(token, registrations.map(function (registration) {\n                        if (registration.options.lifecycle === Lifecycle.ContainerScoped) {\n                            return {\n                                provider: registration.provider,\n                                options: registration.options\n                            };\n                        }\n                        return registration;\n                    }));\n                }\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n        return childContainer;\n    };\n    InternalDependencyContainer.prototype.beforeResolution = function (token, callback, options) {\n        if (options === void 0) { options = { frequency: \"Always\" }; }\n        this.interceptors.preResolution.set(token, {\n            callback: callback,\n            options: options\n        });\n    };\n    InternalDependencyContainer.prototype.afterResolution = function (token, callback, options) {\n        if (options === void 0) { options = { frequency: \"Always\" }; }\n        this.interceptors.postResolution.set(token, {\n            callback: callback,\n            options: options\n        });\n    };\n    InternalDependencyContainer.prototype.dispose = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var promises;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.disposed = true;\n                        promises = [];\n                        this.disposables.forEach(function (disposable) {\n                            var maybePromise = disposable.dispose();\n                            if (maybePromise) {\n                                promises.push(maybePromise);\n                            }\n                        });\n                        return [4, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2];\n                }\n            });\n        });\n    };\n    InternalDependencyContainer.prototype.getRegistration = function (token) {\n        if (this.isRegistered(token)) {\n            return this._registry.get(token);\n        }\n        if (this.parent) {\n            return this.parent.getRegistration(token);\n        }\n        return null;\n    };\n    InternalDependencyContainer.prototype.getAllRegistrations = function (token) {\n        if (this.isRegistered(token)) {\n            return this._registry.getAll(token);\n        }\n        if (this.parent) {\n            return this.parent.getAllRegistrations(token);\n        }\n        return null;\n    };\n    InternalDependencyContainer.prototype.construct = function (ctor, context) {\n        var _this = this;\n        if (ctor instanceof DelayedConstructor) {\n            return ctor.createProxy(function (target) {\n                return _this.resolve(target, context);\n            });\n        }\n        var instance = (function () {\n            var paramInfo = typeInfo.get(ctor);\n            if (!paramInfo || paramInfo.length === 0) {\n                if (ctor.length === 0) {\n                    return new ctor();\n                }\n                else {\n                    throw new Error(\"TypeInfo not known for \\\"\" + ctor.name + \"\\\"\");\n                }\n            }\n            var params = paramInfo.map(_this.resolveParams(context, ctor));\n            return new (ctor.bind.apply(ctor, __spread([void 0], params)))();\n        })();\n        if (isDisposable(instance)) {\n            this.disposables.add(instance);\n        }\n        return instance;\n    };\n    InternalDependencyContainer.prototype.resolveParams = function (context, ctor) {\n        var _this = this;\n        return function (param, idx) {\n            var _a, _b, _c;\n            try {\n                if (isTokenDescriptor(param)) {\n                    if (isTransformDescriptor(param)) {\n                        return param.multiple\n                            ? (_a = _this.resolve(param.transform)).transform.apply(_a, __spread([_this.resolveAll(param.token, new ResolutionContext(), param.isOptional)], param.transformArgs)) : (_b = _this.resolve(param.transform)).transform.apply(_b, __spread([_this.resolve(param.token, context, param.isOptional)], param.transformArgs));\n                    }\n                    else {\n                        return param.multiple\n                            ? _this.resolveAll(param.token, new ResolutionContext(), param.isOptional)\n                            : _this.resolve(param.token, context, param.isOptional);\n                    }\n                }\n                else if (isTransformDescriptor(param)) {\n                    return (_c = _this.resolve(param.transform, context)).transform.apply(_c, __spread([_this.resolve(param.token, context)], param.transformArgs));\n                }\n                return _this.resolve(param, context);\n            }\n            catch (e) {\n                throw new Error(formatErrorCtor(ctor, idx, e));\n            }\n        };\n    };\n    InternalDependencyContainer.prototype.ensureNotDisposed = function () {\n        if (this.disposed) {\n            throw new Error(\"This container has been disposed, you cannot interact with a disposed container\");\n        }\n    };\n    return InternalDependencyContainer;\n}());\nexport var instance = new InternalDependencyContainer();\nexport default instance;\n", "import { getParamInfo } from \"../reflection-helpers\";\nimport { typeInfo } from \"../dependency-container\";\nimport { instance as globalContainer } from \"../dependency-container\";\nfunction injectable(options) {\n    return function (target) {\n        typeInfo.set(target, getParamInfo(target));\n        if (options && options.token) {\n            if (!Array.isArray(options.token)) {\n                globalContainer.register(options.token, target);\n            }\n            else {\n                options.token.forEach(function (token) {\n                    globalContainer.register(token, target);\n                });\n            }\n        }\n    };\n}\nexport default injectable;\n", "if (typeof Reflect === \"undefined\" || !Reflect.getMetadata) {\n    throw new Error(\"tsyringe requires a reflect polyfill. Please add 'import \\\"reflect-metadata\\\"' to the top of your entry point.\");\n}\nexport { Lifecycle } from \"./types\";\nexport * from \"./decorators\";\nexport * from \"./factories\";\nexport * from \"./providers\";\nexport { delay } from \"./lazy-helpers\";\nexport { instance as container } from \"./dependency-container\";\n", "/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n", "/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n", "var PKCS12AttrSet_1;\nimport { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnArray, AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nexport class PKCS12Attribute {\n    constructor(params = {}) {\n        this.attrId = \"\";\n        this.attrValues = [];\n        Object.assign(params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], PKCS12Attribute.prototype, \"attrId\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Any, repeated: \"set\" })\n], PKCS12Attribute.prototype, \"attrValues\", void 0);\nlet PKCS12AttrSet = PKCS12AttrSet_1 = class PKCS12AttrSet extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, PKCS12AttrSet_1.prototype);\n    }\n};\nPKCS12AttrSet = PKCS12AttrSet_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: PKCS12Attribute })\n], PKCS12AttrSet);\nexport { PKCS12AttrSet };\n", "var AuthenticatedSafe_1;\nimport { __decorate } from \"tslib\";\nimport { AsnArray, AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { ContentInfo } from \"@peculiar/asn1-cms\";\nlet AuthenticatedSafe = AuthenticatedSafe_1 = class AuthenticatedSafe extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, AuthenticatedSafe_1.prototype);\n    }\n};\nAuthenticatedSafe = AuthenticatedSafe_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: ContentInfo })\n], AuthenticatedSafe);\nexport { AuthenticatedSafe };\n", "export const id_rsadsi = \"1.2.840.113549\";\nexport const id_pkcs = `${id_rsadsi}.1`;\nexport const id_pkcs_12 = `${id_pkcs}.12`;\nexport const id_pkcs_12PbeIds = `${id_pkcs_12}.1`;\nexport const id_pbeWithSHAAnd128BitRC4 = `${id_pkcs_12PbeIds}.1`;\nexport const id_pbeWithSHAAnd40BitRC4 = `${id_pkcs_12PbeIds}.2`;\nexport const id_pbeWithSHAAnd3_KeyTripleDES_CBC = `${id_pkcs_12PbeIds}.3`;\nexport const id_pbeWithSHAAnd2_KeyTripleDES_CBC = `${id_pkcs_12PbeIds}.4`;\nexport const id_pbeWithSHAAnd128BitRC2_CBC = `${id_pkcs_12PbeIds}.5`;\nexport const id_pbewithSHAAnd40BitRC2_CBC = `${id_pkcs_12PbeIds}.6`;\nexport const id_bagtypes = `${id_pkcs_12}.10.1`;\n", "import { id_bagtypes } from \"../object_identifiers\";\nexport const id_keyBag = `${id_bagtypes}.1`;\nexport const id_pkcs8ShroudedKeyBag = `${id_bagtypes}.2`;\nexport const id_certBag = `${id_bagtypes}.3`;\nexport const id_CRLBag = `${id_bagtypes}.4`;\nexport const id_SecretBag = `${id_bagtypes}.5`;\nexport const id_SafeContents = `${id_bagtypes}.6`;\nexport const id_pkcs_9 = \"1.2.840.113549.1.9\";\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport { id_pkcs_9 } from \"./types\";\nexport class CertBag {\n    constructor(params = {}) {\n        this.certId = \"\";\n        this.certValue = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], CertBag.prototype, \"certId\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Any, context: 0 })\n], CertBag.prototype, \"certValue\", void 0);\nexport const id_certTypes = `${id_pkcs_9}.22`;\nexport const id_x509Certificate = `${id_certTypes}.1`;\nexport const id_sdsiCertificate = `${id_certTypes}.2`;\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport { id_pkcs_9 } from \"./types\";\nexport class CRLBag {\n    constructor(params = {}) {\n        this.crlId = \"\";\n        this.crltValue = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], CRLBag.prototype, \"crlId\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Any, context: 0 })\n], CRLBag.prototype, \"crltValue\", void 0);\nexport const id_crlTypes = `${id_pkcs_9}.23`;\nexport const id_x509CRL = `${id_crlTypes}.1`;\n", "/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, OctetString } from \"@peculiar/asn1-schema\";\nimport { AlgorithmIdentifier } from \"@peculiar/asn1-x509\";\nexport class EncryptedData extends OctetString {\n}\nexport class EncryptedPrivateKeyInfo {\n    constructor(params = {}) {\n        this.encryptionAlgorithm = new AlgorithmIdentifier();\n        this.encryptedData = new EncryptedData();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AlgorithmIdentifier })\n], EncryptedPrivateKeyInfo.prototype, \"encryptionAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: EncryptedData })\n], EncryptedPrivateKeyInfo.prototype, \"encryptedData\", void 0);\n", "var Attributes_1;\nimport { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes, AsnArray, AsnType, AsnTypeTypes, OctetString, } from \"@peculiar/asn1-schema\";\nimport { AlgorithmIdentifier, Attribute } from \"@peculiar/asn1-x509\";\nexport var Version;\n(function (Version) {\n    Version[Version[\"v1\"] = 0] = \"v1\";\n})(Version || (Version = {}));\nexport class PrivateKey extends OctetString {\n}\nlet Attributes = Attributes_1 = class Attributes extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, Attributes_1.prototype);\n    }\n};\nAttributes = Attributes_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: Attribute })\n], Attributes);\nexport { Attributes };\nexport class PrivateKeyInfo {\n    constructor(params = {}) {\n        this.version = Version.v1;\n        this.privateKeyAlgorithm = new AlgorithmIdentifier();\n        this.privateKey = new PrivateKey();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer })\n], PrivateKeyInfo.prototype, \"version\", void 0);\n__decorate([\n    AsnProp({ type: AlgorithmIdentifier })\n], PrivateKeyInfo.prototype, \"privateKeyAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: PrivateKey })\n], PrivateKeyInfo.prototype, \"privateKey\", void 0);\n__decorate([\n    AsnProp({ type: Attributes, implicit: true, context: 0, optional: true })\n], PrivateKeyInfo.prototype, \"attributes\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { PrivateKeyInfo } from \"@peculiar/asn1-pkcs8\";\nimport { AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nlet KeyBag = class KeyBag extends PrivateKeyInfo {\n};\nKeyBag = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], KeyBag);\nexport { KeyBag };\n", "import { __decorate } from \"tslib\";\nimport { EncryptedPrivateKeyInfo } from \"@peculiar/asn1-pkcs8\";\nimport { AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nlet PKCS8ShroudedKeyBag = class PKCS8ShroudedKeyBag extends EncryptedPrivateKeyInfo {\n};\nPKCS8ShroudedKeyBag = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], PKCS8ShroudedKeyBag);\nexport { PKCS8ShroudedKeyBag };\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nexport class SecretBag {\n    constructor(params = {}) {\n        this.secretTypeId = \"\";\n        this.secretValue = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], SecretBag.prototype, \"secretTypeId\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Any, context: 0 })\n], SecretBag.prototype, \"secretValue\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { DigestInfo } from \"@peculiar/asn1-rsa\";\nimport { AsnProp, AsnPropTypes, OctetString } from \"@peculiar/asn1-schema\";\nexport class MacData {\n    constructor(params = {}) {\n        this.mac = new DigestInfo();\n        this.macSalt = new OctetString();\n        this.iterations = 1;\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: DigestInfo })\n], MacData.prototype, \"mac\", void 0);\n__decorate([\n    AsnProp({ type: OctetString })\n], MacData.prototype, \"macSalt\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer, defaultValue: 1 })\n], MacData.prototype, \"iterations\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport { ContentInfo } from \"@peculiar/asn1-cms\";\nimport { MacData } from \"./mac_data\";\nexport class PFX {\n    constructor(params = {}) {\n        this.version = 3;\n        this.authSafe = new ContentInfo();\n        this.macData = new MacData();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer })\n], PFX.prototype, \"version\", void 0);\n__decorate([\n    AsnProp({ type: ContentInfo })\n], PFX.prototype, \"authSafe\", void 0);\n__decorate([\n    AsnProp({ type: MacData, optional: true })\n], PFX.prototype, \"macData\", void 0);\n", "var SafeContents_1;\nimport { __decorate } from \"tslib\";\nimport { AsnArray, AsnType, AsnTypeTypes, AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport { PKCS12Attribute } from \"./attribute\";\nexport class SafeBag {\n    constructor(params = {}) {\n        this.bagId = \"\";\n        this.bagValue = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], SafeBag.prototype, \"bagId\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.Any, context: 0 })\n], SafeBag.prototype, \"bagValue\", void 0);\n__decorate([\n    AsnProp({ type: PKCS12Attribute, repeated: \"set\", optional: true })\n], SafeBag.prototype, \"bagAttributes\", void 0);\nlet SafeContents = SafeContents_1 = class SafeContents extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, SafeContents_1.prototype);\n    }\n};\nSafeContents = SafeContents_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: SafeBag })\n], SafeContents);\nexport { SafeContents };\n", "var ExtensionRequest_1, ExtendedCertificateAttributes_1, SMIMECapabilities_1;\nimport { __decorate } from \"tslib\";\nimport { AsnType, AsnTypeTypes, AsnPropTypes, AsnProp, OctetString, AsnArray, } from \"@peculiar/asn1-schema\";\nimport * as cms from \"@peculiar/asn1-cms\";\nimport * as pfx from \"@peculiar/asn1-pfx\";\nimport * as pkcs8 from \"@peculiar/asn1-pkcs8\";\nimport * as x509 from \"@peculiar/asn1-x509\";\nimport * as attr from \"@peculiar/asn1-x509-attr\";\nexport const id_pkcs9 = \"1.2.840.113549.1.9\";\nexport const id_pkcs9_mo = `${id_pkcs9}.0`;\nexport const id_pkcs9_oc = `${id_pkcs9}.24`;\nexport const id_pkcs9_at = `${id_pkcs9}.25`;\nexport const id_pkcs9_sx = `${id_pkcs9}.26`;\nexport const id_pkcs9_mr = `${id_pkcs9}.27`;\nexport const id_pkcs9_oc_pkcsEntity = `${id_pkcs9_oc}.1`;\nexport const id_pkcs9_oc_naturalPerson = `${id_pkcs9_oc}.2`;\nexport const id_pkcs9_at_emailAddress = `${id_pkcs9}.1`;\nexport const id_pkcs9_at_unstructuredName = `${id_pkcs9}.2`;\nexport const id_pkcs9_at_contentType = `${id_pkcs9}.3`;\nexport const id_pkcs9_at_messageDigest = `${id_pkcs9}.4`;\nexport const id_pkcs9_at_signingTime = `${id_pkcs9}.5`;\nexport const id_pkcs9_at_counterSignature = `${id_pkcs9}.6`;\nexport const id_pkcs9_at_challengePassword = `${id_pkcs9}.7`;\nexport const id_pkcs9_at_unstructuredAddress = `${id_pkcs9}.8`;\nexport const id_pkcs9_at_extendedCertificateAttributes = `${id_pkcs9}.9`;\nexport const id_pkcs9_at_signingDescription = `${id_pkcs9}.13`;\nexport const id_pkcs9_at_extensionRequest = `${id_pkcs9}.14`;\nexport const id_pkcs9_at_smimeCapabilities = `${id_pkcs9}.15`;\nexport const id_pkcs9_at_friendlyName = `${id_pkcs9}.20`;\nexport const id_pkcs9_at_localKeyId = `${id_pkcs9}.21`;\nexport const id_pkcs9_at_userPKCS12 = `2.16.840.1.113730.3.1.216`;\nexport const id_pkcs9_at_pkcs15Token = `${id_pkcs9_at}.1`;\nexport const id_pkcs9_at_encryptedPrivateKeyInfo = `${id_pkcs9_at}.2`;\nexport const id_pkcs9_at_randomNonce = `${id_pkcs9_at}.3`;\nexport const id_pkcs9_at_sequenceNumber = `${id_pkcs9_at}.4`;\nexport const id_pkcs9_at_pkcs7PDU = `${id_pkcs9_at}.5`;\nexport const id_ietf_at = `1.3.6.1.5.5.7.9`;\nexport const id_pkcs9_at_dateOfBirth = `${id_ietf_at}.1`;\nexport const id_pkcs9_at_placeOfBirth = `${id_ietf_at}.2`;\nexport const id_pkcs9_at_gender = `${id_ietf_at}.3`;\nexport const id_pkcs9_at_countryOfCitizenship = `${id_ietf_at}.4`;\nexport const id_pkcs9_at_countryOfResidence = `${id_ietf_at}.5`;\nexport const id_pkcs9_sx_pkcs9String = `${id_pkcs9_sx}.1`;\nexport const id_pkcs9_sx_signingTime = `${id_pkcs9_sx}.2`;\nexport const id_pkcs9_mr_caseIgnoreMatch = `${id_pkcs9_mr}.1`;\nexport const id_pkcs9_mr_signingTimeMatch = `${id_pkcs9_mr}.2`;\nexport const id_smime = `${id_pkcs9}.16`;\nexport const id_certTypes = `${id_pkcs9}.22`;\nexport const crlTypes = `${id_pkcs9}.23`;\nexport const id_at_pseudonym = `${attr.id_at}.65`;\nlet PKCS9String = class PKCS9String extends x509.DirectoryString {\n    constructor(params = {}) {\n        super(params);\n    }\n    toString() {\n        const o = {};\n        o.toString();\n        return this.ia5String || super.toString();\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.IA5String })\n], PKCS9String.prototype, \"ia5String\", void 0);\nPKCS9String = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], PKCS9String);\nexport { PKCS9String };\nlet Pkcs7PDU = class Pkcs7PDU extends cms.ContentInfo {\n};\nPkcs7PDU = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], Pkcs7PDU);\nexport { Pkcs7PDU };\nlet UserPKCS12 = class UserPKCS12 extends pfx.PFX {\n};\nUserPKCS12 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], UserPKCS12);\nexport { UserPKCS12 };\nlet EncryptedPrivateKeyInfo = class EncryptedPrivateKeyInfo extends pkcs8.EncryptedPrivateKeyInfo {\n};\nEncryptedPrivateKeyInfo = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], EncryptedPrivateKeyInfo);\nexport { EncryptedPrivateKeyInfo };\nlet EmailAddress = class EmailAddress {\n    constructor(value = \"\") {\n        this.value = value;\n    }\n    toString() {\n        return this.value;\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.IA5String })\n], EmailAddress.prototype, \"value\", void 0);\nEmailAddress = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], EmailAddress);\nexport { EmailAddress };\nlet UnstructuredName = class UnstructuredName extends PKCS9String {\n};\nUnstructuredName = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], UnstructuredName);\nexport { UnstructuredName };\nlet UnstructuredAddress = class UnstructuredAddress extends x509.DirectoryString {\n};\nUnstructuredAddress = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], UnstructuredAddress);\nexport { UnstructuredAddress };\nlet DateOfBirth = class DateOfBirth {\n    constructor(value = new Date()) {\n        this.value = value;\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.GeneralizedTime })\n], DateOfBirth.prototype, \"value\", void 0);\nDateOfBirth = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], DateOfBirth);\nexport { DateOfBirth };\nlet PlaceOfBirth = class PlaceOfBirth extends x509.DirectoryString {\n};\nPlaceOfBirth = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], PlaceOfBirth);\nexport { PlaceOfBirth };\nlet Gender = class Gender {\n    constructor(value = \"M\") {\n        this.value = value;\n    }\n    toString() {\n        return this.value;\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.PrintableString })\n], Gender.prototype, \"value\", void 0);\nGender = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], Gender);\nexport { Gender };\nlet CountryOfCitizenship = class CountryOfCitizenship {\n    constructor(value = \"\") {\n        this.value = value;\n    }\n    toString() {\n        return this.value;\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.PrintableString })\n], CountryOfCitizenship.prototype, \"value\", void 0);\nCountryOfCitizenship = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], CountryOfCitizenship);\nexport { CountryOfCitizenship };\nlet CountryOfResidence = class CountryOfResidence extends CountryOfCitizenship {\n};\nCountryOfResidence = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], CountryOfResidence);\nexport { CountryOfResidence };\nlet Pseudonym = class Pseudonym extends x509.DirectoryString {\n};\nPseudonym = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], Pseudonym);\nexport { Pseudonym };\nlet ContentType = class ContentType {\n    constructor(value = \"\") {\n        this.value = value;\n    }\n    toString() {\n        return this.value;\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\n], ContentType.prototype, \"value\", void 0);\nContentType = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], ContentType);\nexport { ContentType };\nexport class MessageDigest extends OctetString {\n}\nlet SigningTime = class SigningTime extends x509.Time {\n};\nSigningTime = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], SigningTime);\nexport { SigningTime };\nexport class RandomNonce extends OctetString {\n}\nlet SequenceNumber = class SequenceNumber {\n    constructor(value = 0) {\n        this.value = value;\n    }\n    toString() {\n        return this.value.toString();\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer })\n], SequenceNumber.prototype, \"value\", void 0);\nSequenceNumber = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], SequenceNumber);\nexport { SequenceNumber };\nlet CounterSignature = class CounterSignature extends cms.SignerInfo {\n};\nCounterSignature = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], CounterSignature);\nexport { CounterSignature };\nlet ChallengePassword = class ChallengePassword extends x509.DirectoryString {\n};\nChallengePassword = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], ChallengePassword);\nexport { ChallengePassword };\nlet ExtensionRequest = ExtensionRequest_1 = class ExtensionRequest extends x509.Extensions {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, ExtensionRequest_1.prototype);\n    }\n};\nExtensionRequest = ExtensionRequest_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], ExtensionRequest);\nexport { ExtensionRequest };\nlet ExtendedCertificateAttributes = ExtendedCertificateAttributes_1 = class ExtendedCertificateAttributes extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, ExtendedCertificateAttributes_1.prototype);\n    }\n};\nExtendedCertificateAttributes = ExtendedCertificateAttributes_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Set, itemType: cms.Attribute })\n], ExtendedCertificateAttributes);\nexport { ExtendedCertificateAttributes };\nlet FriendlyName = class FriendlyName {\n    constructor(value = \"\") {\n        this.value = value;\n    }\n    toString() {\n        return this.value;\n    }\n};\n__decorate([\n    AsnProp({ type: AsnPropTypes.BmpString })\n], FriendlyName.prototype, \"value\", void 0);\nFriendlyName = __decorate([\n    AsnType({ type: AsnTypeTypes.Choice })\n], FriendlyName);\nexport { FriendlyName };\nexport class LocalKeyId extends OctetString {\n}\nexport class SigningDescription extends x509.DirectoryString {\n}\nlet SMIMECapability = class SMIMECapability extends x509.AlgorithmIdentifier {\n};\nSMIMECapability = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence })\n], SMIMECapability);\nexport { SMIMECapability };\nlet SMIMECapabilities = SMIMECapabilities_1 = class SMIMECapabilities extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, SMIMECapabilities_1.prototype);\n    }\n};\nSMIMECapabilities = SMIMECapabilities_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: SMIMECapability })\n], SMIMECapabilities);\nexport { SMIMECapabilities };\n", "/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n", "var Attributes_1;\nimport { __decorate } from \"tslib\";\nimport { AsnArray, AsnType, AsnTypeTypes } from \"@peculiar/asn1-schema\";\nimport { Attribute } from \"@peculiar/asn1-x509\";\nlet Attributes = Attributes_1 = class Attributes extends AsnArray {\n    constructor(items) {\n        super(items);\n        Object.setPrototypeOf(this, Attributes_1.prototype);\n    }\n};\nAttributes = Attributes_1 = __decorate([\n    AsnType({ type: AsnTypeTypes.Sequence, itemType: Attribute })\n], Attributes);\nexport { Attributes };\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport { Name, SubjectPublicKeyInfo } from \"@peculiar/asn1-x509\";\nimport { Attributes } from \"./attributes\";\nexport class CertificationRequestInfo {\n    constructor(params = {}) {\n        this.version = 0;\n        this.subject = new Name();\n        this.subjectPKInfo = new SubjectPublicKeyInfo();\n        this.attributes = new Attributes();\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: AsnPropTypes.Integer })\n], CertificationRequestInfo.prototype, \"version\", void 0);\n__decorate([\n    AsnProp({ type: Name })\n], CertificationRequestInfo.prototype, \"subject\", void 0);\n__decorate([\n    AsnProp({ type: SubjectPublicKeyInfo })\n], CertificationRequestInfo.prototype, \"subjectPKInfo\", void 0);\n__decorate([\n    AsnProp({ type: Attributes, implicit: true, context: 0 })\n], CertificationRequestInfo.prototype, \"attributes\", void 0);\n", "import { __decorate } from \"tslib\";\nimport { AsnProp, AsnPropTypes } from \"@peculiar/asn1-schema\";\nimport { CertificationRequestInfo } from \"./certification_request_info\";\nimport { AlgorithmIdentifier } from \"@peculiar/asn1-x509\";\nexport class CertificationRequest {\n    constructor(params = {}) {\n        this.certificationRequestInfo = new CertificationRequestInfo();\n        this.signatureAlgorithm = new AlgorithmIdentifier();\n        this.signature = new ArrayBuffer(0);\n        Object.assign(this, params);\n    }\n}\n__decorate([\n    AsnProp({ type: CertificationRequestInfo })\n], CertificationRequest.prototype, \"certificationRequestInfo\", void 0);\n__decorate([\n    AsnProp({ type: AlgorithmIdentifier })\n], CertificationRequest.prototype, \"signatureAlgorithm\", void 0);\n__decorate([\n    AsnProp({ type: AsnPropTypes.BitString })\n], CertificationRequest.prototype, \"signature\", void 0);\n", "/*!\n * MIT License\n * \n * Copyright (c) Peculiar Ventures. All rights reserved.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n */\nimport 'reflect-metadata';\nimport { AsnConvert, OctetString, AsnUtf8StringConverter } from '@peculiar/asn1-schema';\nimport * as asn1X509 from '@peculiar/asn1-x509';\nimport { AlgorithmIdentifier, Extension as Extension$1, Name as Name$1, RelativeDistinguishedName, AttributeTypeAndValue, SubjectPublicKeyInfo, BasicConstraints, id_ce_basicConstraints, KeyUsage, id_ce_keyUsage, Attribute as Attribute$1, Version, Extensions, Certificate, RevokedCertificate, Time, id_ce_invalidityDate, InvalidityDate, id_ce_cRLReasons, CRLReason, CertificateList } from '@peculiar/asn1-x509';\nimport { BufferSourceConverter, isEqual, Convert, combine } from 'pvtsutils';\nimport * as asn1Cms from '@peculiar/asn1-cms';\nimport * as asn1Ecc from '@peculiar/asn1-ecc';\nimport { id_ecPublicKey, ECDSASigValue } from '@peculiar/asn1-ecc';\nimport * as asn1Rsa from '@peculiar/asn1-rsa';\nimport { id_RSASSA_PSS, id_rsaEncryption, RSAPublicKey, id_sha512, id_sha384, id_sha256, id_sha1 } from '@peculiar/asn1-rsa';\nimport { __decorate } from 'tslib';\nimport { container, injectable } from 'tsyringe';\nimport * as asnPkcs9 from '@peculiar/asn1-pkcs9';\nimport { id_pkcs9_at_extensionRequest } from '@peculiar/asn1-pkcs9';\nimport { CertificationRequest, CertificationRequestInfo } from '@peculiar/asn1-csr';\n\nconst diAlgorithm = \"crypto.algorithm\";\nclass AlgorithmProvider {\n    getAlgorithms() {\n        return container.resolveAll(diAlgorithm);\n    }\n    toAsnAlgorithm(alg) {\n        ({ ...alg });\n        for (const algorithm of this.getAlgorithms()) {\n            const res = algorithm.toAsnAlgorithm(alg);\n            if (res) {\n                return res;\n            }\n        }\n        if (/^[0-9.]+$/.test(alg.name)) {\n            const res = new AlgorithmIdentifier({\n                algorithm: alg.name,\n            });\n            if (\"parameters\" in alg) {\n                const unknown = alg;\n                res.parameters = unknown.parameters;\n            }\n            return res;\n        }\n        throw new Error(\"Cannot convert WebCrypto algorithm to ASN.1 algorithm\");\n    }\n    toWebAlgorithm(alg) {\n        for (const algorithm of this.getAlgorithms()) {\n            const res = algorithm.toWebAlgorithm(alg);\n            if (res) {\n                return res;\n            }\n        }\n        const unknown = {\n            name: alg.algorithm,\n            parameters: alg.parameters,\n        };\n        return unknown;\n    }\n}\nconst diAlgorithmProvider = \"crypto.algorithmProvider\";\ncontainer.registerSingleton(diAlgorithmProvider, AlgorithmProvider);\n\nvar EcAlgorithm_1;\nconst idVersionOne = \"1.3.36.3.3.2.8.1.1\";\nconst idBrainpoolP160r1 = `${idVersionOne}.1`;\nconst idBrainpoolP160t1 = `${idVersionOne}.2`;\nconst idBrainpoolP192r1 = `${idVersionOne}.3`;\nconst idBrainpoolP192t1 = `${idVersionOne}.4`;\nconst idBrainpoolP224r1 = `${idVersionOne}.5`;\nconst idBrainpoolP224t1 = `${idVersionOne}.6`;\nconst idBrainpoolP256r1 = `${idVersionOne}.7`;\nconst idBrainpoolP256t1 = `${idVersionOne}.8`;\nconst idBrainpoolP320r1 = `${idVersionOne}.9`;\nconst idBrainpoolP320t1 = `${idVersionOne}.10`;\nconst idBrainpoolP384r1 = `${idVersionOne}.11`;\nconst idBrainpoolP384t1 = `${idVersionOne}.12`;\nconst idBrainpoolP512r1 = `${idVersionOne}.13`;\nconst idBrainpoolP512t1 = `${idVersionOne}.14`;\nconst brainpoolP160r1 = \"brainpoolP160r1\";\nconst brainpoolP160t1 = \"brainpoolP160t1\";\nconst brainpoolP192r1 = \"brainpoolP192r1\";\nconst brainpoolP192t1 = \"brainpoolP192t1\";\nconst brainpoolP224r1 = \"brainpoolP224r1\";\nconst brainpoolP224t1 = \"brainpoolP224t1\";\nconst brainpoolP256r1 = \"brainpoolP256r1\";\nconst brainpoolP256t1 = \"brainpoolP256t1\";\nconst brainpoolP320r1 = \"brainpoolP320r1\";\nconst brainpoolP320t1 = \"brainpoolP320t1\";\nconst brainpoolP384r1 = \"brainpoolP384r1\";\nconst brainpoolP384t1 = \"brainpoolP384t1\";\nconst brainpoolP512r1 = \"brainpoolP512r1\";\nconst brainpoolP512t1 = \"brainpoolP512t1\";\nconst ECDSA = \"ECDSA\";\nlet EcAlgorithm = EcAlgorithm_1 = class EcAlgorithm {\n    toAsnAlgorithm(alg) {\n        switch (alg.name.toLowerCase()) {\n            case ECDSA.toLowerCase():\n                if (\"hash\" in alg) {\n                    const hash = typeof alg.hash === \"string\" ? alg.hash : alg.hash.name;\n                    switch (hash.toLowerCase()) {\n                        case \"sha-1\":\n                            return asn1Ecc.ecdsaWithSHA1;\n                        case \"sha-256\":\n                            return asn1Ecc.ecdsaWithSHA256;\n                        case \"sha-384\":\n                            return asn1Ecc.ecdsaWithSHA384;\n                        case \"sha-512\":\n                            return asn1Ecc.ecdsaWithSHA512;\n                    }\n                }\n                else if (\"namedCurve\" in alg) {\n                    let parameters = \"\";\n                    switch (alg.namedCurve) {\n                        case \"P-256\":\n                            parameters = asn1Ecc.id_secp256r1;\n                            break;\n                        case \"K-256\":\n                            parameters = EcAlgorithm_1.SECP256K1;\n                            break;\n                        case \"P-384\":\n                            parameters = asn1Ecc.id_secp384r1;\n                            break;\n                        case \"P-521\":\n                            parameters = asn1Ecc.id_secp521r1;\n                            break;\n                        case brainpoolP160r1:\n                            parameters = idBrainpoolP160r1;\n                            break;\n                        case brainpoolP160t1:\n                            parameters = idBrainpoolP160t1;\n                            break;\n                        case brainpoolP192r1:\n                            parameters = idBrainpoolP192r1;\n                            break;\n                        case brainpoolP192t1:\n                            parameters = idBrainpoolP192t1;\n                            break;\n                        case brainpoolP224r1:\n                            parameters = idBrainpoolP224r1;\n                            break;\n                        case brainpoolP224t1:\n                            parameters = idBrainpoolP224t1;\n                            break;\n                        case brainpoolP256r1:\n                            parameters = idBrainpoolP256r1;\n                            break;\n                        case brainpoolP256t1:\n                            parameters = idBrainpoolP256t1;\n                            break;\n                        case brainpoolP320r1:\n                            parameters = idBrainpoolP320r1;\n                            break;\n                        case brainpoolP320t1:\n                            parameters = idBrainpoolP320t1;\n                            break;\n                        case brainpoolP384r1:\n                            parameters = idBrainpoolP384r1;\n                            break;\n                        case brainpoolP384t1:\n                            parameters = idBrainpoolP384t1;\n                            break;\n                        case brainpoolP512r1:\n                            parameters = idBrainpoolP512r1;\n                            break;\n                        case brainpoolP512t1:\n                            parameters = idBrainpoolP512t1;\n                            break;\n                    }\n                    if (parameters) {\n                        return new AlgorithmIdentifier({\n                            algorithm: asn1Ecc.id_ecPublicKey,\n                            parameters: AsnConvert.serialize(new asn1Ecc.ECParameters({ namedCurve: parameters })),\n                        });\n                    }\n                }\n        }\n        return null;\n    }\n    toWebAlgorithm(alg) {\n        switch (alg.algorithm) {\n            case asn1Ecc.id_ecdsaWithSHA1:\n                return { name: ECDSA, hash: { name: \"SHA-1\" } };\n            case asn1Ecc.id_ecdsaWithSHA256:\n                return { name: ECDSA, hash: { name: \"SHA-256\" } };\n            case asn1Ecc.id_ecdsaWithSHA384:\n                return { name: ECDSA, hash: { name: \"SHA-384\" } };\n            case asn1Ecc.id_ecdsaWithSHA512:\n                return { name: ECDSA, hash: { name: \"SHA-512\" } };\n            case asn1Ecc.id_ecPublicKey: {\n                if (!alg.parameters) {\n                    throw new TypeError(\"Cannot get required parameters from EC algorithm\");\n                }\n                const parameters = AsnConvert.parse(alg.parameters, asn1Ecc.ECParameters);\n                switch (parameters.namedCurve) {\n                    case asn1Ecc.id_secp256r1:\n                        return { name: ECDSA, namedCurve: \"P-256\" };\n                    case EcAlgorithm_1.SECP256K1:\n                        return { name: ECDSA, namedCurve: \"K-256\" };\n                    case asn1Ecc.id_secp384r1:\n                        return { name: ECDSA, namedCurve: \"P-384\" };\n                    case asn1Ecc.id_secp521r1:\n                        return { name: ECDSA, namedCurve: \"P-521\" };\n                    case idBrainpoolP160r1:\n                        return { name: ECDSA, namedCurve: brainpoolP160r1 };\n                    case idBrainpoolP160t1:\n                        return { name: ECDSA, namedCurve: brainpoolP160t1 };\n                    case idBrainpoolP192r1:\n                        return { name: ECDSA, namedCurve: brainpoolP192r1 };\n                    case idBrainpoolP192t1:\n                        return { name: ECDSA, namedCurve: brainpoolP192t1 };\n                    case idBrainpoolP224r1:\n                        return { name: ECDSA, namedCurve: brainpoolP224r1 };\n                    case idBrainpoolP224t1:\n                        return { name: ECDSA, namedCurve: brainpoolP224t1 };\n                    case idBrainpoolP256r1:\n                        return { name: ECDSA, namedCurve: brainpoolP256r1 };\n                    case idBrainpoolP256t1:\n                        return { name: ECDSA, namedCurve: brainpoolP256t1 };\n                    case idBrainpoolP320r1:\n                        return { name: ECDSA, namedCurve: brainpoolP320r1 };\n                    case idBrainpoolP320t1:\n                        return { name: ECDSA, namedCurve: brainpoolP320t1 };\n                    case idBrainpoolP384r1:\n                        return { name: ECDSA, namedCurve: brainpoolP384r1 };\n                    case idBrainpoolP384t1:\n                        return { name: ECDSA, namedCurve: brainpoolP384t1 };\n                    case idBrainpoolP512r1:\n                        return { name: ECDSA, namedCurve: brainpoolP512r1 };\n                    case idBrainpoolP512t1:\n                        return { name: ECDSA, namedCurve: brainpoolP512t1 };\n                }\n            }\n        }\n        return null;\n    }\n};\nEcAlgorithm.SECP256K1 = \"1.3.132.0.10\";\nEcAlgorithm = EcAlgorithm_1 = __decorate([\n    injectable()\n], EcAlgorithm);\ncontainer.registerSingleton(diAlgorithm, EcAlgorithm);\n\nconst NAME = Symbol(\"name\");\nconst VALUE = Symbol(\"value\");\nclass TextObject {\n    constructor(name, items = {}, value = \"\") {\n        this[NAME] = name;\n        this[VALUE] = value;\n        for (const key in items) {\n            this[key] = items[key];\n        }\n    }\n}\nTextObject.NAME = NAME;\nTextObject.VALUE = VALUE;\nclass DefaultAlgorithmSerializer {\n    static toTextObject(alg) {\n        const obj = new TextObject(\"Algorithm Identifier\", {}, OidSerializer.toString(alg.algorithm));\n        if (alg.parameters) {\n            switch (alg.algorithm) {\n                case asn1Ecc.id_ecPublicKey: {\n                    const ecAlg = new EcAlgorithm().toWebAlgorithm(alg);\n                    if (ecAlg && \"namedCurve\" in ecAlg) {\n                        obj[\"Named Curve\"] = ecAlg.namedCurve;\n                    }\n                    else {\n                        obj[\"Parameters\"] = alg.parameters;\n                    }\n                    break;\n                }\n                default:\n                    obj[\"Parameters\"] = alg.parameters;\n            }\n        }\n        return obj;\n    }\n}\nclass OidSerializer {\n    static toString(oid) {\n        const name = this.items[oid];\n        if (name) {\n            return name;\n        }\n        return oid;\n    }\n}\nOidSerializer.items = {\n    [asn1Rsa.id_sha1]: \"sha1\",\n    [asn1Rsa.id_sha224]: \"sha224\",\n    [asn1Rsa.id_sha256]: \"sha256\",\n    [asn1Rsa.id_sha384]: \"sha384\",\n    [asn1Rsa.id_sha512]: \"sha512\",\n    [asn1Rsa.id_rsaEncryption]: \"rsaEncryption\",\n    [asn1Rsa.id_sha1WithRSAEncryption]: \"sha1WithRSAEncryption\",\n    [asn1Rsa.id_sha224WithRSAEncryption]: \"sha224WithRSAEncryption\",\n    [asn1Rsa.id_sha256WithRSAEncryption]: \"sha256WithRSAEncryption\",\n    [asn1Rsa.id_sha384WithRSAEncryption]: \"sha384WithRSAEncryption\",\n    [asn1Rsa.id_sha512WithRSAEncryption]: \"sha512WithRSAEncryption\",\n    [asn1Ecc.id_ecPublicKey]: \"ecPublicKey\",\n    [asn1Ecc.id_ecdsaWithSHA1]: \"ecdsaWithSHA1\",\n    [asn1Ecc.id_ecdsaWithSHA224]: \"ecdsaWithSHA224\",\n    [asn1Ecc.id_ecdsaWithSHA256]: \"ecdsaWithSHA256\",\n    [asn1Ecc.id_ecdsaWithSHA384]: \"ecdsaWithSHA384\",\n    [asn1Ecc.id_ecdsaWithSHA512]: \"ecdsaWithSHA512\",\n    [asn1X509.id_kp_serverAuth]: \"TLS WWW server authentication\",\n    [asn1X509.id_kp_clientAuth]: \"TLS WWW client authentication\",\n    [asn1X509.id_kp_codeSigning]: \"Code Signing\",\n    [asn1X509.id_kp_emailProtection]: \"E-mail Protection\",\n    [asn1X509.id_kp_timeStamping]: \"Time Stamping\",\n    [asn1X509.id_kp_OCSPSigning]: \"OCSP Signing\",\n    [asn1Cms.id_signedData]: \"Signed Data\",\n};\nclass TextConverter {\n    static serialize(obj) {\n        return this.serializeObj(obj).join(\"\\n\");\n    }\n    static pad(deep = 0) {\n        return \"\".padStart(2 * deep, \" \");\n    }\n    static serializeObj(obj, deep = 0) {\n        const res = [];\n        let pad = this.pad(deep++);\n        let value = \"\";\n        const objValue = obj[TextObject.VALUE];\n        if (objValue) {\n            value = ` ${objValue}`;\n        }\n        res.push(`${pad}${obj[TextObject.NAME]}:${value}`);\n        pad = this.pad(deep);\n        for (const key in obj) {\n            if (typeof key === \"symbol\") {\n                continue;\n            }\n            const value = obj[key];\n            const keyValue = key ? `${key}: ` : \"\";\n            if (typeof value === \"string\" ||\n                typeof value === \"number\" ||\n                typeof value === \"boolean\") {\n                res.push(`${pad}${keyValue}${value}`);\n            }\n            else if (value instanceof Date) {\n                res.push(`${pad}${keyValue}${value.toUTCString()}`);\n            }\n            else if (Array.isArray(value)) {\n                for (const obj of value) {\n                    obj[TextObject.NAME] = key;\n                    res.push(...this.serializeObj(obj, deep));\n                }\n            }\n            else if (value instanceof TextObject) {\n                value[TextObject.NAME] = key;\n                res.push(...this.serializeObj(value, deep));\n            }\n            else if (BufferSourceConverter.isBufferSource(value)) {\n                if (key) {\n                    res.push(`${pad}${keyValue}`);\n                    res.push(...this.serializeBufferSource(value, deep + 1));\n                }\n                else {\n                    res.push(...this.serializeBufferSource(value, deep));\n                }\n            }\n            else if (\"toTextObject\" in value) {\n                const obj = value.toTextObject();\n                obj[TextObject.NAME] = key;\n                res.push(...this.serializeObj(obj, deep));\n            }\n            else {\n                throw new TypeError(\"Cannot serialize data in text format. Unsupported type.\");\n            }\n        }\n        return res;\n    }\n    static serializeBufferSource(buffer, deep = 0) {\n        const pad = this.pad(deep);\n        const view = BufferSourceConverter.toUint8Array(buffer);\n        const res = [];\n        for (let i = 0; i < view.length;) {\n            const row = [];\n            for (let j = 0; j < 16 && i < view.length; j++) {\n                if (j === 8) {\n                    row.push(\"\");\n                }\n                const hex = view[i++].toString(16).padStart(2, \"0\");\n                row.push(hex);\n            }\n            res.push(`${pad}${row.join(\" \")}`);\n        }\n        return res;\n    }\n    static serializeAlgorithm(alg) {\n        return this.algorithmSerializer.toTextObject(alg);\n    }\n}\nTextConverter.oidSerializer = OidSerializer;\nTextConverter.algorithmSerializer = DefaultAlgorithmSerializer;\n\nclass AsnData {\n    constructor(...args) {\n        if (args.length === 1) {\n            const asn = args[0];\n            this.rawData = AsnConvert.serialize(asn);\n            this.onInit(asn);\n        }\n        else {\n            const asn = AsnConvert.parse(args[0], args[1]);\n            this.rawData = BufferSourceConverter.toArrayBuffer(args[0]);\n            this.onInit(asn);\n        }\n    }\n    equal(data) {\n        if (data instanceof AsnData) {\n            return isEqual(data.rawData, this.rawData);\n        }\n        return false;\n    }\n    toString(format = \"text\") {\n        switch (format) {\n            case \"asn\":\n                return AsnConvert.toString(this.rawData);\n            case \"text\":\n                return TextConverter.serialize(this.toTextObject());\n            case \"hex\":\n                return Convert.ToHex(this.rawData);\n            case \"base64\":\n                return Convert.ToBase64(this.rawData);\n            case \"base64url\":\n                return Convert.ToBase64Url(this.rawData);\n            default:\n                throw TypeError(\"Argument 'format' is unsupported value\");\n        }\n    }\n    getTextName() {\n        const constructor = this.constructor;\n        return constructor.NAME;\n    }\n    toTextObject() {\n        const obj = this.toTextObjectEmpty();\n        obj[\"\"] = this.rawData;\n        return obj;\n    }\n    toTextObjectEmpty(value) {\n        return new TextObject(this.getTextName(), {}, value);\n    }\n}\nAsnData.NAME = \"ASN\";\n\nclass Extension extends AsnData {\n    constructor(...args) {\n        let raw;\n        if (BufferSourceConverter.isBufferSource(args[0])) {\n            raw = BufferSourceConverter.toArrayBuffer(args[0]);\n        }\n        else {\n            raw = AsnConvert.serialize(new Extension$1({\n                extnID: args[0],\n                critical: args[1],\n                extnValue: new OctetString(BufferSourceConverter.toArrayBuffer(args[2])),\n            }));\n        }\n        super(raw, Extension$1);\n    }\n    onInit(asn) {\n        this.type = asn.extnID;\n        this.critical = asn.critical;\n        this.value = asn.extnValue.buffer;\n    }\n    toTextObject() {\n        const obj = this.toTextObjectWithoutValue();\n        obj[\"\"] = this.value;\n        return obj;\n    }\n    toTextObjectWithoutValue() {\n        const obj = this.toTextObjectEmpty(this.critical ? \"critical\" : undefined);\n        if (obj[TextObject.NAME] === Extension.NAME) {\n            obj[TextObject.NAME] = OidSerializer.toString(this.type);\n        }\n        return obj;\n    }\n}\n\nvar _a;\nclass CryptoProvider {\n    static isCryptoKeyPair(data) {\n        return data && data.privateKey && data.publicKey;\n    }\n    static isCryptoKey(data) {\n        return data && data.usages && data.type && data.algorithm && data.extractable !== undefined;\n    }\n    constructor() {\n        this.items = new Map();\n        this[_a] = \"CryptoProvider\";\n        if (typeof self !== \"undefined\" && typeof crypto !== \"undefined\") {\n            this.set(CryptoProvider.DEFAULT, crypto);\n        }\n        else if (typeof global !== \"undefined\" && global.crypto && global.crypto.subtle) {\n            this.set(CryptoProvider.DEFAULT, global.crypto);\n        }\n    }\n    clear() {\n        this.items.clear();\n    }\n    delete(key) {\n        return this.items.delete(key);\n    }\n    forEach(callbackfn, thisArg) {\n        return this.items.forEach(callbackfn, thisArg);\n    }\n    has(key) {\n        return this.items.has(key);\n    }\n    get size() {\n        return this.items.size;\n    }\n    entries() {\n        return this.items.entries();\n    }\n    keys() {\n        return this.items.keys();\n    }\n    values() {\n        return this.items.values();\n    }\n    [Symbol.iterator]() {\n        return this.items[Symbol.iterator]();\n    }\n    get(key = CryptoProvider.DEFAULT) {\n        const crypto = this.items.get(key.toLowerCase());\n        if (!crypto) {\n            throw new Error(`Cannot get Crypto by name '${key}'`);\n        }\n        return crypto;\n    }\n    set(key, value) {\n        if (typeof key === \"string\") {\n            if (!value) {\n                throw new TypeError(\"Argument 'value' is required\");\n            }\n            this.items.set(key.toLowerCase(), value);\n        }\n        else {\n            this.items.set(CryptoProvider.DEFAULT, key);\n        }\n        return this;\n    }\n}\n_a = Symbol.toStringTag;\nCryptoProvider.DEFAULT = \"default\";\nconst cryptoProvider = new CryptoProvider();\n\nconst OID_REGEX = /^[0-2](?:\\.[1-9][0-9]*)+$/;\nfunction isOID(id) {\n    return new RegExp(OID_REGEX).test(id);\n}\nclass NameIdentifier {\n    constructor(names = {}) {\n        this.items = {};\n        for (const id in names) {\n            this.register(id, names[id]);\n        }\n    }\n    get(idOrName) {\n        return this.items[idOrName] || null;\n    }\n    findId(idOrName) {\n        if (!isOID(idOrName)) {\n            return this.get(idOrName);\n        }\n        return idOrName;\n    }\n    register(id, name) {\n        this.items[id] = name;\n        this.items[name] = id;\n    }\n}\nconst names = new NameIdentifier();\nnames.register(\"CN\", \"2.5.4.3\");\nnames.register(\"L\", \"2.5.4.7\");\nnames.register(\"ST\", \"2.5.4.8\");\nnames.register(\"O\", \"2.5.4.10\");\nnames.register(\"OU\", \"2.5.4.11\");\nnames.register(\"C\", \"2.5.4.6\");\nnames.register(\"DC\", \"0.9.2342.19200300.100.1.25\");\nnames.register(\"E\", \"1.2.840.113549.1.9.1\");\nnames.register(\"G\", \"2.5.4.42\");\nnames.register(\"I\", \"2.5.4.43\");\nnames.register(\"SN\", \"2.5.4.4\");\nnames.register(\"T\", \"2.5.4.12\");\nfunction replaceUnknownCharacter(text, char) {\n    return `\\\\${Convert.ToHex(Convert.FromUtf8String(char)).toUpperCase()}`;\n}\nfunction escape(data) {\n    return data\n        .replace(/([,+\"\\\\<>;])/g, \"\\\\$1\")\n        .replace(/^([ #])/, \"\\\\$1\")\n        .replace(/([ ]$)/, \"\\\\$1\")\n        .replace(/([\\r\\n\\t])/, replaceUnknownCharacter);\n}\nclass Name {\n    static isASCII(text) {\n        for (let i = 0; i < text.length; i++) {\n            const code = text.charCodeAt(i);\n            if (code > 0xFF) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static isPrintableString(text) {\n        return /^[A-Za-z0-9 '()+,-./:=?]*$/g.test(text);\n    }\n    constructor(data, extraNames = {}) {\n        this.extraNames = new NameIdentifier();\n        this.asn = new Name$1();\n        for (const key in extraNames) {\n            if (Object.prototype.hasOwnProperty.call(extraNames, key)) {\n                const value = extraNames[key];\n                this.extraNames.register(key, value);\n            }\n        }\n        if (typeof data === \"string\") {\n            this.asn = this.fromString(data);\n        }\n        else if (data instanceof Name$1) {\n            this.asn = data;\n        }\n        else if (BufferSourceConverter.isBufferSource(data)) {\n            this.asn = AsnConvert.parse(data, Name$1);\n        }\n        else {\n            this.asn = this.fromJSON(data);\n        }\n    }\n    getField(idOrName) {\n        const id = this.extraNames.findId(idOrName) || names.findId(idOrName);\n        const res = [];\n        for (const name of this.asn) {\n            for (const rdn of name) {\n                if (rdn.type === id) {\n                    res.push(rdn.value.toString());\n                }\n            }\n        }\n        return res;\n    }\n    getName(idOrName) {\n        return this.extraNames.get(idOrName) || names.get(idOrName);\n    }\n    toString() {\n        return this.asn.map(rdn => rdn.map(o => {\n            const type = this.getName(o.type) || o.type;\n            const value = o.value.anyValue\n                ? `#${Convert.ToHex(o.value.anyValue)}`\n                : escape(o.value.toString());\n            return `${type}=${value}`;\n        })\n            .join(\"+\"))\n            .join(\", \");\n    }\n    toJSON() {\n        var _a;\n        const json = [];\n        for (const rdn of this.asn) {\n            const jsonItem = {};\n            for (const attr of rdn) {\n                const type = this.getName(attr.type) || attr.type;\n                (_a = jsonItem[type]) !== null && _a !== void 0 ? _a : (jsonItem[type] = []);\n                jsonItem[type].push(attr.value.anyValue ? `#${Convert.ToHex(attr.value.anyValue)}` : attr.value.toString());\n            }\n            json.push(jsonItem);\n        }\n        return json;\n    }\n    fromString(data) {\n        const asn = new Name$1();\n        const regex = /(\\d\\.[\\d.]*\\d|[A-Za-z]+)=((?:\"\")|(?:\".*?[^\\\\]\")|(?:[^,+\"\\\\](?=[,+]|$))|(?:[^,+].*?(?:[^\\\\][,+]))|(?:))([,+])?/g;\n        let matches = null;\n        let level = \",\";\n        while (matches = regex.exec(`${data},`)) {\n            let [, type, value] = matches;\n            const lastChar = value[value.length - 1];\n            if (lastChar === \",\" || lastChar === \"+\") {\n                value = value.slice(0, value.length - 1);\n                matches[3] = lastChar;\n            }\n            const next = matches[3];\n            type = this.getTypeOid(type);\n            const attr = this.createAttribute(type, value);\n            if (level === \"+\") {\n                asn[asn.length - 1].push(attr);\n            }\n            else {\n                asn.push(new RelativeDistinguishedName([attr]));\n            }\n            level = next;\n        }\n        return asn;\n    }\n    fromJSON(data) {\n        const asn = new Name$1();\n        for (const item of data) {\n            const asnRdn = new RelativeDistinguishedName();\n            for (const type in item) {\n                const typeId = this.getTypeOid(type);\n                const values = item[type];\n                for (const value of values) {\n                    const asnAttr = this.createAttribute(typeId, value);\n                    asnRdn.push(asnAttr);\n                }\n            }\n            asn.push(asnRdn);\n        }\n        return asn;\n    }\n    getTypeOid(type) {\n        if (!/[\\d.]+/.test(type)) {\n            type = this.getName(type) || \"\";\n        }\n        if (!type) {\n            throw new Error(`Cannot get OID for name type '${type}'`);\n        }\n        return type;\n    }\n    createAttribute(type, value) {\n        const attr = new AttributeTypeAndValue({ type });\n        if (typeof value === \"object\") {\n            for (const key in value) {\n                switch (key) {\n                    case \"ia5String\":\n                        attr.value.ia5String = value[key];\n                        break;\n                    case \"utf8String\":\n                        attr.value.utf8String = value[key];\n                        break;\n                    case \"universalString\":\n                        attr.value.universalString = value[key];\n                        break;\n                    case \"bmpString\":\n                        attr.value.bmpString = value[key];\n                        break;\n                    case \"printableString\":\n                        attr.value.printableString = value[key];\n                        break;\n                }\n            }\n        }\n        else if (value[0] === \"#\") {\n            attr.value.anyValue = Convert.FromHex(value.slice(1));\n        }\n        else {\n            const processedValue = this.processStringValue(value);\n            if (type === this.getName(\"E\") || type === this.getName(\"DC\")) {\n                attr.value.ia5String = processedValue;\n            }\n            else {\n                if (Name.isPrintableString(processedValue)) {\n                    attr.value.printableString = processedValue;\n                }\n                else {\n                    attr.value.utf8String = processedValue;\n                }\n            }\n        }\n        return attr;\n    }\n    processStringValue(value) {\n        const quotedMatches = /\"(.*?[^\\\\])?\"/.exec(value);\n        if (quotedMatches) {\n            value = quotedMatches[1];\n        }\n        return value\n            .replace(/\\\\0a/ig, \"\\n\")\n            .replace(/\\\\0d/ig, \"\\r\")\n            .replace(/\\\\0g/ig, \"\\t\")\n            .replace(/\\\\(.)/g, \"$1\");\n    }\n    toArrayBuffer() {\n        return AsnConvert.serialize(this.asn);\n    }\n    async getThumbprint(...args) {\n        var _a;\n        let crypto;\n        let algorithm = \"SHA-1\";\n        if (args.length >= 1 && !((_a = args[0]) === null || _a === void 0 ? void 0 : _a.subtle)) {\n            algorithm = args[0] || algorithm;\n            crypto = args[1] || cryptoProvider.get();\n        }\n        else {\n            crypto = args[0] || cryptoProvider.get();\n        }\n        return await crypto.subtle.digest(algorithm, this.toArrayBuffer());\n    }\n}\n\nconst ERR_GN_CONSTRUCTOR = \"Cannot initialize GeneralName from ASN.1 data.\";\nconst ERR_GN_STRING_FORMAT = `${ERR_GN_CONSTRUCTOR} Unsupported string format in use.`;\nconst ERR_GUID = `${ERR_GN_CONSTRUCTOR} Value doesn't match to GUID regular expression.`;\nconst GUID_REGEX = /^([0-9a-f]{8})-?([0-9a-f]{4})-?([0-9a-f]{4})-?([0-9a-f]{4})-?([0-9a-f]{12})$/i;\nconst id_GUID = \"1.3.6.1.4.1.311.25.1\";\nconst id_UPN = \"1.3.6.1.4.1.311.20.2.3\";\nconst DNS = \"dns\";\nconst DN = \"dn\";\nconst EMAIL = \"email\";\nconst IP = \"ip\";\nconst URL = \"url\";\nconst GUID = \"guid\";\nconst UPN = \"upn\";\nconst REGISTERED_ID = \"id\";\nclass GeneralName extends AsnData {\n    constructor(...args) {\n        let name;\n        if (args.length === 2) {\n            switch (args[0]) {\n                case DN: {\n                    const derName = new Name(args[1]).toArrayBuffer();\n                    const asnName = AsnConvert.parse(derName, asn1X509.Name);\n                    name = new asn1X509.GeneralName({ directoryName: asnName });\n                    break;\n                }\n                case DNS:\n                    name = new asn1X509.GeneralName({ dNSName: args[1] });\n                    break;\n                case EMAIL:\n                    name = new asn1X509.GeneralName({ rfc822Name: args[1] });\n                    break;\n                case GUID: {\n                    const matches = new RegExp(GUID_REGEX, \"i\").exec(args[1]);\n                    if (!matches) {\n                        throw new Error(\"Cannot parse GUID value. Value doesn't match to regular expression\");\n                    }\n                    const hex = matches\n                        .slice(1)\n                        .map((o, i) => {\n                        if (i < 3) {\n                            return Convert.ToHex(new Uint8Array(Convert.FromHex(o)).reverse());\n                        }\n                        return o;\n                    })\n                        .join(\"\");\n                    name = new asn1X509.GeneralName({\n                        otherName: new asn1X509.OtherName({\n                            typeId: id_GUID,\n                            value: AsnConvert.serialize(new OctetString(Convert.FromHex(hex))),\n                        }),\n                    });\n                    break;\n                }\n                case IP:\n                    name = new asn1X509.GeneralName({ iPAddress: args[1] });\n                    break;\n                case REGISTERED_ID:\n                    name = new asn1X509.GeneralName({ registeredID: args[1] });\n                    break;\n                case UPN: {\n                    name = new asn1X509.GeneralName({\n                        otherName: new asn1X509.OtherName({\n                            typeId: id_UPN,\n                            value: AsnConvert.serialize(AsnUtf8StringConverter.toASN(args[1])),\n                        })\n                    });\n                    break;\n                }\n                case URL:\n                    name = new asn1X509.GeneralName({ uniformResourceIdentifier: args[1] });\n                    break;\n                default:\n                    throw new Error(\"Cannot create GeneralName. Unsupported type of the name\");\n            }\n        }\n        else if (BufferSourceConverter.isBufferSource(args[0])) {\n            name = AsnConvert.parse(args[0], asn1X509.GeneralName);\n        }\n        else {\n            name = args[0];\n        }\n        super(name);\n    }\n    onInit(asn) {\n        if (asn.dNSName != undefined) {\n            this.type = DNS;\n            this.value = asn.dNSName;\n        }\n        else if (asn.rfc822Name != undefined) {\n            this.type = EMAIL;\n            this.value = asn.rfc822Name;\n        }\n        else if (asn.iPAddress != undefined) {\n            this.type = IP;\n            this.value = asn.iPAddress;\n        }\n        else if (asn.uniformResourceIdentifier != undefined) {\n            this.type = URL;\n            this.value = asn.uniformResourceIdentifier;\n        }\n        else if (asn.registeredID != undefined) {\n            this.type = REGISTERED_ID;\n            this.value = asn.registeredID;\n        }\n        else if (asn.directoryName != undefined) {\n            this.type = DN;\n            this.value = new Name(asn.directoryName).toString();\n        }\n        else if (asn.otherName != undefined) {\n            if (asn.otherName.typeId === id_GUID) {\n                this.type = GUID;\n                const guid = AsnConvert.parse(asn.otherName.value, OctetString);\n                const matches = new RegExp(GUID_REGEX, \"i\").exec(Convert.ToHex(guid));\n                if (!matches) {\n                    throw new Error(ERR_GUID);\n                }\n                this.value = matches\n                    .slice(1)\n                    .map((o, i) => {\n                    if (i < 3) {\n                        return Convert.ToHex(new Uint8Array(Convert.FromHex(o)).reverse());\n                    }\n                    return o;\n                })\n                    .join(\"-\");\n            }\n            else if (asn.otherName.typeId === id_UPN) {\n                this.type = UPN;\n                this.value = AsnConvert.parse(asn.otherName.value, asn1X509.DirectoryString).toString();\n            }\n            else {\n                throw new Error(ERR_GN_STRING_FORMAT);\n            }\n        }\n        else {\n            throw new Error(ERR_GN_STRING_FORMAT);\n        }\n    }\n    toJSON() {\n        return {\n            type: this.type,\n            value: this.value,\n        };\n    }\n    toTextObject() {\n        let type;\n        switch (this.type) {\n            case DN:\n            case DNS:\n            case GUID:\n            case IP:\n            case REGISTERED_ID:\n            case UPN:\n            case URL:\n                type = this.type.toUpperCase();\n                break;\n            case EMAIL:\n                type = \"Email\";\n                break;\n            default:\n                throw new Error(\"Unsupported GeneralName type\");\n        }\n        let value = this.value;\n        if (this.type === REGISTERED_ID) {\n            value = OidSerializer.toString(value);\n        }\n        return new TextObject(type, undefined, value);\n    }\n}\nclass GeneralNames extends AsnData {\n    constructor(params) {\n        let names;\n        if (params instanceof asn1X509.GeneralNames) {\n            names = params;\n        }\n        else if (Array.isArray(params)) {\n            const items = [];\n            for (const name of params) {\n                if (name instanceof asn1X509.GeneralName) {\n                    items.push(name);\n                }\n                else {\n                    const asnName = AsnConvert.parse(new GeneralName(name.type, name.value).rawData, asn1X509.GeneralName);\n                    items.push(asnName);\n                }\n            }\n            names = new asn1X509.GeneralNames(items);\n        }\n        else if (BufferSourceConverter.isBufferSource(params)) {\n            names = AsnConvert.parse(params, asn1X509.GeneralNames);\n        }\n        else {\n            throw new Error(\"Cannot initialize GeneralNames. Incorrect incoming arguments\");\n        }\n        super(names);\n    }\n    onInit(asn) {\n        const items = [];\n        for (const asnName of asn) {\n            let name = null;\n            try {\n                name = new GeneralName(asnName);\n            }\n            catch {\n                continue;\n            }\n            items.push(name);\n        }\n        this.items = items;\n    }\n    toJSON() {\n        return this.items.map(o => o.toJSON());\n    }\n    toTextObject() {\n        const res = super.toTextObjectEmpty();\n        for (const name of this.items) {\n            const nameObj = name.toTextObject();\n            let field = res[nameObj[TextObject.NAME]];\n            if (!Array.isArray(field)) {\n                field = [];\n                res[nameObj[TextObject.NAME]] = field;\n            }\n            field.push(nameObj);\n        }\n        return res;\n    }\n}\nGeneralNames.NAME = \"GeneralNames\";\n\nconst rPaddingTag = \"-{5}\";\nconst rEolChars = \"\\\\n\";\nconst rNameTag = `[^${rEolChars}]+`;\nconst rBeginTag = `${rPaddingTag}BEGIN (${rNameTag}(?=${rPaddingTag}))${rPaddingTag}`;\nconst rEndTag = `${rPaddingTag}END \\\\1${rPaddingTag}`;\nconst rEolGroup = \"\\\\n\";\nconst rHeaderKey = `[^:${rEolChars}]+`;\nconst rHeaderValue = `(?:[^${rEolChars}]+${rEolGroup}(?: +[^${rEolChars}]+${rEolGroup})*)`;\nconst rBase64Chars = \"[a-zA-Z0-9=+/]+\";\nconst rBase64 = `(?:${rBase64Chars}${rEolGroup})+`;\nconst rPem = `${rBeginTag}${rEolGroup}(?:((?:${rHeaderKey}: ${rHeaderValue})+))?${rEolGroup}?(${rBase64})${rEndTag}`;\nclass PemConverter {\n    static isPem(data) {\n        return typeof data === \"string\"\n            && new RegExp(rPem, \"g\").test(data.replace(/\\r/g, \"\"));\n    }\n    static decodeWithHeaders(pem) {\n        pem = pem.replace(/\\r/g, \"\");\n        const pattern = new RegExp(rPem, \"g\");\n        const res = [];\n        let matches = null;\n        while (matches = pattern.exec(pem)) {\n            const base64 = matches[3]\n                .replace(new RegExp(`[${rEolChars}]+`, \"g\"), \"\");\n            const pemStruct = {\n                type: matches[1],\n                headers: [],\n                rawData: Convert.FromBase64(base64),\n            };\n            const headersString = matches[2];\n            if (headersString) {\n                const headers = headersString.split(new RegExp(rEolGroup, \"g\"));\n                let lastHeader = null;\n                for (const header of headers) {\n                    const [key, value] = header.split(/:(.*)/);\n                    if (value === undefined) {\n                        if (!lastHeader) {\n                            throw new Error(\"Cannot parse PEM string. Incorrect header value\");\n                        }\n                        lastHeader.value += key.trim();\n                    }\n                    else {\n                        if (lastHeader) {\n                            pemStruct.headers.push(lastHeader);\n                        }\n                        lastHeader = { key, value: value.trim() };\n                    }\n                }\n                if (lastHeader) {\n                    pemStruct.headers.push(lastHeader);\n                }\n            }\n            res.push(pemStruct);\n        }\n        return res;\n    }\n    static decode(pem) {\n        const blocks = this.decodeWithHeaders(pem);\n        return blocks.map(o => o.rawData);\n    }\n    static decodeFirst(pem) {\n        const items = this.decode(pem);\n        if (!items.length) {\n            throw new RangeError(\"PEM string doesn't contain any objects\");\n        }\n        return items[0];\n    }\n    static encode(rawData, tag) {\n        if (Array.isArray(rawData)) {\n            const raws = new Array();\n            if (tag) {\n                rawData.forEach(element => {\n                    if (!BufferSourceConverter.isBufferSource(element)) {\n                        throw new TypeError(\"Cannot encode array of BufferSource in PEM format. Not all items of the array are BufferSource\");\n                    }\n                    raws.push(this.encodeStruct({\n                        type: tag,\n                        rawData: BufferSourceConverter.toArrayBuffer(element),\n                    }));\n                });\n            }\n            else {\n                rawData.forEach(element => {\n                    if (!(\"type\" in element)) {\n                        throw new TypeError(\"Cannot encode array of PemStruct in PEM format. Not all items of the array are PemStrut\");\n                    }\n                    raws.push(this.encodeStruct(element));\n                });\n            }\n            return raws.join(\"\\n\");\n        }\n        else {\n            if (!tag) {\n                throw new Error(\"Required argument 'tag' is missed\");\n            }\n            return this.encodeStruct({\n                type: tag,\n                rawData: BufferSourceConverter.toArrayBuffer(rawData),\n            });\n        }\n    }\n    static encodeStruct(pem) {\n        var _a;\n        const upperCaseType = pem.type.toLocaleUpperCase();\n        const res = [];\n        res.push(`-----BEGIN ${upperCaseType}-----`);\n        if ((_a = pem.headers) === null || _a === void 0 ? void 0 : _a.length) {\n            for (const header of pem.headers) {\n                res.push(`${header.key}: ${header.value}`);\n            }\n            res.push(\"\");\n        }\n        const base64 = Convert.ToBase64(pem.rawData);\n        let sliced;\n        let offset = 0;\n        const rows = Array();\n        while (offset < base64.length) {\n            if (base64.length - offset < 64) {\n                sliced = base64.substring(offset);\n            }\n            else {\n                sliced = base64.substring(offset, offset + 64);\n                offset += 64;\n            }\n            if (sliced.length !== 0) {\n                rows.push(sliced);\n                if (sliced.length < 64) {\n                    break;\n                }\n            }\n            else {\n                break;\n            }\n        }\n        res.push(...rows);\n        res.push(`-----END ${upperCaseType}-----`);\n        return res.join(\"\\n\");\n    }\n}\nPemConverter.CertificateTag = \"CERTIFICATE\";\nPemConverter.CrlTag = \"CRL\";\nPemConverter.CertificateRequestTag = \"CERTIFICATE REQUEST\";\nPemConverter.PublicKeyTag = \"PUBLIC KEY\";\nPemConverter.PrivateKeyTag = \"PRIVATE KEY\";\n\nclass PemData extends AsnData {\n    static isAsnEncoded(data) {\n        return BufferSourceConverter.isBufferSource(data) || typeof data === \"string\";\n    }\n    static toArrayBuffer(raw) {\n        if (typeof raw === \"string\") {\n            if (PemConverter.isPem(raw)) {\n                return PemConverter.decode(raw)[0];\n            }\n            else if (Convert.isHex(raw)) {\n                return Convert.FromHex(raw);\n            }\n            else if (Convert.isBase64(raw)) {\n                return Convert.FromBase64(raw);\n            }\n            else if (Convert.isBase64Url(raw)) {\n                return Convert.FromBase64Url(raw);\n            }\n            else {\n                throw new TypeError(\"Unsupported format of 'raw' argument. Must be one of DER, PEM, HEX, Base64, or Base4Url\");\n            }\n        }\n        else {\n            const stringRaw = Convert.ToBinary(raw);\n            if (PemConverter.isPem(stringRaw)) {\n                return PemConverter.decode(stringRaw)[0];\n            }\n            else if (Convert.isHex(stringRaw)) {\n                return Convert.FromHex(stringRaw);\n            }\n            else if (Convert.isBase64(stringRaw)) {\n                return Convert.FromBase64(stringRaw);\n            }\n            else if (Convert.isBase64Url(stringRaw)) {\n                return Convert.FromBase64Url(stringRaw);\n            }\n            return BufferSourceConverter.toArrayBuffer(raw);\n        }\n    }\n    constructor(...args) {\n        if (PemData.isAsnEncoded(args[0])) {\n            super(PemData.toArrayBuffer(args[0]), args[1]);\n        }\n        else {\n            super(args[0]);\n        }\n    }\n    toString(format = \"pem\") {\n        switch (format) {\n            case \"pem\":\n                return PemConverter.encode(this.rawData, this.tag);\n            default:\n                return super.toString(format);\n        }\n    }\n}\n\nclass PublicKey extends PemData {\n    static async create(data, crypto = cryptoProvider.get()) {\n        if (data instanceof PublicKey) {\n            return data;\n        }\n        else if (CryptoProvider.isCryptoKey(data)) {\n            if (data.type !== \"public\") {\n                throw new TypeError(\"Public key is required\");\n            }\n            const spki = await crypto.subtle.exportKey(\"spki\", data);\n            return new PublicKey(spki);\n        }\n        else if (data.publicKey) {\n            return data.publicKey;\n        }\n        else if (BufferSourceConverter.isBufferSource(data)) {\n            return new PublicKey(data);\n        }\n        else {\n            throw new TypeError(\"Unsupported PublicKeyType\");\n        }\n    }\n    constructor(param) {\n        if (PemData.isAsnEncoded(param)) {\n            super(param, SubjectPublicKeyInfo);\n        }\n        else {\n            super(param);\n        }\n        this.tag = PemConverter.PublicKeyTag;\n    }\n    async export(...args) {\n        let crypto;\n        let keyUsages = [\"verify\"];\n        let algorithm = { hash: \"SHA-256\", ...this.algorithm };\n        if (args.length > 1) {\n            algorithm = args[0] || algorithm;\n            keyUsages = args[1] || keyUsages;\n            crypto = args[2] || cryptoProvider.get();\n        }\n        else {\n            crypto = args[0] || cryptoProvider.get();\n        }\n        let raw = this.rawData;\n        const asnSpki = AsnConvert.parse(this.rawData, SubjectPublicKeyInfo);\n        if (asnSpki.algorithm.algorithm === id_RSASSA_PSS) {\n            raw = convertSpkiToRsaPkcs1(asnSpki, raw);\n        }\n        return crypto.subtle.importKey(\"spki\", raw, algorithm, true, keyUsages);\n    }\n    onInit(asn) {\n        const algProv = container.resolve(diAlgorithmProvider);\n        const algorithm = this.algorithm = algProv.toWebAlgorithm(asn.algorithm);\n        switch (asn.algorithm.algorithm) {\n            case id_rsaEncryption:\n                {\n                    const rsaPublicKey = AsnConvert.parse(asn.subjectPublicKey, RSAPublicKey);\n                    const modulus = BufferSourceConverter.toUint8Array(rsaPublicKey.modulus);\n                    algorithm.publicExponent = BufferSourceConverter.toUint8Array(rsaPublicKey.publicExponent);\n                    algorithm.modulusLength = (!modulus[0] ? modulus.slice(1) : modulus).byteLength << 3;\n                    break;\n                }\n        }\n    }\n    async getThumbprint(...args) {\n        var _a;\n        let crypto;\n        let algorithm = \"SHA-1\";\n        if (args.length >= 1 && !((_a = args[0]) === null || _a === void 0 ? void 0 : _a.subtle)) {\n            algorithm = args[0] || algorithm;\n            crypto = args[1] || cryptoProvider.get();\n        }\n        else {\n            crypto = args[0] || cryptoProvider.get();\n        }\n        return await crypto.subtle.digest(algorithm, this.rawData);\n    }\n    async getKeyIdentifier(...args) {\n        let crypto;\n        let algorithm = \"SHA-1\";\n        if (args.length === 1) {\n            if (typeof args[0] === \"string\") {\n                algorithm = args[0];\n                crypto = cryptoProvider.get();\n            }\n            else {\n                crypto = args[0];\n            }\n        }\n        else if (args.length === 2) {\n            algorithm = args[0];\n            crypto = args[1];\n        }\n        else {\n            crypto = cryptoProvider.get();\n        }\n        const asn = AsnConvert.parse(this.rawData, SubjectPublicKeyInfo);\n        return await crypto.subtle.digest(algorithm, asn.subjectPublicKey);\n    }\n    toTextObject() {\n        const obj = this.toTextObjectEmpty();\n        const asn = AsnConvert.parse(this.rawData, SubjectPublicKeyInfo);\n        obj[\"Algorithm\"] = TextConverter.serializeAlgorithm(asn.algorithm);\n        switch (asn.algorithm.algorithm) {\n            case id_ecPublicKey:\n                obj[\"EC Point\"] = asn.subjectPublicKey;\n                break;\n            case id_rsaEncryption:\n            default:\n                obj[\"Raw Data\"] = asn.subjectPublicKey;\n        }\n        return obj;\n    }\n}\nfunction convertSpkiToRsaPkcs1(asnSpki, raw) {\n    asnSpki.algorithm = new AlgorithmIdentifier({\n        algorithm: id_rsaEncryption,\n        parameters: null,\n    });\n    raw = AsnConvert.serialize(asnSpki);\n    return raw;\n}\n\nclass AuthorityKeyIdentifierExtension extends Extension {\n    static async create(param, critical = false, crypto = cryptoProvider.get()) {\n        if (\"name\" in param && \"serialNumber\" in param) {\n            return new AuthorityKeyIdentifierExtension(param, critical);\n        }\n        const key = await PublicKey.create(param, crypto);\n        const id = await key.getKeyIdentifier(crypto);\n        return new AuthorityKeyIdentifierExtension(Convert.ToHex(id), critical);\n    }\n    constructor(...args) {\n        if (BufferSourceConverter.isBufferSource(args[0])) {\n            super(args[0]);\n        }\n        else if (typeof args[0] === \"string\") {\n            const value = new asn1X509.AuthorityKeyIdentifier({ keyIdentifier: new asn1X509.KeyIdentifier(Convert.FromHex(args[0])) });\n            super(asn1X509.id_ce_authorityKeyIdentifier, args[1], AsnConvert.serialize(value));\n        }\n        else {\n            const certId = args[0];\n            const certIdName = certId.name instanceof GeneralNames\n                ? AsnConvert.parse(certId.name.rawData, asn1X509.GeneralNames)\n                : certId.name;\n            const value = new asn1X509.AuthorityKeyIdentifier({\n                authorityCertIssuer: certIdName,\n                authorityCertSerialNumber: Convert.FromHex(certId.serialNumber),\n            });\n            super(asn1X509.id_ce_authorityKeyIdentifier, args[1], AsnConvert.serialize(value));\n        }\n    }\n    onInit(asn) {\n        super.onInit(asn);\n        const aki = AsnConvert.parse(asn.extnValue, asn1X509.AuthorityKeyIdentifier);\n        if (aki.keyIdentifier) {\n            this.keyId = Convert.ToHex(aki.keyIdentifier);\n        }\n        if (aki.authorityCertIssuer || aki.authorityCertSerialNumber) {\n            this.certId = {\n                name: aki.authorityCertIssuer || [],\n                serialNumber: aki.authorityCertSerialNumber ? Convert.ToHex(aki.authorityCertSerialNumber) : \"\",\n            };\n        }\n    }\n    toTextObject() {\n        const obj = this.toTextObjectWithoutValue();\n        const asn = AsnConvert.parse(this.value, asn1X509.AuthorityKeyIdentifier);\n        if (asn.authorityCertIssuer) {\n            obj[\"Authority Issuer\"] = new GeneralNames(asn.authorityCertIssuer).toTextObject();\n        }\n        if (asn.authorityCertSerialNumber) {\n            obj[\"Authority Serial Number\"] = asn.authorityCertSerialNumber;\n        }\n        if (asn.keyIdentifier) {\n            obj[\"\"] = asn.keyIdentifier;\n        }\n        return obj;\n    }\n}\nAuthorityKeyIdentifierExtension.NAME = \"Authority Key Identifier\";\n\nclass BasicConstraintsExtension extends Extension {\n    constructor(...args) {\n        if (BufferSourceConverter.isBufferSource(args[0])) {\n            super(args[0]);\n            const value = AsnConvert.parse(this.value, BasicConstraints);\n            this.ca = value.cA;\n            this.pathLength = value.pathLenConstraint;\n        }\n        else {\n            const value = new BasicConstraints({\n                cA: args[0],\n                pathLenConstraint: args[1],\n            });\n            super(id_ce_basicConstraints, args[2], AsnConvert.serialize(value));\n            this.ca = args[0];\n            this.pathLength = args[1];\n        }\n    }\n    toTextObject() {\n        const obj = this.toTextObjectWithoutValue();\n        if (this.ca) {\n            obj[\"CA\"] = this.ca;\n        }\n        if (this.pathLength !== undefined) {\n            obj[\"Path Length\"] = this.pathLength;\n        }\n        return obj;\n    }\n}\nBasicConstraintsExtension.NAME = \"Basic Constraints\";\n\nvar ExtendedKeyUsage;\n(function (ExtendedKeyUsage) {\n    ExtendedKeyUsage[\"serverAuth\"] = \"1.3.6.1.5.5.7.3.1\";\n    ExtendedKeyUsage[\"clientAuth\"] = \"1.3.6.1.5.5.7.3.2\";\n    ExtendedKeyUsage[\"codeSigning\"] = \"1.3.6.1.5.5.7.3.3\";\n    ExtendedKeyUsage[\"emailProtection\"] = \"1.3.6.1.5.5.7.3.4\";\n    ExtendedKeyUsage[\"timeStamping\"] = \"1.3.6.1.5.5.7.3.8\";\n    ExtendedKeyUsage[\"ocspSigning\"] = \"1.3.6.1.5.5.7.3.9\";\n})(ExtendedKeyUsage || (ExtendedKeyUsage = {}));\nclass ExtendedKeyUsageExtension extends Extension {\n    constructor(...args) {\n        if (BufferSourceConverter.isBufferSource(args[0])) {\n            super(args[0]);\n            const value = AsnConvert.parse(this.value, asn1X509.ExtendedKeyUsage);\n            this.usages = value.map(o => o);\n        }\n        else {\n            const value = new asn1X509.ExtendedKeyUsage(args[0]);\n            super(asn1X509.id_ce_extKeyUsage, args[1], AsnConvert.serialize(value));\n            this.usages = args[0];\n        }\n    }\n    toTextObject() {\n        const obj = this.toTextObjectWithoutValue();\n        obj[\"\"] = this.usages.map(o => OidSerializer.toString(o)).join(\", \");\n        return obj;\n    }\n}\nExtendedKeyUsageExtension.NAME = \"Extended Key Usages\";\n\nvar KeyUsageFlags;\n(function (KeyUsageFlags) {\n    KeyUsageFlags[KeyUsageFlags[\"digitalSignature\"] = 1] = \"digitalSignature\";\n    KeyUsageFlags[KeyUsageFlags[\"nonRepudiation\"] = 2] = \"nonRepudiation\";\n    KeyUsageFlags[KeyUsageFlags[\"keyEncipherment\"] = 4] = \"keyEncipherment\";\n    KeyUsageFlags[KeyUsageFlags[\"dataEncipherment\"] = 8] = \"dataEncipherment\";\n    KeyUsageFlags[KeyUsageFlags[\"keyAgreement\"] = 16] = \"keyAgreement\";\n    KeyUsageFlags[KeyUsageFlags[\"keyCertSign\"] = 32] = \"keyCertSign\";\n    KeyUsageFlags[KeyUsageFlags[\"cRLSign\"] = 64] = \"cRLSign\";\n    KeyUsageFlags[KeyUsageFlags[\"encipherOnly\"] = 128] = \"encipherOnly\";\n    KeyUsageFlags[KeyUsageFlags[\"decipherOnly\"] = 256] = \"decipherOnly\";\n})(KeyUsageFlags || (KeyUsageFlags = {}));\nclass KeyUsagesExtension extends Extension {\n    constructor(...args) {\n        if (BufferSourceConverter.isBufferSource(args[0])) {\n            super(args[0]);\n            const value = AsnConvert.parse(this.value, KeyUsage);\n            this.usages = value.toNumber();\n        }\n        else {\n            const value = new KeyUsage(args[0]);\n            super(id_ce_keyUsage, args[1], AsnConvert.serialize(value));\n            this.usages = args[0];\n        }\n    }\n    toTextObject() {\n        const obj = this.toTextObjectWithoutValue();\n        const asn = AsnConvert.parse(this.value, KeyUsage);\n        obj[\"\"] = asn.toJSON().join(\", \");\n        return obj;\n    }\n}\nKeyUsagesExtension.NAME = \"Key Usages\";\n\nclass SubjectKeyIdentifierExtension extends Extension {\n    static async create(publicKey, critical = false, crypto = cryptoProvider.get()) {\n        const key = await PublicKey.create(publicKey, crypto);\n        const id = await key.getKeyIdentifier(crypto);\n        return new SubjectKeyIdentifierExtension(Convert.ToHex(id), critical);\n    }\n    constructor(...args) {\n        if (BufferSourceConverter.isBufferSource(args[0])) {\n            super(args[0]);\n            const value = AsnConvert.parse(this.value, asn1X509.SubjectKeyIdentifier);\n            this.keyId = Convert.ToHex(value);\n        }\n        else {\n            const identifier = typeof args[0] === \"string\"\n                ? Convert.FromHex(args[0])\n                : args[0];\n            const value = new asn1X509.SubjectKeyIdentifier(identifier);\n            super(asn1X509.id_ce_subjectKeyIdentifier, args[1], AsnConvert.serialize(value));\n            this.keyId = Convert.ToHex(identifier);\n        }\n    }\n    toTextObject() {\n        const obj = this.toTextObjectWithoutValue();\n        const asn = AsnConvert.parse(this.value, asn1X509.SubjectKeyIdentifier);\n        obj[\"\"] = asn;\n        return obj;\n    }\n}\nSubjectKeyIdentifierExtension.NAME = \"Subject Key Identifier\";\n\nclass SubjectAlternativeNameExtension extends Extension {\n    constructor(...args) {\n        if (BufferSourceConverter.isBufferSource(args[0])) {\n            super(args[0]);\n        }\n        else {\n            super(asn1X509.id_ce_subjectAltName, args[1], new GeneralNames(args[0] || []).rawData);\n        }\n    }\n    onInit(asn) {\n        super.onInit(asn);\n        const value = AsnConvert.parse(asn.extnValue, asn1X509.SubjectAlternativeName);\n        this.names = new GeneralNames(value);\n    }\n    toTextObject() {\n        const obj = this.toTextObjectWithoutValue();\n        const namesObj = this.names.toTextObject();\n        for (const key in namesObj) {\n            obj[key] = namesObj[key];\n        }\n        return obj;\n    }\n}\nSubjectAlternativeNameExtension.NAME = \"Subject Alternative Name\";\n\nclass ExtensionFactory {\n    static register(id, type) {\n        this.items.set(id, type);\n    }\n    static create(data) {\n        const extension = new Extension(data);\n        const Type = this.items.get(extension.type);\n        if (Type) {\n            return new Type(data);\n        }\n        return extension;\n    }\n}\nExtensionFactory.items = new Map();\n\nclass CertificatePolicyExtension extends Extension {\n    constructor(...args) {\n        var _a;\n        if (BufferSourceConverter.isBufferSource(args[0])) {\n            super(args[0]);\n            const asnPolicies = AsnConvert.parse(this.value, asn1X509.CertificatePolicies);\n            this.policies = asnPolicies.map(o => o.policyIdentifier);\n        }\n        else {\n            const policies = args[0];\n            const critical = (_a = args[1]) !== null && _a !== void 0 ? _a : false;\n            const value = new asn1X509.CertificatePolicies(policies.map(o => (new asn1X509.PolicyInformation({\n                policyIdentifier: o,\n            }))));\n            super(asn1X509.id_ce_certificatePolicies, critical, AsnConvert.serialize(value));\n            this.policies = policies;\n        }\n    }\n    toTextObject() {\n        const obj = this.toTextObjectWithoutValue();\n        obj[\"Policy\"] = this.policies.map(o => new TextObject(\"\", {}, OidSerializer.toString(o)));\n        return obj;\n    }\n}\nCertificatePolicyExtension.NAME = \"Certificate Policies\";\nExtensionFactory.register(asn1X509.id_ce_certificatePolicies, CertificatePolicyExtension);\n\nclass CRLDistributionPointsExtension extends Extension {\n    constructor(...args) {\n        var _a;\n        if (BufferSourceConverter.isBufferSource(args[0])) {\n            super(args[0]);\n        }\n        else if (Array.isArray(args[0]) && typeof args[0][0] === \"string\") {\n            const urls = args[0];\n            const dps = urls.map(url => {\n                return new asn1X509.DistributionPoint({\n                    distributionPoint: new asn1X509.DistributionPointName({\n                        fullName: [new asn1X509.GeneralName({ uniformResourceIdentifier: url })],\n                    }),\n                });\n            });\n            const value = new asn1X509.CRLDistributionPoints(dps);\n            super(asn1X509.id_ce_cRLDistributionPoints, args[1], AsnConvert.serialize(value));\n        }\n        else {\n            const value = new asn1X509.CRLDistributionPoints(args[0]);\n            super(asn1X509.id_ce_cRLDistributionPoints, args[1], AsnConvert.serialize(value));\n        }\n        (_a = this.distributionPoints) !== null && _a !== void 0 ? _a : (this.distributionPoints = []);\n    }\n    onInit(asn) {\n        super.onInit(asn);\n        const crlExt = AsnConvert.parse(asn.extnValue, asn1X509.CRLDistributionPoints);\n        this.distributionPoints = crlExt;\n    }\n    toTextObject() {\n        const obj = this.toTextObjectWithoutValue();\n        obj[\"Distribution Point\"] = this.distributionPoints.map(dp => {\n            var _a;\n            const dpObj = {};\n            if (dp.distributionPoint) {\n                dpObj[\"\"] = (_a = dp.distributionPoint.fullName) === null || _a === void 0 ? void 0 : _a.map(name => new GeneralName(name).toString()).join(\", \");\n            }\n            if (dp.reasons) {\n                dpObj[\"Reasons\"] = dp.reasons.toString();\n            }\n            if (dp.cRLIssuer) {\n                dpObj[\"CRL Issuer\"] = dp.cRLIssuer.map(issuer => issuer.toString()).join(\", \");\n            }\n            return dpObj;\n        });\n        return obj;\n    }\n}\nCRLDistributionPointsExtension.NAME = \"CRL Distribution Points\";\n\nclass AuthorityInfoAccessExtension extends Extension {\n    constructor(...args) {\n        var _a, _b, _c, _d;\n        if (BufferSourceConverter.isBufferSource(args[0])) {\n            super(args[0]);\n        }\n        else if (args[0] instanceof asn1X509.AuthorityInfoAccessSyntax) {\n            const value = new asn1X509.AuthorityInfoAccessSyntax(args[0]);\n            super(asn1X509.id_pe_authorityInfoAccess, args[1], AsnConvert.serialize(value));\n        }\n        else {\n            const params = args[0];\n            const value = new asn1X509.AuthorityInfoAccessSyntax();\n            addAccessDescriptions(value, params, asn1X509.id_ad_ocsp, \"ocsp\");\n            addAccessDescriptions(value, params, asn1X509.id_ad_caIssuers, \"caIssuers\");\n            addAccessDescriptions(value, params, asn1X509.id_ad_timeStamping, \"timeStamping\");\n            addAccessDescriptions(value, params, asn1X509.id_ad_caRepository, \"caRepository\");\n            super(asn1X509.id_pe_authorityInfoAccess, args[1], AsnConvert.serialize(value));\n        }\n        (_a = this.ocsp) !== null && _a !== void 0 ? _a : (this.ocsp = []);\n        (_b = this.caIssuers) !== null && _b !== void 0 ? _b : (this.caIssuers = []);\n        (_c = this.timeStamping) !== null && _c !== void 0 ? _c : (this.timeStamping = []);\n        (_d = this.caRepository) !== null && _d !== void 0 ? _d : (this.caRepository = []);\n    }\n    onInit(asn) {\n        super.onInit(asn);\n        this.ocsp = [];\n        this.caIssuers = [];\n        this.timeStamping = [];\n        this.caRepository = [];\n        const aia = AsnConvert.parse(asn.extnValue, asn1X509.AuthorityInfoAccessSyntax);\n        aia.forEach(accessDescription => {\n            switch (accessDescription.accessMethod) {\n                case asn1X509.id_ad_ocsp:\n                    this.ocsp.push(new GeneralName(accessDescription.accessLocation));\n                    break;\n                case asn1X509.id_ad_caIssuers:\n                    this.caIssuers.push(new GeneralName(accessDescription.accessLocation));\n                    break;\n                case asn1X509.id_ad_timeStamping:\n                    this.timeStamping.push(new GeneralName(accessDescription.accessLocation));\n                    break;\n                case asn1X509.id_ad_caRepository:\n                    this.caRepository.push(new GeneralName(accessDescription.accessLocation));\n                    break;\n            }\n        });\n    }\n    toTextObject() {\n        const obj = this.toTextObjectWithoutValue();\n        if (this.ocsp.length) {\n            addUrlsToObject(obj, \"OCSP\", this.ocsp);\n        }\n        if (this.caIssuers.length) {\n            addUrlsToObject(obj, \"CA Issuers\", this.caIssuers);\n        }\n        if (this.timeStamping.length) {\n            addUrlsToObject(obj, \"Time Stamping\", this.timeStamping);\n        }\n        if (this.caRepository.length) {\n            addUrlsToObject(obj, \"CA Repository\", this.caRepository);\n        }\n        return obj;\n    }\n}\nAuthorityInfoAccessExtension.NAME = \"Authority Info Access\";\nfunction addUrlsToObject(obj, key, urls) {\n    if (urls.length === 1) {\n        obj[key] = urls[0].toTextObject();\n    }\n    else {\n        const names = new TextObject(\"\");\n        urls.forEach((name, index) => {\n            const nameObj = name.toTextObject();\n            const indexedKey = `${nameObj[TextObject.NAME]} ${index + 1}`;\n            let field = names[indexedKey];\n            if (!Array.isArray(field)) {\n                field = [];\n                names[indexedKey] = field;\n            }\n            field.push(nameObj);\n        });\n        obj[key] = names;\n    }\n}\nfunction addAccessDescriptions(value, params, method, key) {\n    const items = params[key];\n    if (items) {\n        const array = Array.isArray(items) ? items : [items];\n        array.forEach(url => {\n            if (typeof url === \"string\") {\n                url = new GeneralName(\"url\", url);\n            }\n            value.push(new asn1X509.AccessDescription({\n                accessMethod: method,\n                accessLocation: AsnConvert.parse(url.rawData, asn1X509.GeneralName),\n            }));\n        });\n    }\n}\n\nclass IssuerAlternativeNameExtension extends Extension {\n    constructor(...args) {\n        if (BufferSourceConverter.isBufferSource(args[0])) {\n            super(args[0]);\n        }\n        else {\n            super(asn1X509.id_ce_issuerAltName, args[1], new GeneralNames(args[0] || []).rawData);\n        }\n    }\n    onInit(asn) {\n        super.onInit(asn);\n        const value = AsnConvert.parse(asn.extnValue, asn1X509.GeneralNames);\n        this.names = new GeneralNames(value);\n    }\n    toTextObject() {\n        const obj = this.toTextObjectWithoutValue();\n        const namesObj = this.names.toTextObject();\n        for (const key in namesObj) {\n            obj[key] = namesObj[key];\n        }\n        return obj;\n    }\n}\nIssuerAlternativeNameExtension.NAME = \"Issuer Alternative Name\";\n\nclass Attribute extends AsnData {\n    constructor(...args) {\n        let raw;\n        if (BufferSourceConverter.isBufferSource(args[0])) {\n            raw = BufferSourceConverter.toArrayBuffer(args[0]);\n        }\n        else {\n            const type = args[0];\n            const values = Array.isArray(args[1]) ? args[1].map(o => BufferSourceConverter.toArrayBuffer(o)) : [];\n            raw = AsnConvert.serialize(new Attribute$1({ type, values }));\n        }\n        super(raw, Attribute$1);\n    }\n    onInit(asn) {\n        this.type = asn.type;\n        this.values = asn.values;\n    }\n    toTextObject() {\n        const obj = this.toTextObjectWithoutValue();\n        obj[\"Value\"] = this.values.map(o => new TextObject(\"\", { \"\": o }));\n        return obj;\n    }\n    toTextObjectWithoutValue() {\n        const obj = this.toTextObjectEmpty();\n        if (obj[TextObject.NAME] === Attribute.NAME) {\n            obj[TextObject.NAME] = OidSerializer.toString(this.type);\n        }\n        return obj;\n    }\n}\nAttribute.NAME = \"Attribute\";\n\nclass ChallengePasswordAttribute extends Attribute {\n    constructor(...args) {\n        var _a;\n        if (BufferSourceConverter.isBufferSource(args[0])) {\n            super(args[0]);\n        }\n        else {\n            const value = new asnPkcs9.ChallengePassword({\n                printableString: args[0],\n            });\n            super(asnPkcs9.id_pkcs9_at_challengePassword, [AsnConvert.serialize(value)]);\n        }\n        (_a = this.password) !== null && _a !== void 0 ? _a : (this.password = \"\");\n    }\n    onInit(asn) {\n        super.onInit(asn);\n        if (this.values[0]) {\n            const value = AsnConvert.parse(this.values[0], asnPkcs9.ChallengePassword);\n            this.password = value.toString();\n        }\n    }\n    toTextObject() {\n        const obj = this.toTextObjectWithoutValue();\n        obj[TextObject.VALUE] = this.password;\n        return obj;\n    }\n}\nChallengePasswordAttribute.NAME = \"Challenge Password\";\n\nclass ExtensionsAttribute extends Attribute {\n    constructor(...args) {\n        var _a;\n        if (BufferSourceConverter.isBufferSource(args[0])) {\n            super(args[0]);\n        }\n        else {\n            const extensions = args[0];\n            const value = new asn1X509.Extensions();\n            for (const extension of extensions) {\n                value.push(AsnConvert.parse(extension.rawData, asn1X509.Extension));\n            }\n            super(asnPkcs9.id_pkcs9_at_extensionRequest, [AsnConvert.serialize(value)]);\n        }\n        (_a = this.items) !== null && _a !== void 0 ? _a : (this.items = []);\n    }\n    onInit(asn) {\n        super.onInit(asn);\n        if (this.values[0]) {\n            const value = AsnConvert.parse(this.values[0], asn1X509.Extensions);\n            this.items = value.map(o => ExtensionFactory.create(AsnConvert.serialize(o)));\n        }\n    }\n    toTextObject() {\n        const obj = this.toTextObjectWithoutValue();\n        const extensions = this.items.map(o => o.toTextObject());\n        for (const extension of extensions) {\n            obj[extension[TextObject.NAME]] = extension;\n        }\n        return obj;\n    }\n}\nExtensionsAttribute.NAME = \"Extensions\";\n\nclass AttributeFactory {\n    static register(id, type) {\n        this.items.set(id, type);\n    }\n    static create(data) {\n        const attribute = new Attribute(data);\n        const Type = this.items.get(attribute.type);\n        if (Type) {\n            return new Type(data);\n        }\n        return attribute;\n    }\n}\nAttributeFactory.items = new Map();\n\nconst diAsnSignatureFormatter = \"crypto.signatureFormatter\";\nclass AsnDefaultSignatureFormatter {\n    toAsnSignature(algorithm, signature) {\n        return BufferSourceConverter.toArrayBuffer(signature);\n    }\n    toWebSignature(algorithm, signature) {\n        return BufferSourceConverter.toArrayBuffer(signature);\n    }\n}\n\nvar RsaAlgorithm_1;\nlet RsaAlgorithm = RsaAlgorithm_1 = class RsaAlgorithm {\n    static createPssParams(hash, saltLength) {\n        const hashAlgorithm = RsaAlgorithm_1.getHashAlgorithm(hash);\n        if (!hashAlgorithm) {\n            return null;\n        }\n        return new asn1Rsa.RsaSaPssParams({\n            hashAlgorithm,\n            maskGenAlgorithm: new AlgorithmIdentifier({\n                algorithm: asn1Rsa.id_mgf1,\n                parameters: AsnConvert.serialize(hashAlgorithm),\n            }),\n            saltLength,\n        });\n    }\n    static getHashAlgorithm(alg) {\n        const algProv = container.resolve(diAlgorithmProvider);\n        if (typeof alg === \"string\") {\n            return algProv.toAsnAlgorithm({ name: alg });\n        }\n        if (typeof alg === \"object\" && alg && \"name\" in alg) {\n            return algProv.toAsnAlgorithm(alg);\n        }\n        return null;\n    }\n    toAsnAlgorithm(alg) {\n        switch (alg.name.toLowerCase()) {\n            case \"rsassa-pkcs1-v1_5\":\n                if (\"hash\" in alg) {\n                    let hash;\n                    if (typeof alg.hash === \"string\") {\n                        hash = alg.hash;\n                    }\n                    else if (alg.hash && typeof alg.hash === \"object\"\n                        && \"name\" in alg.hash && typeof alg.hash.name === \"string\") {\n                        hash = alg.hash.name.toUpperCase();\n                    }\n                    else {\n                        throw new Error(\"Cannot get hash algorithm name\");\n                    }\n                    switch (hash.toLowerCase()) {\n                        case \"sha-1\":\n                            return new AlgorithmIdentifier({ algorithm: asn1Rsa.id_sha1WithRSAEncryption, parameters: null });\n                        case \"sha-256\":\n                            return new AlgorithmIdentifier({ algorithm: asn1Rsa.id_sha256WithRSAEncryption, parameters: null });\n                        case \"sha-384\":\n                            return new AlgorithmIdentifier({ algorithm: asn1Rsa.id_sha384WithRSAEncryption, parameters: null });\n                        case \"sha-512\":\n                            return new AlgorithmIdentifier({ algorithm: asn1Rsa.id_sha512WithRSAEncryption, parameters: null });\n                    }\n                }\n                else {\n                    return new AlgorithmIdentifier({ algorithm: asn1Rsa.id_rsaEncryption, parameters: null });\n                }\n                break;\n            case \"rsa-pss\":\n                if (\"hash\" in alg) {\n                    if (!(\"saltLength\" in alg && typeof alg.saltLength === \"number\")) {\n                        throw new Error(\"Cannot get 'saltLength' from 'alg' argument\");\n                    }\n                    const pssParams = RsaAlgorithm_1.createPssParams(alg.hash, alg.saltLength);\n                    if (!pssParams) {\n                        throw new Error(\"Cannot create PSS parameters\");\n                    }\n                    return new AlgorithmIdentifier({ algorithm: asn1Rsa.id_RSASSA_PSS, parameters: AsnConvert.serialize(pssParams) });\n                }\n                else {\n                    return new AlgorithmIdentifier({ algorithm: asn1Rsa.id_RSASSA_PSS, parameters: null });\n                }\n        }\n        return null;\n    }\n    toWebAlgorithm(alg) {\n        switch (alg.algorithm) {\n            case asn1Rsa.id_rsaEncryption:\n                return { name: \"RSASSA-PKCS1-v1_5\" };\n            case asn1Rsa.id_sha1WithRSAEncryption:\n                return { name: \"RSASSA-PKCS1-v1_5\", hash: { name: \"SHA-1\" } };\n            case asn1Rsa.id_sha256WithRSAEncryption:\n                return { name: \"RSASSA-PKCS1-v1_5\", hash: { name: \"SHA-256\" } };\n            case asn1Rsa.id_sha384WithRSAEncryption:\n                return { name: \"RSASSA-PKCS1-v1_5\", hash: { name: \"SHA-384\" } };\n            case asn1Rsa.id_sha512WithRSAEncryption:\n                return { name: \"RSASSA-PKCS1-v1_5\", hash: { name: \"SHA-512\" } };\n            case asn1Rsa.id_RSASSA_PSS:\n                if (alg.parameters) {\n                    const pssParams = AsnConvert.parse(alg.parameters, asn1Rsa.RsaSaPssParams);\n                    const algProv = container.resolve(diAlgorithmProvider);\n                    const hashAlg = algProv.toWebAlgorithm(pssParams.hashAlgorithm);\n                    return {\n                        name: \"RSA-PSS\",\n                        hash: hashAlg,\n                        saltLength: pssParams.saltLength,\n                    };\n                }\n                else {\n                    return { name: \"RSA-PSS\" };\n                }\n        }\n        return null;\n    }\n};\nRsaAlgorithm = RsaAlgorithm_1 = __decorate([\n    injectable()\n], RsaAlgorithm);\ncontainer.registerSingleton(diAlgorithm, RsaAlgorithm);\n\nlet ShaAlgorithm = class ShaAlgorithm {\n    toAsnAlgorithm(alg) {\n        switch (alg.name.toLowerCase()) {\n            case \"sha-1\":\n                return new AlgorithmIdentifier({ algorithm: id_sha1 });\n            case \"sha-256\":\n                return new AlgorithmIdentifier({ algorithm: id_sha256 });\n            case \"sha-384\":\n                return new AlgorithmIdentifier({ algorithm: id_sha384 });\n            case \"sha-512\":\n                return new AlgorithmIdentifier({ algorithm: id_sha512 });\n        }\n        return null;\n    }\n    toWebAlgorithm(alg) {\n        switch (alg.algorithm) {\n            case id_sha1:\n                return { name: \"SHA-1\" };\n            case id_sha256:\n                return { name: \"SHA-256\" };\n            case id_sha384:\n                return { name: \"SHA-384\" };\n            case id_sha512:\n                return { name: \"SHA-512\" };\n        }\n        return null;\n    }\n};\nShaAlgorithm = __decorate([\n    injectable()\n], ShaAlgorithm);\ncontainer.registerSingleton(diAlgorithm, ShaAlgorithm);\n\nclass AsnEcSignatureFormatter {\n    addPadding(pointSize, data) {\n        const bytes = BufferSourceConverter.toUint8Array(data);\n        const res = new Uint8Array(pointSize);\n        res.set(bytes, pointSize - bytes.length);\n        return res;\n    }\n    removePadding(data, positive = false) {\n        let bytes = BufferSourceConverter.toUint8Array(data);\n        for (let i = 0; i < bytes.length; i++) {\n            if (!bytes[i]) {\n                continue;\n            }\n            bytes = bytes.slice(i);\n            break;\n        }\n        if (positive && bytes[0] > 127) {\n            const result = new Uint8Array(bytes.length + 1);\n            result.set(bytes, 1);\n            return result.buffer;\n        }\n        return bytes.buffer;\n    }\n    toAsnSignature(algorithm, signature) {\n        if (algorithm.name === \"ECDSA\") {\n            const namedCurve = algorithm.namedCurve;\n            const pointSize = AsnEcSignatureFormatter.namedCurveSize.get(namedCurve) || AsnEcSignatureFormatter.defaultNamedCurveSize;\n            const ecSignature = new ECDSASigValue();\n            const uint8Signature = BufferSourceConverter.toUint8Array(signature);\n            ecSignature.r = this.removePadding(uint8Signature.slice(0, pointSize), true);\n            ecSignature.s = this.removePadding(uint8Signature.slice(pointSize, pointSize + pointSize), true);\n            return AsnConvert.serialize(ecSignature);\n        }\n        return null;\n    }\n    toWebSignature(algorithm, signature) {\n        if (algorithm.name === \"ECDSA\") {\n            const ecSigValue = AsnConvert.parse(signature, ECDSASigValue);\n            const namedCurve = algorithm.namedCurve;\n            const pointSize = AsnEcSignatureFormatter.namedCurveSize.get(namedCurve) || AsnEcSignatureFormatter.defaultNamedCurveSize;\n            const r = this.addPadding(pointSize, this.removePadding(ecSigValue.r));\n            const s = this.addPadding(pointSize, this.removePadding(ecSigValue.s));\n            return combine(r, s);\n        }\n        return null;\n    }\n}\nAsnEcSignatureFormatter.namedCurveSize = new Map();\nAsnEcSignatureFormatter.defaultNamedCurveSize = 32;\n\nconst idX25519 = \"1.3.101.110\";\nconst idX448 = \"1.3.101.111\";\nconst idEd25519 = \"1.3.101.112\";\nconst idEd448 = \"1.3.101.113\";\nlet EdAlgorithm = class EdAlgorithm {\n    toAsnAlgorithm(alg) {\n        let algorithm = null;\n        switch (alg.name.toLowerCase()) {\n            case \"ed25519\":\n                algorithm = idEd25519;\n                break;\n            case \"x25519\":\n                algorithm = idX25519;\n                break;\n            case \"eddsa\":\n                switch (alg.namedCurve.toLowerCase()) {\n                    case \"ed25519\":\n                        algorithm = idEd25519;\n                        break;\n                    case \"ed448\":\n                        algorithm = idEd448;\n                        break;\n                }\n                break;\n            case \"ecdh-es\":\n                switch (alg.namedCurve.toLowerCase()) {\n                    case \"x25519\":\n                        algorithm = idX25519;\n                        break;\n                    case \"x448\":\n                        algorithm = idX448;\n                        break;\n                }\n        }\n        if (algorithm) {\n            return new AlgorithmIdentifier({\n                algorithm,\n            });\n        }\n        return null;\n    }\n    toWebAlgorithm(alg) {\n        switch (alg.algorithm) {\n            case idEd25519:\n                return { name: \"Ed25519\" };\n            case idEd448:\n                return { name: \"EdDSA\", namedCurve: \"Ed448\" };\n            case idX25519:\n                return { name: \"X25519\" };\n            case idX448:\n                return { name: \"ECDH-ES\", namedCurve: \"X448\" };\n        }\n        return null;\n    }\n};\nEdAlgorithm = __decorate([\n    injectable()\n], EdAlgorithm);\ncontainer.registerSingleton(diAlgorithm, EdAlgorithm);\n\nclass Pkcs10CertificateRequest extends PemData {\n    constructor(param) {\n        if (PemData.isAsnEncoded(param)) {\n            super(param, CertificationRequest);\n        }\n        else {\n            super(param);\n        }\n        this.tag = PemConverter.CertificateRequestTag;\n    }\n    onInit(asn) {\n        this.tbs = AsnConvert.serialize(asn.certificationRequestInfo);\n        this.publicKey = new PublicKey(asn.certificationRequestInfo.subjectPKInfo);\n        const algProv = container.resolve(diAlgorithmProvider);\n        this.signatureAlgorithm = algProv.toWebAlgorithm(asn.signatureAlgorithm);\n        this.signature = asn.signature;\n        this.attributes = asn.certificationRequestInfo.attributes\n            .map(o => AttributeFactory.create(AsnConvert.serialize(o)));\n        const extensions = this.getAttribute(id_pkcs9_at_extensionRequest);\n        this.extensions = [];\n        if (extensions instanceof ExtensionsAttribute) {\n            this.extensions = extensions.items;\n        }\n        this.subjectName = new Name(asn.certificationRequestInfo.subject);\n        this.subject = this.subjectName.toString();\n    }\n    getAttribute(type) {\n        for (const attr of this.attributes) {\n            if (attr.type === type) {\n                return attr;\n            }\n        }\n        return null;\n    }\n    getAttributes(type) {\n        return this.attributes.filter(o => o.type === type);\n    }\n    getExtension(type) {\n        for (const ext of this.extensions) {\n            if (ext.type === type) {\n                return ext;\n            }\n        }\n        return null;\n    }\n    getExtensions(type) {\n        return this.extensions.filter(o => o.type === type);\n    }\n    async verify(crypto = cryptoProvider.get()) {\n        const algorithm = { ...this.publicKey.algorithm, ...this.signatureAlgorithm };\n        const publicKey = await this.publicKey.export(algorithm, [\"verify\"], crypto);\n        const signatureFormatters = container.resolveAll(diAsnSignatureFormatter).reverse();\n        let signature = null;\n        for (const signatureFormatter of signatureFormatters) {\n            signature = signatureFormatter.toWebSignature(algorithm, this.signature);\n            if (signature) {\n                break;\n            }\n        }\n        if (!signature) {\n            throw Error(\"Cannot convert WebCrypto signature value to ASN.1 format\");\n        }\n        const ok = await crypto.subtle.verify(this.signatureAlgorithm, publicKey, signature, this.tbs);\n        return ok;\n    }\n    toTextObject() {\n        const obj = this.toTextObjectEmpty();\n        const req = AsnConvert.parse(this.rawData, CertificationRequest);\n        const tbs = req.certificationRequestInfo;\n        const data = new TextObject(\"\", {\n            \"Version\": `${Version[tbs.version]} (${tbs.version})`,\n            \"Subject\": this.subject,\n            \"Subject Public Key Info\": this.publicKey,\n        });\n        if (this.attributes.length) {\n            const attrs = new TextObject(\"\");\n            for (const ext of this.attributes) {\n                const attrObj = ext.toTextObject();\n                attrs[attrObj[TextObject.NAME]] = attrObj;\n            }\n            data[\"Attributes\"] = attrs;\n        }\n        obj[\"Data\"] = data;\n        obj[\"Signature\"] = new TextObject(\"\", {\n            \"Algorithm\": TextConverter.serializeAlgorithm(req.signatureAlgorithm),\n            \"\": req.signature,\n        });\n        return obj;\n    }\n}\nPkcs10CertificateRequest.NAME = \"PKCS#10 Certificate Request\";\n\nclass Pkcs10CertificateRequestGenerator {\n    static async create(params, crypto = cryptoProvider.get()) {\n        if (!params.keys.privateKey) {\n            throw new Error(\"Bad field 'keys' in 'params' argument. 'privateKey' is empty\");\n        }\n        if (!params.keys.publicKey) {\n            throw new Error(\"Bad field 'keys' in 'params' argument. 'publicKey' is empty\");\n        }\n        const spki = await crypto.subtle.exportKey(\"spki\", params.keys.publicKey);\n        const asnReq = new CertificationRequest({\n            certificationRequestInfo: new CertificationRequestInfo({\n                subjectPKInfo: AsnConvert.parse(spki, SubjectPublicKeyInfo),\n            }),\n        });\n        if (params.name) {\n            const name = params.name instanceof Name\n                ? params.name\n                : new Name(params.name);\n            asnReq.certificationRequestInfo.subject = AsnConvert.parse(name.toArrayBuffer(), Name$1);\n        }\n        if (params.attributes) {\n            for (const o of params.attributes) {\n                asnReq.certificationRequestInfo.attributes.push(AsnConvert.parse(o.rawData, Attribute$1));\n            }\n        }\n        if (params.extensions && params.extensions.length) {\n            const attr = new Attribute$1({ type: id_pkcs9_at_extensionRequest });\n            const extensions = new Extensions();\n            for (const o of params.extensions) {\n                extensions.push(AsnConvert.parse(o.rawData, Extension$1));\n            }\n            attr.values.push(AsnConvert.serialize(extensions));\n            asnReq.certificationRequestInfo.attributes.push(attr);\n        }\n        const signingAlgorithm = { ...params.signingAlgorithm, ...params.keys.privateKey.algorithm };\n        const algProv = container.resolve(diAlgorithmProvider);\n        asnReq.signatureAlgorithm = algProv.toAsnAlgorithm(signingAlgorithm);\n        const tbs = AsnConvert.serialize(asnReq.certificationRequestInfo);\n        const signature = await crypto.subtle.sign(signingAlgorithm, params.keys.privateKey, tbs);\n        const signatureFormatters = container.resolveAll(diAsnSignatureFormatter).reverse();\n        let asnSignature = null;\n        for (const signatureFormatter of signatureFormatters) {\n            asnSignature = signatureFormatter.toAsnSignature(signingAlgorithm, signature);\n            if (asnSignature) {\n                break;\n            }\n        }\n        if (!asnSignature) {\n            throw Error(\"Cannot convert WebCrypto signature value to ASN.1 format\");\n        }\n        asnReq.signature = asnSignature;\n        return new Pkcs10CertificateRequest(AsnConvert.serialize(asnReq));\n    }\n}\n\nclass X509Certificate extends PemData {\n    constructor(param) {\n        if (PemData.isAsnEncoded(param)) {\n            super(param, Certificate);\n        }\n        else {\n            super(param);\n        }\n        this.tag = PemConverter.CertificateTag;\n    }\n    onInit(asn) {\n        const tbs = asn.tbsCertificate;\n        this.tbs = AsnConvert.serialize(tbs);\n        let serialNumberBytes = new Uint8Array(tbs.serialNumber);\n        if (serialNumberBytes.length > 1 && serialNumberBytes[0] === 0x00 && serialNumberBytes[1] > 0x7F) {\n            serialNumberBytes = serialNumberBytes.slice(1);\n        }\n        this.serialNumber = Convert.ToHex(serialNumberBytes);\n        this.subjectName = new Name(tbs.subject);\n        this.subject = new Name(tbs.subject).toString();\n        this.issuerName = new Name(tbs.issuer);\n        this.issuer = this.issuerName.toString();\n        const algProv = container.resolve(diAlgorithmProvider);\n        this.signatureAlgorithm = algProv.toWebAlgorithm(asn.signatureAlgorithm);\n        this.signature = asn.signatureValue;\n        const notBefore = tbs.validity.notBefore.utcTime || tbs.validity.notBefore.generalTime;\n        if (!notBefore) {\n            throw new Error(\"Cannot get 'notBefore' value\");\n        }\n        this.notBefore = notBefore;\n        const notAfter = tbs.validity.notAfter.utcTime || tbs.validity.notAfter.generalTime;\n        if (!notAfter) {\n            throw new Error(\"Cannot get 'notAfter' value\");\n        }\n        this.notAfter = notAfter;\n        this.extensions = [];\n        if (tbs.extensions) {\n            this.extensions = tbs.extensions.map(o => ExtensionFactory.create(AsnConvert.serialize(o)));\n        }\n        this.publicKey = new PublicKey(tbs.subjectPublicKeyInfo);\n    }\n    getExtension(type) {\n        for (const ext of this.extensions) {\n            if (typeof type === \"string\") {\n                if (ext.type === type) {\n                    return ext;\n                }\n            }\n            else {\n                if (ext instanceof type) {\n                    return ext;\n                }\n            }\n        }\n        return null;\n    }\n    getExtensions(type) {\n        return this.extensions.filter(o => {\n            if (typeof type === \"string\") {\n                return o.type === type;\n            }\n            else {\n                return o instanceof type;\n            }\n        });\n    }\n    async verify(params = {}, crypto = cryptoProvider.get()) {\n        let keyAlgorithm;\n        let publicKey;\n        const paramsKey = params.publicKey;\n        try {\n            if (!paramsKey) {\n                keyAlgorithm = { ...this.publicKey.algorithm, ...this.signatureAlgorithm };\n                publicKey = await this.publicKey.export(keyAlgorithm, [\"verify\"], crypto);\n            }\n            else if (\"publicKey\" in paramsKey) {\n                keyAlgorithm = { ...paramsKey.publicKey.algorithm, ...this.signatureAlgorithm };\n                publicKey = await paramsKey.publicKey.export(keyAlgorithm, [\"verify\"], crypto);\n            }\n            else if (paramsKey instanceof PublicKey) {\n                keyAlgorithm = { ...paramsKey.algorithm, ...this.signatureAlgorithm };\n                publicKey = await paramsKey.export(keyAlgorithm, [\"verify\"], crypto);\n            }\n            else if (BufferSourceConverter.isBufferSource(paramsKey)) {\n                const key = new PublicKey(paramsKey);\n                keyAlgorithm = { ...key.algorithm, ...this.signatureAlgorithm };\n                publicKey = await key.export(keyAlgorithm, [\"verify\"], crypto);\n            }\n            else {\n                keyAlgorithm = { ...paramsKey.algorithm, ...this.signatureAlgorithm };\n                publicKey = paramsKey;\n            }\n        }\n        catch (_e) {\n            return false;\n        }\n        const signatureFormatters = container.resolveAll(diAsnSignatureFormatter).reverse();\n        let signature = null;\n        for (const signatureFormatter of signatureFormatters) {\n            signature = signatureFormatter.toWebSignature(keyAlgorithm, this.signature);\n            if (signature) {\n                break;\n            }\n        }\n        if (!signature) {\n            throw Error(\"Cannot convert ASN.1 signature value to WebCrypto format\");\n        }\n        const ok = await crypto.subtle.verify(this.signatureAlgorithm, publicKey, signature, this.tbs);\n        if (params.signatureOnly) {\n            return ok;\n        }\n        else {\n            const date = params.date || new Date();\n            const time = date.getTime();\n            return ok && this.notBefore.getTime() < time && time < this.notAfter.getTime();\n        }\n    }\n    async getThumbprint(...args) {\n        let crypto;\n        let algorithm = \"SHA-1\";\n        if (args[0]) {\n            if (!args[0].subtle) {\n                algorithm = args[0] || algorithm;\n                crypto = args[1];\n            }\n            else {\n                crypto = args[0];\n            }\n        }\n        crypto !== null && crypto !== void 0 ? crypto : (crypto = cryptoProvider.get());\n        return await crypto.subtle.digest(algorithm, this.rawData);\n    }\n    async isSelfSigned(crypto = cryptoProvider.get()) {\n        return this.subject === this.issuer && await this.verify({ signatureOnly: true }, crypto);\n    }\n    toTextObject() {\n        const obj = this.toTextObjectEmpty();\n        const cert = AsnConvert.parse(this.rawData, Certificate);\n        const tbs = cert.tbsCertificate;\n        const data = new TextObject(\"\", {\n            \"Version\": `${Version[tbs.version]} (${tbs.version})`,\n            \"Serial Number\": tbs.serialNumber,\n            \"Signature Algorithm\": TextConverter.serializeAlgorithm(tbs.signature),\n            \"Issuer\": this.issuer,\n            \"Validity\": new TextObject(\"\", {\n                \"Not Before\": tbs.validity.notBefore.getTime(),\n                \"Not After\": tbs.validity.notAfter.getTime(),\n            }),\n            \"Subject\": this.subject,\n            \"Subject Public Key Info\": this.publicKey,\n        });\n        if (tbs.issuerUniqueID) {\n            data[\"Issuer Unique ID\"] = tbs.issuerUniqueID;\n        }\n        if (tbs.subjectUniqueID) {\n            data[\"Subject Unique ID\"] = tbs.subjectUniqueID;\n        }\n        if (this.extensions.length) {\n            const extensions = new TextObject(\"\");\n            for (const ext of this.extensions) {\n                const extObj = ext.toTextObject();\n                extensions[extObj[TextObject.NAME]] = extObj;\n            }\n            data[\"Extensions\"] = extensions;\n        }\n        obj[\"Data\"] = data;\n        obj[\"Signature\"] = new TextObject(\"\", {\n            \"Algorithm\": TextConverter.serializeAlgorithm(cert.signatureAlgorithm),\n            \"\": cert.signatureValue,\n        });\n        return obj;\n    }\n}\nX509Certificate.NAME = \"Certificate\";\n\nclass X509Certificates extends Array {\n    constructor(param) {\n        super();\n        if (PemData.isAsnEncoded(param)) {\n            this.import(param);\n        }\n        else if (param instanceof X509Certificate) {\n            this.push(param);\n        }\n        else if (Array.isArray(param)) {\n            for (const item of param) {\n                this.push(item);\n            }\n        }\n    }\n    export(format) {\n        const signedData = new asn1Cms.SignedData();\n        signedData.version = 1;\n        signedData.encapContentInfo.eContentType = asn1Cms.id_data;\n        signedData.encapContentInfo.eContent = new asn1Cms.EncapsulatedContent({\n            single: new OctetString(),\n        });\n        signedData.certificates = new asn1Cms.CertificateSet(this.map(o => new asn1Cms.CertificateChoices({\n            certificate: AsnConvert.parse(o.rawData, Certificate)\n        })));\n        const cms = new asn1Cms.ContentInfo({\n            contentType: asn1Cms.id_signedData,\n            content: AsnConvert.serialize(signedData),\n        });\n        const raw = AsnConvert.serialize(cms);\n        if (format === \"raw\") {\n            return raw;\n        }\n        return this.toString(format);\n    }\n    import(data) {\n        const raw = PemData.toArrayBuffer(data);\n        const cms = AsnConvert.parse(raw, asn1Cms.ContentInfo);\n        if (cms.contentType !== asn1Cms.id_signedData) {\n            throw new TypeError(\"Cannot parse CMS package. Incoming data is not a SignedData object.\");\n        }\n        const signedData = AsnConvert.parse(cms.content, asn1Cms.SignedData);\n        this.clear();\n        for (const item of signedData.certificates || []) {\n            if (item.certificate) {\n                this.push(new X509Certificate(item.certificate));\n            }\n        }\n    }\n    clear() {\n        while (this.pop()) {\n        }\n    }\n    toString(format = \"pem\") {\n        const raw = this.export(\"raw\");\n        switch (format) {\n            case \"pem\":\n                return PemConverter.encode(raw, \"CMS\");\n            case \"pem-chain\":\n                return this\n                    .map(o => o.toString(\"pem\"))\n                    .join(\"\\n\");\n            case \"asn\":\n                return AsnConvert.toString(raw);\n            case \"hex\":\n                return Convert.ToHex(raw);\n            case \"base64\":\n                return Convert.ToBase64(raw);\n            case \"base64url\":\n                return Convert.ToBase64Url(raw);\n            case \"text\":\n                return TextConverter.serialize(this.toTextObject());\n            default:\n                throw TypeError(\"Argument 'format' is unsupported value\");\n        }\n    }\n    toTextObject() {\n        const contentInfo = AsnConvert.parse(this.export(\"raw\"), asn1Cms.ContentInfo);\n        const signedData = AsnConvert.parse(contentInfo.content, asn1Cms.SignedData);\n        const obj = new TextObject(\"X509Certificates\", {\n            \"Content Type\": OidSerializer.toString(contentInfo.contentType),\n            \"Content\": new TextObject(\"\", {\n                \"Version\": `${asn1Cms.CMSVersion[signedData.version]} (${signedData.version})`,\n                \"Certificates\": new TextObject(\"\", { \"Certificate\": this.map(o => o.toTextObject()) }),\n            }),\n        });\n        return obj;\n    }\n}\n\nclass X509ChainBuilder {\n    constructor(params = {}) {\n        this.certificates = [];\n        if (params.certificates) {\n            this.certificates = params.certificates;\n        }\n    }\n    async build(cert, crypto = cryptoProvider.get()) {\n        const chain = new X509Certificates(cert);\n        let current = cert;\n        while (current = await this.findIssuer(current, crypto)) {\n            const thumbprint = await current.getThumbprint(crypto);\n            for (const item of chain) {\n                const thumbprint2 = await item.getThumbprint(crypto);\n                if (isEqual(thumbprint, thumbprint2)) {\n                    throw new Error(\"Cannot build a certificate chain. Circular dependency.\");\n                }\n            }\n            chain.push(current);\n        }\n        return chain;\n    }\n    async findIssuer(cert, crypto = cryptoProvider.get()) {\n        if (!await cert.isSelfSigned(crypto)) {\n            const akiExt = cert.getExtension(asn1X509.id_ce_authorityKeyIdentifier);\n            for (const item of this.certificates) {\n                if (item.subject !== cert.issuer) {\n                    continue;\n                }\n                if (akiExt) {\n                    if (akiExt.keyId) {\n                        const skiExt = item.getExtension(asn1X509.id_ce_subjectKeyIdentifier);\n                        if (skiExt && skiExt.keyId !== akiExt.keyId) {\n                            continue;\n                        }\n                    }\n                    else if (akiExt.certId) {\n                        const sanExt = item.getExtension(asn1X509.id_ce_subjectAltName);\n                        if (sanExt &&\n                            !(akiExt.certId.serialNumber === item.serialNumber && isEqual(AsnConvert.serialize(akiExt.certId.name), AsnConvert.serialize(sanExt)))) {\n                            continue;\n                        }\n                    }\n                }\n                try {\n                    const algorithm = { ...item.publicKey.algorithm, ...cert.signatureAlgorithm };\n                    const publicKey = await item.publicKey.export(algorithm, [\"verify\"], crypto);\n                    const ok = await cert.verify({ publicKey, signatureOnly: true }, crypto);\n                    if (!ok) {\n                        continue;\n                    }\n                }\n                catch (_e) {\n                    continue;\n                }\n                return item;\n            }\n        }\n        return null;\n    }\n}\n\nclass X509CertificateGenerator {\n    static async createSelfSigned(params, crypto = cryptoProvider.get()) {\n        if (!params.keys.privateKey) {\n            throw new Error(\"Bad field 'keys' in 'params' argument. 'privateKey' is empty\");\n        }\n        if (!params.keys.publicKey) {\n            throw new Error(\"Bad field 'keys' in 'params' argument. 'publicKey' is empty\");\n        }\n        return this.create({\n            serialNumber: params.serialNumber,\n            subject: params.name,\n            issuer: params.name,\n            notBefore: params.notBefore,\n            notAfter: params.notAfter,\n            publicKey: params.keys.publicKey,\n            signingKey: params.keys.privateKey,\n            signingAlgorithm: params.signingAlgorithm,\n            extensions: params.extensions,\n        }, crypto);\n    }\n    static async create(params, crypto = cryptoProvider.get()) {\n        var _a;\n        let spki;\n        if (params.publicKey instanceof PublicKey) {\n            spki = params.publicKey.rawData;\n        }\n        else if (\"publicKey\" in params.publicKey) {\n            spki = params.publicKey.publicKey.rawData;\n        }\n        else if (BufferSourceConverter.isBufferSource(params.publicKey)) {\n            spki = params.publicKey;\n        }\n        else {\n            spki = await crypto.subtle.exportKey(\"spki\", params.publicKey);\n        }\n        let serialNumber = params.serialNumber\n            ? BufferSourceConverter.toUint8Array(Convert.FromHex(params.serialNumber))\n            : undefined;\n        serialNumber = this.generateSerialNumber(serialNumber, crypto);\n        const notBefore = params.notBefore || new Date();\n        const notAfter = params.notAfter || new Date(notBefore.getTime() + 31536000000);\n        const asnX509 = new asn1X509.Certificate({\n            tbsCertificate: new asn1X509.TBSCertificate({\n                version: asn1X509.Version.v3,\n                serialNumber: serialNumber,\n                validity: new asn1X509.Validity({\n                    notBefore,\n                    notAfter,\n                }),\n                extensions: new asn1X509.Extensions(((_a = params.extensions) === null || _a === void 0 ? void 0 : _a.map(o => AsnConvert.parse(o.rawData, asn1X509.Extension))) || []),\n                subjectPublicKeyInfo: AsnConvert.parse(spki, asn1X509.SubjectPublicKeyInfo),\n            }),\n        });\n        if (params.subject) {\n            const name = params.subject instanceof Name\n                ? params.subject\n                : new Name(params.subject);\n            asnX509.tbsCertificate.subject = AsnConvert.parse(name.toArrayBuffer(), asn1X509.Name);\n        }\n        if (params.issuer) {\n            const name = params.issuer instanceof Name\n                ? params.issuer\n                : new Name(params.issuer);\n            asnX509.tbsCertificate.issuer = AsnConvert.parse(name.toArrayBuffer(), asn1X509.Name);\n        }\n        const defaultSigningAlgorithm = {\n            hash: \"SHA-256\",\n        };\n        const signatureAlgorithm = (\"signingKey\" in params)\n            ? { ...defaultSigningAlgorithm, ...params.signingAlgorithm, ...params.signingKey.algorithm }\n            : { ...defaultSigningAlgorithm, ...params.signingAlgorithm };\n        const algProv = container.resolve(diAlgorithmProvider);\n        asnX509.tbsCertificate.signature = asnX509.signatureAlgorithm = algProv.toAsnAlgorithm(signatureAlgorithm);\n        const tbs = AsnConvert.serialize(asnX509.tbsCertificate);\n        const signatureValue = (\"signingKey\" in params)\n            ? await crypto.subtle.sign(signatureAlgorithm, params.signingKey, tbs)\n            : params.signature;\n        const signatureFormatters = container.resolveAll(diAsnSignatureFormatter).reverse();\n        let asnSignature = null;\n        for (const signatureFormatter of signatureFormatters) {\n            asnSignature = signatureFormatter.toAsnSignature(signatureAlgorithm, signatureValue);\n            if (asnSignature) {\n                break;\n            }\n        }\n        if (!asnSignature) {\n            throw Error(\"Cannot convert ASN.1 signature value to WebCrypto format\");\n        }\n        asnX509.signatureValue = asnSignature;\n        return new X509Certificate(AsnConvert.serialize(asnX509));\n    }\n    static generateSerialNumber(input, crypto) {\n        let serialNumber = input && input.length && input.some(o => o > 0)\n            ? new Uint8Array(input)\n            : undefined;\n        if (!serialNumber) {\n            serialNumber = crypto.getRandomValues(new Uint8Array(16));\n        }\n        let firstNonZero = 0;\n        while (firstNonZero < serialNumber.length - 1 && serialNumber[firstNonZero] === 0) {\n            firstNonZero++;\n        }\n        serialNumber = serialNumber.slice(firstNonZero);\n        if (serialNumber[0] > 0x7F) {\n            const newSerialNumber = new Uint8Array(serialNumber.length + 1);\n            newSerialNumber[0] = 0x00;\n            newSerialNumber.set(serialNumber, 1);\n            serialNumber = newSerialNumber;\n        }\n        return serialNumber;\n    }\n}\n\nvar X509CrlReason;\n(function (X509CrlReason) {\n    X509CrlReason[X509CrlReason[\"unspecified\"] = 0] = \"unspecified\";\n    X509CrlReason[X509CrlReason[\"keyCompromise\"] = 1] = \"keyCompromise\";\n    X509CrlReason[X509CrlReason[\"cACompromise\"] = 2] = \"cACompromise\";\n    X509CrlReason[X509CrlReason[\"affiliationChanged\"] = 3] = \"affiliationChanged\";\n    X509CrlReason[X509CrlReason[\"superseded\"] = 4] = \"superseded\";\n    X509CrlReason[X509CrlReason[\"cessationOfOperation\"] = 5] = \"cessationOfOperation\";\n    X509CrlReason[X509CrlReason[\"certificateHold\"] = 6] = \"certificateHold\";\n    X509CrlReason[X509CrlReason[\"removeFromCRL\"] = 8] = \"removeFromCRL\";\n    X509CrlReason[X509CrlReason[\"privilegeWithdrawn\"] = 9] = \"privilegeWithdrawn\";\n    X509CrlReason[X509CrlReason[\"aACompromise\"] = 10] = \"aACompromise\";\n})(X509CrlReason || (X509CrlReason = {}));\nclass X509CrlEntry extends AsnData {\n    constructor(...args) {\n        let raw;\n        if (BufferSourceConverter.isBufferSource(args[0])) {\n            raw = BufferSourceConverter.toArrayBuffer(args[0]);\n        }\n        else {\n            raw = AsnConvert.serialize(new RevokedCertificate({\n                userCertificate: args[0],\n                revocationDate: new Time(args[1]),\n                crlEntryExtensions: args[2],\n            }));\n        }\n        super(raw, RevokedCertificate);\n    }\n    onInit(asn) {\n        this.serialNumber = Convert.ToHex(asn.userCertificate);\n        this.revocationDate = asn.revocationDate.getTime();\n        this.extensions = [];\n        if (asn.crlEntryExtensions) {\n            this.extensions = asn.crlEntryExtensions.map((o) => {\n                const extension = ExtensionFactory.create(AsnConvert.serialize(o));\n                switch (extension.type) {\n                    case id_ce_cRLReasons:\n                        this.reason = AsnConvert.parse(extension.value, CRLReason).reason;\n                        break;\n                    case id_ce_invalidityDate:\n                        this.invalidity = AsnConvert.parse(extension.value, InvalidityDate).value;\n                        break;\n                }\n                return extension;\n            });\n        }\n    }\n}\n\nclass X509Crl extends PemData {\n    constructor(param) {\n        if (PemData.isAsnEncoded(param)) {\n            super(param, CertificateList);\n        }\n        else {\n            super(param);\n        }\n        this.tag = PemConverter.CrlTag;\n    }\n    onInit(asn) {\n        var _a, _b;\n        const tbs = asn.tbsCertList;\n        this.tbs = AsnConvert.serialize(tbs);\n        this.version = tbs.version;\n        const algProv = container.resolve(diAlgorithmProvider);\n        this.signatureAlgorithm = algProv.toWebAlgorithm(asn.signatureAlgorithm);\n        this.tbsCertListSignatureAlgorithm = tbs.signature;\n        this.certListSignatureAlgorithm = asn.signatureAlgorithm;\n        this.signature = asn.signature;\n        this.issuerName = new Name(tbs.issuer);\n        this.issuer = this.issuerName.toString();\n        const thisUpdate = tbs.thisUpdate.getTime();\n        if (!thisUpdate) {\n            throw new Error(\"Cannot get 'thisUpdate' value\");\n        }\n        this.thisUpdate = thisUpdate;\n        const nextUpdate = (_a = tbs.nextUpdate) === null || _a === void 0 ? void 0 : _a.getTime();\n        this.nextUpdate = nextUpdate;\n        this.entries = ((_b = tbs.revokedCertificates) === null || _b === void 0 ? void 0 : _b.map(o => new X509CrlEntry(AsnConvert.serialize(o)))) || [];\n        this.extensions = [];\n        if (tbs.crlExtensions) {\n            this.extensions = tbs.crlExtensions.map((o) => ExtensionFactory.create(AsnConvert.serialize(o)));\n        }\n    }\n    getExtension(type) {\n        for (const ext of this.extensions) {\n            if (typeof type === \"string\") {\n                if (ext.type === type) {\n                    return ext;\n                }\n            }\n            else {\n                if (ext instanceof type) {\n                    return ext;\n                }\n            }\n        }\n        return null;\n    }\n    getExtensions(type) {\n        return this.extensions.filter((o) => {\n            if (typeof type === \"string\") {\n                return o.type === type;\n            }\n            else {\n                return o instanceof type;\n            }\n        });\n    }\n    async verify(params, crypto = cryptoProvider.get()) {\n        if (!this.certListSignatureAlgorithm.isEqual(this.tbsCertListSignatureAlgorithm)) {\n            throw new Error(\"algorithm identifier in the sequence tbsCertList and CertificateList mismatch\");\n        }\n        let keyAlgorithm;\n        let publicKey;\n        const paramsKey = params.publicKey;\n        try {\n            if (paramsKey instanceof X509Certificate) {\n                keyAlgorithm = {\n                    ...paramsKey.publicKey.algorithm,\n                    ...paramsKey.signatureAlgorithm,\n                };\n                publicKey = await paramsKey.publicKey.export(keyAlgorithm, [\"verify\"]);\n            }\n            else if (paramsKey instanceof PublicKey) {\n                keyAlgorithm = { ...paramsKey.algorithm, ...this.signature };\n                publicKey = await paramsKey.export(keyAlgorithm, [\"verify\"]);\n            }\n            else {\n                keyAlgorithm = { ...paramsKey.algorithm, ...this.signature };\n                publicKey = paramsKey;\n            }\n        }\n        catch (_e) {\n            return false;\n        }\n        const signatureFormatters = container.resolveAll(diAsnSignatureFormatter).reverse();\n        let signature = null;\n        for (const signatureFormatter of signatureFormatters) {\n            signature = signatureFormatter.toWebSignature(keyAlgorithm, this.signature);\n            if (signature) {\n                break;\n            }\n        }\n        if (!signature) {\n            throw Error(\"Cannot convert ASN.1 signature value to WebCrypto format\");\n        }\n        return await crypto.subtle.verify(this.signatureAlgorithm, publicKey, signature, this.tbs);\n    }\n    async getThumbprint(...args) {\n        let crypto;\n        let algorithm = \"SHA-1\";\n        if (args[0]) {\n            if (!args[0].subtle) {\n                algorithm = args[0] || algorithm;\n                crypto = args[1];\n            }\n            else {\n                crypto = args[0];\n            }\n        }\n        crypto !== null && crypto !== void 0 ? crypto : (crypto = cryptoProvider.get());\n        return await crypto.subtle.digest(algorithm, this.rawData);\n    }\n    findRevoked(certOrSerialNumber) {\n        const serialNumber = typeof certOrSerialNumber === \"string\" ? certOrSerialNumber : certOrSerialNumber.serialNumber;\n        for (const entry of this.entries) {\n            if (entry.serialNumber === serialNumber) {\n                return entry;\n            }\n        }\n        return null;\n    }\n}\n\nclass X509CrlGenerator {\n    static async create(params, crypto = cryptoProvider.get()) {\n        var _a;\n        const name = params.issuer instanceof Name\n            ? params.issuer\n            : new Name(params.issuer);\n        const asnX509Crl = new asn1X509.CertificateList({\n            tbsCertList: new asn1X509.TBSCertList({\n                version: asn1X509.Version.v2,\n                issuer: AsnConvert.parse(name.toArrayBuffer(), asn1X509.Name),\n                thisUpdate: new Time(params.thisUpdate || new Date()),\n            }),\n        });\n        if (params.nextUpdate) {\n            asnX509Crl.tbsCertList.nextUpdate = new Time(params.nextUpdate);\n        }\n        if (params.extensions && params.extensions.length) {\n            asnX509Crl.tbsCertList.crlExtensions = new asn1X509.Extensions(params.extensions.map(o => AsnConvert.parse(o.rawData, asn1X509.Extension)) || []);\n        }\n        if (params.entries && params.entries.length) {\n            asnX509Crl.tbsCertList.revokedCertificates = [];\n            for (const entry of params.entries) {\n                const userCertificate = PemData.toArrayBuffer(entry.serialNumber);\n                const index = asnX509Crl.tbsCertList.revokedCertificates.findIndex(cert => isEqual(cert.userCertificate, userCertificate));\n                if (index > -1) {\n                    throw new Error(`Certificate serial number ${entry.serialNumber} already exists in tbsCertList`);\n                }\n                const revokedCert = new RevokedCertificate({\n                    userCertificate: userCertificate,\n                    revocationDate: new Time(entry.revocationDate || new Date())\n                });\n                if (\"extensions\" in entry && ((_a = entry.extensions) === null || _a === void 0 ? void 0 : _a.length)) {\n                    revokedCert.crlEntryExtensions = entry.extensions.map(o => AsnConvert.parse(o.rawData, asn1X509.Extension));\n                }\n                else {\n                    revokedCert.crlEntryExtensions = [];\n                }\n                if (!(entry instanceof X509CrlEntry)) {\n                    if (entry.reason) {\n                        revokedCert.crlEntryExtensions.push(new asn1X509.Extension({\n                            extnID: asn1X509.id_ce_cRLReasons,\n                            critical: false,\n                            extnValue: new OctetString(AsnConvert.serialize(new asn1X509.CRLReason(entry.reason))),\n                        }));\n                    }\n                    if (entry.invalidity) {\n                        revokedCert.crlEntryExtensions.push(new asn1X509.Extension({\n                            extnID: asn1X509.id_ce_invalidityDate,\n                            critical: false,\n                            extnValue: new OctetString(AsnConvert.serialize(new asn1X509.InvalidityDate(entry.invalidity))),\n                        }));\n                    }\n                    if (entry.issuer) {\n                        const name = params.issuer instanceof Name\n                            ? params.issuer\n                            : new Name(params.issuer);\n                        revokedCert.crlEntryExtensions.push(new asn1X509.Extension({\n                            extnID: asn1X509.id_ce_certificateIssuer,\n                            critical: false,\n                            extnValue: new OctetString(AsnConvert.serialize(AsnConvert.parse(name.toArrayBuffer(), asn1X509.Name))),\n                        }));\n                    }\n                }\n                asnX509Crl.tbsCertList.revokedCertificates.push(revokedCert);\n            }\n        }\n        const signingAlgorithm = { ...params.signingAlgorithm, ...params.signingKey.algorithm };\n        const algProv = container.resolve(diAlgorithmProvider);\n        asnX509Crl.tbsCertList.signature = asnX509Crl.signatureAlgorithm = algProv.toAsnAlgorithm(signingAlgorithm);\n        const tbs = AsnConvert.serialize(asnX509Crl.tbsCertList);\n        const signature = await crypto.subtle.sign(signingAlgorithm, params.signingKey, tbs);\n        const signatureFormatters = container.resolveAll(diAsnSignatureFormatter).reverse();\n        let asnSignature = null;\n        for (const signatureFormatter of signatureFormatters) {\n            asnSignature = signatureFormatter.toAsnSignature(signingAlgorithm, signature);\n            if (asnSignature) {\n                break;\n            }\n        }\n        if (!asnSignature) {\n            throw Error(\"Cannot convert ASN.1 signature value to WebCrypto format\");\n        }\n        asnX509Crl.signature = asnSignature;\n        return new X509Crl(AsnConvert.serialize(asnX509Crl));\n    }\n}\n\nExtensionFactory.register(asn1X509.id_ce_basicConstraints, BasicConstraintsExtension);\nExtensionFactory.register(asn1X509.id_ce_extKeyUsage, ExtendedKeyUsageExtension);\nExtensionFactory.register(asn1X509.id_ce_keyUsage, KeyUsagesExtension);\nExtensionFactory.register(asn1X509.id_ce_subjectKeyIdentifier, SubjectKeyIdentifierExtension);\nExtensionFactory.register(asn1X509.id_ce_authorityKeyIdentifier, AuthorityKeyIdentifierExtension);\nExtensionFactory.register(asn1X509.id_ce_subjectAltName, SubjectAlternativeNameExtension);\nExtensionFactory.register(asn1X509.id_ce_cRLDistributionPoints, CRLDistributionPointsExtension);\nExtensionFactory.register(asn1X509.id_pe_authorityInfoAccess, AuthorityInfoAccessExtension);\nExtensionFactory.register(asn1X509.id_ce_issuerAltName, IssuerAlternativeNameExtension);\nAttributeFactory.register(asnPkcs9.id_pkcs9_at_challengePassword, ChallengePasswordAttribute);\nAttributeFactory.register(asnPkcs9.id_pkcs9_at_extensionRequest, ExtensionsAttribute);\ncontainer.registerSingleton(diAsnSignatureFormatter, AsnDefaultSignatureFormatter);\ncontainer.registerSingleton(diAsnSignatureFormatter, AsnEcSignatureFormatter);\nAsnEcSignatureFormatter.namedCurveSize.set(\"P-256\", 32);\nAsnEcSignatureFormatter.namedCurveSize.set(\"K-256\", 32);\nAsnEcSignatureFormatter.namedCurveSize.set(\"P-384\", 48);\nAsnEcSignatureFormatter.namedCurveSize.set(\"P-521\", 66);\n\nexport { AlgorithmProvider, AsnData, AsnDefaultSignatureFormatter, AsnEcSignatureFormatter, Attribute, AttributeFactory, AuthorityInfoAccessExtension, AuthorityKeyIdentifierExtension, BasicConstraintsExtension, CRLDistributionPointsExtension, CertificatePolicyExtension, ChallengePasswordAttribute, CryptoProvider, DN, DNS, DefaultAlgorithmSerializer, EMAIL, EcAlgorithm, EdAlgorithm, ExtendedKeyUsage, ExtendedKeyUsageExtension, Extension, ExtensionFactory, ExtensionsAttribute, GUID, GeneralName, GeneralNames, IP, IssuerAlternativeNameExtension, KeyUsageFlags, KeyUsagesExtension, Name, NameIdentifier, OidSerializer, PemConverter, PemData, Pkcs10CertificateRequest, Pkcs10CertificateRequestGenerator, PublicKey, REGISTERED_ID, RsaAlgorithm, ShaAlgorithm, SubjectAlternativeNameExtension, SubjectKeyIdentifierExtension, TextConverter, TextObject, UPN, URL, X509Certificate, X509CertificateGenerator, X509Certificates, X509ChainBuilder, X509Crl, X509CrlEntry, X509CrlGenerator, X509CrlReason, cryptoProvider, diAlgorithm, diAlgorithmProvider, diAsnSignatureFormatter, idEd25519, idEd448, idX25519, idX448 };\n", "import { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n", "export const empty = new Uint8Array(0)\n\nexport function toHex (d: Uint8Array): string {\n  return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n}\n\nexport function fromHex (hex: string): Uint8Array {\n  const hexes = hex.match(/../g)\n  return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\nexport function equals (aa: Uint8Array, bb: Uint8Array): boolean {\n  if (aa === bb) { return true }\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function coerce (o: ArrayBufferView | ArrayBuffer | Uint8Array): Uint8Array {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') { return o }\n  if (o instanceof ArrayBuffer) { return new Uint8Array(o) }\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\nexport function isBinary (o: unknown): o is ArrayBuffer | ArrayBufferView {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n}\n\nexport function fromString (str: string): Uint8Array {\n  return new TextEncoder().encode(str)\n}\n\nexport function toString (b: Uint8Array): string {\n  return new TextDecoder().decode(b)\n}\n", "/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  /**\n   * @param {any[] | Iterable<number>} source\n   */\n  function encode (source) {\n    // @ts-ignore\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  /**\n   * @param {string | string[]} source\n   */\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  /**\n   * @param {string | string[]} string\n   */\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n", "import { coerce } from '../bytes.js'\nimport basex from '../vendor/base-x.js'\nimport type { BaseCodec, BaseDecoder, BaseEncoder, CombobaseDecoder, Multibase, MultibaseCodec, MultibaseDecoder, MultibaseEncoder, UnibaseDecoder } from './interface.js'\n\ninterface EncodeFn { (bytes: Uint8Array): string }\ninterface DecodeFn { (text: string): Uint8Array }\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder<Base extends string, Prefix extends string> implements MultibaseEncoder<Prefix>, BaseEncoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  encode (bytes: Uint8Array): Multibase<Prefix> {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder<Base extends string, Prefix extends string> implements MultibaseDecoder<Prefix>, UnibaseDecoder<Prefix>, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseDecode: DecodeFn\n  private readonly prefixCodePoint: number\n\n  constructor (name: Base, prefix: Prefix, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    const prefixCodePoint = prefix.codePointAt(0)\n    /* c8 ignore next 3 */\n    if (prefixCodePoint === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    this.prefixCodePoint = prefixCodePoint\n    this.baseDecode = baseDecode\n  }\n\n  decode (text: string): Uint8Array {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  or<OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n}\n\ntype Decoders<Prefix extends string> = Record<Prefix, UnibaseDecoder<Prefix>>\n\nclass ComposedDecoder<Prefix extends string> implements MultibaseDecoder<Prefix>, CombobaseDecoder<Prefix> {\n  readonly decoders: Decoders<Prefix>\n\n  constructor (decoders: Decoders<Prefix>) {\n    this.decoders = decoders\n  }\n\n  or <OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n\n  decode (input: string): Uint8Array {\n    const prefix = input[0] as Prefix\n    const decoder = this.decoders[prefix]\n    if (decoder != null) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\nexport function or <L extends string, R extends string> (left: UnibaseDecoder<L> | CombobaseDecoder<L>, right: UnibaseDecoder<R> | CombobaseDecoder<R>): ComposedDecoder<L | R> {\n  return new ComposedDecoder({\n    ...(left.decoders ?? { [(left as UnibaseDecoder<L>).prefix]: left }),\n    ...(right.decoders ?? { [(right as UnibaseDecoder<R>).prefix]: right })\n  } as Decoders<L | R>)\n}\n\nexport class Codec<Base extends string, Prefix extends string> implements MultibaseCodec<Prefix>, MultibaseEncoder<Prefix>, MultibaseDecoder<Prefix>, BaseCodec, BaseEncoder, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n  readonly baseDecode: DecodeFn\n  readonly encoder: Encoder<Base, Prefix>\n  readonly decoder: Decoder<Base, Prefix>\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  encode (input: Uint8Array): string {\n    return this.encoder.encode(input)\n  }\n\n  decode (input: string): Uint8Array {\n    return this.decoder.decode(input)\n  }\n}\n\nexport function from <Base extends string, Prefix extends string> ({ name, prefix, encode, decode }: { name: Base, prefix: Prefix, encode: EncodeFn, decode: DecodeFn }): Codec<Base, Prefix> {\n  return new Codec(name, prefix, encode, decode)\n}\n\nexport function baseX <Base extends string, Prefix extends string> ({ name, prefix, alphabet }: { name: Base, prefix: Prefix, alphabet: string }): Codec<Base, Prefix> {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: (text: string): Uint8Array => coerce(decode(text))\n  })\n}\n\nfunction decode (string: string, alphabetIdx: Record<string, number>, bitsPerChar: number, name: string): Uint8Array {\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = alphabetIdx[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\nfunction encode (data: Uint8Array, alphabet: string, bitsPerChar: number): string {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits !== 0) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (((out.length * bitsPerChar) & 7) !== 0) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\nfunction createAlphabetIdx (alphabet: string): Record<string, number> {\n  // Build the character lookup table:\n  const alphabetIdx: Record<string, number> = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    alphabetIdx[alphabet[i]] = i\n  }\n  return alphabetIdx\n}\n\n/**\n * RFC4648 Factory\n */\nexport function rfc4648 <Base extends string, Prefix extends string> ({ name, prefix, bitsPerChar, alphabet }: { name: Base, prefix: Prefix, bitsPerChar: number, alphabet: string }): Codec<Base, Prefix> {\n  const alphabetIdx = createAlphabetIdx(alphabet)\n  return from({\n    prefix,\n    name,\n    encode (input: Uint8Array): string {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input: string): Uint8Array {\n      return decode(input, alphabetIdx, bitsPerChar, name)\n    }\n  })\n}\n", "/* global crypto */\n\nimport { from } from './hasher.js'\n\nfunction sha (name: AlgorithmIdentifier): (data: Uint8Array) => Promise<Uint8Array> {\n  return async data => new Uint8Array(await crypto.subtle.digest(name, data))\n}\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n", "import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\nimport type { MultihashDigest } from './interface.js'\n\n/**\n * Creates a multihash digest.\n */\nexport function create <Code extends number> (code: Code, digest: Uint8Array): Digest<Code, number> {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode (multihash: Uint8Array): MultihashDigest {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\nexport function equals (a: MultihashDigest, b: unknown): b is MultihashDigest {\n  if (a === b) {\n    return true\n  } else {\n    const data = b as { code?: unknown, size?: unknown, bytes?: unknown }\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest<Code extends number, Size extends number> implements MultihashDigest {\n  readonly code: Code\n  readonly size: Size\n  readonly digest: Uint8Array\n  readonly bytes: Uint8Array\n\n  /**\n   * Creates a multihash digest.\n   */\n  constructor (code: Code, size: Size, digest: Uint8Array, bytes: Uint8Array) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n\n/**\n * Used to check that the passed multihash has the passed code\n */\nexport function hasCode <T extends number> (digest: MultihashDigest, code: T): digest is MultihashDigest<T> {\n  return digest.code === code\n}\n", "/* eslint-disable */\nvar encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  // @ts-ignore\n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      // @ts-ignore\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  // @ts-ignore\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (/** @type {number} */ value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n", "import varint from './vendor/varint.js'\n\nexport function decode (data: Uint8Array, offset = 0): [number, number] {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\nexport function encodeTo (int: number, target: Uint8Array, offset = 0): Uint8Array {\n  varint.encode(int, target, offset)\n  return target\n}\n\nexport function encodingLength (int: number): number {\n  return varint.encodingLength(int)\n}\n", "import * as Digest from './digest.js'\nimport type { MultihashHasher } from './interface.js'\n\ntype Await<T> = Promise<T> | T\n\nexport function from <Name extends string, Code extends number> ({ name, code, encode }: { name: Name, code: Code, encode(input: Uint8Array): Await<Uint8Array> }): Hasher<Name, Code> {\n  return new Hasher(name, code, encode)\n}\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n */\nexport class Hasher<Name extends string, Code extends number> implements MultihashHasher<Code> {\n  readonly name: Name\n  readonly code: Code\n  readonly encode: (input: Uint8Array) => Await<Uint8Array>\n\n  constructor (name: Name, code: Code, encode: (input: Uint8Array) => Await<Uint8Array>) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  digest (input: Uint8Array): Await<Digest.Digest<Code, number>> {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n", "import { TypedEventEmitter } from 'main-event'\nimport { UnimplementedError } from '../error.js'\nimport type { PeerId, ListenerEvents, Listener } from '@libp2p/interface'\nimport type { TransportManager } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport interface WebRTCDirectListenerComponents {\n  peerId: PeerId\n  transportManager: TransportManager\n}\n\nexport interface WebRTCDirectListenerInit {\n  shutdownController: AbortController\n}\n\nexport class WebRTCDirectListener extends TypedEventEmitter<ListenerEvents> implements Listener {\n  async listen (): Promise<void> {\n    throw new UnimplementedError('WebRTCTransport.createListener')\n  }\n\n  getAddrs (): Multiaddr[] {\n    return []\n  }\n\n  updateAnnounceAddrs (): void {\n\n  }\n\n  async close (): Promise<void> {\n\n  }\n}\n", "import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n", "import { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n", "import { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n", "import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars: string[] = (alphabet.reduce<string[]>((p, c, i) => { p[i] = c; return p }, ([])))\nconst alphabetCharsToBytes: number[] = (alphabet.reduce<number[]>((p, c, i) => {\n  const codePoint = c.codePointAt(0)\n  if (codePoint == null) {\n    throw new Error(`Invalid character: ${c}`)\n  }\n  p[codePoint] = i\n  return p\n}, ([])))\n\nfunction encode (data: Uint8Array): string {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\nfunction decode (str: string): Uint8Array {\n  const byts = []\n  for (const char of str) {\n    const codePoint = char.codePointAt(0)\n    if (codePoint == null) {\n      throw new Error(`Invalid character: ${char}`)\n    }\n    const byt = alphabetCharsToBytes[codePoint]\n    if (byt == null) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n", "import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n", "import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n", "import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n", "import { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n", "import { fromString, toString } from '../bytes.js'\nimport { from } from './base.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n", "import type { ArrayBufferView, ByteView } from './interface.js'\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\nexport function encode <T> (node: T): ByteView<T> {\n  return textEncoder.encode(JSON.stringify(node))\n}\n\nexport function decode <T> (data: ByteView<T> | ArrayBufferView<T>): T {\n  return JSON.parse(textDecoder.decode(data))\n}\n", "import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code: 0x0 = 0x0\nconst name = 'identity'\n\nconst encode: (input: Uint8Array) => Uint8Array = coerce\n\nfunction digest (input: Uint8Array): Digest.Digest<typeof code, number> {\n  return Digest.create(code, encode(input))\n}\n\nexport const identity = { code, name, encode, digest }\n", "import { base32 } from './bases/base32.js'\nimport { base36 } from './bases/base36.js'\nimport { base58btc } from './bases/base58.js'\nimport { coerce } from './bytes.js'\nimport * as Digest from './hashes/digest.js'\nimport * as varint from './varint.js'\nimport type * as API from './link/interface.js'\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\nexport function format <T extends API.Link<unknown, number, number, API.Version>, Prefix extends string> (link: T, base?: API.MultibaseEncoder<Prefix>): API.ToString<T, Prefix> {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        base as API.MultibaseEncoder<'z'> ?? base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        (base ?? base32.encoder) as API.MultibaseEncoder<Prefix>\n      )\n  }\n}\n\nexport function toJSON <Link extends API.UnknownLink> (link: Link): API.LinkJSON<Link> {\n  return {\n    '/': format(link)\n  }\n}\n\nexport function fromJSON <Link extends API.UnknownLink> (json: API.LinkJSON<Link>): CID<unknown, number, number, API.Version> {\n  return CID.parse(json['/'])\n}\n\nconst cache = new WeakMap<API.UnknownLink, Map<string, string>>()\n\nfunction baseCache (cid: API.UnknownLink): Map<string, string> {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\nexport class CID<Data = unknown, Format extends number = number, Alg extends number = number, Version extends API.Version = API.Version> implements API.Link<Data, Format, Alg, Version> {\n  readonly code: Format\n  readonly version: Version\n  readonly multihash: API.MultihashDigest<Alg>\n  readonly bytes: Uint8Array\n  readonly '/': Uint8Array\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param multihash - (Multi)hash of the of the content.\n   */\n  constructor (version: Version, code: Format, multihash: API.MultihashDigest<Alg>, bytes: Uint8Array) {\n    this.code = code\n    this.version = version\n    this.multihash = multihash\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID (): this {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset (): number {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength (): number {\n    return this.bytes.byteLength\n  }\n\n  toV0 (): CID<Data, API.DAG_PB, API.SHA_256, 0> {\n    switch (this.version) {\n      case 0: {\n        return this as CID<Data, API.DAG_PB, API.SHA_256, 0>\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return (\n          CID.createV0(\n            multihash as API.MultihashDigest<API.SHA_256>\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  toV1 (): CID<Data, Format, Alg, 1> {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return this as CID<Data, Format, Alg, 1>\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  equals (other: unknown): other is CID<Data, Format, Alg, Version> {\n    return CID.equals(this, other)\n  }\n\n  static equals <Data, Format extends number, Alg extends number, Version extends API.Version>(self: API.Link<Data, Format, Alg, Version>, other: unknown): other is CID {\n    const unknown = other as { code?: unknown, version?: unknown, multihash?: unknown }\n    return (\n      unknown != null &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  toString (base?: API.MultibaseEncoder<string>): string {\n    return format(this, base)\n  }\n\n  toJSON (): API.LinkJSON<this> {\n    return { '/': format(this) }\n  }\n\n  link (): this {\n    return this\n  }\n\n  readonly [Symbol.toStringTag] = 'CID';\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] (): string {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   */\n  static asCID <Data, Format extends number, Alg extends number, Version extends API.Version, U>(input: API.Link<Data, Format, Alg, Version> | U): CID<Data, Format, Alg, Version> | null {\n    if (input == null) {\n      return null\n    }\n\n    const value = input as any\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        multihash as API.MultihashDigest<Alg>,\n        bytes ?? encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest = Digest.decode(multihash) as API.MultihashDigest<Alg>\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param digest - (Multi)hash of the of the content.\n   */\n  static create <Data, Format extends number, Alg extends number, Version extends API.Version>(version: Version, code: Format, digest: API.MultihashDigest<Alg>): CID<Data, Format, Alg, Version> {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   */\n  static createV0 <T = unknown>(digest: API.MultihashDigest<typeof SHA_256_CODE>): CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0> {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @param code - Content encoding format code.\n   * @param digest - Multihash of the content.\n   */\n  static createV1 <Data, Code extends number, Alg extends number>(code: Code, digest: API.MultihashDigest<Alg>): CID<Data, Code, Alg, 1> {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   */\n  static decode <Data, Code extends number, Alg extends number, Version extends API.Version>(bytes: API.ByteView<API.Link<Data, Code, Alg, Version>>): CID<Data, Code, Alg, Version> {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length !== 0) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   */\n  static decodeFirst <T, C extends number, A extends number, V extends API.Version>(bytes: API.ByteView<API.Link<T, C, A, V>>): [CID<T, C, A, V>, Uint8Array] {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(digest as API.MultihashDigest<API.SHA_256>)\n        : CID.createV1(specs.codec, digest)\n    return [cid as CID<T, C, A, V>, bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   */\n  static inspectBytes <T, C extends number, A extends number, V extends API.Version>(initialBytes: API.ByteView<API.Link<T, C, A, V>>): { version: V, codec: C, multihashCode: A, digestSize: number, multihashSize: number, size: number } {\n    let offset = 0\n    const next = (): number => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = next() as V\n    let codec = DAG_PB_CODE as C\n    if (version as number === 18) {\n      // CIDv0\n      version = 0 as V\n      offset = 0\n    } else {\n      codec = next() as C\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = next() as A // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   */\n  static parse <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version>(source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): CID<Data, Code, Alg, Version> {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\nfunction parseCIDtoBytes <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version> (source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): [Prefix, API.ByteView<API.Link<Data, Code, Alg, Version>>] {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base ?? base58btc\n      return [\n        base58btc.prefix as Prefix,\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base ?? base58btc\n      return [base58btc.prefix as Prefix, decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base ?? base32\n      return [base32.prefix as Prefix, decoder.decode(source)]\n    }\n    case base36.prefix: {\n      const decoder = base ?? base36\n      return [base36.prefix as Prefix, decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [source[0] as Prefix, base.decode(source)]\n    }\n  }\n}\n\nfunction toStringV0 (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<'z'>): string {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nfunction toStringV1 <Prefix extends string> (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<Prefix>): string {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\nfunction encodeCID (version: API.Version, code: number, multihash: Uint8Array): Uint8Array {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n", "import * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base2 from './bases/base2.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base8 from './bases/base8.js'\nimport * as identityBase from './bases/identity.js'\nimport * as json from './codecs/json.js'\nimport * as raw from './codecs/raw.js'\nimport * as identity from './hashes/identity.js'\nimport * as sha2 from './hashes/sha2.js'\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nexport const bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nexport const hashes = { ...sha2, ...identity }\nexport const codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes }\n", "import { InvalidParametersError } from '@libp2p/interface'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { base64url } from 'multiformats/bases/base64'\nimport { bases, digest } from 'multiformats/basics'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { CODEC_CERTHASH, MAX_MESSAGE_SIZE } from '../../constants.js'\nimport { InvalidFingerprintError, UnsupportedHashAlgorithmError } from '../../error.js'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { MultihashDigest } from 'multiformats/hashes/interface'\n\n/**\n * Get base2 | identity decoders\n */\n// @ts-expect-error - Not easy to combine these types.\nexport const multibaseDecoder: any = Object.values(bases).map(b => b.decoder).reduce((d, b) => d.or(b))\n\nconst fingerprintRegex = /^a=fingerprint:(?:\\w+-[0-9]+)\\s(?<fingerprint>(:?[0-9a-fA-F]{2})+)$/m\nexport function getFingerprintFromSdp (sdp: string | undefined): string | undefined {\n  if (sdp == null) {\n    return undefined\n  }\n\n  const searchResult = sdp.match(fingerprintRegex)\n  return searchResult?.groups?.fingerprint\n}\n\n// Extract the certhash from a multiaddr\nexport function certhash (ma: Multiaddr): string {\n  const tups = ma.stringTuples()\n  const certhash = tups.filter((tup) => tup[0] === CODEC_CERTHASH).map((tup) => tup[1])[0]\n\n  if (certhash === undefined || certhash === '') {\n    throw new InvalidParametersError(`Couldn't find a certhash component of multiaddr: ${ma.toString()}`)\n  }\n\n  return certhash\n}\n\n/**\n * Convert a certhash into a multihash\n */\nexport function decodeCerthash (certhash: string): MultihashDigest {\n  return digest.decode(multibaseDecoder.decode(certhash))\n}\n\nexport function certhashToFingerprint (certhash: string): string {\n  const multibaseDecoded = decodeCerthash(certhash)\n\n  return new Array(multibaseDecoded.bytes.length)\n    .fill(0)\n    .map((val, index) => {\n      return multibaseDecoded.digest[index].toString(16).padStart(2, '0').toUpperCase()\n    })\n    .join(':')\n}\n\n/**\n * Extract the fingerprint from a multiaddr\n */\nexport function ma2Fingerprint (ma: Multiaddr): string {\n  const multihashDecoded = decodeCerthash(certhash(ma))\n  const prefix = toSupportedHashFunction(multihashDecoded.code)\n  const fingerprint = multihashDecoded.digest.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '')\n  const sdp = fingerprint.match(/.{1,2}/g)\n\n  if (sdp == null) {\n    throw new InvalidFingerprintError(fingerprint, ma.toString())\n  }\n\n  return `${prefix} ${sdp.join(':').toUpperCase()}`\n}\n\nexport function fingerprint2Ma (fingerprint: string): Multiaddr {\n  const output = fingerprint.split(':').map(str => parseInt(str, 16))\n  const encoded = Uint8Array.from(output)\n  const digest = Digest.create(sha256.code, encoded)\n\n  return multiaddr(`/certhash/${base64url.encode(digest.bytes)}`)\n}\n\n/**\n * Normalize the hash name from a given multihash has name\n */\nexport function toSupportedHashFunction (code: number): 'sha-1' | 'sha-256' | 'sha-512' {\n  switch (code) {\n    case 0x11:\n      return 'sha-1'\n    case 0x12:\n      return 'sha-256'\n    case 0x13:\n      return 'sha-512'\n    default:\n      throw new UnsupportedHashAlgorithmError(code)\n  }\n}\n\n/**\n * Create an answer SDP message from a multiaddr - the server always operates in\n * ice-lite mode and DTLS active mode.\n */\nexport function serverAnswerFromMultiaddr (ma: Multiaddr, ufrag: string): RTCSessionDescriptionInit {\n  const { host, port, family } = ma.toOptions()\n  const fingerprint = ma2Fingerprint(ma)\n  const sdp = `v=0\no=- 0 0 IN IP${family} ${host}\ns=-\nt=0 0\na=ice-lite\nm=application ${port} UDP/DTLS/SCTP webrtc-datachannel\nc=IN IP${family} ${host}\na=mid:0\na=ice-options:ice2\na=ice-ufrag:${ufrag}\na=ice-pwd:${ufrag}\na=fingerprint:${fingerprint}\na=setup:passive\na=sctp-port:5000\na=max-message-size:${MAX_MESSAGE_SIZE}\na=candidate:1467250027 1 UDP 1467250027 ${host} ${port} typ host\na=end-of-candidates\n`\n\n  return {\n    type: 'answer',\n    sdp\n  }\n}\n\n/**\n * Create an offer SDP message from a multiaddr\n */\nexport function clientOfferFromMultiAddr (ma: Multiaddr, ufrag: string): RTCSessionDescriptionInit {\n  const { host, port, family } = ma.toOptions()\n  const sdp = `v=0\no=- 0 0 IN IP${family} ${host}\ns=-\nc=IN IP${family} ${host}\nt=0 0\na=ice-options:ice2,trickle\nm=application ${port} UDP/DTLS/SCTP webrtc-datachannel\na=mid:0\na=setup:active\na=ice-ufrag:${ufrag}\na=ice-pwd:${ufrag}\na=fingerprint:sha-256 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00\na=sctp-port:5000\na=max-message-size:${MAX_MESSAGE_SIZE}\na=candidate:1467250027 1 UDP 1467250027 ${host} ${port} typ host\na=end-of-candidates\n`\n\n  return {\n    type: 'offer',\n    sdp\n  }\n}\n\n/**\n * Replace (munge) the ufrag and password values in a SDP\n */\nexport function munge (desc: RTCSessionDescriptionInit, ufrag: string): RTCSessionDescriptionInit {\n  if (desc.sdp === undefined) {\n    throw new InvalidParametersError(\"Can't munge a missing SDP\")\n  }\n\n  const lineBreak = desc.sdp.includes('\\r\\n') ? '\\r\\n' : '\\n'\n\n  desc.sdp = desc.sdp\n    .replace(/\\na=ice-ufrag:[^\\n]*\\n/, '\\na=ice-ufrag:' + ufrag + lineBreak)\n    .replace(/\\na=ice-pwd:[^\\n]*\\n/, '\\na=ice-pwd:' + ufrag + lineBreak)\n  return desc\n}\n", "import * as Digest from 'multiformats/hashes/digest'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { concat } from 'uint8arrays/concat'\nimport { fromString as uint8arrayFromString } from 'uint8arrays/from-string'\nimport * as sdp from './sdp.js'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nconst PREFIX = uint8arrayFromString('libp2p-webrtc-noise:')\n\n/**\n * Generate a noise prologue from the peer connection's certificate.\n * noise prologue = bytes('libp2p-webrtc-noise:') + noise-server fingerprint + noise-client fingerprint\n */\nexport function generateNoisePrologue (localFingerprint: string, remoteAddr: Multiaddr, role: 'client' | 'server'): Uint8Array {\n  const localFpString = localFingerprint.trim().toLowerCase().replaceAll(':', '')\n  const localFpArray = uint8arrayFromString(localFpString, 'hex')\n  const local = Digest.create(sha256.code, localFpArray)\n  const remote: Uint8Array = sdp.multibaseDecoder.decode(sdp.certhash(remoteAddr))\n  const byteLength = PREFIX.byteLength + local.bytes.byteLength + remote.byteLength\n\n  if (role === 'server') {\n    return concat([PREFIX, remote, local.bytes], byteLength)\n  }\n\n  return concat([PREFIX, local.bytes, remote], byteLength)\n}\n", "import { noise } from '@chainsafe/libp2p-noise'\nimport { raceEvent } from 'race-event'\nimport { WebRTCTransportError } from '../../error.js'\nimport { WebRTCMultiaddrConnection } from '../../maconn.js'\nimport { DataChannelMuxerFactory } from '../../muxer.js'\nimport { createStream } from '../../stream.js'\nimport { isFirefox } from '../../util.js'\nimport { generateNoisePrologue } from './generate-noise-prologue.js'\nimport * as sdp from './sdp.js'\nimport type { DirectRTCPeerConnection } from './get-rtcpeerconnection.js'\nimport type { DataChannelOptions } from '../../index.js'\nimport type { ComponentLogger, Connection, CounterGroup, Logger, Metrics, PeerId, PrivateKey, Upgrader } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport interface ConnectOptions {\n  log: Logger\n  logger: ComponentLogger\n  metrics?: Metrics\n  events?: CounterGroup\n  remoteAddr: Multiaddr\n  role: 'client' | 'server'\n  dataChannel?: DataChannelOptions\n  upgrader: Upgrader\n  peerId: PeerId\n  remotePeerId?: PeerId\n  signal: AbortSignal\n  privateKey: PrivateKey\n}\n\nexport interface ClientOptions extends ConnectOptions {\n  role: 'client'\n}\n\nexport interface ServerOptions extends ConnectOptions {\n  role: 'server'\n}\n\nconst CONNECTION_STATE_CHANGE_EVENT = isFirefox ? 'iceconnectionstatechange' : 'connectionstatechange'\n\nexport async function connect (peerConnection: DirectRTCPeerConnection, ufrag: string, options: ClientOptions): Promise<Connection>\nexport async function connect (peerConnection: DirectRTCPeerConnection, ufrag: string, options: ServerOptions): Promise<void>\nexport async function connect (peerConnection: DirectRTCPeerConnection, ufrag: string, options: ConnectOptions): Promise<any> {\n  // create data channel for running the noise handshake. Once the data\n  // channel is opened, the listener will initiate the noise handshake. This\n  // is used to confirm the identity of the peer.\n  const handshakeDataChannel = peerConnection.createDataChannel('', { negotiated: true, id: 0 })\n\n  try {\n    if (options.role === 'client') {\n      // the client has to set the local offer before the remote answer\n\n      // Create offer and munge sdp with ufrag == pwd. This allows the remote to\n      // respond to STUN messages without performing an actual SDP exchange.\n      // This is because it can infer the passwd field by reading the USERNAME\n      // attribute of the STUN message.\n      options.log.trace('client creating local offer')\n      const offerSdp = await peerConnection.createOffer()\n      options.log.trace('client created local offer %s', offerSdp.sdp)\n      const mungedOfferSdp = sdp.munge(offerSdp, ufrag)\n      options.log.trace('client setting local offer %s', mungedOfferSdp.sdp)\n      await peerConnection.setLocalDescription(mungedOfferSdp)\n\n      const answerSdp = sdp.serverAnswerFromMultiaddr(options.remoteAddr, ufrag)\n      options.log.trace('client setting server description %s', answerSdp.sdp)\n      await peerConnection.setRemoteDescription(answerSdp)\n    } else {\n      // the server has to set the remote offer before the local answer\n      const offerSdp = sdp.clientOfferFromMultiAddr(options.remoteAddr, ufrag)\n      options.log.trace('server setting client %s %s', offerSdp.type, offerSdp.sdp)\n      await peerConnection.setRemoteDescription(offerSdp)\n\n      // Create offer and munge sdp with ufrag == pwd. This allows the remote to\n      // respond to STUN messages without performing an actual SDP exchange.\n      // This is because it can infer the passwd field by reading the USERNAME\n      // attribute of the STUN message.\n      options.log.trace('server creating local answer')\n      const answerSdp = await peerConnection.createAnswer()\n      options.log.trace('server created local answer')\n      const mungedAnswerSdp = sdp.munge(answerSdp, ufrag)\n      options.log.trace('server setting local description %s', answerSdp.sdp)\n      await peerConnection.setLocalDescription(mungedAnswerSdp)\n    }\n\n    if (handshakeDataChannel.readyState !== 'open') {\n      options.log.trace('%s wait for handshake channel to open, starting status %s', options.role, handshakeDataChannel.readyState)\n      await raceEvent(handshakeDataChannel, 'open', options.signal)\n    }\n\n    options.log.trace('%s handshake channel opened', options.role)\n\n    if (options.role === 'server') {\n      // now that the connection has been opened, add the remote's certhash to\n      // it's multiaddr so we can complete the noise handshake\n      const remoteFingerprint = peerConnection.remoteFingerprint()?.value ?? ''\n      options.remoteAddr = options.remoteAddr.encapsulate(sdp.fingerprint2Ma(remoteFingerprint))\n    }\n\n    // Do noise handshake.\n    // Set the Noise Prologue to libp2p-webrtc-noise:<FINGERPRINTS> before\n    // starting the actual Noise handshake.\n    // <FINGERPRINTS> is the concatenation of the of the two TLS fingerprints\n    // of A (responder) and B (initiator) in their byte representation.\n    const localFingerprint = sdp.getFingerprintFromSdp(peerConnection.localDescription?.sdp)\n\n    if (localFingerprint == null) {\n      throw new WebRTCTransportError('Could not get fingerprint from local description sdp')\n    }\n\n    options.log.trace('%s performing noise handshake', options.role)\n    const noisePrologue = generateNoisePrologue(localFingerprint, options.remoteAddr, options.role)\n\n    // Since we use the default crypto interface and do not use a static key\n    // or early data, we pass in undefined for these parameters.\n    const connectionEncrypter = noise({ prologueBytes: noisePrologue })(options)\n\n    const handshakeStream = createStream({\n      channel: handshakeDataChannel,\n      direction: 'outbound',\n      handshake: true,\n      logger: options.logger,\n      ...(options.dataChannel ?? {})\n    })\n\n    // Creating the connection before completion of the noise\n    // handshake ensures that the stream opening callback is set up\n    const maConn = new WebRTCMultiaddrConnection(options, {\n      peerConnection,\n      remoteAddr: options.remoteAddr,\n      timeline: {\n        open: Date.now()\n      },\n      metrics: options.events\n    })\n\n    peerConnection.addEventListener(CONNECTION_STATE_CHANGE_EVENT, () => {\n      switch (peerConnection.connectionState) {\n        case 'failed':\n        case 'disconnected':\n        case 'closed':\n          maConn.close().catch((err) => {\n            options.log.error('error closing connection', err)\n            maConn.abort(err)\n          })\n          break\n        default:\n          break\n      }\n    })\n\n    // Track opened peer connection\n    options.events?.increment({ peer_connection: true })\n\n    const muxerFactory = new DataChannelMuxerFactory(options, {\n      peerConnection,\n      metrics: options.events,\n      dataChannelOptions: options.dataChannel\n    })\n\n    if (options.role === 'client') {\n      // For outbound connections, the remote is expected to start the noise\n      // handshake. Therefore, we need to secure an inbound noise connection\n      // from the server.\n      options.log.trace('%s secure inbound', options.role)\n      await connectionEncrypter.secureInbound(handshakeStream, {\n        remotePeer: options.remotePeerId,\n        signal: options.signal,\n        skipStreamMuxerNegotiation: true\n      })\n\n      options.log.trace('%s upgrade outbound', options.role)\n      return await options.upgrader.upgradeOutbound(maConn, {\n        skipProtection: true,\n        skipEncryption: true,\n        muxerFactory,\n        signal: options.signal\n      })\n    }\n\n    // For inbound connections, the server is are expected to start the noise\n    // handshake. Therefore, we need to secure an outbound noise connection from\n    // the client.\n    options.log.trace('%s secure outbound', options.role)\n    const result = await connectionEncrypter.secureOutbound(handshakeStream, {\n      remotePeer: options.remotePeerId,\n      signal: options.signal,\n      skipStreamMuxerNegotiation: true\n    })\n\n    maConn.remoteAddr = maConn.remoteAddr.encapsulate(`/p2p/${result.remotePeer}`)\n\n    options.log.trace('%s upgrade inbound', options.role)\n\n    await options.upgrader.upgradeInbound(maConn, {\n      skipProtection: true,\n      skipEncryption: true,\n      muxerFactory,\n      signal: options.signal\n    })\n  } catch (err) {\n    handshakeDataChannel.close()\n\n    throw err\n  }\n}\n", "export async function createDialerRTCPeerConnection (role: 'client' | 'server', ufrag: string, rtcConfiguration?: RTCConfiguration | (() => RTCConfiguration | Promise<RTCConfiguration>), certificate?: RTCCertificate): Promise<RTCPeerConnection> {\n  if (certificate == null) {\n    // ECDSA is preferred over RSA here. From our testing we find that P-256 elliptic\n    // curve is supported by Pion, webrtc-rs, as well as Chromium (P-228 and P-384\n    // was not supported in Chromium). We use the same hash function as found in the\n    // multiaddr if it is supported.\n    certificate = await RTCPeerConnection.generateCertificate({\n      name: 'ECDSA',\n\n      // @ts-expect-error missing from lib.dom.d.ts but required by chrome\n      namedCurve: 'P-256'\n      // hash: sdp.toSupportedHashFunction(hashName)\n    })\n  }\n\n  const rtcConfig = typeof rtcConfiguration === 'function' ? await rtcConfiguration() : rtcConfiguration\n\n  return new RTCPeerConnection({\n    ...(rtcConfig ?? {}),\n    certificates: [certificate]\n  })\n}\n", "import { privateKeyToCryptoKeyPair } from '@libp2p/crypto/keys'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport type { PrivateKey } from '@libp2p/interface'\n\nexport function toBuffer (uint8Array: Uint8Array): Buffer {\n  return Buffer.from(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength)\n}\n\nexport async function formatAsPem (privateKey: PrivateKey): Promise<string> {\n  const keyPair = await privateKeyToCryptoKeyPair(privateKey)\n  const exported = await crypto.subtle.exportKey('pkcs8', keyPair.privateKey)\n\n  return [\n    '-----BEGIN PRIVATE KEY-----',\n    ...uint8ArrayToString(new Uint8Array(exported), 'base64pad').split(/(.{64})/).filter(Boolean),\n    '-----END PRIVATE KEY-----'\n  ].join('\\n')\n}\n", "import { generateKeyPair, privateKeyToCryptoKeyPair } from '@libp2p/crypto/keys'\nimport { InvalidParametersError, NotFoundError, NotStartedError, serviceCapabilities, transportSymbol } from '@libp2p/interface'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { WebRTCDirect } from '@multiformats/multiaddr-matcher'\nimport { BasicConstraintsExtension, X509Certificate, X509CertificateGenerator } from '@peculiar/x509'\nimport { Key } from 'interface-datastore'\nimport { TypedEventEmitter } from 'main-event'\nimport { base64url } from 'multiformats/bases/base64'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { DEFAULT_CERTIFICATE_DATASTORE_KEY, DEFAULT_CERTIFICATE_LIFESPAN, DEFAULT_CERTIFICATE_PRIVATE_KEY_NAME, DEFAULT_CERTIFICATE_RENEWAL_THRESHOLD } from '../constants.js'\nimport { genUfrag } from '../util.js'\nimport { WebRTCDirectListener } from './listener.js'\nimport { connect } from './utils/connect.js'\nimport { createDialerRTCPeerConnection } from './utils/get-rtcpeerconnection.js'\nimport { formatAsPem } from './utils/pem.js'\nimport type { DataChannelOptions, TransportCertificate } from '../index.js'\nimport type { WebRTCDialEvents } from '../private-to-private/transport.js'\nimport type { CreateListenerOptions, Transport, Listener, ComponentLogger, Logger, Connection, CounterGroup, Metrics, PeerId, DialTransportOptions, PrivateKey, Upgrader, Startable } from '@libp2p/interface'\nimport type { TransportManager } from '@libp2p/interface-internal'\nimport type { Keychain } from '@libp2p/keychain'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { Datastore } from 'interface-datastore'\nimport type { TypedEventTarget } from 'main-event'\n\nexport interface WebRTCDirectTransportComponents {\n  peerId: PeerId\n  privateKey: PrivateKey\n  metrics?: Metrics\n  logger: ComponentLogger\n  transportManager: TransportManager\n  upgrader: Upgrader\n  keychain?: Keychain\n  datastore: Datastore\n}\n\nexport interface WebRTCMetrics {\n  dialerEvents: CounterGroup\n}\n\nexport interface WebRTCTransportDirectInit {\n  /**\n   * The default configuration used by all created RTCPeerConnections\n   */\n  rtcConfiguration?: RTCConfiguration | (() => RTCConfiguration | Promise<RTCConfiguration>)\n\n  /**\n   * The default configuration used by all created RTCDataChannels\n   */\n  dataChannel?: DataChannelOptions\n\n  /**\n   * @deprecated use `certificate` instead - this option will be removed in a future release\n   */\n  certificates?: TransportCertificate[]\n\n  /**\n   * Use an existing TLS certificate to secure incoming connections or supply\n   * settings to generate one.\n   *\n   * This must be an ECDSA certificate using the P-256 curve.\n   *\n   * From our testing we find that P-256 elliptic curve is supported by Pion,\n   * webrtc-rs, as well as Chromium (P-228 and P-384 was not supported in\n   * Chromium).\n   */\n  certificate?: TransportCertificate\n\n  /**\n   * @deprecated this setting is ignored and will be removed in a future release\n   */\n  useLibjuice?: boolean\n\n  /**\n   * The key the certificate is stored in the datastore under\n   *\n   * @default '/libp2p/webrtc-direct/certificate'\n   */\n  certificateDatastoreKey?: string\n\n  /**\n   * The name the certificate private key is stored in the keychain with\n   *\n   * @default 'webrtc-direct-certificate-private-key'\n   */\n  certificateKeychainName?: string\n\n  /**\n   * Number of ms a certificate should be valid for (defaults to 14 days)\n   *\n   * @default 2_592_000_000\n   */\n  certificateLifespan?: number\n\n  /**\n   * Certificates will be renewed this many ms before expiry (defaults to 1 day)\n   *\n   * @default 86_400_000\n   */\n  certificateRenewalThreshold?: number\n}\n\nexport interface WebRTCDirectTransportCertificateEvents {\n  'certificate:renew': CustomEvent<TransportCertificate>\n}\n\nexport class WebRTCDirectTransport implements Transport, Startable {\n  private readonly log: Logger\n  private readonly metrics?: WebRTCMetrics\n  private readonly components: WebRTCDirectTransportComponents\n  private readonly init: WebRTCTransportDirectInit\n  private certificate?: TransportCertificate\n  private privateKey?: PrivateKey\n  private readonly emitter: TypedEventTarget<WebRTCDirectTransportCertificateEvents>\n  private renewCertificateTask?: ReturnType<typeof setTimeout>\n\n  constructor (components: WebRTCDirectTransportComponents, init: WebRTCTransportDirectInit = {}) {\n    this.log = components.logger.forComponent('libp2p:webrtc-direct')\n    this.components = components\n    this.init = init\n    this.emitter = new TypedEventEmitter()\n\n    if (init.certificateLifespan != null && init.certificateRenewalThreshold != null && init.certificateRenewalThreshold >= init.certificateLifespan) {\n      throw new InvalidParametersError('Certificate renewal threshold must be less than certificate lifespan')\n    }\n\n    if (components.metrics != null) {\n      this.metrics = {\n        dialerEvents: components.metrics.registerCounterGroup('libp2p_webrtc-direct_dialer_events_total', {\n          label: 'event',\n          help: 'Total count of WebRTC-direct dial events by type'\n        })\n      }\n    }\n  }\n\n  readonly [transportSymbol] = true\n\n  readonly [Symbol.toStringTag] = '@libp2p/webrtc-direct'\n\n  readonly [serviceCapabilities]: string[] = [\n    '@libp2p/transport'\n  ]\n\n  async start (): Promise<void> {\n    this.certificate = await this.getCertificate()\n  }\n\n  async stop (): Promise<void> {\n    if (this.renewCertificateTask != null) {\n      clearTimeout(this.renewCertificateTask)\n    }\n\n    this.certificate = undefined\n  }\n\n  /**\n   * Dial a given multiaddr\n   */\n  async dial (ma: Multiaddr, options: DialTransportOptions<WebRTCDialEvents>): Promise<Connection> {\n    this.log('dial %a', ma)\n    // do not create RTCPeerConnection if the signal has already been aborted\n    options.signal.throwIfAborted()\n\n    let theirPeerId: PeerId | undefined\n    const remotePeerString = ma.getPeerId()\n    if (remotePeerString != null) {\n      theirPeerId = peerIdFromString(remotePeerString)\n    }\n\n    const ufrag = genUfrag()\n\n    // https://github.com/libp2p/specs/blob/master/webrtc/webrtc-direct.md#browser-to-public-server\n    const peerConnection = await createDialerRTCPeerConnection('client', ufrag, typeof this.init.rtcConfiguration === 'function' ? await this.init.rtcConfiguration() : this.init.rtcConfiguration ?? {})\n\n    try {\n      return await connect(peerConnection, ufrag, {\n        role: 'client',\n        log: this.log,\n        logger: this.components.logger,\n        metrics: this.components.metrics,\n        events: this.metrics?.dialerEvents,\n        signal: options.signal,\n        remoteAddr: ma,\n        dataChannel: this.init.dataChannel,\n        upgrader: options.upgrader,\n        peerId: this.components.peerId,\n        remotePeerId: theirPeerId,\n        privateKey: this.components.privateKey\n      })\n    } catch (err) {\n      peerConnection.close()\n      throw err\n    }\n  }\n\n  /**\n   * Create a transport listener - this will throw in browsers\n   */\n  createListener (options: CreateListenerOptions): Listener {\n    if (this.certificate == null) {\n      throw new NotStartedError()\n    }\n\n    return new WebRTCDirectListener(this.components, {\n      ...this.init,\n      ...options,\n      certificate: this.certificate,\n      emitter: this.emitter\n    })\n  }\n\n  /**\n   * Filter check for all Multiaddrs that this transport can listen on\n   */\n  listenFilter (multiaddrs: Multiaddr[]): Multiaddr[] {\n    return multiaddrs.filter(WebRTCDirect.exactMatch)\n  }\n\n  /**\n   * Filter check for all Multiaddrs that this transport can dial\n   */\n  dialFilter (multiaddrs: Multiaddr[]): Multiaddr[] {\n    return this.listenFilter(multiaddrs)\n  }\n\n  private async getCertificate (forceRenew?: boolean): Promise<TransportCertificate> {\n    if (isTransportCertificate(this.init.certificate)) {\n      this.log('using provided TLS certificate')\n      return this.init.certificate\n    }\n\n    const privateKey = await this.loadOrCreatePrivateKey()\n    const { pem, certhash } = await this.loadOrCreateCertificate(privateKey, forceRenew)\n\n    return {\n      privateKey: await formatAsPem(privateKey),\n      pem,\n      certhash\n    }\n  }\n\n  private async loadOrCreatePrivateKey (): Promise<PrivateKey> {\n    if (this.privateKey != null) {\n      return this.privateKey\n    }\n\n    const keychainName = this.init.certificateKeychainName ?? DEFAULT_CERTIFICATE_PRIVATE_KEY_NAME\n    const keychain = this.getKeychain()\n\n    try {\n      if (keychain == null) {\n        this.log('no keychain configured - not checking for stored private key')\n        throw new NotFoundError()\n      }\n\n      this.log.trace('checking for stored private key')\n      this.privateKey = await keychain.exportKey(keychainName)\n    } catch (err: any) {\n      if (err.name !== 'NotFoundError') {\n        throw err\n      }\n\n      this.log.trace('generating private key')\n      this.privateKey = await generateKeyPair('ECDSA', 'P-256')\n\n      if (keychain != null) {\n        this.log.trace('storing private key')\n        await keychain.importKey(keychainName, this.privateKey)\n      } else {\n        this.log('no keychain configured - not storing private key')\n      }\n    }\n\n    return this.privateKey\n  }\n\n  private async loadOrCreateCertificate (privateKey: PrivateKey, forceRenew?: boolean): Promise<{ pem: string, certhash: string }> {\n    if (this.certificate != null && forceRenew !== true) {\n      return this.certificate\n    }\n\n    let cert: X509Certificate\n    const dsKey = new Key(this.init.certificateDatastoreKey ?? DEFAULT_CERTIFICATE_DATASTORE_KEY)\n    const keyPair = await privateKeyToCryptoKeyPair(privateKey)\n\n    try {\n      if (forceRenew === true) {\n        this.log.trace('forcing renewal of TLS certificate')\n        throw new NotFoundError()\n      }\n\n      this.log.trace('checking for stored TLS certificate')\n      cert = await this.loadCertificate(dsKey, keyPair)\n    } catch (err: any) {\n      if (err.name !== 'NotFoundError') {\n        throw err\n      }\n\n      this.log.trace('generating new TLS certificate')\n      cert = await this.createCertificate(dsKey, keyPair)\n    }\n\n    // set timeout to renew certificate\n    let renewTime = (cert.notAfter.getTime() - (this.init.certificateRenewalThreshold ?? DEFAULT_CERTIFICATE_RENEWAL_THRESHOLD)) - Date.now()\n\n    if (renewTime < 0) {\n      renewTime = 100\n    }\n\n    this.log('will renew TLS certificate after %d ms', renewTime)\n\n    this.renewCertificateTask = setTimeout(() => {\n      this.log('renewing TLS certificate')\n      this.getCertificate(true)\n        .then(cert => {\n          this.certificate = cert\n          this.emitter.safeDispatchEvent('certificate:renew', {\n            detail: cert\n          })\n        })\n        .catch(err => {\n          this.log.error('could not renew certificate - %e', err)\n        })\n    }, renewTime)\n\n    return {\n      pem: cert.toString('pem'),\n      certhash: base64url.encode((await sha256.digest(new Uint8Array(cert.rawData))).bytes)\n    }\n  }\n\n  async loadCertificate (dsKey: Key, keyPair: CryptoKeyPair): Promise<X509Certificate> {\n    const buf = await this.components.datastore.get(dsKey)\n    const cert = new X509Certificate(buf)\n\n    // check expiry date\n    const expiryTime = cert.notAfter.getTime() - (this.init.certificateRenewalThreshold ?? DEFAULT_CERTIFICATE_RENEWAL_THRESHOLD)\n\n    if (Date.now() > expiryTime) {\n      this.log('stored TLS certificate has expired')\n      // act as if no certificate was present\n      throw new NotFoundError()\n    }\n\n    this.log('loaded certificate, expires in %d ms', expiryTime)\n\n    // check public keys match\n    const exportedCertKey = await cert.publicKey.export(crypto)\n    const rawCertKey = await crypto.subtle.exportKey('raw', exportedCertKey)\n    const rawKeyPairKey = await crypto.subtle.exportKey('raw', keyPair.publicKey)\n\n    if (!uint8ArrayEquals(\n      new Uint8Array(rawCertKey, 0, rawCertKey.byteLength),\n      new Uint8Array(rawKeyPairKey, 0, rawKeyPairKey.byteLength)\n    )) {\n      this.log('stored TLS certificate public key did not match public key from private key')\n      throw new NotFoundError()\n    }\n\n    this.log('loaded certificate, expiry time is %o', expiryTime)\n\n    return cert\n  }\n\n  async createCertificate (dsKey: Key, keyPair: CryptoKeyPair): Promise<X509Certificate> {\n    const notBefore = new Date()\n    const notAfter = new Date(Date.now() + (this.init.certificateLifespan ?? DEFAULT_CERTIFICATE_LIFESPAN))\n\n    // have to set ms to 0 to work around https://github.com/PeculiarVentures/x509/issues/73\n    notBefore.setMilliseconds(0)\n    notAfter.setMilliseconds(0)\n\n    const cert = await X509CertificateGenerator.createSelfSigned({\n      serialNumber: (BigInt(Math.random().toString().replace('.', '')) * 100000n).toString(16),\n      name: 'CN=example.com, C=US, L=CA, O=example, ST=CA',\n      notBefore,\n      notAfter,\n      keys: keyPair,\n      extensions: [\n        new BasicConstraintsExtension(false, undefined, true)\n      ]\n    }, crypto)\n\n    if (this.getKeychain() != null) {\n      this.log.trace('storing TLS certificate')\n      await this.components.datastore.put(dsKey, uint8ArrayFromString(cert.toString('pem')))\n    } else {\n      this.log('no keychain is configured so not storing TLS certificate since the private key will not be reused')\n    }\n\n    return cert\n  }\n\n  private getKeychain (): Keychain | undefined {\n    try {\n      return this.components.keychain\n    } catch {}\n  }\n}\n\nfunction isTransportCertificate (obj?: any): obj is TransportCertificate {\n  if (obj == null) {\n    return false\n  }\n\n  return typeof obj.privateKey === 'string' && typeof obj.pem === 'string' && typeof obj.certhash === 'string'\n}\n", "/**\n * @packageDocumentation\n *\n * A [libp2p transport](https://docs.libp2p.io/concepts/transports/overview/) based on [WebRTC data channels](https://webrtc.org/).\n *\n * [WebRTC](https://www.w3.org/TR/webrtc/) is a specification that allows real-time communication between nodes - it's commonly used in browser video conferencing applications but it also provides a reliable data transport mechanism called [data channels](https://www.w3.org/TR/webrtc/#peer-to-peer-data-api) which libp2p uses to facilitate [protocol streams](https://docs.libp2p.io/concepts/multiplex/overview/) between peers.\n *\n * There are two transports exposed by this module, [webRTC](https://github.com/libp2p/specs/blob/master/webrtc/webrtc.md) and [webRTCDirect](https://github.com/libp2p/specs/blob/master/webrtc/webrtc-direct.md).\n *\n * ## WebRTC vs WebRTC Direct\n *\n * The connection establishment phase of WebRTC involves a handshake using [SDP](https://en.wikipedia.org/wiki/Session_Description_Protocol) during which two peers will exchange information such as open ports, network addresses and required capabilities.\n *\n * A third party is usually necessary to carry out this handshake, forwarding messages between the two peers until they can make a direct connection between themselves.\n *\n * The WebRTC transport uses libp2p [Circuit Relay](https://docs.libp2p.io/concepts/nat/circuit-relay/)s to forward SDP messages. Once a direct connection is formed the relay plays no further part in the exchange.\n *\n * WebRTC Direct uses a technique known as [SDP munging](https://webrtchacks.com/not-a-guide-to-sdp-munging/) to skip the handshake step, instead encoding enough information in the connection request that the responder can derive what would have been in the handshake messages and so requires no third parties to establish a connection.\n *\n * A WebRTC Direct multiaddr also includes a certhash of the target peer - this is used to allow opening a connection to the remote, which would otherwise be denied due to use of a self-signed certificate.\n *\n * In both cases, once the connection is established a [Noise handshake](https://noiseprotocol.org/noise.html) is carried out to ensure that the remote peer has the private key that corresponds to the public key that makes up their PeerId, giving you both encryption and authentication.\n *\n * @example WebRTC\n *\n * WebRTC requires use of a relay to connect two nodes. The listener first discovers a relay server and makes a reservation, then the dialer can connect via the relayed address.\n *\n * ```TypeScript\n * import { noise } from '@chainsafe/libp2p-noise'\n * import { yamux } from '@chainsafe/libp2p-yamux'\n * import { echo } from '@libp2p/echo'\n * import { circuitRelayTransport, circuitRelayServer } from '@libp2p/circuit-relay-v2'\n * import { identify } from '@libp2p/identify'\n * import { webRTC } from '@libp2p/webrtc'\n * import { webSockets } from '@libp2p/websockets'\n * import { WebRTC } from '@multiformats/multiaddr-matcher'\n * import delay from 'delay'\n * import { pipe } from 'it-pipe'\n * import { createLibp2p } from 'libp2p'\n * import type { Multiaddr } from '@multiformats/multiaddr'\n *\n * // the relay server listens on a transport dialable by the listener and the\n * // dialer, and has a relay service configured\n * const relay = await createLibp2p({\n *   addresses: {\n *   listen: ['/ip4/127.0.0.1/tcp/0/ws']\n *   },\n *   transports: [\n *     webSockets()\n *   ],\n *   connectionEncrypters: [noise()],\n *   streamMuxers: [yamux()],\n *   connectionGater: {\n *     denyDialMultiaddr: () => false\n *   },\n *   services: {\n *     identify: identify(),\n *     relay: circuitRelayServer()\n *   }\n * })\n *\n * // the listener has a WebSocket transport to dial the relay, a Circuit Relay\n * // transport to make a reservation, and a WebRTC transport to accept incoming\n * // WebRTC connections\n * const listener = await createLibp2p({\n *   addresses: {\n *     listen: [\n *       '/p2p-circuit',\n *       '/webrtc'\n *     ]\n *   },\n *   transports: [\n *     webSockets(),\n *     webRTC(),\n *     circuitRelayTransport()\n *   ],\n *   connectionEncrypters: [noise()],\n *   streamMuxers: [yamux()],\n *   connectionGater: {\n *     denyDialMultiaddr: () => false\n *   },\n *   services: {\n *     identify: identify(),\n *     echo: echo()\n *   }\n * })\n *\n * // the listener dials the relay (or discovers a public relay via some other\n * // method)\n * await listener.dial(relay.getMultiaddrs(), {\n *   signal: AbortSignal.timeout(5000)\n * })\n *\n * let webRTCMultiaddr: Multiaddr | undefined\n *\n * // wait for the listener to make a reservation on the relay\n * while (true) {\n *   webRTCMultiaddr = listener.getMultiaddrs().find(ma => WebRTC.matches(ma))\n *\n *   if (webRTCMultiaddr != null) {\n *     break\n *   }\n *\n *   // try again later\n *   await delay(1000)\n * }\n *\n * // the dialer has Circuit Relay, WebSocket and WebRTC transports to dial\n * // the listener via the relay, complete the SDP handshake and establish a\n * // direct WebRTC connection\n * const dialer = await createLibp2p({\n *   transports: [\n *     webSockets(),\n *     webRTC(),\n *     circuitRelayTransport()\n *   ],\n *   connectionEncrypters: [noise()],\n *   streamMuxers: [yamux()],\n *   connectionGater: {\n *     denyDialMultiaddr: () => false\n *   },\n *   services: {\n *     identify: identify(),\n *     echo: echo()\n *   }\n * })\n *\n * // dial the listener and open an echo protocol stream\n * const stream = await dialer.dialProtocol(webRTCMultiaddr, dialer.services.echo.protocol, {\n *   signal: AbortSignal.timeout(5000)\n * })\n *\n * // we can now stop the relay\n * await relay.stop()\n *\n * // send/receive some data from the remote peer via a direct connection\n * await pipe(\n *   [new TextEncoder().encode('hello world')],\n *   stream,\n *   async source => {\n *     for await (const buf of source) {\n *       console.info(new TextDecoder().decode(buf.subarray()))\n *     }\n *   }\n * )\n * ```\n *\n * @example WebRTC Direct\n *\n * WebRTC Direct allows a client to establish a WebRTC connection to a server\n * without using a relay to first exchange SDP messages.\n *\n * Instead the server listens on a public UDP port and embeds its certificate\n * hash in the published multiaddr. It derives the client's SDP offer based on\n * the incoming IP/port of STUN messages sent to this public port.\n *\n * The client derives the server's SDP answer based on the information in the\n * multiaddr so no SDP handshake via a third party is required.\n *\n * Full details of the connection protocol can be found in the [WebRTC Direct spec](https://github.com/libp2p/specs/blob/master/webrtc/webrtc-direct.md).\n *\n * Browsers cannot listen on WebRTC Direct addresses since they cannot open\n * ports, but they can dial all spec-compliant servers.\n *\n * Node.js/go and rust-libp2p can listen on and dial WebRTC Direct addresses.\n *\n * ```TypeScript\n * import { createLibp2p } from 'libp2p'\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { pipe } from 'it-pipe'\n * import { fromString, toString } from 'uint8arrays'\n * import { webRTCDirect } from '@libp2p/webrtc'\n *\n * const listener = await createLibp2p({\n *   addresses: {\n *     listen: [\n *       '/ip4/0.0.0.0/udp/0/webrtc-direct'\n *     ]\n *   },\n *   transports: [\n *     webRTCDirect()\n *   ]\n * })\n *\n * await listener.start()\n *\n * const dialer = await createLibp2p({\n *   transports: [\n *     webRTCDirect()\n *   ]\n * })\n *\n * await dialer.start()\n *\n * const stream = await dialer.dialProtocol(listener.getMultiaddrs(), '/my-protocol/1.0.0', {\n *   signal: AbortSignal.timeout(10_000)\n * })\n *\n * await pipe(\n *   [fromString(`Hello js-libp2p-webrtc\\n`)],\n *   stream,\n *   async function (source) {\n *     for await (const buf of source) {\n *       console.info(toString(buf.subarray()))\n *     }\n *   }\n * )\n * ```\n *\n * ## WebRTC Direct certificate hashes\n *\n * WebRTC Direct listeners publish the hash of their TLS certificate as part of\n * the listening multiaddr.\n *\n * By default these certificates are generated at start up using an ephemeral\n * keypair that only exists while the node is running.\n *\n * This means that the certificate hashes change when the node is restarted,\n * which can be undesirable if multiaddrs are intended to be long lived (e.g.\n * if the node is used as a network bootstrapper).\n *\n * To reuse the same certificate and keypair, configure a persistent datastore\n * and the [@libp2p/keychain](https://www.npmjs.com/package/@libp2p/keychain)\n * service as part of your service map:\n *\n * @example Reuse TLS certificates after restart\n *\n * ```ts\n * import { LevelDatastore } from 'datastore-level'\n * import { webRTCDirect } from '@libp2p/webrtc'\n * import { keychain } from '@libp2p/keychain'\n * import { createLibp2p } from 'libp2p'\n *\n * // store data on disk between restarts\n * const datastore = new LevelDatastore('/path/to/store')\n *\n * const listener = await createLibp2p({\n *   addresses: {\n *     listen: [\n *       '/ip4/0.0.0.0/udp/0/webrtc-direct'\n *     ]\n *   },\n *   datastore,\n *   transports: [\n *     webRTCDirect()\n *   ],\n *   services: {\n *     keychain: keychain()\n *   }\n * })\n *\n * await listener.start()\n *\n * console.info(listener.getMultiaddrs())\n * // /ip4/...../udp/../webrtc-direct/certhash/foo\n *\n * await listener.stop()\n * await listener.start()\n *\n * console.info(listener.getMultiaddrs())\n * // /ip4/...../udp/../webrtc-direct/certhash/foo\n * ```\n */\n\nimport { WebRTCTransport } from './private-to-private/transport.js'\nimport { WebRTCDirectTransport } from './private-to-public/transport.js'\nimport type { WebRTCTransportComponents, WebRTCTransportInit } from './private-to-private/transport.js'\nimport type { WebRTCTransportDirectInit, WebRTCDirectTransportComponents } from './private-to-public/transport.js'\nimport type { Transport } from '@libp2p/interface'\n\nexport interface DataChannelOptions {\n  /**\n   * The maximum message size to be sent over the channel in bytes\n   *\n   * @default 16_384\n   */\n  maxMessageSize?: number\n\n  /**\n   * If the channel's `bufferedAmount` grows over this amount in bytes, wait\n   * for it to drain before sending more data\n   *\n   * @default 16_777_216\n   */\n  maxBufferedAmount?: number\n\n  /**\n   * When `bufferedAmount` is above `maxBufferedAmount`, we pause sending until\n   * the `bufferedAmountLow` event fires - this controls how long we wait for\n   * that event in ms\n   *\n   * @default 30_000\n   */\n  bufferedAmountLowEventTimeout?: number\n\n  /**\n   * When closing a stream, we wait for `bufferedAmount` to become 0 before\n   * closing the underlying RTCDataChannel - this controls how long we wait\n   * in ms\n   *\n   * @default 30_000\n   */\n  drainTimeout?: number\n\n  /**\n   * When closing a stream we first send a FIN flag to the remote and wait\n   * for a FIN_ACK reply before closing the underlying RTCDataChannel - this\n   * controls how long we wait for the acknowledgement in ms\n   *\n   * @default 5_000\n   */\n  closeTimeout?: number\n\n  /**\n   * When sending the first data message, if the channel is not in the \"open\"\n   * state, wait this long for the \"open\" event to fire.\n   *\n   * @default 5_000\n   */\n  openTimeout?: number\n}\n\n/**\n * PEM format server certificate and private key\n */\nexport interface TransportCertificate {\n  /**\n   * The private key for the certificate in PEM format\n   */\n  privateKey: string\n\n  /**\n   * PEM format certificate\n   */\n  pem: string\n\n  /**\n   * The hash of the certificate\n   */\n  certhash: string\n}\n\nexport type { WebRTCTransportDirectInit, WebRTCDirectTransportComponents }\n\nfunction webRTCDirect (init?: WebRTCTransportDirectInit): (components: WebRTCDirectTransportComponents) => Transport {\n  return (components: WebRTCDirectTransportComponents) => new WebRTCDirectTransport(components, init)\n}\n\nexport type { WebRTCTransportInit, WebRTCTransportComponents }\n\nfunction webRTC (init?: WebRTCTransportInit): (components: WebRTCTransportComponents) => Transport {\n  return (components: WebRTCTransportComponents) => new WebRTCTransport(components, init)\n}\n\nexport { webRTC, webRTCDirect }\n", "import type { ErrorEvent, WebSocket } from 'ws'\n\nexport default async (socket: WebSocket): Promise<void> => {\n  // if the socket is closing or closed, return end\n  if (socket.readyState >= 2) {\n    throw new Error('socket closed')\n  }\n\n  // if open, return\n  if (socket.readyState === 1) {\n    return\n  }\n\n  await new Promise<void>((resolve, reject) => {\n    function cleanup (): void {\n      socket.removeEventListener('open', handleOpen)\n      socket.removeEventListener('error', handleErr)\n    }\n\n    function handleOpen (): void {\n      cleanup()\n      resolve()\n    }\n\n    function handleErr (event: ErrorEvent): void {\n      cleanup()\n      reject(event.error as Error ?? new Error(`connect ECONNREFUSED ${socket.url}`))\n    }\n\n    socket.addEventListener('open', handleOpen)\n    socket.addEventListener('error', handleErr)\n  })\n}\n", "import ready from './ready.js'\nimport type { Sink, Source } from 'it-stream-types'\nimport type { WebSocket } from 'ws'\n\nexport interface SinkOptions {\n  closeOnEnd?: boolean\n}\n\nexport default (socket: WebSocket, options: SinkOptions): Sink<Source<Uint8Array>, Promise<void>> => {\n  options = options ?? {}\n  options.closeOnEnd = options.closeOnEnd !== false\n\n  const sink: Sink<Source<Uint8Array>, Promise<void>> = async source => {\n    for await (const data of source) {\n      try {\n        await ready(socket)\n      } catch (err: any) {\n        if (err.message === 'socket closed') break\n        throw err\n      }\n\n      // the ready promise resolved without error but the socket was closing so\n      // exit the loop and don't send data\n      if (socket.readyState === socket.CLOSING || socket.readyState === socket.CLOSED) {\n        break\n      }\n\n      socket.send(data)\n    }\n\n    if (options.closeOnEnd != null && socket.readyState <= 1) {\n      await new Promise<void>((resolve, reject) => {\n        socket.addEventListener('close', event => {\n          if (event.wasClean || event.code === 1006) {\n            resolve()\n          } else {\n            const err = Object.assign(new Error('ws error'), { event })\n            reject(err)\n          }\n        })\n\n        setTimeout(() => { socket.close() })\n      })\n    }\n  }\n\n  return sink\n}\n", "import { EventIterator } from 'event-iterator'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport type { WebSocket, ErrorEvent, MessageEvent } from 'ws'\n\n// copied from github.com/feross/buffer\n// Some ArrayBuffers are not passing the instanceof check, so we need to do a bit more work :(\nfunction isArrayBuffer (obj: any): obj is ArrayBuffer {\n  return (obj instanceof ArrayBuffer) ||\n    (obj?.constructor?.name === 'ArrayBuffer' && typeof obj?.byteLength === 'number')\n}\n\nexport interface ConnectedSource extends AsyncGenerator<Uint8Array> {\n  connected(): Promise<void>\n}\n\nexport default (socket: WebSocket): ConnectedSource => {\n  socket.binaryType = 'arraybuffer'\n\n  const connected = async (): Promise<void> => {\n    await new Promise<void>((resolve, reject) => {\n      if (isConnected) {\n        resolve(); return\n      }\n      if (connError != null) {\n        reject(connError); return\n      }\n\n      const cleanUp = (cont: () => void): void => {\n        socket.removeEventListener('open', onOpen)\n        socket.removeEventListener('error', onError)\n        cont()\n      }\n\n      const onOpen = (): void => { cleanUp(resolve) }\n      const onError = (event: ErrorEvent): void => {\n        cleanUp(() => { reject(event.error as Error ?? new Error(`connect ECONNREFUSED ${socket.url}`)) })\n      }\n\n      socket.addEventListener('open', onOpen)\n      socket.addEventListener('error', onError)\n    })\n  }\n\n  const source = (async function * () {\n    const messages = new EventIterator<Uint8Array>(\n      ({ push, stop, fail }) => {\n        const onMessage = (event: MessageEvent): void => {\n          let data: Uint8Array | null = null\n\n          if (typeof event.data === 'string') {\n            data = uint8ArrayFromString(event.data)\n          }\n\n          if (isArrayBuffer(event.data)) {\n            data = new Uint8Array(event.data)\n          }\n\n          if (event.data instanceof Uint8Array) {\n            data = event.data\n          }\n\n          if (data == null) {\n            return\n          }\n\n          push(data)\n        }\n        const onError = (event: ErrorEvent): void => { fail(event.error ?? new Error('Socket error')) }\n\n        socket.addEventListener('message', onMessage)\n        socket.addEventListener('error', onError)\n        socket.addEventListener('close', stop)\n\n        return () => {\n          socket.removeEventListener('message', onMessage)\n          socket.removeEventListener('error', onError)\n          socket.removeEventListener('close', stop)\n        }\n      },\n      { highWaterMark: Infinity }\n    )\n\n    await connected()\n\n    for await (const chunk of messages) {\n      yield isArrayBuffer(chunk) ? new Uint8Array(chunk) : chunk\n    }\n  }())\n\n  let isConnected = socket.readyState === 1\n  let connError: Error | null\n\n  socket.addEventListener('open', () => {\n    isConnected = true\n    connError = null\n  })\n\n  socket.addEventListener('close', () => {\n    isConnected = false\n    connError = null\n  })\n\n  socket.addEventListener('error', event => {\n    if (!isConnected) {\n      connError = event.error ?? new Error(`connect ECONNREFUSED ${socket.url}`)\n    }\n  })\n\n  return Object.assign(source, {\n    connected\n  })\n}\n", "import sink from './sink.js'\nimport source from './source.js'\nimport type { SinkOptions } from './sink.js'\nimport type WebSocket from './web-socket.js'\nimport type { Duplex, Source } from 'it-stream-types'\n\nexport interface DuplexWebSocket extends Duplex<AsyncGenerator<Uint8Array>, Source<Uint8Array>, Promise<void>> {\n  connected(): Promise<void>\n  localAddress?: string\n  localPort?: number\n  remoteAddress: string\n  remotePort: number\n  close(): Promise<void>\n  destroy(): void\n  socket: WebSocket\n}\n\nexport interface DuplexWebSocketOptions extends SinkOptions {\n  remoteAddress?: string\n  remotePort?: number\n}\n\nexport default (socket: WebSocket, options?: DuplexWebSocketOptions): DuplexWebSocket => {\n  options = options ?? {}\n\n  const connectedSource = source(socket)\n  let remoteAddress: string | undefined = options.remoteAddress\n  let remotePort: number | undefined = options.remotePort\n\n  if (socket.url != null) {\n    // only client->server sockets have urls, server->client connections do not\n    try {\n      const url = new URL(socket.url)\n      remoteAddress = url.hostname\n      remotePort = parseInt(url.port, 10)\n    } catch {}\n  }\n\n  if (remoteAddress == null || remotePort == null) {\n    throw new Error('Remote connection did not have address and/or port')\n  }\n\n  const duplex: DuplexWebSocket = {\n    sink: sink(socket, options),\n    source: connectedSource,\n    connected: async () => { await connectedSource.connected() },\n    close: async () => {\n      if (socket.readyState === socket.CONNECTING || socket.readyState === socket.OPEN) {\n        await new Promise<void>((resolve) => {\n          socket.addEventListener('close', () => {\n            resolve()\n          })\n          socket.close()\n        })\n      }\n    },\n    destroy: () => {\n      if (socket.terminate != null) {\n        socket.terminate()\n      } else {\n        socket.close()\n      }\n    },\n    remoteAddress,\n    remotePort,\n    socket\n  }\n\n  return duplex\n}\n", "/* eslint-env browser */\n\nexport default WebSocket\n", "const map = { 'http:': 'ws:', 'https:': 'wss:' }\nconst defaultProtocol = 'ws:'\n\nexport default (url: string, location?: Partial<Location>): URL => {\n  if (url.startsWith('//')) {\n    url = `${location?.protocol ?? defaultProtocol}${url}`\n  }\n\n  if (url.startsWith('/') && location != null) {\n    const proto = location.protocol ?? defaultProtocol\n    const host = location.host\n    const port = location.port != null && host?.endsWith(`:${location.port}`) !== true ? `:${location.port}` : ''\n    url = `${proto}//${host}${port}${url}`\n  }\n\n  const wsUrl = new URL(url)\n\n  for (const [httpProto, wsProto] of Object.entries(map)) {\n    if (wsUrl.protocol === httpProto) {\n      wsUrl.protocol = wsProto\n    }\n  }\n\n  return wsUrl\n}\n", "// load websocket library if we are not in the browser\nimport duplex from './duplex.js'\nimport WebSocket from './web-socket.js'\nimport wsurl from './ws-url.js'\nimport type { DuplexWebSocket } from './duplex.js'\nimport type { SinkOptions } from './sink.js'\nimport type { ClientOptions } from 'ws'\n\nexport interface WebSocketOptions extends SinkOptions {\n  websocket?: ClientOptions\n}\n\nexport function connect (addr: string, opts?: WebSocketOptions): DuplexWebSocket {\n  const location = typeof window === 'undefined' ? undefined : window.location\n  opts = opts ?? {}\n\n  const url = wsurl(addr, location)\n\n  // it's necessary to stringify the URL object otherwise react-native crashes\n  const socket = new WebSocket(url.toString(), opts.websocket)\n  return duplex(socket, opts)\n}\n", "import type { Matcher, MultiaddrMatcher } from './index.js'\nimport type { Multiaddr, Component } from '@multiformats/multiaddr'\n\n/**\n * Matches a multiaddr component with the specified code but no value\n */\nexport const code = (code: number): Matcher => {\n  return {\n    match: (vals) => {\n      const component = vals[0]\n\n      if (component == null) {\n        return false\n      }\n\n      if (component.code !== code) {\n        return false\n      }\n\n      if (component.value != null) {\n        return false\n      }\n\n      return vals.slice(1)\n    }\n  }\n}\n\n/**\n * Matches a multiaddr component with the specified code and value. If the value\n * is omitted any non-undefined value is matched.\n */\nexport const value = (code: number, value?: string): Matcher => {\n  return {\n    match: (vals) => {\n      const component = vals[0]\n\n      if (component?.code !== code) {\n        return false\n      }\n\n      if (component.value == null) {\n        return false\n      }\n\n      if (value != null && component.value !== value) {\n        return false\n      }\n\n      return vals.slice(1)\n    }\n  }\n}\n\n/**\n * An optional matcher\n */\nexport const optional = (matcher: Matcher): Matcher => {\n  return {\n    match: (vals) => {\n      const result = matcher.match(vals)\n\n      if (result === false) {\n        return vals\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Matches any one of the passed matches\n */\nexport const or = (...matchers: Matcher[]): Matcher => {\n  return {\n    match: (vals) => {\n      let matches: Component[] | undefined\n\n      for (const matcher of matchers) {\n        const result = matcher.match(vals)\n\n        // no match\n        if (result === false) {\n          continue\n        }\n\n        // choose greediest matcher\n        if (matches == null || result.length < matches.length) {\n          matches = result\n        }\n      }\n\n      if (matches == null) {\n        return false\n      }\n\n      return matches\n    }\n  }\n}\n\n/**\n * Matches all of the passed matchers\n */\nexport const and = (...matchers: Matcher[]): Matcher => {\n  return {\n    match: (vals) => {\n      for (const matcher of matchers) {\n        // pass what's left of the array\n        const result = matcher.match(vals)\n\n        // no match\n        if (result === false) {\n          return false\n        }\n\n        vals = result\n      }\n\n      return vals\n    }\n  }\n}\n\n/**\n * Create a multiaddr matcher from the passed component matchers\n */\nexport function fmt (...matchers: Matcher[]): MultiaddrMatcher {\n  function match (ma?: Multiaddr): Component[] | false {\n    if (ma == null) {\n      return false\n    }\n\n    let parts = ma.getComponents()\n\n    for (const matcher of matchers) {\n      const result = matcher.match(parts)\n\n      if (result === false) {\n        return false\n      }\n\n      parts = result\n    }\n\n    return parts\n  }\n\n  function matches (ma?: Multiaddr): boolean {\n    const result = match(ma)\n\n    return result !== false\n  }\n\n  function exactMatch (ma?: Multiaddr): boolean {\n    const result = match(ma)\n\n    if (result === false) {\n      return false\n    }\n\n    return result.length === 0\n  }\n\n  return {\n    matchers,\n    matches,\n    exactMatch\n  }\n}\n", "/**\n * @packageDocumentation\n *\n * This module exports various matchers that can be used to infer the type of a\n * passed multiaddr.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/dnsaddr/example.org')\n *\n * DNS.matches(ma) // true - this is a multiaddr with a DNS address at the start\n * ```\n *\n * @example\n *\n * The default matching behaviour ignores any subsequent tuples in the multiaddr.\n * If you want stricter matching you can use `.exactMatch`:\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS, Circuit } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/dnsaddr/example.org/p2p/QmFoo/p2p-circuit/p2p/QmBar')\n *\n * DNS.exactMatch(ma) // false - this address has extra tuples after the DNS component\n * Circuit.matches(ma) // true\n * Circuit.exactMatch(ma) // true - the extra tuples are circuit relay related\n * ```\n */\n\nimport { CODE_P2P, CODE_DNS4, CODE_DNS6, CODE_DNSADDR, CODE_DNS, CODE_IP4, CODE_IP6, CODE_TCP, CODE_UDP, CODE_QUIC, CODE_QUIC_V1, CODE_WS, CODE_WSS, CODE_TLS, CODE_SNI, CODE_WEBRTC_DIRECT, CODE_CERTHASH, CODE_WEBTRANSPORT, CODE_P2P_CIRCUIT, CODE_WEBRTC, CODE_HTTP, CODE_UNIX, CODE_HTTPS, CODE_MEMORY, CODE_IP6ZONE, CODE_IPCIDR } from '@multiformats/multiaddr'\nimport { and, or, optional, fmt, code, value } from './utils.js'\nimport type { Multiaddr, Component } from '@multiformats/multiaddr'\n\n/**\n * A matcher accepts multiaddr components and either fails to match and returns\n * false or returns a sublist of unmatched components\n */\nexport interface Matcher {\n  match(parts: Component[]): Component[] | false\n}\n\n/**\n * A MultiaddrMatcher allows interpreting a multiaddr as a certain type of\n * multiaddr\n */\nexport interface MultiaddrMatcher {\n  /**\n   * The matchers that make up this MultiaddrMatcher - useful if you want to\n   * make your own custom matchers\n   */\n  matchers: Matcher[]\n\n  /**\n   * Returns true if the passed multiaddr can be treated as this type of\n   * multiaddr\n   */\n  matches(ma?: Multiaddr): boolean\n\n  /**\n   * Returns true if the passed multiaddr terminates as this type of\n   * multiaddr\n   */\n  exactMatch(ma?: Multiaddr): boolean\n}\n\n/**\n * Matches PeerId addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { PEER_ID } from '@multiformats/multiaddr-matcher'\n *\n * PEER_ID.matches(multiaddr('/p2p/Qmfoo')) // true\n * PEER_ID.matches(multiaddr('/ipfs/Qmfoo')) // true\n * ```\n */\nconst _PEER_ID = value(CODE_P2P)\n\nexport const PEER_ID = fmt(_PEER_ID)\n\n/**\n * DNS matchers\n */\nconst _DNS4 = value(CODE_DNS4)\nconst _DNS6 = value(CODE_DNS6)\nconst _DNSADDR = value(CODE_DNSADDR)\nconst _DNS = value(CODE_DNS)\n\n/**\n * Matches dns4 addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS4 } from '@multiformats/multiaddr-matcher'\n *\n * DNS4.matches(multiaddr('/dns4/example.org')) // true\n * ```\n */\nexport const DNS4 = fmt(_DNS4, optional(value(CODE_P2P)))\n\n/**\n * Matches dns6 addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS6 } from '@multiformats/multiaddr-matcher'\n *\n * DNS6.matches(multiaddr('/dns6/example.org')) // true\n * ```\n */\nexport const DNS6 = fmt(_DNS6, optional(value(CODE_P2P)))\n\n/**\n * Matches dnsaddr addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNSADDR } from '@multiformats/multiaddr-matcher'\n *\n * DNSADDR.matches(multiaddr('/dnsaddr/example.org')) // true\n * DNSADDR.matches(multiaddr('/dnsaddr/example.org/p2p/Qmfoo')) // true\n * ```\n */\nexport const DNSADDR = fmt(_DNSADDR, optional(value(CODE_P2P)))\n\n/**\n * Matches any dns address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS } from '@multiformats/multiaddr-matcher'\n *\n * DNS.matches(multiaddr('/dnsaddr/example.org')) // true\n * DNS.matches(multiaddr('/dns4/example.org')) // true\n * DNS.matches(multiaddr('/dns6/example.org')) // true\n * DNS.matches(multiaddr('/dns6/example.org/p2p/Qmfoo')) // true\n * ```\n */\nexport const DNS = fmt(or(_DNS, _DNSADDR, _DNS4, _DNS6), optional(value(CODE_P2P)))\n\nconst _IP4 = and(\n  value(CODE_IP4),\n  optional(value(CODE_IPCIDR))\n)\nconst _IP6 = and(\n  optional(value(CODE_IP6ZONE)),\n  value(CODE_IP6),\n  optional(value(CODE_IPCIDR))\n)\nconst _IP = or(_IP4, _IP6)\n\nconst _IP_OR_DOMAIN = or(_IP, _DNS, _DNS4, _DNS6, _DNSADDR)\n\n/**\n * A matcher for addresses that start with IP or DNS tuples.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP_OR_DOMAIN } from '@multiformats/multiaddr-matcher'\n *\n * IP_OR_DOMAIN.matches(multiaddr('/ip4/123.123.123.123')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/ip4/123.123.123.123/p2p/QmFoo')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/dns/example.com/p2p/QmFoo')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/p2p/QmFoo')) // false\n * ```\n */\nexport const IP_OR_DOMAIN = fmt(or(_IP, and(or(_DNS, _DNSADDR, _DNS4, _DNS6), optional(value(CODE_P2P)))))\n\n/**\n * Matches ip4 addresses.\n *\n * Use {@link IP IP} instead to match any ip4/ip6 address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP4 } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/ip4/123.123.123.123')\n *\n * IP4.matches(ma) // true\n * ```\n */\nexport const IP4 = fmt(_IP4)\n\n/**\n * Matches ip6 addresses.\n *\n * Use {@link IP IP} instead to match any ip4/ip6 address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP6 } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/ip6/fe80::1cc1:a3b8:322f:cf22')\n *\n * IP6.matches(ma) // true\n * ```\n */\nexport const IP6 = fmt(_IP6)\n\n/**\n * Matches ip4 or ip6 addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP } from '@multiformats/multiaddr-matcher'\n *\n * IP.matches(multiaddr('/ip4/123.123.123.123')) // true\n * IP.matches(multiaddr('/ip6/fe80::1cc1:a3b8:322f:cf22')) // true\n * ```\n */\nexport const IP = fmt(_IP)\n\nconst _TCP = and(_IP_OR_DOMAIN, value(CODE_TCP))\nconst _UDP = and(_IP_OR_DOMAIN, value(CODE_UDP))\n\n/**\n * Matches TCP addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { TCP } from '@multiformats/multiaddr-matcher'\n *\n * TCP.matches(multiaddr('/ip4/123.123.123.123/tcp/1234')) // true\n * ```\n */\nexport const TCP = fmt(and(_TCP, optional(value(CODE_P2P))))\n\n/**\n * Matches UDP addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { UDP } from '@multiformats/multiaddr-matcher'\n *\n * UDP.matches(multiaddr('/ip4/123.123.123.123/udp/1234')) // true\n * ```\n */\nexport const UDP = fmt(_UDP)\n\nconst _QUIC = and(_UDP, code(CODE_QUIC), optional(value(CODE_P2P)))\nconst _QUIC_V1 = and(_UDP, code(CODE_QUIC_V1), optional(value(CODE_P2P)))\n\nconst QUIC_V0_OR_V1 = or(_QUIC, _QUIC_V1)\n\n/**\n * Matches QUIC addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { QUIC } from '@multiformats/multiaddr-matcher'\n *\n * QUIC.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic')) // true\n * ```\n */\nexport const QUIC = fmt(_QUIC)\n\n/**\n * Matches QUICv1 addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { QUIC_V1 } from '@multiformats/multiaddr-matcher'\n *\n * QUIC_V1.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic-v1')) // true\n * ```\n */\nexport const QUIC_V1 = fmt(_QUIC_V1)\n\nconst _WEB = or(\n  _IP_OR_DOMAIN,\n  _TCP,\n  _UDP,\n  _QUIC,\n  _QUIC_V1\n)\n\nconst _WebSockets = or(\n  and(_WEB, code(CODE_WS), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches WebSocket addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebSockets } from '@multiformats/multiaddr-matcher'\n *\n * WebSockets.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/ws')) // true\n * ```\n */\nexport const WebSockets = fmt(_WebSockets)\n\nconst _WebSocketsSecure = or(\n  and(_WEB, code(CODE_WSS), optional(value(CODE_P2P))),\n  and(_WEB, code(CODE_TLS), optional(value(CODE_SNI)), code(CODE_WS), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches secure WebSocket addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebSocketsSecure } from '@multiformats/multiaddr-matcher'\n *\n * WebSocketsSecure.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/wss')) // true\n * ```\n */\nexport const WebSocketsSecure = fmt(_WebSocketsSecure)\n\nconst _WebRTCDirect = and(_UDP, code(CODE_WEBRTC_DIRECT), optional(value(CODE_CERTHASH)), optional(value(CODE_CERTHASH)), optional(value(CODE_P2P)))\n\n/**\n * Matches WebRTC-direct addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTCDirect } from '@multiformats/multiaddr-matcher'\n *\n * WebRTCDirect.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmFoo/webrtc-direct/certhash/u....')) // true\n * ```\n */\nexport const WebRTCDirect = fmt(_WebRTCDirect)\n\nconst _WebTransport = and(_QUIC_V1, code(CODE_WEBTRANSPORT), optional(value(CODE_CERTHASH)), optional(value(CODE_CERTHASH)), optional(value(CODE_P2P)))\n\n/**\n * Matches WebTransport addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTCDirect } from '@multiformats/multiaddr-matcher'\n *\n * WebRTCDirect.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic-v1/webtransport/certhash/u..../certhash/u..../p2p/QmFoo')) // true\n * ```\n */\nexport const WebTransport = fmt(_WebTransport)\n\nconst _P2P = or(\n  _WebSockets,\n  _WebSocketsSecure,\n  and(_TCP, optional(value(CODE_P2P))),\n  and(QUIC_V0_OR_V1, optional(value(CODE_P2P))),\n  and(_IP_OR_DOMAIN, optional(value(CODE_P2P))),\n  _WebRTCDirect,\n  _WebTransport,\n  value(CODE_P2P)\n)\n\n/**\n * Matches peer addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { P2P } from '@multiformats/multiaddr-matcher'\n *\n * P2P.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmFoo')) // true\n * ```\n */\nexport const P2P = fmt(_P2P)\n\nconst _Circuit = and(_P2P, code(CODE_P2P_CIRCUIT), value(CODE_P2P))\n\n/**\n * Matches circuit relay addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Circuit } from '@multiformats/multiaddr-matcher'\n *\n * Circuit.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmRelay/p2p-circuit/p2p/QmTarget')) // true\n * ```\n */\nexport const Circuit = fmt(_Circuit)\n\nconst _WebRTC = or(\n  and(_P2P, code(CODE_P2P_CIRCUIT), code(CODE_WEBRTC), optional(value(CODE_P2P))),\n  and(_P2P, code(CODE_WEBRTC), optional(value(CODE_P2P))),\n  and(code(CODE_WEBRTC), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches WebRTC addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTC } from '@multiformats/multiaddr-matcher'\n *\n * WebRTC.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmRelay/p2p-circuit/webrtc/p2p/QmTarget')) // true\n * ```\n */\nexport const WebRTC = fmt(_WebRTC)\n\nconst _HTTP = or(\n  and(_IP_OR_DOMAIN, value(CODE_TCP), code(CODE_HTTP), optional(value(CODE_P2P))),\n  and(_IP_OR_DOMAIN, code(CODE_HTTP), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches HTTP addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { HTTP } from '@multiformats/multiaddr-matcher'\n *\n * HTTP.matches(multiaddr('/dns/example.org/http')) // true\n * ```\n */\nexport const HTTP = fmt(_HTTP)\n\nconst _HTTPS = and(_IP_OR_DOMAIN, or(\n  and(value(CODE_TCP, '443'), code(CODE_HTTP)),\n  and(value(CODE_TCP), code(CODE_HTTPS)),\n  and(value(CODE_TCP), code(CODE_TLS), code(CODE_HTTP)),\n  and(code(CODE_TLS), code(CODE_HTTP)),\n  code(CODE_TLS),\n  code(CODE_HTTPS)\n),\noptional(value(CODE_P2P))\n)\n\n/**\n * Matches HTTPS addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { HTTP } from '@multiformats/multiaddr-matcher'\n *\n * HTTP.matches(multiaddr('/dns/example.org/tls/http')) // true\n * ```\n */\nexport const HTTPS = fmt(_HTTPS)\n\nconst _Memory = or(\n  and(value(CODE_MEMORY), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches Memory addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Memory } from '@multiformats/multiaddr-matcher'\n *\n * Memory.matches(multiaddr('/memory/0xDEADBEEF')) // true\n * ```\n */\nexport const Memory = fmt(_Memory)\n\nconst _Unix = or(\n  and(value(CODE_UNIX), optional(value(CODE_P2P)))\n)\n\n/**\n * Matches Unix addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Unix } from '@multiformats/multiaddr-matcher'\n *\n * Unix.matches(multiaddr('/unix/%2Fpath%2Fto%2Funix.socket')) // true\n * ```\n */\nexport const Unix = fmt(_Unix)\n", "import { WebSocketsSecure, WebSockets, DNS } from '@multiformats/multiaddr-matcher'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @deprecated Configure this globally by passing a `connectionGater` to `createLibp2p` with a `denyDialMultiaddr` method that returns `false`\n */\nexport function all (multiaddrs: Multiaddr[]): Multiaddr[] {\n  return multiaddrs.filter((ma) => {\n    return WebSocketsSecure.exactMatch(ma) || WebSockets.exactMatch(ma)\n  })\n}\n\n/**\n * @deprecated Configure this globally by passing a `connectionGater` to `createLibp2p`\n */\nexport function wss (multiaddrs: Multiaddr[]): Multiaddr[] {\n  return multiaddrs.filter((ma) => {\n    return WebSocketsSecure.exactMatch(ma)\n  })\n}\n\n/**\n * @deprecated Configure this globally by passing a `connectionGater` to `createLibp2p`\n */\nexport function dnsWss (multiaddrs: Multiaddr[]): Multiaddr[] {\n  return multiaddrs.filter((ma) => {\n    return DNS.matches(ma) && WebSocketsSecure.exactMatch(ma)\n  })\n}\n\n/**\n * @deprecated Configure this globally by passing a `connectionGater` to `createLibp2p`\n */\nexport function dnsWsOrWss (multiaddrs: Multiaddr[]): Multiaddr[] {\n  return multiaddrs.filter((ma) => {\n    return DNS.matches(ma) && (WebSocketsSecure.exactMatch(ma) || WebSockets.exactMatch(ma))\n  })\n}\n", "import type { Listener } from '@libp2p/interface'\n\nexport function createListener (): Listener {\n  throw new Error('WebSocket Servers can not be created in the browser!')\n}\n", "// Time to wait for a connection to close gracefully before destroying it manually\nexport const CLOSE_TIMEOUT = 500\n", "import { AbortError } from '@libp2p/interface'\nimport { CLOSE_TIMEOUT } from './constants.js'\nimport type { AbortOptions, ComponentLogger, CounterGroup, MultiaddrConnection } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { DuplexWebSocket } from 'it-ws/duplex'\n\nexport interface SocketToConnOptions {\n  localAddr?: Multiaddr\n  logger: ComponentLogger\n  metrics?: CounterGroup\n  metricPrefix?: string\n}\n\n// Convert a stream into a MultiaddrConnection\n// https://github.com/libp2p/interface-transport#multiaddrconnection\nexport function socketToMaConn (stream: DuplexWebSocket, remoteAddr: Multiaddr, options: SocketToConnOptions): MultiaddrConnection {\n  const log = options.logger.forComponent('libp2p:websockets:maconn')\n  const metrics = options.metrics\n  const metricPrefix = options.metricPrefix ?? ''\n\n  const maConn: MultiaddrConnection = {\n    log,\n\n    async sink (source) {\n      try {\n        await stream.sink((async function * () {\n          for await (const buf of source) {\n            if (buf instanceof Uint8Array) {\n              yield buf\n            } else {\n              yield buf.subarray()\n            }\n          }\n        })())\n      } catch (err: any) {\n        if (err.type !== 'aborted') {\n          log.error(err)\n        }\n      }\n    },\n\n    source: stream.source,\n\n    remoteAddr,\n\n    timeline: { open: Date.now() },\n\n    async close (options: AbortOptions = {}) {\n      const start = Date.now()\n\n      if (options.signal == null) {\n        const signal = AbortSignal.timeout(CLOSE_TIMEOUT)\n\n        options = {\n          ...options,\n          signal\n        }\n      }\n\n      const listener = (): void => {\n        const { host, port } = maConn.remoteAddr.toOptions()\n        log('timeout closing stream to %s:%s after %dms, destroying it manually',\n          host, port, Date.now() - start)\n\n        this.abort(new AbortError('Socket close timeout'))\n      }\n\n      options.signal?.addEventListener('abort', listener)\n\n      try {\n        await stream.close()\n      } catch (err: any) {\n        log.error('error closing WebSocket gracefully', err)\n        this.abort(err)\n      } finally {\n        options.signal?.removeEventListener('abort', listener)\n        maConn.timeline.close = Date.now()\n      }\n    },\n\n    abort (err: Error): void {\n      const { host, port } = maConn.remoteAddr.toOptions()\n      log('timeout closing stream to %s:%s due to error',\n        host, port, err)\n\n      stream.destroy()\n      maConn.timeline.close = Date.now()\n\n      // ws WebSocket.terminate does not accept an Error arg to emit an 'error'\n      // event on destroy like other node streams so we can't update a metric\n      // with an event listener\n      // https://github.com/websockets/ws/issues/1752#issuecomment-622380981\n      metrics?.increment({ [`${metricPrefix}error`]: true })\n    }\n  }\n\n  stream.socket.addEventListener('close', () => {\n    metrics?.increment({ [`${metricPrefix}close`]: true })\n\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (maConn.timeline.close == null) {\n      maConn.timeline.close = Date.now()\n    }\n  }, { once: true })\n\n  return maConn\n}\n", "/**\n * @packageDocumentation\n *\n * A [libp2p transport](https://docs.libp2p.io/concepts/transports/overview/) based on [WebSockets](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API).\n *\n * @example\n *\n * ```TypeScript\n * import { createLibp2p } from 'libp2p'\n * import { webSockets } from '@libp2p/websockets'\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const node = await createLibp2p({\n *   transports: [\n *     webSockets()\n *   ]\n * //... other config\n * })\n * await node.start()\n *\n * const ma = multiaddr('/dns4/example.com/tcp/9090/tls/ws')\n * await node.dial(ma)\n * ```\n */\n\nimport { transportSymbol, serviceCapabilities, ConnectionFailedError } from '@libp2p/interface'\nimport { multiaddrToUri as toUri } from '@multiformats/multiaddr-to-uri'\nimport { connect } from 'it-ws/client'\nimport pDefer from 'p-defer'\nimport { CustomProgressEvent } from 'progress-events'\nimport { raceSignal } from 'race-signal'\nimport * as filters from './filters.js'\nimport { createListener } from './listener.js'\nimport { socketToMaConn } from './socket-to-conn.js'\nimport type { Transport, MultiaddrFilter, CreateListenerOptions, DialTransportOptions, Listener, AbortOptions, ComponentLogger, Logger, Connection, OutboundConnectionUpgradeEvents, Metrics, CounterGroup, Libp2pEvents } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { WebSocketOptions } from 'it-ws/client'\nimport type { DuplexWebSocket } from 'it-ws/duplex'\nimport type { TypedEventTarget } from 'main-event'\nimport type http from 'node:http'\nimport type https from 'node:https'\nimport type { ProgressEvent } from 'progress-events'\nimport type { ClientOptions } from 'ws'\n\nexport interface WebSocketsInit extends AbortOptions, WebSocketOptions {\n  /**\n   * @deprecated Use a ConnectionGater instead\n   */\n  filter?: MultiaddrFilter\n\n  /**\n   * Options used to create WebSockets\n   */\n  websocket?: ClientOptions\n\n  /**\n   * Options used to create the HTTP server\n   */\n  http?: http.ServerOptions\n\n  /**\n   * Options used to create the HTTPs server. `options.http` will be used if\n   * unspecified.\n   */\n  https?: https.ServerOptions\n\n  /**\n   * Inbound connections must complete their upgrade within this many ms\n   *\n   * @deprecated Use the `connectionManager.inboundUpgradeTimeout` libp2p config key instead\n   */\n  inboundConnectionUpgradeTimeout?: number\n}\n\nexport interface WebSocketsComponents {\n  logger: ComponentLogger\n  events: TypedEventTarget<Libp2pEvents>\n  metrics?: Metrics\n}\n\nexport interface WebSocketsMetrics {\n  dialerEvents: CounterGroup\n}\n\nexport type WebSocketsDialEvents =\n  OutboundConnectionUpgradeEvents |\n  ProgressEvent<'websockets:open-connection'>\n\nclass WebSockets implements Transport<WebSocketsDialEvents> {\n  private readonly log: Logger\n  private readonly init: WebSocketsInit\n  private readonly logger: ComponentLogger\n  private readonly metrics?: WebSocketsMetrics\n  private readonly components: WebSocketsComponents\n\n  constructor (components: WebSocketsComponents, init: WebSocketsInit = {}) {\n    this.log = components.logger.forComponent('libp2p:websockets')\n    this.logger = components.logger\n    this.components = components\n    this.init = init\n\n    if (components.metrics != null) {\n      this.metrics = {\n        dialerEvents: components.metrics.registerCounterGroup('libp2p_websockets_dialer_events_total', {\n          label: 'event',\n          help: 'Total count of WebSockets dialer events by type'\n        })\n      }\n    }\n  }\n\n  readonly [transportSymbol] = true\n\n  readonly [Symbol.toStringTag] = '@libp2p/websockets'\n\n  readonly [serviceCapabilities]: string[] = [\n    '@libp2p/transport'\n  ]\n\n  async dial (ma: Multiaddr, options: DialTransportOptions<WebSocketsDialEvents>): Promise<Connection> {\n    this.log('dialing %s', ma)\n    options = options ?? {}\n\n    const socket = await this._connect(ma, options)\n    const maConn = socketToMaConn(socket, ma, {\n      logger: this.logger,\n      metrics: this.metrics?.dialerEvents\n    })\n    this.log('new outbound connection %s', maConn.remoteAddr)\n\n    const conn = await options.upgrader.upgradeOutbound(maConn, options)\n    this.log('outbound connection %s upgraded', maConn.remoteAddr)\n    return conn\n  }\n\n  async _connect (ma: Multiaddr, options: DialTransportOptions<WebSocketsDialEvents>): Promise<DuplexWebSocket> {\n    options?.signal?.throwIfAborted()\n\n    const cOpts = ma.toOptions()\n    this.log('dialing %s:%s', cOpts.host, cOpts.port)\n\n    const errorPromise = pDefer()\n    const rawSocket = connect(toUri(ma), this.init)\n    rawSocket.socket.addEventListener('error', () => {\n      // the WebSocket.ErrorEvent type doesn't actually give us any useful\n      // information about what happened\n      // https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/error_event\n      const err = new ConnectionFailedError(`Could not connect to ${ma.toString()}`)\n      this.log.error('connection error:', err)\n      this.metrics?.dialerEvents.increment({ error: true })\n      errorPromise.reject(err)\n    })\n\n    try {\n      options.onProgress?.(new CustomProgressEvent('websockets:open-connection'))\n      await raceSignal(Promise.race([rawSocket.connected(), errorPromise.promise]), options.signal)\n    } catch (err: any) {\n      if (options.signal?.aborted) {\n        this.metrics?.dialerEvents.increment({ abort: true })\n      }\n\n      rawSocket.close()\n        .catch(err => {\n          this.log.error('error closing raw socket', err)\n        })\n\n      throw err\n    }\n\n    this.log('connected %s', ma)\n    this.metrics?.dialerEvents.increment({ connect: true })\n    return rawSocket\n  }\n\n  /**\n   * Creates a WebSockets listener. The provided `handler` function will be called\n   * anytime a new incoming Connection has been successfully upgraded via\n   * `upgrader.upgradeInbound`\n   */\n  createListener (options: CreateListenerOptions): Listener {\n    return createListener({\n      logger: this.logger,\n      events: this.components.events,\n      metrics: this.components.metrics\n    }, {\n      ...this.init,\n      ...options\n    })\n  }\n\n  /**\n   * Takes a list of `Multiaddr`s and returns only valid WebSockets addresses.\n   * By default, in a browser environment only DNS+WSS multiaddr is accepted,\n   * while in a Node.js environment DNS+{WS, WSS} multiaddrs are accepted.\n   */\n  listenFilter (multiaddrs: Multiaddr[]): Multiaddr[] {\n    multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs]\n\n    if (this.init?.filter != null) {\n      return this.init?.filter(multiaddrs)\n    }\n\n    return filters.all(multiaddrs)\n  }\n\n  /**\n   * Filter check for all Multiaddrs that this transport can dial\n   */\n  dialFilter (multiaddrs: Multiaddr[]): Multiaddr[] {\n    return this.listenFilter(multiaddrs)\n  }\n}\n\nexport function webSockets (init: WebSocketsInit = {}): (components: WebSocketsComponents) => Transport {\n  return (components) => {\n    return new WebSockets(components, init)\n  }\n}\n", "import NanoDate from 'timestamp-nano'\nimport { IpnsEntry } from './pb/ipns.js'\nimport { unmarshalIPNSRecord } from './utils.js'\n\n/**\n * Selects the latest valid IPNS record from an array of marshalled IPNS records.\n *\n * Records are sorted by:\n * 1. Sequence number (higher takes precedence)\n * 2. Validity time for EOL records with same sequence number (longer lived record takes precedence)\n *\n * @param key - The routing key for the IPNS record\n * @param data - Array of marshalled IPNS records to select from\n * @returns The index of the most valid record from the input array\n */\nexport function ipnsSelector (key: Uint8Array, data: Uint8Array[]): number {\n  const entries = data.map((buf, index) => ({\n    record: unmarshalIPNSRecord(buf),\n    index\n  }))\n\n  entries.sort((a, b) => {\n    // Before we'd sort based on the signature version. Unmarshal now fails if\n    // a record does not have SignatureV2, so that is no longer needed. V1-only\n    // records haven't been issues in a long time.\n\n    const aSeq = a.record.sequence\n    const bSeq = b.record.sequence\n\n    // choose later sequence number\n    if (aSeq > bSeq) {\n      return -1\n    } else if (aSeq < bSeq) {\n      return 1\n    }\n\n    if (a.record.validityType === IpnsEntry.ValidityType.EOL && b.record.validityType === IpnsEntry.ValidityType.EOL) {\n      // choose longer lived record if sequence numbers the same\n      const recordAValidityDate = NanoDate.fromString(a.record.validity).toDate()\n      const recordBValidityDate = NanoDate.fromString(b.record.validity).toDate()\n\n      if (recordAValidityDate.getTime() > recordBValidityDate.getTime()) {\n        return -1\n      }\n\n      if (recordAValidityDate.getTime() < recordBValidityDate.getTime()) {\n        return 1\n      }\n    }\n\n    return 0\n  })\n\n  return entries[0].index\n}\n", "export const version = '5.4.2'\nexport const name = 'helia'\n", "// this list comes from https://github.com/ipfs/kubo/blob/da28fbc65a2e0f1ce59f9923823326ae2bc4f713/config/bootstrap_peers.go#L17\nexport const bootstrapConfig = {\n  list: [\n    '/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN',\n    '/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',\n    '/dnsaddr/bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt',\n    // va1 is not in the TXT records for _dnsaddr.bootstrap.libp2p.io yet\n    // so use the host name directly\n    '/dnsaddr/va1.bootstrap.libp2p.io/p2p/12D3KooWKnDdG3iXw9eTFijk3EWSunZcFi54Zka4wmtqtt6rPxc8',\n    '/ip4/104.131.131.82/tcp/4001/p2p/QmaCpDMGvV2BGHeYERUEnRQAwe3N8SzbUtfsmvsqQLuvuJ'\n  ]\n}\n", "import { noise } from '@chainsafe/libp2p-noise'\nimport { yamux } from '@chainsafe/libp2p-yamux'\nimport { createDelegatedRoutingV1HttpApiClient } from '@helia/delegated-routing-v1-http-api-client'\nimport { delegatedHTTPRoutingDefaults } from '@helia/routers'\nimport { autoNAT } from '@libp2p/autonat'\nimport { bootstrap } from '@libp2p/bootstrap'\nimport { circuitRelayTransport } from '@libp2p/circuit-relay-v2'\nimport { dcutr } from '@libp2p/dcutr'\nimport { identify, identifyPush } from '@libp2p/identify'\nimport { kadDHT } from '@libp2p/kad-dht'\nimport { keychain } from '@libp2p/keychain'\nimport { mplex } from '@libp2p/mplex'\nimport { ping } from '@libp2p/ping'\nimport { webRTC, webRTCDirect } from '@libp2p/webrtc'\nimport { webSockets } from '@libp2p/websockets'\nimport { ipnsSelector } from 'ipns/selector'\nimport { ipnsValidator } from 'ipns/validator'\nimport { userAgent } from 'libp2p/user-agent'\nimport { name, version } from '../version.js'\nimport { bootstrapConfig } from './bootstrappers.js'\nimport type { Libp2pDefaultsOptions } from './libp2p.js'\nimport type { Identify } from '@libp2p/identify'\nimport type { KadDHT } from '@libp2p/kad-dht'\nimport type { Keychain } from '@libp2p/keychain'\nimport type { PingService } from '@libp2p/ping'\nimport type { Libp2pOptions } from 'libp2p'\n\nexport interface DefaultLibp2pServices extends Record<string, unknown> {\n  autoNAT: unknown\n  dcutr: unknown\n  delegatedRouting: unknown\n  dht: KadDHT\n  identify: Identify\n  keychain: Keychain\n  ping: PingService\n}\n\nexport function libp2pDefaults (options: Libp2pDefaultsOptions = {}): Libp2pOptions<DefaultLibp2pServices> & Required<Pick<Libp2pOptions<DefaultLibp2pServices>, 'services'>> {\n  const agentVersion = `${name}/${version} ${userAgent()}`\n\n  return {\n    privateKey: options.privateKey,\n    dns: options.dns,\n    nodeInfo: {\n      userAgent: agentVersion\n    },\n    addresses: {\n      listen: [\n        '/p2p-circuit',\n        '/webrtc'\n      ]\n    },\n    transports: [\n      circuitRelayTransport(),\n      webRTC(),\n      webRTCDirect(),\n      webSockets()\n    ],\n    connectionEncrypters: [\n      noise()\n    ],\n    streamMuxers: [\n      yamux(),\n      mplex()\n    ],\n    peerDiscovery: [\n      bootstrap(bootstrapConfig)\n    ],\n    services: {\n      autoNAT: autoNAT(),\n      dcutr: dcutr(),\n      delegatedRouting: () => createDelegatedRoutingV1HttpApiClient('https://delegated-ipfs.dev', delegatedHTTPRoutingDefaults()),\n      dht: kadDHT({\n        clientMode: true,\n        validators: {\n          ipns: ipnsValidator\n        },\n        selectors: {\n          ipns: ipnsSelector\n        }\n      }),\n      identify: identify(),\n      identifyPush: identifyPush(),\n      keychain: keychain(options.keychain),\n      ping: ping()\n    }\n  }\n}\n", "import { loadOrCreateSelfKey } from '@libp2p/config'\nimport { createLibp2p as create } from 'libp2p'\nimport { libp2pDefaults } from './libp2p-defaults.js'\nimport type { ComponentLogger, Libp2p, PrivateKey } from '@libp2p/interface'\nimport type { KeychainInit } from '@libp2p/keychain'\nimport type { DNS } from '@multiformats/dns'\nimport type { Datastore } from 'interface-datastore'\nimport type { Libp2pOptions } from 'libp2p'\n\nexport interface CreateLibp2pOptions<T extends Record<string, unknown>> {\n  datastore: Datastore\n  libp2p?: Libp2pOptions<T>\n  logger?: ComponentLogger\n  keychain?: KeychainInit\n  start?: boolean\n}\n\nexport interface Libp2pDefaultsOptions {\n  privateKey?: PrivateKey\n  keychain?: KeychainInit\n  dns?: DNS\n}\n\nexport async function createLibp2p <T extends Record<string, unknown>> (options: CreateLibp2pOptions<T>): Promise<Libp2p<T>> {\n  const libp2pOptions = options.libp2p ?? {}\n\n  // if no peer id was passed, try to load it from the keychain\n  if (libp2pOptions.privateKey == null && options.datastore != null) {\n    libp2pOptions.privateKey = await loadOrCreateSelfKey(options.datastore, options.keychain)\n  }\n\n  const defaults: any = libp2pDefaults(libp2pOptions)\n  defaults.datastore = defaults.datastore ?? options.datastore\n\n  const node = await create<T>({\n    ...defaults,\n    ...libp2pOptions,\n    start: false\n  })\n\n  return node\n}\n", "/**\n * @packageDocumentation\n *\n * Exports a `createHelia` function that returns an object that implements the {@link Helia} API.\n *\n * Pass it to other modules like {@link https://www.npmjs.com/package/@helia/unixfs | @helia/unixfs} to make files available on the distributed web.\n *\n * @example\n *\n * ```typescript\n * import { createHelia } from 'helia'\n * import { unixfs } from '@helia/unixfs'\n * import { CID } from 'multiformats/cid'\n *\n * const helia = await createHelia()\n *\n * const fs = unixfs(helia)\n * fs.cat(CID.parse('bafyFoo'))\n * ```\n */\n\nimport { bitswap, trustlessGateway } from '@helia/block-brokers'\nimport { httpGatewayRouting, libp2pRouting } from '@helia/routers'\nimport { MemoryBlockstore } from 'blockstore-core'\nimport { MemoryDatastore } from 'datastore-core'\nimport { createLibp2p } from '../utils/libp2p.js'\nimport type { HeliaInit } from '../index.js'\nimport type { DefaultLibp2pServices } from '../utils/libp2p-defaults.js'\nimport type { Libp2p } from '@libp2p/interface'\n\n/**\n * Create and return the default options used to create a Helia node\n */\nexport async function heliaDefaults <T extends Libp2p> (init: Partial<HeliaInit<T>> = {}): Promise<HeliaInit<T> & Required<Pick<HeliaInit, 'libp2p' | 'blockstore'>>> {\n  const datastore = init.datastore ?? new MemoryDatastore()\n  const blockstore = init.blockstore ?? new MemoryBlockstore()\n\n  let libp2p: any\n\n  if (isLibp2p(init.libp2p)) {\n    libp2p = init.libp2p as any\n  } else {\n    libp2p = await createLibp2p<DefaultLibp2pServices>({\n      ...init,\n      libp2p: {\n        dns: init.dns,\n        ...init.libp2p,\n\n        // ignore the libp2p start parameter as it should be on the main init\n        // object instead\n        start: undefined\n      },\n      datastore\n    })\n  }\n\n  return {\n    ...init,\n    libp2p,\n    datastore,\n    blockstore,\n    blockBrokers: init.blockBrokers ?? [\n      trustlessGateway(),\n      bitswap()\n    ],\n    routers: init.routers ?? [\n      libp2pRouting(libp2p),\n      httpGatewayRouting()\n    ],\n    metrics: libp2p.metrics,\n    start: init.start ?? true\n  }\n}\n\nfunction isLibp2p (obj: any): obj is Libp2p {\n  if (obj == null) {\n    return false\n  }\n\n  // a non-exhaustive list of methods found on the libp2p object\n  const funcs = ['dial', 'dialProtocol', 'hangUp', 'handle', 'unhandle', 'getMultiaddrs', 'getProtocols']\n\n  // if these are all functions it's probably a libp2p object\n  return funcs.every(m => typeof obj[m] === 'function')\n}\n", "/**\n * @packageDocumentation\n *\n * Exports a `createHelia` function that returns an object that implements the {@link Helia} API.\n *\n * Pass it to other modules like {@link https://www.npmjs.com/package/@helia/unixfs | @helia/unixfs} to make files available on the distributed web.\n *\n * @example\n *\n * ```typescript\n * import { createHelia } from 'helia'\n * import { unixfs } from '@helia/unixfs'\n * import { CID } from 'multiformats/cid'\n *\n * const helia = await createHelia()\n *\n * const fs = unixfs(helia)\n * fs.cat(CID.parse('bafyFoo'))\n * ```\n */\n\nimport { HeliaP2P } from './helia-p2p.js'\nimport { heliaDefaults } from './utils/helia-defaults.js'\nimport { libp2pDefaults } from './utils/libp2p-defaults.js'\nimport type { DefaultLibp2pServices } from './utils/libp2p-defaults.js'\nimport type { Libp2pDefaultsOptions } from './utils/libp2p.js'\nimport type { Helia } from '@helia/interface'\nimport type { HeliaInit as HeliaClassInit } from '@helia/utils'\nimport type { Libp2p } from '@libp2p/interface'\nimport type { KeychainInit } from '@libp2p/keychain'\nimport type { Libp2pOptions } from 'libp2p'\nimport type { CID } from 'multiformats/cid'\n\n// re-export interface types so people don't have to depend on @helia/interface\n// if they don't want to\nexport * from '@helia/interface'\n\nexport type { DefaultLibp2pServices, Libp2pDefaultsOptions }\n\n// allow amending the default config\nexport { libp2pDefaults }\nexport { heliaDefaults }\n\n/**\n * DAGWalkers take a block and yield CIDs encoded in that block\n */\nexport interface DAGWalker {\n  codec: number\n  walk(block: Uint8Array): Generator<CID, void, undefined>\n}\n\n/**\n * Options used to create a Helia node.\n */\nexport interface HeliaInit<T extends Libp2p = Libp2p> extends HeliaClassInit {\n  /**\n   * A libp2p node is required to perform network operations. Either a\n   * pre-configured node or options to configure a node can be passed\n   * here.\n   *\n   * If node options are passed, they will be merged with the default\n   * config for the current platform. In this case all passed config\n   * keys will replace those from the default config.\n   *\n   * The libp2p `start` option is not supported, instead please pass `start` in\n   * the root of the HeliaInit object.\n   */\n  libp2p?: T | Omit<Libp2pOptions<any>, 'start'>\n\n  /**\n   * Pass `false` to not start the Helia node\n   */\n  start?: boolean\n\n  /**\n   * By default Helia stores the node's PeerId in an encrypted form in a\n   * libp2p keystore. These options control how that keystore is configured.\n   */\n  keychain?: KeychainInit\n}\n\nexport interface HeliaLibp2p<T extends Libp2p = Libp2p<DefaultLibp2pServices>> extends Helia {\n  libp2p: T\n}\n\n/**\n * Create and return a Helia node\n */\nexport async function createHelia <T extends Libp2p> (init: Partial<HeliaInit<T>>): Promise<HeliaLibp2p<T>>\nexport async function createHelia (init?: Partial<HeliaInit<Libp2p<DefaultLibp2pServices>>>): Promise<HeliaLibp2p<Libp2p<DefaultLibp2pServices>>>\nexport async function createHelia (init: Partial<HeliaInit> = {}): Promise<HeliaLibp2p> {\n  const options = await heliaDefaults(init)\n  const helia = new HeliaP2P<any>(options)\n\n  if (init.start !== false) {\n    await helia.start()\n  }\n\n  return helia\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,WAAO,UAAU,SAAU,KAAK;AAE9B,UAAI,CAAC,IAAK,OAAM,MAAM,+DAA+D;AAErF,UAAI,OAAO,GAAGA,UAAQ,uBAAO,OAAO,IAAI,GAAG,SAAS,uBAAO,OAAO,IAAI;AAEtE,eAAS,OAAQ,KAAKC,QAAO;AAC3B,QAAAD,QAAM,GAAG,IAAIC;AACb;AACA,YAAG,QAAQ,KAAK;AACd,iBAAO;AACP,mBAASD;AACT,UAAAA,UAAQ,uBAAO,OAAO,IAAI;AAAA,QAC5B;AAAA,MACF;AAEA,aAAO;AAAA,QACL,KAAK,SAAU,KAAK;AAClB,iBAAOA,QAAM,GAAG,MAAM,UAAa,OAAO,GAAG,MAAM;AAAA,QACrD;AAAA,QACA,QAAQ,SAAU,KAAK;AACrB,cAAGA,QAAM,GAAG,MAAM;AAChB,YAAAA,QAAM,GAAG,IAAI;AACf,cAAG,OAAO,GAAG,MAAM;AACjB,mBAAO,GAAG,IAAI;AAAA,QAClB;AAAA,QACA,KAAK,SAAU,KAAK;AAClB,cAAI,IAAIA,QAAM,GAAG;AACjB,cAAG,MAAM,OAAW,QAAO;AAC3B,eAAI,IAAI,OAAO,GAAG,OAAO,QAAW;AAClC,mBAAO,KAAK,CAAC;AACb,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,QACA,KAAK,SAAU,KAAKC,QAAO;AACzB,cAAGD,QAAM,GAAG,MAAM,OAAW,CAAAA,QAAM,GAAG,IAAIC;AAAA,cACrC,QAAO,KAAKA,MAAK;AAAA,QACxB;AAAA,QACA,OAAO,WAAY;AACjB,UAAAD,UAAQ,uBAAO,OAAO,IAAI;AAC1B,mBAAS,uBAAO,OAAO,IAAI;AAAA,QAC7B;AAAA,MACF;AAAA,IACF;AAAA;AAAA;;;AC3CA;AAAA;AACA,KAAC,WAAW;AACV,UAAIE,UAASC,OAAM,KAAK,MAAM,MAAM,MAAM,SAAS;AAEnD,gBAAU,SAAS,MAAM;AACvB,YAAI,GAAG,GAAG,GAAG;AACb,aAAK,OAAQ,OAAQ,QAAS;AAC9B,aAAK,OAAQ,OAAQ,QAAS;AAC9B,aAAK,OAAQ,OAAQ,OAAQ;AAC7B,YAAI,OAAO;AACX,eAAO,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,KAAK,GAAG;AAAA,MAC9B;AAEA,gBAAU,SAAS,IAAI;AACrB,YAAI,GAAG,GAAG,GAAG,GAAG,GAAG;AACnB,YAAI,CAAC;AACL,aAAK,IAAI,IAAI,GAAG,KAAK,GAAG,IAAI,EAAE,GAAG;AAC/B,cAAI,GAAG,WAAW,GAAG;AACnB;AAAA,UACF;AACA,cAAI,IAAI,GAAG;AACT,gBAAI,GAAG,CAAC,MAAM,KAAK;AACjB,oBAAM,IAAI,MAAM,YAAY;AAAA,YAC9B;AACA,iBAAK,GAAG,UAAU,CAAC;AAAA,UACrB;AACA,gBAAMA,MAAK,EAAE,GAAG,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC;AACrC,eAAK,GAAG,UAAU,CAAC;AACnB,YAAE,KAAK,CAAC;AAAA,QACV;AACA,YAAI,GAAG,WAAW,GAAG;AACnB,gBAAM,IAAI,MAAM,YAAY;AAAA,QAC9B;AACA,gBAAQ,EAAE,QAAQ;AAAA,UAChB,KAAK;AACH,gBAAI,EAAE,CAAC,IAAI,YAAY;AACrB,oBAAM,IAAI,MAAM,YAAY;AAAA,YAC9B;AACA,mBAAO,EAAE,CAAC,MAAM;AAAA,UAClB,KAAK;AACH,gBAAI,EAAE,CAAC,IAAI,OAAQ,EAAE,CAAC,IAAI,UAAU;AAClC,oBAAM,IAAI,MAAM,YAAY;AAAA,YAC9B;AACA,oBAAQ,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,OAAO;AAAA,UACjC,KAAK;AACH,gBAAI,EAAE,CAAC,IAAI,OAAQ,EAAE,CAAC,IAAI,OAAQ,EAAE,CAAC,IAAI,OAAQ;AAC/C,oBAAM,IAAI,MAAM,YAAY;AAAA,YAC9B;AACA,oBAAQ,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,OAAO;AAAA,UAC9C,KAAK;AACH,gBAAI,EAAE,CAAC,IAAI,OAAQ,EAAE,CAAC,IAAI,OAAQ,EAAE,CAAC,IAAI,OAAQ,EAAE,CAAC,IAAI,KAAM;AAC5D,oBAAM,IAAI,MAAM,YAAY;AAAA,YAC9B;AACA,oBAAQ,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,OAAO;AAAA,UAC1D;AACE,kBAAM,IAAI,MAAM,YAAY;AAAA,QAChC;AAAA,MACF;AAEA,YAAM,SAAS,GAAG;AAChB,eAAO,EAAE,WAAW,CAAC;AAAA,MACvB;AAEA,aAAO,IAAI,GAAG;AAEd,aAAO,IAAI,GAAG;AAEd,aAAO,IAAI,GAAG;AAEd,MAAAA,QAAO,SAAS,GAAG;AACjB,YAAIC,QAAM,MAAM,GAAG,GAAGC;AACtB,YAAI;AACJ,QAAAD,SAAO;AACP,eAAO;AACP,YAAI;AACJ,YAAI,EAAE,SAAS,KAAK,EAAE,CAAC,MAAM,KAAK;AAChC,cAAI,EAAE,IAAI,CAAC,MAAM,OAAO,EAAE,IAAI,CAAC,MAAM,KAAK;AACxC,iBAAK;AACL,YAAAA,SAAO;AAAA,UACT,WAAW,OAAO,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,KAAK;AAC7C;AACA,YAAAA,SAAO;AACP,mBAAO;AAAA,UACT;AAAA,QACF;AACA,QAAAC,SAAQ;AACR,eAAO,IAAI,EAAE,QAAQ;AACnB,cAAI,OAAO,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,MAAM;AAC/B,gBAAK,IAAID,UAAQ,IAAI,EAAE,CAAC,CAAC,IAAI,UAAW;AAAA,UAC1C,WAAWA,WAAS,IAAI;AACtB,gBAAI,OAAO,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,KAAK;AAC9B,kBAAK,IAAIA,UAAQ,KAAK,IAAI,EAAE,CAAC,CAAC,IAAI,UAAW;AAAA,YAC/C,WAAW,OAAO,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,KAAK;AACrC,kBAAK,IAAIA,UAAQ,KAAK,IAAI,EAAE,CAAC,CAAC,IAAI,UAAW;AAAA,YAC/C,OAAO;AACL;AAAA,YACF;AAAA,UACF,OAAO;AACL;AAAA,UACF;AACA,cAAI,IAAI,YAAY;AAClB,kBAAM,IAAI,MAAM,WAAW;AAAA,UAC7B;AACA;AAAA,QACF;AACA,YAAI,MAAMC,QAAO;AACf,gBAAM,IAAI,MAAM,aAAa;AAAA,QAC/B;AACA,eAAO,CAAC,GAAG,CAAC;AAAA,MACd;AAEA,MAAAH,WAAW,WAAW;AACpB,iBAASA,SAAQ,KAAK,MAAM;AAC1B,cAAI,OAAO,GAAG,GAAG;AACjB,cAAI,OAAO,QAAQ,UAAU;AAC3B,kBAAM,IAAI,MAAM,yBAAyB;AAAA,UAC3C;AACA,cAAI,CAAC,MAAM;AACT,kBAAM,IAAI,MAAM,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC,GAAG,OAAO,IAAI,CAAC;AAAA,UACrD;AACA,cAAI,CAAC,MAAM;AACT,mBAAO;AAAA,UACT;AACA,cAAI,OAAO,SAAS,YAAY,KAAK,QAAQ,GAAG,IAAI,IAAI;AACtD,gBAAI;AACF,mBAAK,WAAW,QAAQ,IAAI;AAAA,YAC9B,SAAS,QAAQ;AACf,sBAAQ;AACR,oBAAM,IAAI,MAAM,mBAAmB,IAAI;AAAA,YACzC;AACA,iBAAK,IAAI,IAAI,IAAI,KAAK,GAAG,IAAI,EAAE,GAAG;AAChC,kBAAI,KAAK,aAAc,cAAe,KAAK,MAAQ,GAAG;AACpD,qBAAK,UAAU;AACf;AAAA,cACF;AAAA,YACF;AAAA,UACF,WAAW,QAAQ,SAAS,GAAG;AAC7B,iBAAK,UAAU,SAAS,MAAM,EAAE;AAChC,iBAAK,WAAW;AAChB,gBAAI,KAAK,UAAU,GAAG;AACpB,mBAAK,WAAY,cAAe,KAAK,KAAK,YAAc;AAAA,YAC1D;AAAA,UACF,OAAO;AACL,kBAAM,IAAI,MAAM,qBAAqB;AAAA,UACvC;AACA,cAAI;AACF,iBAAK,WAAW,QAAQ,GAAG,IAAI,KAAK,cAAc;AAAA,UACpD,SAAS,QAAQ;AACf,oBAAQ;AACR,kBAAM,IAAI,MAAM,0BAA0B,GAAG;AAAA,UAC/C;AACA,cAAI,EAAE,KAAK,WAAW,KAAK;AACzB,kBAAM,IAAI,MAAM,2BAA2B,IAAI;AAAA,UACjD;AACA,eAAK,OAAO,KAAK,IAAI,GAAG,KAAK,KAAK,OAAO;AACzC,eAAK,OAAO,QAAQ,KAAK,OAAO;AAChC,eAAK,OAAO,QAAQ,KAAK,QAAQ;AACjC,eAAK,WAAW,QAAQ,CAAC,KAAK,QAAQ;AACtC,eAAK,QAAQ,KAAK,WAAW,KAAK,QAAQ,KAAK,UAAU,CAAC,IAAI,KAAK;AACnE,eAAK,OAAO,KAAK,WAAW,KAAK,QAAQ,KAAK,UAAU,KAAK,OAAO,CAAC,IAAI,QAAQ,KAAK,UAAU,KAAK,OAAO,CAAC;AAC7G,eAAK,YAAY,KAAK,WAAW,KAAK,QAAQ,KAAK,UAAU,KAAK,OAAO,CAAC,IAAI;AAAA,QAChF;AAEA,QAAAA,SAAQ,UAAU,WAAW,SAAS,IAAI;AACxC,cAAI,OAAO,OAAO,aAAa,GAAG,QAAQ,GAAG,IAAI,KAAK,GAAG,MAAM,GAAG,EAAE,WAAW,IAAI;AACjF,iBAAK,IAAIA,SAAQ,EAAE;AAAA,UACrB;AACA,cAAI,cAAcA,UAAS;AACzB,mBAAO,KAAK,SAAS,GAAG,IAAI,KAAK,KAAK,SAAS,GAAG,aAAa,GAAG,IAAI;AAAA,UACxE,OAAO;AACL,oBAAQ,QAAQ,EAAE,IAAI,KAAK,cAAc,OAAO,KAAK,UAAU,KAAK,cAAc;AAAA,UACpF;AAAA,QACF;AAEA,QAAAA,SAAQ,UAAU,OAAO,SAAS,OAAO;AACvC,cAAI,SAAS,MAAM;AACjB,oBAAQ;AAAA,UACV;AACA,iBAAO,IAAIA,SAAQ,QAAQ,KAAK,UAAW,KAAK,OAAO,KAAM,GAAG,KAAK,IAAI;AAAA,QAC3E;AAEA,QAAAA,SAAQ,UAAU,UAAU,SAAS,IAAI;AACvC,cAAI,OAAO,UAAU;AACrB,iBAAO,QAAQ,KAAK,KAAK;AACzB,qBAAW,QAAQ,KAAK,IAAI;AAC5B,kBAAQ;AACR,iBAAO,QAAQ,UAAU;AACvB,eAAG,QAAQ,IAAI,GAAG,MAAM,KAAK;AAC7B;AACA;AAAA,UACF;AAAA,QACF;AAEA,QAAAA,SAAQ,UAAU,WAAW,WAAW;AACtC,iBAAO,KAAK,OAAO,MAAM,KAAK;AAAA,QAChC;AAEA,eAAOA;AAAA,MAET,EAAG;AAEH,cAAQ,UAAU;AAElB,cAAQ,UAAU;AAElB,cAAQ,UAAUA;AAAA,IAEpB,GAAG,KAAK,OAAI;AAAA;AAAA;;;AC/MZ;AAAA;AAAA,QAAI,YAAU,WAAU;AAAC,qBAAa,OAAO,WAAS,OAAO,UAAQ;AAAG,UAAI,IAAE,OAAM,IAAE,MAAK,IAAE,SAAO,IAAE,KAAI,IAAE,IAAE,GAAE,IAAE,MAAI,GAAE,IAAE,QAAO,IAAE,YAAW,IAAE,KAAI,IAAE,aAAY,IAAE,KAAK,SAAO,SAASI,IAAE;AAAC,YAAIC,KAAED,KAAEA,KAAE;AAAE,eAAO,KAAGC,OAAID,KAAE,KAAG,MAAIA,MAAG,IAAEA,MAAG,IAAE,KAAG,KAAGC;AAAA,MAAC,GAAE,IAAE,EAAE,WAAU,KAAG,EAAE,WAAS,SAASD,IAAE;AAAC,eAAO,IAAI,EAAE,CAACA,EAAC;AAAA,MAAC,GAAE,EAAE,cAAY,EAAE,GAAE,GAAE,GAAE,GAAE,GAAE,CAAC,GAAE,EAAE,cAAY,EAAE,GAAE,GAAE,GAAE,GAAE,GAAE,CAAC,GAAE,EAAE,aAAW,SAASA,IAAE;AAAC,YAAIE,IAAEC,KAAE,IAAI,KAAEH,MAAGA,MAAG,IAAI,QAAQ,iBAAgB,SAASA,IAAE;AAAC,cAAIA,KAAE,CAACA,IAAEC,KAAE,QAAMD,KAAE,QAAM;AAAI,iBAAOG,GAAE,OAAKH,KAAEC,IAAEA;AAAA,QAAC,CAAC,EAAE,QAAQ,gCAA+B,SAASD,IAAEC,IAAEE,IAAE;AAAC,iBAAOF,KAAE,MAAIE,MAAG,KAAID,KAAE,OAAK,KAAG,CAACD,KAAG,CAACE,KAAG;AAAA,QAAE,CAAC,EAAE,QAAQ,UAAS,SAASH,IAAE;AAAC,iBAAOG,GAAE,OAAK,EAAEH,KAAE,GAAG,OAAO,GAAE,CAAC,GAAE;AAAA,QAAE,CAAC,EAAE,MAAM,KAAK;AAAE,YAAEA,GAAE,SAAOA,GAAE,CAAC,MAAIA,GAAE,CAAC,IAAE;AAAE,YAAGG,GAAE,OAAKD,KAAE,KAAK,IAAI,MAAM,MAAKF,EAAC,KAAGE,MAAG,IAAG,MAAMA,EAAC,EAAE,OAAM,IAAI,UAAU,cAAc;AAAE,eAAO,EAAEC,EAAC;AAAA,MAAC,GAAE,EAAE,YAAU,SAASH,IAAE;AAAC,eAAO,EAAEA,IAAE,CAAC;AAAA,MAAC,GAAE,EAAE,OAAK,GAAE,EAAE,OAAK,GAAE,EAAE,OAAK,GAAE,EAAE,UAAQ,SAASA,IAAE;AAAC,eAAO,KAAK,QAAM,CAACA,MAAG,GAAE;AAAA,MAAI,GAAE,EAAE,UAAQ,WAAU;AAAC,YAAIA,KAAE,EAAE,IAAI;AAAE,gBAAOA,GAAE,OAAK,MAAI,IAAG,CAACA,GAAE,OAAK,OAAK;AAAA,MAAG,GAAE,EAAE,WAAS,WAAU;AAAC,YAAIA,KAAE,EAAE,IAAI,GAAEC,KAAE,KAAK,MAAMD,GAAE,OAAK,GAAG,GAAEA,KAAEA,GAAE;AAAK,QAAAA,OAAIC,MAAGD,KAAE,IAAE,IAAE;AAAG,eAAOC;AAAA,MAAC,GAAE,EAAE,UAAQ,WAAU;AAAC,eAAO,KAAK,OAAO,EAAE,eAAe,IAAE,KAAK;AAAA,MAAI,GAAE,EAAE,SAAO,WAAU;AAAC,eAAO,EAAE,EAAE,IAAI,EAAE,IAAI;AAAA,MAAC,GAAE,EAAE,SAAO,WAAU;AAAC,eAAO,KAAK,SAAS,EAAE,QAAQ,YAAW,GAAG;AAAA,MAAC,GAAE,EAAE,WAAS,SAASD,IAAE;AAAC,YAAIC,KAAE,MAAKE,KAAEF,GAAE,OAAO,GAAEG,KAAE,EAAC,GAAE,WAAU;AAAC,iBAAO,EAAED,GAAE,YAAY,CAAC;AAAA,QAAC,GAAE,GAAE,WAAU;AAAC,iBAAO,EAAEA,GAAE,mBAAmB,GAAE,CAAC;AAAA,QAAC,GAAE,GAAE,WAAU;AAAC,iBAAO,EAAEA,GAAE,cAAc,CAAC;AAAA,QAAC,GAAE,GAAE,WAAU;AAAC,iBAAO,EAAEF,GAAE,QAAQ,GAAE,CAAC;AAAA,QAAC,GAAE,GAAE,WAAU;AAAC,iBAAO,EAAEE,GAAE,cAAc,CAAC;AAAA,QAAC,GAAE,GAAE,WAAU;AAAC,cAAIH,KAAEC,GAAE,QAAQ;AAAE,iBAAO,SAAOD,KAAE,MAAIA,KAAE,OAAKA,KAAE,MAAI,EAAEA,IAAE,CAAC,IAAE,KAAGA,KAAE,EAAEA,IAAE,CAAC,IAAE,WAASA,KAAE,MAAI,EAAE,CAACA,IAAE,CAAC,IAAEA;AAAA,QAAC,GAAE,GAAE,WAAU;AAAC,iBAAO,EAAEG,GAAE,UAAU,CAAC;AAAA,QAAC,GAAE,GAAE,WAAU;AAAC,iBAAO,EAAEA,GAAE,YAAY,CAAC;AAAA,QAAC,GAAE,GAAE,WAAU;AAAC,iBAAO,EAAEA,GAAE,WAAW,CAAC;AAAA,QAAC,GAAE,GAAE,WAAU;AAAC,iBAAO,SAASH,IAAE;AAAC,oBAAO,IAAEA,KAAE,KAAG,QAAM,IAAEA;AAAA,UAAE,EAAEG,GAAE,WAAW,CAAC;AAAA,QAAC,GAAE,GAAE,WAAU;AAAC,iBAAO,EAAEA,GAAE,YAAY,IAAE,CAAC;AAAA,QAAC,EAAC;AAAE,eAAO,SAASD,GAAEF,IAAE;AAAC,iBAAOA,GAAE,QAAQ,OAAM,SAASA,IAAE;AAAC,gBAAIC,KAAED,GAAE,CAAC,GAAEG,KAAE,EAAEF,EAAC,GAAEA,KAAEG,GAAEH,EAAC;AAAE,mBAAOE,KAAED,GAAEC,EAAC,IAAEF,KAAEA,GAAE,IAAED;AAAA,UAAC,CAAC;AAAA,QAAC,EAAEA,MAAG,CAAC;AAAA,MAAC,GAAE,EAAE,eAAa,EAAE,GAAE,GAAE,GAAE,GAAE,GAAE,CAAC,GAAE,EAAE,eAAa,EAAE,GAAE,GAAE,GAAE,GAAE,GAAE,CAAC,GAAE,0BAAyB,IAAE,CAAC,OAAM,OAAM,OAAM,OAAM,OAAM,OAAM,OAAM,OAAM,OAAM,OAAM,OAAM,KAAK,GAAE,IAAE,CAAC,OAAM,OAAM,OAAM,OAAM,OAAM,OAAM,KAAK,GAAE,IAAE,EAAC,KAAI,KAAI,GAAE,YAAW,GAAE,MAAK,GAAE,SAAQ,GAAE,YAAW,GAAE,KAAK,GAAE,MAAK,GAAE,OAAM,GAAE,QAAO;AAAE,aAAO;AAAE,eAAS,EAAEA,IAAEC,IAAEE,IAAE;AAAC,YAAID,KAAE;AAAK,YAAG,EAAEA,cAAa,GAAG,QAAO,IAAI,EAAEF,IAAEC,IAAEE,EAAC;AAAE,QAAAD,GAAE,OAAK,CAACF,MAAG,GAAEE,GAAE,OAAK,CAACD,MAAG,GAAEC,GAAE,OAAK,CAACC,MAAG,GAAE,EAAED,EAAC;AAAA,MAAC;AAAC,eAAS,EAAEF,IAAE;AAAC,YAAIC,IAAEE,IAAED,IAAEE,KAAEJ,GAAE,MAAKK,KAAEL,GAAE,MAAKM,KAAEN,GAAE,MAAKO,OAAID,KAAE,KAAG,KAAGA,QAAKA,OAAIH,KAAE,KAAK,MAAMG,KAAE,CAAC,KAAG,GAAED,MAAGF,IAAEA,KAAE,IAAGC,KAAE;AAAG,gBAAOC,KAAE,CAAC,KAAG,IAAEA,MAAGE,SAAMN,KAAE,EAAEI,KAAE,CAAC,OAAKD,MAAGH,KAAE,GAAEI,MAAGJ,KAAE,KAAIC,KAAE,EAAEG,EAAC,GAAG,eAAeE,KAAEL,GAAE,eAAe,CAAC,GAAEA,MAAGG,KAAE,CAACH,OAAID,KAAE,GAAGG,MAAGG,MAAG,CAAC,KAAG,GAAEN,MAAG,CAAC,KAAGC,MAAGA,MAAG,MAAIE,MAAGH,KAAE,GAAEI,KAAEH,KAAGC,KAAE,IAAGA,OAAIH,GAAE,OAAKI,IAAEJ,GAAE,OAAKK,IAAEL,GAAE,OAAKM,KAAGN;AAAA,MAAC;AAAC,eAAS,EAAEA,IAAE;AAAC,YAAIC,KAAE,oBAAI,KAAK,CAAC;AAAE,eAAOA,GAAE,QAAQD,EAAC,GAAEC;AAAA,MAAC;AAAC,eAAS,EAAED,IAAEC,IAAE;AAAC,QAAAD,KAAE,CAACA,MAAG;AAAE,YAAIG,KAAE,GAAGF,MAAGA,KAAE,KAAG,KAAG,CAAC,IAAE,EAAED,KAAE,CAAC,GAAEC,KAAEA,KAAE,IAAED,KAAE,GAAEA,KAAE,EAAEC,KAAE,CAAC;AAAE,eAAOD,OAAIG,MAAGH,IAAEC,MAAGD,KAAE,IAAG,IAAI,EAAE,MAAIC,IAAE,GAAEE,KAAE,CAAC;AAAA,MAAC;AAAC,eAAS,EAAED,IAAEE,IAAEC,IAAEC,IAAEC,IAAEC,IAAE;AAAC,eAAO,SAASR,IAAEC,IAAE;AAAC,cAAIE,KAAE,EAAE,IAAI;AAAE,UAAAH,KAAEA,MAAG,IAAI,MAAM,CAAC;AAAE,YAAEA,IAAEC,MAAG,CAAC;AAAE,cAAIC,KAAE,KAAK,MAAMC,GAAE,OAAK,GAAG,GAAEA,KAAEA,GAAE,QAAM,IAAE,IAAE,IAAGC,KAAE,EAAED,KAAE,CAAC,IAAE,EAAED,KAAE,CAAC,GAAEC,KAAEA,KAAE,IAAED,KAAE,GAAEA,KAAE,KAAK,MAAMC,KAAE,CAAC;AAAE,UAAAD,OAAIE,MAAGF,IAAEC,MAAGD,KAAE;AAAG,iBAAOO,GAAET,IAAEC,KAAEM,IAAEH,EAAC,GAAEK,GAAET,IAAEC,KAAEO,IAAEL,EAAC,GAAEH;AAAA,QAAC;AAAE,iBAASS,GAAET,IAAEC,IAAEE,IAAE;AAAC,UAAAH,GAAEC,KAAEC,EAAC,IAAEC,MAAG,KAAG,KAAIH,GAAEC,KAAEG,EAAC,IAAED,MAAG,KAAG,KAAIH,GAAEC,KAAEI,EAAC,IAAEF,MAAG,IAAE,KAAIH,GAAEC,KAAEK,EAAC,IAAE,MAAIH;AAAA,QAAC;AAAA,MAAC;AAAC,eAAS,EAAEA,IAAED,IAAEE,IAAEC,IAAEC,IAAEC,IAAE;AAAC,eAAO,SAASP,IAAEC,IAAE;AAAC,YAAED,IAAEC,MAAG,CAAC;AAAE,cAAIE,KAAEK,GAAER,IAAEC,KAAEK,EAAC;AAAE,iBAAO,EAAEE,GAAER,IAAEC,KAAEM,EAAC,GAAEJ,EAAC;AAAA,QAAC;AAAE,iBAASK,GAAER,IAAEC,IAAE;AAAC,iBAAO,WAASD,GAAEC,KAAEE,EAAC,KAAGH,GAAEC,KAAEC,EAAC,KAAG,KAAGF,GAAEC,KAAEG,EAAC,KAAG,IAAEJ,GAAEC,KAAEI,EAAC;AAAA,QAAE;AAAA,MAAC;AAAC,eAAS,EAAEL,IAAEC,IAAE;AAAC,QAAAD,KAAEA,MAAGA,GAAE;AAAO,YAAG,QAAMA,GAAE,OAAM,IAAI,UAAU,gBAAgB;AAAE,YAAGA,KAAEC,KAAE,EAAE,OAAM,IAAI,WAAW,cAAc;AAAA,MAAC;AAAC,eAAS,EAAED,IAAE;AAAC,gBAAO,IAAEA,KAAE,KAAG,QAAM,IAAEA;AAAA,MAAE;AAAC,eAAS,EAAEA,IAAEC,IAAE;AAAC,gBAAO,KAAG,IAAED,KAAI,OAAO,CAACC,EAAC;AAAA,MAAC;AAAA,IAAC,EAAE;AAAA;AAAA;;;ACA/9G;AAAA;AAAA;AAEA,aAAS,gBAAgB,WAAW;AAClC,aAAO,aAAa,SAAU,aAAa;AAAA,IAC7C;AAEA,aAAS,eAAe,WAAW;AACjC,aAAO,aAAa,SAAU,aAAa;AAAA,IAC7C;AAGA,WAAO,UAAU,SAAS,SAAS,WAAWS,SAAQ,YAAY;AAChE,UAAI,OAAOA,YAAW,UAAU;AAC9B,cAAM,IAAI,MAAM,sBAAsB;AAAA,MACxC;AAEA,UAAI,aAAaA,QAAO;AACxB,UAAI,gBAAgB;AACpB,UAAI;AACJ,UAAI;AAEJ,eAAS,IAAI,GAAG,IAAI,YAAY,KAAK,GAAG;AACtC,oBAAYA,QAAO,WAAW,CAAC;AAC/B,kBAAUA,QAAO,CAAC;AAElB,YAAI,gBAAgB,SAAS,KAAK,eAAeA,QAAO,WAAW,IAAI,CAAC,CAAC,GAAG;AAC1E,eAAK;AACL,qBAAWA,QAAO,CAAC;AAAA,QACrB;AAEA,yBAAiB,UAAU,OAAO;AAElC,YAAI,kBAAkB,YAAY;AAChC,iBAAOA,QAAO,MAAM,GAAG,IAAI,CAAC;AAAA,QAC9B,WACS,gBAAgB,YAAY;AACnC,iBAAOA,QAAO,MAAM,GAAG,IAAI,QAAQ,SAAS,CAAC;AAAA,QAC/C;AAAA,MACF;AAEA,aAAOA;AAAA,IACT;AAAA;AAAA;;;ACzCA;AAAA;AAAA;AAEA,aAAS,gBAAgB,WAAW;AAClC,aAAO,aAAa,SAAU,aAAa;AAAA,IAC7C;AAEA,aAAS,eAAe,WAAW;AACjC,aAAO,aAAa,SAAU,aAAa;AAAA,IAC7C;AAGA,WAAO,UAAU,SAAS,cAAcC,SAAQ;AAC9C,UAAI,OAAOA,YAAW,UAAU;AAC9B,cAAM,IAAI,MAAM,sBAAsB;AAAA,MACxC;AAEA,UAAI,aAAaA,QAAO;AACxB,UAAI,aAAa;AACjB,UAAI,YAAY;AAChB,UAAI,gBAAgB;AACpB,eAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACnC,oBAAYA,QAAO,WAAW,CAAC;AAG/B,YAAI,eAAe,SAAS,GAAG;AAE7B,cAAI,iBAAiB,QAAQ,gBAAgB,aAAa,GAAG;AAC3D,0BAAc;AAAA,UAChB,OACK;AACH,0BAAc;AAAA,UAChB;AAAA,QACF,WACS,aAAa,KAAO;AAC3B,wBAAc;AAAA,QAChB,WACS,aAAa,OAAQ,aAAa,MAAO;AAChD,wBAAc;AAAA,QAChB,WACS,aAAa,QAAS,aAAa,OAAQ;AAClD,wBAAc;AAAA,QAChB;AACA,wBAAgB;AAAA,MAClB;AAEA,aAAO;AAAA,IACT;AAAA;AAAA;;;AC9CA,IAAAC,mBAAA;AAAA;AAAA;AAEA,QAAI,WAAW;AACf,QAAI,YAAY;AAChB,WAAO,UAAU,SAAS,KAAK,MAAM,SAAS;AAAA;AAAA;;;ACJ9C;AAAA;AAAA;AA8BA,QAAI,WAAW;AAEf,QAAI,YAAY;AAChB,QAAI,YAAY;AAChB,QAAI,aAAa;AACjB,QAAI,oBAAoB;AACxB,QAAI,oBAAoB;AAExB,aAASC,UAAS,OAAO,aAAa;AACpC,UAAI,OAAO,UAAU,UAAU;AAC7B,cAAM,IAAI,MAAM,sBAAsB;AAAA,MACxC;AACA,UAAI,YAAY,MACb,QAAQ,WAAW,WAAW,EAC9B,QAAQ,WAAW,WAAW,EAC9B,QAAQ,YAAY,WAAW,EAC/B,QAAQ,mBAAmB,WAAW,EACtC,QAAQ,mBAAmB,WAAW;AACzC,aAAO,SAAS,WAAW,GAAG;AAAA,IAChC;AAEA,WAAO,UAAU,SAAU,OAAOC,UAAS;AACzC,UAAI,cAAeA,YAAWA,SAAQ,eAAgB;AACtD,UAAI,SAASD,UAAS,OAAO,WAAW;AACxC,UAAI,gBAAgB,IAAI;AACtB,eAAO;AAAA,MACT;AACA,aAAOA,UAAS,QAAQ,EAAE;AAAA,IAC5B;AAAA;AAAA;;;AC1DA;AAAA;AAAA,aAAS,eAAe,UAAUE,UAAS;AAEzC,UAAI,OAAOA,aAAY,WAAW;AAChC,QAAAA,WAAU,EAAE,SAASA,SAAQ;AAAA,MAC/B;AAEA,WAAK,oBAAoB,KAAK,MAAM,KAAK,UAAU,QAAQ,CAAC;AAC5D,WAAK,YAAY;AACjB,WAAK,WAAWA,YAAW,CAAC;AAC5B,WAAK,gBAAgBA,YAAWA,SAAQ,gBAAgB;AACxD,WAAK,MAAM;AACX,WAAK,UAAU,CAAC;AAChB,WAAK,YAAY;AACjB,WAAK,oBAAoB;AACzB,WAAK,sBAAsB;AAC3B,WAAK,WAAW;AAChB,WAAK,kBAAkB;AACvB,WAAK,SAAS;AAEd,UAAI,KAAK,SAAS,SAAS;AACzB,aAAK,kBAAkB,KAAK,UAAU,MAAM,CAAC;AAAA,MAC/C;AAAA,IACF;AACA,WAAO,UAAU;AAEjB,mBAAe,UAAU,QAAQ,WAAW;AAC1C,WAAK,YAAY;AACjB,WAAK,YAAY,KAAK,kBAAkB,MAAM,CAAC;AAAA,IACjD;AAEA,mBAAe,UAAU,OAAO,WAAW;AACzC,UAAI,KAAK,UAAU;AACjB,qBAAa,KAAK,QAAQ;AAAA,MAC5B;AACA,UAAI,KAAK,QAAQ;AACf,qBAAa,KAAK,MAAM;AAAA,MAC1B;AAEA,WAAK,YAAkB,CAAC;AACxB,WAAK,kBAAkB;AAAA,IACzB;AAEA,mBAAe,UAAU,QAAQ,SAAS,KAAK;AAC7C,UAAI,KAAK,UAAU;AACjB,qBAAa,KAAK,QAAQ;AAAA,MAC5B;AAEA,UAAI,CAAC,KAAK;AACR,eAAO;AAAA,MACT;AACA,UAAI,eAAc,oBAAI,KAAK,GAAE,QAAQ;AACrC,UAAI,OAAO,cAAc,KAAK,mBAAmB,KAAK,eAAe;AACnE,aAAK,QAAQ,KAAK,GAAG;AACrB,aAAK,QAAQ,QAAQ,IAAI,MAAM,iCAAiC,CAAC;AACjE,eAAO;AAAA,MACT;AAEA,WAAK,QAAQ,KAAK,GAAG;AAErB,UAAI,UAAU,KAAK,UAAU,MAAM;AACnC,UAAI,YAAY,QAAW;AACzB,YAAI,KAAK,iBAAiB;AAExB,eAAK,QAAQ,OAAO,GAAG,KAAK,QAAQ,SAAS,CAAC;AAC9C,oBAAU,KAAK,gBAAgB,MAAM,EAAE;AAAA,QACzC,OAAO;AACL,iBAAO;AAAA,QACT;AAAA,MACF;AAEA,UAAIC,QAAO;AACX,WAAK,SAAS,WAAW,WAAW;AAClC,QAAAA,MAAK;AAEL,YAAIA,MAAK,qBAAqB;AAC5B,UAAAA,MAAK,WAAW,WAAW,WAAW;AACpC,YAAAA,MAAK,oBAAoBA,MAAK,SAAS;AAAA,UACzC,GAAGA,MAAK,iBAAiB;AAEzB,cAAIA,MAAK,SAAS,OAAO;AACrB,YAAAA,MAAK,SAAS,MAAM;AAAA,UACxB;AAAA,QACF;AAEA,QAAAA,MAAK,IAAIA,MAAK,SAAS;AAAA,MACzB,GAAG,OAAO;AAEV,UAAI,KAAK,SAAS,OAAO;AACrB,aAAK,OAAO,MAAM;AAAA,MACtB;AAEA,aAAO;AAAA,IACT;AAEA,mBAAe,UAAU,UAAU,SAAS,IAAI,YAAY;AAC1D,WAAK,MAAM;AAEX,UAAI,YAAY;AACd,YAAI,WAAW,SAAS;AACtB,eAAK,oBAAoB,WAAW;AAAA,QACtC;AACA,YAAI,WAAW,IAAI;AACjB,eAAK,sBAAsB,WAAW;AAAA,QACxC;AAAA,MACF;AAEA,UAAIA,QAAO;AACX,UAAI,KAAK,qBAAqB;AAC5B,aAAK,WAAW,WAAW,WAAW;AACpC,UAAAA,MAAK,oBAAoB;AAAA,QAC3B,GAAGA,MAAK,iBAAiB;AAAA,MAC3B;AAEA,WAAK,mBAAkB,oBAAI,KAAK,GAAE,QAAQ;AAE1C,WAAK,IAAI,KAAK,SAAS;AAAA,IACzB;AAEA,mBAAe,UAAU,MAAM,SAAS,IAAI;AAC1C,cAAQ,IAAI,0CAA0C;AACtD,WAAK,QAAQ,EAAE;AAAA,IACjB;AAEA,mBAAe,UAAU,QAAQ,SAAS,IAAI;AAC5C,cAAQ,IAAI,4CAA4C;AACxD,WAAK,QAAQ,EAAE;AAAA,IACjB;AAEA,mBAAe,UAAU,QAAQ,eAAe,UAAU;AAE1D,mBAAe,UAAU,SAAS,WAAW;AAC3C,aAAO,KAAK;AAAA,IACd;AAEA,mBAAe,UAAU,WAAW,WAAW;AAC7C,aAAO,KAAK;AAAA,IACd;AAEA,mBAAe,UAAU,YAAY,WAAW;AAC9C,UAAI,KAAK,QAAQ,WAAW,GAAG;AAC7B,eAAO;AAAA,MACT;AAEA,UAAI,SAAS,CAAC;AACd,UAAI,YAAY;AAChB,UAAI,iBAAiB;AAErB,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC5C,YAAI,QAAQ,KAAK,QAAQ,CAAC;AAC1B,YAAIC,WAAU,MAAM;AACpB,YAAI,SAAS,OAAOA,QAAO,KAAK,KAAK;AAErC,eAAOA,QAAO,IAAI;AAElB,YAAI,SAAS,gBAAgB;AAC3B,sBAAY;AACZ,2BAAiB;AAAA,QACnB;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAAA;AAAA;;;ACjKA;AAAA;AAAA,QAAI,iBAAiB;AAErB,YAAQ,YAAY,SAASC,UAAS;AACpC,UAAI,WAAW,QAAQ,SAASA,QAAO;AACvC,aAAO,IAAI,eAAe,UAAU;AAAA,QAChC,SAASA,aAAYA,SAAQ,WAAWA,SAAQ,YAAY;AAAA,QAC5D,OAAOA,YAAWA,SAAQ;AAAA,QAC1B,cAAcA,YAAWA,SAAQ;AAAA,MACrC,CAAC;AAAA,IACH;AAEA,YAAQ,WAAW,SAASA,UAAS;AACnC,UAAIA,oBAAmB,OAAO;AAC5B,eAAO,CAAC,EAAE,OAAOA,QAAO;AAAA,MAC1B;AAEA,UAAI,OAAO;AAAA,QACT,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,YAAY,IAAI;AAAA,QAChB,YAAY;AAAA,QACZ,WAAW;AAAA,MACb;AACA,eAAS,OAAOA,UAAS;AACvB,aAAK,GAAG,IAAIA,SAAQ,GAAG;AAAA,MACzB;AAEA,UAAI,KAAK,aAAa,KAAK,YAAY;AACrC,cAAM,IAAI,MAAM,uCAAuC;AAAA,MACzD;AAEA,UAAI,WAAW,CAAC;AAChB,eAAS,IAAI,GAAG,IAAI,KAAK,SAAS,KAAK;AACrC,iBAAS,KAAK,KAAK,cAAc,GAAG,IAAI,CAAC;AAAA,MAC3C;AAEA,UAAIA,YAAWA,SAAQ,WAAW,CAAC,SAAS,QAAQ;AAClD,iBAAS,KAAK,KAAK,cAAc,GAAG,IAAI,CAAC;AAAA,MAC3C;AAGA,eAAS,KAAK,SAAS,GAAE,GAAG;AAC1B,eAAO,IAAI;AAAA,MACb,CAAC;AAED,aAAO;AAAA,IACT;AAEA,YAAQ,gBAAgB,SAAS,SAAS,MAAM;AAC9C,UAAI,SAAU,KAAK,YACd,KAAK,OAAO,IAAI,IACjB;AAEJ,UAAI,UAAU,KAAK,MAAM,SAAS,KAAK,IAAI,KAAK,YAAY,CAAC,IAAI,KAAK,IAAI,KAAK,QAAQ,OAAO,CAAC;AAC/F,gBAAU,KAAK,IAAI,SAAS,KAAK,UAAU;AAE3C,aAAO;AAAA,IACT;AAEA,YAAQ,OAAO,SAAS,KAAKA,UAAS,SAAS;AAC7C,UAAIA,oBAAmB,OAAO;AAC5B,kBAAUA;AACV,QAAAA,WAAU;AAAA,MACZ;AAEA,UAAI,CAAC,SAAS;AACZ,kBAAU,CAAC;AACX,iBAAS,OAAO,KAAK;AACnB,cAAI,OAAO,IAAI,GAAG,MAAM,YAAY;AAClC,oBAAQ,KAAK,GAAG;AAAA,UAClB;AAAA,QACF;AAAA,MACF;AAEA,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,YAAI,SAAW,QAAQ,CAAC;AACxB,YAAI,WAAW,IAAI,MAAM;AAEzB,YAAI,MAAM,KAAI,SAAS,aAAaC,WAAU;AAC5C,cAAI,KAAW,QAAQ,UAAUD,QAAO;AACxC,cAAI,OAAW,MAAM,UAAU,MAAM,KAAK,WAAW,CAAC;AACtD,cAAI,WAAW,KAAK,IAAI;AAExB,eAAK,KAAK,SAAS,KAAK;AACtB,gBAAI,GAAG,MAAM,GAAG,GAAG;AACjB;AAAA,YACF;AACA,gBAAI,KAAK;AACP,wBAAU,CAAC,IAAI,GAAG,UAAU;AAAA,YAC9B;AACA,qBAAS,MAAM,MAAM,SAAS;AAAA,UAChC,CAAC;AAED,aAAG,QAAQ,WAAW;AACpB,YAAAC,UAAS,MAAM,KAAK,IAAI;AAAA,UAC1B,CAAC;AAAA,QACH,GAAE,KAAK,KAAK,QAAQ;AACpB,YAAI,MAAM,EAAE,UAAUD;AAAA,MACxB;AAAA,IACF;AAAA;AAAA;;;ACnGA,IAAAE,iBAAA;AAAA;AAAA,WAAO,UAAU;AAAA;AAAA;;;ACAjB;AAAA;AAAA;AACA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAC5D,QAAM,aAAN,MAAiB;AAAA,MACb,cAAc;AACV,aAAK,YAAY,CAAC;AAClB,aAAK,YAAY,CAAC;AAClB,aAAK,gBAAgB,CAAC;AACtB,aAAK,WAAW;AAChB,aAAK,YAAY;AAAA,MACrB;AAAA,MACA,KAAKC,QAAO;AACR,YAAI,KAAK;AACL;AACJ,cAAM,aAAa,EAAE,OAAAA,QAAO,MAAM,MAAM;AACxC,YAAI,KAAK,UAAU,QAAQ;AACvB,gBAAM,cAAc,KAAK,UAAU,MAAM;AACzC,cAAI;AACA,wBAAY,QAAQ,UAAU;AAAA,QACtC,OACK;AACD,eAAK,UAAU,KAAK,QAAQ,QAAQ,UAAU,CAAC;AAC/C,cAAI,KAAK,kBAAkB,UACvB,KAAK,UAAU,UAAU,KAAK,iBAC9B,CAAC,KAAK,UAAU;AAChB,iBAAK,WAAW;AAChB,gBAAI,KAAK,cAAc,WAAW;AAC9B,mBAAK,cAAc,UAAU;AAAA,YACjC,WACS,SAAS;AACd,sBAAQ,KAAK,+BAA+B,KAAK,UAAU,MAAM,QAAQ;AAAA,YAC7E;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,OAAO;AACH,YAAI,KAAK;AACL;AACJ,aAAK,YAAY;AACjB,aAAK,OAAO;AACZ,mBAAW,eAAe,KAAK,WAAW;AACtC,sBAAY,QAAQ,EAAE,OAAO,QAAW,MAAM,KAAK,CAAC;AAAA,QACxD;AACA,aAAK,UAAU,SAAS;AAAA,MAC5B;AAAA,MACA,KAAK,OAAO;AACR,YAAI,KAAK;AACL;AACJ,aAAK,YAAY;AACjB,aAAK,OAAO;AACZ,YAAI,KAAK,UAAU,QAAQ;AACvB,qBAAW,eAAe,KAAK,WAAW;AACtC,wBAAY,OAAO,KAAK;AAAA,UAC5B;AACA,eAAK,UAAU,SAAS;AAAA,QAC5B,OACK;AACD,gBAAM,YAAY,QAAQ,OAAO,KAAK;AAEtC,oBAAU,MAAM,MAAM;AAAA,UAAE,CAAC;AACzB,eAAK,UAAU,KAAK,SAAS;AAAA,QACjC;AAAA,MACJ;AAAA,MACA,SAAS;AACL,gBAAQ,QAAQ,EAAE,KAAK,MAAM;AACzB,cAAI,KAAK;AACL,iBAAK,eAAe;AAAA,QAC5B,CAAC;AAAA,MACL;AAAA,MACA,CAAC,OAAO,aAAa,IAAI;AACrB,eAAO;AAAA,UACH,MAAM,CAACA,WAAU;AACb,kBAAM,SAAS,KAAK,UAAU,MAAM;AACpC,gBAAI,QAAQ;AACR,kBAAI,KAAK,iBAAiB,UACtB,KAAK,UAAU,UAAU,KAAK,gBAC9B,KAAK,UAAU;AACf,qBAAK,WAAW;AAChB,oBAAI,KAAK,cAAc,UAAU;AAC7B,uBAAK,cAAc,SAAS;AAAA,gBAChC;AAAA,cACJ;AACA,qBAAO;AAAA,YACX,WACS,KAAK,WAAW;AACrB,qBAAO,QAAQ,QAAQ,EAAE,OAAO,QAAW,MAAM,KAAK,CAAC;AAAA,YAC3D,OACK;AACD,qBAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,qBAAK,UAAU,KAAK,EAAE,SAAS,OAAO,CAAC;AAAA,cAC3C,CAAC;AAAA,YACL;AAAA,UACJ;AAAA,UACA,QAAQ,MAAM;AACV,iBAAK,YAAY;AACjB,iBAAK,UAAU,SAAS;AACxB,iBAAK,OAAO;AACZ,mBAAO,QAAQ,QAAQ,EAAE,OAAO,QAAW,MAAM,KAAK,CAAC;AAAA,UAC3D;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,QAAMC,iBAAN,MAAoB;AAAA,MAChB,YAAY,QAAQ,EAAE,gBAAgB,KAAK,eAAe,EAAE,IAAI,CAAC,GAAG;AAChE,cAAM,QAAQ,IAAI,WAAW;AAC7B,cAAM,gBAAgB;AACtB,cAAM,eAAe;AACrB,cAAM,iBACF,OAAO;AAAA,UACH,MAAM,CAAAD,WAAS,MAAM,KAAKA,MAAK;AAAA,UAC/B,MAAM,MAAM,MAAM,KAAK;AAAA,UACvB,MAAM,WAAS,MAAM,KAAK,KAAK;AAAA,UAC/B,IAAI,CAAC,OAAO,OAAO;AACf,kBAAM,cAAc,KAAK,IAAI;AAAA,UACjC;AAAA,QACJ,CAAC,MAAM,MAAM;AAAA,QAAE;AACnB,aAAK,OAAO,aAAa,IAAI,MAAM,MAAM,OAAO,aAAa,EAAE;AAC/D,eAAO,OAAO,IAAI;AAAA,MACtB;AAAA,IACJ;AACA,YAAQ,gBAAgBC;AACxB,YAAQ,UAAUA;AAAA;AAAA;;;ACxHlB;AAAA;AAAA;AACA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAC5D,QAAM,mBAAmB;AACzB,YAAQ,gBAAgB,iBAAiB;AACzC,aAAS,UAAU,OAAOC,UAAS,WAAW;AAC1C,aAAO,IAAI,iBAAiB,cAAc,CAAC,EAAE,KAAK,MAAM;AACpD,aAAK,iBAAiB,OAAO,MAAMA,QAAO;AAC1C,eAAO,MAAM,KAAK,oBAAoB,OAAO,MAAMA,QAAO;AAAA,MAC9D,GAAG,SAAS;AAAA,IAChB;AACA,YAAQ,YAAY;AACpB,YAAQ,UAAU,iBAAiB;AAAA;AAAA;;;ACT7B,SAAU,SAAU,OAAiC;AACzD,QAAM,gBAAgB;IACpB,WAAW;;AAGb,MAAI,SAAS,MAAM;AACjB,WAAO;EACT;AAEA,MAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,QAAI,MAAM,WAAW,GAAG;AACtB,aAAO;IACT;AAEA,WAAO;EACT;AAEA,SAAO;IACL;;AAEJ;;;AChBO,IAAM,cAAc;AAErB,SAAU,cAAe,KAAQ;AACrC,SAAO;IACL,QAAQ,IAAI,UAAU;IACtB,IAAI,IAAI,MAAM,IAAI,WAAW;IAC7B,IAAI,IAAI,MAAM,IAAI,WAAW;IAC7B,IAAI,IAAI,MAAM,IAAI,WAAW;IAC7B,IAAI,IAAI,MAAM,IAAI,WAAW;IAC7B,IAAI,IAAI,MAAM,IAAI,WAAW;IAC7B,WAAW,IAAI,YAAY,IAAI,aAAa,CAAA,GAAI,IAAI,CAAC,aAAiB;AACpE,aAAO;QACL,MAAM,SAAS;QACf,MAAM,WAAW,SAAS,IAAI;;IAElC,CAAC;IACD,SAAS,IAAI,UAAU,IAAI,WAAW,CAAA,GAAI,IAAI,CAAC,WAAe;AAC5D,aAAO;QACL,MAAM,OAAO;QACb,MAAM,WAAW,OAAO,IAAI;QAC5B,KAAM,OAAO,OAAO,OAAO,OAAO;QAClC,MAAM,OAAO,gBAAgB,aAAa,SAAmB,OAAO,IAAI,IAAI,OAAO;;IAEvF,CAAC;;AAEL;;;ACjBO,IAAM,4BAA4B;AAqBnC,SAAU,iBAAkB,KAAa,OAAgC,CAAA,GAAE;AAC/E,QAAM,YAAY,IAAI,OAAO;IAC3B,aAAa,KAAK,oBAAoB;GACvC;AAED,SAAO,OAAO,MAAMC,WAAU,CAAA,MAAM;AAClC,UAAM,eAAe,IAAI,gBAAe;AACxC,iBAAa,IAAI,QAAQ,IAAI;AAE7B,aAASA,SAAQ,KAAK,EAAE,QAAQ,UAAO;AAErC,mBAAa,OAAO,QAAQ,WAAW,IAAI,CAAC;IAC9C,CAAC;AAED,IAAAA,SAAQ,aAAa,IAAI,oBAA4B,aAAa,EAAE,QAAQ,KAAI,CAAE,CAAC;AAGnF,UAAM,WAAW,MAAM,UAAU,IAAI,YAAW;AAC9C,YAAM,MAAM,MAAM,MAAM,GAAG,GAAG,IAAI,YAAY,IAAI;QAChD,SAAS;UACP,QAAQ;;QAEV,QAAQA,UAAS;OAClB;AAED,UAAI,IAAI,WAAW,KAAK;AACtB,cAAM,IAAI,MAAM,2BAA2B,IAAI,MAAM,MAAM,IAAI,UAAU,EAAE;MAC7E;AAEA,YAAMC,YAAW,cAAc,MAAM,IAAI,KAAI,CAAE;AAE/C,MAAAD,SAAQ,aAAa,IAAI,oBAAiC,gBAAgB,EAAE,QAAQC,UAAQ,CAAE,CAAC;AAE/F,aAAOA;IACT,GAAG;MACD,QAAQD,SAAQ;KACjB;AAED,QAAI,YAAY,MAAM;AACpB,YAAM,IAAI,MAAM,0BAA0B;IAC5C;AAEA,WAAO;EACT;AACF;;;AC5EM,SAAU,kBAAe;AAC7B,SAAO;IACL,iBAAiB,sCAAsC;IACvD,iBAAiB,4BAA4B;;AAEjD;;;ACRA,qBAAoB;AAsBpB,IAAM,gBAAN,MAAmB;EACA;EAEjB,YAAa,SAAe;AAC1B,SAAK,UAAM,eAAAE,SAAQ,OAAO;EAC5B;EAEA,IAAK,MAAc,OAAmB;AACpC,QAAI,kBAAkB;AACtB,UAAM,UAAoB,CAAA;AAE1B,eAAW,QAAQ,OAAO;AACxB,YAAM,SAAS,KAAK,WAAW,MAAM,IAAI;AAEzC,UAAI,OAAO,WAAW,GAAG;AACvB,0BAAkB;AAClB;MACF;AAEA,cAAQ,KAAK,GAAG,MAAM;IACxB;AAEA,QAAI,iBAAiB;AACnB,aAAO,cAAc,EAAE,QAAO,CAAE;IAClC;EACF;EAEQ,WAAY,QAAgB,MAAgB;AAClD,UAAM,MAAM,GAAG,OAAO,YAAW,CAAE,IAAI,IAAI;AAC3C,UAAM,UAA0B,KAAK,IAAI,IAAI,GAAG;AAEhD,QAAI,WAAW,MAAM;AACnB,YAAM,gBAAgB,QACnB,OAAO,CAAC,UAAS;AAChB,eAAO,MAAM,UAAU,KAAK,IAAG;MACjC,CAAC,EACA,IAAI,CAAC,EAAE,SAAS,OAAAC,OAAK,OAAQ;QAC5B,GAAGA;QACH,KAAK,KAAK,OAAO,UAAU,KAAK,IAAG,KAAM,GAAI;QAC7C,MAAM,WAAWA,OAAM,IAAI;QAC3B;AAEJ,UAAI,cAAc,WAAW,GAAG;AAC9B,aAAK,IAAI,OAAO,GAAG;MACrB;AAIA,aAAO;IACT;AAEA,WAAO,CAAA;EACT;EAEA,IAAK,QAAgB,QAAc;AACjC,UAAM,MAAM,GAAG,OAAO,YAAW,CAAE,IAAI,OAAO,IAAI;AAElD,UAAM,UAA0B,KAAK,IAAI,IAAI,GAAG,KAAK,CAAA;AACrD,YAAQ,KAAK;MACX,SAAS,KAAK,IAAG,KAAO,OAAO,OAAO,eAAe;MACrD,OAAO;KACR;AAED,SAAK,IAAI,IAAI,KAAK,OAAO;EAC3B;EAEA,OAAQ,QAAgB,MAAkB;AACxC,UAAM,MAAM,GAAG,OAAO,YAAW,CAAE,IAAI,IAAI;AAE3C,SAAK,IAAI,OAAO,GAAG;EACrB;EAEA,QAAK;AACH,SAAK,IAAI,MAAK;EAChB;;AAMI,SAAU,MAAO,MAAY;AACjC,SAAO,IAAI,cAAc,IAAI;AAC/B;;;AChGA,IAAM,4BAA4B;AAE5B,IAAO,MAAP,MAAU;EACG;EACA;EAEjB,YAAa,MAAa;AACxB,SAAK,YAAY,CAAA;AACjB,SAAK,QAAQ,MAAM,KAAK,aAAa,yBAAyB;AAE9D,WAAO,QAAQ,KAAK,aAAa,CAAA,CAAE,EAAE,QAAQ,CAAC,CAAC,KAAK,QAAQ,MAAK;AAC/D,UAAI,CAAC,MAAM,QAAQ,QAAQ,GAAG;AAC5B,mBAAW,CAAC,QAAQ;MACtB;AAGA,UAAI,CAAC,IAAI,SAAS,GAAG,GAAG;AACtB,cAAM,GAAG,GAAG;MACd;AAEA,WAAK,UAAU,GAAG,IAAI;IACxB,CAAC;AAGD,QAAI,KAAK,UAAU,GAAG,KAAK,MAAM;AAC/B,WAAK,UAAU,GAAG,IAAI,gBAAe;IACvC;EACF;;;;;;;;;EAUA,MAAM,MAAO,QAAgBC,WAAwB,CAAA,GAAE;AACrD,UAAM,QAAQ,SAASA,SAAQ,KAAK;AACpC,UAAM,SAASA,SAAQ,WAAW,QAAQ,KAAK,MAAM,IAAI,QAAQ,KAAK,IAAI;AAE1E,QAAI,UAAU,MAAM;AAClB,MAAAA,SAAQ,aAAa,IAAI,oBAA4B,aAAa,EAAE,QAAQ,OAAM,CAAE,CAAC;AAErF,aAAO;IACT;AAEA,UAAM,MAAM,GAAG,OAAO,MAAM,GAAG,EAAE,IAAG,CAAE;AACtC,UAAM,aAAa,KAAK,UAAU,GAAG,KAAK,KAAK,UAAU,GAAG,GAAG,KAAK,MAAK;AACvE,aAAQ,KAAK,OAAM,IAAK,MAAO,KAAK;IACtC,CAAC;AAED,UAAM,SAAkB,CAAA;AAExB,eAAW,YAAY,WAAW;AAEhC,UAAIA,SAAQ,QAAQ,YAAY,MAAM;AACpC;MACF;AAEA,UAAI;AACF,cAAM,SAAS,MAAM,SAAS,QAAQ;UACpC,GAAGA;UACH;SACD;AAED,mBAAW,UAAU,OAAO,QAAQ;AAClC,eAAK,MAAM,IAAI,QAAQ,MAAM;QAC/B;AAEA,eAAO;MACT,SAAS,KAAU;AACjB,eAAO,KAAK,GAAG;AACf,QAAAA,SAAQ,aAAa,IAAI,oBAA2B,aAAa,EAAE,QAAQ,IAAG,CAAE,CAAC;MACnF;IACF;AAEA,QAAI,OAAO,WAAW,GAAG;AACvB,YAAM,OAAO,CAAC;IAChB;AAEA,UAAM,IAAI,eAAe,QAAQ,iBAAiB,MAAM,IAAI,KAAK,SAAS;EAC5E;;;;ACCF,IAAY;CAAZ,SAAYC,aAAU;AACpB,EAAAA,YAAAA,YAAA,GAAA,IAAA,CAAA,IAAA;AACA,EAAAA,YAAAA,YAAA,OAAA,IAAA,CAAA,IAAA;AACA,EAAAA,YAAAA,YAAA,KAAA,IAAA,EAAA,IAAA;AACA,EAAAA,YAAAA,YAAA,MAAA,IAAA,EAAA,IAAA;AACF,GALY,eAAA,aAAU,CAAA,EAAA;AAwKhB,SAAU,IAAK,OAAgB,CAAA,GAAE;AACrC,SAAO,IAAI,IAAS,IAAI;AAC1B;;;ACnJM,IAAOC,cAAP,cAA0B,MAAK;EAC5B;EACA;EAEP,YAAaC,UAAkBC,QAAa;AAC1C,UAAMD,YAAW,2BAA2B;AAC5C,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,SAAK,OAAOC,UAAQ;EACtB;;AAgCF,eAAsB,UAAe,SAAsB,WAAmB,QAAsB,MAA0B;AAE5H,QAAM,QAAQ,IAAIF,YAAW,MAAM,cAAc,MAAM,SAAS;AAEhE,MAAI,QAAQ,YAAY,MAAM;AAC5B,WAAO,QAAQ,OAAO,KAAK;EAC7B;AAEA,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAU;AACrC,aAAS,kBAAe;AACtB,cAAQ,oBAAoB,SAAS,aAAa;AAClD,cAAQ,oBAAoB,WAAW,aAAa;AAEpD,UAAI,MAAM,cAAc,MAAM;AAC5B,gBAAQ,oBAAoB,KAAK,YAAY,kBAAkB;MACjE;IACF;AAEA,UAAM,gBAAgB,CAAC,QAAkB;AACvC,UAAI;AACF,YAAI,MAAM,SAAS,GAAG,MAAM,OAAO;AACjC;QACF;MACF,SAAS,KAAU;AACjB,wBAAe;AACf,eAAO,GAAG;AACV;MACF;AAEA,sBAAe;AACf,cAAQ,GAAG;IACb;AAEA,UAAM,qBAAqB,CAAC,QAAkB;AAC5C,sBAAe;AACf,aAAO,IAAI,MAAM;IACnB;AAEA,UAAM,gBAAgB,MAAW;AAC/B,sBAAe;AACf,aAAO,KAAK;IACd;AAEA,YAAQ,iBAAiB,SAAS,aAAa;AAC/C,YAAQ,iBAAiB,WAAW,aAAa;AAEjD,QAAI,MAAM,cAAc,MAAM;AAC5B,cAAQ,iBAAiB,KAAK,YAAY,kBAAkB;IAC9D;EACF,CAAC;AACH;;;AClMM,SAAU,SAAUG,OAAkC,MAAY;AACtE,MAAI;AAEJ,QAAM,SAAS,WAAA;AACb,UAAM,QAAQ,WAAA;AACZ,gBAAU;AACV,WAAKA,MAAI;IACX;AAEA,iBAAa,OAAO;AACpB,cAAU,WAAW,OAAO,IAAI;EAClC;AACA,SAAO,QAAQ,MAAW;EAAE;AAC5B,SAAO,OAAO,MAAW;AACvB,iBAAa,OAAO;EACtB;AAEA,SAAO;AACT;;;ACxBM,IAAO,iBAAP,cAA8B,MAAK;EACvC;EACA;EACA;EACA;EAEA,YAAaC,WAAU,uBAAuB,OAAwB;AACpE,UAAMA,QAAO;AACb,SAAK,OAAO;AACZ,SAAK,kBAAkB,MAAM;AAC7B,SAAK,eAAe,MAAM;AAC1B,SAAK,iBAAiB,MAAM;AAC5B,SAAK,oBAAoB,MAAM;EACjC;;AAGI,IAAO,iBAAP,cAA8B,MAAK;EACvC,OAAO,OAAO;EAEd,YAAaA,WAAkB,sBAAoB;AACjD,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;;;ACvBI,IAAO,eAAP,MAAmB;EAChB;EACA;EAEP,YAAa,QAAoB;AAC/B,SAAK,SAAS;AACd,SAAK,WAAW,OAAM;AAEtB,SAAK,UAAU,KAAK,QAAQ,KAAK,IAAI;AACrC,SAAK,QAAQ,iBAAiB,SAAS,KAAK,OAAO;EACrD;EAEA,UAAO;AACL,SAAK,SAAS,OAAO,KAAK,QAAQ,UAAU,IAAI,WAAU,CAAE;EAC9D;EAEA,UAAO;AACL,SAAK,QAAQ,oBAAoB,SAAS,KAAK,OAAO;EACxD;;;;ACZF,SAAS,WAAQ;AACf,SAAO,GAAI,SAAS,OAAO,KAAK,OAAM,IAAK,GAAG,GAAG,EAAE,EAAG,SAAQ,CAAE,GAAG,KAAK,IAAG,CAAE;AAC/E;AAQM,IAAO,MAAP,MAAU;EACP;EACA;EACA;EACA;EACA;EACS;EACC;EAEjB,YAAa,IAAqDC,UAAY;AAC5E,SAAK,KAAK,SAAQ;AAClB,SAAK,SAAS;AACd,SAAK,KAAK;AACV,SAAK,UAAUA;AACf,SAAK,aAAa,CAAA;AAClB,SAAK,WAAW;MACd,SAAS,KAAK,IAAG;;AAGnB,SAAK,aAAa,IAAI,gBAAe;AACrC,oBAAgB,UAAU,KAAK,WAAW,MAAM;AAEhD,SAAK,UAAU,KAAK,QAAQ,KAAK,IAAI;EACvC;EAEA,MAAO,KAAU;AACf,SAAK,WAAW,MAAM,GAAG;EAC3B;EAEA,UAAO;AACL,UAAM,aAAa,KAAK,WAAW,OAAO,CAAC,KAAK,SAAQ;AACtD,aAAO,OAAQ,KAAK,QAAQ,YAAY;IAC1C,GAAG,IAAI;AAGP,QAAI,YAAY;AACd,WAAK,WAAW,MAAM,IAAI,WAAU,CAAE;AACtC,WAAK,QAAO;IACd;EACF;EAEA,MAAM,KAAMA,WAAwB,CAAA,GAAE;AACpC,UAAM,YAAY,IAAI,aAA4BA,SAAQ,MAAM;AAChE,SAAK,WAAW,KAAK,SAAS;AAE9B,IAAAA,SAAQ,QAAQ,iBAAiB,SAAS,KAAK,OAAO;AAEtD,WAAO,UAAU,SAAS;EAC5B;EAEA,MAAM,MAAG;AACP,SAAK,SAAS;AACd,SAAK,SAAS,UAAU,KAAK,IAAG;AAEhC,QAAI;AACF,WAAK,WAAW,OAAO,eAAc;AAErC,YAAM,SAAS,MAAM,WAAW,KAAK,GAAG;QACtC,GAAI,KAAK,WAAW,CAAA;QACpB,QAAQ,KAAK,WAAW;OACzB,GAAG,KAAK,WAAW,MAAM;AAE1B,WAAK,WAAW,QAAQ,eAAY;AAClC,kBAAU,SAAS,QAAQ,MAAM;MACnC,CAAC;AAED,WAAK,SAAS;IAChB,SAAS,KAAK;AACZ,WAAK,WAAW,QAAQ,eAAY;AAClC,kBAAU,SAAS,OAAO,GAAG;MAC/B,CAAC;AAED,WAAK,SAAS;IAChB;AACE,WAAK,SAAS,WAAW,KAAK,IAAG;AACjC,WAAK,QAAO;IACd;EACF;EAEA,UAAO;AACL,SAAK,WAAW,QAAQ,eAAY;AAClC,gBAAU,QAAO;AACjB,gBAAU,QAAQ,oBAAoB,SAAS,KAAK,OAAO;IAC7D,CAAC;EACH;;;;ACqBI,IAAO,QAAP,cAA8F,kBAAyD;EACpJ;EACA;EACA;EACC;EACS;EAEjB,YAAa,OAA6C,CAAA,GAAE;AAC1D,UAAK;AAEL,SAAK,cAAc,KAAK,eAAe,OAAO;AAC9C,SAAK,UAAU,KAAK,WAAW,OAAO;AACtC,SAAK,UAAU;AAEf,QAAI,KAAK,cAAc,MAAM;AAC3B,WAAK,SAAS,oBAAoB,KAAK,YAAY;QACjD,WAAW,MAAK;AACd,iBAAO;YACL,MAAM,KAAK,MAAM;YACjB,SAAS,KAAK;YACd,QAAQ,KAAK,MAAM,SAAS,KAAK;;QAErC;OACD;IACH;AAEA,SAAK,OAAO,KAAK;AACjB,SAAK,QAAQ,CAAA;AAEb,SAAK,YAAY,SAAS,KAAK,UAAU,KAAK,IAAI,GAAG,CAAC;AACtD,SAAK,WAAW,SAAS,KAAK,SAAS,KAAK,IAAI,GAAG,CAAC;EACtD;EAEA,YAAS;AACP,QAAI,KAAK,SAAS,GAAG;AACnB;IACF;AAEA,SAAK,kBAAkB,OAAO;EAChC;EAEA,WAAQ;AACN,QAAI,KAAK,YAAY,GAAG;AACtB;IACF;AAEA,SAAK,kBAAkB,MAAM;EAC/B;EAEQ,oBAAiB;AACvB,QAAI,KAAK,SAAS,GAAG;AACnB,WAAK,UAAS;AAEd,UAAI,KAAK,YAAY,GAAG;AACtB,aAAK,SAAQ;MACf;AAEA,aAAO;IACT;AAEA,QAAI,KAAK,UAAU,KAAK,aAAa;AACnC,UAAI;AAEJ,iBAAW,KAAK,KAAK,OAAO;AAC1B,YAAI,EAAE,WAAW,UAAU;AACzB,gBAAM;AACN;QACF;MACF;AAEA,UAAI,OAAO,MAAM;AACf,eAAO;MACT;AAEA,WAAK,kBAAkB,QAAQ;AAE/B,WAAK;AAEL,WAAK,IAAI,IAAG,EACT,QAAQ,MAAK;AAEZ,iBAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AAC1C,cAAI,KAAK,MAAM,CAAC,MAAM,KAAK;AACzB,iBAAK,MAAM,OAAO,GAAG,CAAC;AACtB;UACF;QACF;AAEA,aAAK;AACL,aAAK,kBAAiB;AACtB,aAAK,kBAAkB,MAAM;MAC/B,CAAC;AAEH,aAAO;IACT;AAEA,WAAO;EACT;EAEQ,QAAS,KAAmC;AAClD,SAAK,MAAM,KAAK,GAAG;AAEnB,QAAI,KAAK,QAAQ,MAAM;AACrB,WAAK,MAAM,KAAK,KAAK,IAAI;IAC3B;EACF;;;;EAKA,MAAM,IAAK,IAA4CC,UAAoB;AACzE,IAAAA,UAAS,QAAQ,eAAc;AAE/B,QAAI,KAAK,SAAS,KAAK,SAAS;AAC9B,YAAM,IAAI,eAAc;IAC1B;AAEA,UAAM,MAAM,IAAI,IAA+B,IAAIA,QAAO;AAC1D,SAAK,QAAQ,GAAG;AAChB,SAAK,kBAAkB,KAAK;AAC5B,SAAK,kBAAiB;AAEtB,WAAO,IAAI,KAAKA,QAAO,EACpB,KAAK,YAAS;AACb,WAAK,kBAAkB,aAAa,EAAE,QAAQ,OAAM,CAAE;AACtD,WAAK,kBAAkB,WAAW,EAAE,QAAQ,EAAE,KAAK,OAAM,EAAE,CAAE;AAE7D,aAAO;IACT,CAAC,EACA,MAAM,SAAM;AACX,UAAI,IAAI,WAAW,UAAU;AAE3B,iBAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AAC1C,cAAI,KAAK,MAAM,CAAC,MAAM,KAAK;AACzB,iBAAK,MAAM,OAAO,GAAG,CAAC;AACtB;UACF;QACF;MACF;AAEA,WAAK,kBAAkB,SAAS,EAAE,QAAQ,IAAG,CAAE;AAC/C,WAAK,kBAAkB,WAAW,EAAE,QAAQ,EAAE,KAAK,OAAO,IAAG,EAAE,CAAE;AAEjE,YAAM;IACR,CAAC;EACL;;;;EAKA,QAAK;AACH,SAAK,MAAM,OAAO,GAAG,KAAK,MAAM,MAAM;EACxC;;;;EAKA,QAAK;AACH,SAAK,MAAM,QAAQ,SAAM;AACvB,UAAI,MAAM,IAAI,WAAU,CAAE;IAC5B,CAAC;AAED,SAAK,MAAK;EACZ;;;;;;EAOA,MAAM,QAASA,UAAsB;AAEnC,QAAI,KAAK,SAAS,GAAG;AACnB;IACF;AAEA,UAAM,UAAU,MAAM,SAASA,UAAS,MAAM;EAChD;;;;;;;;;;;;EAaA,MAAM,eAAgB,OAAeA,UAAsB;AAEzD,QAAI,KAAK,OAAO,OAAO;AACrB;IACF;AAEA,UAAM,UAAU,MAAM,QAAQA,UAAS,QAAQ;MAC7C,QAAQ,MAAM,KAAK,OAAO;KAC3B;EACH;;;;;;;;;EAUA,MAAM,OAAQA,UAAsB;AAElC,QAAI,KAAK,YAAY,KAAK,KAAK,SAAS,GAAG;AACzC;IACF;AAEA,UAAM,UAAU,MAAM,QAAQA,UAAS,MAAM;EAC/C;;;;EAKA,IAAI,OAAI;AACN,WAAO,KAAK,MAAM;EACpB;;;;EAKA,IAAI,SAAM;AACR,WAAO,KAAK,MAAM,SAAS,KAAK;EAClC;;;;EAKA,IAAI,UAAO;AACT,WAAO,KAAK;EACd;;;;;;;;;;;EAYA,OAAQ,YAAaA,UAAsB;AACzC,IAAAA,UAAS,QAAQ,eAAc;AAE/B,UAAM,SAAS,SAAwB;MACrC,YAAY;KACb;AAED,UAAM,UAAU,CAAC,QAAqB;AACpC,UAAI,OAAO,MAAM;AACf,aAAK,MAAK;MACZ,OAAO;AACL,aAAK,MAAK;MACZ;AAEA,aAAO,IAAI,GAAG;IAChB;AAEA,UAAM,qBAAqB,CAAC,QAAyC;AACnE,UAAI,IAAI,UAAU,MAAM;AACtB,eAAO,KAAK,IAAI,MAAM;MACxB;IACF;AAEA,UAAM,eAAe,CAAC,QAAiC;AACrD,cAAQ,IAAI,MAAM;IACpB;AAEA,UAAM,cAAc,MAAW;AAC7B,cAAO;IACT;AAGA,UAAM,gBAAgB,MAAW;AAC/B,cAAQ,IAAI,WAAW,eAAe,CAAC;IACzC;AAGA,SAAK,iBAAiB,aAAa,kBAAkB;AACrD,SAAK,iBAAiB,SAAS,YAAY;AAC3C,SAAK,iBAAiB,QAAQ,WAAW;AACzC,IAAAA,UAAS,QAAQ,iBAAiB,SAAS,aAAa;AAExD,QAAI;AACF,aAAQ;IACV;AAEE,WAAK,oBAAoB,aAAa,kBAAkB;AACxD,WAAK,oBAAoB,SAAS,YAAY;AAC9C,WAAK,oBAAoB,QAAQ,WAAW;AAC5C,MAAAA,UAAS,QAAQ,oBAAoB,SAAS,aAAa;AAG3D,cAAO;IACT;EACF;;;;AC5aK,IAAM,QAAQ,IAAI,WAAW,CAAC;AAW/B,SAAUC,QAAQ,IAAgB,IAAc;AACpD,MAAI,OAAO,IAAI;AAAE,WAAO;EAAK;AAC7B,MAAI,GAAG,eAAe,GAAG,YAAY;AACnC,WAAO;EACT;AAEA,WAAS,KAAK,GAAG,KAAK,GAAG,YAAY,MAAM;AACzC,QAAI,GAAG,EAAE,MAAM,GAAG,EAAE,GAAG;AACrB,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEM,SAAU,OAAQ,GAA6C;AACnE,MAAI,aAAa,cAAc,EAAE,YAAY,SAAS,cAAc;AAAE,WAAO;EAAE;AAC/E,MAAI,aAAa,aAAa;AAAE,WAAO,IAAI,WAAW,CAAC;EAAE;AACzD,MAAI,YAAY,OAAO,CAAC,GAAG;AACzB,WAAO,IAAI,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU;EAC5D;AACA,QAAM,IAAI,MAAM,mCAAmC;AACrD;;;ACvBA,SAAS,KAAM,UAAUC,OAAI;AAC3B,MAAI,SAAS,UAAU,KAAK;AAAE,UAAM,IAAI,UAAU,mBAAmB;EAAE;AACvE,MAAI,WAAW,IAAI,WAAW,GAAG;AACjC,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,aAAS,CAAC,IAAI;EAChB;AACA,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,QAAI,IAAI,SAAS,OAAO,CAAC;AACzB,QAAI,KAAK,EAAE,WAAW,CAAC;AACvB,QAAI,SAAS,EAAE,MAAM,KAAK;AAAE,YAAM,IAAI,UAAU,IAAI,eAAe;IAAE;AACrE,aAAS,EAAE,IAAI;EACjB;AACA,MAAI,OAAO,SAAS;AACpB,MAAI,SAAS,SAAS,OAAO,CAAC;AAC9B,MAAI,SAAS,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,GAAG;AAC1C,MAAI,UAAU,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI;AAI3C,WAASC,SAAQ,QAAM;AAErB,QAAI,kBAAkB;AAAY;aAAW,YAAY,OAAO,MAAM,GAAG;AACvE,eAAS,IAAI,WAAW,OAAO,QAAQ,OAAO,YAAY,OAAO,UAAU;IAC7E,WAAW,MAAM,QAAQ,MAAM,GAAG;AAChC,eAAS,WAAW,KAAK,MAAM;IACjC;AACA,QAAI,EAAE,kBAAkB,aAAa;AAAE,YAAM,IAAI,UAAU,qBAAqB;IAAE;AAClF,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO;IAAG;AAErC,QAAI,SAAS;AACb,QAAIC,WAAS;AACb,QAAI,SAAS;AACb,QAAI,OAAO,OAAO;AAClB,WAAO,WAAW,QAAQ,OAAO,MAAM,MAAM,GAAG;AAC9C;AACA;IACF;AAEA,QAAI,QAAS,OAAO,UAAU,UAAU,MAAO;AAC/C,QAAI,MAAM,IAAI,WAAW,IAAI;AAE7B,WAAO,WAAW,MAAM;AACtB,UAAI,QAAQ,OAAO,MAAM;AAEzB,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,MAAM,IAAI,GAAG,MAAO;AAC9B,YAAI,GAAG,IAAK,QAAQ,SAAU;AAC9B,gBAAS,QAAQ,SAAU;MAC7B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,IAAI,GAAG,MAAM,GAAG;AACrC;IACF;AAEA,QAAI,MAAM,OAAO,OAAO,MAAM;AAC9B,WAAO,MAAM,MAAM,EAAE,KAAK;AAAE,aAAO,SAAS,OAAO,IAAI,GAAG,CAAC;IAAG;AAC9D,WAAO;EACT;AAIA,WAAS,aAAc,QAAM;AAC3B,QAAI,OAAO,WAAW,UAAU;AAAE,YAAM,IAAI,UAAU,iBAAiB;IAAE;AACzE,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO,IAAI,WAAU;IAAG;AACnD,QAAI,MAAM;AAEV,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,SAAS;AACb,QAAIA,WAAS;AACb,WAAO,OAAO,GAAG,MAAM,QAAQ;AAC7B;AACA;IACF;AAEA,QAAI,QAAU,OAAO,SAAS,OAAO,SAAU,MAAO;AACtD,QAAI,OAAO,IAAI,WAAW,IAAI;AAE9B,WAAO,OAAO,GAAG,GAAG;AAElB,UAAI,QAAQ,SAAS,OAAO,WAAW,GAAG,CAAC;AAE3C,UAAI,UAAU,KAAK;AAAE;MAAO;AAC5B,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,OAAO,KAAK,GAAG,MAAO;AAChC,aAAK,GAAG,IAAK,QAAQ,QAAS;AAC9B,gBAAS,QAAQ,QAAS;MAC5B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,KAAK,GAAG,MAAM,GAAG;AACtC;IACF;AACA,QAAI,MAAM,IAAI,WAAW,UAAU,OAAO,IAAI;AAC9C,QAAIE,KAAI;AACR,WAAO,QAAQ,MAAM;AACnB,UAAIA,IAAG,IAAI,KAAK,KAAK;IACvB;AACA,WAAO;EACT;AAIA,WAASC,SAAQC,SAAM;AACrB,QAAI,SAAS,aAAaA,OAAM;AAChC,QAAI,QAAQ;AAAE,aAAO;IAAO;AAC5B,UAAM,IAAI,MAAM,OAAON,KAAI,YAAY;EACzC;AACA,SAAO;IACL,QAAQC;IACR;IACA,QAAQI;;AAEZ;AACA,IAAI,MAAM;AAEV,IAAI,kCAAkC;AAEtC,IAAA,iBAAe;;;ACjIf,IAAM,UAAN,MAAa;EACF;EACA;EACA;EAET,YAAaE,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;EACpB;EAEA,OAAQ,OAAiB;AACvB,QAAI,iBAAiB,YAAY;AAC/B,aAAO,GAAG,KAAK,MAAM,GAAG,KAAK,WAAW,KAAK,CAAC;IAChD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;;AAQF,IAAM,UAAN,MAAa;EACF;EACA;EACA;EACQ;EAEjB,YAAaA,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,UAAM,kBAAkB,OAAO,YAAY,CAAC;AAE5C,QAAI,oBAAoB,QAAW;AACjC,YAAM,IAAI,MAAM,0BAA0B;IAC5C;AACA,SAAK,kBAAkB;AACvB,SAAK,aAAa;EACpB;EAEA,OAAQ,MAAY;AAClB,QAAI,OAAO,SAAS,UAAU;AAC5B,UAAI,KAAK,YAAY,CAAC,MAAM,KAAK,iBAAiB;AAChD,cAAM,MAAM,qCAAqC,KAAK,UAAU,IAAI,CAAC,KAAK,KAAK,IAAI,+CAA+C,KAAK,MAAM,EAAE;MACjJ;AACA,aAAO,KAAK,WAAW,KAAK,MAAM,KAAK,OAAO,MAAM,CAAC;IACvD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;EAEA,GAAgC,SAAmE;AACjG,WAAO,GAAG,MAAM,OAAO;EACzB;;AAKF,IAAM,kBAAN,MAAqB;EACV;EAET,YAAa,UAA0B;AACrC,SAAK,WAAW;EAClB;EAEA,GAAiC,SAAmE;AAClG,WAAO,GAAG,MAAM,OAAO;EACzB;EAEA,OAAQ,OAAa;AACnB,UAAM,SAAS,MAAM,CAAC;AACtB,UAAM,UAAU,KAAK,SAAS,MAAM;AACpC,QAAI,WAAW,MAAM;AACnB,aAAO,QAAQ,OAAO,KAAK;IAC7B,OAAO;AACL,YAAM,WAAW,qCAAqC,KAAK,UAAU,KAAK,CAAC,+BAA+B,OAAO,KAAK,KAAK,QAAQ,CAAC,gBAAgB;IACtJ;EACF;;AAGI,SAAU,GAAyC,MAA+C,OAA8C;AACpJ,SAAO,IAAI,gBAAgB;IACzB,GAAI,KAAK,YAAY,EAAE,CAAE,KAA2B,MAAM,GAAG,KAAI;IACjE,GAAI,MAAM,YAAY,EAAE,CAAE,MAA4B,MAAM,GAAG,MAAK;GAClD;AACtB;AAEM,IAAO,QAAP,MAAY;EACP;EACA;EACA;EACA;EACA;EACA;EAET,YAAaA,OAAY,QAAgB,YAAsB,YAAoB;AACjF,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,UAAU,IAAI,QAAQA,OAAM,QAAQ,UAAU;AACnD,SAAK,UAAU,IAAI,QAAQA,OAAM,QAAQ,UAAU;EACrD;EAEA,OAAQ,OAAiB;AACvB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;EAEA,OAAQ,OAAa;AACnB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;;AAGI,SAAU,KAAmD,EAAE,MAAAA,OAAM,QAAQ,QAAAC,UAAQ,QAAAC,SAAM,GAAsE;AACrK,SAAO,IAAI,MAAMF,OAAM,QAAQC,UAAQC,QAAM;AAC/C;AAEM,SAAU,MAAoD,EAAE,MAAAF,OAAM,QAAQ,UAAAG,UAAQ,GAAoD;AAC9I,QAAM,EAAE,QAAAF,UAAQ,QAAAC,SAAM,IAAK,eAAMC,WAAUH,KAAI;AAC/C,SAAO,KAAK;IACV;IACA,MAAAA;IACA,QAAAC;IACA,QAAQ,CAAC,SAA6B,OAAOC,SAAO,IAAI,CAAC;GAC1D;AACH;AAEA,SAASA,QAAQE,SAAgB,aAAqC,aAAqBJ,OAAY;AAErG,MAAI,MAAMI,QAAO;AACjB,SAAOA,QAAO,MAAM,CAAC,MAAM,KAAK;AAC9B,MAAE;EACJ;AAGA,QAAM,MAAM,IAAI,WAAY,MAAM,cAAc,IAAK,CAAC;AAGtD,MAAI,OAAO;AACX,MAAI,SAAS;AACb,MAAI,UAAU;AACd,WAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAE5B,UAAMC,SAAQ,YAAYD,QAAO,CAAC,CAAC;AACnC,QAAIC,WAAU,QAAW;AACvB,YAAM,IAAI,YAAY,OAAOL,KAAI,YAAY;IAC/C;AAGA,aAAU,UAAU,cAAeK;AACnC,YAAQ;AAGR,QAAI,QAAQ,GAAG;AACb,cAAQ;AACR,UAAI,SAAS,IAAI,MAAQ,UAAU;IACrC;EACF;AAGA,MAAI,QAAQ,gBAAgB,MAAQ,UAAW,IAAI,UAAY,GAAG;AAChE,UAAM,IAAI,YAAY,wBAAwB;EAChD;AAEA,SAAO;AACT;AAEA,SAASJ,QAAQ,MAAkBE,WAAkB,aAAmB;AACtE,QAAM,MAAMA,UAASA,UAAS,SAAS,CAAC,MAAM;AAC9C,QAAM,QAAQ,KAAK,eAAe;AAClC,MAAI,MAAM;AAEV,MAAI,OAAO;AACX,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAEpC,aAAU,UAAU,IAAK,KAAK,CAAC;AAC/B,YAAQ;AAGR,WAAO,OAAO,aAAa;AACzB,cAAQ;AACR,aAAOA,UAAS,OAAQ,UAAU,IAAK;IACzC;EACF;AAGA,MAAI,SAAS,GAAG;AACd,WAAOA,UAAS,OAAQ,UAAW,cAAc,IAAM;EACzD;AAGA,MAAI,KAAK;AACP,YAAS,IAAI,SAAS,cAAe,OAAO,GAAG;AAC7C,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEA,SAAS,kBAAmBA,WAAgB;AAE1C,QAAM,cAAsC,CAAA;AAC5C,WAAS,IAAI,GAAG,IAAIA,UAAS,QAAQ,EAAE,GAAG;AACxC,gBAAYA,UAAS,CAAC,CAAC,IAAI;EAC7B;AACA,SAAO;AACT;AAKM,SAAU,QAAsD,EAAE,MAAAH,OAAM,QAAQ,aAAa,UAAAG,UAAQ,GAAyE;AAClL,QAAM,cAAc,kBAAkBA,SAAQ;AAC9C,SAAO,KAAK;IACV;IACA,MAAAH;IACA,OAAQ,OAAiB;AACvB,aAAOC,QAAO,OAAOE,WAAU,WAAW;IAC5C;IACA,OAAQ,OAAa;AACnB,aAAOD,QAAO,OAAO,aAAa,aAAaF,KAAI;IACrD;GACD;AACH;;;AC9OO,IAAM,SAAS,MAAM;EAC1B,QAAQ;EACR,MAAM;EACN,UAAU;CACX;AAEM,IAAM,cAAc,MAAM;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;CACX;;;ACVM,IAAM,SAAS,QAAQ;EAC5B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAM,cAAc,QAAQ;EACjC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAM,YAAY,QAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAM,iBAAiB,QAAQ;EACpC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAM,YAAY,QAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAM,iBAAiB,QAAQ;EACpC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAM,eAAe,QAAQ;EAClC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAM,oBAAoB,QAAQ;EACvC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAM,UAAU,QAAQ;EAC7B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;;;AC7DM,IAAM,YAAY,MAAM;EAC7B,MAAM;EACN,QAAQ;EACR,UAAU;CACX;AAEM,IAAM,eAAe,MAAM;EAChC,MAAM;EACN,QAAQ;EACR,UAAU;CACX;;;ACXD,IAAI,WAAWM;AAEf,IAAI,MAAM;AAAV,IACI,OAAO;AADX,IAEI,SAAS,CAAC;AAFd,IAGI,MAAM,KAAK,IAAI,GAAG,EAAE;AAOxB,SAASA,QAAO,KAAK,KAAK,QAAM;AAC9B,QAAM,OAAO,CAAA;AACb,WAAS,UAAU;AACnB,MAAI,YAAY;AAEhB,SAAM,OAAO,KAAK;AAChB,QAAI,QAAQ,IAAK,MAAM,MAAQ;AAC/B,WAAO;EACT;AACA,SAAM,MAAM,QAAQ;AAClB,QAAI,QAAQ,IAAK,MAAM,MAAQ;AAC/B,aAAS;EACX;AACA,MAAI,MAAM,IAAI,MAAM;AAGpB,EAAAA,QAAO,QAAQ,SAAS,YAAY;AAEpC,SAAO;AACT;AAEA,IAAIC,UAAS;AAEb,IAAI,QAAQ;AAAZ,IACI,SAAS;AAMb,SAAS,KAAK,KAAK,QAAM;AACvB,MAAI,MAAS,GACT,SAAS,UAAU,GACnB,QAAS,GACT,UAAU,QACV,GACA,IAAI,IAAI;AAEZ,KAAG;AACD,QAAI,WAAW,GAAG;AAEhB,WAAK,QAAQ;AACb,YAAM,IAAI,WAAW,yBAAyB;IAChD;AACA,QAAI,IAAI,SAAS;AACjB,WAAO,QAAQ,MACV,IAAI,WAAW,SACf,IAAI,UAAU,KAAK,IAAI,GAAG,KAAK;AACpC,aAAS;EACX,SAAS,KAAK;AAGd,OAAK,QAAQ,UAAU;AAEvB,SAAO;AACT;AAEA,IAAI,KAAK,KAAK,IAAI,GAAI,CAAC;AACvB,IAAI,KAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAI,KAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAI,KAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAI,KAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAI,KAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAI,KAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAI,KAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAI,KAAK,KAAK,IAAI,GAAG,EAAE;AAEvB,IAAI,SAAS,SAAgCC,QAAK;AAChD,SACEA,SAAQ,KAAK,IACbA,SAAQ,KAAK,IACbA,SAAQ,KAAK,IACbA,SAAQ,KAAK,IACbA,SAAQ,KAAK,IACbA,SAAQ,KAAK,IACbA,SAAQ,KAAK,IACbA,SAAQ,KAAK,IACbA,SAAQ,KAAK,IACA;AAEjB;AAEA,IAAI,SAAS;EACT,QAAQ;EACR,QAAQD;EACR,gBAAgB;;AAGpB,IAAI,eAAe;AAEnB,IAAA,iBAAe;;;ACrGT,SAAUE,QAAQ,MAAkB,SAAS,GAAC;AAClD,QAAMC,SAAO,eAAO,OAAO,MAAM,MAAM;AACvC,SAAO,CAACA,QAAM,eAAO,OAAO,KAAK;AACnC;AAEM,SAAU,SAAU,KAAa,QAAoB,SAAS,GAAC;AACnE,iBAAO,OAAO,KAAK,QAAQ,MAAM;AACjC,SAAO;AACT;AAEM,SAAUC,gBAAgB,KAAW;AACzC,SAAO,eAAO,eAAe,GAAG;AAClC;;;ACPM,SAAU,OAA8BC,QAAYC,SAAkB;AAC1E,QAAM,OAAOA,QAAO;AACpB,QAAM,aAAoBC,gBAAeF,MAAI;AAC7C,QAAM,eAAe,aAAoBE,gBAAe,IAAI;AAE5D,QAAM,QAAQ,IAAI,WAAW,eAAe,IAAI;AAChD,EAAO,SAASF,QAAM,OAAO,CAAC;AAC9B,EAAO,SAAS,MAAM,OAAO,UAAU;AACvC,QAAM,IAAIC,SAAQ,YAAY;AAE9B,SAAO,IAAI,OAAOD,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAKM,SAAUE,QAAQ,WAAqB;AAC3C,QAAM,QAAQ,OAAO,SAAS;AAC9B,QAAM,CAACH,QAAM,UAAU,IAAWG,QAAO,KAAK;AAC9C,QAAM,CAAC,MAAM,YAAY,IAAWA,QAAO,MAAM,SAAS,UAAU,CAAC;AACrE,QAAMF,UAAS,MAAM,SAAS,aAAa,YAAY;AAEvD,MAAIA,QAAO,eAAe,MAAM;AAC9B,UAAM,IAAI,MAAM,kBAAkB;EACpC;AAEA,SAAO,IAAI,OAAOD,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAEM,SAAUG,QAAQ,GAAoB,GAAU;AACpD,MAAI,MAAM,GAAG;AACX,WAAO;EACT,OAAO;AACL,UAAM,OAAO;AAEb,WACE,EAAE,SAAS,KAAK,QAChB,EAAE,SAAS,KAAK,QAChB,KAAK,iBAAiB,cACtBA,QAAW,EAAE,OAAO,KAAK,KAAK;EAElC;AACF;AAMM,IAAO,SAAP,MAAa;EACR;EACA;EACA;EACA;;;;EAKT,YAAaJ,QAAY,MAAYC,SAAoB,OAAiB;AACxE,SAAK,OAAOD;AACZ,SAAK,OAAO;AACZ,SAAK,SAASC;AACd,SAAK,QAAQ;EACf;;;;AC1DI,SAAU,OAA0F,MAASI,QAAmC;AACpJ,QAAM,EAAE,OAAO,SAAAC,SAAO,IAAK;AAC3B,UAAQA,UAAS;IACf,KAAK;AACH,aAAO,WACL,OACA,UAAU,IAAI,GACdD,UAAqC,UAAU,OAAO;IAE1D;AACE,aAAO,WACL,OACA,UAAU,IAAI,GACbA,UAAQ,OAAO,OAAwC;EAE9D;AACF;AAYA,IAAME,SAAQ,oBAAI,QAAO;AAEzB,SAAS,UAAW,KAAoB;AACtC,QAAMC,cAAYD,OAAM,IAAI,GAAG;AAC/B,MAAIC,eAAa,MAAM;AACrB,UAAMA,cAAY,oBAAI,IAAG;AACzB,IAAAD,OAAM,IAAI,KAAKC,WAAS;AACxB,WAAOA;EACT;AACA,SAAOA;AACT;AAEM,IAAO,MAAP,MAAO,KAAG;EACL;EACA;EACA;EACA;EACA;;;;;;EAOT,YAAaC,UAAkBC,QAAc,WAAqC,OAAiB;AACjG,SAAK,OAAOA;AACZ,SAAK,UAAUD;AACf,SAAK,YAAY;AACjB,SAAK,QAAQ;AAIb,SAAK,GAAG,IAAI;EACd;;;;;;;EAQA,IAAI,QAAK;AACP,WAAO;EACT;;EAGA,IAAI,aAAU;AACZ,WAAO,KAAK,MAAM;EACpB;;EAGA,IAAI,aAAU;AACZ,WAAO,KAAK,MAAM;EACpB;EAEA,OAAI;AACF,YAAQ,KAAK,SAAS;MACpB,KAAK,GAAG;AACN,eAAO;MACT;MACA,KAAK,GAAG;AACN,cAAM,EAAE,MAAAC,QAAM,UAAS,IAAK;AAE5B,YAAIA,WAAS,aAAa;AACxB,gBAAM,IAAI,MAAM,0CAA0C;QAC5D;AAGA,YAAI,UAAU,SAAS,cAAc;AACnC,gBAAM,IAAI,MAAM,oDAAoD;QACtE;AAEA,eACE,KAAI,SACF,SAA6C;MAGnD;MACA,SAAS;AACP,cAAM,MACJ,+BAA+B,KAAK,OAAO,4CAA4C;MAE3F;IACF;EACF;EAEA,OAAI;AACF,YAAQ,KAAK,SAAS;MACpB,KAAK,GAAG;AACN,cAAM,EAAE,MAAAA,QAAM,QAAAC,QAAM,IAAK,KAAK;AAC9B,cAAM,YAAmB,OAAOD,QAAMC,OAAM;AAC5C,eACE,KAAI,SAAS,KAAK,MAAM,SAAS;MAErC;MACA,KAAK,GAAG;AACN,eAAO;MACT;MACA,SAAS;AACP,cAAM,MACJ,+BAA+B,KAAK,OAAO,4CAA4C;MAE3F;IACF;EACF;EAEA,OAAQ,OAAc;AACpB,WAAO,KAAI,OAAO,MAAM,KAAK;EAC/B;EAEA,OAAO,OAAsFC,OAA4C,OAAc;AACrJ,UAAM,UAAU;AAChB,WACE,WAAW,QACXA,MAAK,SAAS,QAAQ,QACtBA,MAAK,YAAY,QAAQ,WAClBC,QAAOD,MAAK,WAAW,QAAQ,SAAS;EAEnD;EAEA,SAAUE,QAAmC;AAC3C,WAAO,OAAO,MAAMA,MAAI;EAC1B;EAEA,SAAM;AACJ,WAAO,EAAE,KAAK,OAAO,IAAI,EAAC;EAC5B;EAEA,OAAI;AACF,WAAO;EACT;EAES,CAAC,OAAO,WAAW,IAAI;;EAIhC,CAAC,OAAO,IAAI,4BAA4B,CAAC,IAAC;AACxC,WAAO,OAAO,KAAK,SAAQ,CAAE;EAC/B;;;;;;;;;;;EAYA,OAAO,MAAwF,OAA+C;AAC5I,QAAI,SAAS,MAAM;AACjB,aAAO;IACT;AAEA,UAAMC,SAAQ;AACd,QAAIA,kBAAiB,MAAK;AAExB,aAAOA;IACT,WAAYA,OAAM,GAAG,KAAK,QAAQA,OAAM,GAAG,MAAMA,OAAM,SAAUA,OAAM,UAAUA,QAAO;AAMtF,YAAM,EAAE,SAAAN,UAAS,MAAAC,QAAM,WAAW,MAAK,IAAKK;AAC5C,aAAO,IAAI,KACTN,UACAC,QACA,WACA,SAAS,UAAUD,UAASC,QAAM,UAAU,KAAK,CAAC;IAEtD,WAAWK,OAAM,SAAS,MAAM,MAAM;AAIpC,YAAM,EAAE,SAAAN,UAAS,WAAW,MAAAC,OAAI,IAAKK;AACrC,YAAMJ,UAAgBK,QAAO,SAAS;AACtC,aAAO,KAAI,OAAOP,UAASC,QAAMC,OAAM;IACzC,OAAO;AAGL,aAAO;IACT;EACF;;;;;;EAOA,OAAO,OAAsFF,UAAkBC,QAAcC,SAAgC;AAC3J,QAAI,OAAOD,WAAS,UAAU;AAC5B,YAAM,IAAI,MAAM,uCAAuC;IACzD;AAEA,QAAI,EAAEC,QAAO,iBAAiB,aAAa;AACzC,YAAM,IAAI,MAAM,gBAAgB;IAClC;AAEA,YAAQF,UAAS;MACf,KAAK,GAAG;AACN,YAAIC,WAAS,aAAa;AACxB,gBAAM,IAAI,MACR,wCAAwC,WAAW,kBAAkB;QAEzE,OAAO;AACL,iBAAO,IAAI,KAAID,UAASC,QAAMC,SAAQA,QAAO,KAAK;QACpD;MACF;MACA,KAAK,GAAG;AACN,cAAM,QAAQ,UAAUF,UAASC,QAAMC,QAAO,KAAK;AACnD,eAAO,IAAI,KAAIF,UAASC,QAAMC,SAAQ,KAAK;MAC7C;MACA,SAAS;AACP,cAAM,IAAI,MAAM,iBAAiB;MACnC;IACF;EACF;;;;EAKA,OAAO,SAAuBA,SAAgD;AAC5E,WAAO,KAAI,OAAO,GAAG,aAAaA,OAAM;EAC1C;;;;;;;EAQA,OAAO,SAAyDD,QAAYC,SAAgC;AAC1G,WAAO,KAAI,OAAO,GAAGD,QAAMC,OAAM;EACnC;;;;;;;;EASA,OAAO,OAAoF,OAAuD;AAChJ,UAAM,CAAC,KAAK,SAAS,IAAI,KAAI,YAAY,KAAK;AAC9C,QAAI,UAAU,WAAW,GAAG;AAC1B,YAAM,IAAI,MAAM,kBAAkB;IACpC;AACA,WAAO;EACT;;;;;;;;;;EAWA,OAAO,YAA2E,OAAyC;AACzH,UAAM,QAAQ,KAAI,aAAa,KAAK;AACpC,UAAM,aAAa,MAAM,OAAO,MAAM;AACtC,UAAM,iBAAiB,OACrB,MAAM,SAAS,YAAY,aAAa,MAAM,aAAa,CAAC;AAE9D,QAAI,eAAe,eAAe,MAAM,eAAe;AACrD,YAAM,IAAI,MAAM,kBAAkB;IACpC;AACA,UAAM,cAAc,eAAe,SACjC,MAAM,gBAAgB,MAAM,UAAU;AAExC,UAAMA,UAAS,IAAW,OACxB,MAAM,eACN,MAAM,YACN,aACA,cAAc;AAEhB,UAAM,MACJ,MAAM,YAAY,IACd,KAAI,SAASA,OAA0C,IACvD,KAAI,SAAS,MAAM,OAAOA,OAAM;AACtC,WAAO,CAAC,KAAwB,MAAM,SAAS,MAAM,IAAI,CAAC;EAC5D;;;;;;;;;;EAWA,OAAO,aAA4E,cAAgD;AACjI,QAAI,SAAS;AACb,UAAM,OAAO,MAAa;AACxB,YAAM,CAAC,GAAGM,QAAM,IAAWD,QAAO,aAAa,SAAS,MAAM,CAAC;AAC/D,gBAAUC;AACV,aAAO;IACT;AAEA,QAAIR,WAAU,KAAI;AAClB,QAAI,QAAQ;AACZ,QAAIA,aAAsB,IAAI;AAE5B,MAAAA,WAAU;AACV,eAAS;IACX,OAAO;AACL,cAAQ,KAAI;IACd;AAEA,QAAIA,aAAY,KAAKA,aAAY,GAAG;AAClC,YAAM,IAAI,WAAW,uBAAuBA,QAAO,EAAE;IACvD;AAEA,UAAM,aAAa;AACnB,UAAM,gBAAgB,KAAI;AAC1B,UAAM,aAAa,KAAI;AACvB,UAAM,OAAO,SAAS;AACtB,UAAM,gBAAgB,OAAO;AAE7B,WAAO,EAAE,SAAAA,UAAS,OAAO,eAAe,YAAY,eAAe,KAAI;EACzE;;;;;;;EAQA,OAAO,MAA0G,QAAkEK,QAAmC;AACpN,UAAM,CAAC,QAAQ,KAAK,IAAI,gBAAgB,QAAQA,MAAI;AAEpD,UAAM,MAAM,KAAI,OAAO,KAAK;AAE5B,QAAI,IAAI,YAAY,KAAK,OAAO,CAAC,MAAM,KAAK;AAC1C,YAAM,MAAM,wDAAwD;IACtE;AAGA,cAAU,GAAG,EAAE,IAAI,QAAQ,MAAM;AAEjC,WAAO;EACT;;AAGF,SAAS,gBAAqH,QAAkEA,QAAmC;AACjO,UAAQ,OAAO,CAAC,GAAG;;IAEjB,KAAK,KAAK;AACR,YAAM,UAAUA,UAAQ;AACxB,aAAO;QACL,UAAU;QACV,QAAQ,OAAO,GAAG,UAAU,MAAM,GAAG,MAAM,EAAE;;IAEjD;IACA,KAAK,UAAU,QAAQ;AACrB,YAAM,UAAUA,UAAQ;AACxB,aAAO,CAAC,UAAU,QAAkB,QAAQ,OAAO,MAAM,CAAC;IAC5D;IACA,KAAK,OAAO,QAAQ;AAClB,YAAM,UAAUA,UAAQ;AACxB,aAAO,CAAC,OAAO,QAAkB,QAAQ,OAAO,MAAM,CAAC;IACzD;IACA,KAAK,OAAO,QAAQ;AAClB,YAAM,UAAUA,UAAQ;AACxB,aAAO,CAAC,OAAO,QAAkB,QAAQ,OAAO,MAAM,CAAC;IACzD;IACA,SAAS;AACP,UAAIA,UAAQ,MAAM;AAChB,cAAM,MACJ,yFAAyF;MAE7F;AACA,aAAO,CAAC,OAAO,CAAC,GAAaA,OAAK,OAAO,MAAM,CAAC;IAClD;EACF;AACF;AAEA,SAAS,WAAY,OAAmBP,SAA4BO,QAA+B;AACjG,QAAM,EAAE,OAAM,IAAKA;AACnB,MAAI,WAAW,UAAU,QAAQ;AAC/B,UAAM,MAAM,8BAA8BA,OAAK,IAAI,WAAW;EAChE;AAEA,QAAM,MAAMP,QAAM,IAAI,MAAM;AAC5B,MAAI,OAAO,MAAM;AACf,UAAMW,OAAMJ,OAAK,OAAO,KAAK,EAAE,MAAM,CAAC;AACtC,IAAAP,QAAM,IAAI,QAAQW,IAAG;AACrB,WAAOA;EACT,OAAO;AACL,WAAO;EACT;AACF;AAEA,SAAS,WAAoC,OAAmBX,SAA4BO,QAAkC;AAC5H,QAAM,EAAE,OAAM,IAAKA;AACnB,QAAM,MAAMP,QAAM,IAAI,MAAM;AAC5B,MAAI,OAAO,MAAM;AACf,UAAMW,OAAMJ,OAAK,OAAO,KAAK;AAC7B,IAAAP,QAAM,IAAI,QAAQW,IAAG;AACrB,WAAOA;EACT,OAAO;AACL,WAAO;EACT;AACF;AAEA,IAAM,cAAc;AACpB,IAAM,eAAe;AAErB,SAAS,UAAWT,UAAsBC,QAAc,WAAqB;AAC3E,QAAM,aAAoBS,gBAAeV,QAAO;AAChD,QAAM,aAAa,aAAoBU,gBAAeT,MAAI;AAC1D,QAAM,QAAQ,IAAI,WAAW,aAAa,UAAU,UAAU;AAC9D,EAAO,SAASD,UAAS,OAAO,CAAC;AACjC,EAAO,SAASC,QAAM,OAAO,UAAU;AACvC,QAAM,IAAI,WAAW,UAAU;AAC/B,SAAO;AACT;AAEA,IAAM,YAAY,OAAO,IAAI,kBAAkB;;;ACxczC,SAAUU,MAAiD,EAAE,MAAAC,OAAM,MAAAC,QAAM,QAAAC,SAAM,GAA4E;AAC/J,SAAO,IAAI,OAAOF,OAAMC,QAAMC,QAAM;AACtC;AAMM,IAAO,SAAP,MAAa;EACR;EACA;EACA;EAET,YAAaF,OAAYC,QAAYC,UAAgD;AACnF,SAAK,OAAOF;AACZ,SAAK,OAAOC;AACZ,SAAK,SAASC;EAChB;EAEA,OAAQ,OAAiB;AACvB,QAAI,iBAAiB,YAAY;AAC/B,YAAM,SAAS,KAAK,OAAO,KAAK;AAChC,aAAO,kBAAkB,aACd,OAAO,KAAK,MAAM,MAAM,IAE/B,OAAO,KAAK,CAAAC,YAAiB,OAAO,KAAK,MAAMA,OAAM,CAAC;IAC5D,OAAO;AACL,YAAM,MAAM,mCAAmC;IAEjD;EACF;;;;AChCF,SAAS,SAAU,EAAE,aAAa,MAAM,eAAe,MAAK,IAAK,CAAA,GAAE;AACjE,SAAO,EAAE,YAAY,cAAc,UAAU,MAAK;AACpD;AAEA,UAAW,YAAa,MAAiCC,QAAU;AACjE,MAAIA,UAAS,QAAQ,OAAOA,WAAU,UAAU;AAC9C,QAAI,MAAM,QAAQA,MAAK,GAAG;AACxB,iBAAW,CAAC,OAAO,OAAO,KAAKA,OAAM,QAAO,GAAI;AAC9C,cAAM,cAAc,CAAC,GAAG,MAAM,KAAK;AACnC,cAAM,MAAM,IAAI,MAAM,OAAO;AAC7B,YAAI,OAAO,MAAM;AACf,gBAAM,CAAC,YAAY,KAAK,GAAG,GAAG,GAAG;QACnC,WAAW,OAAO,YAAY,UAAU;AACtC,iBAAQ,MAAM,SAAS,WAAW;QACpC;MACF;IACF,OAAO;AACL,YAAM,MAAM,IAAI,MAAMA,MAAK;AAC3B,UAAI,OAAO,MAAM;AACf,cAAM,CAAC,KAAK,KAAK,GAAG,GAAG,GAAG;MAC5B,OAAO;AACL,eAAQ,MAAMA,QAAO,IAAI;MAC3B;IACF;EACF;AACF;AAEA,UAAW,MAAW,QAAWC,QAA4B;AAC3D,MAAI,UAAU,QAAQ,kBAAkB,YAAY;AAClD;EACF;AACA,QAAM,MAAM,IAAI,MAAM,MAAM;AAC5B,MAAI,OAAO,MAAM;AACf,UAAM,CAACA,OAAK,KAAK,GAAG,GAAG,GAAG;EAC5B;AACA,aAAW,CAAC,KAAKD,MAAK,KAAK,OAAO,QAAQ,MAAM,GAAG;AACjD,UAAM,OAAO,CAAC,GAAGC,QAAM,GAAG;AAC1B,WAAQ,YAAY,MAAMD,MAAK;EACjC;AACF;AAEA,UAAW,WAAY,MAAiCA,QAAU;AAChE,MAAI,MAAM,QAAQA,MAAK,GAAG;AACxB,eAAW,CAAC,OAAO,OAAO,KAAKA,OAAM,QAAO,GAAI;AAC9C,YAAM,cAAc,CAAC,GAAG,MAAM,KAAK;AACnC,YAAM,YAAY,KAAK,GAAG;AAC1B,UAAI,OAAO,YAAY,YAAa,IAAI,MAAM,OAAO,KAAK,MAAO;AAC/D,eAAQ,KAAK,SAAS,WAAW;MACnC;IACF;EACF,OAAO;AACL,WAAQ,KAAKA,QAAO,IAAI;EAC1B;AACF;AAEA,UAAW,KAAU,QAAWC,QAA4B;AAC1D,MAAI,UAAU,QAAQ,OAAO,WAAW,UAAU;AAChD;EACF;AACA,aAAW,CAAC,KAAKD,MAAK,KAAK,OAAO,QAAQ,MAAM,GAAG;AACjD,UAAM,OAAO,CAAC,GAAGC,QAAM,GAAG;AAC1B,UAAM,KAAK,KAAK,GAAG;AACnB,QAAID,UAAS,QAAQ,EAAEA,kBAAiB,eAAe,OAAOA,WAAU,YAAa,IAAI,MAAMA,MAAK,KAAK,MAAO;AAC9G,aAAQ,WAAW,MAAMA,MAAK;IAChC;EACF;AACF;AAEA,SAAS,IAAS,QAAW,MAAc;AACzC,MAAI,OAAO;AACX,aAAW,CAAC,OAAO,GAAG,KAAK,KAAK,QAAO,GAAI;AACzC,WAAO,KAAK,GAAG;AACf,QAAI,QAAQ,MAAM;AAChB,YAAM,IAAI,MAAM,6BAA6B,KAAK,MAAM,GAAG,QAAQ,CAAC,EAAE,IAAI,UAAQ,IAAI,KAAK,UAAU,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;IAC3H;AACA,UAAM,MAAM,IAAI,MAAM,IAAI;AAC1B,QAAI,OAAO,MAAM;AACf,aAAO,EAAE,OAAO,KAAK,WAAW,KAAK,MAAM,QAAQ,CAAC,EAAE,KAAK,GAAG,EAAC;IACjE;EACF;AACA,SAAO,EAAE,OAAO,KAAI;AACtB;AAQM,IAAO,QAAP,MAAY;EACP;EACA;EACA;EACA;EAET,YAAa,EAAE,KAAK,OAAO,OAAAA,OAAK,GAA8D;AAC5F,QAAI,OAAO,QAAQ,SAAS,QAAQ,OAAOA,WAAU,aAAa;AAAE,YAAM,IAAI,MAAM,2BAA2B;IAAE;AAEjH,SAAK,MAAM;AACX,SAAK,QAAQ;AACb,SAAK,QAAQA;AACb,SAAK,UAAU;AAGf,WAAO,iBAAiB,MAAM;MAC5B,KAAK,SAAQ;MACb,OAAO,SAAQ;MACf,OAAO,SAAQ;MACf,SAAS,SAAQ;KAClB;EACH;EAEA,QAAK;AACH,WAAO,MAAM,KAAK,OAAO,CAAA,CAAE;EAC7B;EAEA,OAAI;AACF,WAAO,KAAK,KAAK,OAAO,CAAA,CAAE;EAC5B;EAEA,IAAK,OAAO,KAAG;AACb,WAAO,IAAI,KAAK,OAAO,KAAK,MAAM,GAAG,EAAE,OAAO,OAAO,CAAC;EACxD;;AAuEI,SAAU,aAAkF,EAAE,OAAO,KAAK,OAAO,YAAY,MAAK,GAAsC;AAC5K,QAAME,SAAQ,eAAe,SACzB,aACC,OAAO,OAAO,KAAK;AAExB,MAAIA,WAAU,QAAW;AAAE,UAAM,IAAI,MAAM,mEAAmE;EAAE;AAEhH,SAAO,IAAI,MAAM;IACf;IACA;IACA,OAAAA;GACD;AACH;;;ACnKA,IAAM,uBAAuB;AAC7B,IAAM,yBAAyB;AAC/B,IAAM,qBAAqB;AAC3B,IAAM,6BAA6B;AAMnC,SAAS,QAAS,KAAQ;AACxB,MAAI,IAAI,YAAY,GAAG;AACrB,UAAM,IAAI,KAAI;EAChB;AAEA,SAAO,IAAI,IAAI,GAAG,oBAAoB,GAAG,IAAI,SAAS,kBAAkB,CAAC,EAAE;AAC7E;AAEM,IAAO,WAAP,MAAe;EACF;EACA;EACA;EAEjB,YAAa,WAAsB,YAAwBC,WAAqB;AAC9E,SAAK,YAAY;AACjB,SAAK,aAAa;AAClB,SAAK,WAAWA;EAClB;EAEA,OAAQ,IAAK,KAA4CC,WAAsB,CAAA,GAAE;AAC/E,UAAM,SAAS,QAAQ,GAAG;AAE1B,QAAI,MAAM,KAAK,UAAU,IAAI,MAAM,GAAG;AACpC,YAAM,IAAI,MAAM,gBAAgB;IAClC;AAEA,UAAM,QAAQ,KAAK,MAAMA,SAAQ,SAAS,QAAQ;AAElD,QAAI,QAAQ,GAAG;AACb,YAAM,IAAI,MAAM,0CAA0C;IAC5D;AAGA,UAAM,QAAQ,IAAI,MAA2B;MAC3C,aAAa;KACd;AAED,qBAAiB,YAAY,KAAK,SAAS,KAAK,OAAO;MACrD,GAAGA;MACH;KACD,GAAG;AACF,YAAM,KAAK,mBAAmB,UAAU,CAAC,gBAAqC;AAE5E,YAAI,YAAY,SAAS,KAAK,OAAK,OAAiB,GAAG,IAAI,KAAK,CAAC,KAAK,MAAM;AAC1E,iBAAO;QACT;AAEA,oBAAY;AACZ,oBAAY,SAAS,KAAK,IAAI,KAAK;AACnC,eAAO;MACT,GAAGA,QAAO;AAEV,YAAM;IACR;AAEA,UAAM,MAAoB;MACxB;MACA,UAAUA,SAAQ,YAAY,CAAA;;AAGhC,UAAM,KAAK,UAAU,IAAI,QAAcC,QAAO,GAAG,GAAGD,QAAO;EAC7D;;;;EAKA,OAAQ,SAAU,KAAU,OAAmCA,UAAuB;AACpF,QAAIA,SAAQ,UAAU,IAAI;AACxB;IACF;AAEA,UAAM,QAAQ,MAAM,KAAK,SAAS,IAAI,IAAI;AAC1C,UAAM,QAAQ,MAAM,KAAK,WAAW,IAAI,KAAKA,QAAO;AACpD,UAAM,QAAQ,aAAa,EAAE,OAAO,KAAK,MAAK,CAAE;AAEhD,UAAM;AAGN,eAAW,CAAC,EAACE,IAAG,KAAK,MAAM,MAAK,GAAI;AAClC,aAAQ,MAAM,MAAM,IAAI,YAAW;AACjC,eAAO,KAAK,SAASA,MAAK,OAAO;UAC/B,GAAGF;UACH,OAAOA,SAAQ,QAAQ;SACxB;MACH,CAAC;IACH;EACF;;;;EAKA,MAAM,mBAAoB,KAAU,iBAA0CA,UAAmB;AAC/F,UAAM,WAAW,IAAI,IAAI,GAAG,sBAAsB,GAAG,mBAAmB,OAAO,IAAI,UAAU,KAAK,CAAC,EAAE;AAErG,QAAI,cAAoC;MACtC,UAAU;MACV,UAAU,CAAA;;AAGZ,QAAI;AACF,oBAAoBG,QAAO,MAAM,KAAK,UAAU,IAAI,UAAUH,QAAO,CAAC;IACxE,SAAS,KAAU;AACjB,UAAI,IAAI,SAAS,iBAAiB;AAChC,cAAM;MACR;IACF;AAEA,UAAM,iBAAiB,gBAAgB,WAAW;AAElD,QAAI,CAAC,gBAAgB;AACnB;IACF;AAEA,QAAI,YAAY,aAAa,GAAG;AAC9B,UAAI,MAAM,KAAK,UAAU,IAAI,QAAQ,GAAG;AACtC,cAAM,KAAK,UAAU,OAAO,QAAQ;AACpC;MACF;IACF;AAEA,UAAM,KAAK,UAAU,IAAI,UAAgBC,QAAO,WAAW,GAAGD,QAAO;AACrE,IAAAA,SAAQ,aAAa,IAAI,oBAAyB,iBAAiB,GAAG,CAAC;EACzE;EAEA,OAAQ,GAAI,KAA4CA,WAAqB,CAAA,GAAE;AAC7E,UAAM,SAAS,QAAQ,GAAG;AAC1B,UAAM,MAAM,MAAM,KAAK,UAAU,IAAI,QAAQA,QAAO;AACpD,UAAM,MAAYG,QAAO,GAAG;AAE5B,UAAM,KAAK,UAAU,OAAO,QAAQH,QAAO;AAG3C,UAAM,QAAQ,IAAI,MAA2B;MAC3C,aAAa;KACd;AAED,qBAAiB,YAAY,KAAK,SAAS,KAAK,OAAO;MACrD,GAAGA;MACH,OAAO,IAAI;KACZ,GAAG;AACF,YAAM,KAAK,mBAAmB,UAAU,CAAC,gBAAwB;AAC/D,oBAAY;AACZ,oBAAY,WAAW,YAAY,SAAS,OAAO,OAAK,OAAiB,GAAG,IAAI,KAAK,CAAC;AACtF,eAAO;MACT,GAAG;QACD,GAAGA;QACH,OAAO,IAAI;OACZ;AAED,YAAM;IACR;EACF;EAEA,OAAQ,GAAIA,WAAqB,CAAA,GAAE;AACjC,qBAAiB,EAAE,KAAK,OAAAI,OAAK,KAAM,KAAK,UAAU,MAAM;MACtD,QAAQ,wBAAwBJ,SAAQ,OAAO,OAAO,GAAGA,SAAQ,IAAI,SAAS,MAAM,CAAC,KAAK;OACzFA,QAAO,GAAG;AACX,YAAM,MAAM,IAAI,MAAM,IAAI,SAAQ,EAAG,UAAU,CAAC,GAAG,MAAM;AACzD,YAAM,MAAYG,QAAOC,MAAK;AAE9B,YAAM;QACJ;QACA,GAAG;;IAEP;EACF;EAEA,MAAM,SAAU,KAAUJ,WAA2B,CAAA,GAAE;AACrD,UAAM,WAAW,IAAI,IAAI,GAAG,sBAAsB,GAAG,mBAAmB,OAAO,IAAI,UAAU,KAAK,CAAC,EAAE;AAErG,WAAO,KAAK,UAAU,IAAI,UAAUA,QAAO;EAC7C;EAEA,MAAM,IAAK,KAAUA,UAAsB;AACzC,UAAM,SAAS,QAAQ,GAAG;AAC1B,UAAM,MAAM,MAAM,KAAK,UAAU,IAAI,QAAQA,QAAO;AAEpD,WAAaG,QAAO,GAAG;EACzB;EAEA,MAAM,YAAa,KAAU,UAAiEH,UAAsB;AAClH,UAAM,SAAS,QAAQ,GAAG;AAC1B,UAAM,MAAM,MAAM,KAAK,UAAU,IAAI,QAAQA,QAAO;AACpD,UAAM,MAA0BG,QAAO,GAAG;AAE1C,QAAI,WAAW,YAAY,CAAA;AAE3B,UAAM,KAAK,UAAU,IAAI,QAAcF,QAAO,GAAG,GAAGD,QAAO;EAC7D;;;;ACvFK,IAAM,gCAAgC;AACtC,IAAM,gCAAgC;;;AC5JvC,IAAO,6BAAP,cAA0C,MAAK;EACnD,OAAO,OAAO;EAEd,YAAaK,WAAU,gCAA8B;AACnD,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,0BAAP,cAAuC,MAAK;EAChD,OAAO,OAAO;EAEd,YAAaA,WAAU,wBAAsB;AAC3C,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,4BAAP,cAAyC,MAAK;EAClD,OAAO,OAAO;EAEd,YAAaA,WAAU,0BAAwB;AAC7C,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,oBAAP,cAAiC,MAAK;EAC1C,OAAO,OAAO;EAEd,YAAaA,WAAU,iBAAe;AACpC,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;;;ACtBI,IAAO,YAAP,cAA6G,MAAgC;EACjJ,IAAKC,SAAc;AACjB,WAAO,KAAK,KAAKA,OAAM,KAAK;EAC9B;EAEA,KAAMA,SAAc;AAClB,WAAO,KAAK,MAAM,KAAK,SAAM;AAC3B,aAAOA,QAAO,OAAO,IAAI,QAAQ,MAAM;IACzC,CAAC;EACH;;;;ACZF,IAAM,sCAAsC;AAYtC,IAAO,UAAP,MAAc;EACD;EACA;EACA;EAEjB,YAAa,YAA+B,MAAiB;AAC3D,SAAK,MAAM,WAAW,OAAO,aAAa,eAAe;AACzD,SAAK,UAAU,KAAK,WAAW,CAAA;AAC/B,SAAK,4BAA4B,KAAK,6BAA6B;AAEnE,SAAK,gBAAgB,WAAW,SAAS,cAAc,+BAA+B,KAAK,cAAc,KAAK,IAAI,GAAG;MACnH,cAAc;KACf,KAAK,KAAK;AACX,SAAK,UAAU,WAAW,SAAS,cAAc,yBAAyB,KAAK,QAAQ,KAAK,IAAI,GAAG;MACjG,cAAc;KACf,KAAK,KAAK;AACX,SAAK,kBAAkB,WAAW,SAAS,cAAc,iCAAiC,KAAK,gBAAgB,KAAK,IAAI,GAAG;MACzH,cAAc;KACf,KAAK,KAAK;AACX,SAAK,MAAM,WAAW,SAAS,cAAc,qBAAqB,KAAK,IAAI,KAAK,IAAI,GAAG;MACrF,cAAc;KACf,KAAK,KAAK;AACX,SAAK,MAAM,WAAW,SAAS,cAAc,qBAAqB,KAAK,IAAI,KAAK,IAAI,GAAG;MACrF,cAAc;KACf,KAAK,KAAK;AACX,SAAK,WAAW,WAAW,SAAS,cAAc,0BAA0B,KAAK,SAAS,KAAK,IAAI,GAAG;MACpG,cAAc;KACf,KAAK,KAAK;AACX,SAAK,kBAAkB,WAAW,SAAS,cAAc,iCAAiC,KAAK,gBAAgB,KAAK,IAAI,GAAG;MACzH,cAAc;KACf,KAAK,KAAK;EACb;EAEA,MAAM,QAAK;AACT,UAAM,MAAM,GAAG,KAAK,OAAO;EAC7B;EAEA,MAAM,OAAI;AACR,UAAM,KAAK,GAAG,KAAK,OAAO;EAC5B;;;;;EAMA,OAAQ,cAAe,KAAUC,WAA0B,CAAA,GAAE;AAC3D,QAAI,KAAK,QAAQ,WAAW,GAAG;AAC7B,YAAM,IAAI,wBAAwB,8BAA8B;IAClE;AAMA,UAAM,QAAQ,IAAI,UAA2B;MAC3C,aAAa,KAAK;KACnB;AACD,UAAM,iBAAiB,SAAS,MAAK;IAAE,CAAC;AAExC,qBAAiB,QAAQC,aACvB,MAAM,YAAW,GACjB,GAAG,SAAS,KAAK,SAAS,eAAe,EACtC,IAAI,YAAU,OAAO,cAAc,KAAKD,QAAO,CAAC,CAAC,GACnD;AAGD,UAAI,QAAQ,MAAM;AAChB;MACF;AAGA,UAAI,KAAK,WAAW,WAAW,GAAG;AAEhC,YAAI,MAAM,KAAK,KAAK,EAAE,KAAK,MAAM;AAC/B;QACF;AAEA,cAAM,IAAI,YAAW;AACnB,cAAI;AACF,kBAAM,WAAW,MAAM,KAAK,SAAS,KAAK,IAAIA,QAAO;AAErD,gBAAI,SAAS,WAAW,WAAW,GAAG;AACpC,qBAAO;YACT;AAEA,mBAAO;UACT,SAAS,KAAK;AACZ,iBAAK,IAAI,MAAM,yCAAyC,KAAK,IAAI,GAAG;AACpE,mBAAO;UACT;QACF,GAAG;UACD,QAAQ,KAAK;UACb,QAAQA,SAAQ;SACjB,EACE,MAAM,SAAM;AACX,eAAK,IAAI,MAAM,yCAAyC,KAAK,IAAI,GAAG;QACtE,CAAC;MACL;AAEA,YAAM;IACR;EACF;;;;;EAMA,MAAM,QAAS,KAAUA,WAAwB,CAAA,GAAE;AACjD,QAAI,KAAK,QAAQ,WAAW,GAAG;AAC7B,YAAM,IAAI,wBAAwB,8BAA8B;IAClE;AAEA,UAAM,QAAQ,IACZ,SAAS,KAAK,SAAS,SAAS,EAC7B,IAAI,OAAO,WAAU;AACpB,YAAM,OAAO,QAAQ,KAAKA,QAAO;IACnC,CAAC,CAAC;EAER;EAEA,MAAM,gBAAiB,KAAUA,WAAwB,CAAA,GAAE;AACzD,UAAM,QAAQ,IACZ,SAAS,KAAK,SAAS,iBAAiB,EACrC,IAAI,OAAO,WAAU;AACpB,YAAM,OAAO,gBAAgB,KAAKA,QAAO;IAC3C,CAAC,CAAC;EAER;;;;EAKA,MAAM,IAAK,KAAiBE,QAAmBF,UAAsB;AACnE,UAAM,QAAQ,IACZ,SAAS,KAAK,SAAS,KAAK,EACzB,IAAI,OAAO,WAAU;AACpB,YAAM,OAAO,IAAI,KAAKE,QAAOF,QAAO;IACtC,CAAC,CAAC;EAER;;;;;EAMA,MAAM,IAAK,KAAiBA,UAAsB;AAChD,WAAO,QAAQ,IACb,SAAS,KAAK,SAAS,KAAK,EACzB,IAAI,OAAO,WAAU;AACpB,aAAO,OAAO,IAAI,KAAKA,QAAO;IAChC,CAAC,CAAC;EAER;;;;EAKA,MAAM,SAAU,IAAYA,UAAwB;AAClD,QAAI,KAAK,QAAQ,WAAW,GAAG;AAC7B,YAAM,IAAI,wBAAwB,2BAA2B;IAC/D;AAEA,UAAMG,QAAO;AACb,UAAM,SAASF,aACb,GAAG,SAAS,KAAK,SAAS,UAAU,EACjC,IAAI,YAAW,mBAAgB;AAC9B,UAAI;AACF,cAAM,MAAM,OAAO,SAAS,IAAID,QAAO;MACzC,SAAS,KAAK;AACZ,QAAAG,MAAK,IAAI,MAAM,GAAG;MACpB;IACF,EAAE,CAAE,CAAC;AAGT,qBAAiB,QAAQ,QAAQ;AAC/B,UAAI,QAAQ,MAAM;AAChB;MACF;AAEA,aAAO;IACT;AAEA,UAAM,IAAI,cAAc,gCAAgC;EAC1D;;;;EAKA,OAAQ,gBAAiB,KAAiBH,WAA0B,CAAA,GAAE;AACpE,QAAI,KAAK,QAAQ,WAAW,GAAG;AAC7B,YAAM,IAAI,wBAAwB,2BAA2B;IAC/D;AAEA,qBAAiB,QAAQC,aACvB,GAAG,SAAS,KAAK,SAAS,iBAAiB,EACxC,IAAI,YAAU,OAAO,gBAAgB,KAAKD,QAAO,CAAC,CAAC,GACrD;AACD,UAAI,QAAQ,MAAM;AAChB;MACF;AAEA,YAAM;IACR;EACF;;AAGF,SAAS,SAA4C,SAAgB,KAAc;AACjF,SAAO,QAAQ,OAAO,YAAU,OAAO,GAAG,KAAK,IAAI;AACrD;;;AC/LM,IAAOI,cAAP,cAA0B,MAAK;EACnC,OAAO,OAAO;EACd,OAAO;EAEP,YAAaC,WAAkB,gCAAgC,MAAW;AACxE,UAAMA,UAAS,GAAG,IAAI;EACxB;;;;AC3CI,IAAOC,kBAAP,cAA8B,MAAK;EACvC,OAAO,OAAO;EAEd,YAAaC,WAAkB,sBAAoB;AACjD,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;;;ACJI,IAAOC,gBAAP,MAAmB;EAChB;EACA;EAEP,YAAa,QAAoB;AAC/B,SAAK,SAAS;AACd,SAAK,WAAW,QAAQ,cAAa;AAErC,SAAK,UAAU,KAAK,QAAQ,KAAK,IAAI;AACrC,SAAK,QAAQ,iBAAiB,SAAS,KAAK,OAAO;EACrD;EAEA,UAAO;AACL,SAAK,SAAS,OAAO,KAAK,QAAQ,UAAU,IAAIC,YAAU,CAAE;EAC9D;EAEA,UAAO;AACL,SAAK,QAAQ,oBAAoB,SAAS,KAAK,OAAO;EACxD;;;;ACVF,SAASC,YAAQ;AACf,SAAO,GAAI,SAAS,OAAO,KAAK,OAAM,IAAK,GAAG,GAAG,EAAE,EAAG,SAAQ,CAAE,GAAG,KAAK,IAAG,CAAE;AAC/E;AAQM,IAAOC,OAAP,MAAU;EACP;EACA;EACA;EACA;EACA;EACS;EACC;EAEjB,YAAa,IAAqDC,UAAY;AAC5E,SAAK,KAAKF,UAAQ;AAClB,SAAK,SAAS;AACd,SAAK,KAAK;AACV,SAAK,UAAUE;AACf,SAAK,aAAa,CAAA;AAClB,SAAK,WAAW;MACd,SAAS,KAAK,IAAG;;AAGnB,SAAK,aAAa,IAAI,gBAAe;AACrC,oBAAgB,UAAU,KAAK,WAAW,MAAM;AAEhD,SAAK,UAAU,KAAK,QAAQ,KAAK,IAAI;EACvC;EAEA,MAAO,KAAU;AACf,SAAK,WAAW,MAAM,GAAG;EAC3B;EAEA,UAAO;AACL,UAAM,aAAa,KAAK,WAAW,OAAO,CAAC,KAAK,SAAQ;AACtD,aAAO,OAAQ,KAAK,QAAQ,YAAY;IAC1C,GAAG,IAAI;AAGP,QAAI,YAAY;AACd,WAAK,WAAW,MAAM,IAAIC,YAAU,CAAE;AACtC,WAAK,QAAO;IACd;EACF;EAEA,MAAM,KAAMD,WAAwB,CAAA,GAAE;AACpC,UAAM,YAAY,IAAIE,cAA4BF,SAAQ,MAAM;AAChE,SAAK,WAAW,KAAK,SAAS;AAE9B,IAAAA,SAAQ,QAAQ,iBAAiB,SAAS,KAAK,OAAO;AAEtD,WAAO,UAAU,SAAS;EAC5B;EAEA,MAAM,MAAG;AACP,SAAK,SAAS;AACd,SAAK,SAAS,UAAU,KAAK,IAAG;AAEhC,QAAI;AACF,WAAK,WAAW,OAAO,eAAc;AAErC,YAAM,SAAS,MAAM,WAAW,KAAK,GAAG;QACtC,GAAI,KAAK,WAAW,CAAA;QACpB,QAAQ,KAAK,WAAW;OACzB,GAAG,KAAK,WAAW,MAAM;AAE1B,WAAK,WAAW,QAAQ,eAAY;AAClC,kBAAU,SAAS,QAAQ,MAAM;MACnC,CAAC;AAED,WAAK,SAAS;IAChB,SAAS,KAAK;AACZ,WAAK,WAAW,QAAQ,eAAY;AAClC,kBAAU,SAAS,OAAO,GAAG;MAC/B,CAAC;AAED,WAAK,SAAS;IAChB;AACE,WAAK,SAAS,WAAW,KAAK,IAAG;AACjC,WAAK,QAAO;IACd;EACF;EAEA,UAAO;AACL,SAAK,WAAW,QAAQ,eAAY;AAClC,gBAAU,QAAO;AACjB,gBAAU,QAAQ,oBAAoB,SAAS,KAAK,OAAO;IAC7D,CAAC;EACH;;;;ACzFI,SAAUG,UAAUC,OAAkC,MAAY;AACtE,MAAI;AAEJ,QAAM,SAAS,WAAA;AACb,UAAM,QAAQ,WAAA;AACZ,gBAAU;AACV,WAAKA,MAAI;IACX;AAEA,iBAAa,OAAO;AACpB,cAAU,WAAW,OAAO,IAAI;EAClC;AACA,SAAO,QAAQ,MAAW;EAAE;AAC5B,SAAO,OAAO,MAAW;AACvB,iBAAa,OAAO;EACtB;AAEA,SAAO;AACT;;;ACmHM,IAAOC,SAAP,cAA8F,kBAAyD;EACpJ;EACA;EACA;EACC;EACS;EACT;EAER,YAAa,OAA6C,CAAA,GAAE;AAC1D,UAAK;AAEL,SAAK,cAAc,KAAK,eAAe,OAAO;AAC9C,SAAK,UAAU,KAAK,WAAW,OAAO;AACtC,SAAK,UAAU;AACf,SAAK,YAAY,KAAK,aAAa;AAEnC,SAAK,OAAO,KAAK;AACjB,SAAK,QAAQ,CAAA;AAEb,SAAK,YAAYC,UAAS,KAAK,UAAU,KAAK,IAAI,GAAG,CAAC;AACtD,SAAK,WAAWA,UAAS,KAAK,SAAS,KAAK,IAAI,GAAG,CAAC;EACtD;EAEA,CAAC,OAAO,aAAa,IAAC;AACpB,WAAO,KAAK,YAAW;EACzB;EAEA,YAAS;AACP,QAAI,KAAK,SAAS,GAAG;AACnB;IACF;AAEA,SAAK,kBAAkB,OAAO;EAChC;EAEA,WAAQ;AACN,QAAI,KAAK,YAAY,GAAG;AACtB;IACF;AAEA,SAAK,kBAAkB,MAAM;EAC/B;EAEQ,oBAAiB;AACvB,QAAI,KAAK,SAAS,GAAG;AACnB,WAAK,UAAS;AAEd,UAAI,KAAK,YAAY,GAAG;AACtB,aAAK,SAAQ;MACf;AAEA,aAAO;IACT;AAEA,QAAI,KAAK,UAAU,KAAK,aAAa;AACnC,UAAI;AAEJ,iBAAW,KAAK,KAAK,OAAO;AAC1B,YAAI,EAAE,WAAW,UAAU;AACzB,gBAAM;AACN;QACF;MACF;AAEA,UAAI,OAAO,MAAM;AACf,eAAO;MACT;AAEA,WAAK,kBAAkB,QAAQ;AAE/B,WAAK;AAEL,WAAK,IAAI,IAAG,EACT,QAAQ,MAAK;AAEZ,iBAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AAC1C,cAAI,KAAK,MAAM,CAAC,MAAM,KAAK;AACzB,iBAAK,MAAM,OAAO,GAAG,CAAC;AACtB;UACF;QACF;AAEA,aAAK;AACL,aAAK,kBAAkB,MAAM;AAC7B,YAAI,KAAK,WAAW;AAClB,eAAK,kBAAiB;QACxB;MACF,CAAC;AAEH,aAAO;IACT;AAEA,WAAO;EACT;EAEQ,QAAS,KAAmC;AAClD,SAAK,MAAM,KAAK,GAAG;AAEnB,QAAI,KAAK,QAAQ,MAAM;AACrB,WAAK,MAAM,KAAK,KAAK,IAAI;IAC3B;EACF;;;;;EAMA,QAAK;AACH,QAAI,KAAK,cAAc,OAAO;AAC5B;IACF;AAEA,SAAK,YAAY;AACjB,SAAK,kBAAiB;EACxB;;;;EAKA,QAAK;AACH,SAAK,YAAY;EACnB;;;;EAKA,MAAM,IAAK,IAA4CC,UAAoB;AACzE,IAAAA,UAAS,QAAQ,eAAc;AAE/B,QAAI,KAAK,SAAS,KAAK,SAAS;AAC9B,YAAM,IAAIC,gBAAc;IAC1B;AAEA,UAAM,MAAM,IAAIC,KAA+B,IAAIF,QAAO;AAC1D,SAAK,QAAQ,GAAG;AAChB,SAAK,kBAAkB,KAAK;AAE5B,QAAI,KAAK,WAAW;AAClB,WAAK,kBAAiB;IACxB;AAEA,WAAO,IAAI,KAAKA,QAAO,EACpB,KAAK,YAAS;AACb,WAAK,kBAAkB,WAAW,EAAE,QAAQ,EAAE,KAAK,OAAM,EAAE,CAAE;AAE7D,aAAO;IACT,CAAC,EACA,MAAM,SAAM;AACX,UAAI,IAAI,WAAW,UAAU;AAE3B,iBAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AAC1C,cAAI,KAAK,MAAM,CAAC,MAAM,KAAK;AACzB,iBAAK,MAAM,OAAO,GAAG,CAAC;AACtB;UACF;QACF;MACF;AAEA,WAAK,kBAAkB,WAAW,EAAE,QAAQ,EAAE,KAAK,OAAO,IAAG,EAAE,CAAE;AAEjE,YAAM;IACR,CAAC;EACL;;;;EAKA,QAAK;AACH,SAAK,MAAM,OAAO,GAAG,KAAK,MAAM,MAAM;EACxC;;;;EAKA,QAAK;AACH,SAAK,MAAM,QAAQ,SAAM;AACvB,UAAI,MAAM,IAAIG,YAAU,CAAE;IAC5B,CAAC;AAED,SAAK,MAAK;EACZ;;;;;;EAOA,MAAM,QAASH,UAAsB;AAEnC,QAAI,KAAK,SAAS,GAAG;AACnB;IACF;AAEA,UAAM,UAAU,MAAM,SAASA,UAAS,MAAM;EAChD;;;;;;;;;;;;EAaA,MAAM,eAAgB,OAAeA,UAAsB;AAEzD,QAAI,KAAK,OAAO,OAAO;AACrB;IACF;AAEA,UAAM,UAAU,MAAM,QAAQA,UAAS,QAAQ;MAC7C,QAAQ,MAAM,KAAK,OAAO;KAC3B;EACH;;;;;;;;;EAUA,MAAM,OAAQA,UAAsB;AAElC,QAAI,KAAK,YAAY,KAAK,KAAK,SAAS,GAAG;AACzC;IACF;AAEA,UAAM,UAAU,MAAM,QAAQA,UAAS,MAAM;EAC/C;;;;EAKA,IAAI,OAAI;AACN,WAAO,KAAK,MAAM;EACpB;;;;EAKA,IAAI,SAAM;AACR,WAAO,KAAK,MAAM,SAAS,KAAK;EAClC;;;;EAKA,IAAI,UAAO;AACT,WAAO,KAAK;EACd;;;;;;;;;;;EAYA,OAAQ,YAAaA,UAAsB;AACzC,IAAAA,UAAS,QAAQ,eAAc;AAE/B,UAAM,SAAS,SAAwB;MACrC,YAAY;KACb;AAED,UAAM,UAAU,CAAC,QAAqB;AACpC,UAAI,OAAO,MAAM;AACf,aAAK,MAAK;MACZ,OAAO;AACL,aAAK,MAAK;MACZ;AAEA,aAAO,IAAI,GAAG;IAChB;AAEA,UAAM,qBAAqB,CAAC,QAAsE;AAChG,UAAI,IAAI,UAAU,MAAM;AACtB,eAAO,KAAK,IAAI,OAAO,MAAM;MAC/B;IACF;AAEA,UAAM,eAAe,CAAC,QAAsE;AAC1F,cAAQ,IAAI,OAAO,KAAK;IAC1B;AAEA,UAAM,cAAc,MAAW;AAC7B,cAAO;IACT;AAGA,UAAM,gBAAgB,MAAW;AAC/B,cAAQ,IAAIG,YAAW,eAAe,CAAC;IACzC;AAGA,SAAK,iBAAiB,WAAW,kBAAkB;AACnD,SAAK,iBAAiB,WAAW,YAAY;AAC7C,SAAK,iBAAiB,QAAQ,WAAW;AACzC,IAAAH,UAAS,QAAQ,iBAAiB,SAAS,aAAa;AAExD,QAAI;AACF,aAAQ;IACV;AAEE,WAAK,oBAAoB,WAAW,kBAAkB;AACtD,WAAK,oBAAoB,WAAW,YAAY;AAChD,WAAK,oBAAoB,QAAQ,WAAW;AAC5C,MAAAA,UAAS,QAAQ,oBAAoB,SAAS,aAAa;AAG3D,cAAO;IACT;EACF;;;;ACpdK,IAAM,2BAA2B;AACjC,IAAM,iCAAiC;AACvC,IAAM,2BAA2B;AACjC,IAAM,yBAAyB;AAC/B,IAAM,yBAAyB;AAE/B,IAAM,4BAA4B;AAClC,IAAM,kCAAkC;AACxC,IAAM,4BAA4B;AAClC,IAAM,0BAA0B;AAChC,IAAM,0BAA0B;AAEhC,IAAM,kBAAkB;AAExB,IAAM,yBAAyB;AAE/B,IAAM,iBAAiB;EAC5B,eAAe;;;;ACXV,IAAM,iCAAiC,CAAC,SAA0C,SAA2B,aAA0B,kBAAoC,aAAqB,WAAmB,WAAmB,aAAqB,cAAqB;AACrR,SAAO,CAAC,UAAuB;AAC7B,QAAI,MAAM,QAAQ,MAAM;AACtB;IACF;AAEA,UAAM,eAAe;MACnB,MAAM,MAAM,KAAK;MACjB,MAAM,MAAM,KAAK;MACjB,YAAY,MAAM,KAAK;;AAIzB,QAAI,aAAa,SAAS,aAAa;AACrC,cAAQ,kBAAkB,aAAa;QACrC,QAAQ;UACN,MAAM,aAAa;UACnB,YAAY,aAAa;UACzB,SAAS,YAA0B;AAEjC,oBAAQ,YAAY;cAClB,MAAM;cACN,MAAM,aAAa;cACnB,YAAY,aAAa;aAC1B;AAGD,kBAAM,IAAI,QAAc,CAAC,YAAW;AAClC,oBAAM,uBAAuB,CAACI,WAA6B;AACzD,oBAAIA,QAAO,QAAQ,MAAM;AACvB;gBACF;AAEA,sBAAM,eAAe;kBACnB,MAAMA,OAAM,KAAK;kBACjB,MAAMA,OAAM,KAAK;kBACjB,YAAYA,OAAM,KAAK;;AAGzB,oBAAI,aAAa,SAAS,eAAe,aAAa,eAAe,aAAa,YAAY;AAC5F,0BAAQ,oBAAoB,WAAW,oBAAoB;AAC3D,0BAAO;gBACT;cACF;AAEA,sBAAQ,iBAAiB,WAAW,oBAAoB;YAC1D,CAAC;UACH;UACA,SAAS,CAAC,QAAc;AAEtB,oBAAQ,YAAY;cAClB,MAAM;cACN,MAAM,aAAa;cACnB,YAAY,aAAa;cACzB,OAAO;gBACL,SAAS,IAAI;gBACb,MAAM,IAAI;gBACV,OAAO,IAAI;;aAEd;UACH;;OAEH;IACH;AAGA,QAAI,aAAa,SAAS,WAAW;AACnC,cAAQ,kBAAkC,kBAAkB;QAC1D,QAAQ;UACN,MAAM,aAAa;UACnB,YAAY,aAAa;;OAE5B;IACH;AAGA,QAAI,aAAa,SAAS,iBAAiB;AACzC,cAAQ,kBAAqC,mBAAmB;QAC9D,QAAQ;UACN,MAAM,aAAa;;OAEtB;IACH;EACF;AACF;;;AC1FO,IAAM,SAAS,CAAC,OAAe,OAAc;AAClD,SAAO,KAAK,OAAM,EAAG,SAAQ,EAAG,UAAU,GAAG,OAAO,CAAC;AACvD;;;ACgBM,IAAO,uBAAP,MAA2B;EACvB;EACA;EAER,YAAaC,OAAY;AACvB,SAAK,OAAOA;AACZ,SAAK,UAAU,IAAI,iBAAiB,sBAAsB;EAC5D;EAEA,SAAUC,UAAsB;AAC9B,WAAO,KAAK,YACV,0BACA,gCACA,wBACA,wBACA,0BACAA,QAAO;EAEX;EAEA,UAAWA,UAAsB;AAC/B,WAAO,KAAK,YACV,2BACA,iCACA,yBACA,yBACA,2BACAA,QAAO;EAEX;EAEA,WAAQ;AACN,SAAK,QAAQ,YAAY;MACvB,MAAM;MACN,MAAM,KAAK;KACZ;AAED,SAAK,QAAQ,MAAK;EACpB;EAEQ,MAAM,YAAa,aAAqB,WAAmB,WAAmB,WAAmB,aAAqBA,UAAsB;AAClJ,IAAAA,UAAS,QAAQ,eAAc;AAC/B,UAAM,KAAK,OAAM;AAEjB,SAAK,QAAQ,YAAY;MACvB,MAAM;MACN,YAAY;MACZ,MAAM,KAAK;KACZ;AAED,WAAO,IAAI,QAAiB,CAAC,SAAS,WAAU;AAC9C,YAAM,gBAAgB,MAAW;AAC/B,aAAK,QAAQ,YAAY;UACvB,MAAM;UACN,YAAY;UACZ,MAAM,KAAK;SACZ;MACH;AAEA,MAAAA,UAAS,QAAQ,iBAAiB,SAAS,eAAe;QACxD,MAAM;OACP;AAED,YAAM,WAAW,CAAC,UAA6B;AAC7C,YAAI,MAAM,MAAM,eAAe,IAAI;AACjC;QACF;AAEA,YAAI,MAAM,MAAM,SAAS,WAAW;AAClC,eAAK,QAAQ,oBAAoB,WAAW,QAAQ;AACpD,UAAAA,UAAS,QAAQ,oBAAoB,SAAS,aAAa;AAG3D,kBAAQ,MAAK;AAEX,iBAAK,QAAQ,YAAY;cACvB,MAAM;cACN,YAAY;cACZ,MAAM,KAAK;aACZ;UACH,CAAC;QACH;AAEA,YAAI,MAAM,KAAK,SAAS,WAAW;AACjC,eAAK,QAAQ,oBAAoB,WAAW,QAAQ;AACpD,UAAAA,UAAS,QAAQ,oBAAoB,SAAS,aAAa;AAG3D,gBAAM,MAAM,IAAI,MAAK;AAErB,cAAI,MAAM,KAAK,SAAS,MAAM;AAC5B,gBAAI,UAAU,MAAM,KAAK,MAAM;AAC/B,gBAAI,OAAO,MAAM,KAAK,MAAM;AAC5B,gBAAI,QAAQ,MAAM,KAAK,MAAM;UAC/B;AAEA,iBAAO,GAAG;QACZ;MACF;AAEA,WAAK,QAAQ,iBAAiB,WAAW,QAAQ;IACnD,CAAC;EACH;;;;ACnGF,IAAA,kBAAe,CAACC,aAAgF;AAC9F,EAAAA,WAAU,OAAO,OAAO,CAAA,GAAI,gBAAgBA,QAAO;AACnD,QAAM,YAAY,QAAQ,WAAW,QAAQ,KAAKA,SAAQ;AAE1D,MAAI,WAAW;AACb,UAAM,UAAU,IAAI,iBAAiB,sBAAsB;AAC3D,UAAM,UAAU,IAAI,kBAAiB;AAErC,YAAQ,iBAAiB,WAAW,+BAClC,SACA,SACA,mBACA,wBACA,0BACA,gCACA,wBACA,0BACA,sBAAsB,CACvB;AACD,YAAQ,iBAAiB,WAAW,+BAClC,SACA,SACA,oBACA,yBACA,2BACA,iCACA,yBACA,2BACA,uBAAuB,CACxB;AAED,WAAO;EACT;AAEA,SAAO,IAAI,qBAAqBA,SAAQ,IAAI;AAC9C;;;ACVA,IAAM,UAAgC,oBAAI,IAAG;AAC7C,IAAI;AAEE,SAAU,UAAW,KAAS;AAClC,SAAO,OAAO,KAAK,aAAa,cAAc,OAAO,KAAK,cAAc;AAC1E;AAEM,SAAU,kBAAmB,MAA8B;AAC/D,MAAI,kBAAkB,MAAM;AAC1B,qBAAiB,gBAAK,IAAI;AAE1B,QAAI,CAAC,UAAU,cAAc,GAAG;AAC9B,YAAM,UAAU;AAGhB,cAAQ,iBAAiB,mBAAmB,CAAC,UAAwC;AACnF,cAAM,YAAY,MAAM,OAAO;AAC/B,cAAM,aAAa,MAAM,OAAO;AAChC,cAAM,QAAQ,QAAQ,IAAI,SAAS;AAEnC,YAAI,SAAS,MAAM;AACjB;QACF;AAEA,cAAM,kBAAkB,IAAI,gBAAe;AAE3C,cAAM,gBAAgB,CAACC,WAA4C;AACjE,cAAIA,OAAM,OAAO,SAAS,aAAaA,OAAM,OAAO,eAAe,YAAY;AAC7E;UACF;AAEA,0BAAgB,MAAK;QACvB;AAEA,gBAAQ,iBAAiB,wBAAwB,aAAa;AAE9D,aAAK,MAAM,SAAS;UAClB,QAAQ,gBAAgB;SACzB,EACE,KAAK,OAAM,YAAU;AACpB,gBAAM,MAAM,OAAO,QAAO,EACvB,QAAQ,MAAK;AACZ,oBAAO;UACT,CAAC;QACL,CAAC,EACA,MAAM,SAAM;AACX,gBAAM,OAAO,QAAQ,GAAG;QAC1B,CAAC,EACA,QAAQ,MAAK;AACZ,kBAAQ,oBAAoB,wBAAwB,aAAa;QACnE,CAAC;MACL,CAAC;AAED,cAAQ,iBAAiB,oBAAoB,CAAC,UAAwC;AACpF,cAAM,YAAY,MAAM,OAAO;AAC/B,cAAM,aAAa,MAAM,OAAO;AAChC,cAAM,QAAQ,QAAQ,IAAI,SAAS;AAEnC,YAAI,SAAS,MAAM;AACjB;QACF;AAEA,cAAM,kBAAkB,IAAI,gBAAe;AAE3C,cAAM,gBAAgB,CAACA,WAA4C;AACjE,cAAIA,OAAM,OAAO,SAAS,aAAaA,OAAM,OAAO,eAAe,YAAY;AAC7E;UACF;AAEA,0BAAgB,MAAK;QACvB;AAEA,gBAAQ,iBAAiB,yBAAyB,aAAa;AAE/D,aAAK,MAAM,UAAU;UACnB,QAAQ,gBAAgB;SACzB,EACE,KAAK,OAAM,YAAU;AACpB,gBAAM,MAAM,OAAO,QAAO,EACvB,QAAQ,MAAK;AACZ,oBAAO;UACT,CAAC;QACL,CAAC,EACA,MAAM,SAAM;AACX,gBAAM,OAAO,QAAQ,GAAG;QAC1B,CAAC,EACA,QAAQ,MAAK;AACZ,kBAAQ,oBAAoB,yBAAyB,aAAa;QACpE,CAAC;MACL,CAAC;AAED,cAAQ,iBAAiB,mBAAmB,CAAC,UAA+C;AAC1F,cAAM,YAAY,MAAM,OAAO;AAC/B,cAAM,QAAQ,QAAQ,IAAI,SAAS;AAEnC,YAAI,SAAS,MAAM;AACjB;QACF;AAEA,cAAM,SAAQ;MAChB,CAAC;IACH;EACF;AAEA,SAAO;AACT;AAEA,eAAe,iBAAkB,OAAcC,UAAsB;AACnE,MAAI;AACJ,MAAI;AAEJ,QAAM,IAAI,IAAI,QAAiB,CAAC,SAAS,WAAU;AACjD,UAAM;AACN,UAAM;EACR,CAAC;AAED,QAAM,WAAW,MAAW;AAC1B,QAAI,IAAIC,YAAU,CAAE;EACtB;AAEA,EAAAD,UAAS,QAAQ,iBAAiB,SAAS,UAAU;IACnD,MAAM;GACP;AAED,QAAM,IAAI,YAAW;AACnB,UAAM,IAAI,QAAc,CAAC,YAAW;AAClC,UAAI,MAAK;AACP,QAAAA,UAAS,QAAQ,oBAAoB,SAAS,QAAQ;AACtD,gBAAO;MACT,CAAC;IACH,CAAC;EACH,GAAG;IACD,QAAQA,UAAS;GAClB,EACE,MAAM,CAAC,QAAO;AACb,QAAI,GAAG;EACT,CAAC;AAEH,SAAO;AACT;AAEO,IAAM,cAAc,CAACE,OAAcF,aAA8C;AACtF,MAAI,QAAQ,QAAQ,IAAIE,KAAI;AAE5B,MAAI,SAAS,MAAM;AACjB,WAAO;EACT;AAEA,QAAMC,kBAAiB,kBAAkBH,QAAO;AAKhD,MAAI,UAAUG,eAAc,GAAG;AAC7B,YAAQA;AAER,YAAQ,IAAID,OAAM,KAAK;AAEvB,WAAO;EACT;AAEA,QAAM,cAAc,IAAIE,OAAM;IAC5B,aAAa;GACd;AACD,MAAI;AAEJ,UAAQ;IACN,MAAM,SAAU,MAAmB;AAEjC,UAAI,aAAa,MAAM;AACrB,eAAO,iBAAiB,WAAW,IAAI;MACzC;AAGA,kBAAY,IAAIA,OAAM;QACpB,aAAaJ,SAAQ;QACrB,WAAW;OACZ;AACD,YAAM,iBAAiB;AAGvB,YAAM,cAAc,iBAAiB,WAAW,IAAI;AAEpD,WAAK,YAAY,IAAI,YAAW;AAG9B,uBAAe,MAAK;AAKpB,cAAM,eAAe,OAAM,EACxB,KAAK,MAAK;AACT,cAAI,cAAc,gBAAgB;AAChC,wBAAY;UACd;QACF,CAAC;MACL,CAAC;AAED,aAAO;IACT;IACA,MAAM,UAAW,MAAmB;AAIlC,kBAAY;AAEZ,aAAO,iBAAiB,aAAa,IAAI;IAC3C;IACA,UAAU,MAAK;AACb,cAAQ,OAAOE,KAAI;IACrB;IACA,OAAO;;AAGT,UAAQ,IAAIA,OAAM,KAAK;AAGvB,MAAIF,SAAQ,iBAAiB,MAAM;AACjC,gBAAY,iBAAiB,QAAQ,MAAK;AACxC,YAAM,SAAQ;IAChB,GAAG;MACD,MAAM;KACP;EACH;AAEA,SAAO;AACT;;;AC3FA,IAAMK,kBAAiB;EACrB,MAAM;EACN,aAAa;EACb,eAAe;EACf,cAAc;;AAGF,SAAP,cAAgCC,UAAwB;AAC7D,QAAM,OAAiC,OAAO,OAAO,CAAA,GAAID,iBAAgBC,QAAO;AAEhF,SAAO,YAAY,KAAK,MAAM,IAAI;AACpC;;;ACzKM,IAAO,eAAP,MAAmB;EAChB;EACU;EACA;EACT;;;;EAKR,YAAa,YAAoB,MAAYC,WAA4B,CAAA,GAAE;AACzE,SAAK,QAAQ;AACb,SAAK,OAAO;AACZ,SAAK,OAAO,cAAc;MACxB,eAAeA,SAAQ;KACxB;AACD,SAAK,UAAU;EACjB;EAEA,YAAS;AACP,WAAO,KAAK;EACd;EAEA,MAAM,QAAK;AACT,UAAM,MAAM,KAAK,KAAK;AACtB,SAAK,UAAU;EACjB;EAEA,MAAM,OAAI;AACR,UAAM,KAAK,KAAK,KAAK;AACrB,SAAK,UAAU;EACjB;EAEA,SAAM;AACJ,WAAO,KAAK;EACd;;;;EAKA,MAAM,IAAK,KAAU,OAAmBA,WAAkE,CAAA,GAAE;AAC1G,IAAAA,UAAS,QAAQ,eAAc;AAC/B,UAAM,cAAc,MAAM,KAAK,KAAK,SAAQ;AAE5C,QAAI;AACF,aAAO,MAAM,KAAK,MAAM,IAAI,KAAK,OAAOA,QAAO;IACjD;AACE,kBAAW;IACb;EACF;;;;EAKA,OAAQ,QAAS,QAAwDA,WAAuE,CAAA,GAAE;AAChJ,IAAAA,UAAS,QAAQ,eAAc;AAC/B,UAAM,cAAc,MAAM,KAAK,KAAK,SAAQ;AAE5C,QAAI;AACF,aAAQ,KAAK,MAAM,QAAQ,QAAQA,QAAO;IAC5C;AACE,kBAAW;IACb;EACF;;;;EAKA,MAAM,IAAK,KAAUA,WAAsF,CAAA,GAAE;AAC3G,IAAAA,UAAS,QAAQ,eAAc;AAC/B,UAAM,cAAc,MAAM,KAAK,KAAK,SAAQ;AAE5C,QAAI;AACF,aAAO,MAAM,KAAK,MAAM,IAAI,KAAKA,QAAO;IAC1C;AACE,kBAAW;IACb;EACF;;;;EAKA,OAAQ,QAAS,MAA0BA,WAA2F,CAAA,GAAE;AACtI,IAAAA,UAAS,QAAQ,eAAc;AAC/B,UAAM,cAAc,MAAM,KAAK,KAAK,SAAQ;AAE5C,QAAI;AACF,aAAQ,KAAK,MAAM,QAAQ,MAAMA,QAAO;IAC1C;AACE,kBAAW;IACb;EACF;;;;EAKA,MAAM,OAAQ,KAAUA,WAAqE,CAAA,GAAE;AAC7F,IAAAA,UAAS,QAAQ,eAAc;AAC/B,UAAM,cAAc,MAAM,KAAK,KAAK,UAAS;AAE7C,QAAI;AACF,UAAI,MAAM,KAAK,KAAK,SAAS,GAAG,GAAG;AACjC,cAAM,IAAI,MAAM,gBAAgB;MAClC;AAEA,YAAM,KAAK,MAAM,OAAO,KAAKA,QAAO;IACtC;AACE,kBAAW;IACb;EACF;;;;EAKA,OAAQ,WAAY,MAA0BA,WAA0E,CAAA,GAAE;AACxH,IAAAA,UAAS,QAAQ,eAAc;AAC/B,UAAM,cAAc,MAAM,KAAK,KAAK,UAAS;AAE7C,QAAI;AACF,YAAM,UAAU;AAEhB,aAAQ,KAAK,MAAM,WAAY,mBAAgB;AAC7C,yBAAiB,OAAO,MAAM;AAC5B,cAAI,MAAM,QAAQ,KAAK,SAAS,GAAG,GAAG;AACpC,kBAAM,IAAI,MAAM,gBAAgB;UAClC;AAEA,gBAAM;QACR;MACF,EAAC,GAAKA,QAAO;IACf;AACE,kBAAW;IACb;EACF;EAEA,MAAM,IAAK,KAAUA,WAAwB,CAAA,GAAE;AAC7C,IAAAA,UAAS,QAAQ,eAAc;AAC/B,UAAM,cAAc,MAAM,KAAK,KAAK,SAAQ;AAE5C,QAAI;AACF,aAAO,MAAM,KAAK,MAAM,IAAI,KAAKA,QAAO;IAC1C;AACE,kBAAW;IACb;EACF;EAEA,OAAQ,OAAQA,WAAsE,CAAA,GAAE;AACtF,IAAAA,UAAS,QAAQ,eAAc;AAC/B,UAAM,cAAc,MAAM,KAAK,KAAK,SAAQ;AAE5C,QAAI;AACF,aAAQ,KAAK,MAAM,OAAOA,QAAO;IACnC;AACE,kBAAW;IACb;EACF;EAEA,cAAe,MAAWA,UAAsB;AAC9C,IAAAA,UAAS,QAAQ,eAAc;AAC/B,WAAO,KAAK,MAAM,cAAc,MAAMA,QAAO;EAC/C;;;;AClLF,IAAM,iBAAiB,IAAI,IAAI,UAAU;AACzC,IAAM,kBAAkB;AAExB,eAAsB,gCAAiC,WAAoB;AACzE,MAAI,CAAE,MAAM,UAAU,IAAI,cAAc,GAAI;AAC1C,UAAM,UAAU,IAAI,gBAAgB,WAAqB,GAAG,eAAe,EAAE,CAAC;AAE9E;EACF;AAEA,QAAM,MAAM,MAAM,UAAU,IAAI,cAAc;AAC9C,QAAM,MAAM,SAAmB,GAAG;AAClC,QAAMC,WAAU,SAAS,KAAK,EAAE;AAEhC,MAAIA,aAAY,iBAAiB;AAE/B,UAAM,IAAI,MAAM,kEAAkE;EACpF;AACF;;;ACrBA;;cAAAC;EAAA,cAAAC;EAAA,cAAAC;EAAA;;IAAM,cAAc,IAAI,YAAW;AACnC,IAAM,cAAc,IAAI,YAAW;AAE5B,IAAM,OAAO;AACb,IAAMF,QAAO;AAEd,SAAUE,QAAY,MAAO;AACjC,SAAO,YAAY,OAAO,KAAK,UAAU,IAAI,CAAC;AAChD;AAEM,SAAUD,QAAY,MAAsC;AAChE,SAAO,KAAK,MAAM,YAAY,OAAO,IAAI,CAAC;AAC5C;;;ACdA;;cAAAE;EAAA,cAAAC;EAAA,cAAAC;EAAA,YAAAC;;AAGO,IAAMC,QAAO;AACb,IAAMC,QAAO;AAEd,SAAUC,QAAQ,MAAgB;AACtC,SAAO,OAAO,IAAI;AACpB;AAEM,SAAUC,QAAQ,MAAwD;AAC9E,SAAO,OAAO,IAAI;AACpB;;;ACZM,SAAU,UAAe,GAAO;AACpC,SAAO,GAAG,QAAQ;AACpB;;;ACUM,SAAU,SAA+C,gBAA6C,CAAA,GAAI,WAAyD;AACvK,QAAM,SAA+C;IACnD,CAAOC,KAAI,GAAGC;IACd,CAAKD,KAAI,GAAG;IACZ,CAAS,IAAI,GAAG;IAChB,CAASA,KAAI,GAAGC;IAChB,CAAMD,KAAI,GAAG;;AAGf,gBAAc,QAAQ,WAAQ;AAC5B,WAAO,MAAM,IAAI,IAAI;EACvB,CAAC;AAED,SAAO,OAAOA,WAAQ;AACpB,QAAI,QAAQ,OAAOA,MAAI;AAEvB,QAAI,SAAS,QAAQ,aAAa,MAAM;AACtC,YAAM,MAAM,UAAUA,MAAI;AAE1B,UAAI,UAAU,GAAG,GAAG;AAClB,gBAAQ,MAAM;MAChB,OAAO;AACL,gBAAQ;MACV;AAEA,aAAO,MAAM,IAAI,IAAI;IACvB;AAEA,QAAI,SAAS,MAAM;AACjB,aAAO;IACT;AAEA,UAAM,IAAI,kBAAkB,4BAA4BA,MAAI,EAAE;EAChE;AACF;;;AC3CA,IAAME,QAAY;AAClB,IAAMC,QAAO;AAEb,IAAMC,UAA4C;AAElD,SAAS,OAAQ,OAAiB;AAChC,SAAc,OAAOF,OAAME,QAAO,KAAK,CAAC;AAC1C;AAEO,IAAM,WAAW,EAAE,MAAAF,OAAM,MAAAC,OAAM,QAAAC,SAAQ,OAAM;;;ACRpD,SAAS,IAAKC,OAAyB;AACrC,SAAO,OAAM,SAAQ,IAAI,WAAW,MAAM,OAAO,OAAO,OAAOA,OAAM,IAAI,CAAC;AAC5E;AAEO,IAAMC,UAASC,MAAK;EACzB,MAAM;EACN,MAAM;EACN,QAAQ,IAAI,SAAS;CACtB;AAEM,IAAMC,UAASD,MAAK;EACzB,MAAM;EACN,MAAM;EACN,QAAQ,IAAI,SAAS;CACtB;;;ACXK,SAAU,UAAW,iBAAoC,CAAA,GAAI,YAAqD;AACtH,QAAM,UAA2C;IAC/C,CAACE,QAAO,IAAI,GAAGA;IACf,CAACC,QAAO,IAAI,GAAGA;IACf,CAAC,SAAS,IAAI,GAAG;;AAGnB,iBAAe,QAAQ,YAAS;AAC9B,YAAQ,OAAO,IAAI,IAAI;EACzB,CAAC;AAED,SAAO,OAAOC,WAAQ;AACpB,QAAI,SAAS,QAAQA,MAAI;AAEzB,QAAI,UAAU,QAAQ,cAAc,MAAM;AACxC,YAAM,MAAM,WAAWA,MAAI;AAE3B,UAAI,UAAU,GAAG,GAAG;AAClB,iBAAS,MAAM;MACjB,OAAO;AACL,iBAAS;MACX;AAEA,cAAQ,OAAO,IAAI,IAAI;IACzB;AAEA,QAAI,UAAU,MAAM;AAClB,aAAO;IACT;AAEA,UAAM,IAAI,0BAA0B,6CAA6CA,OAAK,SAAS,EAAE,CAAC,gIAAgI;EACpO;AACF;;;AC9BM,SAAU,UAAW,SAA8C;AACvE,QAAM,aAAa,IAAI,WAAW,gBAAe;AAEjD,WAAS,UAAO;AACd,eAAW,MAAK;AAEhB,eAAWC,WAAU,SAAS;AAC5B,UAAIA,SAAQ,uBAAuB,MAAM;AACvC,QAAAA,QAAO,oBAAoB,SAAS,OAAO;;;EAGjD;AAEA,aAAWA,WAAU,SAAS;AAC5B,QAAIA,SAAQ,YAAY,MAAM;AAC5B,cAAO;AACP;;AAGF,QAAIA,SAAQ,oBAAoB,MAAM;AACpC,MAAAA,QAAO,iBAAiB,SAAS,OAAO;;;AAI5C,WAAS,QAAK;AACZ,eAAWA,WAAU,SAAS;AAC5B,UAAIA,SAAQ,uBAAuB,MAAM;AACvC,QAAAA,QAAO,oBAAoB,SAAS,OAAO;;;EAGjD;AAEA,QAAM,SAAS,WAAW;AAC1B,SAAO,QAAQ;AAEf,SAAO;AACT;;;ACtCA,IAAM,iBAAiB;AAEjB,IAAO,qBAAP,cAAkC,eAAc;EACnC;EAEjB,YAAa,OAAkB;AAC7B,UAAK;AAEL,SAAK,QAAQ;EACf;EAEA,IAAK,KAAU,OAAmBC,UAAsB;AACtD,QAAI,IAAI,UAAU,SAAS,gBAAgB;AACzC,MAAAA,UAAS,QAAQ,eAAc;AAC/B,aAAO;IACT;AAEA,QAAI,KAAK,SAAS,MAAM;AACtB,MAAAA,UAAS,QAAQ,eAAc;AAC/B,aAAO;IACT;AAEA,WAAO,KAAK,MAAM,IAAI,KAAK,OAAOA,QAAO;EAC3C;EAEA,IAAK,KAAUA,UAAsB;AACnC,QAAI,IAAI,UAAU,SAAS,gBAAgB;AACzC,MAAAA,UAAS,QAAQ,eAAc;AAC/B,aAAO,IAAI,UAAU;IACvB;AAEA,QAAI,KAAK,SAAS,MAAM;AACtB,MAAAA,UAAS,QAAQ,eAAc;AAC/B,YAAM,IAAIC,eAAa;IACzB;AAEA,WAAO,KAAK,MAAM,IAAI,KAAKD,QAAO;EACpC;EAEA,IAAK,KAAUA,UAAsB;AACnC,QAAI,IAAI,UAAU,SAAS,gBAAgB;AACzC,MAAAA,UAAS,QAAQ,eAAc;AAC/B,aAAO;IACT;AAEA,QAAI,KAAK,SAAS,MAAM;AACtB,MAAAA,UAAS,QAAQ,eAAc;AAC/B,aAAO;IACT;AAEA,WAAO,KAAK,MAAM,IAAI,KAAKA,QAAO;EACpC;EAEA,OAAQ,KAAUA,UAAsB;AACtC,QAAI,IAAI,SAAS,gBAAgB;AAC/B,MAAAA,UAAS,QAAQ,eAAc;AAC/B;IACF;AAEA,QAAI,KAAK,SAAS,MAAM;AACtB,aAAO,KAAK,MAAM,OAAO,KAAKA,QAAO;IACvC;EACF;EAEA,OAAQA,UAAsB;AAC5B,QAAI,KAAK,SAAS,MAAM;AACtB,aAAO,KAAK,MAAM,OAAOA,QAAO;IAClC;AAEA,IAAAA,UAAS,QAAQ,eAAc;AAC/B,WAAO,CAAA;EACT;;;;ACnCF,SAAS,gBAAqB,OAAU;AACtC,SAAO,MAAM,OAAO,aAAa,KAAK;AACxC;AAEA,SAASE,WAAyB,OAAU;AAC1C,SAAO,OAAO,QAAQ;AACxB;AAQA,SAAS,QAAa,QAAwC,IAAqD;AACjH,MAAI,QAAQ;AAEZ,MAAI,gBAAgB,MAAM,GAAG;AAC3B,WAAQ,mBAAgB;AACtB,uBAAiB,OAAO,QAAQ;AAC9B,cAAMC,OAAM,GAAG,KAAK,OAAO;AAE3B,YAAID,WAAUC,IAAG,GAAG;AAClB,gBAAMA;QACR;AAEA,cAAM;MACR;IACF,EAAE;EACJ;AAGA,QAAM,WAAWC,aAAK,MAAM;AAC5B,QAAM,EAAE,OAAAC,QAAO,KAAI,IAAK,SAAS,KAAI;AAErC,MAAI,SAAS,MAAM;AACjB,WAAQ,aAAU;IAAK,EAAC;EAC1B;AAEA,QAAM,MAAM,GAAGA,QAAO,OAAO;AAE7B,MAAI,OAAO,KAAK,SAAS,YAAY;AACnC,WAAQ,mBAAgB;AACtB,YAAMA;AAEN,iBAAW,OAAO,UAAU;AAC1B,cAAMF,OAAM,GAAG,KAAK,OAAO;AAE3B,YAAID,WAAUC,IAAG,GAAG;AAClB,gBAAMA;QACR;AAEA,cAAM;MACR;IACF,EAAE;EACJ;AAEA,QAAMG,QAAO;AAEb,SAAQ,aAAU;AAChB,UAAMD;AAEN,eAAW,OAAO,UAAU;AAC1B,MAAAC,MAAK,KAAK,OAAO;AACjB,YAAM;IACR;EACF,EAAE;AACJ;AAEA,IAAAF,eAAe;;;ACpFf,IAAM,UAAN,MAAa;EACQ;EACA;EACT;EACS;EACA;;;;EAKnB,YAAa,YAA6B;AACxC,SAAK,MAAM,WAAW,OAAO,aAAa,yBAAyB;AACnE,SAAK,SAAS,WAAW;AACzB,SAAK,aAAa;AAClB,SAAK,QAAQ,IAAI,mBAAmB,WAAW,UAAU;AACzD,SAAK,YAAY,WAAW;EAC9B;;;;EAKA,MAAM,IAAK,KAAU,OAAmBG,WAAkE,CAAA,GAAE;AAC1G,QAAI,MAAM,KAAK,MAAM,IAAI,KAAKA,QAAO,GAAG;AACtC,MAAAA,SAAQ,aAAa,IAAI,oBAAyB,wBAAwB,GAAG,CAAC;AAC9E,aAAO;IACT;AAEA,IAAAA,SAAQ,aAAa,IAAI,oBAAyB,+BAA+B,GAAG,CAAC;AAErF,UAAM,QAAQ,IACZ,KAAK,WAAW,aAAa,IAAI,OAAM,WAAU,OAAO,WAAW,KAAK,OAAOA,QAAO,CAAC,CAAC;AAG1F,IAAAA,SAAQ,aAAa,IAAI,oBAAyB,6BAA6B,GAAG,CAAC;AAEnF,WAAO,KAAK,MAAM,IAAI,KAAK,OAAOA,QAAO;EAC3C;;;;EAKA,OAAQ,QAAS,QAAwDA,WAAuE,CAAA,GAAE;AAChJ,UAAM,gBAAgBC,aAAO,QAAQ,OAAO,EAAE,IAAG,MAAwB;AACvE,YAAM,MAAM,MAAM,KAAK,MAAM,IAAI,KAAKD,QAAO;AAE7C,UAAI,KAAK;AACP,QAAAA,SAAQ,aAAa,IAAI,oBAAyB,6BAA6B,GAAG,CAAC;MACrF;AAEA,aAAO,CAAC;IACV,CAAC;AAED,UAAM,aAAaC,aAAQ,eAAe,OAAO,EAAE,KAAK,MAAK,MAAqB;AAChF,MAAAD,SAAQ,aAAa,IAAI,oBAAyB,oCAAoC,GAAG,CAAC;AAC1F,YAAM,QAAQ,IACZ,KAAK,WAAW,aAAa,IAAI,OAAM,WAAU,OAAO,WAAW,KAAK,OAAOA,QAAO,CAAC,CAAC;IAE5F,CAAC;AAED,IAAAA,SAAQ,aAAa,IAAI,oBAAoB,qCAAqC,CAAC;AACnF,WAAQ,KAAK,MAAM,QAAQ,YAAYA,QAAO;EAChD;;;;EAKA,MAAM,IAAK,KAAUA,WAAsF,CAAA,GAAE;AAC3G,QAAIA,SAAQ,YAAY,QAAQ,CAAE,MAAM,KAAK,MAAM,IAAI,KAAKA,QAAO,GAAI;AACrE,YAAM,SAAS,MAAM,KAAK,UAAU,IAAI,UAAU,IAAI;AAGtD,MAAAA,SAAQ,aAAa,IAAI,oBAAyB,4BAA4B,GAAG,CAAC;AAClF,YAAM,QAAQ,MAAM,oBAAoB,KAAK,KAAK,WAAW,cAAc,QAAQ;QACjF,GAAGA;QACH,KAAK,KAAK;OACX;AACD,MAAAA,SAAQ,aAAa,IAAI,oBAAyB,6BAA6B,GAAG,CAAC;AACnF,YAAM,KAAK,MAAM,IAAI,KAAK,OAAOA,QAAO;AAGxC,MAAAA,SAAQ,aAAa,IAAI,oBAAyB,+BAA+B,GAAG,CAAC;AACrF,YAAM,QAAQ,IACZ,KAAK,WAAW,aAAa,IAAI,OAAM,WAAU,OAAO,WAAW,KAAK,OAAOA,QAAO,CAAC,CAAC;AAG1F,aAAO;IACT;AAEA,IAAAA,SAAQ,aAAa,IAAI,oBAAyB,6BAA6B,GAAG,CAAC;AAEnF,WAAO,KAAK,MAAM,IAAI,KAAKA,QAAO;EACpC;;;;EAKA,OAAQ,QAAS,MAA0BA,WAA2F,CAAA,GAAE;AACtI,IAAAA,SAAQ,aAAa,IAAI,oBAAoB,qCAAqC,CAAC;AAEnF,WAAQ,KAAK,MAAM,QAAQC,aAAQ,MAAM,OAAO,QAAsB;AACpE,UAAID,SAAQ,YAAY,QAAQ,CAAE,MAAM,KAAK,MAAM,IAAI,KAAKA,QAAO,GAAI;AACrE,cAAM,SAAS,MAAM,KAAK,UAAU,IAAI,UAAU,IAAI;AAGtD,QAAAA,SAAQ,aAAa,IAAI,oBAAyB,iCAAiC,GAAG,CAAC;AACvF,cAAM,QAAQ,MAAM,oBAAoB,KAAK,KAAK,WAAW,cAAc,QAAQ;UACjF,GAAGA;UACH,KAAK,KAAK;SACX;AACD,QAAAA,SAAQ,aAAa,IAAI,oBAAyB,kCAAkC,GAAG,CAAC;AACxF,cAAM,KAAK,MAAM,IAAI,KAAK,OAAOA,QAAO;AAGxC,QAAAA,SAAQ,aAAa,IAAI,oBAAyB,oCAAoC,GAAG,CAAC;AAC1F,cAAM,QAAQ,IACZ,KAAK,WAAW,aAAa,IAAI,OAAM,WAAU,OAAO,WAAW,KAAK,OAAOA,QAAO,CAAC,CAAC;MAE5F;IACF,CAAC,CAAC;EACJ;;;;EAKA,MAAM,OAAQ,KAAUA,WAAqE,CAAA,GAAE;AAC7F,IAAAA,SAAQ,aAAa,IAAI,oBAAyB,mCAAmC,GAAG,CAAC;AAEzF,UAAM,KAAK,MAAM,OAAO,KAAKA,QAAO;EACtC;;;;EAKA,OAAQ,WAAY,MAA0BA,WAA0E,CAAA,GAAE;AACxH,IAAAA,SAAQ,aAAa,IAAI,oBAAoB,2CAA2C,CAAC;AACzF,WAAQ,KAAK,MAAM,WAAY,mBAAgB;AAC7C,uBAAiB,OAAO,MAAM;AAC5B,cAAM;MACR;IACF,EAAC,GAAKA,QAAO;EACf;EAEA,MAAM,IAAK,KAAUA,WAAwB,CAAA,GAAE;AAC7C,WAAO,KAAK,MAAM,IAAI,KAAKA,QAAO;EACpC;EAEA,OAAQ,OAAQA,WAAsE,CAAA,GAAE;AACtF,IAAAA,SAAQ,aAAa,IAAI,oBAAoB,oCAAoC,CAAC;AAClF,WAAQ,KAAK,MAAM,OAAOA,QAAO;EACnC;;AASI,IAAO,mBAAP,cAAgC,QAAO;EACnC;;;;EAKR,YAAa,YAAsC;AACjD,UAAM,UAAU;AAEhB,SAAK,UAAU;EACjB;EAEA,YAAS;AACP,WAAO,KAAK;EACd;EAEA,MAAM,QAAK;AACT,UAAM,MAAM,KAAK,OAAO,GAAG,KAAK,WAAW,YAAY;AACvD,SAAK,UAAU;EACjB;EAEA,MAAM,OAAI;AACR,UAAM,KAAK,KAAK,OAAO,GAAG,KAAK,WAAW,YAAY;AACtD,SAAK,UAAU;EACjB;EAEA,SAAM;AACJ,WAAO,KAAK;EACd;EAEA,cAAe,MAAWA,UAA8B;AACtD,UAAM,eAAe,KAAK,WAAW,aAAa,IAAI,YAAS;AAC7D,UAAI,OAAO,iBAAiB,MAAM;AAChC,eAAO;MACT;AAEA,aAAO,OAAO,cAAcA,QAAO;IACrC,CAAC;AAED,WAAO,IAAI,eAAe;MACxB,YAAY,KAAK;MACjB;MACA,WAAW,KAAK;MAChB,QAAQ,KAAK;OACZ;MACD;KACD;EACH;;AAUF,IAAM,iBAAN,cAA6B,QAAO;EACjB;EAEjB,YAAa,YAA+B,MAAwB;AAClE,UAAM,UAAU;AAKhB,SAAK,kBAAkB,IAAI,gBAAe;AAC1C,oBAAgB,UAAU,KAAK,gBAAgB,MAAM;AAErD,SAAK,MAAM,WAAW,OAAO,aAAa,yBAAyB,KAAK,IAAI,EAAE;EAChF;EAEA,QAAK;AACH,SAAK,gBAAgB,MAAK;EAC5B;;;;EAKA,MAAM,IAAK,KAAU,OAAmBA,WAAkE,CAAA,GAAE;AAC1G,UAAM,SAAS,UAAU,CAAC,KAAK,gBAAgB,QAAQA,SAAQ,MAAM,CAAC;AACtE,oBAAgB,UAAU,MAAM;AAEhC,QAAI;AACF,aAAO,MAAM,MAAM,IAAI,KAAK,OAAO;QACjC,GAAGA;QACH;OACD;IACH;AACE,aAAO,MAAK;IACd;EACF;;;;EAKA,OAAQ,QAAS,QAAwDA,WAAuE,CAAA,GAAE;AAChJ,UAAM,SAAS,UAAU,CAAC,KAAK,gBAAgB,QAAQA,SAAQ,MAAM,CAAC;AACtE,oBAAgB,UAAU,MAAM;AAEhC,QAAI;AACF,aAAQ,MAAM,QAAQ,QAAQ;QAC5B,GAAGA;QACH;OACD;IACH;AACE,aAAO,MAAK;IACd;EACF;;;;EAKA,MAAM,IAAK,KAAUA,WAAsF,CAAA,GAAE;AAC3G,UAAM,SAAS,UAAU,CAAC,KAAK,gBAAgB,QAAQA,SAAQ,MAAM,CAAC;AACtE,oBAAgB,UAAU,MAAM;AAEhC,QAAI;AACF,aAAO,MAAM,MAAM,IAAI,KAAK;QAC1B,GAAGA;QACH;OACD;IACH;AACE,aAAO,MAAK;IACd;EACF;;;;EAKA,OAAQ,QAAS,MAA0BA,WAA2F,CAAA,GAAE;AACtI,UAAM,SAAS,UAAU,CAAC,KAAK,gBAAgB,QAAQA,SAAQ,MAAM,CAAC;AACtE,oBAAgB,UAAU,MAAM;AAEhC,QAAI;AACF,aAAQ,MAAM,QAAQ,MAAM;QAC1B,GAAGA;QACH;OACD;IACH;AACE,aAAO,MAAK;IACd;EACF;;;;EAKA,MAAM,OAAQ,KAAUA,WAAqE,CAAA,GAAE;AAC7F,UAAM,SAAS,UAAU,CAAC,KAAK,gBAAgB,QAAQA,SAAQ,MAAM,CAAC;AACtE,oBAAgB,UAAU,MAAM;AAEhC,QAAI;AACF,YAAM,MAAM,OAAO,KAAK;QACtB,GAAGA;QACH;OACD;IACH;AACE,aAAO,MAAK;IACd;EACF;;;;EAKA,OAAQ,WAAY,MAA0BA,WAA0E,CAAA,GAAE;AACxH,UAAM,SAAS,UAAU,CAAC,KAAK,gBAAgB,QAAQA,SAAQ,MAAM,CAAC;AACtE,oBAAgB,UAAU,MAAM;AAEhC,QAAI;AACF,aAAQ,MAAM,WAAW,MAAM;QAC7B,GAAGA;QACH;OACD;IACH;AACE,aAAO,MAAK;IACd;EACF;EAEA,MAAM,IAAK,KAAUA,WAAwB,CAAA,GAAE;AAC7C,UAAM,SAAS,UAAU,CAAC,KAAK,gBAAgB,QAAQA,SAAQ,MAAM,CAAC;AACtE,oBAAgB,UAAU,MAAM;AAEhC,QAAI;AACF,aAAO,MAAM,MAAM,IAAI,KAAK;QAC1B,GAAGA;QACH;OACD;IACH;AACE,aAAO,MAAK;IACd;EACF;EAEA,OAAQ,OAAQA,WAAsE,CAAA,GAAE;AACtF,UAAM,SAAS,UAAU,CAAC,KAAK,gBAAgB,QAAQA,SAAQ,MAAM,CAAC;AACtE,oBAAgB,UAAU,MAAM;AAEhC,QAAI;AACF,aAAQ,MAAM,OAAO;QACnB,GAAGA;QACH;OACD;IACH;AACE,aAAO,MAAK;IACd;EACF;;AAGF,SAAS,wBAAyB,QAAmB;AACnD,SAAO,OAAO,OAAO,aAAa;AACpC;AAEO,IAAM,8BAA8B,CAAC,KAAU,WAA0E;AAC9H,MAAI,UAAU,MAAM;AAClB,UAAM,IAAI,uBAAuB,6CAA6C,IAAI,UAAU,KAAK,SAAS,EAAE,CAAC,gIAAgI;EAC/O;AAEA,SAAO,OAAO,UAAoC;AAEhD,QAAI;AACJ,UAAM,MAAM,OAAO,OAAO,KAAK;AAE/B,QAAI,UAAU,GAAG,GAAG;AAClB,aAAO,MAAM;IACf,OAAO;AACL,aAAO;IACT;AAEA,QAAI,CAAC,OAAiB,KAAK,QAAQ,IAAI,UAAU,MAAM,GAAG;AAExD,YAAM,IAAI,sBAAsB,kEAAkE;IACpG;EACF;AACF;AAMA,eAAe,oBAAqB,KAAU,cAA6B,QAAyBA,UAAqC;AACvI,QAAM,aAAa,4BAA4B,KAAK,MAAM;AAE1D,QAAM,aAAa,IAAI,gBAAe;AACtC,QAAM,SAAS,UAAU,CAAC,WAAW,QAAQA,SAAQ,MAAM,CAAC;AAC5D,kBAAgB,UAAU,WAAW,QAAQ,MAAM;AAEnD,QAAM,aAA6D,CAAA;AAEnE,aAAW,UAAU,cAAc;AACjC,QAAI,wBAAwB,MAAM,GAAG;AACnC,iBAAW,KAAK,MAAM;IACxB;EACF;AAEA,MAAI;AACF,WAAO,MAAM,QAAQ,IACnB,WACG,IAAI,OAAM,cAAY;AACrB,UAAI;AACF,YAAI,sBAAsB;AAC1B,cAAM,QAAQ,MAAM,UAAU,SAAS,KAAK;UAC1C,GAAGA;UACH;UACA,YAAY,OAAOE,WAAoC;AACrD,kBAAM,WAAWA,MAAK;AACtB,kCAAsB;UACxB;SACD;AAED,YAAI,CAAC,qBAAqB;AAGxB,gBAAM,WAAW,KAAK;QACxB;AAEA,eAAO;MACT,SAAS,KAAK;AACZ,QAAAF,SAAQ,IAAI,MAAM,4CAA4C,KAAK,GAAG;AACtE,cAAM;MACR;IACF,CAAC,CAAC;EAER;AAGE,eAAW,MAAK;AAChB,WAAO,MAAK;EACd;AACF;;;ACvdO,IAAM,SAAS,QAAQ;EAC5B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAM,YAAY,QAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAM,YAAY,QAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAM,eAAe,QAAQ;EAClC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;;;ACFK,IAAgB,kBAAhB,cAAqG,kBAAoD;EACrJ;EACS;EACA;EACP;EACA;EACO;EACA;EACD;EACC;EACA;EAEjB,YAAa,YAAuC,MAAkC;AACpF,UAAK;AAEL,oBAAgB,UAAU,IAAI;AAC9B,SAAK,OAAO,KAAK;AACjB,SAAK,SAAS,WAAW;AACzB,SAAK,MAAM,WAAW,OAAO,aAAa,KAAK,IAAI;AACnD,SAAK,WAAW,oBAAI,IAAG;AACvB,SAAK,eAAe,KAAK,gBAAgB;AACzC,SAAK,eAAe,KAAK,gBAAgB;AACzC,SAAK,YAAY,CAAA;AACjB,SAAK,iBAAiB,2BAA2B,KAAK,YAAY;AAClE,SAAK,mBAAmB,KAAK,aAAa,CAAA;EAC5C;EAEA,MAAM,SAAU,KAAUG,WAA8D,CAAA,GAAE;AAExF,UAAM,SAAS,OAAO,OAAO,IAAI,UAAU,KAAK;AAChD,UAAM,cAAc,KAAK,SAAS,IAAI,MAAM;AAE5C,QAAI,eAAe,MAAM;AACvB,WAAK,IAAI,gCAAgC,GAAG;AAC5C,aAAO;IACT;AAEA,UAAM,WAAwC,OAAM;AACpD,SAAK,SAAS,IAAI,QAAQ,SAAS,OAAO;AAE1C,QAAI,KAAK,UAAU,WAAW,GAAG;AAC/B,UAAI,QAAQ;AAEZ,UAAI,KAAK,6BAA6B,MAAM;AAC1C,gBAAQ;AACR,aAAK,MAAM,KAAK,OAAO,aAAa,GAAG,KAAK,IAAI,IAAI,GAAG,EAAE;AACzD,aAAK,4BAA4B,KAAK,cAAc,KAAK,KAAK,cAAcA,QAAO;MACrF;AAEA,YAAM,KAAK;AAEX,UAAI,OAAO;AACT,aAAK,IAAI,sCAAsC,GAAG;MACpD;IACF;AAEA,QAAI,aAAa;AAKjB,UAAM,QAAQ,IAAI,MAA4E;MAC5F,aAAa,KAAK;KACnB;AACD,UAAM,iBAAiB,SAAS,MAAK;IAAE,CAAC;AACxC,UAAM,iBAAiB,WAAW,CAAC,QAAO;AACxC,WAAK,IAAI,MAAM,qDAAqD,IAAI,OAAO,IAAI,QAAQ,UAAU,IAAI,OAAO,KAAK;AACrH,WAAK,MAAM,IAAI,OAAO,IAAI,QAAQ,QAAQ;IAC5C,CAAC;AACD,UAAM,iBAAiB,WAAW,CAAC,QAAO;AAExC,mBAAa;AACb,eAAS,QAAQ,IAAI,OAAO,MAAM;IACpC,CAAC;AACD,UAAM,iBAAiB,QAAQ,MAAK;AAClC,UAAI,cAAcA,SAAQ,QAAQ,YAAY,MAAM;AAClD,aAAK,IAAI,MAAM,2BAA2B;AAE1C;MACF;AAGA,cAAQ,QAAO,EACZ,KAAK,YAAW;AACf,aAAK,IAAI,gEAAgE,GAAG;AAG5E,iBAAS,IAAI,GAAG,IAAI,KAAK,cAAc,KAAK;AAC1C,cAAI,KAAK,UAAU,WAAW,GAAG;AAC/B;UACF;AAEA,gBAAM,WAAW,KAAK,UAAU,KAAK,MAAM,KAAK,OAAM,IAAK,KAAK,UAAU,MAAM,CAAC;AACjF,eAAK,MAAM,QAAQ;QACrB;AAGA,cAAM,KAAK,cAAc,KAAK,KAAK,cAAcA,QAAO;AAGxD,aAAK,IAAI,wCAAwC,GAAG;AACpD,aAAK,SAAS,OAAO,MAAM;AAC3B,iBAAS,QAAQ,MAAM,KAAK,SAAS,KAAKA,QAAO,CAAC;MACpD,CAAC,EACA,MAAM,SAAM;AACX,aAAK,IAAI,MAAM,uCAAuC,KAAK,GAAG;AAC9D,iBAAS,OAAO,GAAG;MACrB,CAAC;IACL,CAAC;AAED,UAAM,6BAA6B,CAAC,UAAsC;AACxE,YAAM,IAAI,YAAW;AACnB,eAAO,KAAK,cAAc,KAAK,MAAM,QAAQA,QAAO;MACtD,GAAG;QACD,UAAU,MAAM;OACjB,EACE,MAAM,SAAM;AACX,YAAIA,SAAQ,QAAQ,YAAY,MAAM;AAGpC;QACF;AAEA,aAAK,IAAI,MAAM,yCAAyC,KAAK,GAAG;MAClE,CAAC;IACL;AAGA,SAAK,iBAAiB,YAAY,0BAA0B;AAG5D,YAAQ,IAAI,CAAC,GAAG,KAAK,SAAS,EAAE,IAAI,OAAO,aAAY;AACrD,aAAO,MAAM,IAAI,YAAW;AAC1B,eAAO,KAAK,cAAc,KAAK,UAAUA,QAAO;MAClD,GAAG;QACD;OACD;IACH,CAAC,CAAC,EACC,MAAM,SAAM;AACX,UAAIA,SAAQ,QAAQ,YAAY,MAAM;AAGpC;MACF;AAEA,WAAK,IAAI,MAAM,yCAAyC,KAAK,GAAG;IAClE,CAAC;AAEH,UAAM,wBAAwB,MAAW;AACvC,eAAS,OAAO,IAAI,WAAWA,SAAQ,QAAQ,UAAU,iBAAiB,CAAC;AAC3E,YAAM,MAAK;IACb;AAEA,IAAAA,SAAQ,QAAQ,iBAAiB,SAAS,qBAAqB;AAE/D,QAAI;AACF,aAAO,MAAM,SAAS;IACxB;AACE,WAAK,oBAAoB,YAAY,0BAA0B;AAC/D,MAAAA,SAAQ,QAAQ,oBAAoB,SAAS,qBAAqB;AAClE,YAAM,MAAK;AACX,WAAK,SAAS,OAAO,MAAM;IAC7B;EACF;EAEA,MAAO,UAAkB;AACvB,SAAK,eAAe,IAAI,KAAK,cAAc,QAAQ,CAAC;AACpD,UAAM,QAAQ,KAAK,UAAU,UAAU,UAAQ,KAAK,OAAO,MAAM,QAAQ,CAAC;AAE1E,QAAI,UAAU,IAAI;AAChB;IACF;AAEA,SAAK,UAAU,OAAO,OAAO,CAAC;EAChC;EAEA,UAAW,UAAkB;AAC3B,WAAO,KAAK,eAAe,IAAI,KAAK,cAAc,QAAQ,CAAC;EAC7D;EAEA,YAAa,UAAkB;AAE7B,QAAI,KAAK,UAAU,KAAK,UAAQ,KAAK,OAAO,MAAM,QAAQ,CAAC,KAAK,MAAM;AACpE,aAAO;IACT;AAGA,QAAI,KAAK,UAAU,QAAQ,GAAG;AAC5B,aAAO;IACT;AAEA,WAAO;EACT;EAEQ,MAAM,cAAe,KAAU,OAAeA,UAAqB;AACzE,UAAM,WAAkC,OAAM;AAC9C,QAAI,QAAQ;AAIZ,SAAK,QAAQ,QAAO,EACjB,KAAK,YAAW;AACf,WAAK,IAAI,wCAAwC,OAAO,KAAK,cAAc,GAAG;AAG9E,UAAI,KAAK,iBAAiB,SAAS,GAAG;AACpC,eAAO,QAAQ,SAAS,KAAK,iBAAiB,SAAS,GAAG;AACxD,gBAAM,OAAO,KAAK,iBAAiB,IAAG;AAEtC,cAAI,QAAQ,MAAM;AAChB;UACF;AAEA,gBAAM,WAAW,MAAM,KAAK,kBAAkB,MAAMA,QAAO;AAE3D,cAAIA,SAAQ,QAAQ,YAAY,MAAM;AACpC;UACF;AAEA,cAAI,YAAY,MAAM;AACpB;UACF;AAEA,cAAI,KAAK,YAAY,QAAQ,GAAG;AAC9B;UACF;AAEA,eAAK,IAAI,6BAA6B,OAAO,KAAK,YAAY;AAC9D,eAAK,UAAU,KAAK,QAAQ;AAG5B,eAAK,kBAAkB,YAAY;YACjC,QAAQ;WACT;AAED;AAEA,cAAI,UAAU,OAAO;AACnB,iBAAK,IAAI,kBAAkB;AAC3B,qBAAS,QAAO;UAElB;AAEA,cAAI,KAAK,UAAU,WAAW,KAAK,cAAc;AAC/C,iBAAK,IAAI,2BAA2B,KAAK;AACzC;UACF;QACF;MACF;AAGA,UAAI,QAAQ,KAAK,cAAc;AAC7B,yBAAiB,YAAY,KAAK,iBAAiB,KAAKA,QAAO,GAAG;AAChE,cAAI,UAAU,KAAK,gBAAgBA,SAAQ,QAAQ,YAAY,MAAM;AACnE;UACF;AAEA,cAAI,KAAK,YAAY,QAAQ,GAAG;AAC9B;UACF;AAEA,eAAK,IAAI,6BAA6B,OAAO,KAAK,YAAY;AAC9D,eAAK,UAAU,KAAK,QAAQ;AAG5B,eAAK,kBAAkB,YAAY;YACjC,QAAQ;WACT;AAED;AAEA,cAAI,UAAU,OAAO;AACnB,iBAAK,IAAI,kBAAkB;AAC3B,qBAAS,QAAO;UAElB;AAEA,cAAI,KAAK,UAAU,WAAW,KAAK,cAAc;AAC/C,iBAAK,IAAI,2BAA2B,KAAK;AACzC;UACF;QACF;MACF;AAEA,WAAK,IAAI,iCAAiC,OAAO,KAAK,YAAY;AAElE,UAAI,QAAQ,OAAO;AACjB,cAAM,IAAI,2BAA2B,SAAS,KAAK,OAAO,KAAK,IAAI,KAAK,IAAI,kBAAkB,GAAG,EAAE;MACrG;IACF,CAAC,EACA,MAAM,SAAM;AACX,WAAK,IAAI,MAAM,8DAA8D,KAAK,IAAI,UAAU,GAAG;AACnG,eAAS,OAAO,GAAG;IACrB,CAAC;AAEH,WAAO,SAAS;EAClB;;;;ACxJI,IAAO,QAAP,MAAY;EACT;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACU;EAEjB,YAAa,MAAe;AAC1B,SAAK,SAAS,KAAK,UAAU,cAAa;AAC1C,SAAK,MAAM,KAAK,OAAO,aAAa,OAAO;AAC3C,SAAK,YAAY,UAAU,KAAK,SAAS,KAAK,UAAU;AACxD,SAAK,WAAW,SAAS,KAAK,QAAQ,KAAK,SAAS;AACpD,SAAK,MAAM,KAAK,OAAO,IAAG;AAC1B,SAAK,UAAU,KAAK;AAGpB,UAAM,aAAyB;MAC7B,YAAY,KAAK;MACjB,WAAW,KAAK;MAChB,QAAQ,KAAK;MACb,cAAc,CAAA;MACd,WAAW,KAAK;MAChB,UAAU,KAAK;MACf,KAAK,KAAK;MACV,SAAS,KAAK;MACd,GAAI,KAAK,cAAc,CAAA;;AAGzB,SAAK,UAAU,WAAW,UAAU,IAAI,QAAa,YAAY;MAC/D,UAAU,KAAK,WAAW,CAAA,GAAI,QAAQ,CAAC,WAAe;AAEpD,cAAM,UAAU;UACd;;AAIF,YAAI,OAAO,oBAAoB,KAAK,MAAM;AACxC,kBAAQ,KAAK,OAAO,oBAAoB,CAAC;QAC3C;AAGA,YAAI,OAAO,iBAAiB,KAAK,MAAM;AACrC,kBAAQ,KAAK,OAAO,iBAAiB,CAAC;QACxC;AAEA,eAAO;MACT,CAAC;MACD,2BAA2B,KAAK;KACjC;AAED,UAAM,mBAAmB,IAAI,iBAAiB,UAAU;AACxD,SAAK,OAAO,IAAI,SAAS,KAAK,WAAW,kBAAkB,KAAK,QAAQ;AACxE,SAAK,aAAa,IAAI,aAAa,kBAAkB,KAAK,MAAM;MAC9D,YAAY,KAAK,cAAc;KAChC;AACD,SAAK,YAAY,KAAK;AAEtB,eAAW,eAAe,KAAK,aAAa,IAAI,CAAC,OAAM;AACrD,aAAO,GAAG,UAAU;IACtB,CAAC;EACH;EAEA,MAAM,QAAK;AACT,UAAM,gCAAgC,KAAK,SAAS;AACpD,UAAM,MACJ,KAAK,YACL,KAAK,WACL,KAAK,OAAO;EAEhB;EAEA,MAAM,OAAI;AACR,UAAM,KACJ,KAAK,YACL,KAAK,WACL,KAAK,OAAO;EAEhB;EAEA,MAAM,GAAIC,WAAqB,CAAA,GAAE;AAC/B,UAAM,cAAc,MAAM,KAAK,WAAW,KAAK,UAAS;AAExD,QAAI;AACF,YAAM,QAAQ;AACd,YAAM,aAAa,KAAK,WAAW,OAAM;AAEzC,WAAK,IAAI,UAAU;AAEnB,YAAM,YAAM,WAAW,WAAY,mBAAgB;AACjD,yBAAiB,EAAE,IAAG,KAAM,WAAW,OAAM,GAAI;AAC/C,cAAI;AACF,gBAAI,MAAM,MAAM,KAAK,SAAS,KAAKA,QAAO,GAAG;AAC3C;YACF;AAEA,kBAAM;AAEN,YAAAA,SAAQ,aAAa,IAAI,oBAAyB,oBAAoB,GAAG,CAAC;UAC5E,SAAS,KAAU;AACjB,kBAAM,IAAI,MAAM,mBAAmB,GAAG;AACtC,YAAAA,SAAQ,aAAa,IAAI,oBAA2B,kBAAkB,GAAG,CAAC;UAC5E;QACF;MACF,EAAC,CAAG,CAAC;IACP;AACE,kBAAW;IACb;AAEA,SAAK,IAAI,aAAa;EACxB;;;;AC9QI,IAAO,WAAP,cAA0C,MAAK;EAC5C;EAEP,YAAa,MAAqB;AAChC,UAAM;MACJ,GAAG;MACH,YAAY;QACV,QAAQ,KAAK;;KAEhB;AAED,SAAK,SAAS,KAAK;EACrB;EAEA,MAAM,QAAK;AACT,UAAM,MAAM,MAAK;AACjB,UAAM,KAAK,OAAO,MAAK;EACzB;EAEA,MAAM,OAAI;AACR,UAAM,MAAM,KAAI;AAChB,UAAM,KAAK,OAAO,KAAI;EACxB;;;;ACnCK,IAAM,oBAAoB;AAE1B,IAAM,kBAAkB,OAAO,OAAO;;;ACAvC,IAAO,4BAAP,cAAyC,MAAK;EAClD,OAAO;EACP,OAAO;;AAOH,IAAO,yBAAP,cAAsC,MAAK;EAC/C,OAAO;EACP,OAAO;;AAOH,IAAO,+BAAP,cAA4C,MAAK;EACrD,OAAO;EACP,OAAO;;AAMH,IAAO,qBAAP,cAAkC,MAAK;EAC3C,OAAO;EACP,OAAO;;;;AC/BH,SAAUC,iBAAqB,OAAU;AAC7C,SAAO,MAAM,OAAO,aAAa,KAAK;AACxC;;;ACQA,SAAS,sBAAuB,OAAoC,eAAqB;AACvF,MAAI,MAAM,aAAa,eAAe;AACpC,UAAM,IAAI,uBAAuB,yBAAyB;EAC5D;AACF;AAEA,IAAM,iBAAwC,CAACC,aAAU;AACvD,QAAM,eAAsB,eAAeA,QAAM;AACjD,QAAM,YAAY,YAAY,YAAY;AAE1C,EAAO,OAAOA,UAAQ,SAAS;AAE/B,iBAAe,QAAQ;AAEvB,SAAO;AACT;AACA,eAAe,QAAQ;AAIjB,SAAUC,QAAQ,QAA6CC,UAAwB;AAC3F,EAAAA,WAAUA,YAAW,CAAA;AAErB,QAAM,eAAeA,SAAQ,iBAAiB;AAC9C,QAAM,gBAAgBA,UAAS,iBAAiB;AAEhD,YAAW,WAAY,OAAkC;AACvD,0BAAsB,OAAO,aAAa;AAG1C,UAAMF,WAAS,aAAa,MAAM,UAAU;AAG5C,QAAIA,oBAAkB,YAAY;AAChC,YAAMA;IACR,OAAO;AACL,aAAQA;IACV;AAGA,QAAI,iBAAiB,YAAY;AAC/B,YAAM;IACR,OAAO;AACL,aAAQ;IACV;EACF;AAEA,MAAIG,iBAAgB,MAAM,GAAG;AAC3B,WAAQ,mBAAgB;AACtB,uBAAiB,SAAS,QAAQ;AAChC,eAAQ,WAAW,KAAK;MAC1B;IACF,EAAE;EACJ;AAEA,SAAQ,aAAU;AAChB,eAAW,SAAS,QAAQ;AAC1B,aAAQ,WAAW,KAAK;IAC1B;EACF,EAAE;AACJ;AAEAF,QAAO,SAAS,CAAC,OAAoCC,aAA4B;AAC/E,EAAAA,WAAUA,YAAW,CAAA;AACrB,QAAM,eAAeA,SAAQ,iBAAiB;AAC9C,QAAM,gBAAgBA,UAAS,iBAAiB;AAEhD,wBAAsB,OAAO,aAAa;AAE1C,SAAO,IAAI,eACT,aAAa,MAAM,UAAU,GAC7B,KAAK;AAET;;;ACxEA,IAAK;CAAL,SAAKE,WAAQ;AACX,EAAAA,UAAAA,UAAA,QAAA,IAAA,CAAA,IAAA;AACA,EAAAA,UAAAA,UAAA,MAAA,IAAA,CAAA,IAAA;AACF,GAHK,aAAA,WAAQ,CAAA,EAAA;AAKb,IAAM,iBAAwC,CAAC,QAAO;AACpD,QAAMC,WAAgB,OAAO,GAAG;AAChC,iBAAe,QAAe,eAAeA,QAAM;AAEnD,SAAOA;AACT;AACA,eAAe,QAAQ;AAIjB,SAAUC,QAAQ,QAA6CC,UAAwB;AAC3F,QAAM,SAAS,IAAI,eAAc;AACjC,MAAI,OAAO,SAAS;AACpB,MAAI,aAAa;AAEjB,QAAM,gBAAgBA,UAAS,iBAAiB;AAChD,QAAM,kBAAkBA,UAAS,mBAAmB;AACpD,QAAM,gBAAgBA,UAAS,iBAAiB;AAEhD,YAAW,aAAU;AACnB,WAAO,OAAO,aAAa,GAAG;AAC5B,UAAI,SAAS,SAAS,QAAQ;AAE5B,YAAI;AACF,uBAAa,cAAc,MAAM;AAEjC,cAAI,aAAa,GAAG;AAClB,kBAAM,IAAI,0BAA0B,wBAAwB;UAC9D;AAEA,cAAI,aAAa,eAAe;AAC9B,kBAAM,IAAI,uBAAuB,yBAAyB;UAC5D;AAEA,gBAAM,mBAAmB,cAAc;AACvC,iBAAO,QAAQ,gBAAgB;AAE/B,cAAIA,UAAS,YAAY,MAAM;AAC7B,YAAAA,SAAQ,SAAS,UAAU;UAC7B;AAEA,iBAAO,SAAS;QAClB,SAAS,KAAU;AACjB,cAAI,eAAe,YAAY;AAC7B,gBAAI,OAAO,aAAa,iBAAiB;AACvC,oBAAM,IAAI,6BAA6B,gCAAgC;YACzE;AAEA;UACF;AAEA,gBAAM;QACR;MACF;AAEA,UAAI,SAAS,SAAS,MAAM;AAC1B,YAAI,OAAO,aAAa,YAAY;AAElC;QACF;AAEA,cAAM,OAAO,OAAO,QAAQ,GAAG,UAAU;AACzC,eAAO,QAAQ,UAAU;AAEzB,YAAIA,UAAS,UAAU,MAAM;AAC3B,UAAAA,SAAQ,OAAO,IAAI;QACrB;AAEA,cAAM;AAEN,eAAO,SAAS;MAClB;IACF;EACF;AAEA,MAAIC,iBAAgB,MAAM,GAAG;AAC3B,WAAQ,mBAAgB;AACtB,uBAAiB,OAAO,QAAQ;AAC9B,eAAO,OAAO,GAAG;AAEjB,eAAQ,WAAU;MACpB;AAEA,UAAI,OAAO,aAAa,GAAG;AACzB,cAAM,IAAI,mBAAmB,yBAAyB;MACxD;IACF,EAAE;EACJ;AAEA,SAAQ,aAAU;AAChB,eAAW,OAAO,QAAQ;AACxB,aAAO,OAAO,GAAG;AAEjB,aAAQ,WAAU;IACpB;AAEA,QAAI,OAAO,aAAa,GAAG;AACzB,YAAM,IAAI,mBAAmB,yBAAyB;IACxD;EACF,EAAE;AACJ;AAEAF,QAAO,aAAa,CAAC,QAAgBC,aAA4B;AAC/D,MAAI,aAAa;AAEjB,QAAM,gBAAiB,mBAAgB;AACrC,WAAO,MAAM;AACX,UAAI;AACF,cAAM,EAAE,MAAM,OAAAE,OAAK,IAAK,MAAM,OAAO,KAAK,UAAU;AAEpD,YAAI,SAAS,MAAM;AACjB;QACF;AAEA,YAAIA,UAAS,MAAM;AACjB,gBAAMA;QACR;MACF,SAAS,KAAU;AACjB,YAAI,IAAI,SAAS,kBAAkB;AACjC,iBAAO,EAAE,MAAM,MAAM,OAAO,KAAI;QAClC;AACA,cAAM;MACR;AAEE,qBAAa;MACf;IACF;EACF,EAAC;AAKD,QAAM,WAAW,CAAC,MAAmB;AAAG,iBAAa;EAAE;AACvD,SAAOH,QAAO,eAAe;IAC3B,GAAIC,YAAW,CAAA;IACf;GACD;AACH;;;ACzJO,IAAM,cAAc;AACpB,IAAM,0CAA0C;AAChD,IAAM,8BAA8B;AACpC,IAAM,+BAA+B;AACrC,IAAM,kCAAkC;AACxC,IAAM,6BAA6B;AAEnC,IAAM,mCAAmC;AACzC,IAAM,uCAAuC;AAE7C,IAAM,oCAAoC;AAC1C,IAAM,oCAAoC,OAAO,OAAO;AACxD,IAAM,oCAAoC;;;ACPjD,IAAY;CAAZ,SAAYG,WAAQ;AAClB,EAAAA,UAAA,WAAA,IAAA;AACA,EAAAA,UAAA,UAAA,IAAA;AACF,GAHY,aAAA,WAAQ,CAAA,EAAA;AAKpB,IAAK;CAAL,SAAKC,mBAAgB;AACnB,EAAAA,kBAAAA,kBAAA,WAAA,IAAA,CAAA,IAAA;AACA,EAAAA,kBAAAA,kBAAA,UAAA,IAAA,CAAA,IAAA;AACF,GAHK,qBAAA,mBAAgB,CAAA,EAAA;CAKrB,SAAiBD,WAAQ;AACV,EAAAA,UAAA,QAAQ,MAAsB;AACzC,WAAO,YAAsB,gBAAgB;EAC/C;AACF,GAJiB,aAAA,WAAQ,CAAA,EAAA;AAanB,IAAW;CAAjB,SAAiBE,gBAAa;AAC5B,MAAI;AAES,EAAAA,eAAA,QAAQ,MAA2B;AAC9C,QAAI,UAAU,MAAM;AAClB,eAAS,QAAuB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AACpD,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAK,IAAI,OAAO,QAAQ,IAAI,IAAI,aAAa,GAAI;AAC/C,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,GAAG;QACjB;AAEA,YAAK,IAAI,YAAY,QAAQ,IAAI,aAAa,GAAI;AAChD,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,QAAQ;QACtB;AAEA,YAAI,IAAI,UAAU,MAAM;AACtB,YAAE,OAAO,EAAE;AACX,YAAE,KAAK,IAAI,MAAM;QACnB;AAEA,YAAI,IAAI,YAAY,MAAM;AACxB,YAAE,OAAO,EAAE;AACX,mBAAS,MAAK,EAAG,OAAO,IAAI,UAAU,CAAC;QACzC;AAEA,YAAI,IAAI,gBAAgB,MAAM;AAC5B,YAAE,OAAO,EAAE;AACX,YAAE,KAAK,IAAI,YAAY;QACzB;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQC,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,KAAK,MAAgB,CAAC;UACtB,UAAU;;AAGZ,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,MAAM,OAAO,MAAK;AACtB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,WAAW,OAAO,MAAK;AAC3B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,SAAS,OAAO,KAAI;AACxB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,WAAW,SAAS,MAAK,EAAG,OAAO,MAAM;AAC7C;YACF;YACA,KAAK,GAAG;AACN,kBAAI,eAAe,OAAO,KAAI;AAC9B;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAD,eAAA,SAAS,CAAC,QAA2C;AAChE,WAAO,cAAc,KAAKA,eAAc,MAAK,CAAE;EACjD;AAEa,EAAAA,eAAA,SAAS,CAAC,KAAkC,SAAsD;AAC7G,WAAO,cAAc,KAAKA,eAAc,MAAK,GAAI,IAAI;EACvD;AACF,GA3FiB,kBAAA,gBAAa,CAAA,EAAA;AAkGxB,IAAW;CAAjB,SAAiBE,WAAQ;AACvB,MAAI;AAES,EAAAA,UAAA,QAAQ,MAAsB;AACzC,QAAI,UAAU,MAAM;AAClB,eAAS,QAAkB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAC/C,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAI,IAAI,WAAW,MAAM;AACvB,qBAAWC,UAAS,IAAI,SAAS;AAC/B,cAAE,OAAO,EAAE;AACX,0BAAc,MAAK,EAAG,OAAOA,QAAO,CAAC;UACvC;QACF;AAEA,YAAI,IAAI,QAAQ,MAAM;AACpB,YAAE,OAAO,EAAE;AACX,YAAE,KAAK,IAAI,IAAI;QACjB;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQF,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,SAAS,CAAA;;AAGX,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,KAAK,QAAQ,WAAW,QAAQ,IAAI,QAAQ,WAAW,KAAK,OAAO,SAAS;AAC9E,sBAAM,IAAI,eAAe,0DAA0D;cACrF;AAEA,kBAAI,QAAQ,KAAK,cAAc,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;gBACrE,QAAQ,KAAK,QAAQ;eACtB,CAAC;AACF;YACF;YACA,KAAK,GAAG;AACN,kBAAI,OAAO,OAAO,KAAI;AACtB;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAC,UAAA,SAAS,CAAC,QAAsC;AAC3D,WAAO,cAAc,KAAKA,UAAS,MAAK,CAAE;EAC5C;AAEa,EAAAA,UAAA,SAAS,CAAC,KAAkC,SAA4C;AACnG,WAAO,cAAc,KAAKA,UAAS,MAAK,GAAI,IAAI;EAClD;AACF,GAvEiB,aAAA,WAAQ,CAAA,EAAA;AA8EnB,IAAWE;CAAjB,SAAiBA,QAAK;AACpB,MAAI;AAES,EAAAA,OAAA,QAAQ,MAAmB;AACtC,QAAI,UAAU,MAAM;AAClB,eAAS,QAAe,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAC5C,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAK,IAAI,UAAU,QAAQ,IAAI,OAAO,aAAa,GAAI;AACrD,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,MAAM;QACpB;AAEA,YAAK,IAAI,QAAQ,QAAQ,IAAI,KAAK,aAAa,GAAI;AACjD,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,IAAI;QAClB;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQH,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,QAAQ,MAAgB,CAAC;UACzB,MAAM,MAAgB,CAAC;;AAGzB,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,SAAS,OAAO,MAAK;AACzB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,OAAO,OAAO,MAAK;AACvB;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAG,OAAA,SAAS,CAAC,QAAmC;AACxD,WAAO,cAAc,KAAKA,OAAM,MAAK,CAAE;EACzC;AAEa,EAAAA,OAAA,SAAS,CAAC,KAAkC,SAAsC;AAC7F,WAAO,cAAc,KAAKA,OAAM,MAAK,GAAI,IAAI;EAC/C;AACF,GAhEiBA,WAAAA,SAAK,CAAA,EAAA;AAkEtB,IAAY;CAAZ,SAAYC,oBAAiB;AAC3B,EAAAA,mBAAA,WAAA,IAAA;AACA,EAAAA,mBAAA,gBAAA,IAAA;AACF,GAHY,sBAAA,oBAAiB,CAAA,EAAA;AAK7B,IAAK;CAAL,SAAKC,4BAAyB;AAC5B,EAAAA,2BAAAA,2BAAA,WAAA,IAAA,CAAA,IAAA;AACA,EAAAA,2BAAAA,2BAAA,gBAAA,IAAA,CAAA,IAAA;AACF,GAHK,8BAAA,4BAAyB,CAAA,EAAA;CAK9B,SAAiBD,oBAAiB;AACnB,EAAAA,mBAAA,QAAQ,MAA+B;AAClD,WAAO,YAA+B,yBAAyB;EACjE;AACF,GAJiB,sBAAA,oBAAiB,CAAA,EAAA;AAU5B,IAAW;CAAjB,SAAiBE,gBAAa;AAC5B,MAAI;AAES,EAAAA,eAAA,QAAQ,MAA2B;AAC9C,QAAI,UAAU,MAAM;AAClB,eAAS,QAAuB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AACpD,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAK,IAAI,OAAO,QAAQ,IAAI,IAAI,aAAa,GAAI;AAC/C,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,GAAG;QACjB;AAEA,YAAI,IAAI,QAAQ,QAAQ,0BAA0B,IAAI,IAAI,MAAM,GAAG;AACjE,YAAE,OAAO,EAAE;AACX,4BAAkB,MAAK,EAAG,OAAO,IAAI,MAAM,CAAC;QAC9C;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQN,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,KAAK,MAAgB,CAAC;UACtB,MAAM,kBAAkB;;AAG1B,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,MAAM,OAAO,MAAK;AACtB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,OAAO,kBAAkB,MAAK,EAAG,OAAO,MAAM;AAClD;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAM,eAAA,SAAS,CAAC,QAA2C;AAChE,WAAO,cAAc,KAAKA,eAAc,MAAK,CAAE;EACjD;AAEa,EAAAA,eAAA,SAAS,CAAC,KAAkC,SAAsD;AAC7G,WAAO,cAAc,KAAKA,eAAc,MAAK,GAAI,IAAI;EACvD;AACF,GAhEiB,kBAAA,gBAAa,CAAA,EAAA;AAyExB,IAAW;CAAjB,SAAiBC,iBAAc;AAC7B,MAAI;AAES,EAAAA,gBAAA,QAAQ,MAA4B;AAC/C,QAAI,UAAU,MAAM;AAClB,eAAS,QAAwB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AACrD,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAI,IAAI,YAAY,MAAM;AACxB,YAAE,OAAO,EAAE;AACX,mBAAS,MAAK,EAAG,OAAO,IAAI,UAAU,CAAC;QACzC;AAEA,YAAI,IAAI,UAAU,MAAM;AACtB,qBAAWL,UAAS,IAAI,QAAQ;AAC9B,cAAE,OAAO,EAAE;AACX,YAAAC,OAAM,MAAK,EAAG,OAAOD,QAAO,CAAC;UAC/B;QACF;AAEA,YAAI,IAAI,kBAAkB,MAAM;AAC9B,qBAAWA,UAAS,IAAI,gBAAgB;AACtC,cAAE,OAAO,EAAE;AACX,0BAAc,MAAK,EAAG,OAAOA,QAAO,CAAC;UACvC;QACF;AAEA,YAAK,IAAI,gBAAgB,QAAQ,IAAI,iBAAiB,GAAI;AACxD,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,YAAY;QAC1B;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQF,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,QAAQ,CAAA;UACR,gBAAgB,CAAA;UAChB,cAAc;;AAGhB,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,WAAW,SAAS,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;gBAC9D,QAAQ,KAAK,QAAQ;eACtB;AACD;YACF;YACA,KAAK,GAAG;AACN,kBAAI,KAAK,QAAQ,UAAU,QAAQ,IAAI,OAAO,WAAW,KAAK,OAAO,QAAQ;AAC3E,sBAAM,IAAI,eAAe,yDAAyD;cACpF;AAEA,kBAAI,OAAO,KAAKG,OAAM,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;gBAC5D,QAAQ,KAAK,QAAQ;eACtB,CAAC;AACF;YACF;YACA,KAAK,GAAG;AACN,kBAAI,KAAK,QAAQ,kBAAkB,QAAQ,IAAI,eAAe,WAAW,KAAK,OAAO,gBAAgB;AACnG,sBAAM,IAAI,eAAe,iEAAiE;cAC5F;AAEA,kBAAI,eAAe,KAAK,cAAc,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;gBAC5E,QAAQ,KAAK,QAAQ;eACtB,CAAC;AACF;YACF;YACA,KAAK,GAAG;AACN,kBAAI,eAAe,OAAO,MAAK;AAC/B;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAI,gBAAA,SAAS,CAAC,QAA4C;AACjE,WAAO,cAAc,KAAKA,gBAAe,MAAK,CAAE;EAClD;AAEa,EAAAA,gBAAA,SAAS,CAAC,KAAkC,SAAwD;AAC/G,WAAO,cAAc,KAAKA,gBAAe,MAAK,GAAI,IAAI;EACxD;AACF,GArGiB,mBAAA,iBAAc,CAAA,EAAA;;;ACzWzB,SAAU,cAAe,iBAAuC,YAAgC;AACpG,aAAW,CAAC,KAAK,KAAK,KAAK,WAAW,SAAS,QAAO,GAAI;AACxD,UAAM,gBAAgB,gBAAgB,SAAS,IAAI,GAAG;AAEtD,QAAI,iBAAiB,MAAM;AAEzB,UAAI,cAAc,WAAW,MAAM,UAAU;AAC3C,cAAM,WAAW,cAAc;MACjC;AAGA,YAAM,SAAS,MAAM,UAAU,cAAc;AAC7C,YAAM,WAAW,MAAM,YAAY,cAAc;AACjD,YAAM,eAAe,MAAM,gBAAgB,cAAc;IAC3D;AAEA,oBAAgB,SAAS,IAAI,KAAK,KAAK;EACzC;AAEA,aAAW,CAAC,KAAK,aAAa,KAAK,WAAW,eAAe,QAAO,GAAI;AAGtE,oBAAgB,eAAe,IAAI,KAAK,aAAa;EACvD;AAEA,aAAW,CAAC,KAAK,KAAK,KAAK,WAAW,OAAO,QAAO,GAAI;AACtD,oBAAgB,OAAO,IAAI,KAAK,KAAK;EACvC;AAEA,MAAI,WAAW,QAAQ,CAAC,gBAAgB,MAAM;AAC5C,oBAAgB,OAAO;EACzB;AAEA,SAAO;AACT;;;ACpCM,IAAO,qBAAP,cAAkC,MAAK;EAC3C,OAAO,OAAO;EAEd,YAAaC,WAAU,mBAAiB;AACtC,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;;;ACEK,IAAM,iBAAiB;AAC9B,IAAM,yBAAyB,iBAAiB;AAa1C,UAAY,aAAcC,UAA+B,SAAe;AAC5E,QAAM,kBAAkB,CAAC,GAAGA,SAAQ,SAAS,OAAM,CAAE;AACrD,QAAM,iBAAiB,CAAC,GAAGA,SAAQ,eAAe,OAAM,CAAE;AAC1D,QAAM,SAAS,CAAC,GAAGA,SAAQ,OAAO,OAAM,CAAE;AAE1C,MAAI,gBAAgB;AACpB,MAAI,sBAAsB;AAC1B,MAAI,cAAc;AAClB,MAAI,cAAc;AAElB,SAAO,MAAM;AACX,UAAM,aAAuC;MAC3C,UAAU;QACR,MAAMA,SAAQ,QAAQ;QACtB,SAAS,CAAA;;MAEX,gBAAgB,CAAA;MAChB,QAAQ,CAAA;MACR,cAAc;;AAGhB,QAAI,OAAO,eAAe,OAAO,UAAU,EAAE;AAE7C,QAAI,EAAE,OAAO,SAAS,QAAO,IAAK,aAAa,QAAQ,WAAW,QAAQ,aAAa,SAAS,MAAM,yBAAyB;AAE/H,mBAAe;AACf,WAAO;AACP,UAAM,iBAAiB;AAEtB,KAAC,EAAE,OAAO,SAAS,QAAO,IAAK,aAAa,gBAAgB,WAAW,gBAAgB,qBAAqB,SAAS,MAAM,iCAAiC;AAE7J,2BAAuB;AACvB,WAAO;AACP,UAAM,oBAAoB;AAEzB,KAAC,EAAE,OAAO,SAAS,QAAO,IAAK,aAAa,iBAAiB,WAAW,SAAS,SAAS,eAAe,SAAS,MAAM,iCAAiC;AAE1J,qBAAiB;AACjB,WAAO;AACP,UAAM,0BAA0B;AAEhC,kBAAc,CAAC,kBAAkB,CAAC,qBAAqB,CAAC;AAGxD,QAAI,CAAC,aAAa;AAChB,iBAAW,SAAS,OAAO;IAC7B;AAEA,UAAM,eAAe,OAAO,UAAU;AAEtC,QAAI,aAAa;AACf;IACF;EACF;AACF;AAQA,SAAS,aAAkB,OAAY,QAAaC,QAAe,SAAiB,MAAc,eAAiC;AACjI,MAAI,QAAQ;AACZ,MAAI,UAAU;AAGd,WAAS,IAAIA,QAAO,IAAI,MAAM,QAAQ,KAAK;AACzC,UAAM,OAAO,MAAM,CAAC;AACpB,UAAM,WAAW,cAAc,IAAI;AAEnC,QAAI,WAAW,wBAAwB;AACrC,YAAM,IAAI,mBAAmB,qEAAqE;IACpG;AAEA,UAAM,UAAU,OAAO;AAEvB,QAAI,UAAU,SAAS;AACrB,gBAAU;AACV;IACF;AAEA,WAAO,KAAK,IAAI;AAChB;AACA,WAAO;EACT;AAEA,SAAO,EAAE,SAAS,OAAO,SAAS,KAAI;AACxC;AAEA,SAAS,0BAA2B,OAAY;AAE9C,SAAO,gBAAgB,GAAGC,OAAM,OAAO,KAAK,CAAC;AAC/C;AAEA,SAAS,kCAAmC,eAA4B;AAEtE,SAAO,gBAAgB,GAAG,cAAc,OAAO,aAAa,CAAC;AAC/D;AAEA,SAAS,kCAAmC,OAAoB;AAE9D,SAAO,gBAAgB,GAAG,cAAc,OAAO,KAAK,CAAC;AACvD;AAEA,SAAS,gBAAiB,aAAqB,MAAgB;AAC7D,QAAM,oBAAoB,eAAe,WAAW;AACpD,QAAM,mBAAmB,eAAe,KAAK,UAAU;AAEvD,SAAO,oBAAoB,mBAAmB,KAAK;AACrD;;;AC5DM,IAAO,UAAP,cAAuB,kBAAgC;EAC1C;EACA;EACA;EACA;EACT;EACS;EACA;EACA;EACT;EACS;EACA;EACA;EACA;EACA;EAEjB,YAAa,YAA+B,OAAoB,CAAA,GAAE;AAChE,UAAK;AAEL,SAAK,MAAM,WAAW,OAAO,aAAa,uBAAuB;AACjE,SAAK,SAAS,WAAW;AACzB,SAAK,UAAU,WAAW;AAC1B,SAAK,YAAY,KAAK,aAAa,CAAC,WAAW;AAC/C,SAAK,eAAe,CAAA;AACpB,SAAK,UAAU;AAGf,SAAK,YAAY,KAAK,UAAU,KAAK,IAAI;AACzC,SAAK,oBAAoB,KAAK,qBAAqB;AACnD,SAAK,qBAAqB,KAAK,sBAAsB;AACrD,SAAK,wBAAwB,KAAK,yBAAyB;AAC3D,SAAK,0BAA0B,KAAK,2BAA2B;AAC/D,SAAK,yBAAyB,KAAK,0BAA0B;AAC7D,SAAK,yBAAyB,KAAK,0BAA0B,KAAK,0BAA0B;AAC5F,SAAK,UAAU;MACb,YAAY,WAAW,SAAS,gBAAgB,iCAAiC;MACjF,UAAU,WAAW,SAAS,gBAAgB,qCAAqC;;AAGrF,SAAK,YAAY,IAAI,UAAU;MAC7B,aAAa,KAAK,0BAA0B;MAC5C,SAAS,WAAW;MACpB,YAAY;KACb;AACD,SAAK,UAAU,iBAAiB,SAAS,CAAC,QAAO;AAC/C,WAAK,IAAI,MAAM,kCAAkC,IAAI,MAAM;IAC7D,CAAC;EACH;EAEA,MAAM,QAAK;AACT,QAAI,KAAK,SAAS;AAChB;IACF;AAEA,SAAK,UAAU;AAEf,UAAM,KAAK,OAAO,OAAO,KAAK,WAAW,KAAK,WAAW;MACvD,mBAAmB,KAAK;MACxB,oBAAoB,KAAK;MACzB,wBAAwB,KAAK;KAC9B;AAGD,UAAM,WAAqB;MACzB,WAAW,CAACC,YAAkB;AAC5B,aAAK,kBAAkB,kBAAkB;UACvC,QAAQA;SACT;MACH;MACA,cAAc,CAACA,YAAkB;AAC/B,aAAK,kBAAkB,qBAAqB;UAC1C,QAAQA;SACT;MACH;;AAGF,SAAK,eAAe,CAAA;AAEpB,eAAW,YAAY,KAAK,WAAW;AACrC,WAAK,aAAa,KAAK,MAAM,KAAK,OAAO,SAAS,UAAU,QAAQ,CAAC;IACvE;AAGA,SAAK,OAAO,eAAc,EAAG,QAAQ,UAAO;AAC1C,WAAK,kBAAkB,kBAAkB;QACvC,QAAQ,KAAK;OACd;IACH,CAAC;EACH;EAEA,MAAM,OAAI;AACR,SAAK,UAAU;AAGf,UAAM,KAAK,OAAO,SAAS,KAAK,SAAS;AAGzC,QAAI,KAAK,gBAAgB,MAAM;AAC7B,iBAAW,MAAM,KAAK,cAAc;AAClC,aAAK,OAAO,WAAW,EAAE;MAC3B;AAEA,WAAK,eAAe,CAAA;IACtB;EACF;;;;EAKA,UAAW,MAAwB;AACjC,QAAI,CAAC,KAAK,SAAS;AACjB;IACF;AAEA,UAAM,EAAE,QAAQ,WAAU,IAAK;AAE/B,YAAQ,QAAO,EAAG,KAAK,YAAW;AAChC,WAAK,IAAI,0CAA0C,OAAO,UAAU,WAAW,UAAU;AACzF,YAAM,gBAAgB,MAAW;AAC/B,YAAI,OAAO,WAAW,QAAQ;AAC5B,iBAAO,MAAM,IAAI,aAAa,2CAA2C,KAAK,qBAAqB,IAAI,CAAC;QAC1G,OAAO;AACL,eAAK,IAAI,iCAAiC,OAAO,MAAM;QACzD;MACF;AAEA,UAAI,SAAS,YAAY,QAAQ,KAAK,qBAAqB;AAC3D,sBAAgB,UAAU,MAAM;AAChC,aAAO,iBAAiB,SAAS,aAAa;AAE9C,YAAM,OAAO,WAAU;AAEvB,YAAM,KACJ,QACA,CAAC,WAAcC,QAAO,QAAQ;QAC5B,eAAe,KAAK;OACrB,GACD,OAAO,WAAU;AACf,yBAAiB,QAAQ,QAAQ;AAC/B,cAAI;AACF,kBAAMC,WAAU,eAAe,OAAO,IAAI;AAC1C,iBAAK,IAAI,qDAAqD,OAAO,UAAU,WAAW,YAAY,OAAO,EAAE;AAE/G,iBAAK,kBAAkB,mBAAmB;cACxC,QAAQ;gBACN,MAAM,WAAW;gBACjB,SAAAA;;aAEH;AAGD,mBAAO,oBAAoB,SAAS,aAAa;AACjD,qBAAS,YAAY,QAAQ,KAAK,qBAAqB;AACvD,4BAAgB,UAAU,MAAM;AAChC,mBAAO,iBAAiB,SAAS,aAAa;UAChD,SAAS,KAAU;AACjB,iBAAK,IAAI,MAAM,4DAA4D,WAAW,YAAY,OAAO,IAAI,GAAG;AAChH,mBAAO,MAAM,GAAG;AAChB;UACF;QACF;MACF,CAAC;IAEL,CAAC,EACE,MAAM,SAAM;AACX,WAAK,IAAI,MAAM,0CAA0C,WAAW,YAAY,GAAG;AACnF,aAAO,MAAM,GAAG;IAClB,CAAC;EACL;;;;EAKA,OAAQ,cAAe,KAAUC,UAA0E;AACzG,IAAAA,UAAS,aAAa,IAAI,oBAAyB,kCAAkC,GAAG,CAAC;AAEzF,qBAAiB,YAAY,KAAK,QAAQ,cAAc,KAAKA,QAAO,GAAG;AAErE,YAAM,WAAW,MAAM,KAAK,OAAO,WAAW,SAAS,YAAY;QACjE,wBAAwB,KAAK;OAC9B;AAED,UAAI,CAAC,UAAU;AACb;MACF;AAEA,YAAM;IACR;EACF;;;;EAKA,MAAM,eAAgB,KAAUA,UAAqB;AAEnD,QAAIA,UAAS,aAAa,MAAM;AAC9B,YAAM,QAAQ,IACZA,SAAQ,UAAU,IAAI,OAAM,SAAQ,KAAK,UAAU,IAAI,EACpD,MAAM,SAAM;AACX,aAAK,IAAI,MAAM,+CAA+C,GAAG;MACnE,CAAC,CAAC,CAAC;IAET;AAGA,UAAM,YACJC,aACEA,aAAK,KAAK,cAAc,KAAKD,QAAO,GAAGA,UAAS,gBAAgB,iCAAiC,GACjG,OAAM,aAAY,KAAK,UAAU,SAAS,IAAIA,QAAO,CAAC,CACvD,EAEA,MAAM,SAAM;AACX,WAAK,IAAI,MAAM,GAAG;IACpB,CAAC;EACL;;;;;EAMA,MAAM,YAAaH,SAAgBE,UAA+BC,UAA0E;AAC1I,QAAI,CAAC,KAAK,SAAS;AACjB,YAAM,IAAI,MAAM,uBAAwB;IAC1C;AAEA,UAAM,cAAc,KAAK,UAAU,MAAM,KAAK,SAAM;AAClD,aAAOH,QAAO,OAAO,IAAI,QAAQ,MAAM,KAAK,IAAI,WAAW;IAC7D,CAAC;AAED,QAAI,eAAe,MAAM;AACvB,kBAAY,QAAQ,UAAU,cAAc,YAAY,QAAQ,SAASE,QAAO;AAEhF,YAAM,YAAY,KAAK;QACrB,QAAQC,UAAS;OAClB;AAED;IACF;AAEA,UAAM,KAAK,UAAU,IAAI,OAAOA,aAAW;AACzC,YAAMD,WAAUC,UAAS;AAEzB,UAAID,YAAW,MAAM;AACnB,cAAM,IAAI,uBAAuB,oBAAoB;MACvD;AAEA,WAAK,IAAI,qBAAqBF,OAAM;AAEpC,MAAAG,UAAS,aAAa,IAAI,oBAA4B,iCAAiCH,OAAM,CAAC;AAE9F,YAAM,SAAS,MAAM,KAAK,OAAO,aAAaA,SAAQ,aAAaG,QAAO;AAC1E,YAAM,OAAO,UAAS;AAEtB,UAAI;AACF,cAAM,KACJ,aAAaD,UAAS,KAAK,sBAAsB,GACjD,CAAC,WAAcG,QAAO,MAAM,GAC5B,MAAM;AAGR,cAAM,OAAO,MAAMF,QAAO;MAC5B,SAAS,KAAU;AACjB,QAAAA,UAAS,aAAa,IAAI,oBAAoD,uCAAuC,EAAE,MAAMH,SAAQ,OAAO,IAAG,CAAE,CAAC;AAClJ,aAAK,IAAI,MAAM,+BAA+BA,SAAQ,GAAG;AACzD,eAAO,MAAM,GAAG;MAClB;AAEA,WAAK,iBAAiBE,SAAQ,MAAM;IACtC,GAAG;MACD,QAAAF;MACA,QAAQG,UAAS;MACjB,SAAAD;KACD;EACH;;;;EAKA,MAAM,UAAW,MAAwCC,UAAsE;AAC7H,QAAI,CAAC,KAAK,SAAS;AACjB,YAAM,IAAI,gBAAgB,uBAAwB;IACpD;AAEA,IAAAA,UAAS,aAAa,IAAI,oBAAsD,wBAAwB,IAAI,CAAC;AAK7G,UAAM,CACJ,UAAU,IACR,MAAM,QAAQ,IAAI;MACpB,KAAK,OAAO,KAAK,MAAMA,QAAO;MAC9B,UAAU,KAAK,QAAQ,iBAAiBA,UAAS,QAAQ;QACvD,QAAQ,CAAC,QAA6C;AACpD,cAAI,CAAC,IAAI,OAAO,OAAO,OAAO,IAAI,GAAG;AACnC,mBAAO;UACT;AAEA,cAAI,IAAI,OAAO,UAAU,SAAS,WAAW,GAAG;AAC9C,mBAAO;UACT;AAEA,gBAAM,IAAI,yBAAyB,GAAG,IAAI,oBAAoB,WAAW,EAAE;QAC7E;OACD;KACF;AAED,WAAO;EACT;EAEA,iBAAkB,QAA0B;AAC1C,QAAI,QAAQ;AAEZ,eAAW,SAAS,OAAO,OAAM,GAAI;AACnC,eAAS,MAAM,KAAK;IACtB;AAEA,SAAK,QAAQ,UAAU,UAAU,KAAK;AACtC,SAAK,QAAQ,YAAY,UAAU,OAAO,IAAI;EAChD;;;;ACvYK,IAAMG,SAAQ,IAAI,WAAW,CAAC;AAW/B,SAAUC,QAAQ,IAAgB,IAAc;AACpD,MAAI,OAAO,IAAI;AAAE,WAAO;EAAK;AAC7B,MAAI,GAAG,eAAe,GAAG,YAAY;AACnC,WAAO;EACT;AAEA,WAAS,KAAK,GAAG,KAAK,GAAG,YAAY,MAAM;AACzC,QAAI,GAAG,EAAE,MAAM,GAAG,EAAE,GAAG;AACrB,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEM,SAAUC,QAAQ,GAA6C;AACnE,MAAI,aAAa,cAAc,EAAE,YAAY,SAAS,cAAc;AAAE,WAAO;EAAE;AAC/E,MAAI,aAAa,aAAa;AAAE,WAAO,IAAI,WAAW,CAAC;EAAE;AACzD,MAAI,YAAY,OAAO,CAAC,GAAG;AACzB,WAAO,IAAI,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU;EAC5D;AACA,QAAM,IAAI,MAAM,mCAAmC;AACrD;;;ACvBA,SAASC,MAAM,UAAUC,OAAI;AAC3B,MAAI,SAAS,UAAU,KAAK;AAAE,UAAM,IAAI,UAAU,mBAAmB;EAAE;AACvE,MAAI,WAAW,IAAI,WAAW,GAAG;AACjC,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,aAAS,CAAC,IAAI;EAChB;AACA,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,QAAI,IAAI,SAAS,OAAO,CAAC;AACzB,QAAI,KAAK,EAAE,WAAW,CAAC;AACvB,QAAI,SAAS,EAAE,MAAM,KAAK;AAAE,YAAM,IAAI,UAAU,IAAI,eAAe;IAAE;AACrE,aAAS,EAAE,IAAI;EACjB;AACA,MAAI,OAAO,SAAS;AACpB,MAAI,SAAS,SAAS,OAAO,CAAC;AAC9B,MAAI,SAAS,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,GAAG;AAC1C,MAAI,UAAU,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI;AAI3C,WAASC,SAAQ,QAAM;AAErB,QAAI,kBAAkB;AAAY;aAAW,YAAY,OAAO,MAAM,GAAG;AACvE,eAAS,IAAI,WAAW,OAAO,QAAQ,OAAO,YAAY,OAAO,UAAU;IAC7E,WAAW,MAAM,QAAQ,MAAM,GAAG;AAChC,eAAS,WAAW,KAAK,MAAM;IACjC;AACA,QAAI,EAAE,kBAAkB,aAAa;AAAE,YAAM,IAAI,UAAU,qBAAqB;IAAE;AAClF,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO;IAAG;AAErC,QAAI,SAAS;AACb,QAAIC,WAAS;AACb,QAAI,SAAS;AACb,QAAI,OAAO,OAAO;AAClB,WAAO,WAAW,QAAQ,OAAO,MAAM,MAAM,GAAG;AAC9C;AACA;IACF;AAEA,QAAI,QAAS,OAAO,UAAU,UAAU,MAAO;AAC/C,QAAI,MAAM,IAAI,WAAW,IAAI;AAE7B,WAAO,WAAW,MAAM;AACtB,UAAI,QAAQ,OAAO,MAAM;AAEzB,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,MAAM,IAAI,GAAG,MAAO;AAC9B,YAAI,GAAG,IAAK,QAAQ,SAAU;AAC9B,gBAAS,QAAQ,SAAU;MAC7B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,IAAI,GAAG,MAAM,GAAG;AACrC;IACF;AAEA,QAAI,MAAM,OAAO,OAAO,MAAM;AAC9B,WAAO,MAAM,MAAM,EAAE,KAAK;AAAE,aAAO,SAAS,OAAO,IAAI,GAAG,CAAC;IAAG;AAC9D,WAAO;EACT;AAIA,WAAS,aAAc,QAAM;AAC3B,QAAI,OAAO,WAAW,UAAU;AAAE,YAAM,IAAI,UAAU,iBAAiB;IAAE;AACzE,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO,IAAI,WAAU;IAAG;AACnD,QAAI,MAAM;AAEV,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,SAAS;AACb,QAAIA,WAAS;AACb,WAAO,OAAO,GAAG,MAAM,QAAQ;AAC7B;AACA;IACF;AAEA,QAAI,QAAU,OAAO,SAAS,OAAO,SAAU,MAAO;AACtD,QAAI,OAAO,IAAI,WAAW,IAAI;AAE9B,WAAO,OAAO,GAAG,GAAG;AAElB,UAAI,QAAQ,SAAS,OAAO,WAAW,GAAG,CAAC;AAE3C,UAAI,UAAU,KAAK;AAAE;MAAO;AAC5B,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,OAAO,KAAK,GAAG,MAAO;AAChC,aAAK,GAAG,IAAK,QAAQ,QAAS;AAC9B,gBAAS,QAAQ,QAAS;MAC5B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,KAAK,GAAG,MAAM,GAAG;AACtC;IACF;AACA,QAAI,MAAM,IAAI,WAAW,UAAU,OAAO,IAAI;AAC9C,QAAIE,KAAI;AACR,WAAO,QAAQ,MAAM;AACnB,UAAIA,IAAG,IAAI,KAAK,KAAK;IACvB;AACA,WAAO;EACT;AAIA,WAASC,SAAQC,SAAM;AACrB,QAAI,SAAS,aAAaA,OAAM;AAChC,QAAI,QAAQ;AAAE,aAAO;IAAO;AAC5B,UAAM,IAAI,MAAM,OAAON,KAAI,YAAY;EACzC;AACA,SAAO;IACL,QAAQC;IACR;IACA,QAAQI;;AAEZ;AACA,IAAIE,OAAMR;AAEV,IAAIS,mCAAkCD;AAEtC,IAAAE,kBAAeD;;;ACjIf,IAAME,WAAN,MAAa;EACF;EACA;EACA;EAET,YAAaC,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;EACpB;EAEA,OAAQ,OAAiB;AACvB,QAAI,iBAAiB,YAAY;AAC/B,aAAO,GAAG,KAAK,MAAM,GAAG,KAAK,WAAW,KAAK,CAAC;IAChD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;;AAQF,IAAMC,WAAN,MAAa;EACF;EACA;EACA;EACQ;EAEjB,YAAaD,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,UAAM,kBAAkB,OAAO,YAAY,CAAC;AAE5C,QAAI,oBAAoB,QAAW;AACjC,YAAM,IAAI,MAAM,0BAA0B;IAC5C;AACA,SAAK,kBAAkB;AACvB,SAAK,aAAa;EACpB;EAEA,OAAQ,MAAY;AAClB,QAAI,OAAO,SAAS,UAAU;AAC5B,UAAI,KAAK,YAAY,CAAC,MAAM,KAAK,iBAAiB;AAChD,cAAM,MAAM,qCAAqC,KAAK,UAAU,IAAI,CAAC,KAAK,KAAK,IAAI,+CAA+C,KAAK,MAAM,EAAE;MACjJ;AACA,aAAO,KAAK,WAAW,KAAK,MAAM,KAAK,OAAO,MAAM,CAAC;IACvD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;EAEA,GAAgC,SAAmE;AACjG,WAAOE,IAAG,MAAM,OAAO;EACzB;;AAKF,IAAMC,mBAAN,MAAqB;EACV;EAET,YAAa,UAA0B;AACrC,SAAK,WAAW;EAClB;EAEA,GAAiC,SAAmE;AAClG,WAAOD,IAAG,MAAM,OAAO;EACzB;EAEA,OAAQ,OAAa;AACnB,UAAM,SAAS,MAAM,CAAC;AACtB,UAAM,UAAU,KAAK,SAAS,MAAM;AACpC,QAAI,WAAW,MAAM;AACnB,aAAO,QAAQ,OAAO,KAAK;IAC7B,OAAO;AACL,YAAM,WAAW,qCAAqC,KAAK,UAAU,KAAK,CAAC,+BAA+B,OAAO,KAAK,KAAK,QAAQ,CAAC,gBAAgB;IACtJ;EACF;;AAGI,SAAUA,IAAyC,MAA+C,OAA8C;AACpJ,SAAO,IAAIC,iBAAgB;IACzB,GAAI,KAAK,YAAY,EAAE,CAAE,KAA2B,MAAM,GAAG,KAAI;IACjE,GAAI,MAAM,YAAY,EAAE,CAAE,MAA4B,MAAM,GAAG,MAAK;GAClD;AACtB;AAEM,IAAOC,SAAP,MAAY;EACP;EACA;EACA;EACA;EACA;EACA;EAET,YAAaJ,OAAY,QAAgB,YAAsB,YAAoB;AACjF,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,UAAU,IAAID,SAAQC,OAAM,QAAQ,UAAU;AACnD,SAAK,UAAU,IAAIC,SAAQD,OAAM,QAAQ,UAAU;EACrD;EAEA,OAAQ,OAAiB;AACvB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;EAEA,OAAQ,OAAa;AACnB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;;AAGI,SAAUK,MAAmD,EAAE,MAAAL,OAAM,QAAQ,QAAAM,UAAQ,QAAAC,SAAM,GAAsE;AACrK,SAAO,IAAIH,OAAMJ,OAAM,QAAQM,UAAQC,QAAM;AAC/C;AAEM,SAAUC,OAAoD,EAAE,MAAAR,OAAM,QAAQ,UAAAS,UAAQ,GAAoD;AAC9I,QAAM,EAAE,QAAAH,UAAQ,QAAAC,SAAM,IAAKG,gBAAMD,WAAUT,KAAI;AAC/C,SAAOK,MAAK;IACV;IACA,MAAAL;IACA,QAAAM;IACA,QAAQ,CAAC,SAA6BK,QAAOJ,SAAO,IAAI,CAAC;GAC1D;AACH;AAEA,SAASA,SAAQK,SAAgB,aAAqC,aAAqBZ,OAAY;AAErG,MAAI,MAAMY,QAAO;AACjB,SAAOA,QAAO,MAAM,CAAC,MAAM,KAAK;AAC9B,MAAE;EACJ;AAGA,QAAM,MAAM,IAAI,WAAY,MAAM,cAAc,IAAK,CAAC;AAGtD,MAAI,OAAO;AACX,MAAI,SAAS;AACb,MAAI,UAAU;AACd,WAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAE5B,UAAMC,SAAQ,YAAYD,QAAO,CAAC,CAAC;AACnC,QAAIC,WAAU,QAAW;AACvB,YAAM,IAAI,YAAY,OAAOb,KAAI,YAAY;IAC/C;AAGA,aAAU,UAAU,cAAea;AACnC,YAAQ;AAGR,QAAI,QAAQ,GAAG;AACb,cAAQ;AACR,UAAI,SAAS,IAAI,MAAQ,UAAU;IACrC;EACF;AAGA,MAAI,QAAQ,gBAAgB,MAAQ,UAAW,IAAI,UAAY,GAAG;AAChE,UAAM,IAAI,YAAY,wBAAwB;EAChD;AAEA,SAAO;AACT;AAEA,SAASP,QAAQ,MAAkBG,WAAkB,aAAmB;AACtE,QAAM,MAAMA,UAASA,UAAS,SAAS,CAAC,MAAM;AAC9C,QAAM,QAAQ,KAAK,eAAe;AAClC,MAAI,MAAM;AAEV,MAAI,OAAO;AACX,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAEpC,aAAU,UAAU,IAAK,KAAK,CAAC;AAC/B,YAAQ;AAGR,WAAO,OAAO,aAAa;AACzB,cAAQ;AACR,aAAOA,UAAS,OAAQ,UAAU,IAAK;IACzC;EACF;AAGA,MAAI,SAAS,GAAG;AACd,WAAOA,UAAS,OAAQ,UAAW,cAAc,IAAM;EACzD;AAGA,MAAI,KAAK;AACP,YAAS,IAAI,SAAS,cAAe,OAAO,GAAG;AAC7C,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEA,SAASK,mBAAmBL,WAAgB;AAE1C,QAAM,cAAsC,CAAA;AAC5C,WAAS,IAAI,GAAG,IAAIA,UAAS,QAAQ,EAAE,GAAG;AACxC,gBAAYA,UAAS,CAAC,CAAC,IAAI;EAC7B;AACA,SAAO;AACT;AAKM,SAAUM,SAAsD,EAAE,MAAAf,OAAM,QAAQ,aAAa,UAAAS,UAAQ,GAAyE;AAClL,QAAM,cAAcK,mBAAkBL,SAAQ;AAC9C,SAAOJ,MAAK;IACV;IACA,MAAAL;IACA,OAAQ,OAAiB;AACvB,aAAOM,QAAO,OAAOG,WAAU,WAAW;IAC5C;IACA,OAAQ,OAAa;AACnB,aAAOF,SAAO,OAAO,aAAa,aAAaP,KAAI;IACrD;GACD;AACH;;;AC9OO,IAAMgB,aAAYC,OAAM;EAC7B,MAAM;EACN,QAAQ;EACR,UAAU;CACX;AAEM,IAAMC,gBAAeD,OAAM;EAChC,MAAM;EACN,QAAQ;EACR,UAAU;CACX;;;ACVM,IAAME,UAASC,SAAQ;EAC5B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMC,eAAcD,SAAQ;EACjC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAME,aAAYF,SAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMG,kBAAiBH,SAAQ;EACpC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMI,aAAYJ,SAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMK,kBAAiBL,SAAQ;EACpC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMM,gBAAeN,SAAQ;EAClC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMO,qBAAoBP,SAAQ;EACvC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMQ,WAAUR,SAAQ;EAC7B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;;;AC7DM,IAAMS,UAASC,OAAM;EAC1B,QAAQ;EACR,MAAM;EACN,UAAU;CACX;AAEM,IAAMC,eAAcD,OAAM;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;CACX;;;ACXD,IAAIE,YAAWC;AAEf,IAAIC,OAAM;AAAV,IACIC,QAAO;AADX,IAEIC,UAAS,CAACD;AAFd,IAGIE,OAAM,KAAK,IAAI,GAAG,EAAE;AAOxB,SAASJ,SAAO,KAAK,KAAK,QAAM;AAC9B,QAAM,OAAO,CAAA;AACb,WAAS,UAAU;AACnB,MAAI,YAAY;AAEhB,SAAM,OAAOI,MAAK;AAChB,QAAI,QAAQ,IAAK,MAAM,MAAQH;AAC/B,WAAO;EACT;AACA,SAAM,MAAME,SAAQ;AAClB,QAAI,QAAQ,IAAK,MAAM,MAAQF;AAC/B,aAAS;EACX;AACA,MAAI,MAAM,IAAI,MAAM;AAGpB,EAAAD,SAAO,QAAQ,SAAS,YAAY;AAEpC,SAAO;AACT;AAEA,IAAIK,WAASC;AAEb,IAAIC,SAAQ;AAAZ,IACIC,UAAS;AAMb,SAASF,MAAK,KAAK,QAAM;AACvB,MAAI,MAAS,GACT,SAAS,UAAU,GACnB,QAAS,GACT,UAAU,QACV,GACA,IAAI,IAAI;AAEZ,KAAG;AACD,QAAI,WAAW,GAAG;AAEhB,MAAAA,MAAK,QAAQ;AACb,YAAM,IAAI,WAAW,yBAAyB;IAChD;AACA,QAAI,IAAI,SAAS;AACjB,WAAO,QAAQ,MACV,IAAIE,YAAW,SACf,IAAIA,WAAU,KAAK,IAAI,GAAG,KAAK;AACpC,aAAS;EACX,SAAS,KAAKD;AAGd,EAAAD,MAAK,QAAQ,UAAU;AAEvB,SAAO;AACT;AAEA,IAAIG,MAAK,KAAK,IAAI,GAAI,CAAC;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AAEvB,IAAIC,UAAS,SAAgCC,QAAK;AAChD,SACEA,SAAQV,MAAK,IACbU,SAAQT,MAAK,IACbS,SAAQR,MAAK,IACbQ,SAAQP,MAAK,IACbO,SAAQN,MAAK,IACbM,SAAQL,MAAK,IACbK,SAAQJ,MAAK,IACbI,SAAQH,MAAK,IACbG,SAAQF,MAAK,IACA;AAEjB;AAEA,IAAIG,UAAS;EACT,QAAQrB;EACR,QAAQM;EACR,gBAAgBa;;AAGpB,IAAIG,gBAAeD;AAEnB,IAAAE,kBAAeD;;;ACrGT,SAAUE,SAAQ,MAAkB,SAAS,GAAC;AAClD,QAAMC,SAAOC,gBAAO,OAAO,MAAM,MAAM;AACvC,SAAO,CAACD,QAAMC,gBAAO,OAAO,KAAK;AACnC;AAEM,SAAUC,UAAU,KAAa,QAAoB,SAAS,GAAC;AACnE,EAAAD,gBAAO,OAAO,KAAK,QAAQ,MAAM;AACjC,SAAO;AACT;AAEM,SAAUE,gBAAgB,KAAW;AACzC,SAAOF,gBAAO,eAAe,GAAG;AAClC;;;ACPM,SAAUG,QAA8BC,QAAYC,SAAkB;AAC1E,QAAM,OAAOA,QAAO;AACpB,QAAM,aAAoBC,gBAAeF,MAAI;AAC7C,QAAM,eAAe,aAAoBE,gBAAe,IAAI;AAE5D,QAAM,QAAQ,IAAI,WAAW,eAAe,IAAI;AAChD,EAAOC,UAASH,QAAM,OAAO,CAAC;AAC9B,EAAOG,UAAS,MAAM,OAAO,UAAU;AACvC,QAAM,IAAIF,SAAQ,YAAY;AAE9B,SAAO,IAAIG,QAAOJ,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAKM,SAAUI,SAAQ,WAAqB;AAC3C,QAAM,QAAQC,QAAO,SAAS;AAC9B,QAAM,CAACN,QAAM,UAAU,IAAWK,SAAO,KAAK;AAC9C,QAAM,CAAC,MAAM,YAAY,IAAWA,SAAO,MAAM,SAAS,UAAU,CAAC;AACrE,QAAMJ,UAAS,MAAM,SAAS,aAAa,YAAY;AAEvD,MAAIA,QAAO,eAAe,MAAM;AAC9B,UAAM,IAAI,MAAM,kBAAkB;EACpC;AAEA,SAAO,IAAIG,QAAOJ,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAEM,SAAUM,QAAQ,GAAoB,GAAU;AACpD,MAAI,MAAM,GAAG;AACX,WAAO;EACT,OAAO;AACL,UAAM,OAAO;AAEb,WACE,EAAE,SAAS,KAAK,QAChB,EAAE,SAAS,KAAK,QAChB,KAAK,iBAAiB,cACtBA,QAAW,EAAE,OAAO,KAAK,KAAK;EAElC;AACF;AAMM,IAAOH,UAAP,MAAa;EACR;EACA;EACA;EACA;;;;EAKT,YAAaJ,QAAY,MAAYC,SAAoB,OAAiB;AACxE,SAAK,OAAOD;AACZ,SAAK,OAAO;AACZ,SAAK,SAASC;AACd,SAAK,QAAQ;EACf;;;;AC1DI,SAAUO,QAA0F,MAASC,QAAmC;AACpJ,QAAM,EAAE,OAAO,SAAAC,SAAO,IAAK;AAC3B,UAAQA,UAAS;IACf,KAAK;AACH,aAAOC,YACL,OACAC,WAAU,IAAI,GACdH,UAAqCI,WAAU,OAAO;IAE1D;AACE,aAAOC,YACL,OACAF,WAAU,IAAI,GACbH,UAAQM,QAAO,OAAwC;EAE9D;AACF;AAYA,IAAMC,SAAQ,oBAAI,QAAO;AAEzB,SAASC,WAAW,KAAoB;AACtC,QAAMA,cAAYD,OAAM,IAAI,GAAG;AAC/B,MAAIC,eAAa,MAAM;AACrB,UAAMA,cAAY,oBAAI,IAAG;AACzB,IAAAD,OAAM,IAAI,KAAKC,WAAS;AACxB,WAAOA;EACT;AACA,SAAOA;AACT;AAEM,IAAOC,OAAP,MAAO,KAAG;EACL;EACA;EACA;EACA;EACA;;;;;;EAOT,YAAaC,UAAkBC,QAAc,WAAqC,OAAiB;AACjG,SAAK,OAAOA;AACZ,SAAK,UAAUD;AACf,SAAK,YAAY;AACjB,SAAK,QAAQ;AAIb,SAAK,GAAG,IAAI;EACd;;;;;;;EAQA,IAAI,QAAK;AACP,WAAO;EACT;;EAGA,IAAI,aAAU;AACZ,WAAO,KAAK,MAAM;EACpB;;EAGA,IAAI,aAAU;AACZ,WAAO,KAAK,MAAM;EACpB;EAEA,OAAI;AACF,YAAQ,KAAK,SAAS;MACpB,KAAK,GAAG;AACN,eAAO;MACT;MACA,KAAK,GAAG;AACN,cAAM,EAAE,MAAAC,QAAM,UAAS,IAAK;AAE5B,YAAIA,WAASC,cAAa;AACxB,gBAAM,IAAI,MAAM,0CAA0C;QAC5D;AAGA,YAAI,UAAU,SAASC,eAAc;AACnC,gBAAM,IAAI,MAAM,oDAAoD;QACtE;AAEA,eACE,KAAI,SACF,SAA6C;MAGnD;MACA,SAAS;AACP,cAAM,MACJ,+BAA+B,KAAK,OAAO,4CAA4C;MAE3F;IACF;EACF;EAEA,OAAI;AACF,YAAQ,KAAK,SAAS;MACpB,KAAK,GAAG;AACN,cAAM,EAAE,MAAAF,QAAM,QAAAG,QAAM,IAAK,KAAK;AAC9B,cAAM,YAAmBC,QAAOJ,QAAMG,OAAM;AAC5C,eACE,KAAI,SAAS,KAAK,MAAM,SAAS;MAErC;MACA,KAAK,GAAG;AACN,eAAO;MACT;MACA,SAAS;AACP,cAAM,MACJ,+BAA+B,KAAK,OAAO,4CAA4C;MAE3F;IACF;EACF;EAEA,OAAQ,OAAc;AACpB,WAAO,KAAI,OAAO,MAAM,KAAK;EAC/B;EAEA,OAAO,OAAsFE,OAA4C,OAAc;AACrJ,UAAM,UAAU;AAChB,WACE,WAAW,QACXA,MAAK,SAAS,QAAQ,QACtBA,MAAK,YAAY,QAAQ,WAClBC,QAAOD,MAAK,WAAW,QAAQ,SAAS;EAEnD;EAEA,SAAUE,QAAmC;AAC3C,WAAOC,QAAO,MAAMD,MAAI;EAC1B;EAEA,SAAM;AACJ,WAAO,EAAE,KAAKC,QAAO,IAAI,EAAC;EAC5B;EAEA,OAAI;AACF,WAAO;EACT;EAES,CAAC,OAAO,WAAW,IAAI;;EAIhC,CAAC,OAAO,IAAI,4BAA4B,CAAC,IAAC;AACxC,WAAO,OAAO,KAAK,SAAQ,CAAE;EAC/B;;;;;;;;;;;EAYA,OAAO,MAAwF,OAA+C;AAC5I,QAAI,SAAS,MAAM;AACjB,aAAO;IACT;AAEA,UAAMC,SAAQ;AACd,QAAIA,kBAAiB,MAAK;AAExB,aAAOA;IACT,WAAYA,OAAM,GAAG,KAAK,QAAQA,OAAM,GAAG,MAAMA,OAAM,SAAUA,OAAM,UAAUA,QAAO;AAMtF,YAAM,EAAE,SAAAV,UAAS,MAAAC,QAAM,WAAW,MAAK,IAAKS;AAC5C,aAAO,IAAI,KACTV,UACAC,QACA,WACA,SAASU,WAAUX,UAASC,QAAM,UAAU,KAAK,CAAC;IAEtD,WAAWS,OAAME,UAAS,MAAM,MAAM;AAIpC,YAAM,EAAE,SAAAZ,UAAS,WAAW,MAAAC,OAAI,IAAKS;AACrC,YAAMN,UAAgBS,SAAO,SAAS;AACtC,aAAO,KAAI,OAAOb,UAASC,QAAMG,OAAM;IACzC,OAAO;AAGL,aAAO;IACT;EACF;;;;;;EAOA,OAAO,OAAsFJ,UAAkBC,QAAcG,SAAgC;AAC3J,QAAI,OAAOH,WAAS,UAAU;AAC5B,YAAM,IAAI,MAAM,uCAAuC;IACzD;AAEA,QAAI,EAAEG,QAAO,iBAAiB,aAAa;AACzC,YAAM,IAAI,MAAM,gBAAgB;IAClC;AAEA,YAAQJ,UAAS;MACf,KAAK,GAAG;AACN,YAAIC,WAASC,cAAa;AACxB,gBAAM,IAAI,MACR,wCAAwCA,YAAW,kBAAkB;QAEzE,OAAO;AACL,iBAAO,IAAI,KAAIF,UAASC,QAAMG,SAAQA,QAAO,KAAK;QACpD;MACF;MACA,KAAK,GAAG;AACN,cAAM,QAAQO,WAAUX,UAASC,QAAMG,QAAO,KAAK;AACnD,eAAO,IAAI,KAAIJ,UAASC,QAAMG,SAAQ,KAAK;MAC7C;MACA,SAAS;AACP,cAAM,IAAI,MAAM,iBAAiB;MACnC;IACF;EACF;;;;EAKA,OAAO,SAAuBA,SAAgD;AAC5E,WAAO,KAAI,OAAO,GAAGF,cAAaE,OAAM;EAC1C;;;;;;;EAQA,OAAO,SAAyDH,QAAYG,SAAgC;AAC1G,WAAO,KAAI,OAAO,GAAGH,QAAMG,OAAM;EACnC;;;;;;;;EASA,OAAO,OAAoF,OAAuD;AAChJ,UAAM,CAAC,KAAK,SAAS,IAAI,KAAI,YAAY,KAAK;AAC9C,QAAI,UAAU,WAAW,GAAG;AAC1B,YAAM,IAAI,MAAM,kBAAkB;IACpC;AACA,WAAO;EACT;;;;;;;;;;EAWA,OAAO,YAA2E,OAAyC;AACzH,UAAM,QAAQ,KAAI,aAAa,KAAK;AACpC,UAAM,aAAa,MAAM,OAAO,MAAM;AACtC,UAAM,iBAAiBU,QACrB,MAAM,SAAS,YAAY,aAAa,MAAM,aAAa,CAAC;AAE9D,QAAI,eAAe,eAAe,MAAM,eAAe;AACrD,YAAM,IAAI,MAAM,kBAAkB;IACpC;AACA,UAAM,cAAc,eAAe,SACjC,MAAM,gBAAgB,MAAM,UAAU;AAExC,UAAMV,UAAS,IAAWW,QACxB,MAAM,eACN,MAAM,YACN,aACA,cAAc;AAEhB,UAAM,MACJ,MAAM,YAAY,IACd,KAAI,SAASX,OAA0C,IACvD,KAAI,SAAS,MAAM,OAAOA,OAAM;AACtC,WAAO,CAAC,KAAwB,MAAM,SAAS,MAAM,IAAI,CAAC;EAC5D;;;;;;;;;;EAWA,OAAO,aAA4E,cAAgD;AACjI,QAAI,SAAS;AACb,UAAM,OAAO,MAAa;AACxB,YAAM,CAAC,GAAGY,QAAM,IAAWH,SAAO,aAAa,SAAS,MAAM,CAAC;AAC/D,gBAAUG;AACV,aAAO;IACT;AAEA,QAAIhB,WAAU,KAAI;AAClB,QAAI,QAAQE;AACZ,QAAIF,aAAsB,IAAI;AAE5B,MAAAA,WAAU;AACV,eAAS;IACX,OAAO;AACL,cAAQ,KAAI;IACd;AAEA,QAAIA,aAAY,KAAKA,aAAY,GAAG;AAClC,YAAM,IAAI,WAAW,uBAAuBA,QAAO,EAAE;IACvD;AAEA,UAAM,aAAa;AACnB,UAAM,gBAAgB,KAAI;AAC1B,UAAM,aAAa,KAAI;AACvB,UAAM,OAAO,SAAS;AACtB,UAAM,gBAAgB,OAAO;AAE7B,WAAO,EAAE,SAAAA,UAAS,OAAO,eAAe,YAAY,eAAe,KAAI;EACzE;;;;;;;EAQA,OAAO,MAA0G,QAAkEQ,QAAmC;AACpN,UAAM,CAAC,QAAQ,KAAK,IAAIS,iBAAgB,QAAQT,MAAI;AAEpD,UAAM,MAAM,KAAI,OAAO,KAAK;AAE5B,QAAI,IAAI,YAAY,KAAK,OAAO,CAAC,MAAM,KAAK;AAC1C,YAAM,MAAM,wDAAwD;IACtE;AAGA,IAAAV,WAAU,GAAG,EAAE,IAAI,QAAQ,MAAM;AAEjC,WAAO;EACT;;AAGF,SAASmB,iBAAqH,QAAkET,QAAmC;AACjO,UAAQ,OAAO,CAAC,GAAG;;IAEjB,KAAK,KAAK;AACR,YAAM,UAAUA,UAAQU;AACxB,aAAO;QACLA,WAAU;QACV,QAAQ,OAAO,GAAGA,WAAU,MAAM,GAAG,MAAM,EAAE;;IAEjD;IACA,KAAKA,WAAU,QAAQ;AACrB,YAAM,UAAUV,UAAQU;AACxB,aAAO,CAACA,WAAU,QAAkB,QAAQ,OAAO,MAAM,CAAC;IAC5D;IACA,KAAKC,QAAO,QAAQ;AAClB,YAAM,UAAUX,UAAQW;AACxB,aAAO,CAACA,QAAO,QAAkB,QAAQ,OAAO,MAAM,CAAC;IACzD;IACA,KAAKC,QAAO,QAAQ;AAClB,YAAM,UAAUZ,UAAQY;AACxB,aAAO,CAACA,QAAO,QAAkB,QAAQ,OAAO,MAAM,CAAC;IACzD;IACA,SAAS;AACP,UAAIZ,UAAQ,MAAM;AAChB,cAAM,MACJ,yFAAyF;MAE7F;AACA,aAAO,CAAC,OAAO,CAAC,GAAaA,OAAK,OAAO,MAAM,CAAC;IAClD;EACF;AACF;AAEA,SAASa,YAAY,OAAmBxB,SAA4BW,QAA+B;AACjG,QAAM,EAAE,OAAM,IAAKA;AACnB,MAAI,WAAWU,WAAU,QAAQ;AAC/B,UAAM,MAAM,8BAA8BV,OAAK,IAAI,WAAW;EAChE;AAEA,QAAM,MAAMX,QAAM,IAAI,MAAM;AAC5B,MAAI,OAAO,MAAM;AACf,UAAMyB,OAAMd,OAAK,OAAO,KAAK,EAAE,MAAM,CAAC;AACtC,IAAAX,QAAM,IAAI,QAAQyB,IAAG;AACrB,WAAOA;EACT,OAAO;AACL,WAAO;EACT;AACF;AAEA,SAASC,YAAoC,OAAmB1B,SAA4BW,QAAkC;AAC5H,QAAM,EAAE,OAAM,IAAKA;AACnB,QAAM,MAAMX,QAAM,IAAI,MAAM;AAC5B,MAAI,OAAO,MAAM;AACf,UAAMyB,OAAMd,OAAK,OAAO,KAAK;AAC7B,IAAAX,QAAM,IAAI,QAAQyB,IAAG;AACrB,WAAOA;EACT,OAAO;AACL,WAAO;EACT;AACF;AAEA,IAAMpB,eAAc;AACpB,IAAMC,gBAAe;AAErB,SAASQ,WAAWX,UAAsBC,QAAc,WAAqB;AAC3E,QAAM,aAAoBuB,gBAAexB,QAAO;AAChD,QAAM,aAAa,aAAoBwB,gBAAevB,MAAI;AAC1D,QAAM,QAAQ,IAAI,WAAW,aAAa,UAAU,UAAU;AAC9D,EAAOwB,UAASzB,UAAS,OAAO,CAAC;AACjC,EAAOyB,UAASxB,QAAM,OAAO,UAAU;AACvC,QAAM,IAAI,WAAW,UAAU;AAC/B,SAAO;AACT;AAEA,IAAMW,aAAY,OAAO,IAAI,kBAAkB;;;AC1c/C,IAAMc,QAAY;AAClB,IAAMC,QAAO;AAEb,IAAMC,WAA4CC;AAElD,SAASC,QAAQ,OAAiB;AAChC,SAAcC,QAAOL,OAAME,SAAO,KAAK,CAAC;AAC1C;AAEO,IAAMI,YAAW,EAAE,MAAAN,OAAM,MAAAC,OAAM,QAAAC,UAAQ,QAAAE,QAAM;;;ACP9C,SAAUG,MAAiD,EAAE,MAAAC,OAAM,MAAAC,QAAM,QAAAC,SAAM,GAA4E;AAC/J,SAAO,IAAIC,QAAOH,OAAMC,QAAMC,QAAM;AACtC;AAMM,IAAOC,UAAP,MAAa;EACR;EACA;EACA;EAET,YAAaH,OAAYC,QAAYC,UAAgD;AACnF,SAAK,OAAOF;AACZ,SAAK,OAAOC;AACZ,SAAK,SAASC;EAChB;EAEA,OAAQ,OAAiB;AACvB,QAAI,iBAAiB,YAAY;AAC/B,YAAM,SAAS,KAAK,OAAO,KAAK;AAChC,aAAO,kBAAkB,aACdE,QAAO,KAAK,MAAM,MAAM,IAE/B,OAAO,KAAK,CAAAC,YAAiBD,QAAO,KAAK,MAAMC,OAAM,CAAC;IAC5D,OAAO;AACL,YAAM,MAAM,mCAAmC;IAEjD;EACF;;;;AC/BF,SAASC,KAAKC,OAAyB;AACrC,SAAO,OAAM,SAAQ,IAAI,WAAW,MAAM,OAAO,OAAO,OAAOA,OAAM,IAAI,CAAC;AAC5E;AAEO,IAAMC,UAASC,MAAK;EACzB,MAAM;EACN,MAAM;EACN,QAAQH,KAAI,SAAS;CACtB;AAEM,IAAMI,UAASD,MAAK;EACzB,MAAM;EACN,MAAM;EACN,QAAQH,KAAI,SAAS;CACtB;;;ACQD,IAAM,UAAU,OAAO,IAAI,4BAA4B;AAGvD,IAAM,kBAAkB;AAsBxB,IAAM,aAAN,MAAgB;EACP;EACU;EACD;EACR;EAER,YAAa,MAA4B;AACvC,SAAK,OAAO,KAAK;AACjB,SAAK,YAAY,KAAK;AAGtB,WAAO,eAAe,MAAM,UAAU;MACpC,YAAY;MACZ,UAAU;KACX;EACH;EAEA,KAAK,OAAO,WAAW,IAAC;AACtB,WAAO,UAAU,KAAK,SAAQ,CAAE;EAClC;EAES,CAAC,YAAY,IAAI;EAE1B,WAAQ;AACN,QAAI,KAAK,UAAU,MAAM;AACvB,WAAK,SAASK,WAAU,OAAO,KAAK,UAAU,KAAK,EAAE,MAAM,CAAC;IAC9D;AAEA,WAAO,KAAK;EACd;EAEA,cAAW;AACT,WAAO,KAAK;EACd;;;EAIA,QAAK;AACH,WAAOC,KAAI,SAAS,iBAAiB,KAAK,SAAS;EACrD;EAEA,SAAM;AACJ,WAAO,KAAK,SAAQ;EACtB;;;;EAKA,OAAQ,IAAiC;AACvC,QAAI,MAAM,MAAM;AACd,aAAO;IACT;AAEA,QAAI,cAAc,YAAY;AAC5B,aAAO,OAAiB,KAAK,UAAU,OAAO,EAAE;IAClD,WAAW,OAAO,OAAO,UAAU;AACjC,aAAO,KAAK,SAAQ,MAAO;IAC7B,WAAW,IAAI,YAAW,GAAI,SAAS,MAAM;AAC3C,aAAO,OAAiB,KAAK,UAAU,OAAO,GAAG,YAAW,EAAG,KAAK;IACtE,OAAO;AACL,YAAM,IAAI,MAAM,cAAc;IAChC;EACF;;;;;;;;;;;;;EAcA,CAAC,OAAO,IAAC;AACP,WAAO,UAAU,KAAK,SAAQ,CAAE;EAClC;;AAGI,IAAO,YAAP,cAAyB,WAAgB;EAC7B,OAAO;EACP;EAEhB,YAAa,MAAmB;AAC9B,UAAM,EAAE,GAAG,MAAM,MAAM,MAAK,CAAE;AAE9B,SAAK,YAAY,KAAK;EACxB;;AAGI,IAAO,gBAAP,cAA6B,WAAe;EAChC,OAAO;EACP;EAEhB,YAAa,MAAuB;AAClC,UAAM,EAAE,GAAG,MAAM,MAAM,UAAS,CAAE;AAElC,SAAK,YAAY,KAAK;EACxB;;AAGI,IAAO,kBAAP,cAA+B,WAAe;EAClC,OAAO;EACP;EAEhB,YAAa,MAAyB;AACpC,UAAM,EAAE,GAAG,MAAM,MAAM,YAAW,CAAE;AAEpC,SAAK,YAAY,KAAK;EACxB;;AAIF,IAAM,mCAAmC;AAEnC,IAAO,YAAP,MAAgB;EACX,OAAO;EACP;EACA;EACA;EAET,YAAa,KAAQ;AACnB,SAAK,MAAM,IAAI,SAAQ;AACvB,SAAK,YAAYC,UAAS,OAAO,WAAqB,KAAK,GAAG,CAAC;EACjE;EAEA,CAAC,OAAO,IAAC;AACP,WAAO,UAAU,KAAK,GAAG;EAC3B;EAES,CAAC,YAAY,IAAI;EAE1B,WAAQ;AACN,WAAO,KAAK,MAAK,EAAG,SAAQ;EAC9B;EAEA,cAAW;AACT,WAAO,KAAK;EACd;EAEA,QAAK;AACH,WAAOD,KAAI,SAAS,kCAAkC,KAAK,YAAW,CAAE;EAC1E;EAEA,SAAM;AACJ,WAAO,KAAK,SAAQ;EACtB;EAEA,OAAQ,OAAoC;AAC1C,QAAI,SAAS,MAAM;AACjB,aAAO;IACT;AAEA,QAAI,iBAAiB,YAAY;AAC/B,cAAQ,SAAmB,KAAK;IAClC;AAEA,WAAO,MAAM,SAAQ,MAAO,KAAK,SAAQ;EAC3C;;;;ACrLF,IAAME,mBAAkB;AACxB,IAAMC,oCAAmC;AAEnC,SAAU,iBAAkB,KAAa,SAA+B;AAC5E,MAAI;AAEJ,MAAI,IAAI,OAAO,CAAC,MAAM,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK;AAGlD,gBAAmBC,SAAOC,WAAU,OAAO,IAAI,GAAG,EAAE,CAAC;EACvD,WAAW,IAAI,WAAW,aAAa,KAAK,IAAI,WAAW,aAAa,KAAK,IAAI,WAAW,QAAQ,KAAK,IAAI,WAAW,MAAM,GAAG;AAE/H,WAAO,cAAcC,KAAI,MAAM,GAAG,CAAC;EACrC,OAAO;AACL,QAAI,WAAW,MAAM;AACnB,YAAM,IAAI,uBAAuB,+EAA+E;IAClH;AAEA,gBAAmBF,SAAO,QAAQ,OAAO,GAAG,CAAC;EAC/C;AAEA,SAAO,oBAAoB,SAAS;AACtC;AAMM,SAAU,oBAAqBG,YAAoB;AACvD,MAAIA,WAAU,SAAS,WAAW;AAChC,WAAO,IAAI,cAAmB;MAC5B,WAAWA,WAAU,MAAK,EAAG;MAC7B,WAAAA;KACD;EACH,WAAWA,WAAU,SAAS,aAAa;AACzC,WAAO,IAAI,gBAAqB;MAC9B,WAAWA,WAAU,MAAK,EAAG;MAC7B,WAAAA;KACD;EACH,WAAWA,WAAU,SAAS,OAAO;AACnC,WAAO,IAAI,UAAe;MACxB,WAAWA,WAAU,MAAK,EAAG;MAC7B,WAAAA;KACD;EACH;AAEA,QAAM,IAAI,wBAAuB;AACnC;AAMM,SAAU,qBAAsB,YAAsB;AAC1D,SAAO,oBAAoB,WAAW,SAAS;AACjD;AAEM,SAAU,oBAAqB,WAA0B;AAC7D,MAAI,kBAAkB,SAAS,GAAG;AAChC,WAAO,IAAI,UAAe,EAAE,UAAS,CAAE;EACzC,WAAW,oBAAoB,SAAS,GAAG;AACzC,QAAI;AACF,YAAMA,aAAY,uBAAuB,SAAS;AAElD,UAAIA,WAAU,SAAS,WAAW;AAChC,eAAO,IAAI,cAAmB,EAAE,WAAW,WAAAA,WAAS,CAAE;MACxD,WAAWA,WAAU,SAAS,aAAa;AACzC,eAAO,IAAI,gBAAqB,EAAE,WAAW,WAAAA,WAAS,CAAE;MAC1D;IACF,SAAS,KAAK;AAEZ,YAAM,MAAM,SAAmB,UAAU,MAAM;AAE/C,aAAO,IAAI,UAAe,IAAI,IAAI,GAAG,CAAC;IACxC;EACF;AAEA,QAAM,IAAI,sBAAsB,sCAAsC;AACxE;AAEM,SAAU,cAAe,KAAQ;AACrC,MAAI,KAAK,aAAa,QAAQ,IAAI,WAAW,QAAS,IAAI,YAAY,KAAM,IAAI,SAASL,oBAAoB,IAAI,SAASC,mCAAmC;AAC3J,UAAM,IAAI,gBAAgB,gCAAgC;EAC5D;AAEA,MAAI,IAAI,SAASA,mCAAkC;AACjD,UAAM,MAAM,SAAmB,IAAI,UAAU,MAAM;AAEnD,WAAO,IAAI,UAAe,IAAI,IAAI,GAAG,CAAC;EACxC;AAEA,SAAO,oBAAoB,IAAI,SAAS;AAC1C;AAEA,SAAS,oBAAqB,WAA0B;AACtD,SAAO,UAAU,SAASK,UAAS;AACrC;AAEA,SAAS,kBAAmB,WAA0B;AACpD,SAAO,UAAU,SAASC,QAAO;AACnC;;;AClIO,IAAMC,SAAQ,IAAI,WAAW,CAAC;AA0B/B,SAAUC,QAAQ,GAA6C;AACnE,MAAI,aAAa,cAAc,EAAE,YAAY,SAAS,cAAc;AAAE,WAAO;EAAE;AAC/E,MAAI,aAAa,aAAa;AAAE,WAAO,IAAI,WAAW,CAAC;EAAE;AACzD,MAAI,YAAY,OAAO,CAAC,GAAG;AACzB,WAAO,IAAI,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU;EAC5D;AACA,QAAM,IAAI,MAAM,mCAAmC;AACrD;;;ACvBA,SAASC,MAAM,UAAUC,OAAI;AAC3B,MAAI,SAAS,UAAU,KAAK;AAAE,UAAM,IAAI,UAAU,mBAAmB;EAAE;AACvE,MAAI,WAAW,IAAI,WAAW,GAAG;AACjC,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,aAAS,CAAC,IAAI;EAChB;AACA,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,QAAI,IAAI,SAAS,OAAO,CAAC;AACzB,QAAI,KAAK,EAAE,WAAW,CAAC;AACvB,QAAI,SAAS,EAAE,MAAM,KAAK;AAAE,YAAM,IAAI,UAAU,IAAI,eAAe;IAAE;AACrE,aAAS,EAAE,IAAI;EACjB;AACA,MAAI,OAAO,SAAS;AACpB,MAAI,SAAS,SAAS,OAAO,CAAC;AAC9B,MAAI,SAAS,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,GAAG;AAC1C,MAAI,UAAU,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI;AAI3C,WAASC,SAAQ,QAAM;AAErB,QAAI,kBAAkB;AAAY;aAAW,YAAY,OAAO,MAAM,GAAG;AACvE,eAAS,IAAI,WAAW,OAAO,QAAQ,OAAO,YAAY,OAAO,UAAU;IAC7E,WAAW,MAAM,QAAQ,MAAM,GAAG;AAChC,eAAS,WAAW,KAAK,MAAM;IACjC;AACA,QAAI,EAAE,kBAAkB,aAAa;AAAE,YAAM,IAAI,UAAU,qBAAqB;IAAE;AAClF,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO;IAAG;AAErC,QAAI,SAAS;AACb,QAAIC,WAAS;AACb,QAAI,SAAS;AACb,QAAI,OAAO,OAAO;AAClB,WAAO,WAAW,QAAQ,OAAO,MAAM,MAAM,GAAG;AAC9C;AACA;IACF;AAEA,QAAI,QAAS,OAAO,UAAU,UAAU,MAAO;AAC/C,QAAI,MAAM,IAAI,WAAW,IAAI;AAE7B,WAAO,WAAW,MAAM;AACtB,UAAI,QAAQ,OAAO,MAAM;AAEzB,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,MAAM,IAAI,GAAG,MAAO;AAC9B,YAAI,GAAG,IAAK,QAAQ,SAAU;AAC9B,gBAAS,QAAQ,SAAU;MAC7B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,IAAI,GAAG,MAAM,GAAG;AACrC;IACF;AAEA,QAAI,MAAM,OAAO,OAAO,MAAM;AAC9B,WAAO,MAAM,MAAM,EAAE,KAAK;AAAE,aAAO,SAAS,OAAO,IAAI,GAAG,CAAC;IAAG;AAC9D,WAAO;EACT;AAIA,WAAS,aAAc,QAAM;AAC3B,QAAI,OAAO,WAAW,UAAU;AAAE,YAAM,IAAI,UAAU,iBAAiB;IAAE;AACzE,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO,IAAI,WAAU;IAAG;AACnD,QAAI,MAAM;AAEV,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,SAAS;AACb,QAAIA,WAAS;AACb,WAAO,OAAO,GAAG,MAAM,QAAQ;AAC7B;AACA;IACF;AAEA,QAAI,QAAU,OAAO,SAAS,OAAO,SAAU,MAAO;AACtD,QAAI,OAAO,IAAI,WAAW,IAAI;AAE9B,WAAO,OAAO,GAAG,GAAG;AAElB,UAAI,QAAQ,SAAS,OAAO,WAAW,GAAG,CAAC;AAE3C,UAAI,UAAU,KAAK;AAAE;MAAO;AAC5B,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,OAAO,KAAK,GAAG,MAAO;AAChC,aAAK,GAAG,IAAK,QAAQ,QAAS;AAC9B,gBAAS,QAAQ,QAAS;MAC5B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,KAAK,GAAG,MAAM,GAAG;AACtC;IACF;AACA,QAAI,MAAM,IAAI,WAAW,UAAU,OAAO,IAAI;AAC9C,QAAIE,KAAI;AACR,WAAO,QAAQ,MAAM;AACnB,UAAIA,IAAG,IAAI,KAAK,KAAK;IACvB;AACA,WAAO;EACT;AAIA,WAASC,SAAQC,SAAM;AACrB,QAAI,SAAS,aAAaA,OAAM;AAChC,QAAI,QAAQ;AAAE,aAAO;IAAO;AAC5B,UAAM,IAAI,MAAM,OAAON,KAAI,YAAY;EACzC;AACA,SAAO;IACL,QAAQC;IACR;IACA,QAAQI;;AAEZ;AACA,IAAIE,OAAMR;AAEV,IAAIS,mCAAkCD;AAEtC,IAAAE,kBAAeD;;;ACjIf,IAAME,WAAN,MAAa;EACF;EACA;EACA;EAET,YAAaC,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;EACpB;EAEA,OAAQ,OAAiB;AACvB,QAAI,iBAAiB,YAAY;AAC/B,aAAO,GAAG,KAAK,MAAM,GAAG,KAAK,WAAW,KAAK,CAAC;IAChD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;;AAQF,IAAMC,WAAN,MAAa;EACF;EACA;EACA;EACQ;EAEjB,YAAaD,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,UAAM,kBAAkB,OAAO,YAAY,CAAC;AAE5C,QAAI,oBAAoB,QAAW;AACjC,YAAM,IAAI,MAAM,0BAA0B;IAC5C;AACA,SAAK,kBAAkB;AACvB,SAAK,aAAa;EACpB;EAEA,OAAQ,MAAY;AAClB,QAAI,OAAO,SAAS,UAAU;AAC5B,UAAI,KAAK,YAAY,CAAC,MAAM,KAAK,iBAAiB;AAChD,cAAM,MAAM,qCAAqC,KAAK,UAAU,IAAI,CAAC,KAAK,KAAK,IAAI,+CAA+C,KAAK,MAAM,EAAE;MACjJ;AACA,aAAO,KAAK,WAAW,KAAK,MAAM,KAAK,OAAO,MAAM,CAAC;IACvD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;EAEA,GAAgC,SAAmE;AACjG,WAAOE,IAAG,MAAM,OAAO;EACzB;;AAKF,IAAMC,mBAAN,MAAqB;EACV;EAET,YAAa,UAA0B;AACrC,SAAK,WAAW;EAClB;EAEA,GAAiC,SAAmE;AAClG,WAAOD,IAAG,MAAM,OAAO;EACzB;EAEA,OAAQ,OAAa;AACnB,UAAM,SAAS,MAAM,CAAC;AACtB,UAAM,UAAU,KAAK,SAAS,MAAM;AACpC,QAAI,WAAW,MAAM;AACnB,aAAO,QAAQ,OAAO,KAAK;IAC7B,OAAO;AACL,YAAM,WAAW,qCAAqC,KAAK,UAAU,KAAK,CAAC,+BAA+B,OAAO,KAAK,KAAK,QAAQ,CAAC,gBAAgB;IACtJ;EACF;;AAGI,SAAUA,IAAyC,MAA+C,OAA8C;AACpJ,SAAO,IAAIC,iBAAgB;IACzB,GAAI,KAAK,YAAY,EAAE,CAAE,KAA2B,MAAM,GAAG,KAAI;IACjE,GAAI,MAAM,YAAY,EAAE,CAAE,MAA4B,MAAM,GAAG,MAAK;GAClD;AACtB;AAEM,IAAOC,SAAP,MAAY;EACP;EACA;EACA;EACA;EACA;EACA;EAET,YAAaJ,OAAY,QAAgB,YAAsB,YAAoB;AACjF,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,UAAU,IAAID,SAAQC,OAAM,QAAQ,UAAU;AACnD,SAAK,UAAU,IAAIC,SAAQD,OAAM,QAAQ,UAAU;EACrD;EAEA,OAAQ,OAAiB;AACvB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;EAEA,OAAQ,OAAa;AACnB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;;AAGI,SAAUK,MAAmD,EAAE,MAAAL,OAAM,QAAQ,QAAAM,UAAQ,QAAAC,SAAM,GAAsE;AACrK,SAAO,IAAIH,OAAMJ,OAAM,QAAQM,UAAQC,QAAM;AAC/C;AAEM,SAAUC,OAAoD,EAAE,MAAAR,OAAM,QAAQ,UAAAS,UAAQ,GAAoD;AAC9I,QAAM,EAAE,QAAAH,UAAQ,QAAAC,SAAM,IAAKG,gBAAMD,WAAUT,KAAI;AAC/C,SAAOK,MAAK;IACV;IACA,MAAAL;IACA,QAAAM;IACA,QAAQ,CAAC,SAA6BK,QAAOJ,SAAO,IAAI,CAAC;GAC1D;AACH;;;AC1IO,IAAMK,aAAYC,OAAM;EAC7B,MAAM;EACN,QAAQ;EACR,UAAU;CACX;AAEM,IAAMC,gBAAeD,OAAM;EAChC,MAAM;EACN,QAAQ;EACR,UAAU;CACX;;;ACXD,IAAIE,YAAWC;AAEf,IAAIC,OAAM;AAAV,IACIC,QAAO;AADX,IAEIC,UAAS,CAACD;AAFd,IAGIE,OAAM,KAAK,IAAI,GAAG,EAAE;AAOxB,SAASJ,SAAO,KAAK,KAAK,QAAM;AAC9B,QAAM,OAAO,CAAA;AACb,WAAS,UAAU;AACnB,MAAI,YAAY;AAEhB,SAAM,OAAOI,MAAK;AAChB,QAAI,QAAQ,IAAK,MAAM,MAAQH;AAC/B,WAAO;EACT;AACA,SAAM,MAAME,SAAQ;AAClB,QAAI,QAAQ,IAAK,MAAM,MAAQF;AAC/B,aAAS;EACX;AACA,MAAI,MAAM,IAAI,MAAM;AAGpB,EAAAD,SAAO,QAAQ,SAAS,YAAY;AAEpC,SAAO;AACT;AAEA,IAAIK,WAASC;AAEb,IAAIC,SAAQ;AAAZ,IACIC,UAAS;AAMb,SAASF,MAAK,KAAK,QAAM;AACvB,MAAI,MAAS,GACT,SAAS,UAAU,GACnB,QAAS,GACT,UAAU,QACV,GACA,IAAI,IAAI;AAEZ,KAAG;AACD,QAAI,WAAW,GAAG;AAEhB,MAAAA,MAAK,QAAQ;AACb,YAAM,IAAI,WAAW,yBAAyB;IAChD;AACA,QAAI,IAAI,SAAS;AACjB,WAAO,QAAQ,MACV,IAAIE,YAAW,SACf,IAAIA,WAAU,KAAK,IAAI,GAAG,KAAK;AACpC,aAAS;EACX,SAAS,KAAKD;AAGd,EAAAD,MAAK,QAAQ,UAAU;AAEvB,SAAO;AACT;AAEA,IAAIG,MAAK,KAAK,IAAI,GAAI,CAAC;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AAEvB,IAAIC,UAAS,SAAgCC,QAAK;AAChD,SACEA,SAAQV,MAAK,IACbU,SAAQT,MAAK,IACbS,SAAQR,MAAK,IACbQ,SAAQP,MAAK,IACbO,SAAQN,MAAK,IACbM,SAAQL,MAAK,IACbK,SAAQJ,MAAK,IACbI,SAAQH,MAAK,IACbG,SAAQF,MAAK,IACA;AAEjB;AAEA,IAAIG,UAAS;EACT,QAAQrB;EACR,QAAQM;EACR,gBAAgBa;;AAGpB,IAAIG,gBAAeD;AAEnB,IAAAE,kBAAeD;;;ACrGT,SAAUE,SAAQ,MAAkB,SAAS,GAAC;AAClD,QAAMC,SAAOC,gBAAO,OAAO,MAAM,MAAM;AACvC,SAAO,CAACD,QAAMC,gBAAO,OAAO,KAAK;AACnC;;;ACkBM,SAAUC,SAAQ,WAAqB;AAC3C,QAAM,QAAQC,QAAO,SAAS;AAC9B,QAAM,CAACC,QAAM,UAAU,IAAWF,SAAO,KAAK;AAC9C,QAAM,CAAC,MAAM,YAAY,IAAWA,SAAO,MAAM,SAAS,UAAU,CAAC;AACrE,QAAMG,UAAS,MAAM,SAAS,aAAa,YAAY;AAEvD,MAAIA,QAAO,eAAe,MAAM;AAC9B,UAAM,IAAI,MAAM,kBAAkB;EACpC;AAEA,SAAO,IAAIC,QAAOF,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAqBM,IAAOE,UAAP,MAAa;EACR;EACA;EACA;EACA;;;;EAKT,YAAaC,QAAY,MAAYC,SAAoB,OAAiB;AACxE,SAAK,OAAOD;AACZ,SAAK,OAAO;AACZ,SAAK,SAASC;AACd,SAAK,QAAQ;EACf;;;;AC7DI,SAAU,YAAoB,MAA2BC,MAAkB;AAC/E,QAAM,WAAgC;IACpC,CAAC,OAAO,QAAQ,GAAG,MAAK;AACtB,aAAO;IACT;IACA,MAAM,MAAK;AACT,YAAM,OAAO,KAAK,KAAI;AACtB,YAAM,MAAM,KAAK;AAEjB,UAAI,KAAK,SAAS,QAAQ,OAAO,MAAM;AACrC,cAAM,SAAoC;UACxC,MAAM;UACN,OAAO;;AAGT,eAAO;MACT;AAEA,aAAO;QACL,MAAM;QACN,OAAOA,KAAI,GAAG;;IAElB;;AAGF,SAAO;AACT;AAEM,SAAUC,kBAAkB,KAAW;AAC3C,QAAM,YAAmBC,SAAOC,WAAU,OAAO,IAAI,GAAG,EAAE,CAAC;AAC3D,SAAO,oBAAoB,SAAS;AACtC;;;ACnBM,IAAO,UAAP,MAAc;EACD;EAEjB,YAAaC,MAAgB;AAC3B,SAAK,MAAM,oBAAI,IAAG;AAElB,QAAIA,QAAO,MAAM;AACf,iBAAW,CAAC,KAAKC,MAAK,KAAKD,KAAI,QAAO,GAAI;AACxC,aAAK,IAAI,IAAI,IAAI,SAAQ,GAAI,EAAE,KAAK,OAAAC,OAAK,CAAE;MAC7C;IACF;EACF;EAEA,CAAC,OAAO,QAAQ,IAAC;AACf,WAAO,KAAK,QAAO;EACrB;EAEA,QAAK;AACH,SAAK,IAAI,MAAK;EAChB;EAEA,OAAQ,MAAY;AAClB,WAAO,KAAK,IAAI,OAAO,KAAK,SAAQ,CAAE;EACxC;EAEA,UAAO;AACL,WAAO,YACL,KAAK,IAAI,QAAO,GAChB,CAAC,QAAO;AACN,aAAO,CAAC,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,KAAK;IAClC,CAAC;EAEL;EAEA,QAAS,IAAoD;AAC3D,SAAK,IAAI,QAAQ,CAACA,QAAO,QAAO;AAC9B,SAAGA,OAAM,OAAOA,OAAM,KAAK,IAAI;IACjC,CAAC;EACH;EAEA,IAAK,MAAY;AACf,WAAO,KAAK,IAAI,IAAI,KAAK,SAAQ,CAAE,GAAG;EACxC;EAEA,IAAK,MAAY;AACf,WAAO,KAAK,IAAI,IAAI,KAAK,SAAQ,CAAE;EACrC;EAEA,IAAK,MAAcA,QAAQ;AACzB,SAAK,IAAI,IAAI,KAAK,SAAQ,GAAI,EAAE,KAAK,MAAM,OAAAA,OAAK,CAAE;EACpD;EAEA,OAAI;AACF,WAAO,YACL,KAAK,IAAI,OAAM,GACf,CAAC,QAAO;AACN,aAAO,IAAI;IACb,CAAC;EAEL;EAEA,SAAM;AACJ,WAAO,YAAY,KAAK,IAAI,OAAM,GAAI,CAAC,QAAQ,IAAI,KAAK;EAC1D;EAEA,IAAI,OAAI;AACN,WAAO,KAAK,IAAI;EAClB;;;;ACnEI,IAAO,UAAP,MAAO,SAAO;EACD;EAEjB,YAAa,KAAgC;AAC3C,SAAK,MAAM,oBAAI,IAAG;AAElB,QAAI,OAAO,MAAM;AACf,iBAAW,OAAO,KAAK;AACrB,aAAK,IAAI,IAAI,IAAI,SAAQ,CAAE;MAC7B;IACF;EACF;EAEA,IAAI,OAAI;AACN,WAAO,KAAK,IAAI;EAClB;EAEA,CAAC,OAAO,QAAQ,IAAC;AACf,WAAO,KAAK,OAAM;EACpB;EAEA,IAAK,MAAY;AACf,SAAK,IAAI,IAAI,KAAK,SAAQ,CAAE;EAC9B;EAEA,QAAK;AACH,SAAK,IAAI,MAAK;EAChB;EAEA,OAAQ,MAAY;AAClB,SAAK,IAAI,OAAO,KAAK,SAAQ,CAAE;EACjC;EAEA,UAAO;AACL,WAAO,YACL,KAAK,IAAI,QAAO,GAChB,CAAC,QAAO;AACN,YAAMC,UAASC,kBAAiB,IAAI,CAAC,CAAC;AAEtC,aAAO,CAACD,SAAQA,OAAM;IACxB,CAAC;EAEL;EAEA,QAAS,WAAgE;AACvE,SAAK,IAAI,QAAQ,CAAC,QAAO;AACvB,YAAMA,UAASC,kBAAiB,GAAG;AAEnC,gBAAUD,SAAQA,SAAQ,IAAI;IAChC,CAAC;EACH;EAEA,IAAK,MAAY;AACf,WAAO,KAAK,IAAI,IAAI,KAAK,SAAQ,CAAE;EACrC;EAEA,SAAM;AACJ,WAAO,YACL,KAAK,IAAI,OAAM,GACf,CAAC,QAAO;AACN,aAAOC,kBAAiB,GAAG;IAC7B,CAAC;EAEL;EAEA,aAAc,OAAc;AAC1B,UAAM,SAAS,IAAI,SAAO;AAE1B,eAAWD,WAAU,OAAO;AAC1B,UAAI,KAAK,IAAIA,OAAM,GAAG;AACpB,eAAO,IAAIA,OAAM;MACnB;IACF;AAEA,WAAO;EACT;EAEA,WAAY,OAAc;AACxB,UAAM,SAAS,IAAI,SAAO;AAE1B,eAAWA,WAAU,MAAM;AACzB,UAAI,CAAC,MAAM,IAAIA,OAAM,GAAG;AACtB,eAAO,IAAIA,OAAM;MACnB;IACF;AAEA,WAAO;EACT;EAEA,MAAO,OAAc;AACnB,UAAM,SAAS,IAAI,SAAO;AAE1B,eAAWA,WAAU,OAAO;AAC1B,aAAO,IAAIA,OAAM;IACnB;AAEA,eAAWA,WAAU,MAAM;AACzB,aAAO,IAAIA,OAAM;IACnB;AAEA,WAAO;EACT;;AAGI,SAAU,UAAO;AACrB,SAAO,IAAI,QAAO;AACpB;;;ACtHM,IAAO,aAAP,MAAiB;EACJ;EAEjB,YAAa,MAAc,WAAkB;AAC3C,SAAK,SAAS,2BAA2B,MAAM,SAAS;EAC1D;EAEA,IAAKE,SAAc;AACjB,WAAO,KAAK,OAAO,IAAIA,QAAO,YAAW,EAAG,KAAK;EACnD;EAEA,IAAKA,SAAc;AACjB,SAAK,OAAO,IAAIA,QAAO,YAAW,EAAG,KAAK;EAC5C;EAEA,OAAQA,SAAc;AACpB,SAAK,OAAO,SAASA,QAAO,YAAW,EAAG,KAAK;EACjD;;AA0BI,SAAU,WAAY,MAAc,YAAoB,MAAK;AACjE,SAAO,IAAI,WAAW,MAAM,SAAS;AACvC;;;AC7CA,IAAM,iBAAN,cAAgC,QAAU;EACvB;EAEjB,YAAa,MAAkC;AAC7C,UAAK;AAEL,UAAM,EAAE,MAAAC,OAAM,QAAO,IAAK;AAE1B,SAAK,SAAS,QAAQ,eAAeA,KAAI;AACzC,SAAK,sBAAqB;EAC5B;EAEA,IAAK,KAAaC,QAAQ;AACxB,UAAM,IAAI,KAAKA,MAAK;AACpB,SAAK,sBAAqB;AAC1B,WAAO;EACT;EAEA,OAAQ,KAAW;AACjB,UAAM,UAAU,MAAM,OAAO,GAAG;AAChC,SAAK,sBAAqB;AAC1B,WAAO;EACT;EAEA,QAAK;AACH,UAAM,MAAK;AACX,SAAK,sBAAqB;EAC5B;EAEQ,wBAAqB;AAC3B,SAAK,OAAO,OAAO,KAAK,IAAI;EAC9B;;AAkBI,SAAU,eAAoB,QAA0B;AAC5D,QAAM,EAAE,MAAAD,OAAM,QAAO,IAAK;AAC1B,MAAIE;AAEJ,MAAI,WAAW,MAAM;AACnB,IAAAA,OAAM,IAAI,eAAkB,EAAE,MAAAF,OAAM,QAAO,CAAE;EAC/C,OAAO;AACL,IAAAE,OAAM,IAAI,QAAO;EACnB;AAEA,SAAOA;AACT;;;ACpEO,IAAMC,SAAQ,IAAI,WAAW,CAAC;AAW/B,SAAUC,QAAQ,IAAgB,IAAc;AACpD,MAAI,OAAO,IAAI;AAAE,WAAO;EAAK;AAC7B,MAAI,GAAG,eAAe,GAAG,YAAY;AACnC,WAAO;EACT;AAEA,WAAS,KAAK,GAAG,KAAK,GAAG,YAAY,MAAM;AACzC,QAAI,GAAG,EAAE,MAAM,GAAG,EAAE,GAAG;AACrB,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEM,SAAUC,QAAQ,GAA6C;AACnE,MAAI,aAAa,cAAc,EAAE,YAAY,SAAS,cAAc;AAAE,WAAO;EAAE;AAC/E,MAAI,aAAa,aAAa;AAAE,WAAO,IAAI,WAAW,CAAC;EAAE;AACzD,MAAI,YAAY,OAAO,CAAC,GAAG;AACzB,WAAO,IAAI,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU;EAC5D;AACA,QAAM,IAAI,MAAM,mCAAmC;AACrD;;;ACvBA,SAASC,MAAM,UAAUC,OAAI;AAC3B,MAAI,SAAS,UAAU,KAAK;AAAE,UAAM,IAAI,UAAU,mBAAmB;EAAE;AACvE,MAAI,WAAW,IAAI,WAAW,GAAG;AACjC,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,aAAS,CAAC,IAAI;EAChB;AACA,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,QAAI,IAAI,SAAS,OAAO,CAAC;AACzB,QAAI,KAAK,EAAE,WAAW,CAAC;AACvB,QAAI,SAAS,EAAE,MAAM,KAAK;AAAE,YAAM,IAAI,UAAU,IAAI,eAAe;IAAE;AACrE,aAAS,EAAE,IAAI;EACjB;AACA,MAAI,OAAO,SAAS;AACpB,MAAI,SAAS,SAAS,OAAO,CAAC;AAC9B,MAAI,SAAS,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,GAAG;AAC1C,MAAI,UAAU,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI;AAI3C,WAASC,SAAQ,QAAM;AAErB,QAAI,kBAAkB;AAAY;aAAW,YAAY,OAAO,MAAM,GAAG;AACvE,eAAS,IAAI,WAAW,OAAO,QAAQ,OAAO,YAAY,OAAO,UAAU;IAC7E,WAAW,MAAM,QAAQ,MAAM,GAAG;AAChC,eAAS,WAAW,KAAK,MAAM;IACjC;AACA,QAAI,EAAE,kBAAkB,aAAa;AAAE,YAAM,IAAI,UAAU,qBAAqB;IAAE;AAClF,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO;IAAG;AAErC,QAAI,SAAS;AACb,QAAIC,WAAS;AACb,QAAI,SAAS;AACb,QAAI,OAAO,OAAO;AAClB,WAAO,WAAW,QAAQ,OAAO,MAAM,MAAM,GAAG;AAC9C;AACA;IACF;AAEA,QAAI,QAAS,OAAO,UAAU,UAAU,MAAO;AAC/C,QAAI,MAAM,IAAI,WAAW,IAAI;AAE7B,WAAO,WAAW,MAAM;AACtB,UAAI,QAAQ,OAAO,MAAM;AAEzB,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,MAAM,IAAI,GAAG,MAAO;AAC9B,YAAI,GAAG,IAAK,QAAQ,SAAU;AAC9B,gBAAS,QAAQ,SAAU;MAC7B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,IAAI,GAAG,MAAM,GAAG;AACrC;IACF;AAEA,QAAI,MAAM,OAAO,OAAO,MAAM;AAC9B,WAAO,MAAM,MAAM,EAAE,KAAK;AAAE,aAAO,SAAS,OAAO,IAAI,GAAG,CAAC;IAAG;AAC9D,WAAO;EACT;AAIA,WAAS,aAAc,QAAM;AAC3B,QAAI,OAAO,WAAW,UAAU;AAAE,YAAM,IAAI,UAAU,iBAAiB;IAAE;AACzE,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO,IAAI,WAAU;IAAG;AACnD,QAAI,MAAM;AAEV,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,SAAS;AACb,QAAIA,WAAS;AACb,WAAO,OAAO,GAAG,MAAM,QAAQ;AAC7B;AACA;IACF;AAEA,QAAI,QAAU,OAAO,SAAS,OAAO,SAAU,MAAO;AACtD,QAAI,OAAO,IAAI,WAAW,IAAI;AAE9B,WAAO,OAAO,GAAG,GAAG;AAElB,UAAI,QAAQ,SAAS,OAAO,WAAW,GAAG,CAAC;AAE3C,UAAI,UAAU,KAAK;AAAE;MAAO;AAC5B,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,OAAO,KAAK,GAAG,MAAO;AAChC,aAAK,GAAG,IAAK,QAAQ,QAAS;AAC9B,gBAAS,QAAQ,QAAS;MAC5B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,KAAK,GAAG,MAAM,GAAG;AACtC;IACF;AACA,QAAI,MAAM,IAAI,WAAW,UAAU,OAAO,IAAI;AAC9C,QAAIE,KAAI;AACR,WAAO,QAAQ,MAAM;AACnB,UAAIA,IAAG,IAAI,KAAK,KAAK;IACvB;AACA,WAAO;EACT;AAIA,WAASC,SAAQC,SAAM;AACrB,QAAI,SAAS,aAAaA,OAAM;AAChC,QAAI,QAAQ;AAAE,aAAO;IAAO;AAC5B,UAAM,IAAI,MAAM,OAAON,KAAI,YAAY;EACzC;AACA,SAAO;IACL,QAAQC;IACR;IACA,QAAQI;;AAEZ;AACA,IAAIE,OAAMR;AAEV,IAAIS,mCAAkCD;AAEtC,IAAAE,kBAAeD;;;ACjIf,IAAME,WAAN,MAAa;EACF;EACA;EACA;EAET,YAAaC,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;EACpB;EAEA,OAAQ,OAAiB;AACvB,QAAI,iBAAiB,YAAY;AAC/B,aAAO,GAAG,KAAK,MAAM,GAAG,KAAK,WAAW,KAAK,CAAC;IAChD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;;AAQF,IAAMC,WAAN,MAAa;EACF;EACA;EACA;EACQ;EAEjB,YAAaD,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,UAAM,kBAAkB,OAAO,YAAY,CAAC;AAE5C,QAAI,oBAAoB,QAAW;AACjC,YAAM,IAAI,MAAM,0BAA0B;IAC5C;AACA,SAAK,kBAAkB;AACvB,SAAK,aAAa;EACpB;EAEA,OAAQ,MAAY;AAClB,QAAI,OAAO,SAAS,UAAU;AAC5B,UAAI,KAAK,YAAY,CAAC,MAAM,KAAK,iBAAiB;AAChD,cAAM,MAAM,qCAAqC,KAAK,UAAU,IAAI,CAAC,KAAK,KAAK,IAAI,+CAA+C,KAAK,MAAM,EAAE;MACjJ;AACA,aAAO,KAAK,WAAW,KAAK,MAAM,KAAK,OAAO,MAAM,CAAC;IACvD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;EAEA,GAAgC,SAAmE;AACjG,WAAOE,IAAG,MAAM,OAAO;EACzB;;AAKF,IAAMC,mBAAN,MAAqB;EACV;EAET,YAAa,UAA0B;AACrC,SAAK,WAAW;EAClB;EAEA,GAAiC,SAAmE;AAClG,WAAOD,IAAG,MAAM,OAAO;EACzB;EAEA,OAAQ,OAAa;AACnB,UAAM,SAAS,MAAM,CAAC;AACtB,UAAM,UAAU,KAAK,SAAS,MAAM;AACpC,QAAI,WAAW,MAAM;AACnB,aAAO,QAAQ,OAAO,KAAK;IAC7B,OAAO;AACL,YAAM,WAAW,qCAAqC,KAAK,UAAU,KAAK,CAAC,+BAA+B,OAAO,KAAK,KAAK,QAAQ,CAAC,gBAAgB;IACtJ;EACF;;AAGI,SAAUA,IAAyC,MAA+C,OAA8C;AACpJ,SAAO,IAAIC,iBAAgB;IACzB,GAAI,KAAK,YAAY,EAAE,CAAE,KAA2B,MAAM,GAAG,KAAI;IACjE,GAAI,MAAM,YAAY,EAAE,CAAE,MAA4B,MAAM,GAAG,MAAK;GAClD;AACtB;AAEM,IAAOC,SAAP,MAAY;EACP;EACA;EACA;EACA;EACA;EACA;EAET,YAAaJ,OAAY,QAAgB,YAAsB,YAAoB;AACjF,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,UAAU,IAAID,SAAQC,OAAM,QAAQ,UAAU;AACnD,SAAK,UAAU,IAAIC,SAAQD,OAAM,QAAQ,UAAU;EACrD;EAEA,OAAQ,OAAiB;AACvB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;EAEA,OAAQ,OAAa;AACnB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;;AAGI,SAAUK,MAAmD,EAAE,MAAAL,OAAM,QAAQ,QAAAM,UAAQ,QAAAC,SAAM,GAAsE;AACrK,SAAO,IAAIH,OAAMJ,OAAM,QAAQM,UAAQC,QAAM;AAC/C;AAEM,SAAUC,OAAoD,EAAE,MAAAR,OAAM,QAAQ,UAAAS,UAAQ,GAAoD;AAC9I,QAAM,EAAE,QAAAH,UAAQ,QAAAC,SAAM,IAAKG,gBAAMD,WAAUT,KAAI;AAC/C,SAAOK,MAAK;IACV;IACA,MAAAL;IACA,QAAAM;IACA,QAAQ,CAAC,SAA6BK,QAAOJ,SAAO,IAAI,CAAC;GAC1D;AACH;AAEA,SAASA,SAAQK,SAAgB,aAAqC,aAAqBZ,OAAY;AAErG,MAAI,MAAMY,QAAO;AACjB,SAAOA,QAAO,MAAM,CAAC,MAAM,KAAK;AAC9B,MAAE;EACJ;AAGA,QAAM,MAAM,IAAI,WAAY,MAAM,cAAc,IAAK,CAAC;AAGtD,MAAI,OAAO;AACX,MAAI,SAAS;AACb,MAAI,UAAU;AACd,WAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAE5B,UAAMC,SAAQ,YAAYD,QAAO,CAAC,CAAC;AACnC,QAAIC,WAAU,QAAW;AACvB,YAAM,IAAI,YAAY,OAAOb,KAAI,YAAY;IAC/C;AAGA,aAAU,UAAU,cAAea;AACnC,YAAQ;AAGR,QAAI,QAAQ,GAAG;AACb,cAAQ;AACR,UAAI,SAAS,IAAI,MAAQ,UAAU;IACrC;EACF;AAGA,MAAI,QAAQ,gBAAgB,MAAQ,UAAW,IAAI,UAAY,GAAG;AAChE,UAAM,IAAI,YAAY,wBAAwB;EAChD;AAEA,SAAO;AACT;AAEA,SAASP,SAAQ,MAAkBG,WAAkB,aAAmB;AACtE,QAAM,MAAMA,UAASA,UAAS,SAAS,CAAC,MAAM;AAC9C,QAAM,QAAQ,KAAK,eAAe;AAClC,MAAI,MAAM;AAEV,MAAI,OAAO;AACX,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAEpC,aAAU,UAAU,IAAK,KAAK,CAAC;AAC/B,YAAQ;AAGR,WAAO,OAAO,aAAa;AACzB,cAAQ;AACR,aAAOA,UAAS,OAAQ,UAAU,IAAK;IACzC;EACF;AAGA,MAAI,SAAS,GAAG;AACd,WAAOA,UAAS,OAAQ,UAAW,cAAc,IAAM;EACzD;AAGA,MAAI,KAAK;AACP,YAAS,IAAI,SAAS,cAAe,OAAO,GAAG;AAC7C,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEA,SAASK,mBAAmBL,WAAgB;AAE1C,QAAM,cAAsC,CAAA;AAC5C,WAAS,IAAI,GAAG,IAAIA,UAAS,QAAQ,EAAE,GAAG;AACxC,gBAAYA,UAAS,CAAC,CAAC,IAAI;EAC7B;AACA,SAAO;AACT;AAKM,SAAUM,SAAsD,EAAE,MAAAf,OAAM,QAAQ,aAAa,UAAAS,UAAQ,GAAyE;AAClL,QAAM,cAAcK,mBAAkBL,SAAQ;AAC9C,SAAOJ,MAAK;IACV;IACA,MAAAL;IACA,OAAQ,OAAiB;AACvB,aAAOM,SAAO,OAAOG,WAAU,WAAW;IAC5C;IACA,OAAQ,OAAa;AACnB,aAAOF,SAAO,OAAO,aAAa,aAAaP,KAAI;IACrD;GACD;AACH;;;AC9OO,IAAMgB,UAASC,SAAQ;EAC5B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMC,eAAcD,SAAQ;EACjC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAME,aAAYF,SAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMG,kBAAiBH,SAAQ;EACpC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMI,aAAYJ,SAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMK,kBAAiBL,SAAQ;EACpC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMM,gBAAeN,SAAQ;EAClC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMO,qBAAoBP,SAAQ;EACvC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMQ,WAAUR,SAAQ;EAC7B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;;;AC7DM,IAAMS,UAASC,OAAM;EAC1B,QAAQ;EACR,MAAM;EACN,UAAU;CACX;AAEM,IAAMC,eAAcD,OAAM;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;CACX;;;ACVM,IAAME,aAAYC,OAAM;EAC7B,MAAM;EACN,QAAQ;EACR,UAAU;CACX;AAEM,IAAMC,gBAAeD,OAAM;EAChC,MAAM;EACN,QAAQ;EACR,UAAU;CACX;;;ACXD,IAAIE,YAAWC;AAEf,IAAIC,OAAM;AAAV,IACIC,QAAO;AADX,IAEIC,UAAS,CAACD;AAFd,IAGIE,OAAM,KAAK,IAAI,GAAG,EAAE;AAOxB,SAASJ,SAAO,KAAK,KAAK,QAAM;AAC9B,QAAM,OAAO,CAAA;AACb,WAAS,UAAU;AACnB,MAAI,YAAY;AAEhB,SAAM,OAAOI,MAAK;AAChB,QAAI,QAAQ,IAAK,MAAM,MAAQH;AAC/B,WAAO;EACT;AACA,SAAM,MAAME,SAAQ;AAClB,QAAI,QAAQ,IAAK,MAAM,MAAQF;AAC/B,aAAS;EACX;AACA,MAAI,MAAM,IAAI,MAAM;AAGpB,EAAAD,SAAO,QAAQ,SAAS,YAAY;AAEpC,SAAO;AACT;AAEA,IAAIK,WAASC;AAEb,IAAIC,SAAQ;AAAZ,IACIC,UAAS;AAMb,SAASF,MAAK,KAAK,QAAM;AACvB,MAAI,MAAS,GACT,SAAS,UAAU,GACnB,QAAS,GACT,UAAU,QACV,GACA,IAAI,IAAI;AAEZ,KAAG;AACD,QAAI,WAAW,GAAG;AAEhB,MAAAA,MAAK,QAAQ;AACb,YAAM,IAAI,WAAW,yBAAyB;IAChD;AACA,QAAI,IAAI,SAAS;AACjB,WAAO,QAAQ,MACV,IAAIE,YAAW,SACf,IAAIA,WAAU,KAAK,IAAI,GAAG,KAAK;AACpC,aAAS;EACX,SAAS,KAAKD;AAGd,EAAAD,MAAK,QAAQ,UAAU;AAEvB,SAAO;AACT;AAEA,IAAIG,MAAK,KAAK,IAAI,GAAI,CAAC;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AAEvB,IAAIC,UAAS,SAAgCC,QAAK;AAChD,SACEA,SAAQV,MAAK,IACbU,SAAQT,MAAK,IACbS,SAAQR,MAAK,IACbQ,SAAQP,MAAK,IACbO,SAAQN,MAAK,IACbM,SAAQL,MAAK,IACbK,SAAQJ,MAAK,IACbI,SAAQH,MAAK,IACbG,SAAQF,MAAK,IACA;AAEjB;AAEA,IAAIG,UAAS;EACT,QAAQrB;EACR,QAAQM;EACR,gBAAgBa;;AAGpB,IAAIG,gBAAeD;AAEnB,IAAAE,kBAAeD;;;ACrGT,SAAUE,SAAQ,MAAkB,SAAS,GAAC;AAClD,QAAMC,SAAOC,gBAAO,OAAO,MAAM,MAAM;AACvC,SAAO,CAACD,QAAMC,gBAAO,OAAO,KAAK;AACnC;AAEM,SAAUC,UAAU,KAAa,QAAoB,SAAS,GAAC;AACnE,EAAAD,gBAAO,OAAO,KAAK,QAAQ,MAAM;AACjC,SAAO;AACT;AAEM,SAAUE,gBAAgB,KAAW;AACzC,SAAOF,gBAAO,eAAe,GAAG;AAClC;;;ACPM,SAAUG,QAA8BC,QAAYC,SAAkB;AAC1E,QAAM,OAAOA,QAAO;AACpB,QAAM,aAAoBC,gBAAeF,MAAI;AAC7C,QAAM,eAAe,aAAoBE,gBAAe,IAAI;AAE5D,QAAM,QAAQ,IAAI,WAAW,eAAe,IAAI;AAChD,EAAOC,UAASH,QAAM,OAAO,CAAC;AAC9B,EAAOG,UAAS,MAAM,OAAO,UAAU;AACvC,QAAM,IAAIF,SAAQ,YAAY;AAE9B,SAAO,IAAIG,QAAOJ,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAKM,SAAUI,SAAQ,WAAqB;AAC3C,QAAM,QAAQC,QAAO,SAAS;AAC9B,QAAM,CAACN,QAAM,UAAU,IAAWK,SAAO,KAAK;AAC9C,QAAM,CAAC,MAAM,YAAY,IAAWA,SAAO,MAAM,SAAS,UAAU,CAAC;AACrE,QAAMJ,UAAS,MAAM,SAAS,aAAa,YAAY;AAEvD,MAAIA,QAAO,eAAe,MAAM;AAC9B,UAAM,IAAI,MAAM,kBAAkB;EACpC;AAEA,SAAO,IAAIG,QAAOJ,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAEM,SAAUM,QAAQ,GAAoB,GAAU;AACpD,MAAI,MAAM,GAAG;AACX,WAAO;EACT,OAAO;AACL,UAAM,OAAO;AAEb,WACE,EAAE,SAAS,KAAK,QAChB,EAAE,SAAS,KAAK,QAChB,KAAK,iBAAiB,cACtBA,QAAW,EAAE,OAAO,KAAK,KAAK;EAElC;AACF;AAMM,IAAOH,UAAP,MAAa;EACR;EACA;EACA;EACA;;;;EAKT,YAAaJ,QAAY,MAAYC,SAAoB,OAAiB;AACxE,SAAK,OAAOD;AACZ,SAAK,OAAO;AACZ,SAAK,SAASC;AACd,SAAK,QAAQ;EACf;;;;AC1DI,SAAUO,QAA0F,MAASC,QAAmC;AACpJ,QAAM,EAAE,OAAO,SAAAC,SAAO,IAAK;AAC3B,UAAQA,UAAS;IACf,KAAK;AACH,aAAOC,YACL,OACAC,WAAU,IAAI,GACdH,UAAqCI,WAAU,OAAO;IAE1D;AACE,aAAOC,YACL,OACAF,WAAU,IAAI,GACbH,UAAQM,QAAO,OAAwC;EAE9D;AACF;AAYA,IAAMC,SAAQ,oBAAI,QAAO;AAEzB,SAASC,WAAW,KAAoB;AACtC,QAAMA,cAAYD,OAAM,IAAI,GAAG;AAC/B,MAAIC,eAAa,MAAM;AACrB,UAAMA,cAAY,oBAAI,IAAG;AACzB,IAAAD,OAAM,IAAI,KAAKC,WAAS;AACxB,WAAOA;EACT;AACA,SAAOA;AACT;AAEM,IAAOC,OAAP,MAAO,KAAG;EACL;EACA;EACA;EACA;EACA;;;;;;EAOT,YAAaC,UAAkBC,QAAc,WAAqC,OAAiB;AACjG,SAAK,OAAOA;AACZ,SAAK,UAAUD;AACf,SAAK,YAAY;AACjB,SAAK,QAAQ;AAIb,SAAK,GAAG,IAAI;EACd;;;;;;;EAQA,IAAI,QAAK;AACP,WAAO;EACT;;EAGA,IAAI,aAAU;AACZ,WAAO,KAAK,MAAM;EACpB;;EAGA,IAAI,aAAU;AACZ,WAAO,KAAK,MAAM;EACpB;EAEA,OAAI;AACF,YAAQ,KAAK,SAAS;MACpB,KAAK,GAAG;AACN,eAAO;MACT;MACA,KAAK,GAAG;AACN,cAAM,EAAE,MAAAC,QAAM,UAAS,IAAK;AAE5B,YAAIA,WAASC,cAAa;AACxB,gBAAM,IAAI,MAAM,0CAA0C;QAC5D;AAGA,YAAI,UAAU,SAASC,eAAc;AACnC,gBAAM,IAAI,MAAM,oDAAoD;QACtE;AAEA,eACE,KAAI,SACF,SAA6C;MAGnD;MACA,SAAS;AACP,cAAM,MACJ,+BAA+B,KAAK,OAAO,4CAA4C;MAE3F;IACF;EACF;EAEA,OAAI;AACF,YAAQ,KAAK,SAAS;MACpB,KAAK,GAAG;AACN,cAAM,EAAE,MAAAF,QAAM,QAAAG,QAAM,IAAK,KAAK;AAC9B,cAAM,YAAmBC,QAAOJ,QAAMG,OAAM;AAC5C,eACE,KAAI,SAAS,KAAK,MAAM,SAAS;MAErC;MACA,KAAK,GAAG;AACN,eAAO;MACT;MACA,SAAS;AACP,cAAM,MACJ,+BAA+B,KAAK,OAAO,4CAA4C;MAE3F;IACF;EACF;EAEA,OAAQ,OAAc;AACpB,WAAO,KAAI,OAAO,MAAM,KAAK;EAC/B;EAEA,OAAO,OAAsFE,OAA4C,OAAc;AACrJ,UAAM,UAAU;AAChB,WACE,WAAW,QACXA,MAAK,SAAS,QAAQ,QACtBA,MAAK,YAAY,QAAQ,WAClBC,QAAOD,MAAK,WAAW,QAAQ,SAAS;EAEnD;EAEA,SAAUE,QAAmC;AAC3C,WAAOC,QAAO,MAAMD,MAAI;EAC1B;EAEA,SAAM;AACJ,WAAO,EAAE,KAAKC,QAAO,IAAI,EAAC;EAC5B;EAEA,OAAI;AACF,WAAO;EACT;EAES,CAAC,OAAO,WAAW,IAAI;;EAIhC,CAAC,OAAO,IAAI,4BAA4B,CAAC,IAAC;AACxC,WAAO,OAAO,KAAK,SAAQ,CAAE;EAC/B;;;;;;;;;;;EAYA,OAAO,MAAwF,OAA+C;AAC5I,QAAI,SAAS,MAAM;AACjB,aAAO;IACT;AAEA,UAAMC,SAAQ;AACd,QAAIA,kBAAiB,MAAK;AAExB,aAAOA;IACT,WAAYA,OAAM,GAAG,KAAK,QAAQA,OAAM,GAAG,MAAMA,OAAM,SAAUA,OAAM,UAAUA,QAAO;AAMtF,YAAM,EAAE,SAAAV,UAAS,MAAAC,QAAM,WAAW,MAAK,IAAKS;AAC5C,aAAO,IAAI,KACTV,UACAC,QACA,WACA,SAASU,WAAUX,UAASC,QAAM,UAAU,KAAK,CAAC;IAEtD,WAAWS,OAAME,UAAS,MAAM,MAAM;AAIpC,YAAM,EAAE,SAAAZ,UAAS,WAAW,MAAAC,OAAI,IAAKS;AACrC,YAAMN,UAAgBS,SAAO,SAAS;AACtC,aAAO,KAAI,OAAOb,UAASC,QAAMG,OAAM;IACzC,OAAO;AAGL,aAAO;IACT;EACF;;;;;;EAOA,OAAO,OAAsFJ,UAAkBC,QAAcG,SAAgC;AAC3J,QAAI,OAAOH,WAAS,UAAU;AAC5B,YAAM,IAAI,MAAM,uCAAuC;IACzD;AAEA,QAAI,EAAEG,QAAO,iBAAiB,aAAa;AACzC,YAAM,IAAI,MAAM,gBAAgB;IAClC;AAEA,YAAQJ,UAAS;MACf,KAAK,GAAG;AACN,YAAIC,WAASC,cAAa;AACxB,gBAAM,IAAI,MACR,wCAAwCA,YAAW,kBAAkB;QAEzE,OAAO;AACL,iBAAO,IAAI,KAAIF,UAASC,QAAMG,SAAQA,QAAO,KAAK;QACpD;MACF;MACA,KAAK,GAAG;AACN,cAAM,QAAQO,WAAUX,UAASC,QAAMG,QAAO,KAAK;AACnD,eAAO,IAAI,KAAIJ,UAASC,QAAMG,SAAQ,KAAK;MAC7C;MACA,SAAS;AACP,cAAM,IAAI,MAAM,iBAAiB;MACnC;IACF;EACF;;;;EAKA,OAAO,SAAuBA,SAAgD;AAC5E,WAAO,KAAI,OAAO,GAAGF,cAAaE,OAAM;EAC1C;;;;;;;EAQA,OAAO,SAAyDH,QAAYG,SAAgC;AAC1G,WAAO,KAAI,OAAO,GAAGH,QAAMG,OAAM;EACnC;;;;;;;;EASA,OAAO,OAAoF,OAAuD;AAChJ,UAAM,CAAC,KAAK,SAAS,IAAI,KAAI,YAAY,KAAK;AAC9C,QAAI,UAAU,WAAW,GAAG;AAC1B,YAAM,IAAI,MAAM,kBAAkB;IACpC;AACA,WAAO;EACT;;;;;;;;;;EAWA,OAAO,YAA2E,OAAyC;AACzH,UAAM,QAAQ,KAAI,aAAa,KAAK;AACpC,UAAM,aAAa,MAAM,OAAO,MAAM;AACtC,UAAM,iBAAiBU,QACrB,MAAM,SAAS,YAAY,aAAa,MAAM,aAAa,CAAC;AAE9D,QAAI,eAAe,eAAe,MAAM,eAAe;AACrD,YAAM,IAAI,MAAM,kBAAkB;IACpC;AACA,UAAM,cAAc,eAAe,SACjC,MAAM,gBAAgB,MAAM,UAAU;AAExC,UAAMV,UAAS,IAAWW,QACxB,MAAM,eACN,MAAM,YACN,aACA,cAAc;AAEhB,UAAM,MACJ,MAAM,YAAY,IACd,KAAI,SAASX,OAA0C,IACvD,KAAI,SAAS,MAAM,OAAOA,OAAM;AACtC,WAAO,CAAC,KAAwB,MAAM,SAAS,MAAM,IAAI,CAAC;EAC5D;;;;;;;;;;EAWA,OAAO,aAA4E,cAAgD;AACjI,QAAI,SAAS;AACb,UAAM,OAAO,MAAa;AACxB,YAAM,CAAC,GAAGY,QAAM,IAAWH,SAAO,aAAa,SAAS,MAAM,CAAC;AAC/D,gBAAUG;AACV,aAAO;IACT;AAEA,QAAIhB,WAAU,KAAI;AAClB,QAAI,QAAQE;AACZ,QAAIF,aAAsB,IAAI;AAE5B,MAAAA,WAAU;AACV,eAAS;IACX,OAAO;AACL,cAAQ,KAAI;IACd;AAEA,QAAIA,aAAY,KAAKA,aAAY,GAAG;AAClC,YAAM,IAAI,WAAW,uBAAuBA,QAAO,EAAE;IACvD;AAEA,UAAM,aAAa;AACnB,UAAM,gBAAgB,KAAI;AAC1B,UAAM,aAAa,KAAI;AACvB,UAAM,OAAO,SAAS;AACtB,UAAM,gBAAgB,OAAO;AAE7B,WAAO,EAAE,SAAAA,UAAS,OAAO,eAAe,YAAY,eAAe,KAAI;EACzE;;;;;;;EAQA,OAAO,MAA0G,QAAkEQ,QAAmC;AACpN,UAAM,CAAC,QAAQ,KAAK,IAAIS,iBAAgB,QAAQT,MAAI;AAEpD,UAAM,MAAM,KAAI,OAAO,KAAK;AAE5B,QAAI,IAAI,YAAY,KAAK,OAAO,CAAC,MAAM,KAAK;AAC1C,YAAM,MAAM,wDAAwD;IACtE;AAGA,IAAAV,WAAU,GAAG,EAAE,IAAI,QAAQ,MAAM;AAEjC,WAAO;EACT;;AAGF,SAASmB,iBAAqH,QAAkET,QAAmC;AACjO,UAAQ,OAAO,CAAC,GAAG;;IAEjB,KAAK,KAAK;AACR,YAAM,UAAUA,UAAQU;AACxB,aAAO;QACLA,WAAU;QACV,QAAQ,OAAO,GAAGA,WAAU,MAAM,GAAG,MAAM,EAAE;;IAEjD;IACA,KAAKA,WAAU,QAAQ;AACrB,YAAM,UAAUV,UAAQU;AACxB,aAAO,CAACA,WAAU,QAAkB,QAAQ,OAAO,MAAM,CAAC;IAC5D;IACA,KAAKC,QAAO,QAAQ;AAClB,YAAM,UAAUX,UAAQW;AACxB,aAAO,CAACA,QAAO,QAAkB,QAAQ,OAAO,MAAM,CAAC;IACzD;IACA,KAAKC,QAAO,QAAQ;AAClB,YAAM,UAAUZ,UAAQY;AACxB,aAAO,CAACA,QAAO,QAAkB,QAAQ,OAAO,MAAM,CAAC;IACzD;IACA,SAAS;AACP,UAAIZ,UAAQ,MAAM;AAChB,cAAM,MACJ,yFAAyF;MAE7F;AACA,aAAO,CAAC,OAAO,CAAC,GAAaA,OAAK,OAAO,MAAM,CAAC;IAClD;EACF;AACF;AAEA,SAASa,YAAY,OAAmBxB,SAA4BW,QAA+B;AACjG,QAAM,EAAE,OAAM,IAAKA;AACnB,MAAI,WAAWU,WAAU,QAAQ;AAC/B,UAAM,MAAM,8BAA8BV,OAAK,IAAI,WAAW;EAChE;AAEA,QAAM,MAAMX,QAAM,IAAI,MAAM;AAC5B,MAAI,OAAO,MAAM;AACf,UAAMyB,OAAMd,OAAK,OAAO,KAAK,EAAE,MAAM,CAAC;AACtC,IAAAX,QAAM,IAAI,QAAQyB,IAAG;AACrB,WAAOA;EACT,OAAO;AACL,WAAO;EACT;AACF;AAEA,SAASC,YAAoC,OAAmB1B,SAA4BW,QAAkC;AAC5H,QAAM,EAAE,OAAM,IAAKA;AACnB,QAAM,MAAMX,QAAM,IAAI,MAAM;AAC5B,MAAI,OAAO,MAAM;AACf,UAAMyB,OAAMd,OAAK,OAAO,KAAK;AAC7B,IAAAX,QAAM,IAAI,QAAQyB,IAAG;AACrB,WAAOA;EACT,OAAO;AACL,WAAO;EACT;AACF;AAEA,IAAMpB,eAAc;AACpB,IAAMC,gBAAe;AAErB,SAASQ,WAAWX,UAAsBC,QAAc,WAAqB;AAC3E,QAAM,aAAoBuB,gBAAexB,QAAO;AAChD,QAAM,aAAa,aAAoBwB,gBAAevB,MAAI;AAC1D,QAAM,QAAQ,IAAI,WAAW,aAAa,UAAU,UAAU;AAC9D,EAAOwB,UAASzB,UAAS,OAAO,CAAC;AACjC,EAAOyB,UAASxB,QAAM,OAAO,UAAU;AACvC,QAAM,IAAI,WAAW,UAAU;AAC/B,SAAO;AACT;AAEA,IAAMW,aAAY,OAAO,IAAI,kBAAkB;;;AC3cxC,IAAMc,UAASC,SAAQ;EAC5B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMC,aAAYD,SAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAME,aAAYF,SAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMG,gBAAeH,SAAQ;EAClC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;;;ACnBK,IAAO,uBAAP,MAA2B;EACxB;EACA;EACA;EACA;EACA;EAEP,YAAa,OAAgB,OAAO,eAAuB,GAAC;AAC1D,SAAK,OAAO;AACZ,SAAK,WAAW,oBAAI,IAAG;AACvB,SAAK,SAAS,oBAAI,IAAG;AACrB,SAAK,iBAAiB,oBAAI,IAAG;AAC7B,SAAK,eAAe;EACtB;EAEA,iBAAkB,KAAU,OAAoB;AAC9C,UAAM,MAAMI,QAAO,OAAO,IAAI,UAAU,KAAK;AAC7C,SAAK,SAAS,IAAI,KAAK,KAAK;EAC9B;EAEA,iBAAkB,KAAU,eAA4B;AACtD,UAAM,MAAMA,QAAO,OAAO,IAAI,UAAU,KAAK;AAC7C,SAAK,eAAe,IAAI,KAAK,aAAa;EAC5C;EAEA,SAAU,KAAU,OAAY;AAC9B,UAAM,MAAMA,QAAO,OAAO,IAAI,UAAU,KAAK;AAC7C,SAAK,OAAO,IAAI,KAAK,KAAK;EAC5B;;;;ACnCF,SAAS,cAAe,KAAa;AACnC,MAAI,MAAkB,IAAI,WAAW,IAAI,OAAO,CAAC,KAAK,SAAQ;AAC5D,WAAO,MAAM,eAAe,IAAI;EAClC,GAAG,CAAC,CAAC;AACL,MAAI,SAAS;AAEb,aAAW,OAAO,KAAK;AACrB,UAAM,OAAO,KAAK,KAAK,MAAM;AAE7B,cAAU,eAAe,GAAG;EAC9B;AAEA,SAAO;AACT;AAEA,IAAA,yBAAe;;;ACdT,SAAU,YAAa,KAAQ;AACnC,SAAO,uBAAG;IACR,IAAI;IAAS,IAAI;IAAM,IAAI,UAAU;IAAM,IAAI,UAAU,OAAO;GACjE;AACH;;;ACyCM,IAAO,SAAP,MAAa;EACV;EACU;EACA;EACV;EACA;EACA;EACA;EACA;EACU;EACA;EAEjB,YAAa,YAA8B,MAAgB;AACzD,SAAK,SAAS,WAAW;AACzB,SAAK,aAAa,WAAW;AAC7B,SAAK,UAAU,WAAW;AAC1B,SAAK,QAAQ,oBAAI,IAAG;AACpB,SAAK,MAAM,WAAW,OAAO,aAAa,wBAAwB,WAAW,MAAM,EAAE;AAErF,SAAK,gBAAgB;AACrB,SAAK,YAAY;AACjB,SAAK,gBAAgB;AACrB,SAAK,6BAA6B,KAAK,8BAA8B;EACvE;EAEA,UAAW,GAAS;AAClB,SAAK;AACL,SAAK,gBAAgB,oBAAI,KAAI,GAAI,QAAO;AACxC,SAAK,aAAa;EACpB;EAEA,cAAe,GAAS;AACtB,SAAK;AACL,SAAK,gBAAgB,oBAAI,KAAI,GAAI,QAAO;AACxC,SAAK,iBAAiB;EACxB;EAEA,YAAS;AACP,WAAQ,KAAK,aAAa,KAAK,gBAAgB;EACjD;EAEO,MAAM,iBAAkBC,UAAsB;AACnD,UAAMC,WAAU,IAAI,qBAAoB;AACxC,UAAM,aAAa,oBAAI,IAAG;AAE1B,eAAW,CAAC,KAAK,KAAK,KAAK,KAAK,MAAM,QAAO,GAAI;AAC/C,UAAI;AACF,cAAM,QAAQ,MAAM,KAAK,WAAW,IAAI,MAAM,KAAKD,QAAO;AAG1D,YAAI,MAAM,aAAa,SAAS,UAAU;AACxC,cAAI,MAAM,aAAa,KAAK,4BAA4B;AACtD,iBAAK,IAAI,iCAAiC,MAAM,GAAG;AAEnD,uBAAW,IAAI,GAAG;AAClB,YAAAC,SAAQ,SAAS,MAAM,KAAK;cAC1B,MAAM;cACN,QAAQ,YAAY,MAAM,GAAG;aAC9B;UACH,OAAO;AACL,iBAAK,IAAI,uBAAuB,MAAM,GAAG;AAEzC,YAAAA,SAAQ,iBAAiB,MAAM,KAAK;cAClC,KAAK,MAAM,IAAI;cACf,MAAM,kBAAkB;aACzB;UACH;QACF,OAAO;AACL,eAAK,IAAI,wBAAwB,MAAM,GAAG;AAE1C,qBAAW,IAAI,GAAG;AAClB,UAAAA,SAAQ,SAAS,MAAM,KAAK;YAC1B,MAAM;YACN,QAAQ,YAAY,MAAM,GAAG;WAC9B;QACH;MACF,SAAS,KAAU;AACjB,YAAI,IAAI,SAAS,iBAAiB;AAChC,gBAAM;QACR;AAEA,aAAK,IAAI,4BAA4B,MAAM,GAAG;AAI9C,YAAI,CAAC,MAAM,cAAc;AACvB;QACF;AAGA,YAAI,MAAM,kBAAkB,MAAM;AAChC;QACF;AAEA,cAAM,gBAAgB;AACtB,QAAAA,SAAQ,iBAAiB,MAAM,KAAK;UAClC,KAAK,MAAM,IAAI;UACf,MAAM,kBAAkB;SACzB;MACH;IACF;AAGA,QAAIA,SAAQ,OAAO,OAAO,KAAKA,SAAQ,eAAe,OAAO,GAAG;AAC9D,WAAK,IAAI,iBAAiB;AAC1B,YAAM,KAAK,QAAQ,YAAY,KAAK,QAAQA,UAASD,QAAO;AAC5D,WAAK,IAAI,cAAc;AAGvB,WAAK,UAAU,CAAC,GAAGC,SAAQ,OAAO,OAAM,CAAE,EAAE,OAAO,CAAC,KAAK,SAAS,MAAM,KAAK,KAAK,YAAY,CAAC,CAAC;AAIhG,iBAAW,OAAO,YAAY;AAC5B,aAAK,MAAM,OAAO,GAAG;MACvB;IACF;EACF;;;;ACpII,IAAO,gBAAP,MAAoB;EACjB;EACA;EACS;EACC;EACA;EACA;EAEjB,YAAa,YAAqC,OAA0B,CAAA,GAAE;AAC5E,SAAK,aAAa,WAAW;AAC7B,SAAK,UAAU,WAAW;AAC1B,SAAK,6BAA6B,KAAK;AACvC,SAAK,MAAM,WAAW,OAAO,aAAa,+BAA+B;AACzE,SAAK,SAAS,WAAW;AAEzB,SAAK,YAAY,eAAe;MAC9B,MAAM;MACN,SAAS,WAAW;KACrB;AAED,SAAK,QAAQ,iBAAiB,mBAAmB,CAAC,QAAO;AACvD,WAAK,eAAe,IAAI,OAAO,MAAM,IAAI,OAAO,OAAO,EACpD,MAAM,SAAM;AACX,aAAK,IAAI,MAAM,2CAA2C,IAAI,OAAO,MAAM,GAAG;MAChF,CAAC;IACL,CAAC;AACD,SAAK,QAAQ,iBAAiB,qBAAqB,SAAM;AACvD,WAAK,iBAAiB,IAAI,MAAM;IAClC,CAAC;EACH;EAEA,cAAeC,SAAc;AAC3B,UAAM,SAAS,KAAK,UAAU,IAAIA,OAAM;AAExC,QAAI,UAAU,MAAM;AAClB,aAAO;IACT;AAEA,WAAO;MACL,MAAM,OAAO;MACb,OAAO,OAAO,UAAS;MACvB,MAAM,OAAO;MACb,UAAU,OAAO;MACjB,WAAW,OAAO;;EAEtB;EAEA,gBAAiBA,SAAc;AAC7B,UAAM,SAAS,KAAK,UAAU,IAAIA,OAAM;AAExC,QAAI,UAAU,MAAM;AAClB,aAAO;IACT;AAEA,WAAO,CAAC,GAAG,OAAO,MAAM,OAAM,CAAE;EAClC;EAEA,QAAK;AACH,WAAO,MAAM,KAAK,KAAK,UAAU,OAAM,CAAE,EAAE,IAAI,CAAC,MAAM,EAAE,MAAM;EAChE;;;;EAKA,MAAM,eAAgBA,SAAgBC,UAAuB;AAC3D,QAAI,SAAS,KAAK,UAAU,IAAID,OAAM;AAEtC,QAAI,UAAU,MAAM;AAClB,eAAS,IAAI,OAAO;QAClB,QAAAA;QACA,YAAY,KAAK;QACjB,SAAS,KAAK;QACd,QAAQ,KAAK;SACZ;QACD,4BAA4B,KAAK;OAClC;AACD,WAAK,UAAU,IAAIA,SAAQ,MAAM;IACnC;AAGA,WAAO,cAAcC,SAAQ,QAAQ,OAAO,CAAC,KAAK,SAAS,MAAM,KAAK,KAAK,YAAY,CAAC,KAAK,CAAC;AAE9F,QAAIA,SAAQ,YAAY,MAAM;AAE5B,UAAIA,SAAQ,SAAS,SAAS,MAAM;AAClC,eAAO,MAAM,MAAK;MACpB;AAGA,iBAAW,SAASA,SAAQ,SAAS,SAAS;AAC5C,cAAM,MAAMC,KAAI,OAAO,MAAM,GAAG;AAChC,cAAM,SAAS,SAAmB,IAAI,UAAU,OAAO,QAAQ;AAE/D,YAAI,MAAM,WAAW,MAAM;AACzB,eAAK,IAAI,0CAA0CF,SAAQ,GAAG;AAC9D,iBAAO,MAAM,OAAO,MAAM;QAC5B,OAAO;AACL,cAAI,MAAM,aAAa,SAAS,UAAU;AACxC,iBAAK,IAAI,wCAAwCA,SAAQ,GAAG;UAC9D,OAAO;AACL,iBAAK,IAAI,+BAA+BA,SAAQ,GAAG;UACrD;AAEA,iBAAO,MAAM,IAAI,QAAQ;YACvB;YACA,UAAU,MAAM;YAChB,UAAU,MAAM,YAAY,SAAS;YACrC,cAAc,MAAM,gBAAgB;WACrC;QACH;MACF;IACF;AAEA,SAAK,IAAI,qBAAqB;AAC9B,UAAM,OAAO,iBAAgB;EAC/B;EAEA,MAAM,cAAe,KAAUG,UAAoE;AACjG,UAAM,SAAS,SAAmB,IAAI,UAAU,OAAO,QAAQ;AAC/D,UAAM,UAAoB,CAAA;AAE1B,eAAW,UAAU,KAAK,UAAU,OAAM,GAAI;AAC5C,UAAI,OAAO,MAAM,IAAI,MAAM,GAAG;AAC5B,gBAAQ,KAAK,MAAM;MACrB;IACF;AAEA,UAAM,QAAQ,IACZ,QAAQ,IAAI,OAAO,WAAW,OAAO,iBAAiBA,QAAO,CAAC,CAAC;EAEnE;EAEA,iBAAkBH,SAAc;AAC9B,SAAK,UAAU,OAAOA,OAAM;EAC9B;;;;ACrJF,IAAM,iBAAN,cAA6B,gBAAkD;EAC5D;EACA;EACA;EAEjB,YAAa,YAAsC,MAA0B;AAC3E,UAAM,YAAY;MAChB,GAAG;MACH,MAAM;KACP;AAED,SAAK,WAAW,WAAW;AAC3B,SAAK,UAAU,WAAW;AAC1B,SAAK,SAAS,WAAW;EAC3B;EAEA,MAAM,cAAe,KAAU,UAAkBI,UAAqB;AACpE,SAAK,IAAI,mCAAmC,KAAK,QAAQ;AAEzD,UAAM,SAAS,MAAM,KAAK,SAAS,iBAAiB,KAAK,UAAUA,QAAO;AAE1E,SAAK,IAAI,YAAY,UAAU,OAAO,MAAM,QAAQ,iBAAiB,GAAG;AAExE,QAAI,OAAO,OAAO,OAAO,SAAS,MAAM;AACtC,aAAO,OAAO;IAChB;AAEA,UAAM,IAAI,MAAM,6BAA6B;EAC/C;EAEA,OAAQ,iBAAkB,KAAUA,WAAwB,CAAA,GAAE;AAC5D,qBAAiB,YAAY,KAAK,QAAQ,cAAc,KAAKA,QAAO,GAAG;AACrE,YAAM,SAAS;IACjB;EACF;EAEA,cAAe,UAAgB;AAC7B,WAAO,SAAS,YAAW,EAAG;EAChC;EAEA,OAAQ,WAAmB,WAAiB;AAC1C,WAAO,UAAU,OAAO,SAAS;EACnC;EAEA,MAAM,kBAAmB,UAA4CA,UAAsB;AACzF,QAAI,SAAS,QAAQ,GAAG;AACtB,aAAO;IACT;AAEA,UAAM,aAAa,MAAM,KAAK,OAAO,KAAK,UAAUA,QAAO;AAE3D,WAAO,WAAW;EACpB;;AAGI,SAAU,qBAAsB,YAAsC,MAA0B;AACpG,SAAO,IAAI,eAAe,YAAY,IAAI;AAC5C;;;ACpEM,IAAO,QAAP,MAAY;EACC;EACA;EACA;EACA;EAEjB,YAAa,YAA2B;AACtC,SAAK,iBAAiB,WAAW,SAAS,oBAAoB,+BAA+B;AAC7F,SAAK,0BAA0B,WAAW,SAAS,oBAAoB,yCAAyC;AAChH,SAAK,eAAe,WAAW,SAAS,oBAAoB,mCAAmC;AAC/F,SAAK,wBAAwB,WAAW,SAAS,oBAAoB,6CAA6C;EACpH;EAEA,qBAAsB,QAAgB,GAAGC,SAAe;AACtD,UAAM,QAAuC;MAC3C,QAAQ;;AAGV,QAAIA,WAAU,MAAM;AAClB,YAAMA,QAAO,SAAQ,CAAE,IAAI;IAC7B;AAEA,SAAK,gBAAgB,UAAU,KAAK;EACtC;EAEA,8BAA+B,QAAgB,GAAGA,SAAe;AAC/D,UAAM,QAAuC;MAC3C,QAAQ;;AAGV,QAAIA,WAAU,MAAM;AAClB,YAAMA,QAAO,SAAQ,CAAE,IAAI;IAC7B;AAEA,SAAK,yBAAyB,UAAU,KAAK;EAC/C;EAEA,mBAAoB,OAAeA,SAAe;AAChD,UAAM,QAAgC;MACpC,QAAQ;;AAGV,QAAIA,WAAU,MAAM;AAClB,YAAMA,QAAO,SAAQ,CAAE,IAAI;IAC7B;AAEA,SAAK,cAAc,UAAU,KAAK;EACpC;EAEA,4BAA6B,OAAeA,SAAe;AACzD,UAAM,QAAgC;MACpC,QAAQ;;AAGV,QAAIA,WAAU,MAAM;AAClB,YAAMA,QAAO,SAAQ,CAAE,IAAI;IAC7B;AAEA,SAAK,uBAAuB,UAAU,KAAK;EAC7C;;;;AC3DF,IAAM,aAAN,cAA+B,IAAS;EACrB;EAEjB,YAAa,MAAoB;AAC/B,UAAK;AAEL,UAAM,EAAE,MAAAC,OAAM,QAAO,IAAK;AAE1B,SAAK,SAAS,QAAQ,eAAeA,KAAI;AACzC,SAAK,sBAAqB;EAC5B;EAEA,IAAK,KAAQC,QAAQ;AACnB,UAAM,IAAI,KAAKA,MAAK;AACpB,SAAK,sBAAqB;AAC1B,WAAO;EACT;EAEA,OAAQ,KAAM;AACZ,UAAM,UAAU,MAAM,OAAO,GAAG;AAChC,SAAK,sBAAqB;AAC1B,WAAO;EACT;EAEA,QAAK;AACH,UAAM,MAAK;AACX,SAAK,sBAAqB;EAC5B;EAEQ,wBAAqB;AAC3B,SAAK,OAAO,OAAO,KAAK,IAAI;EAC9B;;AAeI,SAAU,WAAmB,QAA4B;AAC7D,QAAM,EAAE,MAAAD,OAAM,QAAO,IAAK;AAC1B,MAAIE;AAEJ,MAAI,WAAW,MAAM;AACnB,IAAAA,OAAM,IAAI,WAAiB,EAAE,MAAAF,OAAM,QAAO,CAAE;EAC9C,OAAO;AACL,IAAAE,OAAM,oBAAI,IAAG;EACf;AAEA,SAAOA;AACT;;;AC3DM,SAAUC,MAAiD,EAAE,MAAAC,OAAM,MAAAC,QAAM,QAAAC,SAAM,GAA4E;AAC/J,SAAO,IAAIC,QAAOH,OAAMC,QAAMC,QAAM;AACtC;AAMM,IAAOC,UAAP,MAAa;EACR;EACA;EACA;EAET,YAAaH,OAAYC,QAAYC,UAAgD;AACnF,SAAK,OAAOF;AACZ,SAAK,OAAOC;AACZ,SAAK,SAASC;EAChB;EAEA,OAAQ,OAAiB;AACvB,QAAI,iBAAiB,YAAY;AAC/B,YAAM,SAAS,KAAK,OAAO,KAAK;AAChC,aAAO,kBAAkB,aACdE,QAAO,KAAK,MAAM,MAAM,IAE/B,OAAO,KAAK,CAAAC,YAAiBD,QAAO,KAAK,MAAMC,OAAM,CAAC;IAC5D,OAAO;AACL,YAAM,MAAM,mCAAmC;IAEjD;EACF;;;;AC/BF,SAASC,KAAKC,OAAyB;AACrC,SAAO,OAAM,SAAQ,IAAI,WAAW,MAAM,OAAO,OAAO,OAAOA,OAAM,IAAI,CAAC;AAC5E;AAEO,IAAMC,UAASC,MAAK;EACzB,MAAM;EACN,MAAM;EACN,QAAQH,KAAI,SAAS;CACtB;AAEM,IAAMI,UAASD,MAAK;EACzB,MAAM;EACN,MAAM;EACN,QAAQH,KAAI,SAAS;CACtB;;;AChBD,SAAS,cAAe,KAAe;AACrC,MAAI,EAAE,eAAe,aAAa;AAChC,UAAM,IAAI,MAAM,8BAA8B;EAChD;AAEA,QAAM,SAAmB,CAAA;AAEzB,SAAO,IAAI,SAAS,GAAG;AACrB,UAAM,MAAM,OAAO,GAAG;AACtB,WAAO,KAAK,GAAG;AACf,UAAM,IAAI,MAAM,eAAe,GAAG,CAAC;EACrC;AAEA,SAAO;AACT;AAEA,IAAA,yBAAe;;;AC6ET,IAAO,WAAP,cAAwB,kBAAiC;;;;EAI7C;EACA;EACC;EACA;EACA;EACT;EACS;EACT;EAER,YAAa,YAAgC,OAAqB,CAAA,GAAE;AAClE,UAAK;AAEL,oBAAgB,UAAU,IAAI;AAC9B,SAAK,QAAQ,eAAe;MAC1B,MAAM;MACN,SAAS,WAAW;KACrB;AACD,SAAK,QAAQ,WAAW;MACtB,MAAM;MACN,SAAS,WAAW;KACrB;AACD,SAAK,UAAU,WAAW;AAC1B,SAAK,oBAAoB,KAAK,qBAAqB;AACnD,SAAK,MAAM,WAAW,OAAO,aAAa,wBAAwB;AAClE,SAAK,aAAa,KAAK;AAEvB,SAAK,QAAQ,iBAAiB,mBAAmB,CAAC,QAAO;AACvD,WAAK,eAAe,IAAI,OAAO,MAAM,IAAI,OAAO,OAAO,EACpD,MAAM,SAAM;AACX,aAAK,IAAI,MAAM,2CAA2C,IAAI,OAAO,MAAM,GAAG;MAChF,CAAC;IACL,CAAC;AACD,SAAK,QAAQ,iBAAiB,kBAAkB,SAAM;AACpD,WAAK,cAAc,IAAI,MAAM,EAC1B,MAAM,SAAM;AACX,aAAK,IAAI,MAAM,oDAAoD,IAAI,QAAQ,GAAG;MACpF,CAAC;IACL,CAAC;AACD,SAAK,QAAQ,iBAAiB,qBAAqB,SAAM;AACvD,WAAK,iBAAiB,IAAI,MAAM;IAClC,CAAC;EACH;EAIQ,MAAM,SAAU,KAAUK,UAA6C;AAC7E,UAAM,SAAS,SAAmB,IAAI,UAAU,OAAO,QAAQ;AAC/D,QAAI,QAAQ,KAAK,MAAM,IAAI,MAAM;AAEjC,QAAI,SAAS,MAAM;AACjB,cAAQ;QACN;QACA,UAAUA,SAAQ,YAAY;QAC9B,UAAUA,SAAQ,YAAY,SAAS;QACvC,QAAQ;QACR,cAAc;;AAGhB,WAAK,MAAM,IAAI,QAAQ,KAAK;IAC9B;AAIA,QAAI,MAAM,aAAa,SAAS,YAAYA,SAAQ,aAAa,SAAS,WAAW;AACnF,YAAM,WAAW,SAAS;IAC5B;AAGA,UAAM,KAAK,sBAAqB;AAEhC,QAAI;AACF,UAAIA,SAAQ,aAAa,SAAS,WAAW;AAC3C,cAAMC,SAAQ,MAAM,UAAwC,MAAM,SAASD,UAAS,QAAQ;UAC1F,QAAQ,CAACC,WAAS;AAChB,mBAAO,OAAiB,IAAI,UAAU,QAAQA,OAAM,OAAO,IAAI,UAAU,MAAM;UACjF;UACA,cAAc;SACf;AAED,eAAOA,OAAM;MACf;AAEA,YAAM,QAAQ,MAAM,UAA2C,MAAM,YAAYD,UAAS,QAAQ;QAChG,QAAQ,CAACC,WAAS;AAChB,iBAAO,OAAiB,IAAI,UAAU,QAAQA,OAAM,OAAO,IAAI,UAAU,MAAM;QACjF;QACA,cAAc;OACf;AAED,aAAO,MAAM;IACf;AACE,UAAID,SAAQ,QAAQ,YAAY,MAAM;AACpC,aAAK,IAAI,4CAA4C,GAAG;AACxD,cAAM,SAAS;AAEf,cAAM,KAAK,sBAAqB;MAClC;IACF;EACF;EAEQ,MAAM,wBAAqB;AACjC,UAAM,KAAK,iBAAiB;AAG5B,iBAAa,KAAK,mBAAmB;AACrC,SAAK,sBAAsB,WAAW,MAAK;AACzC,WAAK,KAAK,aAAY,EACnB,MAAM,SAAM;AACX,aAAK,IAAI,mCAAmC,GAAG;MACjD,CAAC;IACL,GAAG,KAAK,iBAAiB;EAC3B;EAEQ,MAAM,eAAY;AACxB,SAAK,kBAAkB,OAAM;AAE7B,UAAM,QAAQ,IACZ,CAAC,GAAG,KAAK,MAAM,QAAO,CAAE,EAAE,IAAI,OAAO,CAACE,SAAQ,SAAS,MAAK;AAC1D,YAAM,OAAO,oBAAI,IAAG;AACpB,YAAMC,WAAU,IAAI,qBAAoB;AAExC,iBAAW,CAAC,KAAK,KAAK,KAAK,KAAK,MAAM,QAAO,GAAI;AAC/C,cAAM,iBAAiB,UAAU,IAAI,GAAG;AAIxC,YAAI,kBAAkB,MAAM,QAAQ;AAClC;QACF;AAEA,aAAK,IAAI,GAAG;AAEZ,QAAAA,SAAQ,iBAAiB,MAAM,KAAK;UAClC,KAAK,MAAM,IAAI;UACf,UAAU,MAAM;UAChB,UAAU,MAAM;UAChB,QAAQ,MAAM;UACd,cAAc,MAAM;SACrB;MACH;AAEA,UAAIA,SAAQ,SAAS,SAAS,GAAG;AAC/B;MACF;AAGA,UAAI;AACF,cAAM,KAAK,QAAQ,YAAYD,SAAQC,QAAO;AAG9C,mBAAW,OAAO,MAAM;AACtB,oBAAU,IAAI,GAAG;QACnB;MACF,SAAS,KAAU;AACjB,aAAK,IAAI,MAAM,2CAA2C,GAAG;MAC/D;IACF,CAAC,CAAC,EACF,MAAM,SAAM;AACZ,WAAK,IAAI,MAAM,0BAA0B,GAAG;IAC9C,CAAC;AAID,eAAW,CAAC,KAAK,KAAK,KAAK,KAAK,OAAO;AACrC,UAAI,MAAM,QAAQ;AAChB,aAAK,MAAM,OAAO,GAAG;AAErB,mBAAW,aAAa,KAAK,MAAM,OAAM,GAAI;AAC3C,oBAAU,OAAO,GAAG;QACtB;MACF;IACF;AAEA,SAAK,gBAAgB,QAAO;EAC9B;EAEA,IAAK,KAAQ;AACX,UAAM,SAAS,SAAmB,IAAI,UAAU,OAAO,QAAQ;AAC/D,WAAO,KAAK,MAAM,IAAI,MAAM;EAC9B;;;;EAKA,MAAM,oBAAqB,KAAUD,SAAgBF,WAAuB,CAAA,GAAE;AAC5E,UAAMG,WAAU,IAAI,qBAAoB;AACxC,IAAAA,SAAQ,iBAAiB,KAAK;MAC5B,KAAK,IAAI;MACT,cAAc;MACd,UAAU,SAAS;MACnB,UAAU;KACX;AAGD,UAAM,KAAK,QAAQ,YAAYD,SAAQC,QAAO;AAG9C,UAAM,QAAQ,MAAM,UAA6D,MAAM,YAAYH,SAAQ,QAAQ;MACjH,QAAQ,CAACC,WAAS;AAChB,eAAOC,QAAO,OAAOD,OAAM,OAAO,MAAM,KAAK,OAAiB,IAAI,UAAU,QAAQA,OAAM,OAAO,IAAI,UAAU,MAAM;MACvH;KACD;AAED,WAAO,MAAM;EACf;;;;EAKA,MAAM,UAAW,KAAUD,WAAuB,CAAA,GAAE;AAClD,WAAO,KAAK,SAAS,KAAK;MACxB,GAAGA;MACH,UAAU,SAAS;KACpB;EACH;;;;EAKA,MAAM,iBAAkB,KAAUE,SAAgBF,WAAuB,CAAA,GAAE;AACzE,UAAMG,WAAU,IAAI,qBAAoB;AACxC,IAAAA,SAAQ,iBAAiB,KAAK;MAC5B,KAAK,IAAI;MACT,cAAc;MACd,UAAU,SAAS;MACnB,UAAU;KACX;AAGD,UAAM,KAAK,QAAQ,YAAYD,SAAQC,QAAO;AAG9C,UAAM,QAAQ,MAAM,UAA2C,MAAM,YAAYH,SAAQ,QAAQ;MAC/F,QAAQ,CAACC,WAAS;AAChB,eAAOC,QAAO,OAAOD,OAAM,OAAO,MAAM,KAAK,OAAiB,IAAI,UAAU,QAAQA,OAAM,OAAO,IAAI,UAAU,MAAM;MACvH;KACD;AAED,WAAO,MAAM;EACf;;;;EAKA,MAAM,cAAe,KAAUD,UAAoE;AACjG,UAAM,SAAS,SAAmB,IAAI,UAAU,OAAO,QAAQ;AAE/D,UAAM,QAAQ,KAAK,MAAM,IAAI,MAAM;AAEnC,QAAI,SAAS,MAAM;AACjB;IACF;AAEA,UAAM,SAAS;AAEf,UAAM,KAAK,sBAAqB;EAClC;;;;EAKQ,MAAM,eAAgB,QAAgBG,UAAuB;AACnE,SAAK,IAAI,2CAA2C,QAAQA,SAAQ,OAAO,MAAM;AACjF,QAAI,kBAAkB;AAGtB,eAAW,SAASA,SAAQ,QAAQ;AAClC,UAAI,MAAM,UAAU,QAAQ,MAAM,QAAQ,MAAM;AAC9C;MACF;AAEA,YAAM,SAAS,uBAAG,MAAM,MAAM;AAC9B,YAAM,aAAa,OAAO,CAAC;AAC3B,YAAMC,cAAa,OAAO,CAAC;AAC3B,YAAM,UAAU,OAAO,CAAC;AAGxB,YAAM,SAAS,YAAYC,QAAO,OAAOA,UAAS,MAAM,KAAK,YAAY,UAAU,OAAO;AAE1F,UAAI,UAAU,MAAM;AAClB,aAAK,IAAI,MAAM,0BAA0B,OAAO;AAChD;MACF;AAEA,UAAI,OAAY,OAAO,OAAO,MAAM,IAAI;AAExC,UAAI,KAAK,QAAQ,MAAM;AACrB,eAAO,MAAM;MACf;AAEA,YAAM,MAAMC,KAAI,OAAO,eAAe,IAAI,IAAI,GAAGF,aAAY,IAAI;AAEjE,WAAK,IAAI,iCAAiC,QAAQ,GAAG;AAErD,WAAK,kBAAmC,SAAS;QAC/C,QAAQ;UACN;UACA;UACA,OAAO,MAAM;;OAEhB;AAED,WAAK,kBAAwD,YAAY;QACvE,QAAQ;UACN;UACA;UACA,KAAK;UACL,OAAO,MAAM;;OAEhB;AAED,YAAM,SAAS,SAAmB,IAAI,UAAU,OAAO,QAAQ;AAC/D,YAAM,QAAQ,KAAK,MAAM,IAAI,MAAM;AAEnC,UAAI,SAAS,MAAM;AACjB;MACF;AAKA,YAAM,SAAS;AACf,wBAAkB;IACpB;AAGA,eAAW,EAAE,KAAK,UAAU,KAAI,KAAMD,SAAQ,gBAAgB;AAC5D,YAAM,MAAMG,KAAI,OAAO,QAAQ;AAE/B,WAAK,IAAI,8BAA8B,MAAM,QAAQ,GAAG;AAExD,WAAK,kBAAwD,YAAY;QACvE,QAAQ;UACN;UACA;UACA,KAAK,SAAS,kBAAkB;;OAEnC;IACH;AAEA,QAAI,iBAAiB;AACnB,YAAM,KAAK,sBAAqB;IAClC;EACF;;;;EAKA,MAAM,cAAeJ,SAAc;AACjC,UAAM,YAAY,oBAAI,IAAG;AACzB,UAAMC,WAAU,IAAI,qBAAqB,IAAI;AAG7C,eAAW,CAAC,KAAK,KAAK,KAAK,KAAK,MAAM,QAAO,GAAI;AAC/C,UAAI,MAAM,QAAQ;AAChB;MACF;AAEA,gBAAU,IAAI,GAAG;AAEjB,MAAAA,SAAQ,iBAAiB,MAAM,KAAK;QAClC,KAAK,MAAM,IAAI;QACf,UAAU;QACV,UAAU,SAAS;QACnB,QAAQ;QACR,cAAc;OACf;IACH;AAGA,QAAIA,SAAQ,SAAS,SAAS,GAAG;AAC/B,WAAK,MAAM,IAAID,SAAQ,SAAS;AAEhC;IACF;AAEA,QAAI;AACF,YAAM,KAAK,QAAQ,YAAYA,SAAQC,QAAO;AAE9C,WAAK,MAAM,IAAID,SAAQ,SAAS;IAClC,SAAS,KAAK;AACZ,WAAK,IAAI,MAAM,8CAA8CA,SAAQ,GAAG;IAC1E;EACF;;;;;EAMA,iBAAkBA,SAAc;AAC9B,SAAK,MAAM,OAAOA,OAAM;EAC1B;EAEA,QAAK;EAEL;EAEA,OAAI;AACF,SAAK,MAAM,MAAK;AAChB,iBAAa,KAAK,mBAAmB;EACvC;;;;ACrdI,IAAO,UAAP,MAAc;EACD;EACA;EACD;EACT;EACA;EACA;EACA;EACA;EAEP,YAAa,YAA+B,OAAuB,CAAA,GAAE;AACnE,SAAK,SAAS,WAAW;AACzB,SAAK,MAAM,WAAW,OAAO,aAAa,eAAe;AACzD,SAAK,aAAa,WAAW;AAC7B,SAAK,SAAS,WAAW;AAGzB,SAAK,QAAQ,IAAI,MAAM,UAAU;AAGjC,SAAK,UAAU,IAAI,QAAQ,YAAY,IAAI;AAG3C,SAAK,gBAAgB,IAAI,cAAc;MACrC,GAAG;MACH,SAAS,KAAK;OACb,IAAI;AAGP,SAAK,WAAW,IAAI,SAAS;MAC3B,GAAG;MACH,SAAS,KAAK;OACb,IAAI;EACT;EAEA,cAAeK,WAAgC,CAAA,GAAE;AAC/C,WAAO,qBAAqB;MAC1B,UAAU,KAAK;MACf,SAAS,KAAK;MACd,QAAQ,KAAK;MACb,QAAQ,KAAK;OACZA,QAAO;EACZ;EAEA,MAAM,KAAM,KAAUA,WAAuB,CAAA,GAAE;AAC7C,UAAM,aAAa,IAAI,gBAAe;AACtC,UAAM,SAAS,UAAU,CAAC,WAAW,QAAQA,SAAQ,MAAM,CAAC;AAC5D,oBAAgB,UAAU,WAAW,QAAQ,MAAM;AAGnD,SAAK,QAAQ,eAAe,KAAK;MAC/B,GAAGA;MACH;KACD,EACE,MAAM,SAAM;AAGX,UAAI,CAAC,WAAW,OAAO,SAAS;AAC9B,aAAK,IAAI,MAAM,+CAA+C,KAAK,GAAG;MACxE;IACF,CAAC;AAEH,QAAI;AACF,YAAM,SAAS,MAAM,KAAK,SAAS,UAAU,KAAK;QAChD,GAAGA;QACH;OACD;AAED,aAAO,OAAO;IAChB;AAGE,iBAAW,MAAK;AAChB,aAAO,MAAK;IACd;EACF;;;;EAKA,MAAM,OAAQ,KAAU,OAAmBA,WAAuE,CAAA,GAAE;AAClH,UAAM,QAAQ,IAAI;MAChB,KAAK,cAAc,cAAc,KAAKA,QAAO;MAC7C,KAAK,SAAS,cAAc,KAAKA,QAAO;KACzC;EACH;EAEA,cAAW;AACT,WAAO,CAAC,GAAG,KAAK,SAAS,MAAM,OAAM,CAAE,EACpC,OAAO,WAAS,CAAC,MAAM,MAAM,EAC7B,IAAI,YAAU;MACb,KAAK,MAAM;MACX,UAAU,MAAM;MAChB,UAAU,MAAM;MAChB;EACN;EAEA,gBAAiB,MAAY;AAC3B,WAAO,KAAK,cAAc,gBAAgB,IAAI;EAChD;;;;EAKA,MAAM,QAAK;AACT,SAAK,SAAS,MAAK;AACnB,UAAM,KAAK,QAAQ,MAAK;EAC1B;;;;EAKA,MAAM,OAAI;AACR,SAAK,SAAS,KAAI;AAClB,UAAM,KAAK,QAAQ,KAAI;EACzB;;;;AC6CK,IAAM,gBAAgB,CAAC,YAA+BC,WAA0B,CAAA,MAAe;AACpG,SAAO,IAAI,QAAa,YAAYA,QAAO;AAC7C;;;AC5KA,IAAM,qBAAN,MAAwB;EACL;EACT;EAER,YAAa,YAA0C,OAA+B,CAAA,GAAE;AACtF,UAAM,EAAE,WAAAC,WAAS,IAAK;AAEtB,SAAK,UAAU,cAAc,YAAY;MACvC,YAAY;QACV,WAAW,OAAO,gBAAyD;AACzE,iBAAOA,WAAU,WAAW;QAC9B;;MAEF,GAAG;KACJ;AACD,SAAK,UAAU;EACjB;EAEA,YAAS;AACP,WAAO,KAAK;EACd;EAEA,MAAM,QAAK;AACT,UAAM,KAAK,QAAQ,MAAK;AACxB,SAAK,UAAU;EACjB;EAEA,MAAM,OAAI;AACR,UAAM,KAAK,QAAQ,KAAI;AACvB,SAAK,UAAU;EACjB;EAEA,MAAM,SAAU,KAAU,OAAmBC,UAA2D;AACtG,UAAM,KAAK,QAAQ,OAAO,KAAK,OAAOA,QAAO;EAC/C;EAEA,MAAM,SAAU,KAAUA,WAAiE,CAAA,GAAE;AAC3F,WAAO,KAAK,QAAQ,KAAK,KAAKA,QAAO;EACvC;EAEA,cAAeA,UAA8D;AAC3E,UAAM,UAAU,KAAK,QAAQ,cAAcA,QAAO;AAElD,WAAO;MACL,UAAU,OAAO,KAAK,OAAOA,aAAW;AACtC,cAAM,KAAK,QAAQ,OAAO,KAAK,OAAOA,QAAO;MAC/C;MAEA,UAAU,OAAO,KAAKA,aAAW;AAC/B,eAAO,QAAQ,SAAS,KAAKA,QAAO;MACtC;;EAEJ;;AAOI,SAAU,QAAS,OAA+B,CAAA,GAAE;AACxD,SAAO,CAAC,eAAe,IAAI,mBAAmB,YAAY,IAAI;AAChE;;;AC3CA,IAAM,oBAAoB;EACxB;EACA;EACA;EACA;EACA;;AAOF,SAAS,WAAY,IAAe;AAClC,SAAO,aAAa,OAAO,EAAE,GAAG;AAClC;AAEA,SAAS,YAAa,IAAe;AACnC,QAAM,OAAO,aAAa,OAAO,EAAE,GAAG;AAEtC,MAAI,QAAQ,MAAM;AAChB,WAAO;EACT;AAEA,SAAO,IAAI,IAAI;AACjB;AAEA,SAAS,aAAcC,OAAc,IAAe;AAClD,SAAO,GAAG,KAAK,eAAa,UAAU,SAASA,KAAI;AACrD;AAEA,SAAS,OAAQ,IAAe;AAC9B,SAAO,GAAG,KAAK,CAAC,EAAE,MAAAC,OAAI,MAAOA,WAAS,QAAQ;AAChD;AAEA,SAAS,cAAe,MAAiB,MAAiB;AACxD,QAAM,cAAc,aAAa,KAAK,IAAI;AAC1C,MAAI,eAAe,MAAM;AACvB,UAAM,IAAI,MAAM,4BAA4B,KAAK,IAAI,EAAE;EACzD;AACA,QAAM,UAAU,YAAY,MAAM,IAAI;AACtC,MAAI,KAAK,SAAS,UAAU;AAC1B,WAAO,IAAI,OAAO;EACpB;AACA,SAAO;AACT;AAEA,IAAM,eAA4C;EAChD,KAAK,CAAC,MAAM,SAAS,KAAK;EAC1B,KAAK,CAAC,MAAM,SAAQ;AAClB,QAAI,KAAK,WAAW,GAAG;AACrB,aAAO,KAAK;IACd;AACA,WAAO,IAAI,KAAK,KAAK;EACvB;EACA,KAAK,CAAC,MAAM,SAAQ;AAClB,UAAM,OAAO,KAAK,IAAG;AACrB,QAAI,QAAQ,MAAM;AAChB,YAAM,IAAI,MAAM,6BAA6B;IAC/C;AACA,WAAO,SAAS,cAAc,MAAM,IAAI,CAAC,IAAI,KAAK,KAAK;EACzD;EACA,KAAK,CAAC,MAAM,SAAQ;AAClB,UAAM,OAAO,KAAK,IAAG;AACrB,QAAI,QAAQ,MAAM;AAChB,YAAM,IAAI,MAAM,6BAA6B;IAC/C;AACA,WAAO,SAAS,cAAc,MAAM,IAAI,CAAC,IAAI,KAAK,KAAK;EACzD;EACA,SAAS,CAAC,MAAM,SAAS,KAAK;EAC9B,MAAM,CAAC,MAAM,SAAS,KAAK;EAC3B,MAAM,CAAC,MAAM,SAAS,KAAK;EAC3B,KAAK,CAAC,MAAM,SAAS,KAAK;EAC1B,MAAM,CAAC,MAAM,SAAQ;AACnB,UAAM,OAAO,KAAK,IAAG;AACrB,QAAI,QAAQ,MAAM;AAChB,YAAM,IAAI,MAAM,6BAA6B;IAC/C;AACA,WAAO,GAAG,cAAc,MAAM,IAAI,CAAC;EACrC;EACA,KAAK,CAAC,MAAM,SAAQ;AAClB,UAAM,OAAO,KAAK,IAAG;AACrB,QAAI,QAAQ,MAAM;AAChB,YAAM,IAAI,MAAM,6BAA6B;IAC/C;AACA,WAAO,GAAG,cAAc,MAAM,IAAI,CAAC;EACrC;EACA,MAAM,CAAC,MAAM,SAAQ;AACnB,UAAM,WAAW,OAAO,IAAI;AAC5B,UAAM,MAAM,WAAW,IAAI;AAC3B,UAAM,OAAO,YAAY,IAAI;AAC7B,QAAI,YAAY,OAAO,MAAM;AAC3B,aAAO,WAAW,GAAG,GAAG,IAAI;IAC9B;AACA,UAAM,WAAW,WAAW,aAAa;AACzC,UAAM,OAAO,KAAK,IAAG;AACrB,QAAI,QAAQ,MAAM;AAChB,YAAM,IAAI,MAAM,6BAA6B;IAC/C;AACA,QAAI,UAAU,cAAc,MAAM,IAAI;AAEtC,cAAU,SAAS,QAAQ,UAAU,EAAE;AACvC,WAAO,GAAG,QAAQ,GAAG,OAAO;EAC9B;EACA,aAAa,CAAC,MAAM,SAAQ;AAC1B,UAAM,OAAO,KAAK,IAAG;AACrB,QAAI,QAAQ,MAAM;AAChB,YAAM,IAAI,MAAM,6BAA6B;IAC/C;AACA,UAAM,UAAU,cAAc,MAAM,IAAI;AACxC,UAAM,eAAe,mBAAmB,KAAK,SAAS,EAAE;AACxD,WAAO,GAAG,OAAO,GAAG,YAAY;EAClC;EACA,KAAK,CAAC,MAAM,SAAQ;AAGlB,UAAM,OAAO,KAAK,IAAG;AACrB,QAAI,QAAQ,MAAM;AAChB,YAAM,IAAI,MAAM,6BAA6B;IAC/C;AACA,WAAO,cAAc,MAAM,IAAI;EACjC;EACA,KAAK,CAAC,MAAM,SAAQ;AAGlB,UAAM,OAAO,KAAK,IAAG;AACrB,QAAI,QAAQ,MAAM;AAChB,YAAM,IAAI,MAAM,6BAA6B;IAC/C;AACA,WAAO,cAAc,MAAM,IAAI;EACjC;EACA,OAAO,CAAC,MAAM,SAAQ;AACpB,UAAM,OAAO,KAAK,IAAG;AACrB,QAAI,QAAQ,MAAM;AAChB,YAAM,IAAI,MAAM,6BAA6B;IAC/C;AACA,QAAI,UAAU,cAAc,MAAM,IAAI;AAEtC,cAAU,SAAS,QAAQ,UAAU,EAAE;AACvC,WAAO,WAAW,OAAO;EAC3B;EACA,IAAI,CAAC,MAAM,SAAQ;AACjB,UAAM,WAAW,OAAO,IAAI;AAC5B,UAAM,MAAM,WAAW,IAAI;AAC3B,UAAM,OAAO,YAAY,IAAI;AAC7B,QAAI,YAAY,OAAO,MAAM;AAC3B,aAAO,SAAS,GAAG,GAAG,IAAI;IAC5B;AACA,UAAM,WAAW,WAAW,WAAW;AACvC,UAAM,OAAO,KAAK,IAAG;AACrB,QAAI,QAAQ,MAAM;AAChB,YAAM,IAAI,MAAM,6BAA6B;IAC/C;AACA,QAAI,UAAU,cAAc,MAAM,IAAI;AAEtC,cAAU,SAAS,QAAQ,UAAU,EAAE;AACvC,WAAO,GAAG,QAAQ,GAAG,OAAO;EAC9B;EACA,KAAK,CAAC,MAAM,SAAQ;AAClB,UAAM,OAAO,KAAK,IAAG;AACrB,QAAI,QAAQ,MAAM;AAChB,YAAM,IAAI,MAAM,6BAA6B;IAC/C;AACA,QAAI,UAAU,cAAc,MAAM,IAAI;AAEtC,cAAU,SAAS,QAAQ,UAAU,EAAE;AACvC,WAAO,SAAS,OAAO;EACzB;;AAGI,SAAU,eAAgB,OAAwC,MAAyB;AAC/F,QAAM,KAAK,UAAU,KAAK;AAC1B,QAAM,aAAa,GAAG,cAAa;AACnC,QAAM,OAAO,WAAW,IAAG;AAC3B,MAAI,QAAQ,MAAM;AAChB,UAAM,IAAI,MAAM,6BAA6B;EAC/C;AAEA,QAAM,cAAc,aAAa,KAAK,IAAI;AAE1C,MAAI,eAAe,MAAM;AACvB,UAAM,IAAI,MAAM,4BAA4B,KAAK,IAAI,EAAE;EACzD;AAEA,MAAI,MAAM,YAAY,MAAM,UAAU,KAAK;AAE3C,MAAI,MAAM,eAAe,SAAS,kBAAkB,SAAS,KAAK,IAAI,GAAG;AAEvE,UAAM,IAAI,QAAQ,YAAY,EAAE;AAEhC,QAAI,KAAK,UAAU,OAAO;AACxB,YAAM,WAAW,GAAG;IACtB,OAAO;AACL,YAAM,UAAU,GAAG;IACrB;EACF;AAEA,MAAI,IAAI,WAAW,SAAS,KAAK,IAAI,WAAW,UAAU,KAAK,IAAI,WAAW,OAAO,KAAK,IAAI,WAAW,QAAQ,GAAG;AAElH,UAAM,IAAI,IAAI,GAAG,EAAE,SAAQ;AAG3B,QAAI,IAAI,SAAS,GAAG,GAAG;AACrB,YAAM,IAAI,UAAU,GAAG,IAAI,SAAS,CAAC;IACvC;EACF;AAEA,SAAO;AACT;;;ACrPO,IAAMC,SAAQ,IAAI,WAAW,CAAC;;;ACYrC,IAAMC,WAAN,MAAa;EACF;EACA;EACA;EAET,YAAaC,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;EACpB;EAEA,OAAQ,OAAiB;AACvB,QAAI,iBAAiB,YAAY;AAC/B,aAAO,GAAG,KAAK,MAAM,GAAG,KAAK,WAAW,KAAK,CAAC;IAChD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;;AAQF,IAAMC,WAAN,MAAa;EACF;EACA;EACA;EACQ;EAEjB,YAAaD,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,UAAM,kBAAkB,OAAO,YAAY,CAAC;AAE5C,QAAI,oBAAoB,QAAW;AACjC,YAAM,IAAI,MAAM,0BAA0B;IAC5C;AACA,SAAK,kBAAkB;AACvB,SAAK,aAAa;EACpB;EAEA,OAAQ,MAAY;AAClB,QAAI,OAAO,SAAS,UAAU;AAC5B,UAAI,KAAK,YAAY,CAAC,MAAM,KAAK,iBAAiB;AAChD,cAAM,MAAM,qCAAqC,KAAK,UAAU,IAAI,CAAC,KAAK,KAAK,IAAI,+CAA+C,KAAK,MAAM,EAAE;MACjJ;AACA,aAAO,KAAK,WAAW,KAAK,MAAM,KAAK,OAAO,MAAM,CAAC;IACvD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;EAEA,GAAgC,SAAmE;AACjG,WAAOE,IAAG,MAAM,OAAO;EACzB;;AAKF,IAAMC,mBAAN,MAAqB;EACV;EAET,YAAa,UAA0B;AACrC,SAAK,WAAW;EAClB;EAEA,GAAiC,SAAmE;AAClG,WAAOD,IAAG,MAAM,OAAO;EACzB;EAEA,OAAQ,OAAa;AACnB,UAAM,SAAS,MAAM,CAAC;AACtB,UAAM,UAAU,KAAK,SAAS,MAAM;AACpC,QAAI,WAAW,MAAM;AACnB,aAAO,QAAQ,OAAO,KAAK;IAC7B,OAAO;AACL,YAAM,WAAW,qCAAqC,KAAK,UAAU,KAAK,CAAC,+BAA+B,OAAO,KAAK,KAAK,QAAQ,CAAC,gBAAgB;IACtJ;EACF;;AAGI,SAAUA,IAAyC,MAA+C,OAA8C;AACpJ,SAAO,IAAIC,iBAAgB;IACzB,GAAI,KAAK,YAAY,EAAE,CAAE,KAA2B,MAAM,GAAG,KAAI;IACjE,GAAI,MAAM,YAAY,EAAE,CAAE,MAA4B,MAAM,GAAG,MAAK;GAClD;AACtB;AAEM,IAAOC,SAAP,MAAY;EACP;EACA;EACA;EACA;EACA;EACA;EAET,YAAaJ,OAAY,QAAgB,YAAsB,YAAoB;AACjF,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,UAAU,IAAID,SAAQC,OAAM,QAAQ,UAAU;AACnD,SAAK,UAAU,IAAIC,SAAQD,OAAM,QAAQ,UAAU;EACrD;EAEA,OAAQ,OAAiB;AACvB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;EAEA,OAAQ,OAAa;AACnB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;;AAGI,SAAUK,MAAmD,EAAE,MAAAL,OAAM,QAAQ,QAAAM,UAAQ,QAAAC,SAAM,GAAsE;AACrK,SAAO,IAAIH,OAAMJ,OAAM,QAAQM,UAAQC,QAAM;AAC/C;AAYA,SAASC,SAAQC,SAAgB,aAAqC,aAAqBC,OAAY;AAErG,MAAI,MAAMD,QAAO;AACjB,SAAOA,QAAO,MAAM,CAAC,MAAM,KAAK;AAC9B,MAAE;EACJ;AAGA,QAAM,MAAM,IAAI,WAAY,MAAM,cAAc,IAAK,CAAC;AAGtD,MAAI,OAAO;AACX,MAAI,SAAS;AACb,MAAI,UAAU;AACd,WAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAE5B,UAAME,SAAQ,YAAYF,QAAO,CAAC,CAAC;AACnC,QAAIE,WAAU,QAAW;AACvB,YAAM,IAAI,YAAY,OAAOD,KAAI,YAAY;IAC/C;AAGA,aAAU,UAAU,cAAeC;AACnC,YAAQ;AAGR,QAAI,QAAQ,GAAG;AACb,cAAQ;AACR,UAAI,SAAS,IAAI,MAAQ,UAAU;IACrC;EACF;AAGA,MAAI,QAAQ,gBAAgB,MAAQ,UAAW,IAAI,UAAY,GAAG;AAChE,UAAM,IAAI,YAAY,wBAAwB;EAChD;AAEA,SAAO;AACT;AAEA,SAASC,SAAQ,MAAkBC,WAAkB,aAAmB;AACtE,QAAM,MAAMA,UAASA,UAAS,SAAS,CAAC,MAAM;AAC9C,QAAM,QAAQ,KAAK,eAAe;AAClC,MAAI,MAAM;AAEV,MAAI,OAAO;AACX,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAEpC,aAAU,UAAU,IAAK,KAAK,CAAC;AAC/B,YAAQ;AAGR,WAAO,OAAO,aAAa;AACzB,cAAQ;AACR,aAAOA,UAAS,OAAQ,UAAU,IAAK;IACzC;EACF;AAGA,MAAI,SAAS,GAAG;AACd,WAAOA,UAAS,OAAQ,UAAW,cAAc,IAAM;EACzD;AAGA,MAAI,KAAK;AACP,YAAS,IAAI,SAAS,cAAe,OAAO,GAAG;AAC7C,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEA,SAASC,mBAAmBD,WAAgB;AAE1C,QAAM,cAAsC,CAAA;AAC5C,WAAS,IAAI,GAAG,IAAIA,UAAS,QAAQ,EAAE,GAAG;AACxC,gBAAYA,UAAS,CAAC,CAAC,IAAI;EAC7B;AACA,SAAO;AACT;AAKM,SAAUE,SAAsD,EAAE,MAAAL,OAAM,QAAQ,aAAa,UAAAG,UAAQ,GAAyE;AAClL,QAAM,cAAcC,mBAAkBD,SAAQ;AAC9C,SAAOG,MAAK;IACV;IACA,MAAAN;IACA,OAAQ,OAAiB;AACvB,aAAOE,SAAO,OAAOC,WAAU,WAAW;IAC5C;IACA,OAAQ,OAAa;AACnB,aAAOL,SAAO,OAAO,aAAa,aAAaE,KAAI;IACrD;GACD;AACH;;;AC9OO,IAAMO,UAASC,SAAQ;EAC5B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMC,aAAYD,SAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAME,aAAYF,SAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMG,gBAAeH,SAAQ;EAClC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;;;ACDK,IAAO,mBAAP,MAAuB;EACX;;;;;;;EAOhB,YAAY;;;;;;;EAQZ,UAAU;;;;;;EAOV,iBAAiB;;;;EAKjB,aAAa;;;;;;EAOJ,oBAAoB,oBAAI,IAAG;EAEnB;EACA;EAEjB,YAAa,KAAmB,EAAE,QAAAI,SAAQ,qBAAoB,GAA8B;AAC1F,SAAK,MAAM,eAAe,MAAM,MAAM,IAAI,IAAI,GAAG;AACjD,SAAK,uBAAuB;AAC5B,SAAK,MAAMA,QAAO,aAAa,wCAAwC,KAAK,IAAI,QAAQ,EAAE;EAC5F;;;;;;;;;;EAWA,eAAgB,KAAQ;AACtB,UAAM,iBAAiB,IAAI,UAAU;AACrC,WAAOC,QAAO,OAAO,cAAc;EACrC;;;;;EAMA,MAAM,YAAa,KAAU,QAAoB;AAC/C,UAAM,QAAQ,IAAI,IAAI,KAAK,IAAI,SAAQ,CAAE;AACzC,UAAM,WAAW,SAAS,IAAI,SAAQ,CAAE;AAIxC,UAAM,SAAS;AAEf,QAAI,QAAQ,YAAY,MAAM;AAC5B,YAAM,IAAI,MAAM,qCAAqC,GAAG,iBAAiB,KAAK,GAAG,6BAA6B;IAChH;AAEA,UAAM,UAAU,KAAK,eAAe,GAAG;AAGvC,UAAM,kBAAkB,IAAI,gBAAe;AAC3C,UAAM,mBAAmB,MAAW;AAClC,sBAAgB,MAAK;IACvB;AACA,YAAQ,iBAAiB,SAAS,gBAAgB;AAElD,QAAI;AACF,UAAI,kBAAmD,KAAK,kBAAkB,IAAI,OAAO;AACzF,UAAI,mBAAmB,MAAM;AAC3B,aAAK;AACL,cAAM,iBAA8B;UAClC,QAAQ,gBAAgB;UACxB,SAAS;YACP,QAAQ;;UAEV,OAAO;;AAGT,cAAM,UAAuB,KAAK,wBAAwB,OAAO,MAAM,KAAK,qBAAqB,cAAc,IAAI;AAEnH,0BAAkB,MAAM,MAAM,SAAQ,GAAI,OAAO,EAAE,KAAK,OAAO,QAAO;AACpE,eAAK,IAAI,aAAa,OAAO,IAAI,MAAM;AACvC,cAAI,CAAC,IAAI,IAAI;AACX,iBAAK;AACL,kBAAM,IAAI,MAAM,qCAAqC,GAAG,iBAAiB,KAAK,GAAG,EAAE;UACrF;AACA,eAAK;AACL,iBAAO,IAAI,WAAW,MAAM,IAAI,YAAW,CAAE;QAC/C,CAAC;AACD,aAAK,kBAAkB,IAAI,SAAS,eAAe;MACrD;AACA,aAAO,MAAM;IACf,SAAS,OAAO;AAGd,UAAI,QAAQ,YAAY,MAAM;AAC5B,cAAM,IAAI,MAAM,8BAA8B,GAAG,iBAAiB,KAAK,GAAG,cAAc;MAC1F;AACA,WAAK;AACL,YAAM,IAAI,MAAM,qCAAqC,GAAG,EAAE;IAC5D;AACE,cAAQ,oBAAoB,SAAS,gBAAgB;AACrD,WAAK,kBAAkB,OAAO,OAAO;IACvC;EACF;;;;;;;;;EAUA,cAAW;AAKT,QAAI,KAAK,cAAc,GAAG;AACxB,aAAO;IACT;AAEA,QAAI,KAAK,iBAAiB,GAAG;AAE3B,aAAO;IACT;AAUA,WAAO,KAAK,cAAc,KAAK,YAAa,KAAK,UAAU;EAC7D;;;;EAKA,yBAAsB;AACpB,SAAK;EACP;EAEA,WAAQ;AACN,WAAO;MACL,UAAU,KAAK;MACf,QAAQ,KAAK;MACb,eAAe,KAAK;MACpB,WAAW,KAAK;MAChB,kBAAkB,KAAK,kBAAkB;;EAE7C;;;;ACvMF,qBAAwB;AAExB,IAAM,oBAAoB;EACxB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AAGF,IAAM,iBAAiB,kBAAkB,IAAI,aAAW,IAAI,uBAAQ,OAAO,CAAC;AAE5E,SAAS,UAAW,QAAc;AAChC,aAAW,KAAK,gBAAgB;AAC9B,QAAI,EAAE,SAAS,MAAM,GAAG;AAAE,aAAO;IAAK;EACxC;AAEA,SAAO;AACT;AAEA,SAAS,iBAAkB,QAAc;AACvC,SAAO,iDAAiD,KAAK,MAAM;AACrE;AAKA,SAAS,oBAAqB,QAAc;AAC1C,QAAM,QAAQ,OAAO,MAAM,GAAG;AAE9B,MAAI,MAAM,SAAS,GAAG;AACpB,WAAO;EACT;AAEA,QAAM,UAAU,MAAM,MAAM,SAAS,CAAC,EAAE,SAAS,GAAG,GAAG;AACvD,QAAM,UAAU,MAAM,MAAM,SAAS,CAAC,EAAE,SAAS,GAAG,GAAG;AAEvD,QAAM,MAAM,GAAG,SAAS,QAAQ,UAAU,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,SAAS,QAAQ,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,SAAS,QAAQ,UAAU,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,SAAS,QAAQ,UAAU,CAAC,GAAG,EAAE,CAAC;AAEzK,SAAO,UAAU,GAAG;AACtB;AAKA,SAAS,mBAAoB,QAAc;AACzC,SAAO,kEAAkE,KAAK,MAAM;AACtF;AAEA,SAAS,sBAAuB,QAAc;AAC5C,QAAM,QAAQ,OAAO,MAAM,GAAG;AAC9B,QAAM,MAAM,MAAM,MAAM,SAAS,CAAC;AAElC,SAAO,UAAU,GAAG;AACtB;AAEA,SAAS,UAAW,QAAc;AAChC,SAAO,OAAO,KAAK,MAAM,KACvB,QAAQ,KAAK,MAAM,KACnB,oEAAoE,KAAK,MAAM,KAC/E,wFAAwF,KAAK,MAAM,KACnG,iIAAiI,KAAK,MAAM,KAC5I,6IAA6I,KAAK,MAAM,KACxJ,oIAAoI,KAAK,MAAM,KAC/I,oJAAoJ,KAAK,MAAM,KAC/J,8BAA8B,KAAK,MAAM,KACzC,8BAA8B,KAAK,MAAM,KACzC,0BAA0B,KAAK,MAAM;AACzC;AAEM,SAAU,YAAa,IAAU;AACrC,MAAI,OAAO,EAAE,GAAG;AACd,WAAO,UAAU,EAAE;EACrB;AAEA,MAAI,iBAAiB,EAAE,GAAG;AACxB,WAAO,oBAAoB,EAAE;EAC/B;AAEA,MAAI,mBAAmB,EAAE,GAAG;AAC1B,WAAO,sBAAsB,EAAE;EACjC;AAEA,MAAI,OAAO,EAAE,GAAG;AACd,WAAO,UAAU,EAAE;EACrB;AACF;;;AC1GO,IAAMC,SAAQ,IAAI,WAAW,CAAC;AA0B/B,SAAUC,QAAQ,GAA6C;AACnE,MAAI,aAAa,cAAc,EAAE,YAAY,SAAS,cAAc;AAAE,WAAO;EAAE;AAC/E,MAAI,aAAa,aAAa;AAAE,WAAO,IAAI,WAAW,CAAC;EAAE;AACzD,MAAI,YAAY,OAAO,CAAC,GAAG;AACzB,WAAO,IAAI,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU;EAC5D;AACA,QAAM,IAAI,MAAM,mCAAmC;AACrD;;;ACvBA,SAASC,MAAM,UAAUC,OAAI;AAC3B,MAAI,SAAS,UAAU,KAAK;AAAE,UAAM,IAAI,UAAU,mBAAmB;EAAE;AACvE,MAAI,WAAW,IAAI,WAAW,GAAG;AACjC,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,aAAS,CAAC,IAAI;EAChB;AACA,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,QAAI,IAAI,SAAS,OAAO,CAAC;AACzB,QAAI,KAAK,EAAE,WAAW,CAAC;AACvB,QAAI,SAAS,EAAE,MAAM,KAAK;AAAE,YAAM,IAAI,UAAU,IAAI,eAAe;IAAE;AACrE,aAAS,EAAE,IAAI;EACjB;AACA,MAAI,OAAO,SAAS;AACpB,MAAI,SAAS,SAAS,OAAO,CAAC;AAC9B,MAAI,SAAS,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,GAAG;AAC1C,MAAI,UAAU,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI;AAI3C,WAASC,SAAQ,QAAM;AAErB,QAAI,kBAAkB;AAAY;aAAW,YAAY,OAAO,MAAM,GAAG;AACvE,eAAS,IAAI,WAAW,OAAO,QAAQ,OAAO,YAAY,OAAO,UAAU;IAC7E,WAAW,MAAM,QAAQ,MAAM,GAAG;AAChC,eAAS,WAAW,KAAK,MAAM;IACjC;AACA,QAAI,EAAE,kBAAkB,aAAa;AAAE,YAAM,IAAI,UAAU,qBAAqB;IAAE;AAClF,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO;IAAG;AAErC,QAAI,SAAS;AACb,QAAIC,WAAS;AACb,QAAI,SAAS;AACb,QAAI,OAAO,OAAO;AAClB,WAAO,WAAW,QAAQ,OAAO,MAAM,MAAM,GAAG;AAC9C;AACA;IACF;AAEA,QAAI,QAAS,OAAO,UAAU,UAAU,MAAO;AAC/C,QAAI,MAAM,IAAI,WAAW,IAAI;AAE7B,WAAO,WAAW,MAAM;AACtB,UAAI,QAAQ,OAAO,MAAM;AAEzB,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,MAAM,IAAI,GAAG,MAAO;AAC9B,YAAI,GAAG,IAAK,QAAQ,SAAU;AAC9B,gBAAS,QAAQ,SAAU;MAC7B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,IAAI,GAAG,MAAM,GAAG;AACrC;IACF;AAEA,QAAI,MAAM,OAAO,OAAO,MAAM;AAC9B,WAAO,MAAM,MAAM,EAAE,KAAK;AAAE,aAAO,SAAS,OAAO,IAAI,GAAG,CAAC;IAAG;AAC9D,WAAO;EACT;AAIA,WAAS,aAAc,QAAM;AAC3B,QAAI,OAAO,WAAW,UAAU;AAAE,YAAM,IAAI,UAAU,iBAAiB;IAAE;AACzE,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO,IAAI,WAAU;IAAG;AACnD,QAAI,MAAM;AAEV,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,SAAS;AACb,QAAIA,WAAS;AACb,WAAO,OAAO,GAAG,MAAM,QAAQ;AAC7B;AACA;IACF;AAEA,QAAI,QAAU,OAAO,SAAS,OAAO,SAAU,MAAO;AACtD,QAAI,OAAO,IAAI,WAAW,IAAI;AAE9B,WAAO,OAAO,GAAG,GAAG;AAElB,UAAI,QAAQ,SAAS,OAAO,WAAW,GAAG,CAAC;AAE3C,UAAI,UAAU,KAAK;AAAE;MAAO;AAC5B,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,OAAO,KAAK,GAAG,MAAO;AAChC,aAAK,GAAG,IAAK,QAAQ,QAAS;AAC9B,gBAAS,QAAQ,QAAS;MAC5B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,KAAK,GAAG,MAAM,GAAG;AACtC;IACF;AACA,QAAI,MAAM,IAAI,WAAW,UAAU,OAAO,IAAI;AAC9C,QAAIE,KAAI;AACR,WAAO,QAAQ,MAAM;AACnB,UAAIA,IAAG,IAAI,KAAK,KAAK;IACvB;AACA,WAAO;EACT;AAIA,WAASC,SAAQC,SAAM;AACrB,QAAI,SAAS,aAAaA,OAAM;AAChC,QAAI,QAAQ;AAAE,aAAO;IAAO;AAC5B,UAAM,IAAI,MAAM,OAAON,KAAI,YAAY;EACzC;AACA,SAAO;IACL,QAAQC;IACR;IACA,QAAQI;;AAEZ;AACA,IAAIE,OAAMR;AAEV,IAAIS,mCAAkCD;AAEtC,IAAAE,kBAAeD;;;ACjIf,IAAME,WAAN,MAAa;EACF;EACA;EACA;EAET,YAAaC,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;EACpB;EAEA,OAAQ,OAAiB;AACvB,QAAI,iBAAiB,YAAY;AAC/B,aAAO,GAAG,KAAK,MAAM,GAAG,KAAK,WAAW,KAAK,CAAC;IAChD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;;AAQF,IAAMC,WAAN,MAAa;EACF;EACA;EACA;EACQ;EAEjB,YAAaD,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,UAAM,kBAAkB,OAAO,YAAY,CAAC;AAE5C,QAAI,oBAAoB,QAAW;AACjC,YAAM,IAAI,MAAM,0BAA0B;IAC5C;AACA,SAAK,kBAAkB;AACvB,SAAK,aAAa;EACpB;EAEA,OAAQ,MAAY;AAClB,QAAI,OAAO,SAAS,UAAU;AAC5B,UAAI,KAAK,YAAY,CAAC,MAAM,KAAK,iBAAiB;AAChD,cAAM,MAAM,qCAAqC,KAAK,UAAU,IAAI,CAAC,KAAK,KAAK,IAAI,+CAA+C,KAAK,MAAM,EAAE;MACjJ;AACA,aAAO,KAAK,WAAW,KAAK,MAAM,KAAK,OAAO,MAAM,CAAC;IACvD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;EAEA,GAAgC,SAAmE;AACjG,WAAOE,IAAG,MAAM,OAAO;EACzB;;AAKF,IAAMC,mBAAN,MAAqB;EACV;EAET,YAAa,UAA0B;AACrC,SAAK,WAAW;EAClB;EAEA,GAAiC,SAAmE;AAClG,WAAOD,IAAG,MAAM,OAAO;EACzB;EAEA,OAAQ,OAAa;AACnB,UAAM,SAAS,MAAM,CAAC;AACtB,UAAM,UAAU,KAAK,SAAS,MAAM;AACpC,QAAI,WAAW,MAAM;AACnB,aAAO,QAAQ,OAAO,KAAK;IAC7B,OAAO;AACL,YAAM,WAAW,qCAAqC,KAAK,UAAU,KAAK,CAAC,+BAA+B,OAAO,KAAK,KAAK,QAAQ,CAAC,gBAAgB;IACtJ;EACF;;AAGI,SAAUA,IAAyC,MAA+C,OAA8C;AACpJ,SAAO,IAAIC,iBAAgB;IACzB,GAAI,KAAK,YAAY,EAAE,CAAE,KAA2B,MAAM,GAAG,KAAI;IACjE,GAAI,MAAM,YAAY,EAAE,CAAE,MAA4B,MAAM,GAAG,MAAK;GAClD;AACtB;AAEM,IAAOC,SAAP,MAAY;EACP;EACA;EACA;EACA;EACA;EACA;EAET,YAAaJ,OAAY,QAAgB,YAAsB,YAAoB;AACjF,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,UAAU,IAAID,SAAQC,OAAM,QAAQ,UAAU;AACnD,SAAK,UAAU,IAAIC,SAAQD,OAAM,QAAQ,UAAU;EACrD;EAEA,OAAQ,OAAiB;AACvB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;EAEA,OAAQ,OAAa;AACnB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;;AAGI,SAAUK,MAAmD,EAAE,MAAAL,OAAM,QAAQ,QAAAM,UAAQ,QAAAC,SAAM,GAAsE;AACrK,SAAO,IAAIH,OAAMJ,OAAM,QAAQM,UAAQC,QAAM;AAC/C;AAEM,SAAUC,OAAoD,EAAE,MAAAR,OAAM,QAAQ,UAAAS,UAAQ,GAAoD;AAC9I,QAAM,EAAE,QAAAH,UAAQ,QAAAC,SAAM,IAAKG,gBAAMD,WAAUT,KAAI;AAC/C,SAAOK,MAAK;IACV;IACA,MAAAL;IACA,QAAAM;IACA,QAAQ,CAAC,SAA6BK,QAAOJ,SAAO,IAAI,CAAC;GAC1D;AACH;AAEA,SAASA,SAAQK,SAAgB,aAAqC,aAAqBZ,OAAY;AAErG,MAAI,MAAMY,QAAO;AACjB,SAAOA,QAAO,MAAM,CAAC,MAAM,KAAK;AAC9B,MAAE;EACJ;AAGA,QAAM,MAAM,IAAI,WAAY,MAAM,cAAc,IAAK,CAAC;AAGtD,MAAI,OAAO;AACX,MAAI,SAAS;AACb,MAAI,UAAU;AACd,WAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAE5B,UAAMC,SAAQ,YAAYD,QAAO,CAAC,CAAC;AACnC,QAAIC,WAAU,QAAW;AACvB,YAAM,IAAI,YAAY,OAAOb,KAAI,YAAY;IAC/C;AAGA,aAAU,UAAU,cAAea;AACnC,YAAQ;AAGR,QAAI,QAAQ,GAAG;AACb,cAAQ;AACR,UAAI,SAAS,IAAI,MAAQ,UAAU;IACrC;EACF;AAGA,MAAI,QAAQ,gBAAgB,MAAQ,UAAW,IAAI,UAAY,GAAG;AAChE,UAAM,IAAI,YAAY,wBAAwB;EAChD;AAEA,SAAO;AACT;AAEA,SAASP,SAAQ,MAAkBG,WAAkB,aAAmB;AACtE,QAAM,MAAMA,UAASA,UAAS,SAAS,CAAC,MAAM;AAC9C,QAAM,QAAQ,KAAK,eAAe;AAClC,MAAI,MAAM;AAEV,MAAI,OAAO;AACX,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAEpC,aAAU,UAAU,IAAK,KAAK,CAAC;AAC/B,YAAQ;AAGR,WAAO,OAAO,aAAa;AACzB,cAAQ;AACR,aAAOA,UAAS,OAAQ,UAAU,IAAK;IACzC;EACF;AAGA,MAAI,SAAS,GAAG;AACd,WAAOA,UAAS,OAAQ,UAAW,cAAc,IAAM;EACzD;AAGA,MAAI,KAAK;AACP,YAAS,IAAI,SAAS,cAAe,OAAO,GAAG;AAC7C,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEA,SAASK,mBAAmBL,WAAgB;AAE1C,QAAM,cAAsC,CAAA;AAC5C,WAAS,IAAI,GAAG,IAAIA,UAAS,QAAQ,EAAE,GAAG;AACxC,gBAAYA,UAAS,CAAC,CAAC,IAAI;EAC7B;AACA,SAAO;AACT;AAKM,SAAUM,SAAsD,EAAE,MAAAf,OAAM,QAAQ,aAAa,UAAAS,UAAQ,GAAyE;AAClL,QAAM,cAAcK,mBAAkBL,SAAQ;AAC9C,SAAOJ,MAAK;IACV;IACA,MAAAL;IACA,OAAQ,OAAiB;AACvB,aAAOM,SAAO,OAAOG,WAAU,WAAW;IAC5C;IACA,OAAQ,OAAa;AACnB,aAAOF,SAAO,OAAO,aAAa,aAAaP,KAAI;IACrD;GACD;AACH;;;AC9OO,IAAMgB,aAAYC,OAAM;EAC7B,MAAM;EACN,QAAQ;EACR,UAAU;CACX;AAEM,IAAMC,gBAAeD,OAAM;EAChC,MAAM;EACN,QAAQ;EACR,UAAU;CACX;;;ACVM,IAAME,UAASC,SAAQ;EAC5B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMC,aAAYD,SAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAME,aAAYF,SAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMG,gBAAeH,SAAQ;EAClC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;;;ACpBD,IAAM,UAAU,CAAC,OAA2B;AAC1C,SAAO,GAAG,SAAQ,EAAG,MAAM,GAAG,EAAE,MAAM,CAAC;AACzC;AAEO,IAAM,OAAO,CAAC,OAAyC;AAC5D,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,UAAI,KAAK,SAAS,GAAG;AACnB,eAAO;MACT;AAEA,UAAI,GAAG,KAAK,CAAC,CAAC,GAAG;AACf,eAAO,KAAK,MAAM,CAAC;MACrB;AAEA,aAAO;IACT;IACA,SAAS;;AAEb;AAEO,IAAM,UAAU,CAAC,QAAwB;AAC9C,SAAO;IACL,OAAO,CAAC,SAAS,KAAK,CAAC,QAAQ,QAAQ,GAAG,EAAE,MAAM,IAAI;IACtD,SAAS;;AAEb;AAEO,IAAM,SAAS,MAAc;AAClC,SAAO;IACL,OAAO,CAAC,SAAS,KAAK,CAAC,QAAQ,OAAO,QAAQ,QAAQ,EAAE,MAAM,IAAI;IAClE,SAAS;;AAEb;AAEO,IAAM,SAAS,MAAc;AAClC,SAAO;IACL,OAAO,CAAC,SAAS,KAAK,CAAC,QAAQ,CAAC,MAAM,SAAS,GAAG,CAAC,CAAC,EAAE,MAAM,IAAI;IAChE,SAAS;;AAEb;AAEO,IAAM,SAAS,MAAc;AAClC,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,UAAI,KAAK,SAAS,GAAG;AACnB,eAAO;MACT;AAEA,UAAI,KAAK,CAAC,MAAM,SAAS,KAAK,CAAC,MAAM,QAAQ;AAC3C,eAAO;MACT;AAGA,UAAI,KAAK,CAAC,EAAE,WAAW,GAAG,KAAK,KAAK,CAAC,EAAE,WAAW,GAAG,GAAG;AACtD,YAAI;AACF,UAAAI,WAAU,OAAO,IAAI,KAAK,CAAC,CAAC,EAAE;QAChC,SAAS,KAAK;AACZ,iBAAO;QACT;MACF,OAAO;AACL,eAAO;MACT;AAEA,aAAO,KAAK,MAAM,CAAC;IACrB;IACA,SAAS;;AAEb;AAEO,IAAM,WAAW,MAAc;AACpC,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,UAAI,KAAK,SAAS,GAAG;AACnB,eAAO;MACT;AAEA,UAAI,KAAK,CAAC,MAAM,YAAY;AAC1B,eAAO;MACT;AAEA,UAAI;AACF,QAAAC,WAAU,OAAO,KAAK,CAAC,CAAC;MAC1B,QAAQ;AACN,eAAO;MACT;AAEA,aAAO,KAAK,MAAM,CAAC;IACrB;IACA,SAAS;;AAEb;AAEO,IAAM,WAAW,CAAC,YAA6B;AACpD,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,YAAM,SAAS,QAAQ,MAAM,IAAI;AAEjC,UAAI,WAAW,OAAO;AACpB,eAAO;MACT;AAEA,aAAO;IACT;IACA,SAAS,YAAY,QAAQ,OAAO;;AAExC;AAEO,IAAMC,MAAK,IAAI,aAAgC;AACpD,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,UAAI;AAEJ,iBAAW,WAAW,UAAU;AAC9B,cAAM,SAAS,QAAQ,MAAM,IAAI;AAGjC,YAAI,WAAW,OAAO;AACpB;QACF;AAGA,YAAI,WAAW,QAAQ,OAAO,SAAS,QAAQ,QAAQ;AACrD,oBAAU;QACZ;MACF;AAEA,UAAI,WAAW,MAAM;AACnB,eAAO;MACT;AAEA,aAAO;IACT;IACA,SAAS,MAAM,SAAS,IAAI,OAAK,EAAE,OAAO,EAAE,KAAK,IAAI,CAAC;;AAE1D;AAEO,IAAM,MAAM,IAAI,aAAgC;AACrD,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,iBAAW,WAAW,UAAU;AAE9B,cAAM,SAAS,QAAQ,MAAM,IAAI;AAGjC,YAAI,WAAW,OAAO;AACpB,iBAAO;QACT;AAEA,eAAO;MACT;AAEA,aAAO;IACT;IACA,SAAS,OAAO,SAAS,IAAI,OAAK,EAAE,OAAO,EAAE,KAAK,IAAI,CAAC;;AAE3D;AAEM,SAAU,OAAQ,UAAmB;AACzC,WAAS,MAAO,IAAa;AAC3B,QAAI,QAAQ,QAAQ,EAAE;AAEtB,eAAW,WAAW,UAAU;AAC9B,YAAM,SAAS,QAAQ,MAAM,KAAK;AAElC,UAAI,WAAW,OAAO;AACpB,eAAO;MACT;AAEA,cAAQ;IACV;AAEA,WAAO;EACT;AAEA,WAAS,QAAS,IAAa;AAC7B,UAAM,SAAS,MAAM,EAAE;AAEvB,WAAO,WAAW;EACpB;AAEA,WAAS,WAAY,IAAa;AAChC,UAAM,SAAS,MAAM,EAAE;AAEvB,QAAI,WAAW,OAAO;AACpB,aAAO;IACT;AAEA,WAAO,OAAO,WAAW;EAC3B;AAEA,SAAO;IACL;IACA;IACA;;AAEJ;;;ACxHA,IAAM,WAAW,OAAM;AAEhB,IAAM,UAAU,IAAI,QAAQ;AAKnC,IAAM,QAAQ,IAAI,QAAQ,MAAM,GAAG,OAAM,CAAE;AAC3C,IAAM,QAAQ,IAAI,QAAQ,MAAM,GAAG,OAAM,CAAE;AAC3C,IAAM,WAAW,IAAI,QAAQ,SAAS,GAAG,OAAM,CAAE;AACjD,IAAM,OAAO,IAAI,QAAQ,KAAK,GAAG,OAAM,CAAE;AAgBlC,IAAM,OAAO,IAAI,OAAO,SAAS,OAAM,CAAE,CAAC;AAgB1C,IAAM,OAAO,IAAI,OAAO,SAAS,OAAM,CAAE,CAAC;AAiB1C,IAAM,UAAU,IAAI,UAAU,SAAS,OAAM,CAAE,CAAC;AAiBhD,IAAMC,OAAM,IAAIC,IAAG,MAAM,UAAU,OAAO,KAAK,GAAG,SAAS,OAAM,CAAE,CAAC;AAE3E,IAAM,OAAO,IAAI,QAAQ,KAAK,GAAG,KAAK,MAAM,CAAC;AAC7C,IAAM,OAAO,IAAI,QAAQ,KAAK,GAAG,KAAK,MAAM,CAAC;AAC7C,IAAM,MAAMA,IAAG,MAAM,IAAI;AAEzB,IAAM,gBAAgBA,IAAG,KAAK,MAAM,OAAO,OAAO,QAAQ;AAiBnD,IAAM,eAAe,IAAIA,IAAG,KAAK,IAAIA,IAAG,MAAM,UAAU,OAAO,KAAK,GAAG,SAAS,OAAM,CAAE,CAAC,CAAC,CAAC;AAkB3F,IAAM,MAAM,IAAI,IAAI;AAkBpB,IAAM,MAAM,IAAI,IAAI;AAepB,IAAM,KAAK,IAAI,GAAG;AAEzB,IAAM,OAAO,IAAI,eAAe,QAAQ,KAAK,GAAG,OAAM,CAAE;AACxD,IAAM,OAAO,IAAI,eAAe,QAAQ,KAAK,GAAG,OAAM,CAAE;AAcjD,IAAM,MAAM,IAAI,IAAI,MAAM,SAAS,OAAM,CAAE,CAAC,CAAC;AAc7C,IAAM,MAAM,IAAI,IAAI;AAE3B,IAAM,QAAQ,IAAI,MAAM,QAAQ,MAAM,GAAG,SAAS,OAAM,CAAE,CAAC;AAC3D,IAAM,UAAU,IAAI,MAAM,QAAQ,SAAS,GAAG,SAAS,OAAM,CAAE,CAAC;AAEhE,IAAM,gBAAgBA,IAAG,OAAO,OAAO;AAchC,IAAM,OAAO,IAAI,KAAK;AActB,IAAM,SAAS,IAAI,OAAO;AAEjC,IAAM,OAAOA,IACX,eACA,MACA,MACA,OACA,OAAO;AAGT,IAAM,cAAcA,IAClB,IAAI,MAAM,QAAQ,IAAI,GAAG,SAAS,OAAM,CAAE,CAAC,CAAC;AAevC,IAAM,aAAa,IAAI,WAAW;AAEzC,IAAM,oBAAoBA,IACxB,IAAI,MAAM,QAAQ,KAAK,GAAG,SAAS,OAAM,CAAE,CAAC,GAC5C,IAAI,MAAM,QAAQ,KAAK,GAAG,SAAS,IAAI,QAAQ,KAAK,GAAG,OAAM,CAAE,CAAC,GAAG,QAAQ,IAAI,GAAG,SAAS,OAAM,CAAE,CAAC,CAAC;AAehG,IAAM,mBAAmB,IAAI,iBAAiB;AAErD,IAAM,gBAAgB,IAAI,MAAM,QAAQ,eAAe,GAAG,SAAS,SAAQ,CAAE,GAAG,SAAS,SAAQ,CAAE,GAAG,SAAS,OAAM,CAAE,CAAC;AAcjH,IAAM,eAAe,IAAI,aAAa;AAE7C,IAAM,gBAAgB,IAAI,SAAS,QAAQ,cAAc,GAAG,SAAS,SAAQ,CAAE,GAAG,SAAS,SAAQ,CAAE,GAAG,SAAS,OAAM,CAAE,CAAC;AAcnH,IAAM,eAAe,IAAI,aAAa;AAE7C,IAAM,OAAOA,IACX,aACA,mBACA,IAAI,MAAM,SAAS,OAAM,CAAE,CAAC,GAC5B,IAAI,eAAe,SAAS,OAAM,CAAE,CAAC,GACrC,IAAI,eAAe,SAAS,OAAM,CAAE,CAAC,GACrC,eACA,eACA,OAAM,CAAE;AAeH,IAAMC,OAAM,IAAI,IAAI;AAE3B,IAAM,WAAW,IAAI,MAAM,QAAQ,aAAa,GAAG,OAAM,CAAE;AAcpD,IAAM,UAAU,IAAI,QAAQ;AAEnC,IAAM,UAAUD,IACd,IAAI,MAAM,QAAQ,aAAa,GAAG,QAAQ,QAAQ,GAAG,SAAS,OAAM,CAAE,CAAC,GACvE,IAAI,MAAM,QAAQ,QAAQ,GAAG,SAAS,OAAM,CAAE,CAAC,GAC/C,IAAI,QAAQ,QAAQ,GAAG,SAAS,OAAM,CAAE,CAAC,CAAC;AAerC,IAAM,SAAS,IAAI,OAAO;AAEjC,IAAM,QAAQA,IACZ,IAAI,eAAe,QAAQ,KAAK,GAAG,OAAM,GAAI,QAAQ,MAAM,GAAG,SAAS,OAAM,CAAE,CAAC,GAChF,IAAI,eAAe,QAAQ,MAAM,GAAG,SAAS,OAAM,CAAE,CAAC,CAAC;AAelD,IAAM,OAAO,IAAI,KAAK;AAE7B,IAAM,SAASA,IACb,IAAI,eAAe,QAAQ,KAAK,GAAGA,IACjC,IAAI,QAAQ,KAAK,GAAG,QAAQ,MAAM,CAAC,GACnC,IAAI,OAAM,GAAI,QAAQ,OAAO,CAAC,GAC9B,IAAI,OAAM,GAAI,QAAQ,KAAK,GAAG,QAAQ,MAAM,CAAC,CAAC,GAC7C,SAAS,OAAM,CAAE,CAAC,GACrB,IAAI,eAAe,QAAQ,KAAK,GAAG,QAAQ,MAAM,GAAG,SAAS,OAAM,CAAE,CAAC,GACtE,IAAI,eAAe,QAAQ,OAAO,GAAG,SAAS,OAAM,CAAE,CAAC,CAAC;AAenD,IAAM,QAAQ,IAAI,MAAM;AAE/B,IAAM,UAAUA,IACd,IAAI,QAAQ,QAAQ,GAAG,OAAM,GAAI,SAAS,OAAM,CAAE,CAAC,CAAC;AAe/C,IAAM,SAAS,IAAI,OAAO;AAEjC,IAAM,QAAQA,IACZ,IAAI,QAAQ,MAAM,GAAG,OAAM,GAAI,SAAS,OAAM,CAAE,CAAC,CAAC;AAe7C,IAAM,OAAO,IAAI,KAAK;;;ACzfvB,SAAU,wBAAyB,YAAyB,eAAwB,YAAmB;AAC3G,SAAO,WAAW,OAAO,QAAK;AAC5B,QAAI,MAAM,QAAQ,EAAE,KAAM,iBAAiB,KAAK,QAAQ,EAAE,GAAI;AAC5D,UAAI,YAAY;AACd,eAAO;MACT;AAEA,UAAIE,KAAI,QAAQ,EAAE,GAAG;AACnB,eAAO;MACT;AAEA,aAAO,YAAY,GAAG,UAAS,EAAG,IAAI,MAAM;IAC9C;AAGA,QAAI,CAAC,iBAAiB,YAAY;AAChC,YAAM,EAAE,KAAI,IAAK,GAAG,UAAS;AAC7B,UAAI,SAAS,eAAe,SAAS,eAAe,KAAK,SAAS,YAAY,GAAG;AAC/E,eAAO;MACT;IACF;AAEA,WAAO;EACT,CAAC;AACH;AAMA,gBAAwB,yBAA0B,KAAU,SAAkBC,SAAyB,eAAwB,YAAqBC,WAA2C,CAAA,GAAE;AAC/L,mBAAiB,YAAY,QAAQ,cAAc,KAAKA,QAAO,GAAG;AAEhE,UAAM,gBAAgB,wBAAwB,SAAS,YAAY,eAAe,UAAU;AAE5F,QAAI,cAAc,WAAW,GAAG;AAC9B;IACF;AAMA,UAAM,MAAM,eAAe,cAAc,CAAC,CAAC;AAE3C,UAAM,IAAI,iBAAiB,KAAK,EAAE,QAAAD,SAAQ,sBAAsBC,SAAQ,qBAAoB,CAAE;EAChG;AACF;;;ACrCA,IAAM,0BAAN,cAAsC,gBAAyE;EAC5F;EACA;EACA;EACA;EAEjB,YAAa,YAA+C,MAA0C;AACpG,UAAM,YAAY;MAChB,GAAG;MACH,MAAM;KACP;AAED,SAAK,UAAU,WAAW;AAC1B,SAAK,gBAAgB,KAAK,iBAAiB;AAC3C,SAAK,aAAa,KAAK,cAAc;AACrC,SAAK,uBAAuB,KAAK;EACnC;EAEA,MAAM,cAAe,KAAU,UAA4BC,UAA8B;AACvF,SAAK,IAAI,iCAAiC,KAAK,SAAS,GAAG;AAE3D,UAAM,QAAQ,MAAM,SAAS,YAAY,KAAKA,SAAQ,MAAM;AAC5D,SAAK,IAAI,MAAM,4BAA4B,KAAK,SAAS,GAAG;AAE5D,UAAMA,SAAQ,aAAa,KAAK;AAEhC,WAAO;EACT;EAEA,OAAQ,iBAAkB,KAAUA,WAAwB,CAAA,GAAE;AAC5D,WAAQ,yBAAyB,KAAK,KAAK,SAAS,KAAK,QAAQ,KAAK,eAAe,KAAK,YAAY,EAAE,GAAGA,UAAS,sBAAsB,KAAK,qBAAoB,CAAE;EACvK;EAEA,cAAe,UAA0B;AACvC,WAAO,SAAS,IAAI,SAAQ;EAC9B;EAEA,OAAQ,WAA6B,WAA2B;AAC9D,WAAO,UAAU,IAAI,SAAQ,MAAO,UAAU,IAAI,SAAQ;EAC5D;EAEA,MAAM,kBAAmB,UAA4CA,UAAsB;AACzF,QAAI,SAAS,QAAQ,GAAG;AACtB;IACF;AAEA,UAAM,gBAAgB,wBAAwB,MAAM,QAAQ,QAAQ,IAAI,WAAW,CAAC,QAAQ,GAAG,KAAK,eAAe,KAAK,UAAU;AAElI,QAAI,cAAc,WAAW,GAAG;AAC9B;IACF;AAMA,UAAM,MAAM,eAAe,cAAc,CAAC,CAAC;AAE3C,WAAO,IAAI,iBAAiB,KAAK;MAC/B,QAAQ,KAAK;MACb,sBAAsB,KAAK;KAC5B;EACH;;AAGI,SAAU,8BAA+B,YAA+C,MAA0C;AACtI,SAAO,IAAI,wBAAwB,YAAY,IAAI;AACrD;;;ACpDM,IAAO,8BAAP,MAAkC;EACrB;EACA;EACA;EACA;EACA;EACA;EAEjB,YAAa,YAAmD,OAAwC,CAAA,GAAE;AACxG,SAAK,MAAM,WAAW,OAAO,aAAa,sCAAsC;AAChF,SAAK,SAAS,WAAW;AACzB,SAAK,UAAU,WAAW;AAC1B,SAAK,gBAAgB,KAAK,iBAAiB;AAC3C,SAAK,aAAa,KAAK,cAAc;AACrC,SAAK,uBAAuB,KAAK;EACnC;EAEA,MAAM,SAAU,KAAUC,WAAyE,CAAA,GAAE;AACnG,UAAM,kBAA2B,CAAA;AAEjC,qBAAiB,WAAW,yBAAyB,KAAK,KAAK,SAAS,KAAK,QAAQ,KAAK,eAAe,KAAK,YAAY,EAAE,GAAGA,UAAS,sBAAsB,KAAK,qBAAoB,CAAE,GAAG;AAC1L,WAAK,IAAI,gCAAgC,KAAK,QAAQ,GAAG;AAEzD,UAAI;AACF,cAAM,QAAQ,MAAM,QAAQ,YAAY,KAAKA,SAAQ,MAAM;AAC3D,aAAK,IAAI,MAAM,4BAA4B,KAAK,QAAQ,GAAG;AAE3D,YAAI;AACF,gBAAMA,SAAQ,aAAa,KAAK;QAClC,SAAS,KAAK;AACZ,eAAK,IAAI,MAAM,2CAA2C,KAAK,QAAQ,KAAK,GAAG;AAE/E;QACF;AAEA,eAAO;MACT,SAAS,KAAc;AACrB,aAAK,IAAI,MAAM,sCAAsC,KAAK,QAAQ,KAAK,GAAG;AAE1E,YAAI,eAAe,OAAO;AACxB,0BAAgB,KAAK,GAAG;QAC1B,OAAO;AACL,0BAAgB,KAAK,IAAI,MAAM,qCAAqC,GAAG,iBAAiB,QAAQ,GAAG,EAAE,CAAC;QACxG;AAGA,YAAIA,SAAQ,QAAQ,YAAY,MAAM;AACpC,eAAK,IAAI,MAAM,uEAAuE,KAAK,QAAQ,GAAG;AACtG;QACF;MACF;IACF;AAEA,QAAI,gBAAgB,SAAS,GAAG;AAC9B,YAAM,IAAI,eAAe,iBAAiB,qCAAqC,GAAG,mBAAmB;IACvG,OAAO;AACL,YAAM,IAAI,MAAM,qCAAqC,GAAG,mBAAmB;IAC7E;EACF;EAEA,cAAeA,WAAgD,CAAA,GAAE;AAC/D,WAAO,8BAA8B;MACnC,QAAQ,KAAK;MACb,SAAS,KAAK;OACb;MACD,GAAGA;MACH,YAAY,KAAK;MACjB,eAAe,KAAK;MACpB,sBAAsB,KAAK;KAC5B;EACH;;;;ACnGK,IAAM,yBAAyB;AAC/B,IAAM,sBAAsB;AAgC7B,SAAU,iBAAkB,OAAwC,CAAA,GAAE;AAC1E,SAAO,CAAC,eAAe,IAAI,4BAA4B,YAAY,IAAI;AACzE;;;ACYA,gBAAO,0BAAwD,QAA2BC,WAA4C,CAAA,GAAE;AACtI,QAAM,SAAS,OAAO,UAAS;AAE/B,MAAI;AACF,WAAO,MAAM;AACX,YAAM,SAAS,MAAM,OAAO,KAAI;AAEhC,UAAI,OAAO,MAAM;AACf;MACF;AAEA,YAAM,OAAO;IACf;EACF;AACE,QAAIA,SAAQ,kBAAkB,MAAM;AAClC,YAAM,OAAO,OAAM;IACrB;AAEA,WAAO,YAAW;EACpB;AACF;;;ACtEA,4BAAqB;;;ACMf,IAAO,6BAAP,cAA0C,MAAK;EACnD,OAAO,OAAO;EAEd,YAAaC,WAAU,wCAAsC;AAC3D,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,qBAAP,cAAkC,MAAK;EAC3C,OAAO,OAAO;EAEd,YAAaA,WAAU,sBAAoB;AACzC,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,2BAAP,cAAwC,MAAK;EACjD,OAAO,OAAO;EAEd,YAAaA,WAAU,oCAAkC;AACvD,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,sBAAP,cAAmC,MAAK;EAC5C,OAAO,OAAO;EAEd,YAAaA,WAAU,2BAAyB;AAC9C,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,oBAAP,cAAiC,MAAK;EAC1C,OAAO,OAAO;EAEd,YAAaA,WAAU,sDAAoD;AACzE,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,yBAAP,cAAsC,MAAK;EAC/C,OAAO,OAAO;EAEd,YAAaA,WAAU,uBAAqB;AAC1C,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,gCAAP,cAA6C,MAAK;EACtD,OAAO,OAAO;EAEd,YAAaA,WAAU,+BAA6B;AAClD,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;;;AChDI,IAAW;CAAjB,SAAiBC,YAAS;AACxB,MAAY;AAAZ,GAAA,SAAYC,eAAY;AACtB,IAAAA,cAAA,KAAA,IAAA;EACF,GAFY,eAAAD,WAAA,iBAAAA,WAAA,eAAY,CAAA,EAAA;AAIxB,MAAK;AAAL,GAAA,SAAKE,uBAAoB;AACvB,IAAAA,sBAAAA,sBAAA,KAAA,IAAA,CAAA,IAAA;EACF,GAFK,yBAAA,uBAAoB,CAAA,EAAA;AAIzB,GAAA,SAAiBD,eAAY;AACd,IAAAA,cAAA,QAAQ,MAA0B;AAC7C,aAAO,YAA0B,oBAAoB;IACvD;EACF,GAJiB,eAAAD,WAAA,iBAAAA,WAAA,eAAY,CAAA,EAAA;AAM7B,MAAI;AAES,EAAAA,WAAA,QAAQ,MAAuB;AAC1C,QAAI,UAAU,MAAM;AAClB,eAAS,QAAmB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAChD,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAI,IAAI,SAAS,MAAM;AACrB,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,KAAK;QACnB;AAEA,YAAI,IAAI,eAAe,MAAM;AAC3B,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,WAAW;QACzB;AAEA,YAAI,IAAI,gBAAgB,MAAM;AAC5B,YAAE,OAAO,EAAE;AACX,UAAAA,WAAU,aAAa,MAAK,EAAG,OAAO,IAAI,cAAc,CAAC;QAC3D;AAEA,YAAI,IAAI,YAAY,MAAM;AACxB,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,QAAQ;QACtB;AAEA,YAAI,IAAI,YAAY,MAAM;AACxB,YAAE,OAAO,EAAE;AACX,YAAE,OAAO,IAAI,QAAQ;QACvB;AAEA,YAAI,IAAI,OAAO,MAAM;AACnB,YAAE,OAAO,EAAE;AACX,YAAE,OAAO,IAAI,GAAG;QAClB;AAEA,YAAI,IAAI,UAAU,MAAM;AACtB,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,MAAM;QACpB;AAEA,YAAI,IAAI,eAAe,MAAM;AAC3B,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,WAAW;QACzB;AAEA,YAAI,IAAI,QAAQ,MAAM;AACpB,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,IAAI;QAClB;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQG,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW,CAAA;AAEjB,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,QAAQ,OAAO,MAAK;AACxB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,cAAc,OAAO,MAAK;AAC9B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,eAAeH,WAAU,aAAa,MAAK,EAAG,OAAO,MAAM;AAC/D;YACF;YACA,KAAK,GAAG;AACN,kBAAI,WAAW,OAAO,MAAK;AAC3B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,WAAW,OAAO,OAAM;AAC5B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,MAAM,OAAO,OAAM;AACvB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,SAAS,OAAO,MAAK;AACzB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,cAAc,OAAO,MAAK;AAC9B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,OAAO,OAAO,MAAK;AACvB;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAA,WAAA,SAAS,CAAC,QAAuC;AAC5D,WAAO,cAAc,KAAKA,WAAU,MAAK,CAAE;EAC7C;AAEa,EAAAA,WAAA,SAAS,CAAC,KAAkC,SAA8C;AACrG,WAAO,cAAc,KAAKA,WAAU,MAAK,GAAI,IAAI;EACnD;AACF,GA1IiB,cAAA,YAAS,CAAA,EAAA;;;ACrBnB,IAAMI,SAAQ,IAAI,WAAW,CAAC;AAW/B,SAAUC,QAAQ,IAAgB,IAAc;AACpD,MAAI,OAAO,IAAI;AAAE,WAAO;EAAK;AAC7B,MAAI,GAAG,eAAe,GAAG,YAAY;AACnC,WAAO;EACT;AAEA,WAAS,KAAK,GAAG,KAAK,GAAG,YAAY,MAAM;AACzC,QAAI,GAAG,EAAE,MAAM,GAAG,EAAE,GAAG;AACrB,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEM,SAAUC,QAAQ,GAA6C;AACnE,MAAI,aAAa,cAAc,EAAE,YAAY,SAAS,cAAc;AAAE,WAAO;EAAE;AAC/E,MAAI,aAAa,aAAa;AAAE,WAAO,IAAI,WAAW,CAAC;EAAE;AACzD,MAAI,YAAY,OAAO,CAAC,GAAG;AACzB,WAAO,IAAI,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU;EAC5D;AACA,QAAM,IAAI,MAAM,mCAAmC;AACrD;;;ACvBA,SAASC,MAAM,UAAUC,OAAI;AAC3B,MAAI,SAAS,UAAU,KAAK;AAAE,UAAM,IAAI,UAAU,mBAAmB;EAAE;AACvE,MAAI,WAAW,IAAI,WAAW,GAAG;AACjC,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,aAAS,CAAC,IAAI;EAChB;AACA,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,QAAI,IAAI,SAAS,OAAO,CAAC;AACzB,QAAI,KAAK,EAAE,WAAW,CAAC;AACvB,QAAI,SAAS,EAAE,MAAM,KAAK;AAAE,YAAM,IAAI,UAAU,IAAI,eAAe;IAAE;AACrE,aAAS,EAAE,IAAI;EACjB;AACA,MAAI,OAAO,SAAS;AACpB,MAAI,SAAS,SAAS,OAAO,CAAC;AAC9B,MAAI,SAAS,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,GAAG;AAC1C,MAAI,UAAU,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI;AAI3C,WAASC,SAAQ,QAAM;AAErB,QAAI,kBAAkB;AAAY;aAAW,YAAY,OAAO,MAAM,GAAG;AACvE,eAAS,IAAI,WAAW,OAAO,QAAQ,OAAO,YAAY,OAAO,UAAU;IAC7E,WAAW,MAAM,QAAQ,MAAM,GAAG;AAChC,eAAS,WAAW,KAAK,MAAM;IACjC;AACA,QAAI,EAAE,kBAAkB,aAAa;AAAE,YAAM,IAAI,UAAU,qBAAqB;IAAE;AAClF,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO;IAAG;AAErC,QAAI,SAAS;AACb,QAAIC,WAAS;AACb,QAAI,SAAS;AACb,QAAI,OAAO,OAAO;AAClB,WAAO,WAAW,QAAQ,OAAO,MAAM,MAAM,GAAG;AAC9C;AACA;IACF;AAEA,QAAI,QAAS,OAAO,UAAU,UAAU,MAAO;AAC/C,QAAI,MAAM,IAAI,WAAW,IAAI;AAE7B,WAAO,WAAW,MAAM;AACtB,UAAI,QAAQ,OAAO,MAAM;AAEzB,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,MAAM,IAAI,GAAG,MAAO;AAC9B,YAAI,GAAG,IAAK,QAAQ,SAAU;AAC9B,gBAAS,QAAQ,SAAU;MAC7B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,IAAI,GAAG,MAAM,GAAG;AACrC;IACF;AAEA,QAAI,MAAM,OAAO,OAAO,MAAM;AAC9B,WAAO,MAAM,MAAM,EAAE,KAAK;AAAE,aAAO,SAAS,OAAO,IAAI,GAAG,CAAC;IAAG;AAC9D,WAAO;EACT;AAIA,WAAS,aAAc,QAAM;AAC3B,QAAI,OAAO,WAAW,UAAU;AAAE,YAAM,IAAI,UAAU,iBAAiB;IAAE;AACzE,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO,IAAI,WAAU;IAAG;AACnD,QAAI,MAAM;AAEV,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,SAAS;AACb,QAAIA,WAAS;AACb,WAAO,OAAO,GAAG,MAAM,QAAQ;AAC7B;AACA;IACF;AAEA,QAAI,QAAU,OAAO,SAAS,OAAO,SAAU,MAAO;AACtD,QAAI,OAAO,IAAI,WAAW,IAAI;AAE9B,WAAO,OAAO,GAAG,GAAG;AAElB,UAAI,QAAQ,SAAS,OAAO,WAAW,GAAG,CAAC;AAE3C,UAAI,UAAU,KAAK;AAAE;MAAO;AAC5B,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,OAAO,KAAK,GAAG,MAAO;AAChC,aAAK,GAAG,IAAK,QAAQ,QAAS;AAC9B,gBAAS,QAAQ,QAAS;MAC5B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,KAAK,GAAG,MAAM,GAAG;AACtC;IACF;AACA,QAAI,MAAM,IAAI,WAAW,UAAU,OAAO,IAAI;AAC9C,QAAIE,KAAI;AACR,WAAO,QAAQ,MAAM;AACnB,UAAIA,IAAG,IAAI,KAAK,KAAK;IACvB;AACA,WAAO;EACT;AAIA,WAASC,SAAQC,SAAM;AACrB,QAAI,SAAS,aAAaA,OAAM;AAChC,QAAI,QAAQ;AAAE,aAAO;IAAO;AAC5B,UAAM,IAAI,MAAM,OAAON,KAAI,YAAY;EACzC;AACA,SAAO;IACL,QAAQC;IACR;IACA,QAAQI;;AAEZ;AACA,IAAIE,OAAMR;AAEV,IAAIS,mCAAkCD;AAEtC,IAAAE,kBAAeD;;;ACjIf,IAAME,WAAN,MAAa;EACF;EACA;EACA;EAET,YAAaC,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;EACpB;EAEA,OAAQ,OAAiB;AACvB,QAAI,iBAAiB,YAAY;AAC/B,aAAO,GAAG,KAAK,MAAM,GAAG,KAAK,WAAW,KAAK,CAAC;IAChD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;;AAQF,IAAMC,WAAN,MAAa;EACF;EACA;EACA;EACQ;EAEjB,YAAaD,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,UAAM,kBAAkB,OAAO,YAAY,CAAC;AAE5C,QAAI,oBAAoB,QAAW;AACjC,YAAM,IAAI,MAAM,0BAA0B;IAC5C;AACA,SAAK,kBAAkB;AACvB,SAAK,aAAa;EACpB;EAEA,OAAQ,MAAY;AAClB,QAAI,OAAO,SAAS,UAAU;AAC5B,UAAI,KAAK,YAAY,CAAC,MAAM,KAAK,iBAAiB;AAChD,cAAM,MAAM,qCAAqC,KAAK,UAAU,IAAI,CAAC,KAAK,KAAK,IAAI,+CAA+C,KAAK,MAAM,EAAE;MACjJ;AACA,aAAO,KAAK,WAAW,KAAK,MAAM,KAAK,OAAO,MAAM,CAAC;IACvD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;EAEA,GAAgC,SAAmE;AACjG,WAAOE,IAAG,MAAM,OAAO;EACzB;;AAKF,IAAMC,mBAAN,MAAqB;EACV;EAET,YAAa,UAA0B;AACrC,SAAK,WAAW;EAClB;EAEA,GAAiC,SAAmE;AAClG,WAAOD,IAAG,MAAM,OAAO;EACzB;EAEA,OAAQ,OAAa;AACnB,UAAM,SAAS,MAAM,CAAC;AACtB,UAAM,UAAU,KAAK,SAAS,MAAM;AACpC,QAAI,WAAW,MAAM;AACnB,aAAO,QAAQ,OAAO,KAAK;IAC7B,OAAO;AACL,YAAM,WAAW,qCAAqC,KAAK,UAAU,KAAK,CAAC,+BAA+B,OAAO,KAAK,KAAK,QAAQ,CAAC,gBAAgB;IACtJ;EACF;;AAGI,SAAUA,IAAyC,MAA+C,OAA8C;AACpJ,SAAO,IAAIC,iBAAgB;IACzB,GAAI,KAAK,YAAY,EAAE,CAAE,KAA2B,MAAM,GAAG,KAAI;IACjE,GAAI,MAAM,YAAY,EAAE,CAAE,MAA4B,MAAM,GAAG,MAAK;GAClD;AACtB;AAEM,IAAOC,SAAP,MAAY;EACP;EACA;EACA;EACA;EACA;EACA;EAET,YAAaJ,OAAY,QAAgB,YAAsB,YAAoB;AACjF,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,UAAU,IAAID,SAAQC,OAAM,QAAQ,UAAU;AACnD,SAAK,UAAU,IAAIC,SAAQD,OAAM,QAAQ,UAAU;EACrD;EAEA,OAAQ,OAAiB;AACvB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;EAEA,OAAQ,OAAa;AACnB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;;AAGI,SAAUK,OAAmD,EAAE,MAAAL,OAAM,QAAQ,QAAAM,UAAQ,QAAAC,SAAM,GAAsE;AACrK,SAAO,IAAIH,OAAMJ,OAAM,QAAQM,UAAQC,QAAM;AAC/C;AAEM,SAAUC,OAAoD,EAAE,MAAAR,OAAM,QAAQ,UAAAS,UAAQ,GAAoD;AAC9I,QAAM,EAAE,QAAAH,UAAQ,QAAAC,SAAM,IAAKG,gBAAMD,WAAUT,KAAI;AAC/C,SAAOK,OAAK;IACV;IACA,MAAAL;IACA,QAAAM;IACA,QAAQ,CAAC,SAA6BK,QAAOJ,SAAO,IAAI,CAAC;GAC1D;AACH;AAEA,SAASA,SAAQK,SAAgB,aAAqC,aAAqBZ,OAAY;AAErG,MAAI,MAAMY,QAAO;AACjB,SAAOA,QAAO,MAAM,CAAC,MAAM,KAAK;AAC9B,MAAE;EACJ;AAGA,QAAM,MAAM,IAAI,WAAY,MAAM,cAAc,IAAK,CAAC;AAGtD,MAAI,OAAO;AACX,MAAI,SAAS;AACb,MAAI,UAAU;AACd,WAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAE5B,UAAMC,SAAQ,YAAYD,QAAO,CAAC,CAAC;AACnC,QAAIC,WAAU,QAAW;AACvB,YAAM,IAAI,YAAY,OAAOb,KAAI,YAAY;IAC/C;AAGA,aAAU,UAAU,cAAea;AACnC,YAAQ;AAGR,QAAI,QAAQ,GAAG;AACb,cAAQ;AACR,UAAI,SAAS,IAAI,MAAQ,UAAU;IACrC;EACF;AAGA,MAAI,QAAQ,gBAAgB,MAAQ,UAAW,IAAI,UAAY,GAAG;AAChE,UAAM,IAAI,YAAY,wBAAwB;EAChD;AAEA,SAAO;AACT;AAEA,SAASP,SAAQ,MAAkBG,WAAkB,aAAmB;AACtE,QAAM,MAAMA,UAASA,UAAS,SAAS,CAAC,MAAM;AAC9C,QAAM,QAAQ,KAAK,eAAe;AAClC,MAAI,MAAM;AAEV,MAAI,OAAO;AACX,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAEpC,aAAU,UAAU,IAAK,KAAK,CAAC;AAC/B,YAAQ;AAGR,WAAO,OAAO,aAAa;AACzB,cAAQ;AACR,aAAOA,UAAS,OAAQ,UAAU,IAAK;IACzC;EACF;AAGA,MAAI,SAAS,GAAG;AACd,WAAOA,UAAS,OAAQ,UAAW,cAAc,IAAM;EACzD;AAGA,MAAI,KAAK;AACP,YAAS,IAAI,SAAS,cAAe,OAAO,GAAG;AAC7C,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEA,SAASK,mBAAmBL,WAAgB;AAE1C,QAAM,cAAsC,CAAA;AAC5C,WAAS,IAAI,GAAG,IAAIA,UAAS,QAAQ,EAAE,GAAG;AACxC,gBAAYA,UAAS,CAAC,CAAC,IAAI;EAC7B;AACA,SAAO;AACT;AAKM,SAAUM,SAAsD,EAAE,MAAAf,OAAM,QAAQ,aAAa,UAAAS,UAAQ,GAAyE;AAClL,QAAM,cAAcK,mBAAkBL,SAAQ;AAC9C,SAAOJ,OAAK;IACV;IACA,MAAAL;IACA,OAAQ,OAAiB;AACvB,aAAOM,SAAO,OAAOG,WAAU,WAAW;IAC5C;IACA,OAAQ,OAAa;AACnB,aAAOF,SAAO,OAAO,aAAa,aAAaP,KAAI;IACrD;GACD;AACH;;;AC9OO,IAAMgB,UAASC,OAAM;EAC1B,QAAQ;EACR,MAAM;EACN,UAAU;CACX;AAEM,IAAMC,eAAcD,OAAM;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;CACX;;;ACVM,IAAME,UAASC,SAAQ;EAC5B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMC,eAAcD,SAAQ;EACjC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAME,aAAYF,SAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMG,kBAAiBH,SAAQ;EACpC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMI,aAAYJ,SAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMK,kBAAiBL,SAAQ;EACpC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMM,gBAAeN,SAAQ;EAClC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMO,qBAAoBP,SAAQ;EACvC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMQ,WAAUR,SAAQ;EAC7B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;;;AC7DM,IAAMS,aAAYC,OAAM;EAC7B,MAAM;EACN,QAAQ;EACR,UAAU;CACX;AAEM,IAAMC,gBAAeD,OAAM;EAChC,MAAM;EACN,QAAQ;EACR,UAAU;CACX;;;ACXD,IAAIE,YAAWC;AAEf,IAAIC,OAAM;AAAV,IACIC,QAAO;AADX,IAEIC,UAAS,CAACD;AAFd,IAGIE,OAAM,KAAK,IAAI,GAAG,EAAE;AAOxB,SAASJ,SAAO,KAAK,KAAK,QAAM;AAC9B,QAAM,OAAO,CAAA;AACb,WAAS,UAAU;AACnB,MAAI,YAAY;AAEhB,SAAM,OAAOI,MAAK;AAChB,QAAI,QAAQ,IAAK,MAAM,MAAQH;AAC/B,WAAO;EACT;AACA,SAAM,MAAME,SAAQ;AAClB,QAAI,QAAQ,IAAK,MAAM,MAAQF;AAC/B,aAAS;EACX;AACA,MAAI,MAAM,IAAI,MAAM;AAGpB,EAAAD,SAAO,QAAQ,SAAS,YAAY;AAEpC,SAAO;AACT;AAEA,IAAIK,WAASC;AAEb,IAAIC,SAAQ;AAAZ,IACIC,UAAS;AAMb,SAASF,MAAK,KAAK,QAAM;AACvB,MAAI,MAAS,GACT,SAAS,UAAU,GACnB,QAAS,GACT,UAAU,QACV,GACA,IAAI,IAAI;AAEZ,KAAG;AACD,QAAI,WAAW,GAAG;AAEhB,MAAAA,MAAK,QAAQ;AACb,YAAM,IAAI,WAAW,yBAAyB;IAChD;AACA,QAAI,IAAI,SAAS;AACjB,WAAO,QAAQ,MACV,IAAIE,YAAW,SACf,IAAIA,WAAU,KAAK,IAAI,GAAG,KAAK;AACpC,aAAS;EACX,SAAS,KAAKD;AAGd,EAAAD,MAAK,QAAQ,UAAU;AAEvB,SAAO;AACT;AAEA,IAAIG,MAAK,KAAK,IAAI,GAAI,CAAC;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AAEvB,IAAIC,UAAS,SAAgCC,QAAK;AAChD,SACEA,SAAQV,MAAK,IACbU,SAAQT,MAAK,IACbS,SAAQR,MAAK,IACbQ,SAAQP,MAAK,IACbO,SAAQN,MAAK,IACbM,SAAQL,MAAK,IACbK,SAAQJ,MAAK,IACbI,SAAQH,MAAK,IACbG,SAAQF,MAAK,IACA;AAEjB;AAEA,IAAIG,UAAS;EACT,QAAQrB;EACR,QAAQM;EACR,gBAAgBa;;AAGpB,IAAIG,gBAAeD;AAEnB,IAAAE,kBAAeD;;;ACrGT,SAAUE,SAAQ,MAAkB,SAAS,GAAC;AAClD,QAAMC,SAAOC,gBAAO,OAAO,MAAM,MAAM;AACvC,SAAO,CAACD,QAAMC,gBAAO,OAAO,KAAK;AACnC;AAEM,SAAUC,UAAU,KAAa,QAAoB,SAAS,GAAC;AACnE,EAAAD,gBAAO,OAAO,KAAK,QAAQ,MAAM;AACjC,SAAO;AACT;AAEM,SAAUE,gBAAgB,KAAW;AACzC,SAAOF,gBAAO,eAAe,GAAG;AAClC;;;ACPM,SAAUG,QAA8BC,QAAYC,SAAkB;AAC1E,QAAM,OAAOA,QAAO;AACpB,QAAM,aAAoBC,gBAAeF,MAAI;AAC7C,QAAM,eAAe,aAAoBE,gBAAe,IAAI;AAE5D,QAAM,QAAQ,IAAI,WAAW,eAAe,IAAI;AAChD,EAAOC,UAASH,QAAM,OAAO,CAAC;AAC9B,EAAOG,UAAS,MAAM,OAAO,UAAU;AACvC,QAAM,IAAIF,SAAQ,YAAY;AAE9B,SAAO,IAAIG,QAAOJ,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAKM,SAAUI,SAAQ,WAAqB;AAC3C,QAAM,QAAQC,QAAO,SAAS;AAC9B,QAAM,CAACN,QAAM,UAAU,IAAWK,SAAO,KAAK;AAC9C,QAAM,CAAC,MAAM,YAAY,IAAWA,SAAO,MAAM,SAAS,UAAU,CAAC;AACrE,QAAMJ,UAAS,MAAM,SAAS,aAAa,YAAY;AAEvD,MAAIA,QAAO,eAAe,MAAM;AAC9B,UAAM,IAAI,MAAM,kBAAkB;EACpC;AAEA,SAAO,IAAIG,QAAOJ,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAEM,SAAUM,SAAQ,GAAoB,GAAU;AACpD,MAAI,MAAM,GAAG;AACX,WAAO;EACT,OAAO;AACL,UAAM,OAAO;AAEb,WACE,EAAE,SAAS,KAAK,QAChB,EAAE,SAAS,KAAK,QAChB,KAAK,iBAAiB,cACtBA,QAAW,EAAE,OAAO,KAAK,KAAK;EAElC;AACF;AAMM,IAAOH,UAAP,MAAa;EACR;EACA;EACA;EACA;;;;EAKT,YAAaJ,QAAY,MAAYC,SAAoB,OAAiB;AACxE,SAAK,OAAOD;AACZ,SAAK,OAAO;AACZ,SAAK,SAASC;AACd,SAAK,QAAQ;EACf;;;;AC1DI,SAAUO,QAA0F,MAASC,QAAmC;AACpJ,QAAM,EAAE,OAAO,SAAAC,SAAO,IAAK;AAC3B,UAAQA,UAAS;IACf,KAAK;AACH,aAAOC,YACL,OACAC,WAAU,IAAI,GACdH,UAAqCI,WAAU,OAAO;IAE1D;AACE,aAAOC,YACL,OACAF,WAAU,IAAI,GACbH,UAAQM,QAAO,OAAwC;EAE9D;AACF;AAYA,IAAMC,SAAQ,oBAAI,QAAO;AAEzB,SAASC,WAAW,KAAoB;AACtC,QAAMA,cAAYD,OAAM,IAAI,GAAG;AAC/B,MAAIC,eAAa,MAAM;AACrB,UAAMA,cAAY,oBAAI,IAAG;AACzB,IAAAD,OAAM,IAAI,KAAKC,WAAS;AACxB,WAAOA;EACT;AACA,SAAOA;AACT;AAEM,IAAOC,OAAP,MAAO,KAAG;EACL;EACA;EACA;EACA;EACA;;;;;;EAOT,YAAaC,UAAkBC,QAAc,WAAqC,OAAiB;AACjG,SAAK,OAAOA;AACZ,SAAK,UAAUD;AACf,SAAK,YAAY;AACjB,SAAK,QAAQ;AAIb,SAAK,GAAG,IAAI;EACd;;;;;;;EAQA,IAAI,QAAK;AACP,WAAO;EACT;;EAGA,IAAI,aAAU;AACZ,WAAO,KAAK,MAAM;EACpB;;EAGA,IAAI,aAAU;AACZ,WAAO,KAAK,MAAM;EACpB;EAEA,OAAI;AACF,YAAQ,KAAK,SAAS;MACpB,KAAK,GAAG;AACN,eAAO;MACT;MACA,KAAK,GAAG;AACN,cAAM,EAAE,MAAAC,QAAM,UAAS,IAAK;AAE5B,YAAIA,WAASC,cAAa;AACxB,gBAAM,IAAI,MAAM,0CAA0C;QAC5D;AAGA,YAAI,UAAU,SAASC,eAAc;AACnC,gBAAM,IAAI,MAAM,oDAAoD;QACtE;AAEA,eACE,KAAI,SACF,SAA6C;MAGnD;MACA,SAAS;AACP,cAAM,MACJ,+BAA+B,KAAK,OAAO,4CAA4C;MAE3F;IACF;EACF;EAEA,OAAI;AACF,YAAQ,KAAK,SAAS;MACpB,KAAK,GAAG;AACN,cAAM,EAAE,MAAAF,QAAM,QAAAG,QAAM,IAAK,KAAK;AAC9B,cAAM,YAAmBC,QAAOJ,QAAMG,OAAM;AAC5C,eACE,KAAI,SAAS,KAAK,MAAM,SAAS;MAErC;MACA,KAAK,GAAG;AACN,eAAO;MACT;MACA,SAAS;AACP,cAAM,MACJ,+BAA+B,KAAK,OAAO,4CAA4C;MAE3F;IACF;EACF;EAEA,OAAQ,OAAc;AACpB,WAAO,KAAI,OAAO,MAAM,KAAK;EAC/B;EAEA,OAAO,OAAsFE,OAA4C,OAAc;AACrJ,UAAM,UAAU;AAChB,WACE,WAAW,QACXA,MAAK,SAAS,QAAQ,QACtBA,MAAK,YAAY,QAAQ,WAClBC,SAAOD,MAAK,WAAW,QAAQ,SAAS;EAEnD;EAEA,SAAUE,QAAmC;AAC3C,WAAOC,QAAO,MAAMD,MAAI;EAC1B;EAEA,SAAM;AACJ,WAAO,EAAE,KAAKC,QAAO,IAAI,EAAC;EAC5B;EAEA,OAAI;AACF,WAAO;EACT;EAES,CAAC,OAAO,WAAW,IAAI;;EAIhC,CAAC,OAAO,IAAI,4BAA4B,CAAC,IAAC;AACxC,WAAO,OAAO,KAAK,SAAQ,CAAE;EAC/B;;;;;;;;;;;EAYA,OAAO,MAAwF,OAA+C;AAC5I,QAAI,SAAS,MAAM;AACjB,aAAO;IACT;AAEA,UAAMC,SAAQ;AACd,QAAIA,kBAAiB,MAAK;AAExB,aAAOA;IACT,WAAYA,OAAM,GAAG,KAAK,QAAQA,OAAM,GAAG,MAAMA,OAAM,SAAUA,OAAM,UAAUA,QAAO;AAMtF,YAAM,EAAE,SAAAV,UAAS,MAAAC,QAAM,WAAW,MAAK,IAAKS;AAC5C,aAAO,IAAI,KACTV,UACAC,QACA,WACA,SAASU,WAAUX,UAASC,QAAM,UAAU,KAAK,CAAC;IAEtD,WAAWS,OAAME,UAAS,MAAM,MAAM;AAIpC,YAAM,EAAE,SAAAZ,UAAS,WAAW,MAAAC,OAAI,IAAKS;AACrC,YAAMN,UAAgBS,SAAO,SAAS;AACtC,aAAO,KAAI,OAAOb,UAASC,QAAMG,OAAM;IACzC,OAAO;AAGL,aAAO;IACT;EACF;;;;;;EAOA,OAAO,OAAsFJ,UAAkBC,QAAcG,SAAgC;AAC3J,QAAI,OAAOH,WAAS,UAAU;AAC5B,YAAM,IAAI,MAAM,uCAAuC;IACzD;AAEA,QAAI,EAAEG,QAAO,iBAAiB,aAAa;AACzC,YAAM,IAAI,MAAM,gBAAgB;IAClC;AAEA,YAAQJ,UAAS;MACf,KAAK,GAAG;AACN,YAAIC,WAASC,cAAa;AACxB,gBAAM,IAAI,MACR,wCAAwCA,YAAW,kBAAkB;QAEzE,OAAO;AACL,iBAAO,IAAI,KAAIF,UAASC,QAAMG,SAAQA,QAAO,KAAK;QACpD;MACF;MACA,KAAK,GAAG;AACN,cAAM,QAAQO,WAAUX,UAASC,QAAMG,QAAO,KAAK;AACnD,eAAO,IAAI,KAAIJ,UAASC,QAAMG,SAAQ,KAAK;MAC7C;MACA,SAAS;AACP,cAAM,IAAI,MAAM,iBAAiB;MACnC;IACF;EACF;;;;EAKA,OAAO,SAAuBA,SAAgD;AAC5E,WAAO,KAAI,OAAO,GAAGF,cAAaE,OAAM;EAC1C;;;;;;;EAQA,OAAO,SAAyDH,QAAYG,SAAgC;AAC1G,WAAO,KAAI,OAAO,GAAGH,QAAMG,OAAM;EACnC;;;;;;;;EASA,OAAO,OAAoF,OAAuD;AAChJ,UAAM,CAAC,KAAK,SAAS,IAAI,KAAI,YAAY,KAAK;AAC9C,QAAI,UAAU,WAAW,GAAG;AAC1B,YAAM,IAAI,MAAM,kBAAkB;IACpC;AACA,WAAO;EACT;;;;;;;;;;EAWA,OAAO,YAA2E,OAAyC;AACzH,UAAM,QAAQ,KAAI,aAAa,KAAK;AACpC,UAAM,aAAa,MAAM,OAAO,MAAM;AACtC,UAAM,iBAAiBU,QACrB,MAAM,SAAS,YAAY,aAAa,MAAM,aAAa,CAAC;AAE9D,QAAI,eAAe,eAAe,MAAM,eAAe;AACrD,YAAM,IAAI,MAAM,kBAAkB;IACpC;AACA,UAAM,cAAc,eAAe,SACjC,MAAM,gBAAgB,MAAM,UAAU;AAExC,UAAMV,UAAS,IAAWW,QACxB,MAAM,eACN,MAAM,YACN,aACA,cAAc;AAEhB,UAAM,MACJ,MAAM,YAAY,IACd,KAAI,SAASX,OAA0C,IACvD,KAAI,SAAS,MAAM,OAAOA,OAAM;AACtC,WAAO,CAAC,KAAwB,MAAM,SAAS,MAAM,IAAI,CAAC;EAC5D;;;;;;;;;;EAWA,OAAO,aAA4E,cAAgD;AACjI,QAAI,SAAS;AACb,UAAM,OAAO,MAAa;AACxB,YAAM,CAAC,GAAGY,QAAM,IAAWH,SAAO,aAAa,SAAS,MAAM,CAAC;AAC/D,gBAAUG;AACV,aAAO;IACT;AAEA,QAAIhB,WAAU,KAAI;AAClB,QAAI,QAAQE;AACZ,QAAIF,aAAsB,IAAI;AAE5B,MAAAA,WAAU;AACV,eAAS;IACX,OAAO;AACL,cAAQ,KAAI;IACd;AAEA,QAAIA,aAAY,KAAKA,aAAY,GAAG;AAClC,YAAM,IAAI,WAAW,uBAAuBA,QAAO,EAAE;IACvD;AAEA,UAAM,aAAa;AACnB,UAAM,gBAAgB,KAAI;AAC1B,UAAM,aAAa,KAAI;AACvB,UAAM,OAAO,SAAS;AACtB,UAAM,gBAAgB,OAAO;AAE7B,WAAO,EAAE,SAAAA,UAAS,OAAO,eAAe,YAAY,eAAe,KAAI;EACzE;;;;;;;EAQA,OAAO,MAA0G,QAAkEQ,QAAmC;AACpN,UAAM,CAAC,QAAQ,KAAK,IAAIS,iBAAgB,QAAQT,MAAI;AAEpD,UAAM,MAAM,KAAI,OAAO,KAAK;AAE5B,QAAI,IAAI,YAAY,KAAK,OAAO,CAAC,MAAM,KAAK;AAC1C,YAAM,MAAM,wDAAwD;IACtE;AAGA,IAAAV,WAAU,GAAG,EAAE,IAAI,QAAQ,MAAM;AAEjC,WAAO;EACT;;AAGF,SAASmB,iBAAqH,QAAkET,QAAmC;AACjO,UAAQ,OAAO,CAAC,GAAG;;IAEjB,KAAK,KAAK;AACR,YAAM,UAAUA,UAAQU;AACxB,aAAO;QACLA,WAAU;QACV,QAAQ,OAAO,GAAGA,WAAU,MAAM,GAAG,MAAM,EAAE;;IAEjD;IACA,KAAKA,WAAU,QAAQ;AACrB,YAAM,UAAUV,UAAQU;AACxB,aAAO,CAACA,WAAU,QAAkB,QAAQ,OAAO,MAAM,CAAC;IAC5D;IACA,KAAKC,QAAO,QAAQ;AAClB,YAAM,UAAUX,UAAQW;AACxB,aAAO,CAACA,QAAO,QAAkB,QAAQ,OAAO,MAAM,CAAC;IACzD;IACA,KAAKC,QAAO,QAAQ;AAClB,YAAM,UAAUZ,UAAQY;AACxB,aAAO,CAACA,QAAO,QAAkB,QAAQ,OAAO,MAAM,CAAC;IACzD;IACA,SAAS;AACP,UAAIZ,UAAQ,MAAM;AAChB,cAAM,MACJ,yFAAyF;MAE7F;AACA,aAAO,CAAC,OAAO,CAAC,GAAaA,OAAK,OAAO,MAAM,CAAC;IAClD;EACF;AACF;AAEA,SAASa,YAAY,OAAmBxB,SAA4BW,QAA+B;AACjG,QAAM,EAAE,OAAM,IAAKA;AACnB,MAAI,WAAWU,WAAU,QAAQ;AAC/B,UAAM,MAAM,8BAA8BV,OAAK,IAAI,WAAW;EAChE;AAEA,QAAM,MAAMX,QAAM,IAAI,MAAM;AAC5B,MAAI,OAAO,MAAM;AACf,UAAMyB,OAAMd,OAAK,OAAO,KAAK,EAAE,MAAM,CAAC;AACtC,IAAAX,QAAM,IAAI,QAAQyB,IAAG;AACrB,WAAOA;EACT,OAAO;AACL,WAAO;EACT;AACF;AAEA,SAASC,YAAoC,OAAmB1B,SAA4BW,QAAkC;AAC5H,QAAM,EAAE,OAAM,IAAKA;AACnB,QAAM,MAAMX,QAAM,IAAI,MAAM;AAC5B,MAAI,OAAO,MAAM;AACf,UAAMyB,OAAMd,OAAK,OAAO,KAAK;AAC7B,IAAAX,QAAM,IAAI,QAAQyB,IAAG;AACrB,WAAOA;EACT,OAAO;AACL,WAAO;EACT;AACF;AAEA,IAAMpB,eAAc;AACpB,IAAMC,gBAAe;AAErB,SAASQ,WAAWX,UAAsBC,QAAc,WAAqB;AAC3E,QAAM,aAAoBuB,gBAAexB,QAAO;AAChD,QAAM,aAAa,aAAoBwB,gBAAevB,MAAI;AAC1D,QAAM,QAAQ,IAAI,WAAW,aAAa,UAAU,UAAU;AAC9D,EAAOwB,UAASzB,UAAS,OAAO,CAAC;AACjC,EAAOyB,UAASxB,QAAM,OAAO,UAAU;AACvC,QAAM,IAAI,WAAW,UAAU;AAC/B,SAAO;AACT;AAEA,IAAMW,aAAY,OAAO,IAAI,kBAAkB;;;AC7b/C,IAAM,MAAM,OAAO,YAAY;AAC/B,IAAM,cAAc,WAAqB,QAAQ;AAEjD,IAAMc,kBAAiB;AACvB,IAAM,iBAAiB;AAMjB,SAAU,+BAAgC,QAAiC;AAC/E,MAAI;AAEJ,MAAI,OAAO,UAAU,MAAM;AACzB,QAAI;AACF,eAAS,sBAAsB,OAAO,MAAM;IAC9C,SAAS,KAAK;AACZ,UAAI,MAAM,GAAG;AACb,YAAM;IACR;EACF;AAEA,MAAI,UAAU,MAAM;AAClB,WAAO;EACT;AACF;AAcM,SAAU,uBAAwB,MAAgB;AACtD,QAAM,YAAY,WAAqB,iBAAiB;AAExD,SAAO,OAAiB,CAAC,WAAW,IAAI,CAAC;AAC3C;AAEM,SAAU,kBAAmB,KAA8B;AAC/D,MAAI,iBAAiB,KAAK;AACxB,WAAO,UAAU,OAAO;MACtB,OAAO,WAAqB,IAAI,KAAK;MACrC,aAAa,IAAI;MACjB,cAAc,IAAI;MAClB,UAAU,WAAqB,IAAI,QAAQ;MAC3C,UAAU,IAAI;MACd,KAAK,IAAI;MACT,QAAQ,IAAI;MACZ,aAAa,IAAI;MACjB,MAAM,IAAI;KACX;EACH,OAAO;AACL,WAAO,UAAU,OAAO;MACtB,QAAQ,IAAI;MACZ,aAAa,IAAI;MACjB,MAAM,IAAI;KACX;EACH;AACF;AAEM,SAAU,oBAAqB,KAAe;AAClD,QAAMC,WAAU,UAAU,OAAO,GAAG;AAGpC,MAAIA,SAAQ,YAAY,MAAM;AAC5B,IAAAA,SAAQ,WAAW,OAAOA,SAAQ,QAAQ;EAC5C;AAGA,MAAIA,SAAQ,OAAO,MAAM;AACvB,IAAAA,SAAQ,MAAM,OAAOA,SAAQ,GAAG;EAClC;AAKA,MAAIA,SAAQ,eAAe,QAAQA,SAAQ,QAAQ,MAAM;AACvD,UAAM,IAAI,2BAA2B,6BAA6B;EACpE;AAEA,QAAM,OAAO,cAAcA,SAAQ,IAAI;AACvC,QAAMC,SAAQ,mBAAmB,KAAK,KAAK;AAC3C,QAAM,WAAW,SAAmB,KAAK,QAAQ;AAEjD,MAAID,SAAQ,SAAS,QAAQA,SAAQ,eAAe,MAAM;AAExD,kCAA8BA,QAAO;AAErC,WAAO;MACL,OAAAC;MACA,cAAc,UAAU,aAAa;MACrC;MACA,UAAU,KAAK;MACf,KAAK,KAAK;MACV,QAAQD,SAAQ;MAChB,aAAaA,SAAQ;MACrB,aAAaA,SAAQ;MACrB,MAAMA,SAAQ;;EAElB,WAAWA,SAAQ,eAAe,MAAM;AAEtC,WAAO;MACL,OAAAC;MACA,cAAc,UAAU,aAAa;MACrC;MACA,UAAU,KAAK;MACf,KAAK,KAAK;MACV,QAAQD,SAAQ;MAChB,aAAaA,SAAQ;MACrB,MAAMA,SAAQ;;EAElB,OAAO;AACL,UAAM,IAAI,MAAM,6DAA6D;EAC/E;AACF;AAEM,SAAU,0BAA2BE,SAAoC;AAC7E,SAAO,OAAiB;IACtB;IACAA,QAAO;GACR;AACH;AAEM,SAAU,4BAA6B,KAAe;AAC1D,QAAMA,UAAgBC,SAAO,IAAI,MAAM,YAAY,MAAM,CAAC;AAE1D,MAAI,CAAC,QAAQD,SAAQE,eAAc,KAAK,CAAC,QAAQF,SAAQ,cAAc,GAAG;AACxE,UAAM,IAAI,sBAAsB,oDAAoD;EACtF;AAEA,SAAOA;AACT;AAsBM,SAAU,cAAe,KAAe;AAC5C,QAAM,OAAaG,QAAO,GAAG;AAE7B,MAAI,KAAK,iBAAiB,GAAG;AAC3B,SAAK,eAAe,UAAU,aAAa;EAC7C,OAAO;AACL,UAAM,IAAI,yBAAyB,kCAAkC;EACvE;AAEA,MAAI,OAAO,UAAU,KAAK,QAAQ,GAAG;AAEnC,SAAK,WAAW,OAAO,KAAK,QAAQ;EACtC;AAEA,MAAI,OAAO,UAAU,KAAK,GAAG,GAAG;AAE9B,SAAK,MAAM,OAAO,KAAK,GAAG;EAC5B;AAEA,SAAO;AACT;AAEM,SAAU,mBAAoBC,QAAiB;AACnD,QAAMC,UAAS,SAAmBD,MAAK,EAAE,KAAI;AAG7C,MAAIC,QAAO,WAAW,GAAG,GAAG;AAC1B,WAAOA;EACT;AAGA,MAAI;AACF,WAAO,SAASC,KAAI,OAAOF,MAAK,EAAE,KAAI,EAAG,SAAQ,CAAE;EACrD,QAAQ;EAER;AAEA,MAAI;AACF,WAAO,SAASE,KAAI,MAAMD,OAAM,EAAE,KAAI,EAAG,SAAQ,CAAE;EACrD,QAAQ;EAER;AAEA,QAAM,IAAI,kBAAkB,oDAAoD;AAClF;AAoCA,SAAS,8BAA+B,OAAgB;AACtD,MAAI,MAAM,QAAQ,MAAM;AACtB,UAAM,IAAI,uBAAuB,wBAAwB;EAC3D;AAEA,QAAM,OAAO,cAAc,MAAM,IAAI;AAErC,MAAI,CAAC,OAAiB,KAAK,OAAO,MAAM,SAAS,IAAI,WAAW,CAAC,CAAC,GAAG;AACnE,UAAM,IAAI,2BAA2B,uDAAuD;EAC9F;AAEA,MAAI,CAAC,OAAiB,KAAK,UAAU,MAAM,YAAY,IAAI,WAAW,CAAC,CAAC,GAAG;AACzE,UAAM,IAAI,2BAA2B,0DAA0D;EACjG;AAEA,MAAI,KAAK,iBAAiB,MAAM,cAAc;AAC5C,UAAM,IAAI,2BAA2B,8DAA8D;EACrG;AAEA,MAAI,KAAK,aAAa,MAAM,UAAU;AACpC,UAAM,IAAI,2BAA2B,0DAA0D;EACjG;AAEA,MAAI,KAAK,QAAQ,MAAM,KAAK;AAC1B,UAAM,IAAI,2BAA2B,qDAAqD;EAC5F;AACF;AAyBM,SAAU,QAA4BE,SAAyB,OAAQ;AAC3E,SAAOA,QAAO,SAAS;AACzB;;;AbzSA,IAAMC,OAAM,OAAO,MAAM;AACzB,IAAM,iBAAiB,IAAI,KAAK;AAEzB,IAAM,YAAY;AAClB,IAAM,kBAAkB,UAAU;;;AcdzC,IAAAC,yBAAqB;AAOrB,IAAMC,OAAM,OAAO,gBAAgB;AAKnC,IAAM,kBAAkB,OAAO;AAMxB,IAAM,WAAW,OAAOC,YAAsB,qBAA+C;AAIlG,QAAM,SAAS,oBAAoB,gBAAgB;AAGnD,MAAI;AAEJ,MAAI;AACF,UAAM,mBAAmB,uBAAuB,OAAO,IAAI;AAC3D,cAAU,MAAMA,WAAU,OAAO,kBAAkB,OAAO,WAAW;EACvE,SAAS,KAAK;AACZ,cAAU;EACZ;AAEA,MAAI,CAAC,SAAS;AACZ,IAAAD,KAAI,MAAM,sCAAsC;AAChD,UAAM,IAAI,2BAA2B,sCAAsC;EAC7E;AAGA,MAAI,OAAO,iBAAiB,UAAU,aAAa,KAAK;AACtD,QAAI,uBAAAE,QAAS,WAAW,OAAO,QAAQ,EAAE,OAAM,EAAG,QAAO,IAAK,KAAK,IAAG,GAAI;AACxE,MAAAF,KAAI,MAAM,oBAAoB;AAC9B,YAAM,IAAI,mBAAmB,oBAAoB;IACnD;EACF,WAAW,OAAO,gBAAgB,MAAM;AACtC,IAAAA,KAAI,MAAM,kCAAkC;AAC5C,UAAM,IAAI,yBAAyB,kCAAkC;EACvE;AAEA,EAAAA,KAAI,+BAA+B,OAAO,KAAK;AACjD;AAUA,eAAsB,cAAe,YAAwB,kBAA4B;AACvF,MAAI,iBAAiB,aAAa,iBAAiB;AACjD,UAAM,IAAI,oBAAoB,yBAAyB;EACzD;AAGA,QAAM,mBAAmB,4BAA4B,UAAU;AAC/D,MAAI;AAGJ,MAAI,QAAQ,kBAAkB,CAAG,GAAG;AAClC,oBAAgB,uBAAuB,gBAAgB;EACzD;AAGA,QAAM,iBAAiB,oBAAoB,gBAAgB;AAC3D,QAAM,eAAe,+BAA+B,cAAc,KAAK;AAEvE,MAAI,gBAAgB,MAAM;AACxB,UAAM,IAAI,8BAA8B,8DAA8D;EACxG;AAEA,QAAM,qBAAqB,0BAA0B,aAAa,YAAW,CAAE;AAE/E,MAAI,CAAC,OAAiB,oBAAoB,UAAU,GAAG;AACrD,UAAM,IAAI,8BAA8B,+CAA+C;EACzF;AAGA,QAAM,SAAS,cAAc,gBAAgB;AAC/C;;;AC1FM,IAAOG,6BAAP,cAAyC,MAAK;EAClD,OAAO;EACP,OAAO;;;;ACMT,gBAAO,MAAoC,QAA8G,OAAqB,CAAA,GAAE;AAC9K,QAAM,UAAU;AAChB,QAAM,UAAU,IAAI,YAAY,MAAM;AACtC,MAAI,SAAS;AAEb,iBAAe,SAAS,QAAQ;AAC9B,QAAI,OAAO,UAAU,UAAU;AAC7B,cAAQ,IAAI,YAAW,EAAG,OAAO,KAAK;IACxC;AAEA,QAAI,iBAAiB,KAAK,GAAG;AAC3B,cAAQ,MAAM,SAAQ;IACxB;AAEA,cAAU,QAAQ,OAAO,OAAO,EAAE,QAAQ,KAAI,CAAE;AAEhD,QAAI,OAAO,UAAU,MAAM,oBAAoB,OAAO,SAAS;AAC7D,YAAM,IAAIC,2BAA0B,2BAA2B;IACjE;AAEA,UAAM,QAAQ,OAAO,MAAM,OAAO;AAClC,aAAS,MAAM,IAAG,KAAM;AAExB,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,YAAM,KAAK,MAAM,MAAM,CAAC,CAAC;IAC3B;EACF;AAEA,YAAU,QAAQ,OAAM;AAExB,MAAI,WAAW,IAAI;AACjB,UAAM,KAAK,MAAM,MAAM;EACzB;AACF;;;AC5CM,IAAO,sBAAP,cAAmC,MAAK;EAC5C,OAAO,OAAO;EAEd,YAAaC,WAAU,mBAAiB;AACtC,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,mBAAP,cAAgC,MAAK;EACzC,OAAO,OAAO;EAEd,YAAaA,WAAU,gBAAc;AACnC,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;;;ACfK,IAAMC,SAAQ,IAAI,WAAW,CAAC;AAW/B,SAAUC,SAAQ,IAAgB,IAAc;AACpD,MAAI,OAAO,IAAI;AAAE,WAAO;EAAK;AAC7B,MAAI,GAAG,eAAe,GAAG,YAAY;AACnC,WAAO;EACT;AAEA,WAAS,KAAK,GAAG,KAAK,GAAG,YAAY,MAAM;AACzC,QAAI,GAAG,EAAE,MAAM,GAAG,EAAE,GAAG;AACrB,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEM,SAAUC,QAAQ,GAA6C;AACnE,MAAI,aAAa,cAAc,EAAE,YAAY,SAAS,cAAc;AAAE,WAAO;EAAE;AAC/E,MAAI,aAAa,aAAa;AAAE,WAAO,IAAI,WAAW,CAAC;EAAE;AACzD,MAAI,YAAY,OAAO,CAAC,GAAG;AACzB,WAAO,IAAI,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU;EAC5D;AACA,QAAM,IAAI,MAAM,mCAAmC;AACrD;;;ACvBA,SAASC,MAAM,UAAUC,OAAI;AAC3B,MAAI,SAAS,UAAU,KAAK;AAAE,UAAM,IAAI,UAAU,mBAAmB;EAAE;AACvE,MAAI,WAAW,IAAI,WAAW,GAAG;AACjC,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,aAAS,CAAC,IAAI;EAChB;AACA,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,QAAI,IAAI,SAAS,OAAO,CAAC;AACzB,QAAI,KAAK,EAAE,WAAW,CAAC;AACvB,QAAI,SAAS,EAAE,MAAM,KAAK;AAAE,YAAM,IAAI,UAAU,IAAI,eAAe;IAAE;AACrE,aAAS,EAAE,IAAI;EACjB;AACA,MAAI,OAAO,SAAS;AACpB,MAAI,SAAS,SAAS,OAAO,CAAC;AAC9B,MAAI,SAAS,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,GAAG;AAC1C,MAAI,UAAU,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI;AAI3C,WAASC,SAAQ,QAAM;AAErB,QAAI,kBAAkB;AAAY;aAAW,YAAY,OAAO,MAAM,GAAG;AACvE,eAAS,IAAI,WAAW,OAAO,QAAQ,OAAO,YAAY,OAAO,UAAU;IAC7E,WAAW,MAAM,QAAQ,MAAM,GAAG;AAChC,eAAS,WAAW,KAAK,MAAM;IACjC;AACA,QAAI,EAAE,kBAAkB,aAAa;AAAE,YAAM,IAAI,UAAU,qBAAqB;IAAE;AAClF,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO;IAAG;AAErC,QAAI,SAAS;AACb,QAAIC,WAAS;AACb,QAAI,SAAS;AACb,QAAI,OAAO,OAAO;AAClB,WAAO,WAAW,QAAQ,OAAO,MAAM,MAAM,GAAG;AAC9C;AACA;IACF;AAEA,QAAI,QAAS,OAAO,UAAU,UAAU,MAAO;AAC/C,QAAI,MAAM,IAAI,WAAW,IAAI;AAE7B,WAAO,WAAW,MAAM;AACtB,UAAI,QAAQ,OAAO,MAAM;AAEzB,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,MAAM,IAAI,GAAG,MAAO;AAC9B,YAAI,GAAG,IAAK,QAAQ,SAAU;AAC9B,gBAAS,QAAQ,SAAU;MAC7B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,IAAI,GAAG,MAAM,GAAG;AACrC;IACF;AAEA,QAAI,MAAM,OAAO,OAAO,MAAM;AAC9B,WAAO,MAAM,MAAM,EAAE,KAAK;AAAE,aAAO,SAAS,OAAO,IAAI,GAAG,CAAC;IAAG;AAC9D,WAAO;EACT;AAIA,WAAS,aAAc,QAAM;AAC3B,QAAI,OAAO,WAAW,UAAU;AAAE,YAAM,IAAI,UAAU,iBAAiB;IAAE;AACzE,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO,IAAI,WAAU;IAAG;AACnD,QAAI,MAAM;AAEV,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,SAAS;AACb,QAAIA,WAAS;AACb,WAAO,OAAO,GAAG,MAAM,QAAQ;AAC7B;AACA;IACF;AAEA,QAAI,QAAU,OAAO,SAAS,OAAO,SAAU,MAAO;AACtD,QAAI,OAAO,IAAI,WAAW,IAAI;AAE9B,WAAO,OAAO,GAAG,GAAG;AAElB,UAAI,QAAQ,SAAS,OAAO,WAAW,GAAG,CAAC;AAE3C,UAAI,UAAU,KAAK;AAAE;MAAO;AAC5B,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,OAAO,KAAK,GAAG,MAAO;AAChC,aAAK,GAAG,IAAK,QAAQ,QAAS;AAC9B,gBAAS,QAAQ,QAAS;MAC5B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,KAAK,GAAG,MAAM,GAAG;AACtC;IACF;AACA,QAAI,MAAM,IAAI,WAAW,UAAU,OAAO,IAAI;AAC9C,QAAIE,KAAI;AACR,WAAO,QAAQ,MAAM;AACnB,UAAIA,IAAG,IAAI,KAAK,KAAK;IACvB;AACA,WAAO;EACT;AAIA,WAASC,SAAQC,SAAM;AACrB,QAAI,SAAS,aAAaA,OAAM;AAChC,QAAI,QAAQ;AAAE,aAAO;IAAO;AAC5B,UAAM,IAAI,MAAM,OAAON,KAAI,YAAY;EACzC;AACA,SAAO;IACL,QAAQC;IACR;IACA,QAAQI;;AAEZ;AACA,IAAIE,OAAMR;AAEV,IAAIS,mCAAkCD;AAEtC,IAAAE,kBAAeD;;;ACjIf,IAAME,WAAN,MAAa;EACF;EACA;EACA;EAET,YAAaC,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;EACpB;EAEA,OAAQ,OAAiB;AACvB,QAAI,iBAAiB,YAAY;AAC/B,aAAO,GAAG,KAAK,MAAM,GAAG,KAAK,WAAW,KAAK,CAAC;IAChD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;;AAQF,IAAMC,WAAN,MAAa;EACF;EACA;EACA;EACQ;EAEjB,YAAaD,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,UAAM,kBAAkB,OAAO,YAAY,CAAC;AAE5C,QAAI,oBAAoB,QAAW;AACjC,YAAM,IAAI,MAAM,0BAA0B;IAC5C;AACA,SAAK,kBAAkB;AACvB,SAAK,aAAa;EACpB;EAEA,OAAQ,MAAY;AAClB,QAAI,OAAO,SAAS,UAAU;AAC5B,UAAI,KAAK,YAAY,CAAC,MAAM,KAAK,iBAAiB;AAChD,cAAM,MAAM,qCAAqC,KAAK,UAAU,IAAI,CAAC,KAAK,KAAK,IAAI,+CAA+C,KAAK,MAAM,EAAE;MACjJ;AACA,aAAO,KAAK,WAAW,KAAK,MAAM,KAAK,OAAO,MAAM,CAAC;IACvD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;EAEA,GAAgC,SAAmE;AACjG,WAAOE,IAAG,MAAM,OAAO;EACzB;;AAKF,IAAMC,mBAAN,MAAqB;EACV;EAET,YAAa,UAA0B;AACrC,SAAK,WAAW;EAClB;EAEA,GAAiC,SAAmE;AAClG,WAAOD,IAAG,MAAM,OAAO;EACzB;EAEA,OAAQ,OAAa;AACnB,UAAM,SAAS,MAAM,CAAC;AACtB,UAAM,UAAU,KAAK,SAAS,MAAM;AACpC,QAAI,WAAW,MAAM;AACnB,aAAO,QAAQ,OAAO,KAAK;IAC7B,OAAO;AACL,YAAM,WAAW,qCAAqC,KAAK,UAAU,KAAK,CAAC,+BAA+B,OAAO,KAAK,KAAK,QAAQ,CAAC,gBAAgB;IACtJ;EACF;;AAGI,SAAUA,IAAyC,MAA+C,OAA8C;AACpJ,SAAO,IAAIC,iBAAgB;IACzB,GAAI,KAAK,YAAY,EAAE,CAAE,KAA2B,MAAM,GAAG,KAAI;IACjE,GAAI,MAAM,YAAY,EAAE,CAAE,MAA4B,MAAM,GAAG,MAAK;GAClD;AACtB;AAEM,IAAOC,SAAP,MAAY;EACP;EACA;EACA;EACA;EACA;EACA;EAET,YAAaJ,OAAY,QAAgB,YAAsB,YAAoB;AACjF,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,UAAU,IAAID,SAAQC,OAAM,QAAQ,UAAU;AACnD,SAAK,UAAU,IAAIC,SAAQD,OAAM,QAAQ,UAAU;EACrD;EAEA,OAAQ,OAAiB;AACvB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;EAEA,OAAQ,OAAa;AACnB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;;AAGI,SAAUK,OAAmD,EAAE,MAAAL,OAAM,QAAQ,QAAAM,UAAQ,QAAAC,SAAM,GAAsE;AACrK,SAAO,IAAIH,OAAMJ,OAAM,QAAQM,UAAQC,QAAM;AAC/C;AAEM,SAAUC,OAAoD,EAAE,MAAAR,OAAM,QAAQ,UAAAS,UAAQ,GAAoD;AAC9I,QAAM,EAAE,QAAAH,UAAQ,QAAAC,SAAM,IAAKG,gBAAMD,WAAUT,KAAI;AAC/C,SAAOK,OAAK;IACV;IACA,MAAAL;IACA,QAAAM;IACA,QAAQ,CAAC,SAA6BK,QAAOJ,SAAO,IAAI,CAAC;GAC1D;AACH;AAEA,SAASA,SAAQK,SAAgB,aAAqC,aAAqBZ,OAAY;AAErG,MAAI,MAAMY,QAAO;AACjB,SAAOA,QAAO,MAAM,CAAC,MAAM,KAAK;AAC9B,MAAE;EACJ;AAGA,QAAM,MAAM,IAAI,WAAY,MAAM,cAAc,IAAK,CAAC;AAGtD,MAAI,OAAO;AACX,MAAI,SAAS;AACb,MAAI,UAAU;AACd,WAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAE5B,UAAMC,SAAQ,YAAYD,QAAO,CAAC,CAAC;AACnC,QAAIC,WAAU,QAAW;AACvB,YAAM,IAAI,YAAY,OAAOb,KAAI,YAAY;IAC/C;AAGA,aAAU,UAAU,cAAea;AACnC,YAAQ;AAGR,QAAI,QAAQ,GAAG;AACb,cAAQ;AACR,UAAI,SAAS,IAAI,MAAQ,UAAU;IACrC;EACF;AAGA,MAAI,QAAQ,gBAAgB,MAAQ,UAAW,IAAI,UAAY,GAAG;AAChE,UAAM,IAAI,YAAY,wBAAwB;EAChD;AAEA,SAAO;AACT;AAEA,SAASP,SAAQ,MAAkBG,WAAkB,aAAmB;AACtE,QAAM,MAAMA,UAASA,UAAS,SAAS,CAAC,MAAM;AAC9C,QAAM,QAAQ,KAAK,eAAe;AAClC,MAAI,MAAM;AAEV,MAAI,OAAO;AACX,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAEpC,aAAU,UAAU,IAAK,KAAK,CAAC;AAC/B,YAAQ;AAGR,WAAO,OAAO,aAAa;AACzB,cAAQ;AACR,aAAOA,UAAS,OAAQ,UAAU,IAAK;IACzC;EACF;AAGA,MAAI,SAAS,GAAG;AACd,WAAOA,UAAS,OAAQ,UAAW,cAAc,IAAM;EACzD;AAGA,MAAI,KAAK;AACP,YAAS,IAAI,SAAS,cAAe,OAAO,GAAG;AAC7C,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEA,SAASK,mBAAmBL,WAAgB;AAE1C,QAAM,cAAsC,CAAA;AAC5C,WAAS,IAAI,GAAG,IAAIA,UAAS,QAAQ,EAAE,GAAG;AACxC,gBAAYA,UAAS,CAAC,CAAC,IAAI;EAC7B;AACA,SAAO;AACT;AAKM,SAAUM,SAAsD,EAAE,MAAAf,OAAM,QAAQ,aAAa,UAAAS,UAAQ,GAAyE;AAClL,QAAM,cAAcK,mBAAkBL,SAAQ;AAC9C,SAAOJ,OAAK;IACV;IACA,MAAAL;IACA,OAAQ,OAAiB;AACvB,aAAOM,SAAO,OAAOG,WAAU,WAAW;IAC5C;IACA,OAAQ,OAAa;AACnB,aAAOF,SAAO,OAAO,aAAa,aAAaP,KAAI;IACrD;GACD;AACH;;;AC9OO,IAAMgB,UAASC,SAAQ;EAC5B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMC,eAAcD,SAAQ;EACjC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAME,aAAYF,SAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMG,kBAAiBH,SAAQ;EACpC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMI,aAAYJ,SAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMK,kBAAiBL,SAAQ;EACpC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMM,gBAAeN,SAAQ;EAClC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMO,qBAAoBP,SAAQ;EACvC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMQ,WAAUR,SAAQ;EAC7B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;;;AC7DM,IAAMS,UAASC,OAAM;EAC1B,QAAQ;EACR,MAAM;EACN,UAAU;CACX;AAEM,IAAMC,eAAcD,OAAM;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;CACX;;;ACVM,IAAME,aAAYC,OAAM;EAC7B,MAAM;EACN,QAAQ;EACR,UAAU;CACX;AAEM,IAAMC,gBAAeD,OAAM;EAChC,MAAM;EACN,QAAQ;EACR,UAAU;CACX;;;ACXD,IAAIE,YAAWC;AAEf,IAAIC,OAAM;AAAV,IACIC,QAAO;AADX,IAEIC,UAAS,CAACD;AAFd,IAGIE,OAAM,KAAK,IAAI,GAAG,EAAE;AAOxB,SAASJ,SAAO,KAAK,KAAK,QAAM;AAC9B,QAAM,OAAO,CAAA;AACb,WAAS,UAAU;AACnB,MAAI,YAAY;AAEhB,SAAM,OAAOI,MAAK;AAChB,QAAI,QAAQ,IAAK,MAAM,MAAQH;AAC/B,WAAO;EACT;AACA,SAAM,MAAME,SAAQ;AAClB,QAAI,QAAQ,IAAK,MAAM,MAAQF;AAC/B,aAAS;EACX;AACA,MAAI,MAAM,IAAI,MAAM;AAGpB,EAAAD,SAAO,QAAQ,SAAS,YAAY;AAEpC,SAAO;AACT;AAEA,IAAIK,WAASC;AAEb,IAAIC,SAAQ;AAAZ,IACIC,UAAS;AAMb,SAASF,MAAK,KAAK,QAAM;AACvB,MAAI,MAAS,GACT,SAAS,UAAU,GACnB,QAAS,GACT,UAAU,QACV,GACA,IAAI,IAAI;AAEZ,KAAG;AACD,QAAI,WAAW,GAAG;AAEhB,MAAAA,MAAK,QAAQ;AACb,YAAM,IAAI,WAAW,yBAAyB;IAChD;AACA,QAAI,IAAI,SAAS;AACjB,WAAO,QAAQ,MACV,IAAIE,YAAW,SACf,IAAIA,WAAU,KAAK,IAAI,GAAG,KAAK;AACpC,aAAS;EACX,SAAS,KAAKD;AAGd,EAAAD,MAAK,QAAQ,UAAU;AAEvB,SAAO;AACT;AAEA,IAAIG,MAAK,KAAK,IAAI,GAAI,CAAC;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AAEvB,IAAIC,UAAS,SAAgCC,QAAK;AAChD,SACEA,SAAQV,MAAK,IACbU,SAAQT,MAAK,IACbS,SAAQR,MAAK,IACbQ,SAAQP,MAAK,IACbO,SAAQN,MAAK,IACbM,SAAQL,MAAK,IACbK,SAAQJ,MAAK,IACbI,SAAQH,MAAK,IACbG,SAAQF,MAAK,IACA;AAEjB;AAEA,IAAIG,UAAS;EACT,QAAQrB;EACR,QAAQM;EACR,gBAAgBa;;AAGpB,IAAIG,gBAAeD;AAEnB,IAAAE,kBAAeD;;;ACrGT,SAAUE,SAAQ,MAAkB,SAAS,GAAC;AAClD,QAAMC,SAAOC,gBAAO,OAAO,MAAM,MAAM;AACvC,SAAO,CAACD,QAAMC,gBAAO,OAAO,KAAK;AACnC;AAEM,SAAUC,UAAU,KAAa,QAAoB,SAAS,GAAC;AACnE,EAAAD,gBAAO,OAAO,KAAK,QAAQ,MAAM;AACjC,SAAO;AACT;AAEM,SAAUE,gBAAgB,KAAW;AACzC,SAAOF,gBAAO,eAAe,GAAG;AAClC;;;ACPM,SAAUG,QAA8BC,QAAYC,SAAkB;AAC1E,QAAM,OAAOA,QAAO;AACpB,QAAM,aAAoBC,gBAAeF,MAAI;AAC7C,QAAM,eAAe,aAAoBE,gBAAe,IAAI;AAE5D,QAAM,QAAQ,IAAI,WAAW,eAAe,IAAI;AAChD,EAAOC,UAASH,QAAM,OAAO,CAAC;AAC9B,EAAOG,UAAS,MAAM,OAAO,UAAU;AACvC,QAAM,IAAIF,SAAQ,YAAY;AAE9B,SAAO,IAAIG,QAAOJ,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAKM,SAAUI,SAAQ,WAAqB;AAC3C,QAAM,QAAQC,QAAO,SAAS;AAC9B,QAAM,CAACN,QAAM,UAAU,IAAWK,SAAO,KAAK;AAC9C,QAAM,CAAC,MAAM,YAAY,IAAWA,SAAO,MAAM,SAAS,UAAU,CAAC;AACrE,QAAMJ,UAAS,MAAM,SAAS,aAAa,YAAY;AAEvD,MAAIA,QAAO,eAAe,MAAM;AAC9B,UAAM,IAAI,MAAM,kBAAkB;EACpC;AAEA,SAAO,IAAIG,QAAOJ,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAEM,SAAUM,SAAQ,GAAoB,GAAU;AACpD,MAAI,MAAM,GAAG;AACX,WAAO;EACT,OAAO;AACL,UAAM,OAAO;AAEb,WACE,EAAE,SAAS,KAAK,QAChB,EAAE,SAAS,KAAK,QAChB,KAAK,iBAAiB,cACtBA,SAAW,EAAE,OAAO,KAAK,KAAK;EAElC;AACF;AAMM,IAAOH,UAAP,MAAa;EACR;EACA;EACA;EACA;;;;EAKT,YAAaJ,QAAY,MAAYC,SAAoB,OAAiB;AACxE,SAAK,OAAOD;AACZ,SAAK,OAAO;AACZ,SAAK,SAASC;AACd,SAAK,QAAQ;EACf;;;;AC1DI,SAAUO,QAA0F,MAASC,QAAmC;AACpJ,QAAM,EAAE,OAAO,SAAAC,SAAO,IAAK;AAC3B,UAAQA,UAAS;IACf,KAAK;AACH,aAAOC,YACL,OACAC,WAAU,IAAI,GACdH,UAAqCI,WAAU,OAAO;IAE1D;AACE,aAAOC,YACL,OACAF,WAAU,IAAI,GACbH,UAAQM,QAAO,OAAwC;EAE9D;AACF;AAYA,IAAMC,SAAQ,oBAAI,QAAO;AAEzB,SAASC,WAAW,KAAoB;AACtC,QAAMA,cAAYD,OAAM,IAAI,GAAG;AAC/B,MAAIC,eAAa,MAAM;AACrB,UAAMA,cAAY,oBAAI,IAAG;AACzB,IAAAD,OAAM,IAAI,KAAKC,WAAS;AACxB,WAAOA;EACT;AACA,SAAOA;AACT;AAEM,IAAOC,OAAP,MAAO,KAAG;EACL;EACA;EACA;EACA;EACA;;;;;;EAOT,YAAaC,UAAkBC,QAAc,WAAqC,OAAiB;AACjG,SAAK,OAAOA;AACZ,SAAK,UAAUD;AACf,SAAK,YAAY;AACjB,SAAK,QAAQ;AAIb,SAAK,GAAG,IAAI;EACd;;;;;;;EAQA,IAAI,QAAK;AACP,WAAO;EACT;;EAGA,IAAI,aAAU;AACZ,WAAO,KAAK,MAAM;EACpB;;EAGA,IAAI,aAAU;AACZ,WAAO,KAAK,MAAM;EACpB;EAEA,OAAI;AACF,YAAQ,KAAK,SAAS;MACpB,KAAK,GAAG;AACN,eAAO;MACT;MACA,KAAK,GAAG;AACN,cAAM,EAAE,MAAAC,QAAM,UAAS,IAAK;AAE5B,YAAIA,WAASC,cAAa;AACxB,gBAAM,IAAI,MAAM,0CAA0C;QAC5D;AAGA,YAAI,UAAU,SAASC,eAAc;AACnC,gBAAM,IAAI,MAAM,oDAAoD;QACtE;AAEA,eACE,KAAI,SACF,SAA6C;MAGnD;MACA,SAAS;AACP,cAAM,MACJ,+BAA+B,KAAK,OAAO,4CAA4C;MAE3F;IACF;EACF;EAEA,OAAI;AACF,YAAQ,KAAK,SAAS;MACpB,KAAK,GAAG;AACN,cAAM,EAAE,MAAAF,QAAM,QAAAG,QAAM,IAAK,KAAK;AAC9B,cAAM,YAAmBC,QAAOJ,QAAMG,OAAM;AAC5C,eACE,KAAI,SAAS,KAAK,MAAM,SAAS;MAErC;MACA,KAAK,GAAG;AACN,eAAO;MACT;MACA,SAAS;AACP,cAAM,MACJ,+BAA+B,KAAK,OAAO,4CAA4C;MAE3F;IACF;EACF;EAEA,OAAQ,OAAc;AACpB,WAAO,KAAI,OAAO,MAAM,KAAK;EAC/B;EAEA,OAAO,OAAsFE,OAA4C,OAAc;AACrJ,UAAM,UAAU;AAChB,WACE,WAAW,QACXA,MAAK,SAAS,QAAQ,QACtBA,MAAK,YAAY,QAAQ,WAClBC,SAAOD,MAAK,WAAW,QAAQ,SAAS;EAEnD;EAEA,SAAUE,QAAmC;AAC3C,WAAOC,QAAO,MAAMD,MAAI;EAC1B;EAEA,SAAM;AACJ,WAAO,EAAE,KAAKC,QAAO,IAAI,EAAC;EAC5B;EAEA,OAAI;AACF,WAAO;EACT;EAES,CAAC,OAAO,WAAW,IAAI;;EAIhC,CAAC,OAAO,IAAI,4BAA4B,CAAC,IAAC;AACxC,WAAO,OAAO,KAAK,SAAQ,CAAE;EAC/B;;;;;;;;;;;EAYA,OAAO,MAAwF,OAA+C;AAC5I,QAAI,SAAS,MAAM;AACjB,aAAO;IACT;AAEA,UAAMC,SAAQ;AACd,QAAIA,kBAAiB,MAAK;AAExB,aAAOA;IACT,WAAYA,OAAM,GAAG,KAAK,QAAQA,OAAM,GAAG,MAAMA,OAAM,SAAUA,OAAM,UAAUA,QAAO;AAMtF,YAAM,EAAE,SAAAV,UAAS,MAAAC,QAAM,WAAW,MAAK,IAAKS;AAC5C,aAAO,IAAI,KACTV,UACAC,QACA,WACA,SAASU,WAAUX,UAASC,QAAM,UAAU,KAAK,CAAC;IAEtD,WAAWS,OAAME,UAAS,MAAM,MAAM;AAIpC,YAAM,EAAE,SAAAZ,UAAS,WAAW,MAAAC,OAAI,IAAKS;AACrC,YAAMN,UAAgBS,SAAO,SAAS;AACtC,aAAO,KAAI,OAAOb,UAASC,QAAMG,OAAM;IACzC,OAAO;AAGL,aAAO;IACT;EACF;;;;;;EAOA,OAAO,OAAsFJ,UAAkBC,QAAcG,SAAgC;AAC3J,QAAI,OAAOH,WAAS,UAAU;AAC5B,YAAM,IAAI,MAAM,uCAAuC;IACzD;AAEA,QAAI,EAAEG,QAAO,iBAAiB,aAAa;AACzC,YAAM,IAAI,MAAM,gBAAgB;IAClC;AAEA,YAAQJ,UAAS;MACf,KAAK,GAAG;AACN,YAAIC,WAASC,cAAa;AACxB,gBAAM,IAAI,MACR,wCAAwCA,YAAW,kBAAkB;QAEzE,OAAO;AACL,iBAAO,IAAI,KAAIF,UAASC,QAAMG,SAAQA,QAAO,KAAK;QACpD;MACF;MACA,KAAK,GAAG;AACN,cAAM,QAAQO,WAAUX,UAASC,QAAMG,QAAO,KAAK;AACnD,eAAO,IAAI,KAAIJ,UAASC,QAAMG,SAAQ,KAAK;MAC7C;MACA,SAAS;AACP,cAAM,IAAI,MAAM,iBAAiB;MACnC;IACF;EACF;;;;EAKA,OAAO,SAAuBA,SAAgD;AAC5E,WAAO,KAAI,OAAO,GAAGF,cAAaE,OAAM;EAC1C;;;;;;;EAQA,OAAO,SAAyDH,QAAYG,SAAgC;AAC1G,WAAO,KAAI,OAAO,GAAGH,QAAMG,OAAM;EACnC;;;;;;;;EASA,OAAO,OAAoF,OAAuD;AAChJ,UAAM,CAAC,KAAK,SAAS,IAAI,KAAI,YAAY,KAAK;AAC9C,QAAI,UAAU,WAAW,GAAG;AAC1B,YAAM,IAAI,MAAM,kBAAkB;IACpC;AACA,WAAO;EACT;;;;;;;;;;EAWA,OAAO,YAA2E,OAAyC;AACzH,UAAM,QAAQ,KAAI,aAAa,KAAK;AACpC,UAAM,aAAa,MAAM,OAAO,MAAM;AACtC,UAAM,iBAAiBU,QACrB,MAAM,SAAS,YAAY,aAAa,MAAM,aAAa,CAAC;AAE9D,QAAI,eAAe,eAAe,MAAM,eAAe;AACrD,YAAM,IAAI,MAAM,kBAAkB;IACpC;AACA,UAAM,cAAc,eAAe,SACjC,MAAM,gBAAgB,MAAM,UAAU;AAExC,UAAMV,UAAS,IAAWW,QACxB,MAAM,eACN,MAAM,YACN,aACA,cAAc;AAEhB,UAAM,MACJ,MAAM,YAAY,IACd,KAAI,SAASX,OAA0C,IACvD,KAAI,SAAS,MAAM,OAAOA,OAAM;AACtC,WAAO,CAAC,KAAwB,MAAM,SAAS,MAAM,IAAI,CAAC;EAC5D;;;;;;;;;;EAWA,OAAO,aAA4E,cAAgD;AACjI,QAAI,SAAS;AACb,UAAM,OAAO,MAAa;AACxB,YAAM,CAAC,GAAGY,QAAM,IAAWH,SAAO,aAAa,SAAS,MAAM,CAAC;AAC/D,gBAAUG;AACV,aAAO;IACT;AAEA,QAAIhB,WAAU,KAAI;AAClB,QAAI,QAAQE;AACZ,QAAIF,aAAsB,IAAI;AAE5B,MAAAA,WAAU;AACV,eAAS;IACX,OAAO;AACL,cAAQ,KAAI;IACd;AAEA,QAAIA,aAAY,KAAKA,aAAY,GAAG;AAClC,YAAM,IAAI,WAAW,uBAAuBA,QAAO,EAAE;IACvD;AAEA,UAAM,aAAa;AACnB,UAAM,gBAAgB,KAAI;AAC1B,UAAM,aAAa,KAAI;AACvB,UAAM,OAAO,SAAS;AACtB,UAAM,gBAAgB,OAAO;AAE7B,WAAO,EAAE,SAAAA,UAAS,OAAO,eAAe,YAAY,eAAe,KAAI;EACzE;;;;;;;EAQA,OAAO,MAA0G,QAAkEQ,QAAmC;AACpN,UAAM,CAAC,QAAQ,KAAK,IAAIS,iBAAgB,QAAQT,MAAI;AAEpD,UAAM,MAAM,KAAI,OAAO,KAAK;AAE5B,QAAI,IAAI,YAAY,KAAK,OAAO,CAAC,MAAM,KAAK;AAC1C,YAAM,MAAM,wDAAwD;IACtE;AAGA,IAAAV,WAAU,GAAG,EAAE,IAAI,QAAQ,MAAM;AAEjC,WAAO;EACT;;AAGF,SAASmB,iBAAqH,QAAkET,QAAmC;AACjO,UAAQ,OAAO,CAAC,GAAG;;IAEjB,KAAK,KAAK;AACR,YAAM,UAAUA,UAAQU;AACxB,aAAO;QACLA,WAAU;QACV,QAAQ,OAAO,GAAGA,WAAU,MAAM,GAAG,MAAM,EAAE;;IAEjD;IACA,KAAKA,WAAU,QAAQ;AACrB,YAAM,UAAUV,UAAQU;AACxB,aAAO,CAACA,WAAU,QAAkB,QAAQ,OAAO,MAAM,CAAC;IAC5D;IACA,KAAKC,QAAO,QAAQ;AAClB,YAAM,UAAUX,UAAQW;AACxB,aAAO,CAACA,QAAO,QAAkB,QAAQ,OAAO,MAAM,CAAC;IACzD;IACA,KAAKC,QAAO,QAAQ;AAClB,YAAM,UAAUZ,UAAQY;AACxB,aAAO,CAACA,QAAO,QAAkB,QAAQ,OAAO,MAAM,CAAC;IACzD;IACA,SAAS;AACP,UAAIZ,UAAQ,MAAM;AAChB,cAAM,MACJ,yFAAyF;MAE7F;AACA,aAAO,CAAC,OAAO,CAAC,GAAaA,OAAK,OAAO,MAAM,CAAC;IAClD;EACF;AACF;AAEA,SAASa,YAAY,OAAmBxB,SAA4BW,QAA+B;AACjG,QAAM,EAAE,OAAM,IAAKA;AACnB,MAAI,WAAWU,WAAU,QAAQ;AAC/B,UAAM,MAAM,8BAA8BV,OAAK,IAAI,WAAW;EAChE;AAEA,QAAM,MAAMX,QAAM,IAAI,MAAM;AAC5B,MAAI,OAAO,MAAM;AACf,UAAMyB,OAAMd,OAAK,OAAO,KAAK,EAAE,MAAM,CAAC;AACtC,IAAAX,QAAM,IAAI,QAAQyB,IAAG;AACrB,WAAOA;EACT,OAAO;AACL,WAAO;EACT;AACF;AAEA,SAASC,YAAoC,OAAmB1B,SAA4BW,QAAkC;AAC5H,QAAM,EAAE,OAAM,IAAKA;AACnB,QAAM,MAAMX,QAAM,IAAI,MAAM;AAC5B,MAAI,OAAO,MAAM;AACf,UAAMyB,OAAMd,OAAK,OAAO,KAAK;AAC7B,IAAAX,QAAM,IAAI,QAAQyB,IAAG;AACrB,WAAOA;EACT,OAAO;AACL,WAAO;EACT;AACF;AAEA,IAAMpB,eAAc;AACpB,IAAMC,gBAAe;AAErB,SAASQ,WAAWX,UAAsBC,QAAc,WAAqB;AAC3E,QAAM,aAAoBuB,gBAAexB,QAAO;AAChD,QAAM,aAAa,aAAoBwB,gBAAevB,MAAI;AAC1D,QAAM,QAAQ,IAAI,WAAW,aAAa,UAAU,UAAU;AAC9D,EAAOwB,UAASzB,UAAS,OAAO,CAAC;AACjC,EAAOyB,UAASxB,QAAM,OAAO,UAAU;AACvC,QAAM,IAAI,WAAW,UAAU;AAC/B,SAAO;AACT;AAEA,IAAMW,aAAY,OAAO,IAAI,kBAAkB;;;ACnc/C,IAAMc,eAAc,WAAqB,QAAQ;AAEjD,SAAS,UAAW,KAAe;AACjC,SAAO,OAAiB,IAAI,SAAS,GAAGA,aAAY,UAAU,GAAGA,YAAW;AAC9E;AAKM,IAAO,gDAAP,MAAoD;EACvC;EAEjB,YAAa,QAAuC;AAClD,SAAK,SAAS;EAChB;EAEA,OAAQ,cAAe,KAAUC,WAAwB,CAAA,GAAE;AACzD,WAAQC,aAAI,KAAK,OAAO,aAAa,KAAKD,QAAO,GAAG,CAAC,WAAU;AAC7D,aAAO;QACL,IAAI,OAAO;QACX,YAAY,OAAO,SAAS,CAAA;;IAEhC,CAAC;EACH;EAEA,MAAM,UAAO;EAEb;EAEA,MAAM,kBAAe;EAErB;EAEA,MAAM,IAAK,KAAiBE,QAAmBF,UAAsB;AACnE,QAAI,CAAC,UAAU,GAAG,GAAG;AACnB;IACF;AAEA,UAAMG,UAAS,4BAA4B,GAAG;AAC9C,UAAM,MAAMC,KAAI,SAAS,KAAMD,OAAM;AACrC,UAAM,SAAS,oBAAoBD,MAAK;AAExC,UAAM,KAAK,OAAO,QAAQ,KAAK,QAAQF,QAAO;EAChD;EAEA,MAAM,IAAK,KAAiBA,UAAsB;AAChD,QAAI,CAAC,UAAU,GAAG,GAAG;AACnB,YAAM,IAAI,cAAc,WAAW;IACrC;AAEA,UAAMG,UAAS,4BAA4B,GAAG;AAC9C,UAAM,MAAMC,KAAI,SAAS,KAAMD,OAAM;AAErC,QAAI;AACF,YAAM,SAAS,MAAM,KAAK,OAAO,QAAQ,KAAKH,QAAO;AAErD,aAAO,kBAAkB,MAAM;IACjC,SAAS,KAAU;AAGjB,UAAI,IAAI,SAAS,oBAAoB;AACnC,cAAM,IAAI,cAAc,WAAW;MACrC;AAEA,YAAM;IACR;EACF;;AAMI,IAAO,6CAAP,MAAiD;EACpC;EAEjB,YAAa,QAAuC;AAClD,SAAK,SAAS;EAChB;EAEA,MAAM,SAAUK,SAAgBL,WAAwB,CAAA,GAAE;AACxD,UAAM,OAAO,MAAMC,aAAM,KAAK,OAAO,SAASI,SAAQL,QAAO,CAAC;AAE9D,QAAI,QAAQ,MAAM;AAChB,aAAO;QACL,IAAI,KAAK;QACT,YAAY,KAAK,SAAS,CAAA;;IAE9B;AAEA,UAAM,IAAI,cAAc,WAAW;EACrC;EAEA,OAAQ,gBAAiB,KAAiBA,WAAwB,CAAA,GAAE;EAEpE;;;;ACrFF,IAAMM,OAAM,OAAO,sCAAsC;AAEzD,IAAM,gBAAgB;EACpB,oBAAoB;EACpB,SAAS;EACT,UAAU,IAAI,KAAK;;EACnB,WAAW;;AAGP,IAAO,yCAAP,MAA6C;EACzC;EACS;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACT;EACS;;;;EAIjB,YAAa,KAAmB,OAA4C,CAAA,GAAE;AAC5E,SAAK,UAAU;AACf,SAAK,qBAAqB,IAAI,gBAAe;AAC7C,oBAAgB,UAAU,KAAK,mBAAmB,MAAM;AACxD,SAAK,YAAY,IAAI,OAAO;MAC1B,aAAa,KAAK,sBAAsB,cAAc;KACvD;AACD,SAAK,mBAAmB,oBAAI,IAAG;AAC/B,SAAK,YAAY,eAAe,MAAM,MAAM,IAAI,IAAI,GAAG;AACvD,SAAK,UAAU,KAAK,WAAW,cAAc;AAC7C,SAAK,cAAc,KAAK;AACxB,SAAK,kBAAkB,KAAK;AAC5B,SAAK,iBAAiB,IAAI,8CAA8C,IAAI;AAC5E,SAAK,cAAc,IAAI,2CAA2C,IAAI;AAEtE,SAAK,YAAY,KAAK,aAAa,cAAc;AACjD,SAAK,WAAW,KAAK,YAAY,cAAc;EACjD;EAEA,KAAK,oBAAoB,IAAC;AACxB,WAAO,KAAK;EACd;EAEA,KAAK,iBAAiB,IAAC;AACrB,WAAO,KAAK;EACd;EAEA,YAAS;AACP,WAAO,KAAK;EACd;EAEA,MAAM,QAAK;AACT,QAAI,KAAK,SAAS;AAChB;IACF;AAEA,SAAK,UAAU;AAEf,QAAI,KAAK,WAAW,GAAG;AACrB,WAAK,QAAQ,MAAM,WAAW,QAAQ,KAAK,KAAK,SAAS;AAEzD,UAAI,KAAK,SAAS,MAAM;AACtB,QAAAA,KAAI,6BAA6B,KAAK,QAAQ;MAChD;IACF;EACF;EAEA,MAAM,OAAI;AACR,SAAK,UAAU,MAAK;AACpB,SAAK,mBAAmB,MAAK;AAG7B,UAAM,WAAW,QAAQ,OAAO,KAAK,SAAS;AAE9C,SAAK,UAAU;EACjB;EAEA,OAAQ,aAAc,KAAUC,WAA+B,CAAA,GAAE;AAC/D,IAAAD,KAAI,2BAA2B,GAAG;AAElC,UAAM,gBAAgB,YAAY,QAAQ,KAAK,OAAO;AACtD,UAAM,SAAS,UAAU,CAAC,KAAK,mBAAmB,QAAQ,eAAeC,SAAQ,MAAM,CAAC;AACxF,oBAAgB,UAAU,eAAe,MAAM;AAC/C,UAAM,UAAU,OAAK;AACrB,UAAM,WAAW,OAAK;AAEtB,SAAK,KAAK,UAAU,IAAI,YAAW;AACjC,cAAQ,QAAO;AACf,aAAO,SAAS;IAClB,CAAC;AAED,QAAI;AACF,YAAM,QAAQ;AAGd,YAAM,MAAM,IAAI,IAAI,GAAG,KAAK,SAAS,wBAAwB,IAAI,SAAQ,CAAE,EAAE;AAC7E,WAAK,iBAAiB,KAAKA,SAAQ,aAAaA,SAAQ,eAAe;AACvE,YAAM,aAAa,EAAE,SAAS,EAAE,QAAQ,uBAAsB,GAAI,OAAM;AACxE,YAAM,MAAM,MAAM,KAAK,aAAa,IAAI,SAAQ,GAAI,UAAU;AAE9D,UAAI,OAAO,MAAM;AACf,cAAM,IAAI,iBAAiB,sBAAsB;MACnD;AACA,UAAI,CAAC,IAAI,IAAI;AACX,YAAI,IAAI,WAAW,KAAK;AAGtB,gBAAM,IAAI,cAAc,2BAA2B;QACrD;AAEA,YAAI,IAAI,WAAW,KAAK;AAGtB,gBAAM,IAAI,oBAAoB,4DAA4D;QAC5F;AACA,cAAM,IAAI,iBAAiB,2BAA2B,IAAI,MAAM,EAAE;MACpE;AAEA,UAAI,IAAI,QAAQ,MAAM;AACpB,cAAM,IAAI,iBAAiB,8BAA8B;MAC3D;AAEA,YAAM,cAAc,IAAI,QAAQ,IAAI,cAAc;AAClD,UAAI,eAAe,MAAM;AACvB,cAAM,IAAI,iBAAiB,iCAAiC;MAC9D;AAEA,UAAI,aAAa,WAAW,kBAAkB,GAAG;AAC/C,cAAM,OAAO,MAAM,IAAI,KAAI;AAE3B,mBAAW,YAAY,KAAK,WAAW;AACrC,gBAAM,SAAS,KAAK,qBAAqB,QAAQ;AACjD,cAAI,UAAU,MAAM;AAClB,kBAAM;UACR;QACF;MACF,WAAW,YAAY,SAAS,sBAAsB,GAAG;AACvD,yBAAiB,YAAY,MAAO,0BAAK,IAAI,IAAI,CAAC,GAAG;AACnD,gBAAM,SAAS,KAAK,qBAAqB,QAAQ;AACjD,cAAI,UAAU,MAAM;AAClB,kBAAM;UACR;QACF;MACF,OAAO;AACL,cAAM,IAAI,iBAAiB,6BAA6B,WAAW,EAAE;MACvE;IACF;AACE,aAAO,MAAK;AACZ,eAAS,QAAO;AAChB,MAAAD,KAAI,6BAA6B,GAAG;IACtC;EACF;EAEA,OAAQ,SAAUE,SAAgBD,WAA2B,CAAA,GAAE;AAC7D,IAAAD,KAAI,uBAAuBE,OAAM;AAEjC,UAAM,gBAAgB,YAAY,QAAQ,KAAK,OAAO;AACtD,UAAM,SAAS,UAAU,CAAC,KAAK,mBAAmB,QAAQ,eAAeD,SAAQ,MAAM,CAAC;AACxF,oBAAgB,UAAU,eAAe,MAAM;AAC/C,UAAM,UAAU,OAAK;AACrB,UAAM,WAAW,OAAK;AAEtB,SAAK,KAAK,UAAU,IAAI,YAAW;AACjC,cAAQ,QAAO;AACf,aAAO,SAAS;IAClB,CAAC;AAED,QAAI;AACF,YAAM,QAAQ;AAGd,YAAM,MAAM,IAAI,IAAI,GAAG,KAAK,SAAS,oBAAoBC,QAAO,MAAK,EAAG,SAAQ,CAAE,EAAE;AACpF,WAAK,iBAAiB,KAAKD,SAAQ,aAAaA,SAAQ,eAAe;AAEvE,YAAM,aAAa,EAAE,SAAS,EAAE,QAAQ,uBAAsB,GAAI,OAAM;AACxE,YAAM,MAAM,MAAM,KAAK,aAAa,IAAI,SAAQ,GAAI,UAAU;AAE9D,UAAI,IAAI,WAAW,KAAK;AAGtB,cAAM,IAAI,cAAc,2BAA2B;MACrD;AAEA,UAAI,IAAI,WAAW,KAAK;AAGtB,cAAM,IAAI,oBAAoB,4DAA4D;MAC5F;AAEA,UAAI,IAAI,QAAQ,MAAM;AACpB,cAAM,IAAI,iBAAiB,8BAA8B;MAC3D;AAEA,YAAM,cAAc,IAAI,QAAQ,IAAI,cAAc;AAClD,UAAI,gBAAgB,oBAAoB;AACtC,cAAM,OAAO,MAAM,IAAI,KAAI;AAE3B,mBAAW,QAAQ,KAAK,OAAO;AAC7B,gBAAM,SAAS,KAAK,qBAAqB,IAAI;AAC7C,cAAI,UAAU,MAAM;AAClB,kBAAM;UACR;QACF;MACF,OAAO;AACL,yBAAiB,QAAQ,MAAO,0BAAK,IAAI,IAAI,CAAC,GAAG;AAC/C,gBAAM,SAAS,KAAK,qBAAqB,IAAI;AAC7C,cAAI,UAAU,MAAM;AAClB,kBAAM;UACR;QACF;MACF;IACF,SAAS,KAAK;AACZ,MAAAD,KAAI,MAAM,qBAAqB,GAAG;IACpC;AACE,aAAO,MAAK;AACZ,eAAS,QAAO;AAChB,MAAAA,KAAI,yBAAyBE,OAAM;IACrC;EACF;EAEA,MAAM,QAAS,WAA+CD,WAA0B,CAAA,GAAE;AACxF,IAAAD,KAAI,sBAAsB,SAAS;AAEnC,UAAM,gBAAgB,YAAY,QAAQ,KAAK,OAAO;AACtD,UAAM,SAAS,UAAU,CAAC,KAAK,mBAAmB,QAAQ,eAAeC,SAAQ,MAAM,CAAC;AACxF,oBAAgB,UAAU,eAAe,MAAM;AAC/C,UAAM,UAAU,OAAK;AACrB,UAAM,WAAW,OAAK;AAEtB,SAAK,KAAK,UAAU,IAAI,YAAW;AACjC,cAAQ,QAAO;AACf,aAAO,SAAS;IAClB,CAAC;AAGD,UAAM,WAAW,GAAG,KAAK,SAAS,mBAAmB,SAAS;AAE9D,QAAI;AACF,YAAM,QAAQ;AAEd,YAAM,aAAa,EAAE,SAAS,EAAE,QAAQ,mCAAkC,GAAI,OAAM;AACpF,YAAM,MAAM,MAAM,KAAK,aAAa,UAAU,UAAU;AAExD,MAAAD,KAAI,qBAAqB,UAAU,IAAI,MAAM;AAE7C,UAAI,IAAI,WAAW,KAAK;AAGtB,cAAM,IAAI,cAAc,2BAA2B;MACrD;AAEA,UAAI,IAAI,WAAW,KAAK;AAGtB,cAAM,IAAI,oBAAoB,4DAA4D;MAC5F;AAEA,UAAI,IAAI,QAAQ,MAAM;AACpB,cAAM,IAAI,iBAAiB,+BAA+B;MAC5D;AAEA,YAAM,MAAM,MAAM,IAAI,YAAW;AACjC,YAAM,OAAO,IAAI,WAAW,KAAK,GAAG,IAAI,UAAU;AAElD,UAAIC,SAAQ,aAAa,OAAO;AAC9B,cAAM,cAAc,0BAA0B,UAAU,SAAS,GAAG,IAAI;MAC1E;AAEA,aAAO,oBAAoB,IAAI;IACjC,SAAS,KAAU;AACjB,MAAAD,KAAI,MAAM,yBAAyB,UAAU,GAAG;AAEhD,YAAM;IACR;AACE,aAAO,MAAK;AACZ,eAAS,QAAO;AAChB,MAAAA,KAAI,wBAAwB,SAAS;IACvC;EACF;EAEA,MAAM,QAAS,WAA+C,QAAoBC,WAAwB,CAAA,GAAE;AAC1G,IAAAD,KAAI,sBAAsB,SAAS;AAEnC,UAAM,gBAAgB,YAAY,QAAQ,KAAK,OAAO;AACtD,UAAM,SAAS,UAAU,CAAC,KAAK,mBAAmB,QAAQ,eAAeC,SAAQ,MAAM,CAAC;AACxF,oBAAgB,UAAU,eAAe,MAAM;AAC/C,UAAM,UAAU,OAAK;AACrB,UAAM,WAAW,OAAK;AAEtB,SAAK,KAAK,UAAU,IAAI,YAAW;AACjC,cAAQ,QAAO;AACf,aAAO,SAAS;IAClB,CAAC;AAGD,UAAM,WAAW,GAAG,KAAK,SAAS,mBAAmB,SAAS;AAE9D,QAAI;AACF,YAAM,QAAQ;AAEd,YAAM,OAAO,kBAAkB,MAAM;AAErC,YAAM,aAAa,EAAE,QAAQ,OAAO,SAAS,EAAE,gBAAgB,mCAAkC,GAAI,MAAM,OAAM;AACjH,YAAM,MAAM,MAAM,KAAK,aAAa,UAAU,UAAU;AAExD,MAAAD,KAAI,qBAAqB,UAAU,IAAI,MAAM;AAE7C,UAAI,IAAI,WAAW,KAAK;AACtB,cAAM,IAAI,iBAAiB,6CAA6C;MAC1E;IACF,SAAS,KAAU;AACjB,MAAAA,KAAI,MAAM,yBAAyB,UAAU,IAAI,KAAK;AAEtD,YAAM;IACR;AACE,aAAO,MAAK;AACZ,eAAS,QAAO;AAChB,MAAAA,KAAI,wBAAwB,SAAS;IACvC;EACF;EAEA,qBAAsB,QAAW;AAC/B,QAAI;AACF,YAAMG,aAAsB,CAAA;AAC5B,YAAM,aAA0B,OAAO,OAAO,IAAI,SAAS,KAAK,CAAA;AAEhE,UAAI,OAAO,aAAa,MAAM;AAC5B,QAAAA,WAAU,KAAK,GAAG,OAAO,SAAS;MACpC;AAEA,UAAI,OAAO,YAAY,MAAM;AAC3B,QAAAA,WAAU,KAAK,OAAO,QAAQ;AAC9B,eAAO,OAAO;MAChB;AAEA,aAAO;QACL,GAAG;QACH,QAAQ;QACR,IAAI,iBAAiB,OAAO,EAAE;QAC9B,OAAO;QACP,WAAWA;;IAEf,SAAS,KAAK;AACZ,MAAAH,KAAI,MAAM,2CAA2C,GAAG;IAC1D;EACF;EAEA,iBAAkB,KAAU,aAAwB,iBAA0B;AAE5E,QAAI,eAAe,QAAQ,KAAK,eAAe,MAAM;AACnD,YAAM,eAAe,aAAa,KAAK,GAAG,KAAK,KAAK,aAAa,KAAK,GAAG,KAAK;AAC9E,UAAI,iBAAiB,IAAI;AACvB,YAAI,aAAa,IAAI,gBAAgB,YAAY;MACnD;IACF;AACA,QAAI,mBAAmB,QAAQ,KAAK,mBAAmB,MAAM;AAC3D,YAAM,iBAAiB,iBAAiB,KAAK,GAAG,KAAK,KAAK,iBAAiB,KAAK,GAAG,KAAK;AACxF,UAAI,mBAAmB,IAAI;AACzB,YAAI,aAAa,IAAI,oBAAoB,cAAc;MACzD;IACF;EACF;;;;;;EAOA,MAAM,aAAc,KAAaC,UAAoB;AACnD,UAAM,gBAAgBA,SAAQ,UAAU;AACxC,UAAM,MAAM,GAAG,aAAa,IAAI,GAAG;AAGnC,QAAI,kBAAkB,OAAO;AAC3B,YAAM,iBAAiB,MAAM,KAAK,OAAO,MAAM,GAAG;AAClD,UAAI,kBAAkB,MAAM;AAE1B,cAAM,UAAU,SAAS,eAAe,QAAQ,IAAI,iBAAiB,KAAK,KAAK,EAAE;AACjF,YAAI,UAAU,KAAK,IAAG,GAAI;AACxB,UAAAD,KAAI,oCAAoC,GAAG;AAC3C,iBAAO;QACT,OAAO;AAEL,gBAAM,KAAK,OAAO,OAAO,GAAG;QAC9B;MACF;IACF;AAGA,UAAM,kBAAkB,KAAK,iBAAiB,IAAI,GAAG;AACrD,QAAI,mBAAmB,MAAM;AAC3B,YAAMI,YAAW,MAAM;AACvB,MAAAJ,KAAI,yCAAyC,GAAG;AAChD,aAAOI,UAAS,MAAK;IACvB;AAGA,UAAM,iBAAiB,MAAM,KAAKH,QAAO,EAAE,KAAK,OAAMG,cAAW;AAE/D,UAAI,KAAK,SAAS,QAAQA,UAAS,MAAM,kBAAkB,OAAO;AAChE,cAAM,UAAU,KAAK,IAAG,IAAK,KAAK;AAClC,cAAM,UAAU,IAAI,QAAQA,UAAS,OAAO;AAC5C,gBAAQ,IAAI,mBAAmB,QAAQ,SAAQ,CAAE;AAGjD,cAAM,iBAAiB,IAAI,SAASA,UAAS,MAAK,EAAG,MAAM;UACzD,QAAQA,UAAS;UACjB,YAAYA,UAAS;UACrB;SACD;AAED,cAAM,KAAK,MAAM,IAAI,KAAK,cAAc;MAC1C;AACA,aAAOA;IACT,CAAC,EAAE,QAAQ,MAAK;AAEd,WAAK,iBAAiB,OAAO,GAAG;IAClC,CAAC;AAED,SAAK,iBAAiB,IAAI,KAAK,cAAc;AAC7C,UAAM,WAAW,MAAM;AACvB,WAAO;EACT;;;;AC9OI,SAAU,sCAAuC,KAAmB,OAA4C,CAAA,GAAE;AACtH,SAAO,IAAI,uCAAuC,IAAI,IAAI,GAAG,GAAG,IAAI;AACtE;;;ACnNO,IAAMC,SAAQ,IAAI,WAAW,CAAC;AAW/B,SAAUC,SAAQ,IAAgB,IAAc;AACpD,MAAI,OAAO,IAAI;AAAE,WAAO;EAAK;AAC7B,MAAI,GAAG,eAAe,GAAG,YAAY;AACnC,WAAO;EACT;AAEA,WAAS,KAAK,GAAG,KAAK,GAAG,YAAY,MAAM;AACzC,QAAI,GAAG,EAAE,MAAM,GAAG,EAAE,GAAG;AACrB,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEM,SAAUC,QAAQ,GAA6C;AACnE,MAAI,aAAa,cAAc,EAAE,YAAY,SAAS,cAAc;AAAE,WAAO;EAAE;AAC/E,MAAI,aAAa,aAAa;AAAE,WAAO,IAAI,WAAW,CAAC;EAAE;AACzD,MAAI,YAAY,OAAO,CAAC,GAAG;AACzB,WAAO,IAAI,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU;EAC5D;AACA,QAAM,IAAI,MAAM,mCAAmC;AACrD;;;ACvBA,SAASC,MAAM,UAAUC,OAAI;AAC3B,MAAI,SAAS,UAAU,KAAK;AAAE,UAAM,IAAI,UAAU,mBAAmB;EAAE;AACvE,MAAI,WAAW,IAAI,WAAW,GAAG;AACjC,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,aAAS,CAAC,IAAI;EAChB;AACA,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,QAAI,IAAI,SAAS,OAAO,CAAC;AACzB,QAAI,KAAK,EAAE,WAAW,CAAC;AACvB,QAAI,SAAS,EAAE,MAAM,KAAK;AAAE,YAAM,IAAI,UAAU,IAAI,eAAe;IAAE;AACrE,aAAS,EAAE,IAAI;EACjB;AACA,MAAI,OAAO,SAAS;AACpB,MAAI,SAAS,SAAS,OAAO,CAAC;AAC9B,MAAI,SAAS,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,GAAG;AAC1C,MAAI,UAAU,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI;AAI3C,WAASC,SAAQ,QAAM;AAErB,QAAI,kBAAkB;AAAY;aAAW,YAAY,OAAO,MAAM,GAAG;AACvE,eAAS,IAAI,WAAW,OAAO,QAAQ,OAAO,YAAY,OAAO,UAAU;IAC7E,WAAW,MAAM,QAAQ,MAAM,GAAG;AAChC,eAAS,WAAW,KAAK,MAAM;IACjC;AACA,QAAI,EAAE,kBAAkB,aAAa;AAAE,YAAM,IAAI,UAAU,qBAAqB;IAAE;AAClF,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO;IAAG;AAErC,QAAI,SAAS;AACb,QAAIC,WAAS;AACb,QAAI,SAAS;AACb,QAAI,OAAO,OAAO;AAClB,WAAO,WAAW,QAAQ,OAAO,MAAM,MAAM,GAAG;AAC9C;AACA;IACF;AAEA,QAAI,QAAS,OAAO,UAAU,UAAU,MAAO;AAC/C,QAAI,MAAM,IAAI,WAAW,IAAI;AAE7B,WAAO,WAAW,MAAM;AACtB,UAAI,QAAQ,OAAO,MAAM;AAEzB,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,MAAM,IAAI,GAAG,MAAO;AAC9B,YAAI,GAAG,IAAK,QAAQ,SAAU;AAC9B,gBAAS,QAAQ,SAAU;MAC7B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,IAAI,GAAG,MAAM,GAAG;AACrC;IACF;AAEA,QAAI,MAAM,OAAO,OAAO,MAAM;AAC9B,WAAO,MAAM,MAAM,EAAE,KAAK;AAAE,aAAO,SAAS,OAAO,IAAI,GAAG,CAAC;IAAG;AAC9D,WAAO;EACT;AAIA,WAAS,aAAc,QAAM;AAC3B,QAAI,OAAO,WAAW,UAAU;AAAE,YAAM,IAAI,UAAU,iBAAiB;IAAE;AACzE,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO,IAAI,WAAU;IAAG;AACnD,QAAI,MAAM;AAEV,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,SAAS;AACb,QAAIA,WAAS;AACb,WAAO,OAAO,GAAG,MAAM,QAAQ;AAC7B;AACA;IACF;AAEA,QAAI,QAAU,OAAO,SAAS,OAAO,SAAU,MAAO;AACtD,QAAI,OAAO,IAAI,WAAW,IAAI;AAE9B,WAAO,OAAO,GAAG,GAAG;AAElB,UAAI,QAAQ,SAAS,OAAO,WAAW,GAAG,CAAC;AAE3C,UAAI,UAAU,KAAK;AAAE;MAAO;AAC5B,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,OAAO,KAAK,GAAG,MAAO;AAChC,aAAK,GAAG,IAAK,QAAQ,QAAS;AAC9B,gBAAS,QAAQ,QAAS;MAC5B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,KAAK,GAAG,MAAM,GAAG;AACtC;IACF;AACA,QAAI,MAAM,IAAI,WAAW,UAAU,OAAO,IAAI;AAC9C,QAAIE,KAAI;AACR,WAAO,QAAQ,MAAM;AACnB,UAAIA,IAAG,IAAI,KAAK,KAAK;IACvB;AACA,WAAO;EACT;AAIA,WAASC,SAAQC,SAAM;AACrB,QAAI,SAAS,aAAaA,OAAM;AAChC,QAAI,QAAQ;AAAE,aAAO;IAAO;AAC5B,UAAM,IAAI,MAAM,OAAON,KAAI,YAAY;EACzC;AACA,SAAO;IACL,QAAQC;IACR;IACA,QAAQI;;AAEZ;AACA,IAAIE,OAAMR;AAEV,IAAIS,mCAAkCD;AAEtC,IAAAE,kBAAeD;;;ACjIf,IAAME,WAAN,MAAa;EACF;EACA;EACA;EAET,YAAaC,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;EACpB;EAEA,OAAQ,OAAiB;AACvB,QAAI,iBAAiB,YAAY;AAC/B,aAAO,GAAG,KAAK,MAAM,GAAG,KAAK,WAAW,KAAK,CAAC;IAChD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;;AAQF,IAAMC,WAAN,MAAa;EACF;EACA;EACA;EACQ;EAEjB,YAAaD,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,UAAM,kBAAkB,OAAO,YAAY,CAAC;AAE5C,QAAI,oBAAoB,QAAW;AACjC,YAAM,IAAI,MAAM,0BAA0B;IAC5C;AACA,SAAK,kBAAkB;AACvB,SAAK,aAAa;EACpB;EAEA,OAAQ,MAAY;AAClB,QAAI,OAAO,SAAS,UAAU;AAC5B,UAAI,KAAK,YAAY,CAAC,MAAM,KAAK,iBAAiB;AAChD,cAAM,MAAM,qCAAqC,KAAK,UAAU,IAAI,CAAC,KAAK,KAAK,IAAI,+CAA+C,KAAK,MAAM,EAAE;MACjJ;AACA,aAAO,KAAK,WAAW,KAAK,MAAM,KAAK,OAAO,MAAM,CAAC;IACvD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;EAEA,GAAgC,SAAmE;AACjG,WAAOE,KAAG,MAAM,OAAO;EACzB;;AAKF,IAAMC,mBAAN,MAAqB;EACV;EAET,YAAa,UAA0B;AACrC,SAAK,WAAW;EAClB;EAEA,GAAiC,SAAmE;AAClG,WAAOD,KAAG,MAAM,OAAO;EACzB;EAEA,OAAQ,OAAa;AACnB,UAAM,SAAS,MAAM,CAAC;AACtB,UAAM,UAAU,KAAK,SAAS,MAAM;AACpC,QAAI,WAAW,MAAM;AACnB,aAAO,QAAQ,OAAO,KAAK;IAC7B,OAAO;AACL,YAAM,WAAW,qCAAqC,KAAK,UAAU,KAAK,CAAC,+BAA+B,OAAO,KAAK,KAAK,QAAQ,CAAC,gBAAgB;IACtJ;EACF;;AAGI,SAAUA,KAAyC,MAA+C,OAA8C;AACpJ,SAAO,IAAIC,iBAAgB;IACzB,GAAI,KAAK,YAAY,EAAE,CAAE,KAA2B,MAAM,GAAG,KAAI;IACjE,GAAI,MAAM,YAAY,EAAE,CAAE,MAA4B,MAAM,GAAG,MAAK;GAClD;AACtB;AAEM,IAAOC,SAAP,MAAY;EACP;EACA;EACA;EACA;EACA;EACA;EAET,YAAaJ,OAAY,QAAgB,YAAsB,YAAoB;AACjF,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,UAAU,IAAID,SAAQC,OAAM,QAAQ,UAAU;AACnD,SAAK,UAAU,IAAIC,SAAQD,OAAM,QAAQ,UAAU;EACrD;EAEA,OAAQ,OAAiB;AACvB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;EAEA,OAAQ,OAAa;AACnB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;;AAGI,SAAUK,OAAmD,EAAE,MAAAL,OAAM,QAAQ,QAAAM,UAAQ,QAAAC,SAAM,GAAsE;AACrK,SAAO,IAAIH,OAAMJ,OAAM,QAAQM,UAAQC,QAAM;AAC/C;AAEM,SAAUC,OAAoD,EAAE,MAAAR,OAAM,QAAQ,UAAAS,UAAQ,GAAoD;AAC9I,QAAM,EAAE,QAAAH,UAAQ,QAAAC,SAAM,IAAKG,gBAAMD,WAAUT,KAAI;AAC/C,SAAOK,OAAK;IACV;IACA,MAAAL;IACA,QAAAM;IACA,QAAQ,CAAC,SAA6BK,QAAOJ,SAAO,IAAI,CAAC;GAC1D;AACH;AAEA,SAASA,SAAQK,SAAgB,aAAqC,aAAqBZ,OAAY;AAErG,MAAI,MAAMY,QAAO;AACjB,SAAOA,QAAO,MAAM,CAAC,MAAM,KAAK;AAC9B,MAAE;EACJ;AAGA,QAAM,MAAM,IAAI,WAAY,MAAM,cAAc,IAAK,CAAC;AAGtD,MAAI,OAAO;AACX,MAAI,SAAS;AACb,MAAI,UAAU;AACd,WAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAE5B,UAAMC,SAAQ,YAAYD,QAAO,CAAC,CAAC;AACnC,QAAIC,WAAU,QAAW;AACvB,YAAM,IAAI,YAAY,OAAOb,KAAI,YAAY;IAC/C;AAGA,aAAU,UAAU,cAAea;AACnC,YAAQ;AAGR,QAAI,QAAQ,GAAG;AACb,cAAQ;AACR,UAAI,SAAS,IAAI,MAAQ,UAAU;IACrC;EACF;AAGA,MAAI,QAAQ,gBAAgB,MAAQ,UAAW,IAAI,UAAY,GAAG;AAChE,UAAM,IAAI,YAAY,wBAAwB;EAChD;AAEA,SAAO;AACT;AAEA,SAASP,SAAQ,MAAkBG,WAAkB,aAAmB;AACtE,QAAM,MAAMA,UAASA,UAAS,SAAS,CAAC,MAAM;AAC9C,QAAM,QAAQ,KAAK,eAAe;AAClC,MAAI,MAAM;AAEV,MAAI,OAAO;AACX,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAEpC,aAAU,UAAU,IAAK,KAAK,CAAC;AAC/B,YAAQ;AAGR,WAAO,OAAO,aAAa;AACzB,cAAQ;AACR,aAAOA,UAAS,OAAQ,UAAU,IAAK;IACzC;EACF;AAGA,MAAI,SAAS,GAAG;AACd,WAAOA,UAAS,OAAQ,UAAW,cAAc,IAAM;EACzD;AAGA,MAAI,KAAK;AACP,YAAS,IAAI,SAAS,cAAe,OAAO,GAAG;AAC7C,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEA,SAASK,mBAAmBL,WAAgB;AAE1C,QAAM,cAAsC,CAAA;AAC5C,WAAS,IAAI,GAAG,IAAIA,UAAS,QAAQ,EAAE,GAAG;AACxC,gBAAYA,UAAS,CAAC,CAAC,IAAI;EAC7B;AACA,SAAO;AACT;AAKM,SAAUM,SAAsD,EAAE,MAAAf,OAAM,QAAQ,aAAa,UAAAS,UAAQ,GAAyE;AAClL,QAAM,cAAcK,mBAAkBL,SAAQ;AAC9C,SAAOJ,OAAK;IACV;IACA,MAAAL;IACA,OAAQ,OAAiB;AACvB,aAAOM,SAAO,OAAOG,WAAU,WAAW;IAC5C;IACA,OAAQ,OAAa;AACnB,aAAOF,SAAO,OAAO,aAAa,aAAaP,KAAI;IACrD;GACD;AACH;;;AC9OO,IAAMgB,UAASC,SAAQ;EAC5B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMC,eAAcD,SAAQ;EACjC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAME,aAAYF,SAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMG,kBAAiBH,SAAQ;EACpC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMI,aAAYJ,SAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMK,kBAAiBL,SAAQ;EACpC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMM,gBAAeN,SAAQ;EAClC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMO,qBAAoBP,SAAQ;EACvC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMQ,WAAUR,SAAQ;EAC7B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;;;AC7DM,IAAMS,UAASC,OAAM;EAC1B,QAAQ;EACR,MAAM;EACN,UAAU;CACX;AAEM,IAAMC,eAAcD,OAAM;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;CACX;;;ACVM,IAAME,aAAYC,OAAM;EAC7B,MAAM;EACN,QAAQ;EACR,UAAU;CACX;AAEM,IAAMC,gBAAeD,OAAM;EAChC,MAAM;EACN,QAAQ;EACR,UAAU;CACX;;;ACXD,IAAIE,YAAWC;AAEf,IAAIC,OAAM;AAAV,IACIC,QAAO;AADX,IAEIC,UAAS,CAACD;AAFd,IAGIE,OAAM,KAAK,IAAI,GAAG,EAAE;AAOxB,SAASJ,SAAO,KAAK,KAAK,QAAM;AAC9B,QAAM,OAAO,CAAA;AACb,WAAS,UAAU;AACnB,MAAI,YAAY;AAEhB,SAAM,OAAOI,MAAK;AAChB,QAAI,QAAQ,IAAK,MAAM,MAAQH;AAC/B,WAAO;EACT;AACA,SAAM,MAAME,SAAQ;AAClB,QAAI,QAAQ,IAAK,MAAM,MAAQF;AAC/B,aAAS;EACX;AACA,MAAI,MAAM,IAAI,MAAM;AAGpB,EAAAD,SAAO,QAAQ,SAAS,YAAY;AAEpC,SAAO;AACT;AAEA,IAAIK,WAASC;AAEb,IAAIC,SAAQ;AAAZ,IACIC,UAAS;AAMb,SAASF,MAAK,KAAK,QAAM;AACvB,MAAI,MAAS,GACT,SAAS,UAAU,GACnB,QAAS,GACT,UAAU,QACV,GACA,IAAI,IAAI;AAEZ,KAAG;AACD,QAAI,WAAW,GAAG;AAEhB,MAAAA,MAAK,QAAQ;AACb,YAAM,IAAI,WAAW,yBAAyB;IAChD;AACA,QAAI,IAAI,SAAS;AACjB,WAAO,QAAQ,MACV,IAAIE,YAAW,SACf,IAAIA,WAAU,KAAK,IAAI,GAAG,KAAK;AACpC,aAAS;EACX,SAAS,KAAKD;AAGd,EAAAD,MAAK,QAAQ,UAAU;AAEvB,SAAO;AACT;AAEA,IAAIG,MAAK,KAAK,IAAI,GAAI,CAAC;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AAEvB,IAAIC,UAAS,SAAgCC,QAAK;AAChD,SACEA,SAAQV,MAAK,IACbU,SAAQT,MAAK,IACbS,SAAQR,MAAK,IACbQ,SAAQP,MAAK,IACbO,SAAQN,MAAK,IACbM,SAAQL,MAAK,IACbK,SAAQJ,MAAK,IACbI,SAAQH,MAAK,IACbG,SAAQF,MAAK,IACA;AAEjB;AAEA,IAAIG,UAAS;EACT,QAAQrB;EACR,QAAQM;EACR,gBAAgBa;;AAGpB,IAAIG,gBAAeD;AAEnB,IAAAE,kBAAeD;;;ACrGT,SAAUE,SAAQ,MAAkB,SAAS,GAAC;AAClD,QAAMC,SAAOC,gBAAO,OAAO,MAAM,MAAM;AACvC,SAAO,CAACD,QAAMC,gBAAO,OAAO,KAAK;AACnC;AAEM,SAAUC,UAAU,KAAa,QAAoB,SAAS,GAAC;AACnE,EAAAD,gBAAO,OAAO,KAAK,QAAQ,MAAM;AACjC,SAAO;AACT;AAEM,SAAUE,gBAAgB,KAAW;AACzC,SAAOF,gBAAO,eAAe,GAAG;AAClC;;;ACPM,SAAUG,QAA8BC,QAAYC,SAAkB;AAC1E,QAAM,OAAOA,QAAO;AACpB,QAAM,aAAoBC,gBAAeF,MAAI;AAC7C,QAAM,eAAe,aAAoBE,gBAAe,IAAI;AAE5D,QAAM,QAAQ,IAAI,WAAW,eAAe,IAAI;AAChD,EAAOC,UAASH,QAAM,OAAO,CAAC;AAC9B,EAAOG,UAAS,MAAM,OAAO,UAAU;AACvC,QAAM,IAAIF,SAAQ,YAAY;AAE9B,SAAO,IAAIG,QAAOJ,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAKM,SAAUI,SAAQ,WAAqB;AAC3C,QAAM,QAAQC,QAAO,SAAS;AAC9B,QAAM,CAACN,QAAM,UAAU,IAAWK,SAAO,KAAK;AAC9C,QAAM,CAAC,MAAM,YAAY,IAAWA,SAAO,MAAM,SAAS,UAAU,CAAC;AACrE,QAAMJ,UAAS,MAAM,SAAS,aAAa,YAAY;AAEvD,MAAIA,QAAO,eAAe,MAAM;AAC9B,UAAM,IAAI,MAAM,kBAAkB;EACpC;AAEA,SAAO,IAAIG,QAAOJ,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAEM,SAAUM,SAAQ,GAAoB,GAAU;AACpD,MAAI,MAAM,GAAG;AACX,WAAO;EACT,OAAO;AACL,UAAM,OAAO;AAEb,WACE,EAAE,SAAS,KAAK,QAChB,EAAE,SAAS,KAAK,QAChB,KAAK,iBAAiB,cACtBA,SAAW,EAAE,OAAO,KAAK,KAAK;EAElC;AACF;AAMM,IAAOH,UAAP,MAAa;EACR;EACA;EACA;EACA;;;;EAKT,YAAaJ,QAAY,MAAYC,SAAoB,OAAiB;AACxE,SAAK,OAAOD;AACZ,SAAK,OAAO;AACZ,SAAK,SAASC;AACd,SAAK,QAAQ;EACf;;;;AC1DI,SAAUO,QAA0F,MAASC,QAAmC;AACpJ,QAAM,EAAE,OAAO,SAAAC,SAAO,IAAK;AAC3B,UAAQA,UAAS;IACf,KAAK;AACH,aAAOC,YACL,OACAC,WAAU,IAAI,GACdH,UAAqCI,WAAU,OAAO;IAE1D;AACE,aAAOC,YACL,OACAF,WAAU,IAAI,GACbH,UAAQM,QAAO,OAAwC;EAE9D;AACF;AAYA,IAAMC,SAAQ,oBAAI,QAAO;AAEzB,SAASC,WAAW,KAAoB;AACtC,QAAMA,cAAYD,OAAM,IAAI,GAAG;AAC/B,MAAIC,eAAa,MAAM;AACrB,UAAMA,cAAY,oBAAI,IAAG;AACzB,IAAAD,OAAM,IAAI,KAAKC,WAAS;AACxB,WAAOA;EACT;AACA,SAAOA;AACT;AAEM,IAAOC,OAAP,MAAO,KAAG;EACL;EACA;EACA;EACA;EACA;;;;;;EAOT,YAAaC,UAAkBC,QAAc,WAAqC,OAAiB;AACjG,SAAK,OAAOA;AACZ,SAAK,UAAUD;AACf,SAAK,YAAY;AACjB,SAAK,QAAQ;AAIb,SAAK,GAAG,IAAI;EACd;;;;;;;EAQA,IAAI,QAAK;AACP,WAAO;EACT;;EAGA,IAAI,aAAU;AACZ,WAAO,KAAK,MAAM;EACpB;;EAGA,IAAI,aAAU;AACZ,WAAO,KAAK,MAAM;EACpB;EAEA,OAAI;AACF,YAAQ,KAAK,SAAS;MACpB,KAAK,GAAG;AACN,eAAO;MACT;MACA,KAAK,GAAG;AACN,cAAM,EAAE,MAAAC,QAAM,UAAS,IAAK;AAE5B,YAAIA,WAASC,cAAa;AACxB,gBAAM,IAAI,MAAM,0CAA0C;QAC5D;AAGA,YAAI,UAAU,SAASC,eAAc;AACnC,gBAAM,IAAI,MAAM,oDAAoD;QACtE;AAEA,eACE,KAAI,SACF,SAA6C;MAGnD;MACA,SAAS;AACP,cAAM,MACJ,+BAA+B,KAAK,OAAO,4CAA4C;MAE3F;IACF;EACF;EAEA,OAAI;AACF,YAAQ,KAAK,SAAS;MACpB,KAAK,GAAG;AACN,cAAM,EAAE,MAAAF,QAAM,QAAAG,QAAM,IAAK,KAAK;AAC9B,cAAM,YAAmBC,QAAOJ,QAAMG,OAAM;AAC5C,eACE,KAAI,SAAS,KAAK,MAAM,SAAS;MAErC;MACA,KAAK,GAAG;AACN,eAAO;MACT;MACA,SAAS;AACP,cAAM,MACJ,+BAA+B,KAAK,OAAO,4CAA4C;MAE3F;IACF;EACF;EAEA,OAAQ,OAAc;AACpB,WAAO,KAAI,OAAO,MAAM,KAAK;EAC/B;EAEA,OAAO,OAAsFE,OAA4C,OAAc;AACrJ,UAAM,UAAU;AAChB,WACE,WAAW,QACXA,MAAK,SAAS,QAAQ,QACtBA,MAAK,YAAY,QAAQ,WAClBC,SAAOD,MAAK,WAAW,QAAQ,SAAS;EAEnD;EAEA,SAAUE,QAAmC;AAC3C,WAAOC,QAAO,MAAMD,MAAI;EAC1B;EAEA,SAAM;AACJ,WAAO,EAAE,KAAKC,QAAO,IAAI,EAAC;EAC5B;EAEA,OAAI;AACF,WAAO;EACT;EAES,CAAC,OAAO,WAAW,IAAI;;EAIhC,CAAC,OAAO,IAAI,4BAA4B,CAAC,IAAC;AACxC,WAAO,OAAO,KAAK,SAAQ,CAAE;EAC/B;;;;;;;;;;;EAYA,OAAO,MAAwF,OAA+C;AAC5I,QAAI,SAAS,MAAM;AACjB,aAAO;IACT;AAEA,UAAMC,SAAQ;AACd,QAAIA,kBAAiB,MAAK;AAExB,aAAOA;IACT,WAAYA,OAAM,GAAG,KAAK,QAAQA,OAAM,GAAG,MAAMA,OAAM,SAAUA,OAAM,UAAUA,QAAO;AAMtF,YAAM,EAAE,SAAAV,UAAS,MAAAC,QAAM,WAAW,MAAK,IAAKS;AAC5C,aAAO,IAAI,KACTV,UACAC,QACA,WACA,SAASU,WAAUX,UAASC,QAAM,UAAU,KAAK,CAAC;IAEtD,WAAWS,OAAME,UAAS,MAAM,MAAM;AAIpC,YAAM,EAAE,SAAAZ,UAAS,WAAW,MAAAC,OAAI,IAAKS;AACrC,YAAMN,UAAgBS,SAAO,SAAS;AACtC,aAAO,KAAI,OAAOb,UAASC,QAAMG,OAAM;IACzC,OAAO;AAGL,aAAO;IACT;EACF;;;;;;EAOA,OAAO,OAAsFJ,UAAkBC,QAAcG,SAAgC;AAC3J,QAAI,OAAOH,WAAS,UAAU;AAC5B,YAAM,IAAI,MAAM,uCAAuC;IACzD;AAEA,QAAI,EAAEG,QAAO,iBAAiB,aAAa;AACzC,YAAM,IAAI,MAAM,gBAAgB;IAClC;AAEA,YAAQJ,UAAS;MACf,KAAK,GAAG;AACN,YAAIC,WAASC,cAAa;AACxB,gBAAM,IAAI,MACR,wCAAwCA,YAAW,kBAAkB;QAEzE,OAAO;AACL,iBAAO,IAAI,KAAIF,UAASC,QAAMG,SAAQA,QAAO,KAAK;QACpD;MACF;MACA,KAAK,GAAG;AACN,cAAM,QAAQO,WAAUX,UAASC,QAAMG,QAAO,KAAK;AACnD,eAAO,IAAI,KAAIJ,UAASC,QAAMG,SAAQ,KAAK;MAC7C;MACA,SAAS;AACP,cAAM,IAAI,MAAM,iBAAiB;MACnC;IACF;EACF;;;;EAKA,OAAO,SAAuBA,SAAgD;AAC5E,WAAO,KAAI,OAAO,GAAGF,cAAaE,OAAM;EAC1C;;;;;;;EAQA,OAAO,SAAyDH,QAAYG,SAAgC;AAC1G,WAAO,KAAI,OAAO,GAAGH,QAAMG,OAAM;EACnC;;;;;;;;EASA,OAAO,OAAoF,OAAuD;AAChJ,UAAM,CAAC,KAAK,SAAS,IAAI,KAAI,YAAY,KAAK;AAC9C,QAAI,UAAU,WAAW,GAAG;AAC1B,YAAM,IAAI,MAAM,kBAAkB;IACpC;AACA,WAAO;EACT;;;;;;;;;;EAWA,OAAO,YAA2E,OAAyC;AACzH,UAAM,QAAQ,KAAI,aAAa,KAAK;AACpC,UAAM,aAAa,MAAM,OAAO,MAAM;AACtC,UAAM,iBAAiBU,QACrB,MAAM,SAAS,YAAY,aAAa,MAAM,aAAa,CAAC;AAE9D,QAAI,eAAe,eAAe,MAAM,eAAe;AACrD,YAAM,IAAI,MAAM,kBAAkB;IACpC;AACA,UAAM,cAAc,eAAe,SACjC,MAAM,gBAAgB,MAAM,UAAU;AAExC,UAAMV,UAAS,IAAWW,QACxB,MAAM,eACN,MAAM,YACN,aACA,cAAc;AAEhB,UAAM,MACJ,MAAM,YAAY,IACd,KAAI,SAASX,OAA0C,IACvD,KAAI,SAAS,MAAM,OAAOA,OAAM;AACtC,WAAO,CAAC,KAAwB,MAAM,SAAS,MAAM,IAAI,CAAC;EAC5D;;;;;;;;;;EAWA,OAAO,aAA4E,cAAgD;AACjI,QAAI,SAAS;AACb,UAAM,OAAO,MAAa;AACxB,YAAM,CAAC,GAAGY,QAAM,IAAWH,SAAO,aAAa,SAAS,MAAM,CAAC;AAC/D,gBAAUG;AACV,aAAO;IACT;AAEA,QAAIhB,WAAU,KAAI;AAClB,QAAI,QAAQE;AACZ,QAAIF,aAAsB,IAAI;AAE5B,MAAAA,WAAU;AACV,eAAS;IACX,OAAO;AACL,cAAQ,KAAI;IACd;AAEA,QAAIA,aAAY,KAAKA,aAAY,GAAG;AAClC,YAAM,IAAI,WAAW,uBAAuBA,QAAO,EAAE;IACvD;AAEA,UAAM,aAAa;AACnB,UAAM,gBAAgB,KAAI;AAC1B,UAAM,aAAa,KAAI;AACvB,UAAM,OAAO,SAAS;AACtB,UAAM,gBAAgB,OAAO;AAE7B,WAAO,EAAE,SAAAA,UAAS,OAAO,eAAe,YAAY,eAAe,KAAI;EACzE;;;;;;;EAQA,OAAO,MAA0G,QAAkEQ,QAAmC;AACpN,UAAM,CAAC,QAAQ,KAAK,IAAIS,iBAAgB,QAAQT,MAAI;AAEpD,UAAM,MAAM,KAAI,OAAO,KAAK;AAE5B,QAAI,IAAI,YAAY,KAAK,OAAO,CAAC,MAAM,KAAK;AAC1C,YAAM,MAAM,wDAAwD;IACtE;AAGA,IAAAV,WAAU,GAAG,EAAE,IAAI,QAAQ,MAAM;AAEjC,WAAO;EACT;;AAGF,SAASmB,iBAAqH,QAAkET,QAAmC;AACjO,UAAQ,OAAO,CAAC,GAAG;;IAEjB,KAAK,KAAK;AACR,YAAM,UAAUA,UAAQU;AACxB,aAAO;QACLA,WAAU;QACV,QAAQ,OAAO,GAAGA,WAAU,MAAM,GAAG,MAAM,EAAE;;IAEjD;IACA,KAAKA,WAAU,QAAQ;AACrB,YAAM,UAAUV,UAAQU;AACxB,aAAO,CAACA,WAAU,QAAkB,QAAQ,OAAO,MAAM,CAAC;IAC5D;IACA,KAAKC,QAAO,QAAQ;AAClB,YAAM,UAAUX,UAAQW;AACxB,aAAO,CAACA,QAAO,QAAkB,QAAQ,OAAO,MAAM,CAAC;IACzD;IACA,KAAKC,QAAO,QAAQ;AAClB,YAAM,UAAUZ,UAAQY;AACxB,aAAO,CAACA,QAAO,QAAkB,QAAQ,OAAO,MAAM,CAAC;IACzD;IACA,SAAS;AACP,UAAIZ,UAAQ,MAAM;AAChB,cAAM,MACJ,yFAAyF;MAE7F;AACA,aAAO,CAAC,OAAO,CAAC,GAAaA,OAAK,OAAO,MAAM,CAAC;IAClD;EACF;AACF;AAEA,SAASa,YAAY,OAAmBxB,SAA4BW,QAA+B;AACjG,QAAM,EAAE,OAAM,IAAKA;AACnB,MAAI,WAAWU,WAAU,QAAQ;AAC/B,UAAM,MAAM,8BAA8BV,OAAK,IAAI,WAAW;EAChE;AAEA,QAAM,MAAMX,QAAM,IAAI,MAAM;AAC5B,MAAI,OAAO,MAAM;AACf,UAAMyB,OAAMd,OAAK,OAAO,KAAK,EAAE,MAAM,CAAC;AACtC,IAAAX,QAAM,IAAI,QAAQyB,IAAG;AACrB,WAAOA;EACT,OAAO;AACL,WAAO;EACT;AACF;AAEA,SAASC,YAAoC,OAAmB1B,SAA4BW,QAAkC;AAC5H,QAAM,EAAE,OAAM,IAAKA;AACnB,QAAM,MAAMX,QAAM,IAAI,MAAM;AAC5B,MAAI,OAAO,MAAM;AACf,UAAMyB,OAAMd,OAAK,OAAO,KAAK;AAC7B,IAAAX,QAAM,IAAI,QAAQyB,IAAG;AACrB,WAAOA;EACT,OAAO;AACL,WAAO;EACT;AACF;AAEA,IAAMpB,eAAc;AACpB,IAAMC,gBAAe;AAErB,SAASQ,WAAWX,UAAsBC,QAAc,WAAqB;AAC3E,QAAM,aAAoBuB,gBAAexB,QAAO;AAChD,QAAM,aAAa,aAAoBwB,gBAAevB,MAAI;AAC1D,QAAM,QAAQ,IAAI,WAAW,aAAa,UAAU,UAAU;AAC9D,EAAOwB,UAASzB,UAAS,OAAO,CAAC;AACjC,EAAOyB,UAASxB,QAAM,OAAO,UAAU;AACvC,QAAM,IAAI,WAAW,UAAU;AAC/B,SAAO;AACT;AAEA,IAAMW,aAAY,OAAO,IAAI,kBAAkB;;;AC3czC,SAAU,+BAA4B;AAC1C,SAAO;IACL,iBAAiB,CAAC,WAAW,qBAAqB,6BAA6B;IAC/E,aAAa,CAAC,SAAS,gBAAgB,UAAU,iBAAiB,OAAO,KAAK;;AAElF;;;ACOA,IAAMc,eAAc,WAAqB,QAAQ;;;ACdjD,IAAM,OAAO;AAEb,IAAM,UAAU,CAAAC,aAAWA,YAAWA,SAAQ,oBAC3C,mBAAmB,IAAI,SAAS,IAAI,gBACpC;AAEH,IAAM,KAAK;AAEX,IAAM,YAAY;AAElB,IAAM,KAAK;AAAA;AAAA,KAEN,SAAS,WAAW,SAAS;AAAA,KAC7B,SAAS,WAAW,EAAE,KAAK,SAAS;AAAA,KACpC,SAAS,YAAY,EAAE,QAAQ,SAAS;AAAA,KACxC,SAAS,eAAe,SAAS,UAAU,EAAE,QAAQ,SAAS;AAAA,KAC9D,SAAS,eAAe,SAAS,UAAU,EAAE,QAAQ,SAAS;AAAA,KAC9D,SAAS,eAAe,SAAS,UAAU,EAAE,QAAQ,SAAS;AAAA,KAC9D,SAAS,eAAe,SAAS,UAAU,EAAE,QAAQ,SAAS;AAAA,aACtD,SAAS,UAAU,EAAE,QAAQ,SAAS;AAAA;AAAA,EAEjD,QAAQ,gBAAgB,EAAE,EAAE,QAAQ,OAAO,EAAE,EAAE,KAAK;AAGtD,IAAM,WAAW,IAAI,OAAO,OAAO,EAAE,UAAU,EAAE,IAAI;AACrD,IAAM,UAAU,IAAI,OAAO,IAAI,EAAE,GAAG;AACpC,IAAM,UAAU,IAAI,OAAO,IAAI,EAAE,GAAG;AAEpC,IAAM,UAAU,CAAAA,aAAWA,YAAWA,SAAQ,QAC3C,WACA,IAAI,OAAO,MAAM,QAAQA,QAAO,CAAC,GAAG,EAAE,GAAG,QAAQA,QAAO,CAAC,QAAQ,QAAQA,QAAO,CAAC,GAAG,EAAE,GAAG,QAAQA,QAAO,CAAC,KAAK,GAAG;AAEpH,QAAQ,KAAK,CAAAA,aAAWA,YAAWA,SAAQ,QAAQ,UAAU,IAAI,OAAO,GAAG,QAAQA,QAAO,CAAC,GAAG,EAAE,GAAG,QAAQA,QAAO,CAAC,IAAI,GAAG;AAC1H,QAAQ,KAAK,CAAAA,aAAWA,YAAWA,SAAQ,QAAQ,UAAU,IAAI,OAAO,GAAG,QAAQA,QAAO,CAAC,GAAG,EAAE,GAAG,QAAQA,QAAO,CAAC,IAAI,GAAG;AAE1H,IAAO,mBAAQ;;;AClCA,SAAR,gBAAiC,WAAW;AAClD,QAAM,kBAAkB,IAAI,eAAe,UAAU,GAAG,UAAU;AAElE,SAAO,eAAe,iBAAiB,QAAQ;AAAA,IAC9C,OAAO,mBAAmB,UAAU,QAAQ,aAAa;AAAA,IACzD,cAAc;AAAA,EACf,CAAC;AAED,SAAO;AACR;AAEO,SAAS,iBAAiB;AAChC,SAAO;AACR;;;ACdA,IAAM,EAAC,UAAAC,UAAQ,IAAI,OAAO;AAEX,SAAR,SAA0BC,QAAO;AACvC,SAAOD,UAAS,KAAKC,MAAK,MAAM;AACjC;;;ACFA,IAAM,UAAU;AAAA,EACf,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,SAAS;AACV;AAEe,SAAR,aAA8B,QAAQC,WAAU,CAAC,GAAG;AAC1D,MAAI,CAAC,SAAS,MAAM,GAAG;AACtB,UAAM,IAAI,UAAU,4BAA4B;AAAA,EACjD;AAEA,QAAM,QAAQ,OAAO,KAAK,OAAO,EAAE,IAAI,WACrC,OAAOA,SAAQ,IAAI,MAAM,YAAYA,SAAQ,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,EACtF,EAAE,KAAK,EAAE;AAEV,QAAMC,gBAAe,IAAI,OAAOD,SAAQ,UAAU,OAAO,QAAQ,KAAK;AAEtE,EAAAC,cAAa,YAAY,OAAOD,SAAQ,cAAc,WACrDA,SAAQ,YACR,OAAO;AAER,SAAOC;AACR;;;ACfO,SAAS,QAAQ,OAAOC,SAAQ,EAAC,QAAO,IAAI,CAAC,GAAG;AACtD,MAAI;AACH,WAAO,gBAAgB,MAAM,aAAY,KAAK,EAAE,KAAKA,OAAM,GAAG,EAAC,QAAO,CAAC,EAAE;AAAA,EAC1E,SAAS,OAAO;AACf,QAAI,eAAe,KAAK,GAAG;AAC1B,aAAO;AAAA,IACR;AAEA,UAAM;AAAA,EACP;AACD;;;ACnBA,IAAM,gBAAgB;AACtB,IAAM,gBAAgB;AAEtB,IAAM,UAAU;AAAA,EACf,SAAS;AACV;AAUO,SAASC,QAAOC,SAAQ;AAC9B,MAAIA,QAAO,SAAS,eAAe;AAClC,WAAO;AAAA,EACR;AAEA,SAAO,QAAQ,iBAAQ,GAAG,EAAC,OAAO,KAAI,CAAC,GAAGA,SAAQ,OAAO;AAC1D;AAEO,SAASC,QAAOD,SAAQ;AAC9B,MAAIA,QAAO,SAAS,eAAe;AAClC,WAAO;AAAA,EACR;AAEA,SAAO,QAAQ,iBAAQ,GAAG,EAAC,OAAO,KAAI,CAAC,GAAGA,SAAQ,OAAO;AAC1D;;;ACWA,IAAM,UAAkC;EACtC,MAAM;EACN,OAAO;EACP,IAAI;EACJ,KAAK;;AAGP,IAAM,kBAAkB,CAAC,QAAQ,SAAS,MAAM,KAAK;AAyB/C,SAAU,eAAgB,QAAgB,MAA2B;AACzE,SAAO,QAAQ,CAAA;AACf,QAAM,iBAAiB,KAAK,kBAAkB;AAC9C,QAAM,EAAE,QAAQ,UAAU,MAAM,KAAI,IAAK,SAAS,MAAM;AACxD,QAAM,QAAQ;IACZ,iBAAiB,UAAU,cAAc;IACzC,aAAa,MAAM,MAAM;IACzB,eAAe,MAAM;;AAGvB,MAAI,QAAQ,MAAM;AAChB,UAAM,KAAK,aAAa,IAAI,CAAC;EAC/B;AAEA,QAAM,eAAe,MAAM,MACxB,OAAO,OAAK,QAAQ,CAAC,CAAC,EAEtB,OAAO,CAAC,GAAG,MAAM,EAAE,OAAO,CAAC,GAAG,CAAA,CAAE,EAChC,KAAK,GAAG;AAEX,SAAO,UAAU,YAAY;AAC/B;AAEA,SAAS,SAAU,QAAc;AAC/B,QAAM,CAAC,MAAM,IAAI,OAAO,MAAM,GAAG;AAGjC,MAAI,CAAC,gBAAgB,SAAS,MAAM,GAAG;AACrC,aAAS,SAAS,OAAO,UAAU,OAAO,MAAM;EAClD;AAGA,MAAI,EAAE,UAAU,UAAU,MAAM,UAAU,OAAM,IAAK,IAAI,IAAI,MAAM;AAEnE,MAAI,QAAQ,QAAQ,SAAS,IAAI;AAC/B,UAAM,eAAe,gBAAgB,MAAM;AAE3C,QAAI,gBAAgB,MAAM;AACxB,aAAO;IACT;AAGA,QAAI,gBAAgB,QAAQ,aAAa,SAAS;AAEhD,aAAO;IACT;EACF;AAEA,MAAI;AAEJ,MAAI,YAAY,QAAQ,aAAa,MAAM,aAAa,KAAK;AAC3D,QAAI,SAAS,WAAW,GAAG,GAAG;AAC5B,iBAAW,SAAS,UAAU,CAAC;IACjC;AAEA,WAAO;EACT;AAEA,MAAI,UAAU,QAAQ,WAAW,IAAI;AACnC,WAAO,QAAQ;AACf,YAAQ;EACV;AAEA,SAAO,EAAE,QAAQ,UAAU,MAAM,KAAI;AACvC;AAEA,SAAS,iBAAkB,UAAkB,gBAAsB;AACjE,MAAI,YAAY,QAAQ,aAAa,IAAI;AACvC,WAAO;EACT;AAEA,MAAIE,QAAO,QAAQ,GAAG;AACpB,WAAO,CAAC,OAAO,QAAQ;EACzB;AAEA,MAAIC,QAAO,QAAQ,GAAG;AACpB,WAAO,CAAC,OAAO,QAAQ;EACzB;AAIA,MAAI,SAAS,CAAC,MAAM,KAAK;AACvB,UAAM,UAAU,SAAS,UAAU,GAAG,SAAS,SAAS,CAAC;AACzD,QAAIA,QAAO,OAAO,GAAG;AACnB,aAAO,CAAC,OAAO,OAAO;IACxB;EACF;AAEA,SAAO,CAAC,gBAAgB,QAAQ;AAClC;AAEA,SAAS,aAAc,MAAc,QAAc;AACjD,MAAI,QAAQ,QAAQ,SAAS,IAAI;AAC/B,WAAO;EACT;AAEA,MAAI,WAAW,OAAO;AACpB,WAAO,CAAC,OAAO,IAAI;EACrB;AAEA,SAAO,CAAC,OAAO,IAAI;AACrB;AAEA,SAAS,eAAgB,QAAc;AACrC,MAAI,OAAO,MAAM,aAAa,KAAK,MAAM;AACvC,WAAO;EACT;AAEA,MAAI,WAAW,SAAS;AACtB,WAAO,CAAC,WAAW;EACrB;AAEA,MAAI,WAAW,OAAO;AACpB,WAAO,CAAC,SAAS;EACnB;AAEA,SAAO,CAAC,MAAM;AAChB;AAEA,SAAS,aAAc,MAAY;AACjC,MAAI,QAAQ,QAAQ,SAAS,IAAI;AAC/B,WAAO;EACT;AAEA,SAAO,CAAC,aAAa,mBAAmB,IAAI,CAAC;AAC/C;AAEA,SAAS,gBAAiB,UAAgB;AACxC,MAAI,YAAY,QAAQ,aAAa,MAAM,QAAQ,QAAQ,KAAK,MAAM;AACpE,WAAO;EACT;AAEA,SAAO,QAAQ,QAAQ;AACzB;;;AC7MA,IAAMC,QAAY;AAClB,IAAMC,QAAO;AAEb,IAAMC,WAA4CC;AAElD,SAASC,QAAQ,OAAiB;AAChC,SAAcC,QAAOL,OAAME,SAAO,KAAK,CAAC;AAC1C;AAEO,IAAMI,YAAW,EAAE,MAAAN,OAAM,MAAAC,OAAM,QAAAC,UAAQ,QAAAE,QAAM;;;ACH7C,IAAM,6BAA6B;;EAExC;;EAGA;;AAcF,IAAMG,oCAAmC;AAEzC,SAAS,WAAY,KAAiB;AACpC,QAAM,IAAI,SAAQ;AAElB,SAAO;IACL,IAAI,cAAcC,KAAI,SAASD,mCAAkCE,UAAS,OAAO,WAAqB,GAAG,CAAC,CAAC,CAAC;IAC5G,YAAY;MACV,eAAe,GAAG;;;AAGxB;AAEA,IAAM,oBAAN,MAAuB;EACJ;EACA;EAEjB,YAAa,OAA8B,CAAA,GAAE;AAC3C,SAAK,YAAY,KAAK,YAAY,4BAA4B,IAAI,SAAO,WAAW,GAAG,CAAC;AACxF,SAAK,UAAU,KAAK,WAAW;EACjC;EAEA,OAAQ,cAAe,KAA4CC,UAAoC;AACrG,YAAS,KAAK,UACV,KAAK,SAAS,SAAS,MAAM,KAAK,OAAM,IAAK,MAAM,IAAI,EAAE,IACzD,KAAK,UACP,IAAI,WAAS;MACb,GAAG;MACH,WAAW,CAAC,6BAA6B;MACzC;EACJ;;AAMI,SAAU,mBAAoB,OAA8B,CAAA,GAAE;AAClE,SAAO,IAAI,kBAAkB,IAAI;AACnC;;;AC9DA,IAAM,eAAN,MAAkB;EACC;EAEjB,YAAa,QAAc;AACzB,SAAK,SAAS;EAChB;EAEA,MAAM,QAAS,KAAUC,UAAwB;AAC/C,UAAM,KAAK,OAAO,eAAe,QAAQ,KAAKA,QAAO;EACvD;EAEA,MAAM,gBAAiB,KAAUA,UAAwB;AACvD,UAAM,KAAK,OAAO,eAAe,gBAAgB,KAAKA,QAAO;EAC/D;EAEA,OAAQ,cAAe,KAAUA,UAAwB;AACvD,WAAQ,KAAK,OAAO,eAAe,cAAc,KAAKA,QAAO;EAC/D;EAEA,MAAM,IAAK,KAAiBC,QAAmBD,UAAwB;AACrE,UAAM,KAAK,OAAO,eAAe,IAAI,KAAKC,QAAOD,QAAO;EAC1D;EAEA,MAAM,IAAK,KAAiBA,UAAwB;AAClD,WAAO,KAAK,OAAO,eAAe,IAAI,KAAKA,QAAO;EACpD;EAEA,MAAM,SAAUE,SAAgBF,UAAwB;AACtD,WAAO,KAAK,OAAO,YAAY,SAASE,SAAQF,QAAO;EACzD;EAEA,OAAQ,gBAAiB,KAAiBA,UAAwB;AAChE,WAAQ,KAAK,OAAO,YAAY,gBAAgB,KAAKA,QAAO;EAC9D;;AAGI,SAAU,cAAe,QAAc;AAC3C,SAAO,IAAI,aAAa,MAAM;AAChC;;;AC1CO,IAAMG,UAAQ,IAAI,WAAW,CAAC;AA0B/B,SAAUC,SAAQ,GAA6C;AACnE,MAAI,aAAa,cAAc,EAAE,YAAY,SAAS,cAAc;AAAE,WAAO;EAAE;AAC/E,MAAI,aAAa,aAAa;AAAE,WAAO,IAAI,WAAW,CAAC;EAAE;AACzD,MAAI,YAAY,OAAO,CAAC,GAAG;AACzB,WAAO,IAAI,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU;EAC5D;AACA,QAAM,IAAI,MAAM,mCAAmC;AACrD;;;ACvBA,SAASC,MAAM,UAAUC,OAAI;AAC3B,MAAI,SAAS,UAAU,KAAK;AAAE,UAAM,IAAI,UAAU,mBAAmB;EAAE;AACvE,MAAI,WAAW,IAAI,WAAW,GAAG;AACjC,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,aAAS,CAAC,IAAI;EAChB;AACA,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,QAAI,IAAI,SAAS,OAAO,CAAC;AACzB,QAAI,KAAK,EAAE,WAAW,CAAC;AACvB,QAAI,SAAS,EAAE,MAAM,KAAK;AAAE,YAAM,IAAI,UAAU,IAAI,eAAe;IAAE;AACrE,aAAS,EAAE,IAAI;EACjB;AACA,MAAI,OAAO,SAAS;AACpB,MAAI,SAAS,SAAS,OAAO,CAAC;AAC9B,MAAI,SAAS,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,GAAG;AAC1C,MAAI,UAAU,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI;AAI3C,WAASC,SAAQ,QAAM;AAErB,QAAI,kBAAkB;AAAY;aAAW,YAAY,OAAO,MAAM,GAAG;AACvE,eAAS,IAAI,WAAW,OAAO,QAAQ,OAAO,YAAY,OAAO,UAAU;IAC7E,WAAW,MAAM,QAAQ,MAAM,GAAG;AAChC,eAAS,WAAW,KAAK,MAAM;IACjC;AACA,QAAI,EAAE,kBAAkB,aAAa;AAAE,YAAM,IAAI,UAAU,qBAAqB;IAAE;AAClF,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO;IAAG;AAErC,QAAI,SAAS;AACb,QAAIC,WAAS;AACb,QAAI,SAAS;AACb,QAAI,OAAO,OAAO;AAClB,WAAO,WAAW,QAAQ,OAAO,MAAM,MAAM,GAAG;AAC9C;AACA;IACF;AAEA,QAAI,QAAS,OAAO,UAAU,UAAU,MAAO;AAC/C,QAAI,MAAM,IAAI,WAAW,IAAI;AAE7B,WAAO,WAAW,MAAM;AACtB,UAAI,QAAQ,OAAO,MAAM;AAEzB,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,MAAM,IAAI,GAAG,MAAO;AAC9B,YAAI,GAAG,IAAK,QAAQ,SAAU;AAC9B,gBAAS,QAAQ,SAAU;MAC7B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,IAAI,GAAG,MAAM,GAAG;AACrC;IACF;AAEA,QAAI,MAAM,OAAO,OAAO,MAAM;AAC9B,WAAO,MAAM,MAAM,EAAE,KAAK;AAAE,aAAO,SAAS,OAAO,IAAI,GAAG,CAAC;IAAG;AAC9D,WAAO;EACT;AAIA,WAAS,aAAc,QAAM;AAC3B,QAAI,OAAO,WAAW,UAAU;AAAE,YAAM,IAAI,UAAU,iBAAiB;IAAE;AACzE,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO,IAAI,WAAU;IAAG;AACnD,QAAI,MAAM;AAEV,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,SAAS;AACb,QAAIA,WAAS;AACb,WAAO,OAAO,GAAG,MAAM,QAAQ;AAC7B;AACA;IACF;AAEA,QAAI,QAAU,OAAO,SAAS,OAAO,SAAU,MAAO;AACtD,QAAI,OAAO,IAAI,WAAW,IAAI;AAE9B,WAAO,OAAO,GAAG,GAAG;AAElB,UAAI,QAAQ,SAAS,OAAO,WAAW,GAAG,CAAC;AAE3C,UAAI,UAAU,KAAK;AAAE;MAAO;AAC5B,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,OAAO,KAAK,GAAG,MAAO;AAChC,aAAK,GAAG,IAAK,QAAQ,QAAS;AAC9B,gBAAS,QAAQ,QAAS;MAC5B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,KAAK,GAAG,MAAM,GAAG;AACtC;IACF;AACA,QAAI,MAAM,IAAI,WAAW,UAAU,OAAO,IAAI;AAC9C,QAAIE,KAAI;AACR,WAAO,QAAQ,MAAM;AACnB,UAAIA,IAAG,IAAI,KAAK,KAAK;IACvB;AACA,WAAO;EACT;AAIA,WAASC,SAAQC,SAAM;AACrB,QAAI,SAAS,aAAaA,OAAM;AAChC,QAAI,QAAQ;AAAE,aAAO;IAAO;AAC5B,UAAM,IAAI,MAAM,OAAON,KAAI,YAAY;EACzC;AACA,SAAO;IACL,QAAQC;IACR;IACA,QAAQI;;AAEZ;AACA,IAAIE,OAAMR;AAEV,IAAIS,mCAAkCD;AAEtC,IAAAE,mBAAeD;;;ACjIf,IAAME,YAAN,MAAa;EACF;EACA;EACA;EAET,YAAaC,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;EACpB;EAEA,OAAQ,OAAiB;AACvB,QAAI,iBAAiB,YAAY;AAC/B,aAAO,GAAG,KAAK,MAAM,GAAG,KAAK,WAAW,KAAK,CAAC;IAChD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;;AAQF,IAAMC,YAAN,MAAa;EACF;EACA;EACA;EACQ;EAEjB,YAAaD,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,UAAM,kBAAkB,OAAO,YAAY,CAAC;AAE5C,QAAI,oBAAoB,QAAW;AACjC,YAAM,IAAI,MAAM,0BAA0B;IAC5C;AACA,SAAK,kBAAkB;AACvB,SAAK,aAAa;EACpB;EAEA,OAAQ,MAAY;AAClB,QAAI,OAAO,SAAS,UAAU;AAC5B,UAAI,KAAK,YAAY,CAAC,MAAM,KAAK,iBAAiB;AAChD,cAAM,MAAM,qCAAqC,KAAK,UAAU,IAAI,CAAC,KAAK,KAAK,IAAI,+CAA+C,KAAK,MAAM,EAAE;MACjJ;AACA,aAAO,KAAK,WAAW,KAAK,MAAM,KAAK,OAAO,MAAM,CAAC;IACvD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;EAEA,GAAgC,SAAmE;AACjG,WAAOE,KAAG,MAAM,OAAO;EACzB;;AAKF,IAAMC,oBAAN,MAAqB;EACV;EAET,YAAa,UAA0B;AACrC,SAAK,WAAW;EAClB;EAEA,GAAiC,SAAmE;AAClG,WAAOD,KAAG,MAAM,OAAO;EACzB;EAEA,OAAQ,OAAa;AACnB,UAAM,SAAS,MAAM,CAAC;AACtB,UAAM,UAAU,KAAK,SAAS,MAAM;AACpC,QAAI,WAAW,MAAM;AACnB,aAAO,QAAQ,OAAO,KAAK;IAC7B,OAAO;AACL,YAAM,WAAW,qCAAqC,KAAK,UAAU,KAAK,CAAC,+BAA+B,OAAO,KAAK,KAAK,QAAQ,CAAC,gBAAgB;IACtJ;EACF;;AAGI,SAAUA,KAAyC,MAA+C,OAA8C;AACpJ,SAAO,IAAIC,kBAAgB;IACzB,GAAI,KAAK,YAAY,EAAE,CAAE,KAA2B,MAAM,GAAG,KAAI;IACjE,GAAI,MAAM,YAAY,EAAE,CAAE,MAA4B,MAAM,GAAG,MAAK;GAClD;AACtB;AAEM,IAAOC,UAAP,MAAY;EACP;EACA;EACA;EACA;EACA;EACA;EAET,YAAaJ,OAAY,QAAgB,YAAsB,YAAoB;AACjF,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,UAAU,IAAID,UAAQC,OAAM,QAAQ,UAAU;AACnD,SAAK,UAAU,IAAIC,UAAQD,OAAM,QAAQ,UAAU;EACrD;EAEA,OAAQ,OAAiB;AACvB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;EAEA,OAAQ,OAAa;AACnB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;;AAGI,SAAUK,OAAmD,EAAE,MAAAL,OAAM,QAAQ,QAAAM,UAAQ,QAAAC,SAAM,GAAsE;AACrK,SAAO,IAAIH,QAAMJ,OAAM,QAAQM,UAAQC,QAAM;AAC/C;AAEM,SAAUC,OAAoD,EAAE,MAAAR,OAAM,QAAQ,UAAAS,UAAQ,GAAoD;AAC9I,QAAM,EAAE,QAAAH,UAAQ,QAAAC,SAAM,IAAKG,iBAAMD,WAAUT,KAAI;AAC/C,SAAOK,OAAK;IACV;IACA,MAAAL;IACA,QAAAM;IACA,QAAQ,CAAC,SAA6BK,SAAOJ,SAAO,IAAI,CAAC;GAC1D;AACH;AAEA,SAASA,SAAQK,SAAgB,aAAqC,aAAqBZ,OAAY;AAErG,MAAI,MAAMY,QAAO;AACjB,SAAOA,QAAO,MAAM,CAAC,MAAM,KAAK;AAC9B,MAAE;EACJ;AAGA,QAAM,MAAM,IAAI,WAAY,MAAM,cAAc,IAAK,CAAC;AAGtD,MAAI,OAAO;AACX,MAAI,SAAS;AACb,MAAI,UAAU;AACd,WAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAE5B,UAAMC,SAAQ,YAAYD,QAAO,CAAC,CAAC;AACnC,QAAIC,WAAU,QAAW;AACvB,YAAM,IAAI,YAAY,OAAOb,KAAI,YAAY;IAC/C;AAGA,aAAU,UAAU,cAAea;AACnC,YAAQ;AAGR,QAAI,QAAQ,GAAG;AACb,cAAQ;AACR,UAAI,SAAS,IAAI,MAAQ,UAAU;IACrC;EACF;AAGA,MAAI,QAAQ,gBAAgB,MAAQ,UAAW,IAAI,UAAY,GAAG;AAChE,UAAM,IAAI,YAAY,wBAAwB;EAChD;AAEA,SAAO;AACT;AAEA,SAASP,SAAQ,MAAkBG,WAAkB,aAAmB;AACtE,QAAM,MAAMA,UAASA,UAAS,SAAS,CAAC,MAAM;AAC9C,QAAM,QAAQ,KAAK,eAAe;AAClC,MAAI,MAAM;AAEV,MAAI,OAAO;AACX,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAEpC,aAAU,UAAU,IAAK,KAAK,CAAC;AAC/B,YAAQ;AAGR,WAAO,OAAO,aAAa;AACzB,cAAQ;AACR,aAAOA,UAAS,OAAQ,UAAU,IAAK;IACzC;EACF;AAGA,MAAI,SAAS,GAAG;AACd,WAAOA,UAAS,OAAQ,UAAW,cAAc,IAAM;EACzD;AAGA,MAAI,KAAK;AACP,YAAS,IAAI,SAAS,cAAe,OAAO,GAAG;AAC7C,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEA,SAASK,mBAAmBL,WAAgB;AAE1C,QAAM,cAAsC,CAAA;AAC5C,WAAS,IAAI,GAAG,IAAIA,UAAS,QAAQ,EAAE,GAAG;AACxC,gBAAYA,UAAS,CAAC,CAAC,IAAI;EAC7B;AACA,SAAO;AACT;AAKM,SAAUM,SAAsD,EAAE,MAAAf,OAAM,QAAQ,aAAa,UAAAS,UAAQ,GAAyE;AAClL,QAAM,cAAcK,mBAAkBL,SAAQ;AAC9C,SAAOJ,OAAK;IACV;IACA,MAAAL;IACA,OAAQ,OAAiB;AACvB,aAAOM,SAAO,OAAOG,WAAU,WAAW;IAC5C;IACA,OAAQ,OAAa;AACnB,aAAOF,SAAO,OAAO,aAAa,aAAaP,KAAI;IACrD;GACD;AACH;;;AC9OO,IAAMgB,aAAYC,OAAM;EAC7B,MAAM;EACN,QAAQ;EACR,UAAU;CACX;AAEM,IAAMC,gBAAeD,OAAM;EAChC,MAAM;EACN,QAAQ;EACR,UAAU;CACX;;;ACXD,IAAIE,YAAWC;AAEf,IAAIC,OAAM;AAAV,IACIC,QAAO;AADX,IAEIC,UAAS,CAACD;AAFd,IAGIE,OAAM,KAAK,IAAI,GAAG,EAAE;AAOxB,SAASJ,SAAO,KAAK,KAAK,QAAM;AAC9B,QAAM,OAAO,CAAA;AACb,WAAS,UAAU;AACnB,MAAI,YAAY;AAEhB,SAAM,OAAOI,MAAK;AAChB,QAAI,QAAQ,IAAK,MAAM,MAAQH;AAC/B,WAAO;EACT;AACA,SAAM,MAAME,SAAQ;AAClB,QAAI,QAAQ,IAAK,MAAM,MAAQF;AAC/B,aAAS;EACX;AACA,MAAI,MAAM,IAAI,MAAM;AAGpB,EAAAD,SAAO,QAAQ,SAAS,YAAY;AAEpC,SAAO;AACT;AAEA,IAAIK,WAASC;AAEb,IAAIC,SAAQ;AAAZ,IACIC,UAAS;AAMb,SAASF,MAAK,KAAK,QAAM;AACvB,MAAI,MAAS,GACT,SAAS,UAAU,GACnB,QAAS,GACT,UAAU,QACV,GACA,IAAI,IAAI;AAEZ,KAAG;AACD,QAAI,WAAW,GAAG;AAEhB,MAAAA,MAAK,QAAQ;AACb,YAAM,IAAI,WAAW,yBAAyB;IAChD;AACA,QAAI,IAAI,SAAS;AACjB,WAAO,QAAQ,MACV,IAAIE,YAAW,SACf,IAAIA,WAAU,KAAK,IAAI,GAAG,KAAK;AACpC,aAAS;EACX,SAAS,KAAKD;AAGd,EAAAD,MAAK,QAAQ,UAAU;AAEvB,SAAO;AACT;AAEA,IAAIG,MAAK,KAAK,IAAI,GAAI,CAAC;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AAEvB,IAAIC,UAAS,SAAgCC,QAAK;AAChD,SACEA,SAAQV,MAAK,IACbU,SAAQT,MAAK,IACbS,SAAQR,MAAK,IACbQ,SAAQP,MAAK,IACbO,SAAQN,MAAK,IACbM,SAAQL,MAAK,IACbK,SAAQJ,MAAK,IACbI,SAAQH,MAAK,IACbG,SAAQF,MAAK,IACA;AAEjB;AAEA,IAAIG,UAAS;EACT,QAAQrB;EACR,QAAQM;EACR,gBAAgBa;;AAGpB,IAAIG,gBAAeD;AAEnB,IAAAE,kBAAeD;;;AChGT,SAAUE,UAAU,KAAa,QAAoB,SAAS,GAAC;AACnE,EAAAC,gBAAO,OAAO,KAAK,QAAQ,MAAM;AACjC,SAAO;AACT;AAEM,SAAUC,gBAAgB,KAAW;AACzC,SAAOD,gBAAO,eAAe,GAAG;AAClC;;;ACPM,SAAUE,QAA8BC,QAAYC,SAAkB;AAC1E,QAAM,OAAOA,QAAO;AACpB,QAAM,aAAoBC,gBAAeF,MAAI;AAC7C,QAAM,eAAe,aAAoBE,gBAAe,IAAI;AAE5D,QAAM,QAAQ,IAAI,WAAW,eAAe,IAAI;AAChD,EAAOC,UAASH,QAAM,OAAO,CAAC;AAC9B,EAAOG,UAAS,MAAM,OAAO,UAAU;AACvC,QAAM,IAAIF,SAAQ,YAAY;AAE9B,SAAO,IAAIG,QAAOJ,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAqCM,IAAOI,UAAP,MAAa;EACR;EACA;EACA;EACA;;;;EAKT,YAAaC,QAAY,MAAYC,SAAoB,OAAiB;AACxE,SAAK,OAAOD;AACZ,SAAK,OAAO;AACZ,SAAK,SAASC;AACd,SAAK,QAAQ;EACf;;;;AChEI,SAAUC,OAAiD,EAAE,MAAAC,OAAM,MAAAC,QAAM,QAAAC,SAAM,GAA4E;AAC/J,SAAO,IAAIC,QAAOH,OAAMC,QAAMC,QAAM;AACtC;AAMM,IAAOC,UAAP,MAAa;EACR;EACA;EACA;EAET,YAAaH,OAAYC,QAAYC,UAAgD;AACnF,SAAK,OAAOF;AACZ,SAAK,OAAOC;AACZ,SAAK,SAASC;EAChB;EAEA,OAAQ,OAAiB;AACvB,QAAI,iBAAiB,YAAY;AAC/B,YAAM,SAAS,KAAK,OAAO,KAAK;AAChC,aAAO,kBAAkB,aACdE,QAAO,KAAK,MAAM,MAAM,IAE/B,OAAO,KAAK,CAAAC,YAAiBD,QAAO,KAAK,MAAMC,OAAM,CAAC;IAC5D,OAAO;AACL,YAAM,MAAM,mCAAmC;IAEjD;EACF;;;;AC/BF,SAASC,KAAKC,OAAyB;AACrC,SAAO,OAAM,SAAQ,IAAI,WAAW,MAAM,OAAO,OAAO,OAAOA,OAAM,IAAI,CAAC;AAC5E;AAEO,IAAMC,UAASC,OAAK;EACzB,MAAM;EACN,MAAM;EACN,QAAQH,KAAI,SAAS;CACtB;AAEM,IAAMI,UAASD,OAAK;EACzB,MAAM;EACN,MAAM;EACN,QAAQH,KAAI,SAAS;CACtB;;;ACTD,+BAAqB;;;ACTrB;;gBAAAK;EAAA;;AAeO,IAAM,0BAA0B;EACrC,KAAK;EACL,KAAK;;EAEL,GAAG;EACH,SAAS,CAAC,WAAW,SAAS;EAC9B,KAAK;;AAKD,SAAUC,QAAQ,MAA6B;AACnD,QAAM,YAAY,MAAM,aAAa;AACrC,MAAI,YAAY,MAAM,aAAa;AACnC,QAAM,cAAc,MAAM,eAAe;AACzC,QAAMC,UAAS,MAAM,UAAU;AAC/B,QAAM,aAAa,MAAM,cAAc;AACvC,QAAM,aAAa,MAAM,cAAc;AAEvC,QAAMC,UAAS,kBAAU,IAAG;AAC5B,eAAa;AAMb,iBAAe,QAAS,MAAkB,UAA6B;AACrE,UAAM,OAAOA,QAAO,gBAAgB,IAAI,WAAW,UAAU,CAAC;AAC9D,UAAM,QAAQA,QAAO,gBAAgB,IAAI,WAAW,WAAW,CAAC;AAChE,UAAM,SAAS,EAAE,MAAM,WAAW,IAAI,MAAK;AAE3C,QAAI,OAAO,aAAa,UAAU;AAChC,iBAAW,WAAW,QAAQ;IAChC;AAEA,QAAI;AACJ,QAAI,SAAS,WAAW,GAAG;AACzB,kBAAY,MAAMA,QAAO,OAAO,UAAU,OAAO,yBAAyB,EAAE,MAAM,UAAS,GAAI,MAAM,CAAC,SAAS,CAAC;AAChH,UAAI;AACF,cAAM,eAAe,EAAE,MAAM,UAAU,MAAM,YAAY,MAAM,EAAE,MAAMD,QAAM,EAAE;AAC/E,cAAM,8BAA8B,MAAMC,QAAO,OAAO,UAAU,OAAO,UAAU,EAAE,MAAM,SAAQ,GAAI,OAAO,CAAC,WAAW,CAAC;AAC3H,oBAAY,MAAMA,QAAO,OAAO,UAAU,cAAc,6BAA6B,EAAE,MAAM,WAAW,QAAQ,UAAS,GAAI,MAAM,CAAC,SAAS,CAAC;MAChJ,QAAQ;AACN,oBAAY,MAAMA,QAAO,OAAO,UAAU,OAAO,yBAAyB,EAAE,MAAM,UAAS,GAAI,MAAM,CAAC,SAAS,CAAC;MAClH;IACF,OAAO;AAEL,YAAM,eAAe,EAAE,MAAM,UAAU,MAAM,YAAY,MAAM,EAAE,MAAMD,QAAM,EAAE;AAC/E,YAAM,SAAS,MAAMC,QAAO,OAAO,UAAU,OAAO,UAAU,EAAE,MAAM,SAAQ,GAAI,OAAO,CAAC,WAAW,CAAC;AACtG,kBAAY,MAAMA,QAAO,OAAO,UAAU,cAAc,QAAQ,EAAE,MAAM,WAAW,QAAQ,UAAS,GAAI,MAAM,CAAC,SAAS,CAAC;IAC3H;AAGA,UAAM,aAAa,MAAMA,QAAO,OAAO,QAAQ,QAAQ,WAAW,IAAI;AACtE,WAAO,OAAO,CAAC,MAAM,OAAO,IAAI,IAAI,WAAW,UAAU,CAAC,CAAC;EAC7D;AAQA,iBAAe,QAAS,MAAkB,UAA6B;AACrE,UAAM,OAAO,KAAK,SAAS,GAAG,UAAU;AACxC,UAAM,QAAQ,KAAK,SAAS,YAAY,aAAa,WAAW;AAChE,UAAM,aAAa,KAAK,SAAS,aAAa,WAAW;AACzD,UAAM,SAAS,EAAE,MAAM,WAAW,IAAI,MAAK;AAE3C,QAAI,OAAO,aAAa,UAAU;AAChC,iBAAW,WAAW,QAAQ;IAChC;AAEA,QAAI;AACJ,QAAI,SAAS,WAAW,GAAG;AACzB,UAAI;AACF,cAAM,eAAe,EAAE,MAAM,UAAU,MAAM,YAAY,MAAM,EAAE,MAAMD,QAAM,EAAE;AAC/E,cAAM,8BAA8B,MAAMC,QAAO,OAAO,UAAU,OAAO,UAAU,EAAE,MAAM,SAAQ,GAAI,OAAO,CAAC,WAAW,CAAC;AAC3H,oBAAY,MAAMA,QAAO,OAAO,UAAU,cAAc,6BAA6B,EAAE,MAAM,WAAW,QAAQ,UAAS,GAAI,MAAM,CAAC,SAAS,CAAC;MAChJ,QAAQ;AACN,oBAAY,MAAMA,QAAO,OAAO,UAAU,OAAO,yBAAyB,EAAE,MAAM,UAAS,GAAI,MAAM,CAAC,SAAS,CAAC;MAClH;IACF,OAAO;AAEL,YAAM,eAAe,EAAE,MAAM,UAAU,MAAM,YAAY,MAAM,EAAE,MAAMD,QAAM,EAAE;AAC/E,YAAM,SAAS,MAAMC,QAAO,OAAO,UAAU,OAAO,UAAU,EAAE,MAAM,SAAQ,GAAI,OAAO,CAAC,WAAW,CAAC;AACtG,kBAAY,MAAMA,QAAO,OAAO,UAAU,cAAc,QAAQ,EAAE,MAAM,WAAW,QAAQ,UAAS,GAAI,MAAM,CAAC,SAAS,CAAC;IAC3H;AAGA,UAAM,YAAY,MAAMA,QAAO,OAAO,QAAQ,QAAQ,WAAW,UAAU;AAC3E,WAAO,IAAI,WAAW,SAAS;EACjC;AAEA,QAAM,SAAoB;IACxB;IACA;;AAGF,SAAO;AACT;;;ACnHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACyBA,IAAM,oBAAoB;AAC1B,IAAM,wBAAN,MAAM,uBAAsB;AAAA,EACxB,OAAO,cAAc,MAAM;AACvB,WAAO,OAAO,UAAU,SAAS,KAAK,IAAI,MAAM;AAAA,EACpD;AAAA,EACA,OAAO,cAAc,MAAM;AACvB,QAAI,KAAK,cAAc,IAAI,GAAG;AAC1B,aAAO;AAAA,IACX;AACA,QAAI,KAAK,eAAe,KAAK,OAAO,YAAY;AAC5C,aAAO,KAAK;AAAA,IAChB;AACA,QAAI,KAAK,eAAe,KAAK,KAAK,eAAe,KAAK,OAAO,YAAY;AACrE,aAAO,KAAK;AAAA,IAChB;AACA,WAAO,KAAK,aAAa,KAAK,MAAM,EAC/B,MAAM,KAAK,YAAY,KAAK,aAAa,KAAK,UAAU,EACxD;AAAA,EACT;AAAA,EACA,OAAO,aAAa,MAAM;AACtB,WAAO,KAAK,OAAO,MAAM,UAAU;AAAA,EACvC;AAAA,EACA,OAAO,OAAO,MAAM,MAAM;AACtB,QAAI,KAAK,gBAAgB,MAAM;AAC3B,aAAO;AAAA,IACX;AACA,QAAI,KAAK,cAAc,IAAI,GAAG;AAC1B,aAAO,IAAI,KAAK,IAAI;AAAA,IACxB;AACA,QAAI,KAAK,kBAAkB,IAAI,GAAG;AAC9B,aAAO,IAAI,KAAK,KAAK,QAAQ,KAAK,YAAY,KAAK,UAAU;AAAA,IACjE;AACA,UAAM,IAAI,UAAU,sEAAsE;AAAA,EAC9F;AAAA,EACA,OAAO,eAAe,MAAM;AACxB,WAAO,KAAK,kBAAkB,IAAI,KAC3B,KAAK,cAAc,IAAI;AAAA,EAClC;AAAA,EACA,OAAO,kBAAkB,MAAM;AAC3B,WAAO,YAAY,OAAO,IAAI,KACtB,QAAQ,KAAK,cAAc,KAAK,MAAM;AAAA,EAClD;AAAA,EACA,OAAO,QAAQ,GAAG,GAAG;AACjB,UAAM,QAAQ,uBAAsB,aAAa,CAAC;AAClD,UAAM,QAAQ,uBAAsB,aAAa,CAAC;AAClD,QAAI,MAAM,WAAW,MAAM,YAAY;AACnC,aAAO;AAAA,IACX;AACA,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,UAAI,MAAM,CAAC,MAAM,MAAM,CAAC,GAAG;AACvB,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,UAAU,MAAM;AACnB,QAAI;AACJ,QAAI,MAAM,QAAQ,KAAK,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,aAAa,WAAW;AAC1D,gBAAU,KAAK,CAAC;AAAA,IACpB,WACS,MAAM,QAAQ,KAAK,CAAC,CAAC,KAAK,KAAK,CAAC,aAAa,UAAU;AAC5D,gBAAU,KAAK,CAAC;AAAA,IACpB,OACK;AACD,UAAI,KAAK,KAAK,SAAS,CAAC,aAAa,UAAU;AAC3C,kBAAU,KAAK,MAAM,GAAG,KAAK,SAAS,CAAC;AAAA,MAC3C,OACK;AACD,kBAAU;AAAA,MACd;AAAA,IACJ;AACA,QAAI,OAAO;AACX,eAAW,UAAU,SAAS;AAC1B,cAAQ,OAAO;AAAA,IACnB;AACA,UAAM,MAAM,IAAI,WAAW,IAAI;AAC/B,QAAI,SAAS;AACb,eAAW,UAAU,SAAS;AAC1B,YAAM,OAAO,KAAK,aAAa,MAAM;AACrC,UAAI,IAAI,MAAM,MAAM;AACpB,gBAAU,KAAK;AAAA,IACnB;AACA,QAAI,KAAK,KAAK,SAAS,CAAC,aAAa,UAAU;AAC3C,aAAO,KAAK,OAAO,KAAK,KAAK,KAAK,SAAS,CAAC,CAAC;AAAA,IACjD;AACA,WAAO,IAAI;AAAA,EACf;AACJ;AAEA,IAAM,cAAc;AACpB,IAAM,YAAY;AAClB,IAAM,eAAe;AACrB,IAAM,kBAAkB;AACxB,IAAM,gBAAN,MAAoB;AAAA,EAChB,OAAO,WAAW,MAAM;AACpB,UAAM,IAAI,SAAS,mBAAmB,IAAI,CAAC;AAC3C,UAAM,YAAY,IAAI,WAAW,EAAE,MAAM;AACzC,aAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AAC/B,gBAAU,CAAC,IAAI,EAAE,WAAW,CAAC;AAAA,IACjC;AACA,WAAO,UAAU;AAAA,EACrB;AAAA,EACA,OAAO,SAAS,QAAQ;AACpB,UAAM,MAAM,sBAAsB,aAAa,MAAM;AACrD,QAAI,gBAAgB;AACpB,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,uBAAiB,OAAO,aAAa,IAAI,CAAC,CAAC;AAAA,IAC/C;AACA,UAAM,gBAAgB,mBAAmB,OAAO,aAAa,CAAC;AAC9D,WAAO;AAAA,EACX;AACJ;AACA,IAAM,iBAAN,MAAqB;AAAA,EACjB,OAAO,SAAS,QAAQ,eAAe,OAAO;AAC1C,UAAM,cAAc,sBAAsB,cAAc,MAAM;AAC9D,UAAM,WAAW,IAAI,SAAS,WAAW;AACzC,QAAI,MAAM;AACV,aAAS,IAAI,GAAG,IAAI,YAAY,YAAY,KAAK,GAAG;AAChD,YAAMC,SAAO,SAAS,UAAU,GAAG,YAAY;AAC/C,aAAO,OAAO,aAAaA,MAAI;AAAA,IACnC;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,WAAW,MAAM,eAAe,OAAO;AAC1C,UAAM,MAAM,IAAI,YAAY,KAAK,SAAS,CAAC;AAC3C,UAAM,WAAW,IAAI,SAAS,GAAG;AACjC,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,eAAS,UAAU,IAAI,GAAG,KAAK,WAAW,CAAC,GAAG,YAAY;AAAA,IAC9D;AACA,WAAO;AAAA,EACX;AACJ;AACA,IAAM,UAAN,MAAM,SAAQ;AAAA,EACV,OAAO,MAAM,MAAM;AACf,WAAO,OAAO,SAAS,eAChB,UAAU,KAAK,IAAI;AAAA,EAC9B;AAAA,EACA,OAAO,SAAS,MAAM;AAClB,WAAO,OAAO,SAAS,eAChB,aAAa,KAAK,IAAI;AAAA,EACjC;AAAA,EACA,OAAO,YAAY,MAAM;AACrB,WAAO,OAAO,SAAS,eAChB,gBAAgB,KAAK,IAAI;AAAA,EACpC;AAAA,EACA,OAAO,SAAS,QAAQ,MAAM,QAAQ;AAClC,UAAM,MAAM,sBAAsB,aAAa,MAAM;AACrD,YAAQ,IAAI,YAAY,GAAG;AAAA,MACvB,KAAK;AACD,eAAO,KAAK,aAAa,GAAG;AAAA,MAChC,KAAK;AACD,eAAO,KAAK,SAAS,GAAG;AAAA,MAC5B,KAAK;AACD,eAAO,KAAK,MAAM,GAAG;AAAA,MACzB,KAAK;AACD,eAAO,KAAK,SAAS,GAAG;AAAA,MAC5B,KAAK;AACD,eAAO,KAAK,YAAY,GAAG;AAAA,MAC/B,KAAK;AACD,eAAO,eAAe,SAAS,KAAK,IAAI;AAAA,MAC5C,KAAK;AAAA,MACL,KAAK;AACD,eAAO,eAAe,SAAS,GAAG;AAAA,MACtC;AACI,cAAM,IAAI,MAAM,6BAA6B,GAAG,GAAG;AAAA,IAC3D;AAAA,EACJ;AAAA,EACA,OAAO,WAAW,KAAK,MAAM,QAAQ;AACjC,QAAI,CAAC,KAAK;AACN,aAAO,IAAI,YAAY,CAAC;AAAA,IAC5B;AACA,YAAQ,IAAI,YAAY,GAAG;AAAA,MACvB,KAAK;AACD,eAAO,KAAK,eAAe,GAAG;AAAA,MAClC,KAAK;AACD,eAAO,KAAK,WAAW,GAAG;AAAA,MAC9B,KAAK;AACD,eAAO,KAAK,QAAQ,GAAG;AAAA,MAC3B,KAAK;AACD,eAAO,KAAK,WAAW,GAAG;AAAA,MAC9B,KAAK;AACD,eAAO,KAAK,cAAc,GAAG;AAAA,MACjC,KAAK;AACD,eAAO,eAAe,WAAW,KAAK,IAAI;AAAA,MAC9C,KAAK;AAAA,MACL,KAAK;AACD,eAAO,eAAe,WAAW,GAAG;AAAA,MACxC;AACI,cAAM,IAAI,MAAM,6BAA6B,GAAG,GAAG;AAAA,IAC3D;AAAA,EACJ;AAAA,EACA,OAAO,SAAS,QAAQ;AACpB,UAAM,MAAM,sBAAsB,aAAa,MAAM;AACrD,QAAI,OAAO,SAAS,aAAa;AAC7B,YAAM,SAAS,KAAK,SAAS,KAAK,QAAQ;AAC1C,aAAO,KAAK,MAAM;AAAA,IACtB,OACK;AACD,aAAO,OAAO,KAAK,GAAG,EAAE,SAAS,QAAQ;AAAA,IAC7C;AAAA,EACJ;AAAA,EACA,OAAO,WAAWC,SAAQ;AACtB,UAAM,YAAY,KAAK,aAAaA,OAAM;AAC1C,QAAI,CAAC,WAAW;AACZ,aAAO,IAAI,YAAY,CAAC;AAAA,IAC5B;AACA,QAAI,CAAC,SAAQ,SAAS,SAAS,GAAG;AAC9B,YAAM,IAAI,UAAU,6CAA6C;AAAA,IACrE;AACA,QAAI,OAAO,SAAS,aAAa;AAC7B,aAAO,KAAK,WAAW,KAAK,SAAS,CAAC;AAAA,IAC1C,OACK;AACD,aAAO,IAAI,WAAW,OAAO,KAAK,WAAW,QAAQ,CAAC,EAAE;AAAA,IAC5D;AAAA,EACJ;AAAA,EACA,OAAO,cAAcC,YAAW;AAC5B,UAAM,YAAY,KAAK,aAAaA,UAAS;AAC7C,QAAI,CAAC,WAAW;AACZ,aAAO,IAAI,YAAY,CAAC;AAAA,IAC5B;AACA,QAAI,CAAC,SAAQ,YAAY,SAAS,GAAG;AACjC,YAAM,IAAI,UAAU,+CAA+C;AAAA,IACvE;AACA,WAAO,KAAK,WAAW,KAAK,cAAc,UAAU,QAAQ,OAAO,GAAG,EAAE,QAAQ,OAAO,GAAG,CAAC,CAAC;AAAA,EAChG;AAAA,EACA,OAAO,YAAY,MAAM;AACrB,WAAO,KAAK,SAAS,IAAI,EAAE,QAAQ,OAAO,GAAG,EAAE,QAAQ,OAAO,GAAG,EAAE,QAAQ,OAAO,EAAE;AAAA,EACxF;AAAA,EACA,OAAO,eAAe,MAAM,WAAW,SAAQ,uBAAuB;AAClE,YAAQ,UAAU;AAAA,MACd,KAAK;AACD,eAAO,KAAK,WAAW,IAAI;AAAA,MAC/B,KAAK;AACD,eAAO,cAAc,WAAW,IAAI;AAAA,MACxC,KAAK;AAAA,MACL,KAAK;AACD,eAAO,eAAe,WAAW,IAAI;AAAA,MACzC,KAAK;AAAA,MACL,KAAK;AACD,eAAO,eAAe,WAAW,MAAM,IAAI;AAAA,MAC/C;AACI,cAAM,IAAI,MAAM,6BAA6B,QAAQ,GAAG;AAAA,IAChE;AAAA,EACJ;AAAA,EACA,OAAO,aAAa,QAAQ,WAAW,SAAQ,uBAAuB;AAClE,YAAQ,UAAU;AAAA,MACd,KAAK;AACD,eAAO,KAAK,SAAS,MAAM;AAAA,MAC/B,KAAK;AACD,eAAO,cAAc,SAAS,MAAM;AAAA,MACxC,KAAK;AAAA,MACL,KAAK;AACD,eAAO,eAAe,SAAS,MAAM;AAAA,MACzC,KAAK;AAAA,MACL,KAAK;AACD,eAAO,eAAe,SAAS,QAAQ,IAAI;AAAA,MAC/C;AACI,cAAM,IAAI,MAAM,6BAA6B,QAAQ,GAAG;AAAA,IAChE;AAAA,EACJ;AAAA,EACA,OAAO,WAAW,MAAM;AACpB,UAAM,eAAe,KAAK;AAC1B,UAAM,aAAa,IAAI,WAAW,YAAY;AAC9C,aAAS,IAAI,GAAG,IAAI,cAAc,KAAK;AACnC,iBAAW,CAAC,IAAI,KAAK,WAAW,CAAC;AAAA,IACrC;AACA,WAAO,WAAW;AAAA,EACtB;AAAA,EACA,OAAO,SAAS,QAAQ;AACpB,UAAM,MAAM,sBAAsB,aAAa,MAAM;AACrD,QAAI,MAAM;AACV,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,aAAO,OAAO,aAAa,IAAI,CAAC,CAAC;AAAA,IACrC;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,MAAM,QAAQ;AACjB,UAAM,MAAM,sBAAsB,aAAa,MAAM;AACrD,QAAI,SAAS;AACb,UAAM,MAAM,IAAI;AAChB,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC1B,YAAM,OAAO,IAAI,CAAC;AAClB,UAAI,OAAO,IAAI;AACX,kBAAU;AAAA,MACd;AACA,gBAAU,KAAK,SAAS,EAAE;AAAA,IAC9B;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,QAAQ,WAAW;AACtB,QAAI,YAAY,KAAK,aAAa,SAAS;AAC3C,QAAI,CAAC,WAAW;AACZ,aAAO,IAAI,YAAY,CAAC;AAAA,IAC5B;AACA,QAAI,CAAC,SAAQ,MAAM,SAAS,GAAG;AAC3B,YAAM,IAAI,UAAU,yCAAyC;AAAA,IACjE;AACA,QAAI,UAAU,SAAS,GAAG;AACtB,kBAAY,IAAI,SAAS;AAAA,IAC7B;AACA,UAAM,MAAM,IAAI,WAAW,UAAU,SAAS,CAAC;AAC/C,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,IAAI,IAAI,GAAG;AAC7C,YAAM,IAAI,UAAU,MAAM,GAAG,IAAI,CAAC;AAClC,UAAI,IAAI,CAAC,IAAI,SAAS,GAAG,EAAE;AAAA,IAC/B;AACA,WAAO,IAAI;AAAA,EACf;AAAA,EACA,OAAO,cAAc,QAAQ,eAAe,OAAO;AAC/C,WAAO,eAAe,SAAS,QAAQ,YAAY;AAAA,EACvD;AAAA,EACA,OAAO,gBAAgB,MAAM,eAAe,OAAO;AAC/C,WAAO,eAAe,WAAW,MAAM,YAAY;AAAA,EACvD;AAAA,EACA,OAAO,cAAcD,SAAQ;AACzB,UAAM,WAAW,IAAKA,QAAO,SAAS;AACtC,QAAI,WAAW,GAAG;AACd,eAAS,IAAI,GAAG,IAAI,UAAU,KAAK;AAC/B,QAAAA,WAAU;AAAA,MACd;AAAA,IACJ;AACA,WAAOA;AAAA,EACX;AAAA,EACA,OAAO,aAAa,MAAM;AACtB,YAAQ,SAAS,QAAQ,SAAS,SAAS,SAAS,KAAK,QAAQ,cAAc,EAAE,MAAM;AAAA,EAC3F;AACJ;AACA,QAAQ,wBAAwB;AAYhC,SAAS,WAAW,KAAK;AACrB,QAAM,kBAAkB,IAAI,IAAI,CAAC,SAAS,KAAK,UAAU,EAAE,OAAO,CAAC,MAAM,QAAQ,OAAO,GAAG;AAC3F,QAAM,MAAM,IAAI,WAAW,eAAe;AAC1C,MAAI,aAAa;AACjB,MAAI,IAAI,CAAC,SAAS,IAAI,WAAW,IAAI,CAAC,EAAE,QAAQ,CAAC,QAAQ;AACrD,eAAW,SAAS,KAAK;AACrB,UAAI,YAAY,IAAI;AAAA,IACxB;AAAA,EACJ,CAAC;AACD,SAAO,IAAI;AACf;AACA,SAAS,QAAQ,QAAQ,QAAQ;AAC7B,MAAI,EAAE,UAAU,SAAS;AACrB,WAAO;AAAA,EACX;AACA,MAAI,OAAO,eAAe,OAAO,YAAY;AACzC,WAAO;AAAA,EACX;AACA,QAAM,KAAK,IAAI,WAAW,MAAM;AAChC,QAAM,KAAK,IAAI,WAAW,MAAM;AAChC,WAAS,IAAI,GAAG,IAAI,OAAO,YAAY,KAAK;AACxC,QAAI,GAAG,CAAC,MAAM,GAAG,CAAC,GAAG;AACjB,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAO;AACX;;;ACnVA,SAAS,aAAa,aAAa,WAAW;AAC1C,MAAI,SAAS;AACb,MAAI,YAAY,WAAW,GAAG;AAC1B,WAAO,YAAY,CAAC;AAAA,EACxB;AACA,WAAS,IAAK,YAAY,SAAS,GAAI,KAAK,GAAG,KAAK;AAChD,cAAU,YAAa,YAAY,SAAS,IAAK,CAAC,IAAI,KAAK,IAAI,GAAG,YAAY,CAAC;AAAA,EACnF;AACA,SAAO;AACX;AACA,SAAS,WAAWE,QAAOC,QAAM,WAAY,IAAK;AAC9C,QAAM,mBAAmB;AACzB,MAAI,gBAAgBD;AACpB,MAAI,SAAS;AACb,MAAI,UAAU,KAAK,IAAI,GAAGC,MAAI;AAC9B,WAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,QAAID,SAAQ,SAAS;AACjB,UAAI;AACJ,UAAI,mBAAmB,GAAG;AACtB,iBAAS,IAAI,YAAY,CAAC;AAC1B,iBAAS;AAAA,MACb,OACK;AACD,YAAI,mBAAmB,GAAG;AACtB,iBAAQ,IAAI,YAAY,CAAC;AAAA,QAC7B;AACA,iBAAS,IAAI,YAAY,gBAAgB;AACzC,iBAAS;AAAA,MACb;AACA,YAAM,UAAU,IAAI,WAAW,MAAM;AACrC,eAAS,IAAK,IAAI,GAAI,KAAK,GAAG,KAAK;AAC/B,cAAM,QAAQ,KAAK,IAAI,GAAG,IAAIC,MAAI;AAClC,gBAAQ,SAAS,IAAI,CAAC,IAAI,KAAK,MAAM,gBAAgB,KAAK;AAC1D,yBAAkB,QAAQ,SAAS,IAAI,CAAC,IAAK;AAAA,MACjD;AACA,aAAO;AAAA,IACX;AACA,eAAW,KAAK,IAAI,GAAGA,MAAI;AAAA,EAC/B;AACA,SAAO,IAAI,YAAY,CAAC;AAC5B;AAeA,SAAS,kBAAkB,OAAO;AAC9B,MAAI,eAAe;AACnB,MAAI,aAAa;AACjB,aAAW,QAAQ,OAAO;AACtB,oBAAgB,KAAK;AAAA,EACzB;AACA,QAAM,SAAS,IAAI,YAAY,YAAY;AAC3C,QAAM,UAAU,IAAI,WAAW,MAAM;AACrC,aAAW,QAAQ,OAAO;AACtB,YAAQ,IAAI,MAAM,UAAU;AAC5B,kBAAc,KAAK;AAAA,EACvB;AACA,SAAO;AACX;AACA,SAAS,eAAe;AACpB,QAAM,MAAM,IAAI,WAAW,KAAK,QAAQ;AACxC,MAAI,KAAK,SAAS,cAAc,GAAG;AAC/B,UAAM,aAAc,IAAI,CAAC,MAAM,OAAU,IAAI,CAAC,IAAI;AAClD,UAAM,aAAc,IAAI,CAAC,MAAM,MAAW,IAAI,CAAC,IAAI,SAAU;AAC7D,QAAI,cAAc,YAAY;AAC1B,WAAK,SAAS,KAAK,wBAAwB;AAAA,IAC/C;AAAA,EACJ;AACA,QAAM,eAAe,IAAI,YAAY,KAAK,SAAS,UAAU;AAC7D,QAAM,aAAa,IAAI,WAAW,YAAY;AAC9C,WAAS,IAAI,GAAG,IAAI,KAAK,SAAS,YAAY,KAAK;AAC/C,eAAW,CAAC,IAAI;AAAA,EACpB;AACA,aAAW,CAAC,IAAK,IAAI,CAAC,IAAI;AAC1B,QAAM,SAAS,aAAa,YAAY,CAAC;AACzC,QAAM,iBAAiB,IAAI,YAAY,KAAK,SAAS,UAAU;AAC/D,QAAM,eAAe,IAAI,WAAW,cAAc;AAClD,WAAS,IAAI,GAAG,IAAI,KAAK,SAAS,YAAY,KAAK;AAC/C,iBAAa,CAAC,IAAI,IAAI,CAAC;AAAA,EAC3B;AACA,eAAa,CAAC,KAAK;AACnB,QAAM,WAAW,aAAa,cAAc,CAAC;AAC7C,SAAQ,WAAW;AACvB;AACA,SAAS,aAAaC,QAAO;AACzB,QAAM,WAAYA,SAAQ,IAAMA,SAAS,KAAOA;AAChD,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,QAAI,YAAY,QAAQ;AACpB,UAAIA,SAAQ,GAAG;AACX,cAAM,WAAW,SAAS;AAC1B,cAAMC,UAAS,WAAW,UAAU,GAAG,CAAC;AACxC,cAAMC,WAAU,IAAI,WAAWD,OAAM;AACrC,QAAAC,SAAQ,CAAC,KAAK;AACd,eAAOD;AAAA,MACX;AACA,UAAI,SAAS,WAAW,UAAU,GAAG,CAAC;AACtC,UAAI,UAAU,IAAI,WAAW,MAAM;AACnC,UAAI,QAAQ,CAAC,IAAI,KAAM;AACnB,cAAM,UAAU,OAAO,MAAM,CAAC;AAC9B,cAAM,WAAW,IAAI,WAAW,OAAO;AACvC,iBAAS,IAAI,YAAY,OAAO,aAAa,CAAC;AAC9C,kBAAU,IAAI,WAAW,MAAM;AAC/B,iBAAS,IAAI,GAAG,IAAI,QAAQ,YAAY,KAAK;AACzC,kBAAQ,IAAI,CAAC,IAAI,SAAS,CAAC;AAAA,QAC/B;AACA,gBAAQ,CAAC,IAAI;AAAA,MACjB;AACA,aAAO;AAAA,IACX;AACA,cAAU,KAAK,IAAI,GAAG,CAAC;AAAA,EAC3B;AACA,SAAQ,IAAI,YAAY,CAAC;AAC7B;AACA,SAAS,cAAc,cAAc,cAAc;AAC/C,MAAI,aAAa,eAAe,aAAa,YAAY;AACrD,WAAO;AAAA,EACX;AACA,QAAM,QAAQ,IAAI,WAAW,YAAY;AACzC,QAAM,QAAQ,IAAI,WAAW,YAAY;AACzC,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,QAAI,MAAM,CAAC,MAAM,MAAM,CAAC,GAAG;AACvB,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAO;AACX;AACA,SAAS,UAAU,aAAa,YAAY;AACxC,QAAM,MAAM,YAAY,SAAS,EAAE;AACnC,MAAI,aAAa,IAAI,QAAQ;AACzB,WAAO;AAAA,EACX;AACA,QAAM,MAAM,aAAa,IAAI;AAC7B,QAAM,UAAU,IAAI,MAAM,GAAG;AAC7B,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC1B,YAAQ,CAAC,IAAI;AAAA,EACjB;AACA,QAAM,gBAAgB,QAAQ,KAAK,EAAE;AACrC,SAAO,cAAc,OAAO,GAAG;AACnC;AA6HA,IAAME,QAAO,KAAK,IAAI,CAAC;;;AFhSvB,SAAS,eAAe;AACpB,MAAI,OAAO,WAAW,aAAa;AAC/B,UAAM,IAAI,MAAM,mEAAmE;AAAA,EACvF;AACJ;AACA,SAASC,QAAO,SAAS;AACrB,MAAI,eAAe;AACnB,MAAI,aAAa;AACjB,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,UAAM,SAAS,QAAQ,CAAC;AACxB,oBAAgB,OAAO;AAAA,EAC3B;AACA,QAAM,UAAU,IAAI,WAAW,YAAY;AAC3C,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,UAAM,SAAS,QAAQ,CAAC;AACxB,YAAQ,IAAI,IAAI,WAAW,MAAM,GAAG,UAAU;AAC9C,kBAAc,OAAO;AAAA,EACzB;AACA,SAAO,QAAQ;AACnB;AACA,SAAS,kBAAkB,WAAW,aAAa,aAAa,aAAa;AACzE,MAAI,EAAE,uBAAuB,aAAa;AACtC,cAAU,QAAQ;AAClB,WAAO;AAAA,EACX;AACA,MAAI,CAAC,YAAY,YAAY;AACzB,cAAU,QAAQ;AAClB,WAAO;AAAA,EACX;AACA,MAAI,cAAc,GAAG;AACjB,cAAU,QAAQ;AAClB,WAAO;AAAA,EACX;AACA,MAAI,cAAc,GAAG;AACjB,cAAU,QAAQ;AAClB,WAAO;AAAA,EACX;AACA,MAAK,YAAY,aAAa,cAAc,cAAe,GAAG;AAC1D,cAAU,QAAQ;AAClB,WAAO;AAAA,EACX;AACA,SAAO;AACX;AAEA,IAAM,aAAN,MAAiB;AAAA,EACb,cAAc;AACV,SAAK,QAAQ,CAAC;AAAA,EAClB;AAAA,EACA,MAAM,KAAK;AACP,SAAK,MAAM,KAAK,GAAG;AAAA,EACvB;AAAA,EACA,QAAQ;AACJ,WAAOA,QAAO,KAAK,KAAK;AAAA,EAC5B;AACJ;AAEA,IAAM,UAAU,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;AACpC,IAAM,eAAe;AACrB,IAAM,OAAO;AACb,IAAM,iBAAiB;AACvB,IAAM,cAAc;AACpB,IAAM,WAAW;AACjB,IAAM,YAAY;AAClB,IAAM,aAAa;AACnB,IAAM,iBAAiB;AACvB,IAAM,WAAW;AACjB,IAAM,SAAS;AACf,IAAM,QAAQ;AACd,IAAM,eAAe;AACrB,IAAM,eAAe,IAAI,YAAY,CAAC;AACtC,IAAM,aAAa,IAAI,WAAW,CAAC;AACnC,IAAM,sBAAsB;AAC5B,IAAM,oBAAoB;AAC1B,IAAM,kBAAkB;AAExB,SAAS,SAAS,WAAW;AACzB,MAAIC;AACJ,SAAOA,MAAK,MAAM,aAAa,UAAU;AAAA,IACjC,IAAI,WAAW;AACX,aAAO,KAAK,aAAa,MAAM,EAAE;AAAA,IACrC;AAAA,IACA,IAAI,SAASC,QAAO;AAChB,WAAK,eAAe,IAAI,WAAWA,MAAK;AAAA,IAC5C;AAAA,IACA,eAAe,MAAM;AACjB,UAAI;AACJ,YAAM,GAAG,IAAI;AACb,YAAM,SAAS,KAAK,CAAC,KAAK,CAAC;AAC3B,WAAK,aAAa,KAAK,OAAO,eAAe,QAAQ,OAAO,SAAS,KAAK;AAC1E,WAAK,eAAe,OAAO,WAAqB,sBAAsB,aAAa,OAAO,QAAQ,IAAI;AAAA,IAC1G;AAAA,IACA,QAAQ,aAAa,aAAa,aAAa;AAC3C,YAAM,OAAO,uBAAuB,cAAc,IAAI,WAAW,WAAW,IAAI;AAChF,UAAI,CAAC,kBAAkB,MAAM,MAAM,aAAa,WAAW,GAAG;AAC1D,eAAO;AAAA,MACX;AACA,YAAM,YAAY,cAAc;AAChC,WAAK,eAAe,KAAK,SAAS,aAAa,SAAS;AACxD,UAAI,CAAC,KAAK,aAAa,QAAQ;AAC3B,aAAK,SAAS,KAAK,oBAAoB;AACvC,eAAO;AAAA,MACX;AACA,WAAK,cAAc;AACnB,aAAO;AAAA,IACX;AAAA,IACA,MAAM,WAAW,OAAO;AACpB,UAAI,CAAC,KAAK,WAAW;AACjB,aAAK,QAAQ;AACb,eAAO;AAAA,MACX;AACA,UAAI,UAAU;AACV,eAAO,IAAI,YAAY,KAAK,aAAa,UAAU;AAAA,MACvD;AACA,aAAQ,KAAK,aAAa,eAAe,KAAK,aAAa,OAAO,aAC5D,KAAK,aAAa,SAClB,KAAK,aAAa,MAAM,EAAE;AAAA,IACpC;AAAA,IACA,SAAS;AACL,aAAO;AAAA,QACH,GAAG,MAAM,OAAO;AAAA,QAChB,WAAW,KAAK;AAAA,QAChB,UAAoB,QAAQ,MAAM,KAAK,YAAY;AAAA,MACvD;AAAA,IACJ;AAAA,EACJ,GACAD,IAAG,OAAO,YACVA;AACR;AAEA,IAAM,iBAAN,MAAqB;AAAA,EACjB,OAAO,YAAY;AACf,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,oBAAoB;AACpB,WAAO,KAAK,sBAAsB,MAAM,EAAE;AAAA,EAC9C;AAAA,EACA,IAAI,kBAAkBC,QAAO;AACzB,SAAK,wBAAwB,IAAI,WAAWA,MAAK;AAAA,EACrD;AAAA,EACA,YAAY,EAAE,cAAc,GAAG,QAAQ,cAAc,WAAW,CAAC,GAAG,oBAAoB,WAAY,IAAI,CAAC,GAAG;AACxG,SAAK,cAAc;AACnB,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,wBAAkC,sBAAsB,aAAa,iBAAiB;AAAA,EAC/F;AAAA,EACA,SAAS;AACL,WAAO;AAAA,MACH,WAAW,KAAK,YAAY;AAAA,MAC5B,aAAa,KAAK;AAAA,MAClB,OAAO,KAAK;AAAA,MACZ,UAAU,KAAK;AAAA,MACf,mBAA6B,QAAQ,MAAM,KAAK,qBAAqB;AAAA,IACzE;AAAA,EACJ;AACJ;AACA,eAAe,OAAO;AAEtB,IAAM,aAAN,cAAyB,eAAe;AAAA,EACpC,QAAQ,cAAc,cAAc,cAAc;AAC9C,UAAM,UAAU,6EAA6E;AAAA,EACjG;AAAA,EACA,MAAM,WAAW,SAAS;AACtB,UAAM,UAAU,6EAA6E;AAAA,EACjG;AACJ;AACA,WAAW,OAAO;AAElB,IAAM,2BAAN,cAAuC,SAAS,cAAc,EAAE;AAAA,EAC5D,YAAY,EAAE,UAAU,CAAC,EAAE,IAAI,CAAC,GAAG;AAC/B,QAAID,KAAI,IAAI,IAAI;AAChB,UAAM;AACN,QAAI,SAAS;AACT,WAAK,aAAaA,MAAK,QAAQ,eAAe,QAAQA,QAAO,SAASA,MAAK;AAC3E,WAAK,eAAe,QAAQ,WACZ,sBAAsB,aAAa,QAAQ,QAAQ,IAC7D;AACN,WAAK,YAAY,KAAK,QAAQ,cAAc,QAAQ,OAAO,SAAS,KAAK;AACzE,WAAK,aAAa,KAAK,QAAQ,eAAe,QAAQ,OAAO,SAAS,KAAK;AAC3E,WAAK,iBAAiB,KAAK,QAAQ,mBAAmB,QAAQ,OAAO,SAAS,KAAK;AAAA,IACvF,OACK;AACD,WAAK,WAAW;AAChB,WAAK,YAAY;AACjB,WAAK,gBAAgB;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,MAAM,WAAW,OAAO;AACpB,QAAI,aAAa;AACjB,YAAQ,KAAK,UAAU;AAAA,MACnB,KAAK;AACD,sBAAc;AACd;AAAA,MACJ,KAAK;AACD,sBAAc;AACd;AAAA,MACJ,KAAK;AACD,sBAAc;AACd;AAAA,MACJ,KAAK;AACD,sBAAc;AACd;AAAA,MACJ;AACI,aAAK,QAAQ;AACb,eAAO;AAAA,IACf;AACA,QAAI,KAAK;AACL,oBAAc;AAClB,QAAI,KAAK,YAAY,MAAM,CAAC,KAAK,WAAW;AACxC,YAAME,WAAU,IAAI,WAAW,CAAC;AAChC,UAAI,CAAC,UAAU;AACX,YAAIC,UAAS,KAAK;AAClB,QAAAA,WAAU;AACV,sBAAcA;AACd,QAAAD,SAAQ,CAAC,IAAI;AAAA,MACjB;AACA,aAAOA,SAAQ;AAAA,IACnB;AACA,QAAI,CAAC,KAAK,WAAW;AACjB,YAAM,aAAqB,WAAW,KAAK,WAAW,CAAC;AACvD,YAAM,cAAc,IAAI,WAAW,UAAU;AAC7C,YAAM,OAAO,WAAW;AACxB,YAAMA,WAAU,IAAI,WAAW,OAAO,CAAC;AACvC,MAAAA,SAAQ,CAAC,IAAK,aAAa;AAC3B,UAAI,CAAC,UAAU;AACX,iBAAS,IAAI,GAAG,IAAK,OAAO,GAAI;AAC5B,UAAAA,SAAQ,IAAI,CAAC,IAAI,YAAY,CAAC,IAAI;AACtC,QAAAA,SAAQ,IAAI,IAAI,YAAY,OAAO,CAAC;AAAA,MACxC;AACA,aAAOA,SAAQ;AAAA,IACnB;AACA,UAAM,UAAU,IAAI,WAAW,KAAK,aAAa,aAAa,CAAC;AAC/D,YAAQ,CAAC,IAAK,aAAa;AAC3B,QAAI,CAAC,UAAU;AACX,YAAM,UAAU,KAAK;AACrB,eAAS,IAAI,GAAG,IAAK,QAAQ,SAAS,GAAI;AACtC,gBAAQ,IAAI,CAAC,IAAI,QAAQ,CAAC,IAAI;AAClC,cAAQ,KAAK,aAAa,UAAU,IAAI,QAAQ,QAAQ,SAAS,CAAC;AAAA,IACtE;AACA,WAAO,QAAQ;AAAA,EACnB;AAAA,EACA,QAAQ,aAAa,aAAa,aAAa;AAC3C,UAAM,YAAsB,sBAAsB,aAAa,WAAW;AAC1E,QAAI,CAAC,kBAAkB,MAAM,WAAW,aAAa,WAAW,GAAG;AAC/D,aAAO;AAAA,IACX;AACA,UAAM,YAAY,UAAU,SAAS,aAAa,cAAc,WAAW;AAC3E,QAAI,UAAU,WAAW,GAAG;AACxB,WAAK,QAAQ;AACb,aAAO;AAAA,IACX;AACA,UAAM,eAAe,UAAU,CAAC,IAAI;AACpC,YAAQ,cAAc;AAAA,MAClB,KAAK;AACD,aAAK,WAAY;AACjB;AAAA,MACJ,KAAK;AACD,aAAK,WAAY;AACjB;AAAA,MACJ,KAAK;AACD,aAAK,WAAY;AACjB;AAAA,MACJ,KAAK;AACD,aAAK,WAAY;AACjB;AAAA,MACJ;AACI,aAAK,QAAQ;AACb,eAAO;AAAA,IACf;AACA,SAAK,iBAAiB,UAAU,CAAC,IAAI,QAAU;AAC/C,SAAK,YAAY;AACjB,UAAM,gBAAgB,UAAU,CAAC,IAAI;AACrC,QAAI,kBAAkB,IAAM;AACxB,WAAK,YAAa;AAClB,WAAK,cAAc;AAAA,IACvB,OACK;AACD,UAAI,QAAQ;AACZ,UAAI,qBAAqB,KAAK,eAAe,IAAI,WAAW,GAAG;AAC/D,UAAI,2BAA2B;AAC/B,aAAO,UAAU,KAAK,IAAI,KAAM;AAC5B,2BAAmB,QAAQ,CAAC,IAAI,UAAU,KAAK,IAAI;AACnD;AACA,YAAI,SAAS,UAAU,QAAQ;AAC3B,eAAK,QAAQ;AACb,iBAAO;AAAA,QACX;AACA,YAAI,UAAU,0BAA0B;AACpC,sCAA4B;AAC5B,gBAAME,kBAAiB,IAAI,WAAW,wBAAwB;AAC9D,mBAAS,IAAI,GAAG,IAAI,mBAAmB,QAAQ;AAC3C,YAAAA,gBAAe,CAAC,IAAI,mBAAmB,CAAC;AAC5C,+BAAqB,KAAK,eAAe,IAAI,WAAW,wBAAwB;AAAA,QACpF;AAAA,MACJ;AACA,WAAK,cAAe,QAAQ;AAC5B,yBAAmB,QAAQ,CAAC,IAAI,UAAU,KAAK,IAAI;AACnD,YAAM,iBAAiB,IAAI,WAAW,KAAK;AAC3C,eAAS,IAAI,GAAG,IAAI,OAAO;AACvB,uBAAe,CAAC,IAAI,mBAAmB,CAAC;AAC5C,2BAAqB,KAAK,eAAe,IAAI,WAAW,KAAK;AAC7D,yBAAmB,IAAI,cAAc;AACrC,UAAI,KAAK,eAAe;AACpB,aAAK,YAAoB,aAAa,oBAAoB,CAAC;AAAA,WAC1D;AACD,aAAK,YAAY;AACjB,aAAK,SAAS,KAAK,wCAAwC;AAAA,MAC/D;AAAA,IACJ;AACA,QAAM,KAAK,aAAa,KAChB,KAAK,eAAgB;AACzB,cAAQ,KAAK,WAAW;AAAA,QACpB,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACD,eAAK,QAAQ;AACb,iBAAO;AAAA,MACf;AAAA,IACJ;AACA,WAAQ,cAAc,KAAK;AAAA,EAC/B;AAAA,EACA,SAAS;AACL,WAAO;AAAA,MACH,GAAG,MAAM,OAAO;AAAA,MAChB,UAAU,KAAK;AAAA,MACf,WAAW,KAAK;AAAA,MAChB,eAAe,KAAK;AAAA,IACxB;AAAA,EACJ;AACJ;AACA,yBAAyB,OAAO;AAEhC,IAAM,mBAAN,cAA+B,eAAe;AAAA,EAC1C,YAAY,EAAE,WAAW,CAAC,EAAE,IAAI,CAAC,GAAG;AAChC,QAAIJ,KAAI,IAAI;AACZ,UAAM;AACN,SAAK,oBAAoBA,MAAK,SAAS,sBAAsB,QAAQA,QAAO,SAASA,MAAK;AAC1F,SAAK,gBAAgB,KAAK,SAAS,kBAAkB,QAAQ,OAAO,SAAS,KAAK;AAClF,SAAK,UAAU,KAAK,SAAS,YAAY,QAAQ,OAAO,SAAS,KAAK;AAAA,EAC1E;AAAA,EACA,QAAQ,aAAa,aAAa,aAAa;AAC3C,UAAM,OAAiB,sBAAsB,aAAa,WAAW;AACrE,QAAI,CAAC,kBAAkB,MAAM,MAAM,aAAa,WAAW,GAAG;AAC1D,aAAO;AAAA,IACX;AACA,UAAM,YAAY,KAAK,SAAS,aAAa,cAAc,WAAW;AACtE,QAAI,UAAU,WAAW,GAAG;AACxB,WAAK,QAAQ;AACb,aAAO;AAAA,IACX;AACA,QAAI,UAAU,CAAC,MAAM,KAAM;AACvB,WAAK,QAAQ;AACb,aAAO;AAAA,IACX;AACA,SAAK,mBAAmB,UAAU,CAAC,MAAM;AACzC,QAAI,KAAK,kBAAkB;AACvB,WAAK,cAAc;AACnB,aAAQ,cAAc,KAAK;AAAA,IAC/B;AACA,SAAK,eAAe,CAAC,EAAE,UAAU,CAAC,IAAI;AACtC,QAAI,KAAK,iBAAiB,OAAO;AAC7B,WAAK,SAAU,UAAU,CAAC;AAC1B,WAAK,cAAc;AACnB,aAAQ,cAAc,KAAK;AAAA,IAC/B;AACA,UAAM,QAAQ,UAAU,CAAC,IAAI;AAC7B,QAAI,QAAQ,GAAG;AACX,WAAK,QAAQ;AACb,aAAO;AAAA,IACX;AACA,QAAK,QAAQ,IAAK,UAAU,QAAQ;AAChC,WAAK,QAAQ;AACb,aAAO;AAAA,IACX;AACA,UAAM,YAAY,cAAc;AAChC,UAAM,mBAAmB,KAAK,SAAS,WAAW,YAAY,KAAK;AACnE,QAAI,iBAAiB,QAAQ,CAAC,MAAM;AAChC,WAAK,SAAS,KAAK,gCAAgC;AACvD,SAAK,SAAiB,aAAa,kBAAkB,CAAC;AACtD,QAAI,KAAK,gBAAiB,KAAK,UAAU;AACrC,WAAK,SAAS,KAAK,uCAAuC;AAC9D,SAAK,cAAc,QAAQ;AAC3B,WAAQ,cAAc,KAAK;AAAA,EAC/B;AAAA,EACA,MAAM,WAAW,OAAO;AACpB,QAAI;AACJ,QAAI;AACJ,QAAI,KAAK,SAAS;AACd,WAAK,eAAe;AACxB,QAAI,KAAK,kBAAkB;AACvB,eAAS,IAAI,YAAY,CAAC;AAC1B,UAAI,aAAa,OAAO;AACpB,kBAAU,IAAI,WAAW,MAAM;AAC/B,gBAAQ,CAAC,IAAI;AAAA,MACjB;AACA,aAAO;AAAA,IACX;AACA,QAAI,KAAK,cAAc;AACnB,YAAM,aAAqB,WAAW,KAAK,QAAQ,CAAC;AACpD,UAAI,WAAW,aAAa,KAAK;AAC7B,aAAK,QAAQ;AACb,eAAQ;AAAA,MACZ;AACA,eAAS,IAAI,YAAY,WAAW,aAAa,CAAC;AAClD,UAAI;AACA,eAAO;AACX,YAAM,cAAc,IAAI,WAAW,UAAU;AAC7C,gBAAU,IAAI,WAAW,MAAM;AAC/B,cAAQ,CAAC,IAAI,WAAW,aAAa;AACrC,eAAS,IAAI,GAAG,IAAI,WAAW,YAAY;AACvC,gBAAQ,IAAI,CAAC,IAAI,YAAY,CAAC;AAClC,aAAO;AAAA,IACX;AACA,aAAS,IAAI,YAAY,CAAC;AAC1B,QAAI,aAAa,OAAO;AACpB,gBAAU,IAAI,WAAW,MAAM;AAC/B,cAAQ,CAAC,IAAI,KAAK;AAAA,IACtB;AACA,WAAO;AAAA,EACX;AAAA,EACA,SAAS;AACL,WAAO;AAAA,MACH,GAAG,MAAM,OAAO;AAAA,MAChB,kBAAkB,KAAK;AAAA,MACvB,cAAc,KAAK;AAAA,MACnB,QAAQ,KAAK;AAAA,IACjB;AAAA,EACJ;AACJ;AACA,iBAAiB,OAAO;AAExB,IAAM,YAAY,CAAC;AAEnB,IAAM,YAAN,cAAwB,eAAe;AAAA,EACnC,YAAY,EAAE,MAAAK,QAAO,cAAc,UAAAC,YAAW,OAAO,iBAAiB,GAAG,WAAW,IAAI,CAAC,GAAG,gBAAgB;AACxG,UAAM,UAAU;AAChB,SAAK,OAAOD;AACZ,SAAK,WAAWC;AAChB,QAAI,iBAAiB;AACjB,WAAK,kBAAkB;AAAA,IAC3B;AACA,SAAK,UAAU,IAAI,yBAAyB,UAAU;AACtD,SAAK,WAAW,IAAI,iBAAiB,UAAU;AAC/C,SAAK,aAAa,iBAAiB,IAAI,eAAe,UAAU,IAAI,IAAI,WAAW,UAAU;AAAA,EACjG;AAAA,EACA,QAAQ,aAAa,aAAa,aAAa;AAC3C,UAAM,eAAe,KAAK,WAAW,QAAQ,aAAa,aAAc,KAAK,SAAS,mBAChF,cACA,KAAK,SAAS,MAAM;AAC1B,QAAI,iBAAiB,IAAI;AACrB,WAAK,QAAQ,KAAK,WAAW;AAC7B,aAAO;AAAA,IACX;AACA,QAAI,CAAC,KAAK,QAAQ,MAAM;AACpB,WAAK,eAAe,KAAK,QAAQ;AACrC,QAAI,CAAC,KAAK,SAAS,MAAM;AACrB,WAAK,eAAe,KAAK,SAAS;AACtC,QAAI,CAAC,KAAK,WAAW,MAAM;AACvB,WAAK,eAAe,KAAK,WAAW;AACxC,WAAO;AAAA,EACX;AAAA,EACA,MAAM,UAAU,QAAQ;AACpB,UAAM,UAAU,UAAU,IAAI,WAAW;AACzC,QAAI,CAAC,QAAQ;AACT,4BAAsB,IAAI;AAAA,IAC9B;AACA,UAAM,aAAa,KAAK,QAAQ,MAAM,QAAQ;AAC9C,YAAQ,MAAM,UAAU;AACxB,QAAI,KAAK,SAAS,kBAAkB;AAChC,cAAQ,MAAM,IAAI,WAAW,CAAC,GAAI,CAAC,EAAE,MAAM;AAC3C,WAAK,WAAW,MAAM,UAAU,OAAO;AACvC,cAAQ,MAAM,IAAI,YAAY,CAAC,CAAC;AAAA,IACpC,OACK;AACD,YAAM,gBAAgB,KAAK,WAAW,MAAM,QAAQ;AACpD,WAAK,SAAS,SAAS,cAAc;AACrC,YAAM,cAAc,KAAK,SAAS,MAAM,QAAQ;AAChD,cAAQ,MAAM,WAAW;AACzB,cAAQ,MAAM,aAAa;AAAA,IAC/B;AACA,QAAI,CAAC,QAAQ;AACT,aAAO,QAAQ,MAAM;AAAA,IACzB;AACA,WAAO;AAAA,EACX;AAAA,EACA,SAAS;AACL,UAAM,SAAS;AAAA,MACX,GAAG,MAAM,OAAO;AAAA,MAChB,SAAS,KAAK,QAAQ,OAAO;AAAA,MAC7B,UAAU,KAAK,SAAS,OAAO;AAAA,MAC/B,YAAY,KAAK,WAAW,OAAO;AAAA,MACnC,MAAM,KAAK;AAAA,MACX,UAAU,KAAK;AAAA,IACnB;AACA,QAAI,KAAK;AACL,aAAO,kBAAkB,KAAK,gBAAgB,OAAO;AACzD,WAAO;AAAA,EACX;AAAA,EACA,SAAS,WAAW,SAAS;AACzB,QAAI,aAAa,SAAS;AACtB,aAAO,KAAK,gBAAgB;AAAA,IAChC;AACA,WAAiB,QAAQ,MAAM,KAAK,MAAM,CAAC;AAAA,EAC/C;AAAA,EACA,kBAAkB;AACd,UAAMD,QAAO,KAAK,YAAY;AAC9B,UAAMJ,SAAkB,QAAQ,MAAM,KAAK,WAAW,qBAAqB;AAC3E,WAAO,GAAGI,KAAI,MAAMJ,MAAK;AAAA,EAC7B;AAAA,EACA,QAAQ,OAAO;AACX,QAAI,SAAS,OAAO;AAChB,aAAO;AAAA,IACX;AACA,QAAI,EAAE,iBAAiB,KAAK,cAAc;AACtC,aAAO;AAAA,IACX;AACA,UAAM,UAAU,KAAK,MAAM;AAC3B,UAAM,WAAW,MAAM,MAAM;AAC7B,WAAe,cAAc,SAAS,QAAQ;AAAA,EAClD;AACJ;AACA,UAAU,OAAO;AACjB,SAAS,sBAAsB,WAAW;AACtC,MAAID;AACJ,MAAI,qBAAqB,UAAU,aAAa;AAC5C,eAAWC,UAAS,UAAU,WAAW,OAAO;AAC5C,UAAI,sBAAsBA,MAAK,GAAG;AAC9B,kBAAU,SAAS,mBAAmB;AAAA,MAC1C;AAAA,IACJ;AAAA,EACJ;AACA,SAAO,CAAC,GAAGD,MAAK,UAAU,cAAc,QAAQA,QAAO,SAAS,SAASA,IAAG;AAChF;AAEA,IAAM,kBAAN,cAA8B,UAAU;AAAA,EACpC,WAAW;AACP,WAAO,KAAK,WAAW;AAAA,EAC3B;AAAA,EACA,SAASC,QAAO;AACZ,SAAK,WAAW,QAAQA;AAAA,EAC5B;AAAA,EACA,YAAY,EAAE,OAAAA,SAAQ,cAAc,GAAG,WAAW,IAAI,CAAC,GAAG,sBAAsB;AAC5E,UAAM,YAAY,oBAAoB;AACtC,QAAIA,QAAO;AACP,WAAK,WAAWA,MAAK;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,QAAQ,aAAa,aAAa,aAAa;AAC3C,UAAM,eAAe,KAAK,WAAW,QAAQ,aAAa,aAAc,KAAK,SAAS,mBAChF,cACA,KAAK,SAAS,MAAM;AAC1B,QAAI,iBAAiB,IAAI;AACrB,WAAK,QAAQ,KAAK,WAAW;AAC7B,aAAO;AAAA,IACX;AACA,SAAK,WAAW,KAAK,WAAW,YAAY;AAC5C,QAAI,CAAC,KAAK,QAAQ,MAAM;AACpB,WAAK,eAAe,KAAK,QAAQ;AACrC,QAAI,CAAC,KAAK,SAAS,MAAM;AACrB,WAAK,eAAe,KAAK,SAAS;AACtC,QAAI,CAAC,KAAK,WAAW,MAAM;AACvB,WAAK,eAAe,KAAK,WAAW;AACxC,WAAO;AAAA,EACX;AAAA,EACA,kBAAkB;AACd,WAAO,GAAG,KAAK,YAAY,IAAI,OAAO,KAAK,WAAW,KAAK;AAAA,EAC/D;AACJ;AACA,gBAAgB,OAAO;AAEvB,IAAM,2BAAN,cAAuC,SAAS,UAAU,EAAE;AAAA,EACxD,YAAY,EAAE,YAAY,MAAM,GAAG,WAAW,IAAI,CAAC,GAAG;AAClD,UAAM,UAAU;AAChB,SAAK,YAAY;AAAA,EACrB;AACJ;AACA,yBAAyB,OAAO;AAEhC,IAAI;AACJ,IAAM,YAAN,cAAwB,UAAU;AAAA,EAC9B,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,YAAY,wBAAwB;AAC1C,SAAK,QAAQ,gBAAgB;AAAA,EACjC;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,YAAY;AAC1B,GAAG;AACH,UAAU,OAAO;AAEjB,SAAS,gBAAgB,aAAa,SAAS;AAC3C,MAAI,uBAAuB,SAAS;AAChC,WAAO;AAAA,EACX;AACA,QAAM,YAAY,IAAI,QAAQ;AAC9B,YAAU,UAAU,YAAY;AAChC,YAAU,WAAW,YAAY;AACjC,YAAU,WAAW,YAAY;AACjC,YAAU,wBAAwB,YAAY;AAC9C,SAAO;AACX;AACA,SAAS,aAAa,aAAa,cAAc,GAAG,cAAc,YAAY,QAAQ;AAClF,QAAM,iBAAiB;AACvB,MAAI,eAAe,IAAI,UAAU,CAAC,GAAG,UAAU;AAC/C,QAAM,YAAY,IAAI,eAAe;AACrC,MAAI,CAAC,kBAAkB,WAAW,aAAa,aAAa,WAAW,GAAG;AACtE,iBAAa,QAAQ,UAAU;AAC/B,WAAO;AAAA,MACH,QAAQ;AAAA,MACR,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,QAAM,YAAY,YAAY,SAAS,aAAa,cAAc,WAAW;AAC7E,MAAI,CAAC,UAAU,QAAQ;AACnB,iBAAa,QAAQ;AACrB,WAAO;AAAA,MACH,QAAQ;AAAA,MACR,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,MAAI,eAAe,aAAa,QAAQ,QAAQ,aAAa,aAAa,WAAW;AACrF,MAAI,aAAa,QAAQ,SAAS,QAAQ;AACtC,iBAAa,SAAS,OAAO,aAAa,QAAQ,QAAQ;AAAA,EAC9D;AACA,MAAI,iBAAiB,IAAI;AACrB,iBAAa,QAAQ,aAAa,QAAQ;AAC1C,WAAO;AAAA,MACH,QAAQ;AAAA,MACR,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,gBAAc;AACd,iBAAe,aAAa,QAAQ;AACpC,iBAAe,aAAa,SAAS,QAAQ,aAAa,aAAa,WAAW;AAClF,MAAI,aAAa,SAAS,SAAS,QAAQ;AACvC,iBAAa,SAAS,OAAO,aAAa,SAAS,QAAQ;AAAA,EAC/D;AACA,MAAI,iBAAiB,IAAI;AACrB,iBAAa,QAAQ,aAAa,SAAS;AAC3C,WAAO;AAAA,MACH,QAAQ;AAAA,MACR,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,gBAAc;AACd,iBAAe,aAAa,SAAS;AACrC,MAAI,CAAC,aAAa,QAAQ,iBACnB,aAAa,SAAS,kBAAkB;AAC3C,iBAAa,QAAQ;AACrB,WAAO;AAAA,MACH,QAAQ;AAAA,MACR,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,MAAI,cAAc;AAClB,UAAQ,aAAa,QAAQ,UAAU;AAAA,IACnC,KAAK;AACD,UAAK,aAAa,QAAQ,aAAa,MAC/B,aAAa,QAAQ,cAAc,OAAQ;AAC/C,qBAAa,QAAQ;AACrB,eAAO;AAAA,UACH,QAAQ;AAAA,UACR,QAAQ;AAAA,QACZ;AAAA,MACJ;AACA,cAAQ,aAAa,QAAQ,WAAW;AAAA,QACpC,KAAK;AACD,cAAK,aAAa,QAAQ,iBAClB,aAAa,SAAS,SAAS,GAAI;AACvC,yBAAa,QAAQ;AACrB,mBAAO;AAAA,cACH,QAAQ;AAAA,cACR,QAAQ;AAAA,YACZ;AAAA,UACJ;AACA,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,uBAAa,QAAQ;AACrB,iBAAO;AAAA,YACH,QAAQ;AAAA,YACR,QAAQ;AAAA,UACZ;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,KAAK;AACD,wBAAc,UAAU;AACxB;AAAA,QACJ,SAAS;AACL,gBAAM,YAAY,aAAa,QAAQ,gBACjC,IAAI,UAAU,YAAY,IAC1B,IAAI,UAAU,UAAU;AAC9B,oBAAU,UAAU,aAAa;AACjC,oBAAU,WAAW,aAAa;AAClC,oBAAU,WAAW,aAAa;AAClC,yBAAe;AAAA,QACnB;AAAA,MACJ;AACA;AAAA,IACJ,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,SAAS;AACL,oBAAc,aAAa,QAAQ,gBAC7B,UAAU,cACV,UAAU;AAAA,IACpB;AAAA,EACJ;AACA,iBAAe,gBAAgB,cAAc,WAAW;AACxD,iBAAe,aAAa,QAAQ,aAAa,aAAa,aAAa,SAAS,mBAAmB,cAAc,aAAa,SAAS,MAAM;AACjJ,eAAa,wBAAwB,YAAY,SAAS,gBAAgB,iBAAiB,aAAa,WAAW;AACnH,SAAO;AAAA,IACH,QAAQ;AAAA,IACR,QAAQ;AAAA,EACZ;AACJ;AACA,SAAS,QAAQ,aAAa;AAC1B,MAAI,CAAC,YAAY,YAAY;AACzB,UAAM,SAAS,IAAI,UAAU,CAAC,GAAG,UAAU;AAC3C,WAAO,QAAQ;AACf,WAAO;AAAA,MACH,QAAQ;AAAA,MACR;AAAA,IACJ;AAAA,EACJ;AACA,SAAO,aAAuB,sBAAsB,aAAa,WAAW,EAAE,MAAM,GAAG,GAAG,YAAY,UAAU;AACpH;AAEA,SAAS,SAAS,kBAAkBM,UAAQ;AACxC,MAAI,kBAAkB;AAClB,WAAO;AAAA,EACX;AACA,SAAOA;AACX;AACA,IAAM,6BAAN,cAAyC,WAAW;AAAA,EAChD,YAAY,EAAE,OAAAN,SAAQ,CAAC,GAAG,mBAAmB,OAAO,GAAG,WAAW,IAAI,CAAC,GAAG;AACtE,UAAM,UAAU;AAChB,SAAK,QAAQA;AACb,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EACA,QAAQ,aAAa,aAAa,aAAa;AAC3C,UAAM,OAAiB,sBAAsB,aAAa,WAAW;AACrE,QAAI,CAAC,kBAAkB,MAAM,MAAM,aAAa,WAAW,GAAG;AAC1D,aAAO;AAAA,IACX;AACA,SAAK,wBAAwB,KAAK,SAAS,aAAa,cAAc,WAAW;AACjF,QAAI,KAAK,sBAAsB,WAAW,GAAG;AACzC,WAAK,SAAS,KAAK,oBAAoB;AACvC,aAAO;AAAA,IACX;AACA,QAAI,gBAAgB;AACpB,WAAO,SAAS,KAAK,kBAAkB,WAAW,IAAI,GAAG;AACrD,YAAM,eAAe,aAAa,MAAM,eAAe,WAAW;AAClE,UAAI,aAAa,WAAW,IAAI;AAC5B,aAAK,QAAQ,aAAa,OAAO;AACjC,aAAK,SAAS,OAAO,aAAa,OAAO,QAAQ;AACjD,eAAO;AAAA,MACX;AACA,sBAAgB,aAAa;AAC7B,WAAK,eAAe,aAAa,OAAO;AACxC,qBAAe,aAAa,OAAO;AACnC,WAAK,MAAM,KAAK,aAAa,MAAM;AACnC,UAAI,KAAK,oBAAoB,aAAa,OAAO,YAAY,SAAS,qBAAqB;AACvF;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,KAAK,kBAAkB;AACvB,UAAI,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC,EAAE,YAAY,SAAS,qBAAqB;AAC5E,aAAK,MAAM,IAAI;AAAA,MACnB,OACK;AACD,aAAK,SAAS,KAAK,+BAA+B;AAAA,MACtD;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,MAAM,UAAU,QAAQ;AACpB,UAAM,UAAU,UAAU,IAAI,WAAW;AACzC,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,WAAK,MAAM,CAAC,EAAE,MAAM,UAAU,OAAO;AAAA,IACzC;AACA,QAAI,CAAC,QAAQ;AACT,aAAO,QAAQ,MAAM;AAAA,IACzB;AACA,WAAO;AAAA,EACX;AAAA,EACA,SAAS;AACL,UAAM,SAAS;AAAA,MACX,GAAG,MAAM,OAAO;AAAA,MAChB,kBAAkB,KAAK;AAAA,MACvB,OAAO,CAAC;AAAA,IACZ;AACA,eAAWA,UAAS,KAAK,OAAO;AAC5B,aAAO,MAAM,KAAKA,OAAM,OAAO,CAAC;AAAA,IACpC;AACA,WAAO;AAAA,EACX;AACJ;AACA,2BAA2B,OAAO;AAElC,IAAI;AACJ,IAAM,cAAN,cAA0B,UAAU;AAAA,EAChC,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,YAAY,0BAA0B;AAC5C,SAAK,QAAQ,gBAAgB;AAAA,EACjC;AAAA,EACA,QAAQ,aAAa,aAAa,aAAa;AAC3C,SAAK,WAAW,mBAAmB,KAAK,SAAS;AACjD,UAAM,eAAe,KAAK,WAAW,QAAQ,aAAa,aAAc,KAAK,SAAS,mBAAoB,cAAc,KAAK,SAAS,MAAM;AAC5I,QAAI,iBAAiB,IAAI;AACrB,WAAK,QAAQ,KAAK,WAAW;AAC7B,aAAO;AAAA,IACX;AACA,QAAI,CAAC,KAAK,QAAQ,MAAM;AACpB,WAAK,eAAe,KAAK,QAAQ;AACrC,QAAI,CAAC,KAAK,SAAS,MAAM;AACrB,WAAK,eAAe,KAAK,SAAS;AACtC,QAAI,CAAC,KAAK,WAAW,MAAM;AACvB,WAAK,eAAe,KAAK,WAAW;AACxC,WAAO;AAAA,EACX;AAAA,EACA,kBAAkB;AACd,UAAM,SAAS,CAAC;AAChB,eAAWA,UAAS,KAAK,WAAW,OAAO;AACvC,aAAO,KAAKA,OAAM,SAAS,OAAO,EAAE,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC;AAAA,IACnF;AACA,UAAM,YAAY,KAAK,QAAQ,aAAa,IACtC,IAAI,KAAK,QAAQ,SAAS,MAC1B,KAAK,YAAY;AACvB,WAAO,OAAO,SACR,GAAG,SAAS;AAAA,EAAO,OAAO,KAAK,IAAI,CAAC,KACpC,GAAG,SAAS;AAAA,EACtB;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,cAAc;AAC5B,GAAG;AACH,YAAY,OAAO;AAEnB,IAAM,8BAAN,cAA0C,WAAW;AAAA,EACjD,QAAQ,aAAa,aAAa,cAAc;AAC5C,WAAO;AAAA,EACX;AAAA,EACA,MAAM,WAAW;AACb,WAAO;AAAA,EACX;AACJ;AACA,4BAA4B,WAAW;AAEvC,IAAI;AACJ,IAAM,eAAN,cAA2B,UAAU;AAAA,EACjC,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,YAAY,2BAA2B;AAC7C,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,eAAe;AAC7B,GAAG;AACH,aAAa,OAAO;AAEpB,IAAI;AACJ,IAAM,OAAN,cAAmB,UAAU;AAAA,EACzB,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,YAAY,UAAU;AAC5B,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AAAA,EACA,QAAQ,aAAa,aAAa,aAAa;AAC3C,QAAI,KAAK,SAAS,SAAS;AACvB,WAAK,SAAS,KAAK,8CAA8C;AACrE,QAAI,CAAC,KAAK,QAAQ,MAAM;AACpB,WAAK,eAAe,KAAK,QAAQ;AACrC,QAAI,CAAC,KAAK,SAAS,MAAM;AACrB,WAAK,eAAe,KAAK,SAAS;AACtC,SAAK,eAAe;AACpB,QAAK,cAAc,cAAe,YAAY,YAAY;AACtD,WAAK,QAAQ;AACb,aAAO;AAAA,IACX;AACA,WAAQ,cAAc;AAAA,EAC1B;AAAA,EACA,MAAM,UAAU,QAAQ;AACpB,UAAM,SAAS,IAAI,YAAY,CAAC;AAChC,QAAI,CAAC,UAAU;AACX,YAAM,UAAU,IAAI,WAAW,MAAM;AACrC,cAAQ,CAAC,IAAI;AACb,cAAQ,CAAC,IAAI;AAAA,IACjB;AACA,QAAI,QAAQ;AACR,aAAO,MAAM,MAAM;AAAA,IACvB;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAAkB;AACd,WAAO,GAAG,KAAK,YAAY,IAAI;AAAA,EACnC;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,OAAO;AACrB,GAAG;AACH,KAAK,OAAO;AAEZ,IAAM,yBAAN,cAAqC,SAAS,UAAU,EAAE;AAAA,EACtD,IAAI,QAAQ;AACR,eAAW,SAAS,KAAK,cAAc;AACnC,UAAI,QAAQ,GAAG;AACX,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,MAAMA,QAAO;AACb,SAAK,aAAa,CAAC,IAAIA,SAAQ,MAAO;AAAA,EAC1C;AAAA,EACA,YAAY,EAAE,OAAAA,QAAO,GAAG,WAAW,IAAI,CAAC,GAAG;AACvC,UAAM,UAAU;AAChB,QAAI,WAAW,UAAU;AACrB,WAAK,eAAyB,sBAAsB,aAAa,WAAW,QAAQ;AAAA,IACxF,OACK;AACD,WAAK,eAAe,IAAI,WAAW,CAAC;AAAA,IACxC;AACA,QAAIA,QAAO;AACP,WAAK,QAAQA;AAAA,IACjB;AAAA,EACJ;AAAA,EACA,QAAQ,aAAa,aAAa,aAAa;AAC3C,UAAM,YAAsB,sBAAsB,aAAa,WAAW;AAC1E,QAAI,CAAC,kBAAkB,MAAM,WAAW,aAAa,WAAW,GAAG;AAC/D,aAAO;AAAA,IACX;AACA,SAAK,eAAe,UAAU,SAAS,aAAa,cAAc,WAAW;AAC7E,QAAI,cAAc;AACd,WAAK,SAAS,KAAK,4CAA4C;AACnE,SAAK,YAAY;AACjB,IAAQ,aAAa,KAAK,IAAI;AAC9B,SAAK,cAAc;AACnB,WAAQ,cAAc;AAAA,EAC1B;AAAA,EACA,QAAQ;AACJ,WAAO,KAAK,aAAa,MAAM;AAAA,EACnC;AAAA,EACA,SAAS;AACL,WAAO;AAAA,MACH,GAAG,MAAM,OAAO;AAAA,MAChB,OAAO,KAAK;AAAA,IAChB;AAAA,EACJ;AACJ;AACA,uBAAuB,OAAO;AAE9B,IAAI;AACJ,IAAMO,WAAN,cAAsB,UAAU;AAAA,EAC5B,WAAW;AACP,WAAO,KAAK,WAAW;AAAA,EAC3B;AAAA,EACA,SAASP,QAAO;AACZ,SAAK,WAAW,QAAQA;AAAA,EAC5B;AAAA,EACA,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,YAAY,sBAAsB;AACxC,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AAAA,EACA,kBAAkB;AACd,WAAO,GAAG,KAAK,YAAY,IAAI,MAAM,KAAK,QAAQ;AAAA,EACtD;AACJ;AACA,OAAOO;AAAA,CACN,MAAM;AACH,YAAU,UAAU;AACxB,GAAG;AACHA,SAAQ,OAAO;AAEf,IAAM,6BAAN,cAAyC,SAAS,0BAA0B,EAAE;AAAA,EAC1E,YAAY,EAAE,gBAAgB,OAAO,GAAG,WAAW,IAAI,CAAC,GAAG;AACvD,UAAM,UAAU;AAChB,SAAK,gBAAgB;AAAA,EACzB;AAAA,EACA,QAAQ,aAAa,aAAa,aAAa;AAC3C,QAAI,eAAe;AACnB,QAAI,KAAK,eAAe;AACpB,WAAK,YAAY;AACjB,qBAAe,2BAA2B,UAAU,QAAQ,KAAK,MAAM,aAAa,aAAa,WAAW;AAC5G,UAAI,iBAAiB;AACjB,eAAO;AACX,eAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,cAAM,mBAAmB,KAAK,MAAM,CAAC,EAAE,YAAY;AACnD,YAAI,qBAAqB,qBAAqB;AAC1C,cAAI,KAAK;AACL;AAAA,eACC;AACD,iBAAK,QAAQ;AACb,mBAAO;AAAA,UACX;AAAA,QACJ;AACA,YAAI,qBAAqB,mBAAmB;AACxC,eAAK,QAAQ;AACb,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ,OACK;AACD,WAAK,YAAY;AACjB,qBAAe,MAAM,QAAQ,aAAa,aAAa,WAAW;AAClE,WAAK,cAAc;AAAA,IACvB;AACA,WAAO;AAAA,EACX;AAAA,EACA,MAAM,UAAU,QAAQ;AACpB,QAAI,KAAK;AACL,aAAO,2BAA2B,UAAU,MAAM,KAAK,MAAM,UAAU,MAAM;AACjF,WAAO,WACD,IAAI,YAAY,KAAK,aAAa,UAAU,IAC5C,KAAK,aAAa,MAAM,EAAE;AAAA,EACpC;AAAA,EACA,SAAS;AACL,WAAO;AAAA,MACH,GAAG,MAAM,OAAO;AAAA,MAChB,eAAe,KAAK;AAAA,IACxB;AAAA,EACJ;AACJ;AACA,2BAA2B,OAAO;AAElC,IAAI;AACJ,IAAM,cAAN,cAA0B,UAAU;AAAA,EAChC,YAAY,EAAE,UAAU,CAAC,GAAG,WAAW,CAAC,GAAG,GAAG,WAAW,IAAI,CAAC,GAAG;AAC7D,QAAI,IAAI;AACR,KAAC,KAAK,WAAW,mBAAmB,QAAQ,OAAO,SAAS,KAAM,WAAW,gBAAgB,CAAC,GAAG,KAAK,WAAW,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG;AAChK,UAAM;AAAA,MACF,SAAS;AAAA,QACL,eAAe,WAAW;AAAA,QAC1B,GAAG;AAAA,MACP;AAAA,MACA,UAAU;AAAA,QACN,GAAG;AAAA,QACH,kBAAkB,CAAC,CAAC,WAAW;AAAA,MACnC;AAAA,MACA,GAAG;AAAA,IACP,GAAG,0BAA0B;AAC7B,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AAAA,EACA,QAAQ,aAAa,aAAa,aAAa;AAC3C,SAAK,WAAW,gBAAgB,KAAK,QAAQ;AAC7C,SAAK,WAAW,mBAAmB,KAAK,SAAS;AACjD,QAAI,gBAAgB,GAAG;AACnB,UAAI,KAAK,QAAQ,MAAM,WAAW;AAC9B,aAAK,eAAe,KAAK,QAAQ;AACrC,UAAI,KAAK,SAAS,MAAM,WAAW;AAC/B,aAAK,eAAe,KAAK,SAAS;AACtC,aAAO;AAAA,IACX;AACA,QAAI,CAAC,KAAK,WAAW,eAAe;AAChC,YAAM,OAAO,uBAAuB,cAAc,IAAI,WAAW,WAAW,IAAI;AAChF,YAAM,MAAM,KAAK,SAAS,aAAa,cAAc,WAAW;AAChE,UAAI;AACA,YAAI,IAAI,YAAY;AAChB,gBAAM,MAAM,aAAa,KAAK,GAAG,IAAI,UAAU;AAC/C,cAAI,IAAI,WAAW,MAAM,IAAI,WAAW,aAAa;AACjD,iBAAK,WAAW,QAAQ,CAAC,IAAI,MAAM;AAAA,UACvC;AAAA,QACJ;AAAA,MACJ,QACM;AAAA,MACN;AAAA,IACJ;AACA,WAAO,MAAM,QAAQ,aAAa,aAAa,WAAW;AAAA,EAC9D;AAAA,EACA,kBAAkB;AACd,QAAI,KAAK,WAAW,iBAAkB,KAAK,WAAW,SAAS,KAAK,WAAW,MAAM,QAAS;AAC1F,aAAO,YAAY,UAAU,gBAAgB,KAAK,IAAI;AAAA,IAC1D;AACA,UAAMH,QAAO,KAAK,YAAY;AAC9B,UAAMJ,SAAkB,QAAQ,MAAM,KAAK,WAAW,YAAY;AAClE,WAAO,GAAGI,KAAI,MAAMJ,MAAK;AAAA,EAC7B;AAAA,EACA,WAAW;AACP,QAAI,CAAC,KAAK,QAAQ,eAAe;AAC7B,aAAO,KAAK,WAAW,aAAa,MAAM,EAAE;AAAA,IAChD;AACA,UAAM,QAAQ,CAAC;AACf,eAAW,WAAW,KAAK,WAAW,OAAO;AACzC,UAAI,mBAAmB,MAAM;AACzB,cAAM,KAAK,QAAQ,WAAW,YAAY;AAAA,MAC9C;AAAA,IACJ;AACA,WAAiB,sBAAsB,OAAO,KAAK;AAAA,EACvD;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,cAAc;AAC5B,GAAG;AACH,YAAY,OAAO;AAEnB,IAAM,2BAAN,cAAuC,SAAS,0BAA0B,EAAE;AAAA,EACxE,YAAY,EAAE,aAAa,GAAG,gBAAgB,OAAO,GAAG,WAAW,IAAI,CAAC,GAAG;AACvE,UAAM,UAAU;AAChB,SAAK,aAAa;AAClB,SAAK,gBAAgB;AACrB,SAAK,cAAc,KAAK,aAAa;AAAA,EACzC;AAAA,EACA,QAAQ,aAAa,aAAa,aAAa;AAC3C,QAAI,CAAC,aAAa;AACd,aAAO;AAAA,IACX;AACA,QAAI,eAAe;AACnB,QAAI,KAAK,eAAe;AACpB,qBAAe,2BAA2B,UAAU,QAAQ,KAAK,MAAM,aAAa,aAAa,WAAW;AAC5G,UAAI,iBAAiB;AACjB,eAAO;AACX,iBAAWA,UAAS,KAAK,OAAO;AAC5B,cAAM,mBAAmBA,OAAM,YAAY;AAC3C,YAAI,qBAAqB,qBAAqB;AAC1C,cAAI,KAAK;AACL;AAAA,eACC;AACD,iBAAK,QAAQ;AACb,mBAAO;AAAA,UACX;AAAA,QACJ;AACA,YAAI,qBAAqB,iBAAiB;AACtC,eAAK,QAAQ;AACb,iBAAO;AAAA,QACX;AACA,cAAM,aAAaA,OAAM;AACzB,YAAK,KAAK,aAAa,KAAO,WAAW,aAAa,GAAI;AACtD,eAAK,QAAQ;AACb,iBAAO;AAAA,QACX;AACA,aAAK,aAAa,WAAW;AAAA,MACjC;AACA,aAAO;AAAA,IACX;AACA,UAAM,YAAsB,sBAAsB,aAAa,WAAW;AAC1E,QAAI,CAAC,kBAAkB,MAAM,WAAW,aAAa,WAAW,GAAG;AAC/D,aAAO;AAAA,IACX;AACA,UAAM,YAAY,UAAU,SAAS,aAAa,cAAc,WAAW;AAC3E,SAAK,aAAa,UAAU,CAAC;AAC7B,QAAI,KAAK,aAAa,GAAG;AACrB,WAAK,QAAQ;AACb,aAAO;AAAA,IACX;AACA,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,MAAM,UAAU,SAAS,CAAC;AAChC,UAAI;AACA,YAAI,IAAI,YAAY;AAChB,gBAAM,MAAM,aAAa,KAAK,GAAG,IAAI,UAAU;AAC/C,cAAI,IAAI,WAAW,MAAM,IAAI,WAAY,cAAc,GAAI;AACvD,iBAAK,QAAQ,CAAC,IAAI,MAAM;AAAA,UAC5B;AAAA,QACJ;AAAA,MACJ,QACM;AAAA,MACN;AAAA,IACJ;AACA,SAAK,eAAe,UAAU,SAAS,CAAC;AACxC,SAAK,cAAc,UAAU;AAC7B,WAAQ,cAAc;AAAA,EAC1B;AAAA,EACA,MAAM,UAAU,QAAQ;AACpB,QAAI,KAAK,eAAe;AACpB,aAAO,2BAA2B,UAAU,MAAM,KAAK,MAAM,UAAU,MAAM;AAAA,IACjF;AACA,QAAI,UAAU;AACV,aAAO,IAAI,YAAY,KAAK,aAAa,aAAa,CAAC;AAAA,IAC3D;AACA,QAAI,CAAC,KAAK,aAAa,YAAY;AAC/B,aAAO;AAAA,IACX;AACA,UAAM,UAAU,IAAI,WAAW,KAAK,aAAa,SAAS,CAAC;AAC3D,YAAQ,CAAC,IAAI,KAAK;AAClB,YAAQ,IAAI,KAAK,cAAc,CAAC;AAChC,WAAO,QAAQ;AAAA,EACnB;AAAA,EACA,SAAS;AACL,WAAO;AAAA,MACH,GAAG,MAAM,OAAO;AAAA,MAChB,YAAY,KAAK;AAAA,MACjB,eAAe,KAAK;AAAA,IACxB;AAAA,EACJ;AACJ;AACA,yBAAyB,OAAO;AAEhC,IAAI;AACJ,IAAM,YAAN,cAAwB,UAAU;AAAA,EAC9B,YAAY,EAAE,UAAU,CAAC,GAAG,WAAW,CAAC,GAAG,GAAG,WAAW,IAAI,CAAC,GAAG;AAC7D,QAAI,IAAI;AACR,KAAC,KAAK,WAAW,mBAAmB,QAAQ,OAAO,SAAS,KAAM,WAAW,gBAAgB,CAAC,GAAG,KAAK,WAAW,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG;AAChK,UAAM;AAAA,MACF,SAAS;AAAA,QACL,eAAe,WAAW;AAAA,QAC1B,GAAG;AAAA,MACP;AAAA,MACA,UAAU;AAAA,QACN,GAAG;AAAA,QACH,kBAAkB,CAAC,CAAC,WAAW;AAAA,MACnC;AAAA,MACA,GAAG;AAAA,IACP,GAAG,wBAAwB;AAC3B,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AAAA,EACA,QAAQ,aAAa,aAAa,aAAa;AAC3C,SAAK,WAAW,gBAAgB,KAAK,QAAQ;AAC7C,SAAK,WAAW,mBAAmB,KAAK,SAAS;AACjD,WAAO,MAAM,QAAQ,aAAa,aAAa,WAAW;AAAA,EAC9D;AAAA,EACA,kBAAkB;AACd,QAAI,KAAK,WAAW,iBAAkB,KAAK,WAAW,SAAS,KAAK,WAAW,MAAM,QAAS;AAC1F,aAAO,YAAY,UAAU,gBAAgB,KAAK,IAAI;AAAA,IAC1D,OACK;AACD,YAAM,OAAO,CAAC;AACd,YAAM,WAAW,KAAK,WAAW;AACjC,iBAAW,QAAQ,UAAU;AACzB,aAAK,KAAK,KAAK,SAAS,CAAC,EAAE,SAAS,GAAG,GAAG,CAAC;AAAA,MAC/C;AACA,YAAM,UAAU,KAAK,KAAK,EAAE;AAC5B,YAAMI,QAAO,KAAK,YAAY;AAC9B,YAAMJ,SAAQ,QAAQ,UAAU,GAAG,QAAQ,SAAS,KAAK,WAAW,UAAU;AAC9E,aAAO,GAAGI,KAAI,MAAMJ,MAAK;AAAA,IAC7B;AAAA,EACJ;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,YAAY;AAC1B,GAAG;AACH,UAAU,OAAO;AAEjB,IAAI;AACJ,SAAS,QAAQ,OAAOQ,SAAQ;AAC5B,QAAM,IAAI,IAAI,WAAW,CAAC,CAAC,CAAC;AAC5B,QAAM,YAAY,IAAI,WAAW,KAAK;AACtC,QAAM,aAAa,IAAI,WAAWA,OAAM;AACxC,MAAI,gBAAgB,UAAU,MAAM,CAAC;AACrC,QAAM,sBAAsB,cAAc,SAAS;AACnD,QAAM,iBAAiB,WAAW,MAAM,CAAC;AACzC,QAAM,uBAAuB,eAAe,SAAS;AACrD,MAAIR,SAAQ;AACZ,QAAM,MAAO,uBAAuB,sBAAuB,sBAAsB;AACjF,MAAI,UAAU;AACd,WAAS,IAAI,KAAK,KAAK,GAAG,KAAK,WAAW;AACtC,YAAQ,MAAM;AAAA,MACV,KAAM,UAAU,eAAe;AAC3B,QAAAA,SAAQ,cAAc,sBAAsB,OAAO,IAAI,eAAe,uBAAuB,OAAO,IAAI,EAAE,CAAC;AAC3G;AAAA,MACJ;AACI,QAAAA,SAAQ,cAAc,sBAAsB,OAAO,IAAI,EAAE,CAAC;AAAA,IAClE;AACA,MAAE,CAAC,IAAIA,SAAQ;AACf,YAAQ,MAAM;AAAA,MACV,KAAM,WAAW,cAAc;AAC3B,wBAAwB,eAAe,IAAI,WAAW,CAACA,SAAQ,EAAE,CAAC,GAAG,aAAa;AAClF;AAAA,MACJ;AACI,sBAAc,sBAAsB,OAAO,IAAIA,SAAQ;AAAA,IAC/D;AAAA,EACJ;AACA,MAAI,EAAE,CAAC,IAAI;AACP,oBAAwB,eAAe,GAAG,aAAa;AAC3D,SAAO;AACX;AACA,SAAS,OAAO,GAAG;AACf,MAAI,KAAK,QAAQ,QAAQ;AACrB,aAAS,IAAI,QAAQ,QAAQ,KAAK,GAAG,KAAK;AACtC,YAAM,IAAI,IAAI,WAAW,CAAC,CAAC,CAAC;AAC5B,UAAI,SAAU,QAAQ,IAAI,CAAC,EAAG,MAAM,CAAC;AACrC,eAAS,IAAK,OAAO,SAAS,GAAI,KAAK,GAAG,KAAK;AAC3C,cAAM,WAAW,IAAI,WAAW,EAAE,OAAO,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC;AACzD,UAAE,CAAC,IAAI,SAAS,CAAC,IAAI;AACrB,eAAO,CAAC,IAAI,SAAS,CAAC,IAAI;AAAA,MAC9B;AACA,UAAI,EAAE,CAAC,IAAI;AACP,iBAAiB,eAAe,GAAG,MAAM;AAC7C,cAAQ,KAAK,MAAM;AAAA,IACvB;AAAA,EACJ;AACA,SAAO,QAAQ,CAAC;AACpB;AACA,SAAS,QAAQ,OAAOQ,SAAQ;AAC5B,MAAI,IAAI;AACR,QAAM,YAAY,IAAI,WAAW,KAAK;AACtC,QAAM,aAAa,IAAI,WAAWA,OAAM;AACxC,QAAM,gBAAgB,UAAU,MAAM,CAAC;AACvC,QAAM,sBAAsB,cAAc,SAAS;AACnD,QAAM,iBAAiB,WAAW,MAAM,CAAC;AACzC,QAAM,uBAAuB,eAAe,SAAS;AACrD,MAAIR;AACJ,MAAI,UAAU;AACd,WAAS,IAAI,sBAAsB,KAAK,GAAG,KAAK,WAAW;AACvD,IAAAA,SAAQ,cAAc,sBAAsB,OAAO,IAAI,eAAe,uBAAuB,OAAO,IAAI;AACxG,YAAQ,MAAM;AAAA,MACV,KAAMA,SAAQ;AACV,YAAI;AACJ,sBAAc,sBAAsB,OAAO,IAAIA,SAAQ;AACvD;AAAA,MACJ;AACI,YAAI;AACJ,sBAAc,sBAAsB,OAAO,IAAIA;AAAA,IACvD;AAAA,EACJ;AACA,MAAI,IAAI,GAAG;AACP,aAAS,IAAK,sBAAsB,uBAAuB,GAAI,KAAK,GAAG,KAAK,WAAW;AACnF,MAAAA,SAAQ,cAAc,sBAAsB,OAAO,IAAI;AACvD,UAAIA,SAAQ,GAAG;AACX,YAAI;AACJ,sBAAc,sBAAsB,OAAO,IAAIA,SAAQ;AAAA,MAC3D,OACK;AACD,YAAI;AACJ,sBAAc,sBAAsB,OAAO,IAAIA;AAC/C;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACA,SAAO,cAAc,MAAM;AAC/B;AACA,IAAM,yBAAN,cAAqC,SAAS,UAAU,EAAE;AAAA,EACtD,cAAc;AACV,QAAI,KAAK,aAAa,UAAU,GAAG;AAC/B,WAAK,SAAS,KAAK,wCAAwC;AAC3D,WAAK,YAAY;AACjB,WAAK,YAAY;AAAA,IACrB,OACK;AACD,WAAK,YAAY;AACjB,UAAI,KAAK,aAAa,SAAS,GAAG;AAC9B,aAAK,YAAoB,aAAa,KAAK,IAAI;AAAA,MACnD;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,YAAY,EAAE,OAAAA,QAAO,GAAG,WAAW,IAAI,CAAC,GAAG;AACvC,UAAM,UAAU;AAChB,SAAK,YAAY;AACjB,QAAI,WAAW,UAAU;AACrB,WAAK,YAAY;AAAA,IACrB;AACA,QAAIA,WAAU,QAAW;AACrB,WAAK,WAAWA;AAAA,IACpB;AAAA,EACJ;AAAA,EACA,IAAI,SAAS,GAAG;AACZ,SAAK,YAAY;AACjB,SAAK,YAAY;AACjB,SAAK,eAAe,IAAI,WAAmB,aAAa,CAAC,CAAC;AAAA,EAC9D;AAAA,EACA,IAAI,WAAW;AACX,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,QAAQ,aAAa,aAAa,aAAa,iBAAiB,GAAG;AAC/D,UAAM,SAAS,KAAK,QAAQ,aAAa,aAAa,WAAW;AACjE,QAAI,WAAW;AACX,aAAO;AACX,UAAM,OAAO,KAAK;AAClB,QAAK,KAAK,CAAC,MAAM,MAAW,KAAK,CAAC,IAAI,SAAU,GAAI;AAChD,WAAK,eAAe,KAAK,SAAS,CAAC;AAAA,IACvC,OACK;AACD,UAAI,mBAAmB,GAAG;AACtB,YAAI,KAAK,SAAS,gBAAgB;AAC9B,cAAK,iBAAiB,KAAK,SAAU;AACjC,6BAAiB,KAAK,SAAS;AACnC,eAAK,eAAe,KAAK,SAAS,iBAAiB,KAAK,MAAM;AAAA,QAClE;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,MAAM,WAAW,OAAO;AACpB,UAAM,OAAO,KAAK;AAClB,YAAQ,MAAM;AAAA,MACV,MAAO,KAAK,CAAC,IAAI,SAAU;AACvB;AACI,gBAAM,cAAc,IAAI,WAAW,KAAK,aAAa,SAAS,CAAC;AAC/D,sBAAY,CAAC,IAAI;AACjB,sBAAY,IAAI,MAAM,CAAC;AACvB,eAAK,eAAe;AAAA,QACxB;AACA;AAAA,MACJ,MAAO,KAAK,CAAC,MAAM,MAAW,KAAK,CAAC,IAAI,SAAU;AAC9C;AACI,eAAK,eAAe,KAAK,aAAa,SAAS,CAAC;AAAA,QACpD;AACA;AAAA,IACR;AACA,WAAO,KAAK,MAAM,QAAQ;AAAA,EAC9B;AAAA,EACA,QAAQ,aAAa,aAAa,aAAa;AAC3C,UAAM,eAAe,MAAM,QAAQ,aAAa,aAAa,WAAW;AACxE,QAAI,iBAAiB,IAAI;AACrB,aAAO;AAAA,IACX;AACA,SAAK,YAAY;AACjB,WAAO;AAAA,EACX;AAAA,EACA,MAAM,UAAU;AACZ,WAAO,WACD,IAAI,YAAY,KAAK,aAAa,MAAM,IACxC,KAAK,aAAa,MAAM,EAAE;AAAA,EACpC;AAAA,EACA,SAAS;AACL,WAAO;AAAA,MACH,GAAG,MAAM,OAAO;AAAA,MAChB,UAAU,KAAK;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,WAAW;AACP,UAAM,WAAY,KAAK,aAAa,SAAS,IAAK;AAClD,QAAI,SAAS,IAAI,WAAY,KAAK,aAAa,SAAS,IAAK,CAAC;AAC9D,QAAI,YAAY;AAChB,QAAI;AACJ,UAAM,WAAW,KAAK;AACtB,QAAI,SAAS;AACb,QAAI,OAAO;AACX,aAAS,aAAc,SAAS,aAAa,GAAI,cAAc,GAAG,cAAc;AAC5E,oBAAc,SAAS,UAAU;AACjC,eAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,aAAK,cAAc,OAAO,GAAG;AACzB,kBAAQ,WAAW;AAAA,YACf,KAAK;AACD,uBAAS,QAAQ,OAAO,SAAS,GAAG,MAAM;AAC1C,uBAAS;AACT;AAAA,YACJ;AACI,uBAAS,QAAQ,QAAQ,OAAO,SAAS,CAAC;AAAA,UAClD;AAAA,QACJ;AACA;AACA,wBAAgB;AAAA,MACpB;AAAA,IACJ;AACA,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,UAAI,OAAO,CAAC;AACR,eAAO;AACX,UAAI;AACA,kBAAU,aAAa,OAAO,OAAO,CAAC,CAAC;AAAA,IAC/C;AACA,QAAI,SAAS;AACT,gBAAU,aAAa,OAAO,CAAC;AACnC,WAAO;AAAA,EACX;AACJ;AACA,OAAO;AACP,uBAAuB,OAAO;AAAA,CAC7B,MAAM;AACH,SAAO,eAAe,KAAK,WAAW,YAAY;AAAA,IAC9C,KAAK,SAAU,GAAG;AACd,WAAK,eAAe,IAAI,WAAW,CAAC;AACpC,WAAK,YAAY;AAAA,IACrB;AAAA,IACA,KAAK,WAAY;AACb,aAAO,KAAK,aAAa,MAAM,EAAE;AAAA,IACrC;AAAA,EACJ,CAAC;AACL,GAAG;AAEH,IAAI;AACJ,IAAM,UAAN,cAAsB,UAAU;AAAA,EAC5B,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,YAAY,sBAAsB;AACxC,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AAAA,EACA,WAAW;AACP,iBAAa;AACb,WAAO,OAAO,KAAK,WAAW,SAAS,CAAC;AAAA,EAC5C;AAAA,EACA,OAAO,WAAWA,QAAO;AACrB,iBAAa;AACb,UAAM,cAAc,OAAOA,MAAK;AAChC,UAAM,SAAS,IAAI,WAAW;AAC9B,UAAM,MAAM,YAAY,SAAS,EAAE,EAAE,QAAQ,MAAM,EAAE;AACrD,UAAM,OAAO,IAAI,WAAqB,QAAQ,QAAQ,GAAG,CAAC;AAC1D,QAAI,cAAc,GAAG;AACjB,YAAM,QAAQ,IAAI,WAAW,KAAK,UAAU,KAAK,CAAC,IAAI,MAAO,IAAI,EAAE;AACnE,YAAM,CAAC,KAAK;AACZ,YAAM,WAAW,OAAO,KAAe,QAAQ,MAAM,KAAK,CAAC,EAAE;AAC7D,YAAM,YAAY,WAAW;AAC7B,YAAMQ,UAAmB,sBAAsB,aAAuB,QAAQ,QAAQ,UAAU,SAAS,EAAE,CAAC,CAAC;AAC7G,MAAAA,QAAO,CAAC,KAAK;AACb,aAAO,MAAMA,OAAM;AAAA,IACvB,OACK;AACD,UAAI,KAAK,CAAC,IAAI,KAAM;AAChB,eAAO,MAAM,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;AAAA,MACpC;AACA,aAAO,MAAM,IAAI;AAAA,IACrB;AACA,UAAM,MAAM,IAAI,KAAK,EAAE,UAAU,OAAO,MAAM,EAAE,CAAC;AACjD,WAAO;AAAA,EACX;AAAA,EACA,eAAe;AACX,UAAM,UAAU,IAAI,KAAK,EAAE,UAAU,KAAK,WAAW,aAAa,CAAC;AACnE,YAAQ,WAAW,MAAM;AACzB,WAAO;AAAA,EACX;AAAA,EACA,iBAAiB;AACb,WAAO,IAAI,KAAK;AAAA,MACZ,UAAU,KAAK,WAAW,aAAa,CAAC,MAAM,IACxC,KAAK,WAAW,aAAa,SAAS,CAAC,IACvC,KAAK,WAAW;AAAA,IAC1B,CAAC;AAAA,EACL;AAAA,EACA,kBAAkB;AACd,WAAO,GAAG,KAAK,YAAY,IAAI,MAAM,KAAK,WAAW,SAAS,CAAC;AAAA,EACnE;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,UAAU;AACxB,GAAG;AACH,QAAQ,OAAO;AAEf,IAAI;AACJ,IAAM,aAAN,cAAyB,QAAQ;AAAA,EAC7B,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,aAAa;AAC3B,GAAG;AACH,WAAW,OAAO;AAElB,IAAM,qBAAN,cAAiC,SAAS,UAAU,EAAE;AAAA,EAClD,YAAY,EAAE,WAAW,IAAI,aAAa,OAAO,GAAG,WAAW,IAAI,CAAC,GAAG;AACnE,UAAM,UAAU;AAChB,SAAK,WAAW;AAChB,SAAK,aAAa;AAAA,EACtB;AAAA,EACA,QAAQ,aAAa,aAAa,aAAa;AAC3C,QAAI,CAAC,aAAa;AACd,aAAO;AAAA,IACX;AACA,UAAM,YAAsB,sBAAsB,aAAa,WAAW;AAC1E,QAAI,CAAC,kBAAkB,MAAM,WAAW,aAAa,WAAW,GAAG;AAC/D,aAAO;AAAA,IACX;AACA,UAAM,YAAY,UAAU,SAAS,aAAa,cAAc,WAAW;AAC3E,SAAK,eAAe,IAAI,WAAW,WAAW;AAC9C,aAAS,IAAI,GAAG,IAAI,aAAa,KAAK;AAClC,WAAK,aAAa,CAAC,IAAI,UAAU,CAAC,IAAI;AACtC,WAAK;AACL,WAAK,UAAU,CAAC,IAAI,SAAU;AAC1B;AAAA,IACR;AACA,UAAM,WAAW,IAAI,WAAW,KAAK,WAAW;AAChD,aAAS,IAAI,GAAG,IAAI,KAAK,aAAa,KAAK;AACvC,eAAS,CAAC,IAAI,KAAK,aAAa,CAAC;AAAA,IACrC;AACA,SAAK,eAAe;AACpB,SAAK,UAAU,KAAK,cAAc,CAAC,IAAI,SAAU,GAAM;AACnD,WAAK,QAAQ;AACb,aAAO;AAAA,IACX;AACA,QAAI,KAAK,aAAa,CAAC,MAAM;AACzB,WAAK,SAAS,KAAK,wCAAwC;AAC/D,QAAI,KAAK,eAAe;AACpB,WAAK,WAAmB,aAAa,KAAK,cAAc,CAAC;AAAA,SACxD;AACD,WAAK,YAAY;AACjB,WAAK,SAAS,KAAK,oCAAoC;AAAA,IAC3D;AACA,WAAQ,cAAc,KAAK;AAAA,EAC/B;AAAA,EACA,IAAI,YAAYR,QAAO;AACnB,iBAAa;AACb,QAAI,OAAO,OAAOA,MAAK,EAAE,SAAS,CAAC;AACnC,WAAO,KAAK,SAAS,GAAG;AACpB,aAAO,MAAM;AAAA,IACjB;AACA,UAAM,QAAQ,IAAI,WAAW,KAAK,SAAS,CAAC;AAC5C,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,YAAM,CAAC,IAAI,SAAS,KAAK,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,IAAI,MAAM,SAAS,MAAO;AAAA,IAC1F;AACA,SAAK,QAAQ,MAAM,QAAQ,GAAG,MAAM,MAAM;AAAA,EAC9C;AAAA,EACA,MAAM,UAAU;AACZ,QAAI,KAAK,WAAW;AAChB,UAAI;AACA,eAAQ,IAAI,YAAY,KAAK,aAAa,UAAU;AACxD,YAAM,UAAU,KAAK;AACrB,YAAMC,WAAU,IAAI,WAAW,KAAK,WAAW;AAC/C,eAAS,IAAI,GAAG,IAAK,KAAK,cAAc,GAAI;AACxC,QAAAA,SAAQ,CAAC,IAAI,QAAQ,CAAC,IAAI;AAC9B,MAAAA,SAAQ,KAAK,cAAc,CAAC,IAAI,QAAQ,KAAK,cAAc,CAAC;AAC5D,aAAOA,SAAQ;AAAA,IACnB;AACA,UAAM,aAAqB,WAAW,KAAK,UAAU,CAAC;AACtD,QAAI,WAAW,eAAe,GAAG;AAC7B,WAAK,QAAQ;AACb,aAAO;AAAA,IACX;AACA,UAAM,UAAU,IAAI,WAAW,WAAW,UAAU;AACpD,QAAI,CAAC,UAAU;AACX,YAAM,cAAc,IAAI,WAAW,UAAU;AAC7C,YAAM,MAAM,WAAW,aAAa;AACpC,eAAS,IAAI,GAAG,IAAI,KAAK;AACrB,gBAAQ,CAAC,IAAI,YAAY,CAAC,IAAI;AAClC,cAAQ,GAAG,IAAI,YAAY,GAAG;AAAA,IAClC;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,QAAI,SAAS;AACb,QAAI,KAAK;AACL,eAAmB,QAAQ,MAAM,KAAK,YAAY;AAAA,SACjD;AACD,UAAI,KAAK,YAAY;AACjB,YAAI,WAAW,KAAK;AACpB,YAAI,KAAK,YAAY;AACjB,mBAAS;AAAA,aACR;AACD,cAAI,KAAK,YAAY,IAAI;AACrB,qBAAS;AACT,wBAAY;AAAA,UAChB,OACK;AACD,qBAAS;AACT,wBAAY;AAAA,UAChB;AAAA,QACJ;AACA,kBAAU,SAAS,SAAS;AAAA,MAChC;AAEI,iBAAS,KAAK,SAAS,SAAS;AAAA,IACxC;AACA,WAAO;AAAA,EACX;AAAA,EACA,SAAS;AACL,WAAO;AAAA,MACH,GAAG,MAAM,OAAO;AAAA,MAChB,UAAU,KAAK;AAAA,MACf,YAAY,KAAK;AAAA,IACrB;AAAA,EACJ;AACJ;AACA,mBAAmB,OAAO;AAE1B,IAAM,kCAAN,cAA8C,WAAW;AAAA,EACrD,YAAY,EAAE,OAAAD,SAAQ,cAAc,GAAG,WAAW,IAAI,CAAC,GAAG;AACtD,UAAM,UAAU;AAChB,SAAK,QAAQ,CAAC;AACd,QAAIA,QAAO;AACP,WAAK,WAAWA,MAAK;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,QAAQ,aAAa,aAAa,aAAa;AAC3C,QAAI,eAAe;AACnB,WAAO,cAAc,GAAG;AACpB,YAAM,WAAW,IAAI,mBAAmB;AACxC,qBAAe,SAAS,QAAQ,aAAa,cAAc,WAAW;AACtE,UAAI,iBAAiB,IAAI;AACrB,aAAK,cAAc;AACnB,aAAK,QAAQ,SAAS;AACtB,eAAO;AAAA,MACX;AACA,UAAI,KAAK,MAAM,WAAW;AACtB,iBAAS,aAAa;AAC1B,WAAK,eAAe,SAAS;AAC7B,qBAAe,SAAS;AACxB,WAAK,MAAM,KAAK,QAAQ;AAAA,IAC5B;AACA,WAAO;AAAA,EACX;AAAA,EACA,MAAM,UAAU;AACZ,UAAM,aAAa,CAAC;AACpB,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,YAAM,WAAW,KAAK,MAAM,CAAC,EAAE,MAAM,QAAQ;AAC7C,UAAI,SAAS,eAAe,GAAG;AAC3B,aAAK,QAAQ,KAAK,MAAM,CAAC,EAAE;AAC3B,eAAO;AAAA,MACX;AACA,iBAAW,KAAK,QAAQ;AAAA,IAC5B;AACA,WAAOF,QAAO,UAAU;AAAA,EAC5B;AAAA,EACA,WAAWW,SAAQ;AACf,SAAK,QAAQ,CAAC;AACd,QAAI,OAAO;AACX,QAAI,OAAO;AACX,QAAI,MAAM;AACV,QAAI,OAAO;AACX,OAAG;AACC,aAAOA,QAAO,QAAQ,KAAK,IAAI;AAC/B,UAAI,SAAS;AACT,cAAMA,QAAO,UAAU,IAAI;AAAA;AAE3B,cAAMA,QAAO,UAAU,MAAM,IAAI;AACrC,aAAO,OAAO;AACd,UAAI,MAAM;AACN,cAAM,WAAW,KAAK,MAAM,CAAC;AAC7B,YAAI,OAAO;AACX,gBAAQ,SAAS,UAAU;AAAA,UACvB,KAAK;AACD;AAAA,UACJ,KAAK;AACD,mBAAO;AACP;AAAA,UACJ,KAAK;AACD,mBAAO;AACP;AAAA,UACJ;AACI,iBAAK,QAAQ,CAAC;AACd;AAAA,QACR;AACA,cAAM,YAAY,SAAS,KAAK,EAAE;AAClC,YAAI,MAAM,SAAS;AACf;AACJ,iBAAS,WAAW,YAAY;AAChC,eAAO;AAAA,MACX,OACK;AACD,cAAM,WAAW,IAAI,mBAAmB;AACxC,YAAI,MAAM,OAAO,kBAAkB;AAC/B,uBAAa;AACb,gBAAM,WAAW,OAAO,GAAG;AAC3B,mBAAS,cAAc;AAAA,QAC3B,OACK;AACD,mBAAS,WAAW,SAAS,KAAK,EAAE;AACpC,cAAI,MAAM,SAAS,QAAQ;AACvB;AAAA,QACR;AACA,YAAI,CAAC,KAAK,MAAM,QAAQ;AACpB,mBAAS,aAAa;AACtB,iBAAO;AAAA,QACX;AACA,aAAK,MAAM,KAAK,QAAQ;AAAA,MAC5B;AAAA,IACJ,SAAS,SAAS;AAAA,EACtB;AAAA,EACA,WAAW;AACP,QAAI,SAAS;AACb,QAAI,YAAY;AAChB,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,kBAAY,KAAK,MAAM,CAAC,EAAE;AAC1B,UAAI,SAAS,KAAK,MAAM,CAAC,EAAE,SAAS;AACpC,UAAI,MAAM;AACN,iBAAS,GAAG,MAAM;AACtB,UAAI,WAAW;AACX,iBAAS,IAAI,MAAM;AACnB,YAAI,KAAK,MAAM,CAAC,EAAE;AACd,mBAAS,MAAM,MAAM;AAAA;AAErB,oBAAU;AAAA,MAClB;AAEI,kBAAU;AAAA,IAClB;AACA,WAAO;AAAA,EACX;AAAA,EACA,SAAS;AACL,UAAM,SAAS;AAAA,MACX,GAAG,MAAM,OAAO;AAAA,MAChB,OAAO,KAAK,SAAS;AAAA,MACrB,UAAU,CAAC;AAAA,IACf;AACA,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,aAAO,SAAS,KAAK,KAAK,MAAM,CAAC,EAAE,OAAO,CAAC;AAAA,IAC/C;AACA,WAAO;AAAA,EACX;AACJ;AACA,gCAAgC,OAAO;AAEvC,IAAI;AACJ,IAAM,mBAAN,cAA+B,UAAU;AAAA,EACrC,WAAW;AACP,WAAO,KAAK,WAAW,SAAS;AAAA,EACpC;AAAA,EACA,SAAST,QAAO;AACZ,SAAK,WAAW,WAAWA,MAAK;AAAA,EACpC;AAAA,EACA,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,YAAY,+BAA+B;AACjD,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AAAA,EACA,kBAAkB;AACd,WAAO,GAAG,KAAK,YAAY,IAAI,MAAM,KAAK,WAAW,SAAS,KAAK,OAAO;AAAA,EAC9E;AAAA,EACA,SAAS;AACL,WAAO;AAAA,MACH,GAAG,MAAM,OAAO;AAAA,MAChB,OAAO,KAAK,SAAS;AAAA,IACzB;AAAA,EACJ;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,mBAAmB;AACjC,GAAG;AACH,iBAAiB,OAAO;AAExB,IAAM,6BAAN,cAAyC,SAAS,cAAc,EAAE;AAAA,EAC9D,YAAY,EAAE,WAAW,GAAG,GAAG,WAAW,IAAI,CAAC,GAAG;AAC9C,UAAM,UAAU;AAChB,SAAK,WAAW;AAAA,EACpB;AAAA,EACA,QAAQ,aAAa,aAAa,aAAa;AAC3C,QAAI,gBAAgB;AAChB,aAAO;AACX,UAAM,YAAsB,sBAAsB,aAAa,WAAW;AAC1E,QAAI,CAAC,kBAAkB,MAAM,WAAW,aAAa,WAAW;AAC5D,aAAO;AACX,UAAM,YAAY,UAAU,SAAS,aAAa,cAAc,WAAW;AAC3E,SAAK,eAAe,IAAI,WAAW,WAAW;AAC9C,aAAS,IAAI,GAAG,IAAI,aAAa,KAAK;AAClC,WAAK,aAAa,CAAC,IAAI,UAAU,CAAC,IAAI;AACtC,WAAK;AACL,WAAK,UAAU,CAAC,IAAI,SAAU;AAC1B;AAAA,IACR;AACA,UAAM,WAAW,IAAI,WAAW,KAAK,WAAW;AAChD,aAAS,IAAI,GAAG,IAAI,KAAK,aAAa;AAClC,eAAS,CAAC,IAAI,KAAK,aAAa,CAAC;AACrC,SAAK,eAAe;AACpB,SAAK,UAAU,KAAK,cAAc,CAAC,IAAI,SAAU,GAAM;AACnD,WAAK,QAAQ;AACb,aAAO;AAAA,IACX;AACA,QAAI,KAAK,aAAa,CAAC,MAAM;AACzB,WAAK,SAAS,KAAK,wCAAwC;AAC/D,QAAI,KAAK,eAAe;AACpB,WAAK,WAAmB,aAAa,KAAK,cAAc,CAAC;AAAA,SACxD;AACD,WAAK,YAAY;AACjB,WAAK,SAAS,KAAK,oCAAoC;AAAA,IAC3D;AACA,WAAQ,cAAc,KAAK;AAAA,EAC/B;AAAA,EACA,MAAM,UAAU;AACZ,QAAI,KAAK,WAAW;AAChB,UAAI;AACA,eAAQ,IAAI,YAAY,KAAK,aAAa,UAAU;AACxD,YAAM,UAAU,KAAK;AACrB,YAAMC,WAAU,IAAI,WAAW,KAAK,WAAW;AAC/C,eAAS,IAAI,GAAG,IAAK,KAAK,cAAc,GAAI;AACxC,QAAAA,SAAQ,CAAC,IAAI,QAAQ,CAAC,IAAI;AAC9B,MAAAA,SAAQ,KAAK,cAAc,CAAC,IAAI,QAAQ,KAAK,cAAc,CAAC;AAC5D,aAAOA,SAAQ;AAAA,IACnB;AACA,UAAM,aAAqB,WAAW,KAAK,UAAU,CAAC;AACtD,QAAI,WAAW,eAAe,GAAG;AAC7B,WAAK,QAAQ;AACb,aAAO;AAAA,IACX;AACA,UAAM,UAAU,IAAI,WAAW,WAAW,UAAU;AACpD,QAAI,CAAC,UAAU;AACX,YAAM,cAAc,IAAI,WAAW,UAAU;AAC7C,YAAM,MAAM,WAAW,aAAa;AACpC,eAAS,IAAI,GAAG,IAAI,KAAK;AACrB,gBAAQ,CAAC,IAAI,YAAY,CAAC,IAAI;AAClC,cAAQ,GAAG,IAAI,YAAY,GAAG;AAAA,IAClC;AACA,WAAO,QAAQ;AAAA,EACnB;AAAA,EACA,WAAW;AACP,QAAI,SAAS;AACb,QAAI,KAAK;AACL,eAAmB,QAAQ,MAAM,KAAK,YAAY;AAAA,SACjD;AACD,eAAS,KAAK,SAAS,SAAS;AAAA,IACpC;AACA,WAAO;AAAA,EACX;AAAA,EACA,SAAS;AACL,WAAO;AAAA,MACH,GAAG,MAAM,OAAO;AAAA,MAChB,UAAU,KAAK;AAAA,IACnB;AAAA,EACJ;AACJ;AACA,2BAA2B,OAAO;AAElC,IAAM,0CAAN,cAAsD,WAAW;AAAA,EAC7D,YAAY,EAAE,OAAAD,SAAQ,cAAc,GAAG,WAAW,IAAI,CAAC,GAAG;AACtD,UAAM,UAAU;AAChB,SAAK,QAAQ,CAAC;AACd,QAAIA,QAAO;AACP,WAAK,WAAWA,MAAK;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,QAAQ,aAAa,aAAa,aAAa;AAC3C,QAAI,eAAe;AACnB,WAAO,cAAc,GAAG;AACpB,YAAM,WAAW,IAAI,2BAA2B;AAChD,qBAAe,SAAS,QAAQ,aAAa,cAAc,WAAW;AACtE,UAAI,iBAAiB,IAAI;AACrB,aAAK,cAAc;AACnB,aAAK,QAAQ,SAAS;AACtB,eAAO;AAAA,MACX;AACA,WAAK,eAAe,SAAS;AAC7B,qBAAe,SAAS;AACxB,WAAK,MAAM,KAAK,QAAQ;AAAA,IAC5B;AACA,WAAO;AAAA,EACX;AAAA,EACA,MAAM,UAAU,SAAS;AACrB,UAAM,aAAa,CAAC;AACpB,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,YAAM,WAAW,KAAK,MAAM,CAAC,EAAE,MAAM,QAAQ;AAC7C,UAAI,SAAS,eAAe,GAAG;AAC3B,aAAK,QAAQ,KAAK,MAAM,CAAC,EAAE;AAC3B,eAAO;AAAA,MACX;AACA,iBAAW,KAAK,QAAQ;AAAA,IAC5B;AACA,WAAOF,QAAO,UAAU;AAAA,EAC5B;AAAA,EACA,WAAWW,SAAQ;AACf,SAAK,QAAQ,CAAC;AACd,QAAI,OAAO;AACX,QAAI,OAAO;AACX,QAAI,MAAM;AACV,OAAG;AACC,aAAOA,QAAO,QAAQ,KAAK,IAAI;AAC/B,UAAI,SAAS;AACT,cAAMA,QAAO,UAAU,IAAI;AAAA;AAE3B,cAAMA,QAAO,UAAU,MAAM,IAAI;AACrC,aAAO,OAAO;AACd,YAAM,WAAW,IAAI,2BAA2B;AAChD,eAAS,WAAW,SAAS,KAAK,EAAE;AACpC,UAAI,MAAM,SAAS,QAAQ;AACvB,eAAO;AACX,WAAK,MAAM,KAAK,QAAQ;AAAA,IAC5B,SAAS,SAAS;AAClB,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,QAAI,SAAS;AACb,QAAI,YAAY;AAChB,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,kBAAY,KAAK,MAAM,CAAC,EAAE;AAC1B,UAAI,SAAS,KAAK,MAAM,CAAC,EAAE,SAAS;AACpC,UAAI,MAAM;AACN,iBAAS,GAAG,MAAM;AACtB,UAAI,WAAW;AACX,iBAAS,IAAI,MAAM;AACnB,kBAAU;AAAA,MACd;AAEI,kBAAU;AAAA,IAClB;AACA,WAAO;AAAA,EACX;AAAA,EACA,SAAS;AACL,UAAM,SAAS;AAAA,MACX,GAAG,MAAM,OAAO;AAAA,MAChB,OAAO,KAAK,SAAS;AAAA,MACrB,UAAU,CAAC;AAAA,IACf;AACA,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ;AACnC,aAAO,SAAS,KAAK,KAAK,MAAM,CAAC,EAAE,OAAO,CAAC;AAC/C,WAAO;AAAA,EACX;AACJ;AACA,wCAAwC,OAAO;AAE/C,IAAI;AACJ,IAAM,2BAAN,cAAuC,UAAU;AAAA,EAC7C,WAAW;AACP,WAAO,KAAK,WAAW,SAAS;AAAA,EACpC;AAAA,EACA,SAAST,QAAO;AACZ,SAAK,WAAW,WAAWA,MAAK;AAAA,EACpC;AAAA,EACA,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,YAAY,uCAAuC;AACzD,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AAAA,EACA,kBAAkB;AACd,WAAO,GAAG,KAAK,YAAY,IAAI,MAAM,KAAK,WAAW,SAAS,KAAK,OAAO;AAAA,EAC9E;AAAA,EACA,SAAS;AACL,WAAO;AAAA,MACH,GAAG,MAAM,OAAO;AAAA,MAChB,OAAO,KAAK,SAAS;AAAA,IACzB;AAAA,EACJ;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,2BAA2B;AACzC,GAAG;AACH,yBAAyB,OAAO;AAEhC,IAAI;AACJ,IAAM,WAAN,cAAuB,YAAY;AAAA,EAC/B,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,WAAW;AACzB,GAAG;AACH,SAAS,OAAO;AAEhB,IAAI;AACJ,IAAMU,OAAN,cAAkB,YAAY;AAAA,EAC1B,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAOA;AAAA,CACN,MAAM;AACH,YAAU,MAAM;AACpB,GAAG;AACHA,KAAI,OAAO;AAEX,IAAM,wBAAN,cAAoC,SAAS,UAAU,EAAE;AAAA,EACrD,YAAY,EAAE,GAAG,WAAW,IAAI,CAAC,GAAG;AAChC,UAAM,UAAU;AAChB,SAAK,YAAY;AACjB,SAAK,QAAQ;AAAA,EACjB;AAAA,EACA,SAAS;AACL,WAAO;AAAA,MACH,GAAG,MAAM,OAAO;AAAA,MAChB,OAAO,KAAK;AAAA,IAChB;AAAA,EACJ;AACJ;AACA,sBAAsB,OAAO;AAE7B,IAAM,8BAAN,cAA0C,sBAAsB;AAChE;AACA,4BAA4B,OAAO;AAEnC,IAAM,yBAAN,cAAqC,gBAAgB;AAAA,EACjD,YAAY,EAAE,GAAG,WAAW,IAAI,CAAC,GAAG;AAChC,UAAM,YAAY,2BAA2B;AAAA,EACjD;AAAA,EACA,WAAW,aAAa;AACpB,SAAK,WAAW,QAAQ,OAAO,aAAa,MAAM,MAAgB,sBAAsB,aAAa,WAAW,CAAC;AAAA,EACrH;AAAA,EACA,WAAW,aAAa;AACpB,UAAM,SAAS,YAAY;AAC3B,UAAM,OAAO,KAAK,WAAW,eAAe,IAAI,WAAW,MAAM;AACjE,aAAS,IAAI,GAAG,IAAI,QAAQ;AACxB,WAAK,CAAC,IAAI,YAAY,WAAW,CAAC;AACtC,SAAK,WAAW,QAAQ;AAAA,EAC5B;AACJ;AACA,uBAAuB,OAAO;AAE9B,IAAM,4BAAN,cAAwC,uBAAuB;AAAA,EAC3D,WAAW,aAAa;AACpB,SAAK,WAAW,eAAyB,sBAAsB,aAAa,WAAW;AACvF,QAAI;AACA,WAAK,WAAW,QAAkB,QAAQ,aAAa,WAAW;AAAA,IACtE,SACO,IAAI;AACP,WAAK,SAAS,KAAK,sCAAsC,EAAE,oBAAoB;AAC/E,WAAK,WAAW,QAAkB,QAAQ,SAAS,WAAW;AAAA,IAClE;AAAA,EACJ;AAAA,EACA,WAAW,aAAa;AACpB,SAAK,WAAW,eAAe,IAAI,WAAqB,QAAQ,eAAe,WAAW,CAAC;AAC3F,SAAK,WAAW,QAAQ;AAAA,EAC5B;AACJ;AACA,0BAA0B,OAAO;AAEjC,IAAI;AACJ,IAAM,aAAN,cAAyB,0BAA0B;AAAA,EAC/C,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,aAAa;AAC3B,GAAG;AACH,WAAW,OAAO;AAElB,IAAM,2BAAN,cAAuC,uBAAuB;AAAA,EAC1D,WAAW,aAAa;AACpB,SAAK,WAAW,QAAkB,QAAQ,cAAc,WAAW;AACnE,SAAK,WAAW,eAAyB,sBAAsB,aAAa,WAAW;AAAA,EAC3F;AAAA,EACA,WAAW,aAAa;AACpB,SAAK,WAAW,QAAQ;AACxB,SAAK,WAAW,eAAe,IAAI,WAAqB,QAAQ,gBAAgB,WAAW,CAAC;AAAA,EAChG;AACJ;AACA,yBAAyB,OAAO;AAEhC,IAAI;AACJ,IAAM,YAAN,cAAwB,yBAAyB;AAAA,EAC7C,YAAY,EAAE,GAAG,WAAW,IAAI,CAAC,GAAG;AAChC,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,YAAY;AAC1B,GAAG;AACH,UAAU,OAAO;AAEjB,IAAM,iCAAN,cAA6C,uBAAuB;AAAA,EAChE,WAAW,aAAa;AACpB,UAAM,aAAa,YAAY,OAAO,WAAW,IAAI,YAAY,MAAM,EAAE,SAAS,YAAY,MAAM,CAAC;AACrG,UAAM,YAAY,IAAI,WAAW,UAAU;AAC3C,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK,GAAG;AAC1C,gBAAU,CAAC,IAAI,UAAU,IAAI,CAAC;AAC9B,gBAAU,IAAI,CAAC,IAAI,UAAU,IAAI,CAAC;AAClC,gBAAU,IAAI,CAAC,IAAI;AACnB,gBAAU,IAAI,CAAC,IAAI;AAAA,IACvB;AACA,SAAK,WAAW,QAAQ,OAAO,aAAa,MAAM,MAAM,IAAI,YAAY,UAAU,CAAC;AAAA,EACvF;AAAA,EACA,WAAW,aAAa;AACpB,UAAM,YAAY,YAAY;AAC9B,UAAM,eAAe,KAAK,WAAW,eAAe,IAAI,WAAW,YAAY,CAAC;AAChF,aAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAChC,YAAM,UAAkB,WAAW,YAAY,WAAW,CAAC,GAAG,CAAC;AAC/D,YAAM,WAAW,IAAI,WAAW,OAAO;AACvC,UAAI,SAAS,SAAS;AAClB;AACJ,YAAM,MAAM,IAAI,SAAS;AACzB,eAAS,IAAK,SAAS,SAAS,GAAI,KAAK,GAAG;AACxC,qBAAa,IAAI,IAAI,IAAI,GAAG,IAAI,SAAS,CAAC;AAAA,IAClD;AACA,SAAK,WAAW,QAAQ;AAAA,EAC5B;AACJ;AACA,+BAA+B,OAAO;AAEtC,IAAI;AACJ,IAAM,kBAAN,cAA8B,+BAA+B;AAAA,EACzD,YAAY,EAAE,GAAG,WAAW,IAAI,CAAC,GAAG;AAChC,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,kBAAkB;AAChC,GAAG;AACH,gBAAgB,OAAO;AAEvB,IAAI;AACJ,IAAM,gBAAN,cAA4B,uBAAuB;AAAA,EAC/C,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,gBAAgB;AAC9B,GAAG;AACH,cAAc,OAAO;AAErB,IAAI;AACJ,IAAM,kBAAN,cAA8B,uBAAuB;AAAA,EACjD,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,kBAAkB;AAChC,GAAG;AACH,gBAAgB,OAAO;AAEvB,IAAI;AACJ,IAAM,gBAAN,cAA4B,uBAAuB;AAAA,EAC/C,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,gBAAgB;AAC9B,GAAG;AACH,cAAc,OAAO;AAErB,IAAI;AACJ,IAAM,iBAAN,cAA6B,uBAAuB;AAAA,EAChD,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,iBAAiB;AAC/B,GAAG;AACH,eAAe,OAAO;AAEtB,IAAI;AACJ,IAAM,YAAN,cAAwB,uBAAuB;AAAA,EAC3C,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,YAAY;AAC1B,GAAG;AACH,UAAU,OAAO;AAEjB,IAAI;AACJ,IAAM,gBAAN,cAA4B,uBAAuB;AAAA,EAC/C,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,gBAAgB;AAC9B,GAAG;AACH,cAAc,OAAO;AAErB,IAAI;AACJ,IAAM,gBAAN,cAA4B,uBAAuB;AAAA,EAC/C,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,gBAAgB;AAC9B,GAAG;AACH,cAAc,OAAO;AAErB,IAAI;AACJ,IAAM,gBAAN,cAA4B,uBAAuB;AAAA,EAC/C,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,gBAAgB;AAC9B,GAAG;AACH,cAAc,OAAO;AAErB,IAAI;AACJ,IAAM,kBAAN,cAA8B,uBAAuB;AAAA,EACjD,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,kBAAkB;AAChC,GAAG;AACH,gBAAgB,OAAO;AAEvB,IAAI;AACJ,IAAM,UAAN,cAAsB,cAAc;AAAA,EAChC,YAAY,EAAE,OAAAV,QAAO,WAAW,GAAG,WAAW,IAAI,CAAC,GAAG;AAClD,UAAM,UAAU;AAChB,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,MAAM;AACX,SAAK,OAAO;AACZ,SAAK,SAAS;AACd,SAAK,SAAS;AACd,QAAIA,QAAO;AACP,WAAK,WAAWA,MAAK;AACrB,WAAK,WAAW,eAAe,IAAI,WAAWA,OAAM,MAAM;AAC1D,eAAS,IAAI,GAAG,IAAIA,OAAM,QAAQ;AAC9B,aAAK,WAAW,aAAa,CAAC,IAAIA,OAAM,WAAW,CAAC;AAAA,IAC5D;AACA,QAAI,WAAW;AACX,WAAK,SAAS,SAAS;AACvB,WAAK,WAAW,eAAe,IAAI,WAAW,KAAK,SAAS,CAAC;AAAA,IACjE;AACA,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AAAA,EACA,WAAW,aAAa;AACpB,SAAK,WAAW,OAAO,aAAa,MAAM,MAAgB,sBAAsB,aAAa,WAAW,CAAC,CAAC;AAAA,EAC9G;AAAA,EACA,WAAW;AACP,UAAM,MAAM,KAAK,SAAS;AAC1B,UAAM,SAAS,IAAI,YAAY,IAAI,MAAM;AACzC,UAAM,OAAO,IAAI,WAAW,MAAM;AAClC,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ;AAC5B,WAAK,CAAC,IAAI,IAAI,WAAW,CAAC;AAC9B,WAAO;AAAA,EACX;AAAA,EACA,SAAS,WAAW;AAChB,SAAK,OAAO,UAAU,eAAe;AACrC,SAAK,QAAQ,UAAU,YAAY,IAAI;AACvC,SAAK,MAAM,UAAU,WAAW;AAChC,SAAK,OAAO,UAAU,YAAY;AAClC,SAAK,SAAS,UAAU,cAAc;AACtC,SAAK,SAAS,UAAU,cAAc;AAAA,EAC1C;AAAA,EACA,SAAS;AACL,WAAQ,IAAI,KAAK,KAAK,IAAI,KAAK,MAAM,KAAK,QAAQ,GAAG,KAAK,KAAK,KAAK,MAAM,KAAK,QAAQ,KAAK,MAAM,CAAC;AAAA,EACvG;AAAA,EACA,WAAW,aAAa;AACpB,UAAM,SAAS;AACf,UAAM,cAAc,OAAO,KAAK,WAAW;AAC3C,QAAI,gBAAgB,MAAM;AACtB,WAAK,QAAQ;AACb;AAAA,IACJ;AACA,UAAM,OAAO,SAAS,YAAY,CAAC,GAAG,EAAE;AACxC,QAAI,QAAQ;AACR,WAAK,OAAO,OAAO;AAAA;AAEnB,WAAK,OAAO,MAAO;AACvB,SAAK,QAAQ,SAAS,YAAY,CAAC,GAAG,EAAE;AACxC,SAAK,MAAM,SAAS,YAAY,CAAC,GAAG,EAAE;AACtC,SAAK,OAAO,SAAS,YAAY,CAAC,GAAG,EAAE;AACvC,SAAK,SAAS,SAAS,YAAY,CAAC,GAAG,EAAE;AACzC,SAAK,SAAS,SAAS,YAAY,CAAC,GAAG,EAAE;AAAA,EAC7C;AAAA,EACA,SAAS,WAAW,OAAO;AACvB,QAAI,aAAa,OAAO;AACpB,YAAM,cAAc,IAAI,MAAM,CAAC;AAC/B,kBAAY,CAAC,IAAY,UAAY,KAAK,OAAO,MAAS,KAAK,OAAO,OAAS,KAAK,OAAO,KAAQ,CAAC;AACpG,kBAAY,CAAC,IAAY,UAAU,KAAK,OAAO,CAAC;AAChD,kBAAY,CAAC,IAAY,UAAU,KAAK,KAAK,CAAC;AAC9C,kBAAY,CAAC,IAAY,UAAU,KAAK,MAAM,CAAC;AAC/C,kBAAY,CAAC,IAAY,UAAU,KAAK,QAAQ,CAAC;AACjD,kBAAY,CAAC,IAAY,UAAU,KAAK,QAAQ,CAAC;AACjD,kBAAY,CAAC,IAAI;AACjB,aAAO,YAAY,KAAK,EAAE;AAAA,IAC9B;AACA,WAAO,MAAM,SAAS,QAAQ;AAAA,EAClC;AAAA,EACA,kBAAkB;AACd,WAAO,GAAG,KAAK,YAAY,IAAI,MAAM,KAAK,OAAO,EAAE,YAAY,CAAC;AAAA,EACpE;AAAA,EACA,SAAS;AACL,WAAO;AAAA,MACH,GAAG,MAAM,OAAO;AAAA,MAChB,MAAM,KAAK;AAAA,MACX,OAAO,KAAK;AAAA,MACZ,KAAK,KAAK;AAAA,MACV,MAAM,KAAK;AAAA,MACX,QAAQ,KAAK;AAAA,MACb,QAAQ,KAAK;AAAA,IACjB;AAAA,EACJ;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,UAAU;AACxB,GAAG;AACH,QAAQ,OAAO;AAEf,IAAI;AACJ,IAAM,kBAAN,cAA8B,QAAQ;AAAA,EAClC,YAAY,aAAa,CAAC,GAAG;AACzB,QAAI;AACJ,UAAM,UAAU;AAChB,KAAC,KAAK,KAAK,iBAAiB,QAAQ,OAAO,SAAS,KAAM,KAAK,cAAc;AAC7E,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AAAA,EACA,SAAS,WAAW;AAChB,UAAM,SAAS,SAAS;AACxB,SAAK,cAAc,UAAU,mBAAmB;AAAA,EACpD;AAAA,EACA,SAAS;AACL,UAAM,UAAU,KAAK,IAAI,KAAK,MAAM,KAAK,QAAQ,GAAG,KAAK,KAAK,KAAK,MAAM,KAAK,QAAQ,KAAK,QAAQ,KAAK,WAAW;AACnH,WAAQ,IAAI,KAAK,OAAO;AAAA,EAC5B;AAAA,EACA,WAAW,aAAa;AACpB,QAAI,QAAQ;AACZ,QAAI,aAAa;AACjB,QAAI,iBAAiB;AACrB,QAAI,eAAe;AACnB,QAAI;AACJ,QAAI,iBAAiB;AACrB,QAAI,mBAAmB;AACvB,QAAI,YAAY,YAAY,SAAS,CAAC,MAAM,KAAK;AAC7C,mBAAa,YAAY,UAAU,GAAG,YAAY,SAAS,CAAC;AAC5D,cAAQ;AAAA,IACZ,OACK;AACD,YAAME,UAAS,IAAI,OAAO,YAAY,YAAY,SAAS,CAAC,CAAC;AAC7D,UAAI,MAAMA,QAAO,QAAQ,CAAC;AACtB,cAAM,IAAI,MAAM,mCAAmC;AACvD,mBAAa;AAAA,IACjB;AACA,QAAI,OAAO;AACP,UAAI,WAAW,QAAQ,GAAG,MAAM;AAC5B,cAAM,IAAI,MAAM,mCAAmC;AACvD,UAAI,WAAW,QAAQ,GAAG,MAAM;AAC5B,cAAM,IAAI,MAAM,mCAAmC;AAAA,IAC3D,OACK;AACD,UAAI,aAAa;AACjB,UAAI,qBAAqB,WAAW,QAAQ,GAAG;AAC/C,UAAI,mBAAmB;AACvB,UAAI,uBAAuB,IAAI;AAC3B,6BAAqB,WAAW,QAAQ,GAAG;AAC3C,qBAAa;AAAA,MACjB;AACA,UAAI,uBAAuB,IAAI;AAC3B,2BAAmB,WAAW,UAAU,qBAAqB,CAAC;AAC9D,qBAAa,WAAW,UAAU,GAAG,kBAAkB;AACvD,YAAK,iBAAiB,WAAW,KAAO,iBAAiB,WAAW;AAChE,gBAAM,IAAI,MAAM,mCAAmC;AACvD,YAAIA,UAAS,SAAS,iBAAiB,UAAU,GAAG,CAAC,GAAG,EAAE;AAC1D,YAAI,MAAMA,QAAO,QAAQ,CAAC;AACtB,gBAAM,IAAI,MAAM,mCAAmC;AACvD,yBAAiB,aAAaA;AAC9B,YAAI,iBAAiB,WAAW,GAAG;AAC/B,UAAAA,UAAS,SAAS,iBAAiB,UAAU,GAAG,CAAC,GAAG,EAAE;AACtD,cAAI,MAAMA,QAAO,QAAQ,CAAC;AACtB,kBAAM,IAAI,MAAM,mCAAmC;AACvD,6BAAmB,aAAaA;AAAA,QACpC;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,wBAAwB,WAAW,QAAQ,GAAG;AAClD,QAAI,0BAA0B;AAC1B,8BAAwB,WAAW,QAAQ,GAAG;AAClD,QAAI,0BAA0B,IAAI;AAC9B,YAAM,oBAAoB,IAAI,OAAO,IAAI,WAAW,UAAU,qBAAqB,CAAC,EAAE;AACtF,UAAI,MAAM,kBAAkB,QAAQ,CAAC;AACjC,cAAM,IAAI,MAAM,mCAAmC;AACvD,qBAAe,kBAAkB,QAAQ;AACzC,uBAAiB,WAAW,UAAU,GAAG,qBAAqB;AAAA,IAClE;AAEI,uBAAiB;AACrB,YAAQ,MAAM;AAAA,MACV,KAAM,eAAe,WAAW;AAC5B,iBAAS;AACT,YAAI,0BAA0B;AAC1B,gBAAM,IAAI,MAAM,mCAAmC;AACvD;AAAA,MACJ,KAAM,eAAe,WAAW;AAC5B,iBAAS;AACT,YAAI,0BAA0B,IAAI;AAC9B,cAAI,iBAAiB,KAAK;AAC1B,eAAK,SAAS,KAAK,MAAM,cAAc;AACvC,2BAAiB,MAAM,iBAAiB,KAAK;AAC7C,eAAK,SAAS,KAAK,MAAM,cAAc;AACvC,2BAAiB,OAAQ,iBAAiB,KAAK;AAC/C,eAAK,cAAc,KAAK,MAAM,cAAc;AAAA,QAChD;AACA;AAAA,MACJ,KAAM,eAAe,WAAW;AAC5B,iBAAS;AACT,YAAI,0BAA0B,IAAI;AAC9B,cAAI,iBAAiB,KAAK;AAC1B,eAAK,SAAS,KAAK,MAAM,cAAc;AACvC,2BAAiB,OAAQ,iBAAiB,KAAK;AAC/C,eAAK,cAAc,KAAK,MAAM,cAAc;AAAA,QAChD;AACA;AAAA,MACJ,KAAM,eAAe,WAAW;AAC5B,iBAAS;AACT,YAAI,0BAA0B,IAAI;AAC9B,gBAAM,iBAAiB,MAAO;AAC9B,eAAK,cAAc,KAAK,MAAM,cAAc;AAAA,QAChD;AACA;AAAA,MACJ;AACI,cAAM,IAAI,MAAM,mCAAmC;AAAA,IAC3D;AACA,UAAM,cAAc,OAAO,KAAK,cAAc;AAC9C,QAAI,gBAAgB;AAChB,YAAM,IAAI,MAAM,mCAAmC;AACvD,aAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AACzC,cAAQ,GAAG;AAAA,QACP,KAAK;AACD,eAAK,OAAO,SAAS,YAAY,CAAC,GAAG,EAAE;AACvC;AAAA,QACJ,KAAK;AACD,eAAK,QAAQ,SAAS,YAAY,CAAC,GAAG,EAAE;AACxC;AAAA,QACJ,KAAK;AACD,eAAK,MAAM,SAAS,YAAY,CAAC,GAAG,EAAE;AACtC;AAAA,QACJ,KAAK;AACD,eAAK,OAAO,SAAS,YAAY,CAAC,GAAG,EAAE,IAAI;AAC3C;AAAA,QACJ,KAAK;AACD,eAAK,SAAS,SAAS,YAAY,CAAC,GAAG,EAAE,IAAI;AAC7C;AAAA,QACJ,KAAK;AACD,eAAK,SAAS,SAAS,YAAY,CAAC,GAAG,EAAE;AACzC;AAAA,QACJ;AACI,gBAAM,IAAI,MAAM,mCAAmC;AAAA,MAC3D;AAAA,IACJ;AACA,QAAI,UAAU,OAAO;AACjB,YAAM,WAAW,IAAI,KAAK,KAAK,MAAM,KAAK,OAAO,KAAK,KAAK,KAAK,MAAM,KAAK,QAAQ,KAAK,QAAQ,KAAK,WAAW;AAChH,WAAK,OAAO,SAAS,eAAe;AACpC,WAAK,QAAQ,SAAS,YAAY;AAClC,WAAK,MAAM,SAAS,UAAU;AAC9B,WAAK,OAAO,SAAS,YAAY;AACjC,WAAK,SAAS,SAAS,cAAc;AACrC,WAAK,SAAS,SAAS,cAAc;AACrC,WAAK,cAAc,SAAS,mBAAmB;AAAA,IACnD;AAAA,EACJ;AAAA,EACA,SAAS,WAAW,OAAO;AACvB,QAAI,aAAa,OAAO;AACpB,YAAM,cAAc,CAAC;AACrB,kBAAY,KAAa,UAAU,KAAK,MAAM,CAAC,CAAC;AAChD,kBAAY,KAAa,UAAU,KAAK,OAAO,CAAC,CAAC;AACjD,kBAAY,KAAa,UAAU,KAAK,KAAK,CAAC,CAAC;AAC/C,kBAAY,KAAa,UAAU,KAAK,MAAM,CAAC,CAAC;AAChD,kBAAY,KAAa,UAAU,KAAK,QAAQ,CAAC,CAAC;AAClD,kBAAY,KAAa,UAAU,KAAK,QAAQ,CAAC,CAAC;AAClD,UAAI,KAAK,gBAAgB,GAAG;AACxB,oBAAY,KAAK,GAAG;AACpB,oBAAY,KAAa,UAAU,KAAK,aAAa,CAAC,CAAC;AAAA,MAC3D;AACA,kBAAY,KAAK,GAAG;AACpB,aAAO,YAAY,KAAK,EAAE;AAAA,IAC9B;AACA,WAAO,MAAM,SAAS,QAAQ;AAAA,EAClC;AAAA,EACA,SAAS;AACL,WAAO;AAAA,MACH,GAAG,MAAM,OAAO;AAAA,MAChB,aAAa,KAAK;AAAA,IACtB;AAAA,EACJ;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,kBAAkB;AAChC,GAAG;AACH,gBAAgB,OAAO;AAEvB,IAAI;AACJ,IAAM,OAAN,cAAmB,WAAW;AAAA,EAC1B,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,OAAO;AACrB,GAAG;AACH,KAAK,OAAO;AAEZ,IAAI;AACJ,IAAM,YAAN,cAAwB,WAAW;AAAA,EAC/B,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,YAAY;AAC1B,GAAG;AACH,UAAU,OAAO;AAEjB,IAAI;AACJ,IAAM,WAAN,cAAuB,WAAW;AAAA,EAC9B,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,WAAW;AACzB,GAAG;AACH,SAAS,OAAO;AAEhB,IAAI;AACJ,IAAM,WAAN,cAAuB,WAAW;AAAA,EAC9B,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,OAAO;AAAA,CACN,MAAM;AACH,YAAU,WAAW;AACzB,GAAG;AACH,SAAS,OAAO;AAEhB,IAAI;AACJ,IAAM,OAAN,cAAmB,WAAW;AAAA,EAC1B,YAAY,aAAa,CAAC,GAAG;AACzB,UAAM,UAAU;AAChB,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAAA,EAC7B;AACJ;AACA,KAAK;AAAA,CACJ,MAAM;AACH,YAAU,OAAO;AACrB,GAAG;AACH,KAAK,OAAO;AAEZ,IAAM,MAAN,MAAU;AAAA,EACN,YAAY,EAAE,MAAAE,QAAO,cAAc,UAAAC,YAAW,MAAM,IAAI,CAAC,GAAG;AACxD,SAAK,OAAOD;AACZ,SAAK,WAAWC;AAAA,EACpB;AACJ;AAEA,IAAM,SAAN,cAAqB,IAAI;AAAA,EACrB,YAAY,EAAE,OAAAL,SAAQ,CAAC,GAAG,GAAG,WAAW,IAAI,CAAC,GAAG;AAC5C,UAAM,UAAU;AAChB,SAAK,QAAQA;AAAA,EACjB;AACJ;AAEA,IAAM,WAAN,cAAuB,IAAI;AAAA,EACvB,YAAY,EAAE,OAAAA,SAAQ,IAAI,IAAI,GAAG,QAAQ,OAAO,GAAG,WAAW,IAAI,CAAC,GAAG;AAClE,UAAM,UAAU;AAChB,SAAK,QAAQA;AACb,SAAK,QAAQ;AAAA,EACjB;AACJ;AAEA,IAAM,UAAN,MAAc;AAAA,EACV,IAAI,OAAO;AACP,WAAO,KAAK,SAAS,MAAM,EAAE;AAAA,EACjC;AAAA,EACA,IAAI,KAAKA,QAAO;AACZ,SAAK,WAAqB,sBAAsB,aAAaA,MAAK;AAAA,EACtE;AAAA,EACA,YAAY,EAAE,OAAO,WAAW,IAAI,CAAC,GAAG;AACpC,SAAK,WAAqB,sBAAsB,aAAa,IAAI;AAAA,EACrE;AAAA,EACA,QAAQ,aAAa,aAAa,aAAa;AAC3C,UAAM,YAAY,cAAc;AAChC,SAAK,WAAqB,sBAAsB,aAAa,WAAW,EAAE,SAAS,aAAa,SAAS;AACzG,WAAO;AAAA,EACX;AAAA,EACA,MAAM,WAAW;AACb,WAAO,KAAK,SAAS,MAAM,EAAE;AAAA,EACjC;AACJ;AAEA,SAAS,cAAc,MAAM,WAAW,aAAa;AACjD,MAAI,uBAAuB,QAAQ;AAC/B,eAAW,WAAW,YAAY,OAAO;AACrC,YAAM,SAAS,cAAc,MAAM,WAAW,OAAO;AACrD,UAAI,OAAO,UAAU;AACjB,eAAO;AAAA,UACH,UAAU;AAAA,UACV,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AACA;AACI,YAAM,UAAU;AAAA,QACZ,UAAU;AAAA,QACV,QAAQ,EAAE,OAAO,+BAA+B;AAAA,MACpD;AACA,UAAI,YAAY,eAAe,IAAI;AAC/B,gBAAQ,OAAO,YAAY;AAC/B,aAAO;AAAA,IACX;AAAA,EACJ;AACA,MAAI,uBAAuB,KAAK;AAC5B,QAAI,YAAY,eAAe,IAAI;AAC/B,WAAK,YAAY,IAAI,IAAI;AAC7B,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,MAAK,gBAAgB,WAAY,OAAO;AACpC,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ,EAAE,OAAO,oBAAoB;AAAA,IACzC;AAAA,EACJ;AACA,MAAK,qBAAqB,WAAY,OAAO;AACzC,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ,EAAE,OAAO,mBAAmB;AAAA,IACxC;AAAA,EACJ;AACA,MAAK,uBAAuB,WAAY,OAAO;AAC3C,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ,EAAE,OAAO,qBAAqB;AAAA,IAC1C;AAAA,EACJ;AACA,MAAK,YAAY,gBAAiB,OAAO;AACrC,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ,EAAE,OAAO,qBAAqB;AAAA,IAC1C;AAAA,EACJ;AACA,MAAK,YAAY,YAAY,YAAa,OAAO;AAC7C,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ,EAAE,OAAO,qBAAqB;AAAA,IAC1C;AAAA,EACJ;AACA,MAAK,UAAU,YAAY,YAAa,OAAO;AAC3C,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ,EAAE,OAAO,qBAAqB;AAAA,IAC1C;AAAA,EACJ;AACA,QAAM,YAAY,YAAY,QAAQ,MAAM,KAAK;AACjD,MAAI,UAAU,eAAe,GAAG;AAC5B,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ,EAAE,OAAO,0CAA0C;AAAA,IAC/D;AAAA,EACJ;AACA,QAAM,gBAAgB,YAAY,QAAQ,QAAQ,WAAW,GAAG,UAAU,UAAU;AACpF,MAAI,kBAAkB,IAAI;AACtB,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ,EAAE,OAAO,0CAA0C;AAAA,IAC/D;AAAA,EACJ;AACA,MAAI,YAAY,QAAQ,eAAe,SAAS,MAAM,OAAO;AACzD,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ,EAAE,OAAO,qBAAqB;AAAA,IAC1C;AAAA,EACJ;AACA,MAAI,YAAY,QAAQ,aAAa,UAAU,QAAQ,UAAU;AAC7D,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,MAAI,YAAY,QAAQ,eAAe,UAAU,MAAM,OAAO;AAC1D,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ,EAAE,OAAO,qBAAqB;AAAA,IAC1C;AAAA,EACJ;AACA,MAAI,YAAY,QAAQ,cAAc,UAAU,QAAQ,WAAW;AAC/D,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,MAAI,YAAY,QAAQ,eAAe,cAAc,MAAM,OAAO;AAC9D,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ,EAAE,OAAO,qBAAqB;AAAA,IAC1C;AAAA,EACJ;AACA,MAAI,YAAY,QAAQ,kBAAkB,UAAU,QAAQ,eAAe;AACvE,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,MAAI,EAAE,eAAe,YAAY,UAAU;AACvC,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ,EAAE,OAAO,qBAAqB;AAAA,IAC1C;AAAA,EACJ;AACA,MAAI,YAAY,QAAQ,cAAc,UAAU,QAAQ,WAAW;AAC/D,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,MAAI,YAAY,QAAQ,WAAW;AAC/B,QAAK,kBAAkB,YAAY,YAAa,OAAO;AACnD,aAAO;AAAA,QACH,UAAU;AAAA,QACV,QAAQ,EAAE,OAAO,qBAAqB;AAAA,MAC1C;AAAA,IACJ;AACA,UAAM,aAAa,YAAY,QAAQ;AACvC,UAAM,WAAW,UAAU,QAAQ;AACnC,QAAI,WAAW,WAAW,SAAS,QAAQ;AACvC,aAAO;AAAA,QACH,UAAU;AAAA,QACV,QAAQ;AAAA,MACZ;AAAA,IACJ;AACA,aAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AACxC,UAAI,WAAW,CAAC,MAAM,SAAS,CAAC,GAAG;AAC/B,eAAO;AAAA,UACH,UAAU;AAAA,UACV,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACA,MAAI,YAAY,MAAM;AAClB,gBAAY,OAAO,YAAY,KAAK,QAAQ,cAAc,YAAY;AACtE,QAAI,YAAY;AACZ,WAAK,YAAY,IAAI,IAAI;AAAA,EACjC;AACA,MAAI,uBAAuB,UAAU,aAAa;AAC9C,QAAI,YAAY;AAChB,QAAI,SAAS;AAAA,MACT,UAAU;AAAA,MACV,QAAQ,EAAE,OAAO,gBAAgB;AAAA,IACrC;AACA,QAAI,YAAY,YAAY,WAAW,MAAM;AAC7C,QAAI,YAAY,GAAG;AACf,UAAI,YAAY,WAAW,MAAM,CAAC,aAAa,UAAU;AACrD,oBAAY,UAAU,WAAW,MAAM;AAAA,MAC3C;AAAA,IACJ;AACA,QAAI,cAAc,GAAG;AACjB,aAAO;AAAA,QACH,UAAU;AAAA,QACV,QAAQ;AAAA,MACZ;AAAA,IACJ;AACA,QAAK,UAAU,WAAW,MAAM,WAAW,KACnC,YAAY,WAAW,MAAM,WAAW,GAAI;AAChD,UAAI,YAAY;AAChB,eAAS,IAAI,GAAG,IAAI,YAAY,WAAW,MAAM,QAAQ;AACrD,oBAAY,cAAc,YAAY,WAAW,MAAM,CAAC,EAAE,YAAY;AAC1E,UAAI,WAAW;AACX,eAAO;AAAA,UACH,UAAU;AAAA,UACV,QAAQ;AAAA,QACZ;AAAA,MACJ;AACA,UAAI,YAAY,MAAM;AAClB,oBAAY,OAAO,YAAY,KAAK,QAAQ,cAAc,YAAY;AACtE,YAAI,YAAY;AACZ,iBAAO,KAAK,YAAY,IAAI;AAAA,MACpC;AACA,WAAK,QAAQ;AACb,aAAO;AAAA,QACH,UAAU;AAAA,QACV,QAAQ;AAAA,MACZ;AAAA,IACJ;AACA,aAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAChC,UAAK,IAAI,aAAc,UAAU,WAAW,MAAM,QAAQ;AACtD,YAAI,YAAY,WAAW,MAAM,CAAC,EAAE,aAAa,OAAO;AACpD,gBAAM,UAAU;AAAA,YACZ,UAAU;AAAA,YACV,QAAQ;AAAA,UACZ;AACA,eAAK,QAAQ;AACb,cAAI,YAAY,MAAM;AAClB,wBAAY,OAAO,YAAY,KAAK,QAAQ,cAAc,YAAY;AACtE,gBAAI,YAAY,MAAM;AAClB,qBAAO,KAAK,YAAY,IAAI;AAC5B,sBAAQ,OAAO,YAAY;AAAA,YAC/B;AAAA,UACJ;AACA,iBAAO;AAAA,QACX;AAAA,MACJ,OACK;AACD,YAAI,YAAY,WAAW,MAAM,CAAC,aAAa,UAAU;AACrD,mBAAS,cAAc,MAAM,UAAU,WAAW,MAAM,CAAC,GAAG,YAAY,WAAW,MAAM,CAAC,EAAE,KAAK;AACjG,cAAI,OAAO,aAAa,OAAO;AAC3B,gBAAI,YAAY,WAAW,MAAM,CAAC,EAAE;AAChC;AAAA,iBACC;AACD,kBAAI,YAAY,MAAM;AAClB,4BAAY,OAAO,YAAY,KAAK,QAAQ,cAAc,YAAY;AACtE,oBAAI,YAAY;AACZ,yBAAO,KAAK,YAAY,IAAI;AAAA,cACpC;AACA,qBAAO;AAAA,YACX;AAAA,UACJ;AACA,cAAK,QAAQ,YAAY,WAAW,MAAM,CAAC,KAAO,YAAY,WAAW,MAAM,CAAC,EAAE,KAAK,SAAS,GAAI;AAChG,gBAAI,YAAY,CAAC;AACjB,gBAAK,SAAS,YAAY,WAAW,MAAM,CAAC,KAAO,YAAY,WAAW,MAAM,CAAC,EAAE;AAC/E,0BAAY;AAAA;AAEZ,0BAAY;AAChB,gBAAI,OAAO,UAAU,YAAY,WAAW,MAAM,CAAC,EAAE,IAAI,MAAM;AAC3D,wBAAU,YAAY,WAAW,MAAM,CAAC,EAAE,IAAI,IAAI,CAAC;AACvD,sBAAU,YAAY,WAAW,MAAM,CAAC,EAAE,IAAI,EAAE,KAAK,UAAU,WAAW,MAAM,CAAC,CAAC;AAAA,UACtF;AAAA,QACJ,OACK;AACD,mBAAS,cAAc,MAAM,UAAU,WAAW,MAAM,IAAI,SAAS,GAAG,YAAY,WAAW,MAAM,CAAC,CAAC;AACvG,cAAI,OAAO,aAAa,OAAO;AAC3B,gBAAI,YAAY,WAAW,MAAM,CAAC,EAAE;AAChC;AAAA,iBACC;AACD,kBAAI,YAAY,MAAM;AAClB,4BAAY,OAAO,YAAY,KAAK,QAAQ,cAAc,YAAY;AACtE,oBAAI,YAAY;AACZ,yBAAO,KAAK,YAAY,IAAI;AAAA,cACpC;AACA,qBAAO;AAAA,YACX;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,OAAO,aAAa,OAAO;AAC3B,YAAM,UAAU;AAAA,QACZ,UAAU;AAAA,QACV,QAAQ;AAAA,MACZ;AACA,UAAI,YAAY,MAAM;AAClB,oBAAY,OAAO,YAAY,KAAK,QAAQ,cAAc,YAAY;AACtE,YAAI,YAAY,MAAM;AAClB,iBAAO,KAAK,YAAY,IAAI;AAC5B,kBAAQ,OAAO,YAAY;AAAA,QAC/B;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,MAAI,YAAY,mBACR,kBAAkB,UAAU,YAAa;AAC7C,UAAM,OAAO,aAAa,UAAU,WAAW,YAAY;AAC3D,QAAI,KAAK,WAAW,IAAI;AACpB,YAAM,UAAU;AAAA,QACZ,UAAU;AAAA,QACV,QAAQ,KAAK;AAAA,MACjB;AACA,UAAI,YAAY,MAAM;AAClB,oBAAY,OAAO,YAAY,KAAK,QAAQ,cAAc,YAAY;AACtE,YAAI,YAAY,MAAM;AAClB,iBAAO,KAAK,YAAY,IAAI;AAC5B,kBAAQ,OAAO,YAAY;AAAA,QAC/B;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,WAAO,cAAc,MAAM,KAAK,QAAQ,YAAY,eAAe;AAAA,EACvE;AACA,SAAO;AAAA,IACH,UAAU;AAAA,IACV,QAAQ;AAAA,EACZ;AACJ;AACA,SAAS,aAAa,aAAa,aAAa;AAC5C,MAAK,uBAAuB,WAAY,OAAO;AAC3C,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ,EAAE,OAAO,0BAA0B;AAAA,IAC/C;AAAA,EACJ;AACA,QAAM,OAAO,aAAuB,sBAAsB,aAAa,WAAW,CAAC;AACnF,MAAI,KAAK,WAAW,IAAI;AACpB,WAAO;AAAA,MACH,UAAU;AAAA,MACV,QAAQ,KAAK;AAAA,IACjB;AAAA,EACJ;AACA,SAAO,cAAc,KAAK,QAAQ,KAAK,QAAQ,WAAW;AAC9D;;;AG3jGO,IAAMW,UAASC,SAAQ;EAC5B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMC,aAAYD,SAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAME,aAAYF,SAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMG,gBAAeH,SAAQ;EAClC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;;;AC5BM,IAAM,cAAc;AACpB,IAAM,WAAW;AACjB,IAAM,aAAa;;;ACiB1B,eAAsB,SAAU,YAAwB,UAAgB;AACtE,QAAM,SAAS,wBAAQ,OAAM;AAC7B,QAAM,eAAe,MAAM,OAAO,QAAQ,YAAY,QAAQ;AAC9D,SAAOI,QAAO,OAAO,YAAY;AACnC;AASA,eAAsB,iBAAkB,KAAiB,UAAkBC,UAAqB;AAC9F,MAAI,IAAI,SAAS,OAAO;AACtB,WAAO,oBAAoB,KAAK,UAAUA,QAAM;EAClD;AAEA,MAAI,IAAI,SAAS,WAAW;AAC1B,WAAO,wBAAwB,KAAK,UAAUA,QAAM;EACtD;AAEA,MAAI,IAAI,SAAS,aAAa;AAC5B,WAAO,0BAA0B,KAAK,UAAUA,QAAM;EACxD;AAEA,MAAI,IAAI,SAAS,SAAS;AACxB,WAAO,sBAAsB,KAAK,UAAUA,QAAM;EACpD;AAEA,QAAM,IAAI,wBAAuB;AACnC;AAKA,eAAsB,wBAAyB,KAAwB,UAAkBA,WAAuB,cAAY;AAC1H,MAAIA,aAAW,cAAc;AAC3B,WAAO,SAAS,qBAAqB,GAAG,GAAG,QAAQ;EACrD,OAAO;AACL,UAAM,IAAI,uBAAuB,kBAAkBA,QAAM,oBAAoB;EAC/E;AACF;AAKA,eAAsB,0BAA2B,KAA0B,UAAkBA,WAAuB,cAAY;AAC9H,MAAIA,aAAW,cAAc;AAC3B,WAAO,SAAS,qBAAqB,GAAG,GAAG,QAAQ;EACrD,OAAO;AACL,UAAM,IAAI,uBAAuB,gCAAgC;EACnE;AACF;AAKA,eAAsB,sBAAuB,KAAsB,UAAkBA,WAAuB,cAAY;AACtH,MAAIA,aAAW,cAAc;AAC3B,WAAO,SAAS,qBAAqB,GAAG,GAAG,QAAQ;EACrD,OAAO;AACL,UAAM,IAAI,uBAAuB,kBAAkBA,QAAM,oBAAoB;EAC/E;AACF;AASA,eAAsB,oBAAqB,KAAoB,UAAkBA,WAAuB,UAAQ;AAC9G,MAAIA,aAAW,UAAU;AACvB,WAAO,YAAY,KAAK,QAAQ;EAClC,WAAWA,aAAW,cAAc;AAClC,WAAO,SAAS,qBAAqB,GAAG,GAAG,QAAQ;EACrD,OAAO;AACL,UAAM,IAAI,uBAAuB,gCAAgC;EACnE;AACF;AAEA,eAAsB,YAAa,YAA2B,UAAgB;AAC5E,QAAMC,UAAS,kBAAU,IAAG;AAG5B,QAAM,aAAa,IAAW,SAAS;IACrC,OAAO;;MAEL,IAAW,QAAQ,EAAE,OAAO,EAAC,CAAE;;MAG/B,IAAW,SAAS;QAClB,OAAO;;UAEL,IAAW,iBAAiB;YAC1B,OAAO;WACR;UACD,IAAW,KAAI;;OAElB;;MAGD,IAAW,YAAY;QACrB,UAAU,WAAW;OACtB;;GAEJ;AAED,QAAM,SAAS,WAAW,MAAK;AAC/B,QAAM,SAAS,IAAI,WAAW,QAAQ,GAAG,OAAO,UAAU;AAC1D,QAAM,OAAO,YAAY,WAAW;AAEpC,QAAM,gBAAgB,MAAM,YAC1B,QACA,UACA,MAAM;IACJ,GAAG;IACH,OAAO;GACR;AAGH,QAAM,KAAK,YAAY,EAAE;AACzB,QAAM,YAAY,MAAMA,QAAO,OAAO,UAAU,OAAO,eAAe,WAAW,OAAO,CAAC,SAAS,CAAC;AACnG,QAAM,YAAY,MAAMA,QAAO,OAAO,QAAQ;IAC5C,MAAM;IACN;KACC,WAAW,MAAM;AAEpB,QAAM,eAAe,IAAW,SAAS;IACvC,OAAO;;MAEL,IAAW,YAAY,EAAE,UAAU,KAAI,CAAE;;MAGzC,IAAW,QAAQ,EAAE,OAAO,WAAU,CAAE;;MAGxC,IAAW,QAAQ,EAAE,OAAO,SAAQ,CAAE;;MAGtC,IAAW,SAAS;QAClB,OAAO;;UAEL,IAAW,iBAAiB,EAAE,OAAO,sBAAqB,CAAE;UAC5D,IAAW,KAAI;;OAElB;;GAEJ;AAED,QAAM,sBAAsB,IAAW,SAAS;IAC9C,OAAO;;MAEL,IAAW,iBAAiB;QAC1B,OAAO;OACR;MACD,IAAW,SAAS;QAClB,OAAO;;UAEL,IAAW,SAAS;YAClB,OAAO;;cAEL,IAAW,iBAAiB;gBAC1B,OAAO;eACR;;cAED;;WAEH;;UAGD,IAAW,SAAS;YAClB,OAAO;;cAEL,IAAW,iBAAiB;gBAC1B,OAAO;eACR;;cAED,IAAW,YAAY;gBACrB,UAAU;eACX;;WAEJ;;OAEJ;;GAEJ;AAED,QAAM,eAAe,IAAW,SAAS;IACvC,OAAO;MACL;MACA,IAAW,YAAY,EAAE,UAAU,UAAS,CAAE;;GAEjD;AAED,QAAM,kBAAkB,aAAa,MAAK;AAC1C,QAAM,kBAAkB,IAAI,WAAW,iBAAiB,GAAG,gBAAgB,UAAU;AAErF,SAAO;IACL;IACA,GAAG,SAAmB,iBAAiB,WAAW,EAAE,MAAM,SAAS,EAAE,OAAO,OAAO;IACnF;IACA,KAAK,IAAI;AACb;;;AC/MA,eAAsB,iBAAkB,cAAsB,UAAgB;AAC5E,MAAI;AACF,UAAM,MAAM,MAAM,SAAS,cAAc,QAAQ;AACjD,WAAO,uBAAuB,GAAG;EACnC,QAAQ;EAER;AAEA,MAAI,CAAC,aAAa,SAAS,OAAO,GAAG;AACnC,UAAM,IAAI,uBAAuB,kDAAkD;EACrF;AAEA,SAAO,cAAc,cAAc,QAAQ;AAC7C;AAOA,eAAsB,SAAU,YAAoB,UAAgB;AAClE,QAAM,eAAeC,QAAO,OAAO,UAAU;AAC7C,QAAM,SAAS,wBAAQ,OAAM;AAC7B,SAAO,OAAO,QAAQ,cAAc,QAAQ;AAC9C;AAEA,eAAsB,cAAe,KAAa,UAAgB;AAChE,QAAMC,UAAS,kBAAU,IAAG;AAC5B,MAAI;AAEJ,MAAI,IAAI,SAAS,uCAAuC,GAAG;AACzD,UAAMC,OAAM,WACV,IACG,QAAQ,yCAAyC,EAAE,EACnD,QAAQ,uCAAuC,EAAE,EACjD,QAAQ,OAAO,EAAE,EACjB,KAAI,GACP,WAAW;AAGb,UAAM,EAAE,OAAM,IAAY,QAAQA,IAAG;AAErC,UAAM,EACJ,IACA,MACA,YACA,SACA,WAAU,IACR,qBAAqB,MAAM;AAE/B,UAAM,gBAAgB,MAAM,YAC1B,QACA,UACA,MAAM;MACJ,GAAG;MACH,OAAO;KACR;AAGH,UAAM,YAAY,MAAMD,QAAO,OAAO,UAAU,OAAO,eAAe,WAAW,OAAO,CAAC,SAAS,CAAC;AACnG,UAAM,YAAY,aAAa,MAAMA,QAAO,OAAO,QAAQ;MACzD,MAAM;MACN;OACC,WAAW,UAAU,CAAC;AAEzB,UAAM,EAAE,QAAQ,gBAAe,IAAY,QAAQ,SAAS;AAC5D,gBAAY,YAAY,eAAe;EACzC,WAAW,IAAI,SAAS,6BAA6B,GAAG;AACtD,UAAMC,OAAM,WACV,IACG,QAAQ,+BAA+B,EAAE,EACzC,QAAQ,6BAA6B,EAAE,EACvC,QAAQ,OAAO,EAAE,EACjB,KAAI,GACP,WAAW;AAGb,UAAM,EAAE,OAAM,IAAY,QAAQA,IAAG;AAErC,gBAAY,YAAY,MAAM;EAChC,OAAO;AACL,UAAM,IAAI,uBAAuB,2CAA2C;EAC9E;AAEA,QAAM,MAAM,kBAAkB,SAAS;AAEvC,MAAI,IAAI,SAAS,OAAO;AACtB,UAAM,IAAI,uBAAuB,+CAA+C;EAClF;AAEA,SAAO;AACT;AAEA,SAAS,qBAAsB,MAAS;AACtC,QAAM,sBAAsB,KAAK,WAAW,MAAM,CAAC;AACnD,QAAM,SAAS,oBAAoB,WAAW,MAAM,CAAC,EAAE,SAAQ;AAE/D,MAAI,WAAW,6CAA6C;AAC1D,UAAM,IAAI,uBAAuB,sDAAsD;EACzF;AAEA,QAAM,oBAAoB,oBAAoB,WAAW,MAAM,CAAC,EAAE,WAAW,MAAM,CAAC;AACpF,QAAM,wBAAwB,kBAAkB,WAAW,MAAM,CAAC,EAAE,SAAQ;AAE5E,MAAI,0BAA0B,6CAA6C;AACzE,UAAM,IAAI,uBAAuB,yDAAyD;EAC5F;AAEA,QAAM,eAAe,kBAAkB,WAAW,MAAM,CAAC;AAEzD,QAAM,OAAO,aAAa,aAAa,WAAW,MAAM,CAAC,EAAE,SAAQ,CAAE;AAErE,MAAI,aAAa;AACjB,MAAI,UAAU;AAEd,MAAI,aAAa,WAAW,MAAM,WAAW,GAAG;AAC9C,iBAAa,OAAQ,aAAa,WAAW,MAAM,CAAC,EAAqB,SAAQ,CAAE;AACnF,cAAU,OAAQ,aAAa,WAAW,MAAM,CAAC,EAAG,SAAQ,CAAE;EAChE,WAAW,aAAa,WAAW,MAAM,WAAW,GAAG;AACrD,UAAM,IAAI,uBAAuB,uGAAuG;EAC1I;AAEA,QAAM,mBAAmB,oBAAoB,WAAW,MAAM,CAAC,EAAE,WAAW,MAAM,CAAC;AACnF,QAAM,uBAAuB,iBAAiB,WAAW,MAAM,CAAC,EAAE,SAAQ;AAE1E,MAAI,yBAAyB,0CAA0C;EAEvE,WAAW,yBAAyB,oCAAoC;EAExE,WAAW,yBAAyB,8CAA8C;EAElF,WAAW,yBAAyB,+CAA+C;EAEnF,WAAW,yBAAyB,+CAA+C;EAEnF,OAAO;AACL,UAAM,IAAI,uBAAuB,+CAA+C;EAClF;AAEA,QAAM,KAAK,aAAa,iBAAiB,WAAW,MAAM,CAAC,EAAE,SAAQ,CAAE;AAEvE,SAAO;IACL,YAAY,aAAa,KAAK,WAAW,MAAM,CAAC,EAAE,SAAQ,CAAE;IAC5D;IACA;IACA;IACA;;AAEJ;AAEA,SAAS,YAAa,KAAQ;AAC5B,SAAO,aAAa,IAAI,WAAW,MAAM,CAAC,EAAE,SAAQ,CAAE;AACxD;AAEA,SAAS,aAAc,KAAgB;AACrC,SAAO,IAAI,WAAW,KAAK,GAAG,IAAI,UAAU;AAC9C;;;AR5JA,IAAM,YAAY;AAClB,IAAM,aAAa;AACnB,IAAM,WAAW,oBAAI,QAAO;AAG5B,IAAM,OAAO;EACX,cAAc,MAAM;EACpB,eAAe,MAAM;EACrB,mBAAmB;;AAGrB,IAAMC,kBAAiB;;EAErB,KAAK;IACH,WAAW,MAAM;IACjB,gBAAgB;IAChB,MAAM;IACN,MAAM;;;AAIV,SAAS,gBAAiBC,OAAY;AACpC,MAAIA,SAAQ,MAAM;AAChB,WAAO;EACT;AACA,MAAI,OAAOA,UAAS,UAAU;AAC5B,WAAO;EACT;AACA,SAAOA,cAAS,yBAAAC,SAASD,MAAK,KAAI,CAAE,KAAKA,MAAK,SAAS;AACzD;AAQA,eAAe,cAAW;AACxB,QAAM,MAAM;AACZ,QAAM,MAAM;AACZ,QAAME,SAAQ,KAAK,OAAM,KAAM,MAAM,OAAO;AAE5C,QAAM,IAAI,QAAQ,aAAW,WAAW,SAASA,MAAK,CAAC;AACzD;AAKA,SAAS,OAAQF,OAAY;AAC3B,SAAO,IAAI,IAAI,YAAYA,KAAI;AACjC;AAKA,SAAS,WAAYA,OAAY;AAC/B,SAAO,IAAI,IAAI,aAAaA,KAAI;AAClC;AAEA,eAAsB,MAAO,KAAe;AAC1C,QAAM,KAAK,qBAAqB,GAAG;AACnC,QAAM,OAAO,MAAMG,QAAO,OAAO,EAAE;AAEnC,SAAOC,WAAU,OAAO,KAAK,KAAK,EAAE,UAAU,CAAC;AACjD;AAUM,IAAO,WAAP,MAAe;EACF;EACA;EACA;EACA;;;;EAKjB,YAAa,YAAgC,MAAkB;AAC7D,SAAK,aAAa;AAClB,SAAK,MAAM,WAAW,OAAO,aAAa,iBAAiB;AAC3D,SAAK,OAAO,aAAaL,iBAAgB,IAAI;AAC7C,SAAK,OAAO,KAAK,WAAW;AAG5B,QAAI,KAAK,KAAK,QAAQ,QAAQ,KAAK,KAAK,MAAM,SAAS,IAAI;AACzD,YAAM,IAAI,MAAM,kCAAkC;IACpD;AACA,QAAI,KAAK,KAAK,KAAK,aAAa,QAAQ,KAAK,KAAK,IAAI,YAAY,KAAK,cAAc;AACnF,YAAM,IAAI,MAAM,+BAA+B,KAAK,YAAY,QAAQ;IAC1E;AACA,QAAI,KAAK,KAAK,KAAK,MAAM,UAAU,QAAQ,KAAK,KAAK,IAAI,KAAK,SAAS,KAAK,eAAe;AACzF,YAAM,IAAI,MAAM,gCAAgC,KAAK,aAAa,QAAQ;IAC5E;AACA,QAAI,KAAK,KAAK,KAAK,kBAAkB,QAAQ,KAAK,KAAK,IAAI,iBAAiB,KAAK,mBAAmB;AAClG,YAAM,IAAI,MAAM,oCAAoC,KAAK,iBAAiB,EAAE;IAC9E;AAEA,UAAM,MAAM,KAAK,KAAK,QAAQ,QAAQ,KAAK,KAAK,KAAK,QAAQ,OACzD,OACA,KAAK,KAAK,MACV,KAAK,KAAK,KAAK,MACf,KAAK,KAAK,KAAK,gBACf,KAAK,KAAK,KAAK,WACf,KAAK,KAAK,KAAK,IAAI,IACnB;AAEJ,aAAS,IAAI,MAAM,EAAE,IAAG,CAAE;EAC5B;EAES,CAAC,OAAO,WAAW,IAAI;EAEvB,CAAC,mBAAmB,IAAc;IACzC;;;;;;;EAQF,OAAO,kBAAe;AACpB,UAAMM,WAAU,OAAO,OAAO,CAAA,GAAIN,eAAc;AAChD,UAAM,aAAa,KAAK,KAAK,KAAK,gBAAgB,CAAC,IAAI;AACvD,IAAAM,SAAQ,IAAI,OAAO,SAAmB,YAAY,UAAU,GAAG,QAAQ;AACvE,WAAOA;EACT;;;;;;;EAQA,WAAW,UAAO;AAChB,WAAON;EACT;EAEA,MAAM,cAAeC,OAAY;AAC/B,QAAI,CAAC,gBAAgBA,KAAI,GAAG;AAC1B,YAAM,YAAW;AACjB,YAAM,IAAI,uBAAuB,qBAAqBA,KAAI,GAAG;IAC/D;AAEA,UAAM,gBAAgB,WAAWA,KAAI;AAErC,QAAI;AACF,YAAM,MAAM,MAAM,KAAK,WAAW,UAAU,IAAI,aAAa;AAC7D,aAAO,KAAK,MAAM,SAAmB,GAAG,CAAC;IAC3C,SAAS,KAAU;AACjB,YAAM,YAAW;AACjB,WAAK,IAAI,MAAM,GAAG;AAClB,YAAM,IAAI,cAAc,QAAQA,KAAI,mBAAmB;IACzD;EACF;EAEA,MAAM,YAAa,IAAU;AAC3B,QAAI;AACF,YAAM,QAAQ;QACZ,QAAQ;;AAGV,uBAAiBM,UAAS,KAAK,WAAW,UAAU,MAAM,KAAK,GAAG;AAChE,cAAM,MAAM,KAAK,MAAM,SAAmBA,OAAM,KAAK,CAAC;AAEtD,YAAI,IAAI,OAAO,IAAI;AACjB,iBAAO;QACT;MACF;AAEA,YAAM,IAAI,uBAAuB,gBAAgB,EAAE,mBAAmB;IACxE,SAAS,KAAU;AACjB,YAAM,YAAW;AACjB,YAAM;IACR;EACF;EAEA,MAAM,UAAWN,OAAc,KAAe;AAC5C,QAAI,CAAC,gBAAgBA,KAAI,GAAG;AAC1B,YAAM,YAAW;AACjB,YAAM,IAAI,uBAAuB,qBAAqBA,KAAI,GAAG;IAC/D;AACA,QAAI,OAAO,MAAM;AACf,YAAM,YAAW;AACjB,YAAM,IAAI,uBAAuB,iBAAiB;IACpD;AACA,UAAM,gBAAgB,OAAOA,KAAI;AACjC,UAAM,SAAS,MAAM,KAAK,WAAW,UAAU,IAAI,aAAa;AAChE,QAAI,QAAQ;AACV,YAAM,YAAW;AACjB,YAAM,IAAI,uBAAuB,QAAQA,KAAI,kBAAkB;IACjE;AAEA,QAAI;AACJ,QAAI;AACJ,QAAI;AACF,YAAM,MAAM,MAAM,GAAG;AACrB,YAAM,SAAS,SAAS,IAAI,IAAI;AAEhC,UAAI,UAAU,MAAM;AAClB,cAAM,IAAI,uBAAuB,aAAa;MAChD;AAEA,YAAM,MAAM,OAAO;AACnB,YAAM,MAAM,iBAAiB,KAAK,KAAK,IAAI,SAAS,QAAQ,WAAW,YAAY;IACrF,SAAS,KAAU;AACjB,YAAM,YAAW;AACjB,YAAM;IACR;AAEA,UAAM,UAAU;MACd,MAAAA;MACA,IAAI;;AAEN,UAAM,QAAQ,KAAK,WAAW,UAAU,MAAK;AAC7C,UAAM,IAAI,eAAe,WAAqB,GAAG,CAAC;AAClD,UAAM,IAAI,WAAWA,KAAI,GAAG,WAAqB,KAAK,UAAU,OAAO,CAAC,CAAC;AACzE,UAAM,MAAM,OAAM;AAElB,WAAO;EACT;EAEA,MAAM,UAAWA,OAAY;AAC3B,QAAI,CAAC,gBAAgBA,KAAI,GAAG;AAC1B,YAAM,YAAW;AACjB,YAAM,IAAI,uBAAuB,qBAAqBA,KAAI,GAAG;IAC/D;AAEA,UAAM,gBAAgB,OAAOA,KAAI;AACjC,QAAI;AACF,YAAM,MAAM,MAAM,KAAK,WAAW,UAAU,IAAI,aAAa;AAC7D,YAAM,MAAM,SAAmB,GAAG;AAClC,YAAM,SAAS,SAAS,IAAI,IAAI;AAEhC,UAAI,UAAU,MAAM;AAClB,cAAM,IAAI,uBAAuB,aAAa;MAChD;AAEA,YAAM,MAAM,OAAO;AAEnB,aAAO,MAAM,iBAAiB,KAAK,GAAG;IACxC,SAAS,KAAU;AACjB,YAAM,YAAW;AACjB,YAAM;IACR;EACF;EAEA,MAAM,UAAWA,OAAY;AAC3B,QAAI,CAAC,gBAAgBA,KAAI,KAAKA,UAAS,KAAK,MAAM;AAChD,YAAM,YAAW;AACjB,YAAM,IAAI,uBAAuB,qBAAqBA,KAAI,GAAG;IAC/D;AAEA,UAAM,gBAAgB,OAAOA,KAAI;AACjC,UAAM,UAAU,MAAM,KAAK,cAAcA,KAAI;AAC7C,UAAM,QAAQ,KAAK,WAAW,UAAU,MAAK;AAC7C,UAAM,OAAO,aAAa;AAC1B,UAAM,OAAO,WAAWA,KAAI,CAAC;AAC7B,UAAM,MAAM,OAAM;AAElB,WAAO;EACT;;;;;;EAOA,MAAM,WAAQ;AACZ,UAAM,QAAQ;MACZ,QAAQ;;AAGV,UAAM,OAAO,CAAA;AACb,qBAAiBM,UAAS,KAAK,WAAW,UAAU,MAAM,KAAK,GAAG;AAChE,WAAK,KAAK,KAAK,MAAM,SAAmBA,OAAM,KAAK,CAAC,CAAC;IACvD;AAEA,WAAO;EACT;;;;;;;;EASA,MAAM,UAAW,SAAiB,SAAe;AAC/C,QAAI,CAAC,gBAAgB,OAAO,KAAK,YAAY,KAAK,MAAM;AACtD,YAAM,YAAW;AACjB,YAAM,IAAI,uBAAuB,yBAAyB,OAAO,GAAG;IACtE;AACA,QAAI,CAAC,gBAAgB,OAAO,KAAK,YAAY,KAAK,MAAM;AACtD,YAAM,YAAW;AACjB,YAAM,IAAI,uBAAuB,yBAAyB,OAAO,GAAG;IACtE;AACA,UAAM,mBAAmB,OAAO,OAAO;AACvC,UAAM,mBAAmB,OAAO,OAAO;AACvC,UAAM,cAAc,WAAW,OAAO;AACtC,UAAM,cAAc,WAAW,OAAO;AAEtC,UAAM,SAAS,MAAM,KAAK,WAAW,UAAU,IAAI,gBAAgB;AACnE,QAAI,QAAQ;AACV,YAAM,YAAW;AACjB,YAAM,IAAI,uBAAuB,QAAQ,OAAO,kBAAkB;IACpE;AAEA,QAAI;AACF,YAAM,MAAM,MAAM,KAAK,WAAW,UAAU,IAAI,gBAAgB;AAChE,YAAM,MAAM,MAAM,KAAK,WAAW,UAAU,IAAI,WAAW;AAE3D,YAAM,UAAU,KAAK,MAAM,SAAmB,GAAG,CAAC;AAClD,cAAQ,OAAO;AACf,YAAM,QAAQ,KAAK,WAAW,UAAU,MAAK;AAC7C,YAAM,IAAI,kBAAkB,GAAG;AAC/B,YAAM,IAAI,aAAa,WAAqB,KAAK,UAAU,OAAO,CAAC,CAAC;AACpE,YAAM,OAAO,gBAAgB;AAC7B,YAAM,OAAO,WAAW;AACxB,YAAM,MAAM,OAAM;AAClB,aAAO;IACT,SAAS,KAAU;AACjB,YAAM,YAAW;AACjB,YAAM;IACR;EACF;;;;EAKA,MAAM,mBAAoB,SAAiB,SAAe;AACxD,QAAI,OAAO,YAAY,UAAU;AAC/B,YAAM,YAAW;AACjB,YAAM,IAAI,uBAAuB,0BAA0B,OAAO,OAAO,GAAG;IAC9E;AACA,QAAI,OAAO,YAAY,UAAU;AAC/B,YAAM,YAAW;AACjB,YAAM,IAAI,uBAAuB,0BAA0B,OAAO,OAAO,GAAG;IAC9E;AACA,QAAI,QAAQ,SAAS,IAAI;AACvB,YAAM,YAAW;AACjB,YAAM,IAAI,uBAAuB,uBAAuB,QAAQ,MAAM,EAAE;IAC1E;AACA,SAAK,IAAI,qBAAqB;AAC9B,UAAM,SAAS,SAAS,IAAI,IAAI;AAEhC,QAAI,UAAU,MAAM;AAClB,YAAM,IAAI,uBAAuB,aAAa;IAChD;AAEA,UAAM,SAAS,OAAO;AACtB,SAAK,KAAK,OAAO;AACjB,UAAM,SAAS,WAAW,QAAQ,KAAK,KAAK,KAAK,QAAQ,OACrD,OACA,SACA,KAAK,KAAK,IAAI,MACd,KAAK,KAAK,KAAK,gBACf,KAAK,KAAK,KAAK,WACf,KAAK,KAAK,KAAK,IAAI,IACnB;AACJ,aAAS,IAAI,MAAM,EAAE,KAAK,OAAM,CAAE;AAClC,UAAM,OAAO,MAAM,KAAK,SAAQ;AAChC,eAAW,OAAO,MAAM;AACtB,YAAM,MAAM,MAAM,KAAK,WAAW,UAAU,IAAI,OAAO,IAAI,IAAI,CAAC;AAChE,YAAM,MAAM,SAAmB,GAAG;AAClC,YAAM,aAAa,MAAM,iBAAiB,KAAK,MAAM;AACrD,YAAM,WAAW,OAAO,SAAQ;AAChC,YAAM,WAAW,MAAM,iBAAiB,YAAY,UAAU,WAAW,SAAS,QAAQ,WAAW,YAAY;AAGjH,YAAM,QAAQ,KAAK,WAAW,UAAU,MAAK;AAC7C,YAAM,UAAU;QACd,MAAM,IAAI;QACV,IAAI,IAAI;;AAEV,YAAM,IAAI,OAAO,IAAI,IAAI,GAAG,WAAqB,QAAQ,CAAC;AAC1D,YAAM,IAAI,WAAW,IAAI,IAAI,GAAG,WAAqB,KAAK,UAAU,OAAO,CAAC,CAAC;AAC7E,YAAM,MAAM,OAAM;IACpB;AACA,SAAK,IAAI,wBAAwB;EACnC;;;;AS3LI,SAAU,SAAU,OAAqB,CAAA,GAAE;AAC/C,SAAO,CAAC,eAAkC;AACxC,WAAO,IAAI,SAAc,YAAY,IAAI;EAC3C;AACF;;;AC1MA,eAAsB,oBAAqB,WAAsB,OAAmC,CAAA,GAAE;AACpG,QAAM,UAAU,KAAK,WAAW;AAChC,QAAM,QAAQ,SAAS,IAAI,EAAE;IAC3B;IACA,QAAQ,cAAa;GACtB;AAED,MAAI;AAEJ,MAAI,MAAM,UAAU,IAAI,IAAI,IAAI,UAAU,OAAO,EAAE,CAAC,GAAG;AACrD,iBAAa,MAAM,MAAM,UAAU,OAAO;EAC5C,OAAO;AACL,iBAAa,MAAM,gBAAgB,KAAK,WAAW,SAAS;AAG5D,UAAM,MAAM,UAAU,SAAS,UAAU;EAC3C;AAEA,SAAO;AACT;;;AC9BA,IAAM,kBAAN,MAAqB;EACX;EAER,WAAY,IAAa;AACvB,WAAO,GAAG,cAAa,EAAG,KAAK,CAAC,EAAE,MAAAC,MAAI,MAAOA,UAAS,SAAS;EACjE;EAEA,MAAM,QAAS,IAAeC,UAAgC;AAC5D,UAAM,WAAW,GAAG,cAAa,EAC9B,KAAK,eAAa,UAAU,SAAS,SAAS,GAC7C;AAEJ,QAAI,YAAY,MAAM;AACpB,aAAO,CAAC,EAAE;IACZ;AAEA,UAAM,WAAW,KAAK,OAAOA,QAAO;AACpC,UAAM,SAAS,MAAM,SAAS,MAAM,YAAY,QAAQ,IAAI;MAC1D,QAAQA,UAAS;MACjB,OAAO;QACL,WAAW;;KAEd;AAED,UAAMC,UAAS,GAAG,cAAa,EAC5B,KAAK,eAAa,UAAU,SAAS,KAAK,GACzC;AACJ,UAAM,SAAsB,CAAA;AAE5B,eAAW,UAAU,OAAO,QAAQ;AAClC,YAAM,OAAO,OAAO,KACjB,QAAQ,SAAS,EAAE,EACnB,KAAI,EACJ,MAAM,GAAG,EAAE,CAAC;AAEf,UAAI,QAAQ,MAAM;AAChB;MACF;AAEA,UAAIA,WAAU,QAAQ,CAAC,KAAK,SAASA,OAAM,GAAG;AAC5C;MACF;AAEA,aAAO,KAAK,UAAU,IAAI,CAAC;IAC7B;AAEA,WAAO;EACT;EAEQ,OAAQD,UAAgC;AAC9C,QAAIA,SAAQ,OAAO,MAAM;AACvB,aAAOA,SAAQ;IACjB;AAEA,QAAI,KAAK,OAAO,MAAM;AACpB,WAAK,MAAM,IAAG;IAChB;AAEA,WAAO,KAAK;EACd;;AAGK,IAAM,kBAAkB,IAAI,gBAAe;;;AC7DlD,IAAM,gBAA4B;EAChC,WAAW;IACT,QAAQ,CAAA;IACR,UAAU,CAAA;IACV,YAAY,CAAA;IACZ,gBAAgB,CAAC,eAA4B;;EAE/C,mBAAmB;IACjB,WAAW;MACT,SAAS;;;EAGb,kBAAkB;IAChB,gBAAgB,eAAe;;;AAInC,eAAsB,eAAiE,MAAmB;AACxG,QAAM,mBAAkC,aAAa,eAAe,IAAI;AAExE,MAAI,iBAAiB,wBAAwB,QAAQ,WAAW,SAAS,KAAK,qBAAqB,MAAM;AACvG,UAAM,IAAI,uBAAuB,4DAA4D;EAC/F;AAEA,SAAO;AACT;;;ACpBM,IAAW;CAAjB,SAAiBE,WAAQ;AACvB,MAAI;AAES,EAAAA,UAAA,QAAQ,MAAsB;AACzC,QAAI,UAAU,MAAM;AAClB,eAAS,QAAkB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAC/C,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAK,IAAI,aAAa,QAAQ,IAAI,UAAU,aAAa,GAAI;AAC3D,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,SAAS;QACvB;AAEA,YAAK,IAAI,eAAe,QAAQ,IAAI,YAAY,aAAa,GAAI;AAC/D,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,WAAW;QACzB;AAEA,YAAK,IAAI,WAAW,QAAQ,IAAI,QAAQ,aAAa,GAAI;AACvD,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,OAAO;QACrB;AAEA,YAAK,IAAI,aAAa,QAAQ,IAAI,UAAU,aAAa,GAAI;AAC3D,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,SAAS;QACvB;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQC,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,WAAW,MAAgB,CAAC;UAC5B,aAAa,MAAgB,CAAC;UAC9B,SAAS,MAAgB,CAAC;UAC1B,WAAW,MAAgB,CAAC;;AAG9B,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,YAAY,OAAO,MAAK;AAC5B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,cAAc,OAAO,MAAK;AAC9B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,UAAU,OAAO,MAAK;AAC1B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,YAAY,OAAO,MAAK;AAC5B;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAD,UAAA,SAAS,CAAC,QAAsC;AAC3D,WAAO,cAAc,KAAKA,UAAS,MAAK,CAAE;EAC5C;AAEa,EAAAA,UAAA,SAAS,CAAC,KAAkC,SAA4C;AACnG,WAAO,cAAc,KAAKA,UAAS,MAAK,GAAI,IAAI;EAClD;AACF,GApFiB,aAAA,WAAQ,CAAA,EAAA;;;ACTnB,IAAO,wBAAP,cAAqC,MAAK;EAC9C,YAAaE,WAAU,qBAAmB;AACxC,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;;;ACUI,IAAO,iBAAP,MAAO,gBAAc;;;;EAIzB,OAAO,qBAAqB,CAAC,SAAqD;AAChF,UAAM,eAAe,SAAS,OAAO,IAAI;AACzC,UAAMC,aAAY,sBAAsB,aAAa,SAAS;AAE9D,WAAO,IAAI,gBAAe;MACxB,WAAAA;MACA,aAAa,aAAa;MAC1B,SAAS,aAAa;MACtB,WAAW,aAAa;KACzB;EACH;;;;;EAMA,OAAO,OAAO,OAAO,QAAgB,YAAwBC,aAAmD;AAC9G,QAAI,cAAc,MAAM;AACtB,YAAM,IAAI,MAAM,qBAAqB;IACvC;AAEA,UAAM,SAAS,OAAO;AACtB,UAAM,cAAc,OAAO;AAC3B,UAAM,UAAU,OAAO,QAAO;AAC9B,UAAM,WAAW,uBAAuB,QAAQ,aAAa,OAAO;AACpE,UAAM,YAAY,MAAM,WAAW,KAAK,SAAS,SAAQ,GAAIA,QAAO;AAEpE,WAAO,IAAI,gBAAe;MACxB,WAAW,WAAW;MACtB;MACA;MACA;KACD;EACH;;;;;EAMA,OAAO,iBAAiB,OAAO,MAAmC,QAAgBA,aAAmD;AACnI,UAAM,WAAW,gBAAe,mBAAmB,IAAI;AACvD,UAAM,QAAQ,MAAM,SAAS,SAAS,QAAQA,QAAO;AAErD,QAAI,CAAC,OAAO;AACV,YAAM,IAAI,sBAAsB,sDAAsD;IACxF;AAEA,WAAO;EACT;EAEO;EACA;EACA;EACA;EACA;;;;;EAMP,YAAa,MAAwB;AACnC,UAAM,EAAE,WAAAD,YAAW,aAAa,SAAS,UAAS,IAAK;AAEvD,SAAK,YAAYA;AACjB,SAAK,cAAc;AACnB,SAAK,UAAU;AACf,SAAK,YAAY;EACnB;;;;EAKA,UAAO;AACL,QAAI,KAAK,aAAa,MAAM;AAC1B,WAAK,YAAY,SAAS,OAAO;QAC/B,WAAW,oBAAoB,KAAK,SAAS;QAC7C,aAAa,KAAK;QAClB,SAAS,KAAK,QAAQ,SAAQ;QAC9B,WAAW,KAAK;OACjB;IACH;AAEA,WAAO,KAAK;EACd;;;;EAKA,OAAQ,OAAgB;AACtB,QAAI,SAAS,MAAM;AACjB,aAAO;IACT;AAEA,WAAO,OAAiB,KAAK,QAAO,GAAI,MAAM,QAAO,CAAE;EACzD;;;;EAKA,MAAM,SAAU,QAAgBC,UAAsB;AACpD,UAAM,WAAW,uBAAuB,QAAQ,KAAK,aAAa,KAAK,OAAO;AAE9E,WAAO,KAAK,UAAU,OAAO,SAAS,SAAQ,GAAI,KAAK,WAAWA,QAAO;EAC3E;;AAMF,IAAM,yBAAyB,CAAC,QAAgB,aAAyB,YAAwD;AAS/H,QAAM,mBAAmB,WAAsB,MAAM;AACrD,QAAM,eAAsB,OAAO,iBAAiB,UAAU;AAC9D,QAAM,oBAA2B,OAAO,YAAY,MAAM;AAC1D,QAAM,gBAAuB,OAAO,QAAQ,MAAM;AAElD,SAAO,IAAI,eACT,cACA,kBACA,mBACA,aACA,eACA,OAAO;AAEX;;;ACjIM,SAAU,YAAa,GAAU,GAAQ;AAC7C,QAAM,OAAO,CAACC,IAAQC,OAAmBD,GAAE,SAAQ,EAAG,cAAcC,GAAE,SAAQ,CAAE;AAEhF,MAAI,EAAE,WAAW,EAAE,QAAQ;AACzB,WAAO;EACT;AAEA,IAAE,KAAK,IAAI;AAEX,SAAO,EAAE,KAAK,IAAI,EAAE,MAAM,CAAC,MAAM,UAAU,EAAE,KAAK,EAAE,OAAO,IAAI,CAAC;AAClE;;;ACjCO,IAAMC,UAAQ,IAAI,WAAW,CAAC;AA0B/B,SAAUC,SAAQ,GAA6C;AACnE,MAAI,aAAa,cAAc,EAAE,YAAY,SAAS,cAAc;AAAE,WAAO;EAAE;AAC/E,MAAI,aAAa,aAAa;AAAE,WAAO,IAAI,WAAW,CAAC;EAAE;AACzD,MAAI,YAAY,OAAO,CAAC,GAAG;AACzB,WAAO,IAAI,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU;EAC5D;AACA,QAAM,IAAI,MAAM,mCAAmC;AACrD;;;AChCA,IAAIC,YAAWC;AAEf,IAAIC,OAAM;AAAV,IACIC,QAAO;AADX,IAEIC,UAAS,CAACD;AAFd,IAGIE,OAAM,KAAK,IAAI,GAAG,EAAE;AAOxB,SAASJ,SAAO,KAAK,KAAK,QAAM;AAC9B,QAAM,OAAO,CAAA;AACb,WAAS,UAAU;AACnB,MAAI,YAAY;AAEhB,SAAM,OAAOI,MAAK;AAChB,QAAI,QAAQ,IAAK,MAAM,MAAQH;AAC/B,WAAO;EACT;AACA,SAAM,MAAME,SAAQ;AAClB,QAAI,QAAQ,IAAK,MAAM,MAAQF;AAC/B,aAAS;EACX;AACA,MAAI,MAAM,IAAI,MAAM;AAGpB,EAAAD,SAAO,QAAQ,SAAS,YAAY;AAEpC,SAAO;AACT;AAEA,IAAIK,WAASC;AAEb,IAAIC,SAAQ;AAAZ,IACIC,UAAS;AAMb,SAASF,MAAK,KAAK,QAAM;AACvB,MAAI,MAAS,GACT,SAAS,UAAU,GACnB,QAAS,GACT,UAAU,QACV,GACA,IAAI,IAAI;AAEZ,KAAG;AACD,QAAI,WAAW,GAAG;AAEhB,MAAAA,MAAK,QAAQ;AACb,YAAM,IAAI,WAAW,yBAAyB;IAChD;AACA,QAAI,IAAI,SAAS;AACjB,WAAO,QAAQ,MACV,IAAIE,YAAW,SACf,IAAIA,WAAU,KAAK,IAAI,GAAG,KAAK;AACpC,aAAS;EACX,SAAS,KAAKD;AAGd,EAAAD,MAAK,QAAQ,UAAU;AAEvB,SAAO;AACT;AAEA,IAAIG,MAAK,KAAK,IAAI,GAAI,CAAC;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,MAAK,KAAK,IAAI,GAAG,EAAE;AAEvB,IAAIC,UAAS,SAAgCC,QAAK;AAChD,SACEA,SAAQV,MAAK,IACbU,SAAQT,MAAK,IACbS,SAAQR,MAAK,IACbQ,SAAQP,MAAK,IACbO,SAAQN,MAAK,IACbM,SAAQL,MAAK,IACbK,SAAQJ,MAAK,IACbI,SAAQH,MAAK,IACbG,SAAQF,MAAK,IACA;AAEjB;AAEA,IAAIG,UAAS;EACT,QAAQrB;EACR,QAAQM;EACR,gBAAgBa;;AAGpB,IAAIG,gBAAeD;AAEnB,IAAAE,kBAAeD;;;ACrGT,SAAUE,SAAQ,MAAkB,SAAS,GAAC;AAClD,QAAMC,SAAOC,gBAAO,OAAO,MAAM,MAAM;AACvC,SAAO,CAACD,QAAMC,gBAAO,OAAO,KAAK;AACnC;;;ACkBM,SAAUC,SAAQ,WAAqB;AAC3C,QAAM,QAAQC,SAAO,SAAS;AAC9B,QAAM,CAACC,QAAM,UAAU,IAAWF,SAAO,KAAK;AAC9C,QAAM,CAAC,MAAM,YAAY,IAAWA,SAAO,MAAM,SAAS,UAAU,CAAC;AACrE,QAAMG,UAAS,MAAM,SAAS,aAAa,YAAY;AAEvD,MAAIA,QAAO,eAAe,MAAM;AAC9B,UAAM,IAAI,MAAM,kBAAkB;EACpC;AAEA,SAAO,IAAIC,QAAOF,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAqBM,IAAOE,UAAP,MAAa;EACR;EACA;EACA;EACA;;;;EAKT,YAAaC,QAAY,MAAYC,SAAoB,OAAiB;AACxE,SAAK,OAAOD;AACZ,SAAK,OAAO;AACZ,SAAK,SAASC;AACd,SAAK,QAAQ;EACf;;;;ACpEK,IAAM,8BAA8B;AAKpC,IAAM,oCAAoC,WAAW,KAAK,CAAC,GAAG,CAAC,CAAC;;;ACKjE,IAAW;CAAjB,SAAiBC,aAAU;AAKzB,MAAiB;AAAjB,GAAA,SAAiBC,cAAW;AAC1B,QAAIC;AAES,IAAAD,aAAA,QAAQ,MAAyB;AAC5C,UAAIC,WAAU,MAAM;AAClB,QAAAA,UAAS,QAAqB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAClD,cAAI,KAAK,oBAAoB,OAAO;AAClC,cAAE,KAAI;UACR;AAEA,cAAK,IAAI,aAAa,QAAQ,IAAI,UAAU,aAAa,GAAI;AAC3D,cAAE,OAAO,EAAE;AACX,cAAE,MAAM,IAAI,SAAS;UACvB;AAEA,cAAI,KAAK,oBAAoB,OAAO;AAClC,cAAE,OAAM;UACV;QACF,GAAG,CAAC,QAAQC,UAAQ,OAAO,CAAA,MAAM;AAC/B,gBAAM,MAAW;YACf,WAAW,MAAgB,CAAC;;AAG9B,gBAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,iBAAO,OAAO,MAAM,KAAK;AACvB,kBAAM,MAAM,OAAO,OAAM;AAEzB,oBAAQ,QAAQ,GAAG;cACjB,KAAK,GAAG;AACN,oBAAI,YAAY,OAAO,MAAK;AAC5B;cACF;cACA,SAAS;AACP,uBAAO,SAAS,MAAM,CAAC;AACvB;cACF;YACF;UACF;AAEA,iBAAO;QACT,CAAC;MACH;AAEA,aAAOD;IACT;AAEa,IAAAD,aAAA,SAAS,CAAC,QAAyC;AAC9D,aAAO,cAAc,KAAKA,aAAY,MAAK,CAAE;IAC/C;AAEa,IAAAA,aAAA,SAAS,CAAC,KAAkC,SAAkD;AACzG,aAAO,cAAc,KAAKA,aAAY,MAAK,GAAI,IAAI;IACrD;EACF,GAtDiB,cAAAD,YAAA,gBAAAA,YAAA,cAAW,CAAA,EAAA;AAwD5B,MAAI;AAES,EAAAA,YAAA,QAAQ,MAAwB;AAC3C,QAAI,UAAU,MAAM;AAClB,eAAS,QAAoB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AACjD,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAK,IAAI,UAAU,QAAQ,IAAI,OAAO,aAAa,GAAI;AACrD,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,MAAM;QACpB;AAEA,YAAK,IAAI,OAAO,QAAQ,IAAI,QAAQ,IAAK;AACvC,YAAE,OAAO,EAAE;AACX,YAAE,OAAO,IAAI,GAAG;QAClB;AAEA,YAAI,IAAI,aAAa,MAAM;AACzB,qBAAWI,UAAS,IAAI,WAAW;AACjC,cAAE,OAAO,EAAE;AACX,YAAAJ,YAAW,YAAY,MAAK,EAAG,OAAOI,QAAO,CAAC;UAChD;QACF;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQD,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,QAAQ,MAAgB,CAAC;UACzB,KAAK;UACL,WAAW,CAAA;;AAGb,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,SAAS,OAAO,MAAK;AACzB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,MAAM,OAAO,OAAM;AACvB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,KAAK,QAAQ,aAAa,QAAQ,IAAI,UAAU,WAAW,KAAK,OAAO,WAAW;AACpF,sBAAM,IAAI,eAAe,4DAA4D;cACvF;AAEA,kBAAI,UAAU,KAAKH,YAAW,YAAY,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;gBAChF,QAAQ,KAAK,QAAQ;eACtB,CAAC;AACF;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAA,YAAA,SAAS,CAAC,QAAwC;AAC7D,WAAO,cAAc,KAAKA,YAAW,MAAK,CAAE;EAC9C;AAEa,EAAAA,YAAA,SAAS,CAAC,KAAkC,SAAgD;AACvG,WAAO,cAAc,KAAKA,YAAW,MAAK,GAAI,IAAI;EACpD;AACF,GA9IiB,eAAA,aAAU,CAAA,EAAA;;;ACoBrB,IAAOK,cAAP,MAAO,YAAU;;;;EAIrB,OAAO,qBAAqB,CAAC,QAAgD;AAC3E,UAAM,aAAa,WAAS,OAAO,GAAG;AACtC,UAAMC,UAAS,oBAA2BC,SAAO,WAAW,MAAM,CAAC;AACnE,UAAM,cAAc,WAAW,aAAa,CAAA,GAAI,IAAI,CAAC,MAAM,UAAU,EAAE,SAAS,CAAC;AACjF,UAAM,YAAY,WAAW;AAE7B,WAAO,IAAI,YAAW,EAAE,QAAAD,SAAQ,YAAY,UAAS,CAAE;EACzD;EAEA,OAAO,SAAS;EAChB,OAAO,QAAQ;EAER;EACA;EACA;EACA,SAAS,YAAW;EACpB,QAAQ,YAAW;EAClB;EAER,YAAa,MAAoB;AAC/B,UAAM,EAAE,QAAAA,SAAQ,YAAY,UAAS,IAAK;AAE1C,SAAK,SAASA;AACd,SAAK,aAAa,cAAc,CAAA;AAChC,SAAK,YAAY,aAAa,OAAO,KAAK,IAAG,CAAE;EACjD;;;;EAKA,UAAO;AACL,QAAI,KAAK,aAAa,MAAM;AAC1B,WAAK,YAAY,WAAS,OAAO;QAC/B,QAAQ,KAAK,OAAO,YAAW,EAAG;QAClC,KAAK,OAAO,KAAK,SAAS;QAC1B,WAAW,KAAK,WAAW,IAAI,CAAC,OAAO;UACrC,WAAW,EAAE;UACb;OACH;IACH;AAEA,WAAO,KAAK;EACd;;;;EAKA,OAAQ,OAAc;AACpB,QAAI,EAAE,iBAAiB,cAAa;AAClC,aAAO;IACT;AAGA,QAAI,CAAC,KAAK,OAAO,OAAO,MAAM,MAAM,GAAG;AACrC,aAAO;IACT;AAGA,QAAI,KAAK,cAAc,MAAM,WAAW;AACtC,aAAO;IACT;AAGA,QAAI,CAAC,YAAY,KAAK,YAAY,MAAM,UAAU,GAAG;AACnD,aAAO;IACT;AAEA,WAAO;EACT;;;;ACvGK,IAAME,UAAQ,IAAI,WAAW,CAAC;AAW/B,SAAUC,SAAQ,IAAgB,IAAc;AACpD,MAAI,OAAO,IAAI;AAAE,WAAO;EAAK;AAC7B,MAAI,GAAG,eAAe,GAAG,YAAY;AACnC,WAAO;EACT;AAEA,WAAS,KAAK,GAAG,KAAK,GAAG,YAAY,MAAM;AACzC,QAAI,GAAG,EAAE,MAAM,GAAG,EAAE,GAAG;AACrB,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEM,SAAUC,SAAQ,GAA6C;AACnE,MAAI,aAAa,cAAc,EAAE,YAAY,SAAS,cAAc;AAAE,WAAO;EAAE;AAC/E,MAAI,aAAa,aAAa;AAAE,WAAO,IAAI,WAAW,CAAC;EAAE;AACzD,MAAI,YAAY,OAAO,CAAC,GAAG;AACzB,WAAO,IAAI,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU;EAC5D;AACA,QAAM,IAAI,MAAM,mCAAmC;AACrD;;;ACvBA,SAASC,OAAM,UAAUC,OAAI;AAC3B,MAAI,SAAS,UAAU,KAAK;AAAE,UAAM,IAAI,UAAU,mBAAmB;EAAE;AACvE,MAAI,WAAW,IAAI,WAAW,GAAG;AACjC,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,aAAS,CAAC,IAAI;EAChB;AACA,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,QAAI,IAAI,SAAS,OAAO,CAAC;AACzB,QAAI,KAAK,EAAE,WAAW,CAAC;AACvB,QAAI,SAAS,EAAE,MAAM,KAAK;AAAE,YAAM,IAAI,UAAU,IAAI,eAAe;IAAE;AACrE,aAAS,EAAE,IAAI;EACjB;AACA,MAAI,OAAO,SAAS;AACpB,MAAI,SAAS,SAAS,OAAO,CAAC;AAC9B,MAAI,SAAS,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,GAAG;AAC1C,MAAI,UAAU,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI;AAI3C,WAASC,SAAQ,QAAM;AAErB,QAAI,kBAAkB;AAAY;aAAW,YAAY,OAAO,MAAM,GAAG;AACvE,eAAS,IAAI,WAAW,OAAO,QAAQ,OAAO,YAAY,OAAO,UAAU;IAC7E,WAAW,MAAM,QAAQ,MAAM,GAAG;AAChC,eAAS,WAAW,KAAK,MAAM;IACjC;AACA,QAAI,EAAE,kBAAkB,aAAa;AAAE,YAAM,IAAI,UAAU,qBAAqB;IAAE;AAClF,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO;IAAG;AAErC,QAAI,SAAS;AACb,QAAIC,WAAS;AACb,QAAI,SAAS;AACb,QAAI,OAAO,OAAO;AAClB,WAAO,WAAW,QAAQ,OAAO,MAAM,MAAM,GAAG;AAC9C;AACA;IACF;AAEA,QAAI,QAAS,OAAO,UAAU,UAAU,MAAO;AAC/C,QAAI,MAAM,IAAI,WAAW,IAAI;AAE7B,WAAO,WAAW,MAAM;AACtB,UAAI,QAAQ,OAAO,MAAM;AAEzB,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,MAAM,IAAI,GAAG,MAAO;AAC9B,YAAI,GAAG,IAAK,QAAQ,SAAU;AAC9B,gBAAS,QAAQ,SAAU;MAC7B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,IAAI,GAAG,MAAM,GAAG;AACrC;IACF;AAEA,QAAI,MAAM,OAAO,OAAO,MAAM;AAC9B,WAAO,MAAM,MAAM,EAAE,KAAK;AAAE,aAAO,SAAS,OAAO,IAAI,GAAG,CAAC;IAAG;AAC9D,WAAO;EACT;AAIA,WAAS,aAAc,QAAM;AAC3B,QAAI,OAAO,WAAW,UAAU;AAAE,YAAM,IAAI,UAAU,iBAAiB;IAAE;AACzE,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO,IAAI,WAAU;IAAG;AACnD,QAAI,MAAM;AAEV,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,SAAS;AACb,QAAIA,WAAS;AACb,WAAO,OAAO,GAAG,MAAM,QAAQ;AAC7B;AACA;IACF;AAEA,QAAI,QAAU,OAAO,SAAS,OAAO,SAAU,MAAO;AACtD,QAAI,OAAO,IAAI,WAAW,IAAI;AAE9B,WAAO,OAAO,GAAG,GAAG;AAElB,UAAI,QAAQ,SAAS,OAAO,WAAW,GAAG,CAAC;AAE3C,UAAI,UAAU,KAAK;AAAE;MAAO;AAC5B,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,OAAO,KAAK,GAAG,MAAO;AAChC,aAAK,GAAG,IAAK,QAAQ,QAAS;AAC9B,gBAAS,QAAQ,QAAS;MAC5B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,KAAK,GAAG,MAAM,GAAG;AACtC;IACF;AACA,QAAI,MAAM,IAAI,WAAW,UAAU,OAAO,IAAI;AAC9C,QAAIE,KAAI;AACR,WAAO,QAAQ,MAAM;AACnB,UAAIA,IAAG,IAAI,KAAK,KAAK;IACvB;AACA,WAAO;EACT;AAIA,WAASC,SAAQC,SAAM;AACrB,QAAI,SAAS,aAAaA,OAAM;AAChC,QAAI,QAAQ;AAAE,aAAO;IAAO;AAC5B,UAAM,IAAI,MAAM,OAAON,KAAI,YAAY;EACzC;AACA,SAAO;IACL,QAAQC;IACR;IACA,QAAQI;;AAEZ;AACA,IAAIE,QAAMR;AAEV,IAAIS,oCAAkCD;AAEtC,IAAAE,mBAAeD;;;ACjIf,IAAME,YAAN,MAAa;EACF;EACA;EACA;EAET,YAAaC,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;EACpB;EAEA,OAAQ,OAAiB;AACvB,QAAI,iBAAiB,YAAY;AAC/B,aAAO,GAAG,KAAK,MAAM,GAAG,KAAK,WAAW,KAAK,CAAC;IAChD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;;AAQF,IAAMC,YAAN,MAAa;EACF;EACA;EACA;EACQ;EAEjB,YAAaD,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,UAAM,kBAAkB,OAAO,YAAY,CAAC;AAE5C,QAAI,oBAAoB,QAAW;AACjC,YAAM,IAAI,MAAM,0BAA0B;IAC5C;AACA,SAAK,kBAAkB;AACvB,SAAK,aAAa;EACpB;EAEA,OAAQ,MAAY;AAClB,QAAI,OAAO,SAAS,UAAU;AAC5B,UAAI,KAAK,YAAY,CAAC,MAAM,KAAK,iBAAiB;AAChD,cAAM,MAAM,qCAAqC,KAAK,UAAU,IAAI,CAAC,KAAK,KAAK,IAAI,+CAA+C,KAAK,MAAM,EAAE;MACjJ;AACA,aAAO,KAAK,WAAW,KAAK,MAAM,KAAK,OAAO,MAAM,CAAC;IACvD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;EAEA,GAAgC,SAAmE;AACjG,WAAOE,KAAG,MAAM,OAAO;EACzB;;AAKF,IAAMC,oBAAN,MAAqB;EACV;EAET,YAAa,UAA0B;AACrC,SAAK,WAAW;EAClB;EAEA,GAAiC,SAAmE;AAClG,WAAOD,KAAG,MAAM,OAAO;EACzB;EAEA,OAAQ,OAAa;AACnB,UAAM,SAAS,MAAM,CAAC;AACtB,UAAM,UAAU,KAAK,SAAS,MAAM;AACpC,QAAI,WAAW,MAAM;AACnB,aAAO,QAAQ,OAAO,KAAK;IAC7B,OAAO;AACL,YAAM,WAAW,qCAAqC,KAAK,UAAU,KAAK,CAAC,+BAA+B,OAAO,KAAK,KAAK,QAAQ,CAAC,gBAAgB;IACtJ;EACF;;AAGI,SAAUA,KAAyC,MAA+C,OAA8C;AACpJ,SAAO,IAAIC,kBAAgB;IACzB,GAAI,KAAK,YAAY,EAAE,CAAE,KAA2B,MAAM,GAAG,KAAI;IACjE,GAAI,MAAM,YAAY,EAAE,CAAE,MAA4B,MAAM,GAAG,MAAK;GAClD;AACtB;AAEM,IAAOC,UAAP,MAAY;EACP;EACA;EACA;EACA;EACA;EACA;EAET,YAAaJ,OAAY,QAAgB,YAAsB,YAAoB;AACjF,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,UAAU,IAAID,UAAQC,OAAM,QAAQ,UAAU;AACnD,SAAK,UAAU,IAAIC,UAAQD,OAAM,QAAQ,UAAU;EACrD;EAEA,OAAQ,OAAiB;AACvB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;EAEA,OAAQ,OAAa;AACnB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;;AAGI,SAAUK,OAAmD,EAAE,MAAAL,OAAM,QAAQ,QAAAM,UAAQ,QAAAC,SAAM,GAAsE;AACrK,SAAO,IAAIH,QAAMJ,OAAM,QAAQM,UAAQC,QAAM;AAC/C;AAEM,SAAUC,QAAoD,EAAE,MAAAR,OAAM,QAAQ,UAAAS,UAAQ,GAAoD;AAC9I,QAAM,EAAE,QAAAH,UAAQ,QAAAC,SAAM,IAAKG,iBAAMD,WAAUT,KAAI;AAC/C,SAAOK,OAAK;IACV;IACA,MAAAL;IACA,QAAAM;IACA,QAAQ,CAAC,SAA6BK,SAAOJ,SAAO,IAAI,CAAC;GAC1D;AACH;AAEA,SAASA,SAAQK,SAAgB,aAAqC,aAAqBZ,OAAY;AAErG,MAAI,MAAMY,QAAO;AACjB,SAAOA,QAAO,MAAM,CAAC,MAAM,KAAK;AAC9B,MAAE;EACJ;AAGA,QAAM,MAAM,IAAI,WAAY,MAAM,cAAc,IAAK,CAAC;AAGtD,MAAI,OAAO;AACX,MAAI,SAAS;AACb,MAAI,UAAU;AACd,WAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAE5B,UAAMC,SAAQ,YAAYD,QAAO,CAAC,CAAC;AACnC,QAAIC,WAAU,QAAW;AACvB,YAAM,IAAI,YAAY,OAAOb,KAAI,YAAY;IAC/C;AAGA,aAAU,UAAU,cAAea;AACnC,YAAQ;AAGR,QAAI,QAAQ,GAAG;AACb,cAAQ;AACR,UAAI,SAAS,IAAI,MAAQ,UAAU;IACrC;EACF;AAGA,MAAI,QAAQ,gBAAgB,MAAQ,UAAW,IAAI,UAAY,GAAG;AAChE,UAAM,IAAI,YAAY,wBAAwB;EAChD;AAEA,SAAO;AACT;AAEA,SAASP,SAAQ,MAAkBG,WAAkB,aAAmB;AACtE,QAAM,MAAMA,UAASA,UAAS,SAAS,CAAC,MAAM;AAC9C,QAAM,QAAQ,KAAK,eAAe;AAClC,MAAI,MAAM;AAEV,MAAI,OAAO;AACX,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAEpC,aAAU,UAAU,IAAK,KAAK,CAAC;AAC/B,YAAQ;AAGR,WAAO,OAAO,aAAa;AACzB,cAAQ;AACR,aAAOA,UAAS,OAAQ,UAAU,IAAK;IACzC;EACF;AAGA,MAAI,SAAS,GAAG;AACd,WAAOA,UAAS,OAAQ,UAAW,cAAc,IAAM;EACzD;AAGA,MAAI,KAAK;AACP,YAAS,IAAI,SAAS,cAAe,OAAO,GAAG;AAC7C,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEA,SAASK,oBAAmBL,WAAgB;AAE1C,QAAM,cAAsC,CAAA;AAC5C,WAAS,IAAI,GAAG,IAAIA,UAAS,QAAQ,EAAE,GAAG;AACxC,gBAAYA,UAAS,CAAC,CAAC,IAAI;EAC7B;AACA,SAAO;AACT;AAKM,SAAUM,UAAsD,EAAE,MAAAf,OAAM,QAAQ,aAAa,UAAAS,UAAQ,GAAyE;AAClL,QAAM,cAAcK,oBAAkBL,SAAQ;AAC9C,SAAOJ,OAAK;IACV;IACA,MAAAL;IACA,OAAQ,OAAiB;AACvB,aAAOM,SAAO,OAAOG,WAAU,WAAW;IAC5C;IACA,OAAQ,OAAa;AACnB,aAAOF,SAAO,OAAO,aAAa,aAAaP,KAAI;IACrD;GACD;AACH;;;AC9OO,IAAMgB,UAASC,UAAQ;EAC5B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMC,eAAcD,UAAQ;EACjC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAME,aAAYF,UAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMG,kBAAiBH,UAAQ;EACpC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMI,aAAYJ,UAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMK,kBAAiBL,UAAQ;EACpC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMM,gBAAeN,UAAQ;EAClC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMO,qBAAoBP,UAAQ;EACvC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMQ,WAAUR,UAAQ;EAC7B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;;;AC7DM,IAAMS,UAASC,QAAM;EAC1B,QAAQ;EACR,MAAM;EACN,UAAU;CACX;AAEM,IAAMC,eAAcD,QAAM;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;CACX;;;ACVM,IAAME,cAAYC,QAAM;EAC7B,MAAM;EACN,QAAQ;EACR,UAAU;CACX;AAEM,IAAMC,iBAAeD,QAAM;EAChC,MAAM;EACN,QAAQ;EACR,UAAU;CACX;;;ACXD,IAAIE,aAAWC;AAEf,IAAIC,QAAM;AAAV,IACIC,SAAO;AADX,IAEIC,WAAS,CAACD;AAFd,IAGIE,QAAM,KAAK,IAAI,GAAG,EAAE;AAOxB,SAASJ,SAAO,KAAK,KAAK,QAAM;AAC9B,QAAM,OAAO,CAAA;AACb,WAAS,UAAU;AACnB,MAAI,YAAY;AAEhB,SAAM,OAAOI,OAAK;AAChB,QAAI,QAAQ,IAAK,MAAM,MAAQH;AAC/B,WAAO;EACT;AACA,SAAM,MAAME,UAAQ;AAClB,QAAI,QAAQ,IAAK,MAAM,MAAQF;AAC/B,aAAS;EACX;AACA,MAAI,MAAM,IAAI,MAAM;AAGpB,EAAAD,SAAO,QAAQ,SAAS,YAAY;AAEpC,SAAO;AACT;AAEA,IAAIK,WAASC;AAEb,IAAIC,UAAQ;AAAZ,IACIC,WAAS;AAMb,SAASF,OAAK,KAAK,QAAM;AACvB,MAAI,MAAS,GACT,SAAS,UAAU,GACnB,QAAS,GACT,UAAU,QACV,GACA,IAAI,IAAI;AAEZ,KAAG;AACD,QAAI,WAAW,GAAG;AAEhB,MAAAA,OAAK,QAAQ;AACb,YAAM,IAAI,WAAW,yBAAyB;IAChD;AACA,QAAI,IAAI,SAAS;AACjB,WAAO,QAAQ,MACV,IAAIE,aAAW,SACf,IAAIA,YAAU,KAAK,IAAI,GAAG,KAAK;AACpC,aAAS;EACX,SAAS,KAAKD;AAGd,EAAAD,OAAK,QAAQ,UAAU;AAEvB,SAAO;AACT;AAEA,IAAIG,OAAK,KAAK,IAAI,GAAI,CAAC;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AAEvB,IAAIC,WAAS,SAAgCC,QAAK;AAChD,SACEA,SAAQV,OAAK,IACbU,SAAQT,OAAK,IACbS,SAAQR,OAAK,IACbQ,SAAQP,OAAK,IACbO,SAAQN,OAAK,IACbM,SAAQL,OAAK,IACbK,SAAQJ,OAAK,IACbI,SAAQH,OAAK,IACbG,SAAQF,OAAK,IACA;AAEjB;AAEA,IAAIG,WAAS;EACT,QAAQrB;EACR,QAAQM;EACR,gBAAgBa;;AAGpB,IAAIG,iBAAeD;AAEnB,IAAAE,mBAAeD;;;ACrGT,SAAUE,SAAQ,MAAkB,SAAS,GAAC;AAClD,QAAMC,SAAOC,iBAAO,OAAO,MAAM,MAAM;AACvC,SAAO,CAACD,QAAMC,iBAAO,OAAO,KAAK;AACnC;AAEM,SAAUC,WAAU,KAAa,QAAoB,SAAS,GAAC;AACnE,EAAAD,iBAAO,OAAO,KAAK,QAAQ,MAAM;AACjC,SAAO;AACT;AAEM,SAAUE,iBAAgB,KAAW;AACzC,SAAOF,iBAAO,eAAe,GAAG;AAClC;;;ACPM,SAAUG,QAA8BC,QAAYC,SAAkB;AAC1E,QAAM,OAAOA,QAAO;AACpB,QAAM,aAAoBC,iBAAeF,MAAI;AAC7C,QAAM,eAAe,aAAoBE,iBAAe,IAAI;AAE5D,QAAM,QAAQ,IAAI,WAAW,eAAe,IAAI;AAChD,EAAOC,WAASH,QAAM,OAAO,CAAC;AAC9B,EAAOG,WAAS,MAAM,OAAO,UAAU;AACvC,QAAM,IAAIF,SAAQ,YAAY;AAE9B,SAAO,IAAIG,SAAOJ,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAKM,SAAUI,SAAQ,WAAqB;AAC3C,QAAM,QAAQC,SAAO,SAAS;AAC9B,QAAM,CAACN,QAAM,UAAU,IAAWK,SAAO,KAAK;AAC9C,QAAM,CAAC,MAAM,YAAY,IAAWA,SAAO,MAAM,SAAS,UAAU,CAAC;AACrE,QAAMJ,UAAS,MAAM,SAAS,aAAa,YAAY;AAEvD,MAAIA,QAAO,eAAe,MAAM;AAC9B,UAAM,IAAI,MAAM,kBAAkB;EACpC;AAEA,SAAO,IAAIG,SAAOJ,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAEM,SAAUM,SAAQ,GAAoB,GAAU;AACpD,MAAI,MAAM,GAAG;AACX,WAAO;EACT,OAAO;AACL,UAAM,OAAO;AAEb,WACE,EAAE,SAAS,KAAK,QAChB,EAAE,SAAS,KAAK,QAChB,KAAK,iBAAiB,cACtBA,SAAW,EAAE,OAAO,KAAK,KAAK;EAElC;AACF;AAMM,IAAOH,WAAP,MAAa;EACR;EACA;EACA;EACA;;;;EAKT,YAAaJ,QAAY,MAAYC,SAAoB,OAAiB;AACxE,SAAK,OAAOD;AACZ,SAAK,OAAO;AACZ,SAAK,SAASC;AACd,SAAK,QAAQ;EACf;;;;AC1DI,SAAUO,QAA0F,MAASC,QAAmC;AACpJ,QAAM,EAAE,OAAO,SAAAC,SAAO,IAAK;AAC3B,UAAQA,UAAS;IACf,KAAK;AACH,aAAOC,YACL,OACAC,WAAU,IAAI,GACdH,UAAqCI,YAAU,OAAO;IAE1D;AACE,aAAOC,YACL,OACAF,WAAU,IAAI,GACbH,UAAQM,QAAO,OAAwC;EAE9D;AACF;AAYA,IAAMC,SAAQ,oBAAI,QAAO;AAEzB,SAASC,WAAW,KAAoB;AACtC,QAAMA,cAAYD,OAAM,IAAI,GAAG;AAC/B,MAAIC,eAAa,MAAM;AACrB,UAAMA,cAAY,oBAAI,IAAG;AACzB,IAAAD,OAAM,IAAI,KAAKC,WAAS;AACxB,WAAOA;EACT;AACA,SAAOA;AACT;AAEM,IAAOC,OAAP,MAAO,KAAG;EACL;EACA;EACA;EACA;EACA;;;;;;EAOT,YAAaC,UAAkBC,QAAc,WAAqC,OAAiB;AACjG,SAAK,OAAOA;AACZ,SAAK,UAAUD;AACf,SAAK,YAAY;AACjB,SAAK,QAAQ;AAIb,SAAK,GAAG,IAAI;EACd;;;;;;;EAQA,IAAI,QAAK;AACP,WAAO;EACT;;EAGA,IAAI,aAAU;AACZ,WAAO,KAAK,MAAM;EACpB;;EAGA,IAAI,aAAU;AACZ,WAAO,KAAK,MAAM;EACpB;EAEA,OAAI;AACF,YAAQ,KAAK,SAAS;MACpB,KAAK,GAAG;AACN,eAAO;MACT;MACA,KAAK,GAAG;AACN,cAAM,EAAE,MAAAC,QAAM,UAAS,IAAK;AAE5B,YAAIA,WAASC,cAAa;AACxB,gBAAM,IAAI,MAAM,0CAA0C;QAC5D;AAGA,YAAI,UAAU,SAASC,eAAc;AACnC,gBAAM,IAAI,MAAM,oDAAoD;QACtE;AAEA,eACE,KAAI,SACF,SAA6C;MAGnD;MACA,SAAS;AACP,cAAM,MACJ,+BAA+B,KAAK,OAAO,4CAA4C;MAE3F;IACF;EACF;EAEA,OAAI;AACF,YAAQ,KAAK,SAAS;MACpB,KAAK,GAAG;AACN,cAAM,EAAE,MAAAF,QAAM,QAAAG,QAAM,IAAK,KAAK;AAC9B,cAAM,YAAmBC,QAAOJ,QAAMG,OAAM;AAC5C,eACE,KAAI,SAAS,KAAK,MAAM,SAAS;MAErC;MACA,KAAK,GAAG;AACN,eAAO;MACT;MACA,SAAS;AACP,cAAM,MACJ,+BAA+B,KAAK,OAAO,4CAA4C;MAE3F;IACF;EACF;EAEA,OAAQ,OAAc;AACpB,WAAO,KAAI,OAAO,MAAM,KAAK;EAC/B;EAEA,OAAO,OAAsFE,OAA4C,OAAc;AACrJ,UAAM,UAAU;AAChB,WACE,WAAW,QACXA,MAAK,SAAS,QAAQ,QACtBA,MAAK,YAAY,QAAQ,WAClBC,SAAOD,MAAK,WAAW,QAAQ,SAAS;EAEnD;EAEA,SAAUE,QAAmC;AAC3C,WAAOC,QAAO,MAAMD,MAAI;EAC1B;EAEA,SAAM;AACJ,WAAO,EAAE,KAAKC,QAAO,IAAI,EAAC;EAC5B;EAEA,OAAI;AACF,WAAO;EACT;EAES,CAAC,OAAO,WAAW,IAAI;;EAIhC,CAAC,OAAO,IAAI,4BAA4B,CAAC,IAAC;AACxC,WAAO,OAAO,KAAK,SAAQ,CAAE;EAC/B;;;;;;;;;;;EAYA,OAAO,MAAwF,OAA+C;AAC5I,QAAI,SAAS,MAAM;AACjB,aAAO;IACT;AAEA,UAAMC,SAAQ;AACd,QAAIA,kBAAiB,MAAK;AAExB,aAAOA;IACT,WAAYA,OAAM,GAAG,KAAK,QAAQA,OAAM,GAAG,MAAMA,OAAM,SAAUA,OAAM,UAAUA,QAAO;AAMtF,YAAM,EAAE,SAAAV,UAAS,MAAAC,QAAM,WAAW,MAAK,IAAKS;AAC5C,aAAO,IAAI,KACTV,UACAC,QACA,WACA,SAASU,WAAUX,UAASC,QAAM,UAAU,KAAK,CAAC;IAEtD,WAAWS,OAAME,UAAS,MAAM,MAAM;AAIpC,YAAM,EAAE,SAAAZ,UAAS,WAAW,MAAAC,OAAI,IAAKS;AACrC,YAAMN,UAAgBS,SAAO,SAAS;AACtC,aAAO,KAAI,OAAOb,UAASC,QAAMG,OAAM;IACzC,OAAO;AAGL,aAAO;IACT;EACF;;;;;;EAOA,OAAO,OAAsFJ,UAAkBC,QAAcG,SAAgC;AAC3J,QAAI,OAAOH,WAAS,UAAU;AAC5B,YAAM,IAAI,MAAM,uCAAuC;IACzD;AAEA,QAAI,EAAEG,QAAO,iBAAiB,aAAa;AACzC,YAAM,IAAI,MAAM,gBAAgB;IAClC;AAEA,YAAQJ,UAAS;MACf,KAAK,GAAG;AACN,YAAIC,WAASC,cAAa;AACxB,gBAAM,IAAI,MACR,wCAAwCA,YAAW,kBAAkB;QAEzE,OAAO;AACL,iBAAO,IAAI,KAAIF,UAASC,QAAMG,SAAQA,QAAO,KAAK;QACpD;MACF;MACA,KAAK,GAAG;AACN,cAAM,QAAQO,WAAUX,UAASC,QAAMG,QAAO,KAAK;AACnD,eAAO,IAAI,KAAIJ,UAASC,QAAMG,SAAQ,KAAK;MAC7C;MACA,SAAS;AACP,cAAM,IAAI,MAAM,iBAAiB;MACnC;IACF;EACF;;;;EAKA,OAAO,SAAuBA,SAAgD;AAC5E,WAAO,KAAI,OAAO,GAAGF,cAAaE,OAAM;EAC1C;;;;;;;EAQA,OAAO,SAAyDH,QAAYG,SAAgC;AAC1G,WAAO,KAAI,OAAO,GAAGH,QAAMG,OAAM;EACnC;;;;;;;;EASA,OAAO,OAAoF,OAAuD;AAChJ,UAAM,CAAC,KAAK,SAAS,IAAI,KAAI,YAAY,KAAK;AAC9C,QAAI,UAAU,WAAW,GAAG;AAC1B,YAAM,IAAI,MAAM,kBAAkB;IACpC;AACA,WAAO;EACT;;;;;;;;;;EAWA,OAAO,YAA2E,OAAyC;AACzH,UAAM,QAAQ,KAAI,aAAa,KAAK;AACpC,UAAM,aAAa,MAAM,OAAO,MAAM;AACtC,UAAM,iBAAiBU,SACrB,MAAM,SAAS,YAAY,aAAa,MAAM,aAAa,CAAC;AAE9D,QAAI,eAAe,eAAe,MAAM,eAAe;AACrD,YAAM,IAAI,MAAM,kBAAkB;IACpC;AACA,UAAM,cAAc,eAAe,SACjC,MAAM,gBAAgB,MAAM,UAAU;AAExC,UAAMV,UAAS,IAAWW,SACxB,MAAM,eACN,MAAM,YACN,aACA,cAAc;AAEhB,UAAM,MACJ,MAAM,YAAY,IACd,KAAI,SAASX,OAA0C,IACvD,KAAI,SAAS,MAAM,OAAOA,OAAM;AACtC,WAAO,CAAC,KAAwB,MAAM,SAAS,MAAM,IAAI,CAAC;EAC5D;;;;;;;;;;EAWA,OAAO,aAA4E,cAAgD;AACjI,QAAI,SAAS;AACb,UAAM,OAAO,MAAa;AACxB,YAAM,CAAC,GAAGY,QAAM,IAAWH,SAAO,aAAa,SAAS,MAAM,CAAC;AAC/D,gBAAUG;AACV,aAAO;IACT;AAEA,QAAIhB,WAAU,KAAI;AAClB,QAAI,QAAQE;AACZ,QAAIF,aAAsB,IAAI;AAE5B,MAAAA,WAAU;AACV,eAAS;IACX,OAAO;AACL,cAAQ,KAAI;IACd;AAEA,QAAIA,aAAY,KAAKA,aAAY,GAAG;AAClC,YAAM,IAAI,WAAW,uBAAuBA,QAAO,EAAE;IACvD;AAEA,UAAM,aAAa;AACnB,UAAM,gBAAgB,KAAI;AAC1B,UAAM,aAAa,KAAI;AACvB,UAAM,OAAO,SAAS;AACtB,UAAM,gBAAgB,OAAO;AAE7B,WAAO,EAAE,SAAAA,UAAS,OAAO,eAAe,YAAY,eAAe,KAAI;EACzE;;;;;;;EAQA,OAAO,MAA0G,QAAkEQ,QAAmC;AACpN,UAAM,CAAC,QAAQ,KAAK,IAAIS,iBAAgB,QAAQT,MAAI;AAEpD,UAAM,MAAM,KAAI,OAAO,KAAK;AAE5B,QAAI,IAAI,YAAY,KAAK,OAAO,CAAC,MAAM,KAAK;AAC1C,YAAM,MAAM,wDAAwD;IACtE;AAGA,IAAAV,WAAU,GAAG,EAAE,IAAI,QAAQ,MAAM;AAEjC,WAAO;EACT;;AAGF,SAASmB,iBAAqH,QAAkET,QAAmC;AACjO,UAAQ,OAAO,CAAC,GAAG;;IAEjB,KAAK,KAAK;AACR,YAAM,UAAUA,UAAQU;AACxB,aAAO;QACLA,YAAU;QACV,QAAQ,OAAO,GAAGA,YAAU,MAAM,GAAG,MAAM,EAAE;;IAEjD;IACA,KAAKA,YAAU,QAAQ;AACrB,YAAM,UAAUV,UAAQU;AACxB,aAAO,CAACA,YAAU,QAAkB,QAAQ,OAAO,MAAM,CAAC;IAC5D;IACA,KAAKC,QAAO,QAAQ;AAClB,YAAM,UAAUX,UAAQW;AACxB,aAAO,CAACA,QAAO,QAAkB,QAAQ,OAAO,MAAM,CAAC;IACzD;IACA,KAAKC,QAAO,QAAQ;AAClB,YAAM,UAAUZ,UAAQY;AACxB,aAAO,CAACA,QAAO,QAAkB,QAAQ,OAAO,MAAM,CAAC;IACzD;IACA,SAAS;AACP,UAAIZ,UAAQ,MAAM;AAChB,cAAM,MACJ,yFAAyF;MAE7F;AACA,aAAO,CAAC,OAAO,CAAC,GAAaA,OAAK,OAAO,MAAM,CAAC;IAClD;EACF;AACF;AAEA,SAASa,YAAY,OAAmBxB,SAA4BW,QAA+B;AACjG,QAAM,EAAE,OAAM,IAAKA;AACnB,MAAI,WAAWU,YAAU,QAAQ;AAC/B,UAAM,MAAM,8BAA8BV,OAAK,IAAI,WAAW;EAChE;AAEA,QAAM,MAAMX,QAAM,IAAI,MAAM;AAC5B,MAAI,OAAO,MAAM;AACf,UAAMyB,OAAMd,OAAK,OAAO,KAAK,EAAE,MAAM,CAAC;AACtC,IAAAX,QAAM,IAAI,QAAQyB,IAAG;AACrB,WAAOA;EACT,OAAO;AACL,WAAO;EACT;AACF;AAEA,SAASC,YAAoC,OAAmB1B,SAA4BW,QAAkC;AAC5H,QAAM,EAAE,OAAM,IAAKA;AACnB,QAAM,MAAMX,QAAM,IAAI,MAAM;AAC5B,MAAI,OAAO,MAAM;AACf,UAAMyB,OAAMd,OAAK,OAAO,KAAK;AAC7B,IAAAX,QAAM,IAAI,QAAQyB,IAAG;AACrB,WAAOA;EACT,OAAO;AACL,WAAO;EACT;AACF;AAEA,IAAMpB,eAAc;AACpB,IAAMC,gBAAe;AAErB,SAASQ,WAAWX,UAAsBC,QAAc,WAAqB;AAC3E,QAAM,aAAoBuB,iBAAexB,QAAO;AAChD,QAAM,aAAa,aAAoBwB,iBAAevB,MAAI;AAC1D,QAAM,QAAQ,IAAI,WAAW,aAAa,UAAU,UAAU;AAC9D,EAAOwB,WAASzB,UAAS,OAAO,CAAC;AACjC,EAAOyB,WAASxB,QAAM,OAAO,UAAU;AACvC,QAAM,IAAI,WAAW,UAAU;AAC/B,SAAO;AACT;AAEA,IAAMW,aAAY,OAAO,IAAI,kBAAkB;;;AC7cxC,IAAM,kBAAkB;AACxB,IAAM,eAAe;;;ACgBtB,IAAW;CAAjB,SAAiBc,OAAI;AAMnB,MAAiB;AAAjB,GAAA,SAAiBC,qBAAkB;AACjC,QAAIC;AAES,IAAAD,oBAAA,QAAQ,MAAgC;AACnD,UAAIC,WAAU,MAAM;AAClB,QAAAA,UAAS,QAA4B,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AACzD,cAAI,KAAK,oBAAoB,OAAO;AAClC,cAAE,KAAI;UACR;AAEA,cAAK,IAAI,OAAO,QAAQ,IAAI,QAAQ,IAAK;AACvC,cAAE,OAAO,EAAE;AACX,cAAE,OAAO,IAAI,GAAG;UAClB;AAEA,cAAK,IAAI,SAAS,QAAQ,IAAI,MAAM,aAAa,GAAI;AACnD,cAAE,OAAO,EAAE;AACX,cAAE,MAAM,IAAI,KAAK;UACnB;AAEA,cAAI,KAAK,oBAAoB,OAAO;AAClC,cAAE,OAAM;UACV;QACF,GAAG,CAAC,QAAQC,UAAQ,OAAO,CAAA,MAAM;AAC/B,gBAAM,MAAW;YACf,KAAK;YACL,OAAO,MAAgB,CAAC;;AAG1B,gBAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,iBAAO,OAAO,MAAM,KAAK;AACvB,kBAAM,MAAM,OAAO,OAAM;AAEzB,oBAAQ,QAAQ,GAAG;cACjB,KAAK,GAAG;AACN,oBAAI,MAAM,OAAO,OAAM;AACvB;cACF;cACA,KAAK,GAAG;AACN,oBAAI,QAAQ,OAAO,MAAK;AACxB;cACF;cACA,SAAS;AACP,uBAAO,SAAS,MAAM,CAAC;AACvB;cACF;YACF;UACF;AAEA,iBAAO;QACT,CAAC;MACH;AAEA,aAAOD;IACT;AAEa,IAAAD,oBAAA,SAAS,CAAC,QAAgD;AACrE,aAAO,cAAc,KAAKA,oBAAmB,MAAK,CAAE;IACtD;AAEa,IAAAA,oBAAA,SAAS,CAAC,KAAkC,SAAgE;AACvH,aAAO,cAAc,KAAKA,oBAAmB,MAAK,GAAI,IAAI;IAC5D;EACF,GAhEiB,qBAAAD,MAAA,uBAAAA,MAAA,qBAAkB,CAAA,EAAA;AAuEnC,MAAiB;AAAjB,GAAA,SAAiBI,iBAAc;AAC7B,QAAIF;AAES,IAAAE,gBAAA,QAAQ,MAA4B;AAC/C,UAAIF,WAAU,MAAM;AAClB,QAAAA,UAAS,QAAwB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AACrD,cAAI,KAAK,oBAAoB,OAAO;AAClC,cAAE,KAAI;UACR;AAEA,cAAK,IAAI,OAAO,QAAQ,IAAI,QAAQ,IAAK;AACvC,cAAE,OAAO,EAAE;AACX,cAAE,OAAO,IAAI,GAAG;UAClB;AAEA,cAAI,IAAI,SAAS,MAAM;AACrB,cAAE,OAAO,EAAE;AACX,gBAAI,MAAK,EAAG,OAAO,IAAI,OAAO,CAAC;UACjC;AAEA,cAAI,KAAK,oBAAoB,OAAO;AAClC,cAAE,OAAM;UACV;QACF,GAAG,CAAC,QAAQC,UAAQ,OAAO,CAAA,MAAM;AAC/B,gBAAM,MAAW;YACf,KAAK;;AAGP,gBAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,iBAAO,OAAO,MAAM,KAAK;AACvB,kBAAM,MAAM,OAAO,OAAM;AAEzB,oBAAQ,QAAQ,GAAG;cACjB,KAAK,GAAG;AACN,oBAAI,MAAM,OAAO,OAAM;AACvB;cACF;cACA,KAAK,GAAG;AACN,oBAAI,QAAQ,IAAI,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;kBACtD,QAAQ,KAAK,QAAQ;iBACtB;AACD;cACF;cACA,SAAS;AACP,uBAAO,SAAS,MAAM,CAAC;AACvB;cACF;YACF;UACF;AAEA,iBAAO;QACT,CAAC;MACH;AAEA,aAAOD;IACT;AAEa,IAAAE,gBAAA,SAAS,CAAC,QAA4C;AACjE,aAAO,cAAc,KAAKA,gBAAe,MAAK,CAAE;IAClD;AAEa,IAAAA,gBAAA,SAAS,CAAC,KAAkC,SAAwD;AAC/G,aAAO,cAAc,KAAKA,gBAAe,MAAK,GAAI,IAAI;IACxD;EACF,GAjEiB,iBAAAJ,MAAA,mBAAAA,MAAA,iBAAc,CAAA,EAAA;AAmE/B,MAAI;AAES,EAAAA,MAAA,QAAQ,MAAkB;AACrC,QAAI,UAAU,MAAM;AAClB,eAAS,QAAc,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAC3C,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAI,IAAI,aAAa,MAAM;AACzB,qBAAWK,UAAS,IAAI,WAAW;AACjC,cAAE,OAAO,EAAE;AACX,oBAAQ,MAAK,EAAG,OAAOA,QAAO,CAAC;UACjC;QACF;AAEA,YAAI,IAAI,aAAa,MAAM;AACzB,qBAAWA,UAAS,IAAI,WAAW;AACjC,cAAE,OAAO,EAAE;AACX,cAAE,OAAOA,MAAK;UAChB;QACF;AAEA,YAAI,IAAI,aAAa,MAAM;AACzB,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,SAAS;QACvB;AAEA,YAAI,IAAI,sBAAsB,MAAM;AAClC,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,kBAAkB;QAChC;AAEA,YAAI,IAAI,YAAY,QAAQ,IAAI,SAAS,SAAS,GAAG;AACnD,qBAAW,CAAC,KAAKA,MAAK,KAAK,IAAI,SAAS,QAAO,GAAI;AACjD,cAAE,OAAO,EAAE;AACX,YAAAL,MAAK,mBAAmB,MAAK,EAAG,OAAO,EAAE,KAAK,OAAAK,OAAK,GAAI,CAAC;UAC1D;QACF;AAEA,YAAI,IAAI,QAAQ,QAAQ,IAAI,KAAK,SAAS,GAAG;AAC3C,qBAAW,CAAC,KAAKA,MAAK,KAAK,IAAI,KAAK,QAAO,GAAI;AAC7C,cAAE,OAAO,EAAE;AACX,YAAAL,MAAK,eAAe,MAAK,EAAG,OAAO,EAAE,KAAK,OAAAK,OAAK,GAAI,CAAC;UACtD;QACF;AAEA,YAAI,IAAI,WAAW,MAAM;AACvB,YAAE,OAAO,EAAE;AACX,YAAE,aAAa,IAAI,OAAO;QAC5B;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQF,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,WAAW,CAAA;UACX,WAAW,CAAA;UACX,UAAU,oBAAI,IAAG;UACjB,MAAM,oBAAI,IAAG;;AAGf,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,KAAK,QAAQ,aAAa,QAAQ,IAAI,UAAU,WAAW,KAAK,OAAO,WAAW;AACpF,sBAAM,IAAI,eAAe,4DAA4D;cACvF;AAEA,kBAAI,UAAU,KAAK,QAAQ,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;gBACjE,QAAQ,KAAK,QAAQ;eACtB,CAAC;AACF;YACF;YACA,KAAK,GAAG;AACN,kBAAI,KAAK,QAAQ,aAAa,QAAQ,IAAI,UAAU,WAAW,KAAK,OAAO,WAAW;AACpF,sBAAM,IAAI,eAAe,4DAA4D;cACvF;AAEA,kBAAI,UAAU,KAAK,OAAO,OAAM,CAAE;AAClC;YACF;YACA,KAAK,GAAG;AACN,kBAAI,YAAY,OAAO,MAAK;AAC5B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,qBAAqB,OAAO,MAAK;AACrC;YACF;YACA,KAAK,GAAG;AACN,kBAAI,KAAK,QAAQ,YAAY,QAAQ,IAAI,SAAS,SAAS,KAAK,OAAO,UAAU;AAC/E,sBAAM,IAAI,aAAa,2DAA2D;cACpF;AAEA,oBAAM,QAAQH,MAAK,mBAAmB,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,CAAE;AAC5E,kBAAI,SAAS,IAAI,MAAM,KAAK,MAAM,KAAK;AACvC;YACF;YACA,KAAK,GAAG;AACN,kBAAI,KAAK,QAAQ,QAAQ,QAAQ,IAAI,KAAK,SAAS,KAAK,OAAO,MAAM;AACnE,sBAAM,IAAI,aAAa,uDAAuD;cAChF;AAEA,oBAAM,QAAQA,MAAK,eAAe,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;gBACxE,QAAQ;kBACN,OAAO,KAAK,QAAQ;;eAEvB;AACD,kBAAI,KAAK,IAAI,MAAM,KAAK,MAAM,KAAK;AACnC;YACF;YACA,KAAK,GAAG;AACN,kBAAI,UAAU,OAAO,aAAY;AACjC;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAA,MAAA,SAAS,CAAC,QAAkC;AACvD,WAAO,cAAc,KAAKA,MAAK,MAAK,CAAE;EACxC;AAEa,EAAAA,MAAA,SAAS,CAAC,KAAkC,SAAoC;AAC3F,WAAO,cAAc,KAAKA,MAAK,MAAK,GAAI,IAAI;EAC9C;AACF,GA9RiB,SAAA,OAAI,CAAA,EAAA;AAsSf,IAAW;CAAjB,SAAiBM,UAAO;AACtB,MAAI;AAES,EAAAA,SAAA,QAAQ,MAAqB;AACxC,QAAI,UAAU,MAAM;AAClB,eAAS,QAAiB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAC9C,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAK,IAAI,aAAa,QAAQ,IAAI,UAAU,aAAa,GAAI;AAC3D,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,SAAS;QACvB;AAEA,YAAI,IAAI,eAAe,MAAM;AAC3B,YAAE,OAAO,EAAE;AACX,YAAE,KAAK,IAAI,WAAW;QACxB;AAEA,YAAI,IAAI,YAAY,MAAM;AACxB,YAAE,OAAO,EAAE;AACX,YAAE,aAAa,IAAI,QAAQ;QAC7B;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQH,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,WAAW,MAAgB,CAAC;;AAG9B,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,YAAY,OAAO,MAAK;AAC5B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,cAAc,OAAO,KAAI;AAC7B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,WAAW,OAAO,aAAY;AAClC;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAG,SAAA,SAAS,CAAC,QAAqC;AAC1D,WAAO,cAAc,KAAKA,SAAQ,MAAK,CAAE;EAC3C;AAEa,EAAAA,SAAA,SAAS,CAAC,KAAkC,SAA0C;AACjG,WAAO,cAAc,KAAKA,SAAQ,MAAK,GAAI,IAAI;EACjD;AACF,GAxEiB,YAAA,UAAO,CAAA,EAAA;AA+ElB,IAAW;CAAjB,SAAiBC,MAAG;AAClB,MAAI;AAES,EAAAA,KAAA,QAAQ,MAAiB;AACpC,QAAI,UAAU,MAAM;AAClB,eAAS,QAAa,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAC1C,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAK,IAAI,SAAS,QAAQ,IAAI,UAAU,GAAI;AAC1C,YAAE,OAAO,CAAC;AACV,YAAE,OAAO,IAAI,KAAK;QACpB;AAEA,YAAI,IAAI,UAAU,MAAM;AACtB,YAAE,OAAO,EAAE;AACX,YAAE,OAAO,IAAI,MAAM;QACrB;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQJ,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,OAAO;;AAGT,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,QAAQ,OAAO,OAAM;AACzB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,SAAS,OAAO,OAAM;AAC1B;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAI,KAAA,SAAS,CAAC,QAAiC;AACtD,WAAO,cAAc,KAAKA,KAAI,MAAK,CAAE;EACvC;AAEa,EAAAA,KAAA,SAAS,CAAC,KAAkC,SAAkC;AACzF,WAAO,cAAc,KAAKA,KAAI,MAAK,GAAI,IAAI;EAC7C;AACF,GA/DiB,QAAA,MAAG,CAAA,EAAA;;;AC/XpB,SAAS,kBAAmBC,SAAgB,UAAgB;AAC1D,MAAIA,QAAO,aAAa,QAAQ,SAAS,aAAa,MAAM;AAC1D,WAAOA;EACT;AAEA,MAAIC;AAEJ,MAAID,QAAO,SAAS,OAAO;AAEzB,IAAAC,UAASD,QAAO,YAAW;EAC7B;AAEA,QAAME,aAAY,sBAAsB,SAAS,WAAWD,OAAM;AAClE,SAAO,oBAAoBC,UAAS;AACtC;AAEM,SAAU,YAAaF,SAAgB,KAAiB,eAAqB;AACjF,QAAM,OAAO,KAAO,OAAO,GAAG;AAE9B,SAAO,SAASA,SAAQ,MAAM,aAAa;AAC7C;AAEM,SAAU,SAAUA,SAAgB,MAAc,eAAqB;AAC3E,QAAM,OAAO,oBAAI,IAAG;AAGpB,QAAM,MAAM,OAAO,KAAK,IAAG,CAAE;AAE7B,aAAW,CAAC,KAAK,GAAG,KAAK,KAAK,KAAK,QAAO,GAAI;AAC5C,QAAI,IAAI,UAAU,QAAQ,IAAI,SAAS,KAAK;AAC1C;IACF;AAEA,SAAK,IAAI,KAAK,GAAG;EACnB;AAEA,SAAO;IACL,GAAG;IACH,IAAI,kBAAkBA,SAAQ,IAAI;IAClC,WAAW,KAAK,UAEb,OAAO,CAAC,EAAE,SAAQ,MAAO,YAAY,QAAQ,WAAY,KAAK,IAAG,IAAK,aAAc,EACpF,IAAI,CAAC,EAAE,WAAW,IAAI,YAAW,MAAM;AACtC,aAAO;QACL,WAAW,UAAU,EAAE;QACvB,aAAa,eAAe;;IAEhC,CAAC;IACH,UAAU,KAAK;IACf,oBAAoB,KAAK,sBAAsB;IAC/C;;AAEJ;;;ACxDM,SAAU,WAAY,OAAa,OAAW;AAClD,SAAO,eAAe,MAAM,WAAW,MAAM,SAAS,KACpD,eAAe,MAAM,WAAW,MAAM,SAAS,KAC/C,eAAe,MAAM,WAAW,MAAM,SAAS,KAC/C,mBAAmB,MAAM,oBAAoB,MAAM,kBAAkB,KACrE,cAAc,MAAM,UAAU,MAAM,QAAQ,KAC5C,UAAU,MAAM,MAAM,MAAM,IAAI;AACpC;AAEA,SAAS,eAAgB,YAAuB,YAAqB;AACnE,SAAO,cAAc,YAAY,YAAY,CAAC,GAAG,MAAK;AACpD,QAAI,EAAE,gBAAgB,EAAE,aAAa;AACnC,aAAO;IACT;AAEA,QAAI,CAAC,OAAiB,EAAE,WAAW,EAAE,SAAS,GAAG;AAC/C,aAAO;IACT;AAEA,WAAO;EACT,CAAC;AACH;AAEA,SAAS,eAAgB,YAAsB,YAAoB;AACjE,SAAO,cAAc,YAAY,YAAY,CAAC,GAAG,MAAM,MAAM,CAAC;AAChE;AAEA,SAAS,eAAgB,YAAyB,YAAuB;AACvE,SAAO,2BAA2B,YAAY,UAAU;AAC1D;AAEA,SAAS,mBAAoB,WAAwB,WAAsB;AACzE,SAAO,2BAA2B,WAAW,SAAS;AACxD;AAEA,SAAS,cAAe,WAAoC,WAAkC;AAC5F,SAAO,YAAY,WAAW,WAAW,CAAC,GAAG,MAAM,OAAiB,GAAG,CAAC,CAAC;AAC3E;AAEA,SAAS,UAAW,WAA6B,WAA2B;AAC1E,SAAO,YAAY,WAAW,WAAW,CAAC,GAAG,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM;AACjG;AAEA,SAAS,2BAA4B,MAAmB,MAAiB;AACvE,MAAI,QAAQ,QAAQ,QAAQ,MAAM;AAChC,WAAO;EACT;AAEA,MAAI,QAAQ,QAAQ,QAAQ,MAAM;AAChC,WAAO,OAAiB,MAAM,IAAI;EACpC;AAEA,SAAO;AACT;AAEA,SAAS,cAAmB,MAAW,MAAWG,UAAgC;AAChF,MAAI,KAAK,WAAW,KAAK,QAAQ;AAC/B,WAAO;EACT;AAEA,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,QAAI,CAACA,SAAQ,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG;AAC9B,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEA,SAAS,YAAoB,MAAiB,MAAiBA,UAAgC;AAC7F,MAAI,KAAK,SAAS,KAAK,MAAM;AAC3B,WAAO;EACT;AAEA,aAAW,CAAC,KAAKC,MAAK,KAAK,KAAK,QAAO,GAAI;AACzC,UAAM,SAAS,KAAK,IAAI,GAAG;AAE3B,QAAI,UAAU,MAAM;AAClB,aAAO;IACT;AAEA,QAAI,CAACD,SAAQC,QAAO,MAAM,GAAG;AAC3B,aAAO;IACT;EACF;AAEA,SAAO;AACT;;;ACtFO,IAAM,mBAAmB;AAE1B,SAAU,qBAAsBC,SAAc;AAClD,MAAI,CAAC,SAASA,OAAM,KAAKA,QAAO,QAAQ,MAAM;AAC5C,UAAM,IAAI,uBAAuB,gBAAgB;EACnD;AAEA,QAAM,SAASA,QAAO,MAAK,EAAG,SAAQ;AACtC,SAAO,IAAI,IAAI,GAAG,gBAAgB,GAAG,MAAM,EAAE;AAC/C;;;ACNA,eAAsB,6BAA8BC,SAAgB,QAAuB,WAAmD,mBAAiCC,UAAsB;AACnM,QAAM,aAAa,oBAAI,IAAG;AAE1B,aAAW,QAAQ,WAAW;AAC5B,QAAI,QAAQ,MAAM;AAChB;IACF;AAEA,QAAI,KAAK,qBAAqB,YAAY;AACxC,WAAK,YAAY,UAAU,KAAK,SAAS;IAC3C;AAEA,QAAI,CAAC,YAAY,KAAK,SAAS,GAAG;AAChC,YAAM,IAAI,uBAAuB,uBAAuB;IAC1D;AAEA,QAAI,CAAE,MAAM,OAAOD,SAAQ,KAAK,WAAWC,QAAO,GAAI;AACpD;IACF;AAEA,UAAM,cAAc,KAAK,eAAe;AACxC,UAAM,QAAQ,KAAK,UAAU,SAAQ;AACrC,UAAM,eAAe,WAAW,IAAI,KAAK;AAEzC,QAAI,gBAAgB,MAAM;AACxB,WAAK,cAAc,aAAa,eAAe;IACjD,OAAO;AACL,iBAAW,IAAI,OAAO;QACpB,WAAW,KAAK;QAChB;OACD;IACH;EACF;AAEA,SAAO,CAAC,GAAG,WAAW,OAAM,CAAE,EAC3B,KAAK,CAAC,GAAG,MAAK;AACb,WAAO,EAAE,UAAU,SAAQ,EAAG,cAAc,EAAE,UAAU,SAAQ,CAAE;EACpE,CAAC,EACA,IAAI,CAAC,EAAE,aAAa,WAAW,GAAE,MAAM;AAEtC,UAAM,WAAW,GAAG,UAAS;AAE7B,QAAID,QAAO,OAAO,QAAQ,GAAG;AAC3B,WAAK,GAAG,YAAY,UAAU,QAAQA,OAAM,EAAE,CAAC;IACjD;AAEA,WAAO;MACL;MACA,WAAW,GAAG;;EAElB,CAAC;AACL;;;AC1CA,eAAsB,SAAUE,SAAgB,MAAyB,UAA6BC,UAAwB;AAC5H,MAAI,QAAQ,MAAM;AAChB,UAAM,IAAI,uBAAuB,kBAAkB;EACrD;AAEA,MAAI,KAAK,aAAa,QAAQD,QAAO,aAAa,QAAQ,CAAC,KAAK,UAAU,OAAOA,QAAO,SAAS,GAAG;AAClG,UAAM,IAAI,uBAAuB,sDAAsD;EACzF;AAEA,QAAM,eAAeC,SAAQ,cAAc;AAE3C,MAAI,gBAAgB,QAAQ,CAACD,QAAO,OAAO,aAAa,EAAE,GAAG;AAC3D,UAAM,IAAI,uBAAuB,wCAAwC;EAC3E;AAEA,MAAI,YAAuB,cAAc,aAAa,CAAA;AACtD,MAAIE,aAAY,IAAI,IAAY,cAAc,aAAa,CAAA,CAAE;AAC7D,MAAI,WAAoC,cAAc,YAAY,oBAAI,IAAG;AACzE,MAAI,OAAyB,cAAc,QAAQ,oBAAI,IAAG;AAC1D,MAAIC,sBAA6C,cAAc;AAG/D,MAAI,aAAa,SAAS;AACxB,QAAI,KAAK,cAAc,QAAQ,KAAK,aAAa,MAAM;AACrD,kBAAY,CAAA;AAEZ,UAAI,KAAK,cAAc,MAAM;AAC3B,kBAAU,KAAK,GAAG,KAAK,WAAW,IAAI,CAAAC,gBAAc;UAClD,aAAa;UACb,WAAAA;UACA,CAAC;MACL;AAEA,UAAI,KAAK,aAAa,MAAM;AAC1B,kBAAU,KAAK,GAAG,KAAK,SAAS;MAClC;IACF;AAEA,QAAI,KAAK,aAAa,MAAM;AAC1B,MAAAF,aAAY,IAAI,IAAI,KAAK,SAAS;IACpC;AAEA,QAAI,KAAK,YAAY,MAAM;AACzB,YAAM,kBAAkB,KAAK,oBAAoB,MAAM,CAAC,GAAG,KAAK,SAAS,QAAO,CAAE,IAAI,OAAO,QAAQ,KAAK,QAAQ;AAElH,iBAAW,gBAAgB,iBAAiB;QAC1C,UAAU;OACX;IACH;AAEA,QAAI,KAAK,QAAQ,MAAM;AACrB,YAAM,cAAc,KAAK,gBAAgB,MAAM,CAAC,GAAG,KAAK,KAAK,QAAO,CAAE,IAAI,OAAO,QAAQ,KAAK,IAAI;AAElG,aAAO,gBAAgB,aAAa;QAClC,UAAU;QACV,KAAK;OACN;IACH;AAEA,QAAI,KAAK,sBAAsB,MAAM;AACnC,MAAAC,sBAAqB,KAAK;IAC5B;EACF;AAGA,MAAI,aAAa,SAAS;AACxB,QAAI,KAAK,cAAc,MAAM;AAC3B,gBAAU,KAAK,GAAG,KAAK,WAAW,IAAI,CAAAC,gBAAc;QAClD,aAAa;QACb,WAAAA;QACA,CAAC;IACL;AAEA,QAAI,KAAK,aAAa,MAAM;AAC1B,gBAAU,KAAK,GAAG,KAAK,SAAS;IAClC;AAEA,QAAI,KAAK,aAAa,MAAM;AAC1B,MAAAF,aAAY,oBAAI,IAAI,CAAC,GAAGA,YAAW,GAAG,KAAK,SAAS,CAAC;IACvD;AAEA,QAAI,KAAK,YAAY,MAAM;AACzB,YAAM,kBAAkB,KAAK,oBAAoB,MAAM,CAAC,GAAG,KAAK,SAAS,QAAO,CAAE,IAAI,OAAO,QAAQ,KAAK,QAAQ;AAElH,iBAAW,CAAC,KAAKG,MAAK,KAAK,iBAAiB;AAC1C,YAAIA,UAAS,MAAM;AACjB,mBAAS,OAAO,GAAG;QACrB,OAAO;AACL,mBAAS,IAAI,KAAKA,MAAK;QACzB;MACF;AAEA,iBAAW,gBAAgB,CAAC,GAAG,SAAS,QAAO,CAAE,GAAG;QAClD,UAAU;OACX;IACH;AAEA,QAAI,KAAK,QAAQ,MAAM;AACrB,YAAM,cAAc,KAAK,gBAAgB,MAAM,CAAC,GAAG,KAAK,KAAK,QAAO,CAAE,IAAI,OAAO,QAAQ,KAAK,IAAI;AAClG,YAAM,aAAa,IAAI,IAA8B,IAAI;AAEzD,iBAAW,CAAC,KAAKA,MAAK,KAAK,aAAa;AACtC,YAAIA,UAAS,MAAM;AACjB,qBAAW,OAAO,GAAG;QACvB,OAAO;AACL,qBAAW,IAAI,KAAKA,MAAK;QAC3B;MACF;AAEA,aAAO,gBAAgB,CAAC,GAAG,WAAW,QAAO,CAAE,GAAG;QAChD,UAAU;QACV,KAAK;OACN;IACH;AAEA,QAAI,KAAK,sBAAsB,MAAM;AACnC,MAAAF,sBAAqB,KAAK;IAC5B;EACF;AAEA,MAAIG;AAEJ,MAAI,cAAc,GAAG,aAAa,MAAM;AACtC,IAAAA,aAAY,oBAAoB,aAAa,GAAG,SAAS;EAC3D,WAAW,KAAK,aAAa,MAAM;AACjC,IAAAA,aAAY,oBAAoB,KAAK,SAAS;EAChD,WAAWN,QAAO,aAAa,MAAM;AACnC,IAAAM,aAAY,oBAAoBN,QAAO,SAAS;EAClD;AAEA,QAAM,SAAiB;IACrB,WAAW,MAAM,6BACfA,SACAC,SAAQ,kBAAkB,YAAY,OACtC,WACAA,SAAQ,cAAc,OAAO,WAC7BA,QAAO;IAET,WAAW,CAAC,GAAGC,WAAU,OAAM,CAAE,EAAE,KAAK,CAAC,GAAG,MAAK;AAC/C,aAAO,EAAE,cAAc,CAAC;IAC1B,CAAC;IACD;IACA;IACA,WAAAI;IACA,oBAAAH;;AAIF,SAAO,UAAU,QAAQ,UAAO;AAC9B,SAAK,WAAWF,SAAQ,cAAc,OAAO,WAAW,KAAK,CAAAM,UAAQ,OAAiBA,MAAK,WAAWA,MAAK,SAAS,CAAC,GAAG,YAAY,KAAK,IAAG;EAC9I,CAAC;AAGD,MAAIP,QAAO,SAAS,OAAO;AACzB,WAAO,OAAO;EAChB;AAEA,SAAO;AACT;AAWA,SAAS,gBAA4B,SAAyCC,UAAqC;AACjH,QAAM,SAAS,oBAAI,IAAG;AAEtB,aAAW,CAAC,KAAKI,MAAK,KAAK,SAAS;AAClC,QAAIA,UAAS,MAAM;AACjB;IACF;AAEA,IAAAJ,SAAQ,SAAS,KAAKI,MAAK;EAC7B;AAEA,aAAW,CAAC,KAAKA,MAAK,KAAK,QAAQ,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,MAAK;AACnD,WAAO,EAAE,cAAc,CAAC;EAC1B,CAAC,GAAG;AACF,QAAIA,UAAS,MAAM;AACjB,aAAO,IAAI,KAAKJ,SAAQ,MAAM,KAAKI,MAAK,KAAKA,MAAK;IACpD;EACF;AAEA,SAAO;AACT;AAEA,SAAS,iBAAkB,KAAaA,QAAiB;AACvD,MAAI,OAAO,QAAQ,UAAU;AAC3B,UAAM,IAAI,uBAAuB,+BAA+B;EAClE;AAEA,MAAI,EAAEA,kBAAiB,aAAa;AAClC,UAAM,IAAI,uBAAuB,qCAAqC;EACxE;AACF;AAEA,SAAS,YAAa,KAAa,KAAe;AAChD,MAAI,OAAO,QAAQ,UAAU;AAC3B,UAAM,IAAI,uBAAuB,2BAA2B;EAC9D;AAEA,MAAI,IAAI,SAAS,MAAM;AACrB,QAAI,SAAS,GAAG,IAAI,KAAK,IAAI,EAAE,MAAM,IAAI,OAAO;AAC9C,YAAM,IAAI,uBAAuB,8BAA8B;IACjE;AAEA,QAAI,IAAI,QAAQ,KAAK,IAAI,QAAQ,KAAK;AACpC,YAAM,IAAI,uBAAuB,iCAAiC;IACpE;EACF;AAEA,MAAI,IAAI,OAAO,MAAM;AACnB,QAAI,SAAS,GAAG,IAAI,GAAG,IAAI,EAAE,MAAM,IAAI,KAAK;AAC1C,YAAM,IAAI,uBAAuB,4BAA4B;IAC/D;AAEA,QAAI,IAAI,MAAM,GAAG;AACf,YAAM,IAAI,uBAAuB,wCAAwC;IAC3E;EACF;AACF;AAEA,SAAS,OAAQ,KAAa,KAAQ;AACpC,MAAI;AAEJ,MAAI,IAAI,UAAU,MAAM;AACtB,aAAS,IAAI;EACf;AAEA,MAAI,IAAI,OAAO,MAAM;AACnB,aAAS,OAAO,KAAK,IAAG,IAAK,OAAO,IAAI,GAAG,CAAC;EAC9C;AAEA,QAAM,SAAc;IAClB,OAAO,IAAI,SAAS;;AAGtB,MAAI,UAAU,MAAM;AAClB,WAAO,SAAS;EAClB;AAEA,SAAO;AACT;;;ACzOA,SAAS,YAAa,KAAQ;AAE5B,QAAM,YAAY,IAAI,SAAQ,EAAG,MAAM,GAAG,EAAE,CAAC;AAC7C,QAAM,MAAMG,KAAI,MAAM,WAAWC,OAAM;AAEvC,SAAO,cAAc,GAAG;AAC1B;AAEA,SAAS,WAAY,KAAUC,QAAmB,eAAqB;AACrE,QAAMC,UAAS,YAAY,GAAG;AAE9B,SAAO,YAAYA,SAAQD,QAAO,aAAa;AACjD;AAEA,SAAS,SAAU,OAAkB,eAAqB;AACxD,SAAO;IACL,QAAQ;IACR,UAAU,MAAM,WAAW,CAAA,GAAI,IAAI,QAAM,CAAC,EAAE,KAAK,OAAAA,OAAK,MAAM;AAC1D,aAAO,GAAG,WAAW,KAAKA,QAAO,aAAa,CAAC;IACjD,CAAC;IACD,SAAS,MAAM,UAAU,CAAA,GAAI,IAAI,QAAM,CAAC,GAAG,MAAK;AAC9C,aAAO,GAAG,WAAW,EAAE,KAAK,EAAE,OAAO,aAAa,GAAG,WAAW,EAAE,KAAK,EAAE,OAAO,aAAa,CAAC;IAChG,CAAC;;AAEL;AAOM,IAAO,kBAAP,MAAsB;EACT;EACA;EACT;EACS;EACA;EACA;EACA;EAEjB,YAAa,YAA2C,OAAgC,CAAA,GAAE;AACxF,SAAK,MAAM,WAAW,OAAO,aAAa,mBAAmB;AAC7D,SAAK,SAAS,WAAW;AACzB,SAAK,YAAY,WAAW;AAC5B,SAAK,gBAAgB,KAAK;AAC1B,SAAK,QAAQ,eAAe;MAC1B,MAAM;MACN,SAAS,WAAW;KACrB;AACD,SAAK,gBAAgB,KAAK,iBAAiB;AAC3C,SAAK,aAAa,KAAK,cAAc;EACvC;EAEA,QAASC,SAAc;AACrB,QAAI,OAAO,KAAK,MAAM,IAAIA,OAAM;AAEhC,QAAI,QAAQ,MAAM;AAChB,aAAO;QACL,MAAM;QACN,MAAM,cAAQ;UACZ,MAAMA,QAAO,SAAQ;UACrB,eAAe;SAChB;;AAGH,WAAK,MAAM,IAAIA,SAAQ,IAAI;IAC7B;AAEA,SAAK;AAEL,WAAO;EACT;EAEQ,gBAAiBA,SAAgB,MAAU;AACjD,SAAK;AAEL,QAAI,KAAK,SAAS,GAAG;AACnB,WAAK,KAAK,SAAQ;AAClB,WAAK,MAAM,OAAOA,OAAM;IAC1B;EACF;EAEA,MAAM,YAAaA,SAAgBC,UAAsB;AACvD,UAAM,OAAO,KAAK,QAAQD,OAAM;AAEhC,QAAI;AACF,YAAM,UAAU,MAAM,KAAK,KAAK,SAASC,QAAO;AAEhD,aAAO,MAAK;AACV,gBAAO;AACP,aAAK,gBAAgBD,SAAQ,IAAI;MACnC;IACF,SAAS,KAAK;AACZ,WAAK,gBAAgBA,SAAQ,IAAI;AAEjC,YAAM;IACR;EACF;EAEA,MAAM,aAAcA,SAAgBC,UAAsB;AACxD,UAAM,OAAO,KAAK,QAAQD,OAAM;AAEhC,QAAI;AACF,YAAM,UAAU,MAAM,KAAK,KAAK,UAAUC,QAAO;AAEjD,aAAO,MAAK;AACV,gBAAO;AACP,aAAK,gBAAgBD,SAAQ,IAAI;MACnC;IACF,SAAS,KAAK;AACZ,WAAK,gBAAgBA,SAAQ,IAAI;AAEjC,YAAM;IACR;EACF;EAEA,MAAM,IAAKA,SAAgBC,UAAsB;AAC/C,QAAI;AACF,YAAM,KAAK,KAAKD,SAAQC,QAAO;AAE/B,aAAO;IACT,SAAS,KAAU;AACjB,UAAI,IAAI,SAAS,iBAAiB;AAChC,cAAM;MACR;IACF;AAEA,WAAO;EACT;EAEA,MAAM,OAAQD,SAAgBC,UAAsB;AAClD,QAAI,KAAK,OAAO,OAAOD,OAAM,GAAG;AAC9B;IACF;AAEA,UAAM,KAAK,UAAU,OAAO,qBAAqBA,OAAM,GAAGC,QAAO;EACnE;EAEA,MAAM,KAAMD,SAAgBC,UAAsB;AAChD,UAAM,MAAM,qBAAqBD,OAAM;AACvC,UAAM,MAAM,MAAM,KAAK,UAAU,IAAI,KAAKC,QAAO;AACjD,UAAM,OAAO,KAAO,OAAO,GAAG;AAE9B,QAAI,KAAK,eAAeD,SAAQ,IAAI,GAAG;AACrC,YAAM,KAAK,UAAU,OAAO,KAAKC,QAAO;AACxC,YAAM,IAAI,cAAa;IACzB;AAEA,WAAO,SAASD,SAAQ,MAAM,KAAK,OAAO,OAAOA,OAAM,IAAI,WAAW,KAAK,aAAa;EAC1F;EAEA,MAAM,KAAMA,SAAgB,MAAgBC,UAAsB;AAChE,UAAM,eAAe,MAAM,KAAK,kBAAkBD,SAAQC,QAAO;AAEjE,UAAM,SAAiB,MAAM,SAASD,SAAQ,MAAM,SAAS;MAC3D,GAAGC;MACH,eAAe,KAAK;KACrB;AAED,WAAO,KAAK,iBAAiBD,SAAQ,QAAQ,YAAY;EAC3D;EAEA,MAAM,MAAOA,SAAgB,MAAyBC,UAAsB;AAC1E,UAAM,eAAe,MAAM,KAAK,kBAAkBD,SAAQC,QAAO;AAEjE,UAAM,SAAiB,MAAM,SAASD,SAAQ,MAAM,SAAS;MAC3D,GAAGC;MACH,eAAe,KAAK;MACpB;KACD;AAED,WAAO,KAAK,iBAAiBD,SAAQ,QAAQ,YAAY;EAC3D;EAEA,MAAM,MAAOA,SAAgB,MAAgBC,UAAsB;AACjE,UAAM,eAAe,MAAM,KAAK,kBAAkBD,SAAQC,QAAO;AAEjE,UAAM,SAAiB,MAAM,SAASD,SAAQ,MAAM,SAAS;MAC3D,eAAe,KAAK;MACpB;KACD;AAED,WAAO,KAAK,iBAAiBA,SAAQ,QAAQ,YAAY;EAC3D;EAEA,OAAQ,IAAKC,UAAmB;AAC9B,qBAAiB,EAAE,KAAK,OAAAF,OAAK,KAAM,KAAK,UAAU,MAAM,SAASE,YAAW,CAAA,GAAI,KAAK,aAAa,GAAGA,QAAO,GAAG;AAC7G,YAAMD,UAAS,YAAY,GAAG;AAG9B,UAAIA,QAAO,OAAO,KAAK,MAAM,GAAG;AAC9B;MACF;AAEA,YAAM,OAAO,KAAO,OAAOD,MAAK;AAGhC,UAAI,KAAK,eAAeC,SAAQ,IAAI,GAAG;AACrC,cAAM,KAAK,UAAU,OAAO,KAAKC,QAAO;AACxC;MACF;AAEA,YAAM,SAASD,SAAQ,MAAM,KAAK,OAAO,OAAOA,OAAM,IAAI,WAAW,KAAK,aAAa;IACzF;EACF;EAEA,MAAM,kBAAmBA,SAAgBC,UAAsB;AAC7D,QAAI;AACF,YAAM,MAAM,qBAAqBD,OAAM;AACvC,YAAM,MAAM,MAAM,KAAK,UAAU,IAAI,KAAKC,QAAO;AACjD,YAAM,SAAS,KAAO,OAAO,GAAG;AAGhC,UAAI,KAAK,eAAeD,SAAQ,MAAM,GAAG;AACvC,cAAM,KAAK,UAAU,OAAO,KAAKC,QAAO;AACxC,cAAM,IAAI,cAAa;MACzB;AAEA,aAAO;QACL;QACA,MAAM,SAASD,SAAQ,QAAQ,KAAK,aAAa;;IAErD,SAAS,KAAU;AACjB,UAAI,IAAI,SAAS,iBAAiB;AAChC,aAAK,IAAI,MAAM,8CAA8C,GAAG;MAClE;IACF;EACF;EAEA,MAAM,iBAAkBA,SAAgB,MAAc,cAA6BC,UAAsB;AAEvG,SAAK,UAAU,KAAK,IAAG;AACvB,UAAM,MAAM,KAAO,OAAO,IAAI;AAE9B,UAAM,KAAK,UAAU,IAAI,qBAAqBD,OAAM,GAAG,KAAKC,QAAO;AAEnE,WAAO;MACL,MAAM,SAASD,SAAQ,MAAM,KAAK,aAAa;MAC/C,UAAU,cAAc;MACxB,SAAS,gBAAgB,QAAQ,CAAC,WAAW,MAAM,aAAa,MAAM;;EAE1E;EAEA,eAAgBA,SAAgB,MAAY;AAC1C,QAAI,KAAK,WAAW,MAAM;AACxB,aAAO;IACT;AAEA,QAAI,KAAK,OAAO,OAAOA,OAAM,GAAG;AAC9B,aAAO;IACT;AAEA,UAAM,UAAU,KAAK,UAAW,KAAK,IAAG,IAAK,KAAK;AAClD,UAAM,qBAAqB,KAAK,IAAG,IAAK,KAAK;AAC7C,UAAM,QAAQ,KAAK,UAAU,OAAO,UAAO;AACzC,aAAO,KAAK,YAAY,QAAQ,KAAK,WAAW;IAClD,CAAC;AAED,WAAO,WAAW,MAAM,WAAW;EACrC;;;;AClOF,IAAM,sBAAN,MAAyB;EACN;EACA;EACA;EACA;EAEjB,YAAa,YAA2C,OAAgC,CAAA,GAAE;AACxF,SAAK,MAAM,WAAW,OAAO,aAAa,mBAAmB;AAC7D,SAAK,SAAS,WAAW;AACzB,SAAK,SAAS,WAAW;AACzB,SAAK,QAAQ,IAAI,gBAAgB,YAAY,IAAI;EACnD;EAES,CAAC,OAAO,WAAW,IAAI;EAEhC,MAAM,QAAS,IAA2B,OAAiB;AACzD,qBAAiB,QAAQ,KAAK,MAAM,IAAI,KAAK,GAAG;AAC9C,SAAG,IAAI;IACT;EACF;EAEA,MAAM,IAAK,OAAiB;AAC1B,WAAOE,aAAI,KAAK,MAAM,IAAI,KAAK,CAAC;EAClC;EAEA,MAAM,OAAQC,SAAgBC,UAAsB;AAClD,UAAM,UAAU,MAAM,KAAK,MAAM,YAAYD,SAAQC,QAAO;AAE5D,QAAI;AACF,YAAM,KAAK,MAAM,OAAOD,SAAQC,QAAO;IACzC;AACE,cAAO;IACT;EACF;EAEA,MAAM,IAAKD,SAAgBC,UAAsB;AAC/C,UAAM,UAAU,MAAM,KAAK,MAAM,YAAYD,SAAQC,QAAO;AAE5D,QAAI;AACF,aAAO,MAAM,KAAK,MAAM,IAAID,SAAQC,QAAO;IAC7C;AACE,WAAK,IAAI,MAAM,uBAAuB;AACtC,gBAAS;IACX;EACF;EAEA,MAAM,IAAKD,SAAgBC,UAAsB;AAC/C,UAAM,UAAU,MAAM,KAAK,MAAM,YAAYD,SAAQC,QAAO;AAE5D,QAAI;AACF,aAAO,MAAM,KAAK,MAAM,KAAKD,SAAQC,QAAO;IAC9C;AACE,gBAAS;IACX;EACF;EAEA,MAAM,QAASD,SAAgBC,UAAsB;AACnD,UAAM,OAAO,MAAM,KAAK,IAAID,SAAQC,QAAO;AAE3C,WAAO;MACL,IAAI,KAAK;MACT,YAAY,KAAK,UAAU,IAAI,CAAC,EAAE,WAAAC,WAAS,MAAOA,UAAS;;EAE/D;EAEA,MAAM,KAAM,IAAY,MAAgBD,UAAsB;AAC5D,UAAM,UAAU,MAAM,KAAK,MAAM,aAAa,IAAIA,QAAO;AAEzD,QAAI;AACF,YAAM,SAAS,MAAM,KAAK,MAAM,KAAK,IAAI,MAAMA,QAAO;AAEtD,WAAK,eAAe,IAAI,MAAM;AAE9B,aAAO,OAAO;IAChB;AACE,gBAAS;IACX;EACF;EAEA,MAAM,MAAO,IAAY,MAAgBA,UAAsB;AAC7D,UAAM,UAAU,MAAM,KAAK,MAAM,aAAa,IAAIA,QAAO;AAEzD,QAAI;AACF,YAAM,SAAS,MAAM,KAAK,MAAM,MAAM,IAAI,MAAMA,QAAO;AAEvD,WAAK,eAAe,IAAI,MAAM;AAE9B,aAAO,OAAO;IAChB;AACE,gBAAS;IACX;EACF;EAEA,MAAM,MAAO,IAAY,MAAgBA,UAAsB;AAC7D,UAAM,UAAU,MAAM,KAAK,MAAM,aAAa,IAAIA,QAAO;AAEzD,QAAI;AACF,YAAM,SAAS,MAAM,KAAK,MAAM,MAAM,IAAI,MAAMA,QAAO;AAEvD,WAAK,eAAe,IAAI,MAAM;AAE9B,aAAO,OAAO;IAChB;AACE,gBAAS;IACX;EACF;EAIA,MAAM,kBAAmB,KAAiB,MAAY,MAAU;AAC9D,UAAM,eAAmC,SAAS,IAAI,IAAI,OAAO,SAAS,MAAM,YAAY,IAAI,KAAK,eAAe;AACpH,UAAMA,WAAoC,SAAS,IAAI,IAAI,OAAO,SAAS,SAAY,OAAO;AAE9F,UAAM,WAAW,MAAM,eAAe,eAAe,KAAKE,YAAW,QAAQF,QAAO;AACpF,UAAMD,UAAS,cAAc,SAAS,UAAU,MAAK,CAAE;AAEvD,QAAI,cAAc,OAAOA,OAAM,MAAM,OAAO;AAC1C,WAAK,IAAI,6EAA6E,cAAcA,OAAM;AAC1G,aAAO;IACT;AAEA,UAAM,aAAaG,YAAW,mBAAmB,SAAS,OAAO;AACjE,QAAI;AAEJ,QAAI;AACF,aAAO,MAAM,KAAK,IAAIH,SAAQC,QAAO;IACvC,SAAS,KAAU;AACjB,UAAI,IAAI,SAAS,iBAAiB;AAChC,cAAM;MACR;IACF;AAGA,QAAI,MAAM,sBAAsB,MAAM;AACpC,YAAM,iBAAiB,eAAe,mBAAmB,KAAK,kBAAkB;AAChF,YAAM,eAAeE,YAAW,mBAAmB,eAAe,OAAO;AAEzE,UAAI,aAAa,aAAa,WAAW,WAAW;AAClD,aAAK,IAAI,4FAA4F,aAAa,WAAW,WAAW,SAAS;AACjJ,eAAO;MACT;IACF;AAEA,UAAM,KAAK,MAAM,WAAW,QAAQ;MAClC,oBAAoB;MACpB,WAAW,WAAW,WAAW,IAAI,CAAAD,gBAAc;QACjD,aAAa;QACb,WAAAA;QACA;OACDD,QAAO;AAEV,WAAO;EACT;EAEA,eAAgB,IAAY,QAAkB;AAC5C,QAAI,CAAC,OAAO,SAAS;AACnB;IACF;AAEA,QAAI,KAAK,OAAO,OAAO,EAAE,GAAG;AAC1B,WAAK,OAAO,kBAAkB,oBAAoB,EAAE,QAAQ,OAAM,CAAE;IACtE,OAAO;AACL,WAAK,OAAO,kBAAkB,eAAe,EAAE,QAAQ,OAAM,CAAE;IACjE;EACF;;AAGI,SAAU,oBAAqB,YAA2C,OAAgC,CAAA,GAAE;AAChH,SAAO,IAAI,oBAAoB,YAAY,IAAI;AACjD;;;AClOO,IAAMG,QAAO,CAACA,WAAyB;AAC5C,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,YAAM,YAAY,KAAK,CAAC;AAExB,UAAI,aAAa,MAAM;AACrB,eAAO;MACT;AAEA,UAAI,UAAU,SAASA,QAAM;AAC3B,eAAO;MACT;AAEA,UAAI,UAAU,SAAS,MAAM;AAC3B,eAAO;MACT;AAEA,aAAO,KAAK,MAAM,CAAC;IACrB;;AAEJ;AAMO,IAAM,QAAQ,CAACA,QAAcC,WAA2B;AAC7D,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,YAAM,YAAY,KAAK,CAAC;AAExB,UAAI,WAAW,SAASD,QAAM;AAC5B,eAAO;MACT;AAEA,UAAI,UAAU,SAAS,MAAM;AAC3B,eAAO;MACT;AAEA,UAAIC,UAAS,QAAQ,UAAU,UAAUA,QAAO;AAC9C,eAAO;MACT;AAEA,aAAO,KAAK,MAAM,CAAC;IACrB;;AAEJ;AAKO,IAAMC,YAAW,CAAC,YAA6B;AACpD,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,YAAM,SAAS,QAAQ,MAAM,IAAI;AAEjC,UAAI,WAAW,OAAO;AACpB,eAAO;MACT;AAEA,aAAO;IACT;;AAEJ;AAKO,IAAMC,OAAK,IAAI,aAAgC;AACpD,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,UAAI;AAEJ,iBAAW,WAAW,UAAU;AAC9B,cAAM,SAAS,QAAQ,MAAM,IAAI;AAGjC,YAAI,WAAW,OAAO;AACpB;QACF;AAGA,YAAI,WAAW,QAAQ,OAAO,SAAS,QAAQ,QAAQ;AACrD,oBAAU;QACZ;MACF;AAEA,UAAI,WAAW,MAAM;AACnB,eAAO;MACT;AAEA,aAAO;IACT;;AAEJ;AAKO,IAAMC,OAAM,IAAI,aAAgC;AACrD,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,iBAAW,WAAW,UAAU;AAE9B,cAAM,SAAS,QAAQ,MAAM,IAAI;AAGjC,YAAI,WAAW,OAAO;AACpB,iBAAO;QACT;AAEA,eAAO;MACT;AAEA,aAAO;IACT;;AAEJ;AAKM,SAAUC,QAAQ,UAAmB;AACzC,WAAS,MAAO,IAAc;AAC5B,QAAI,MAAM,MAAM;AACd,aAAO;IACT;AAEA,QAAI,QAAQ,GAAG,cAAa;AAE5B,eAAW,WAAW,UAAU;AAC9B,YAAM,SAAS,QAAQ,MAAM,KAAK;AAElC,UAAI,WAAW,OAAO;AACpB,eAAO;MACT;AAEA,cAAQ;IACV;AAEA,WAAO;EACT;AAEA,WAAS,QAAS,IAAc;AAC9B,UAAM,SAAS,MAAM,EAAE;AAEvB,WAAO,WAAW;EACpB;AAEA,WAAS,WAAY,IAAc;AACjC,UAAM,SAAS,MAAM,EAAE;AAEvB,QAAI,WAAW,OAAO;AACpB,aAAO;IACT;AAEA,WAAO,OAAO,WAAW;EAC3B;AAEA,SAAO;IACL;IACA;IACA;;AAEJ;;;ACvFA,IAAMC,YAAW,MAAM,QAAQ;AAExB,IAAMC,WAAUC,KAAIF,SAAQ;AAKnC,IAAMG,SAAQ,MAAM,SAAS;AAC7B,IAAMC,SAAQ,MAAM,SAAS;AAC7B,IAAMC,YAAW,MAAM,YAAY;AACnC,IAAMC,QAAO,MAAM,QAAQ;AAgBpB,IAAMC,QAAOL,KAAIC,QAAOK,UAAS,MAAM,QAAQ,CAAC,CAAC;AAgBjD,IAAMC,QAAOP,KAAIE,QAAOI,UAAS,MAAM,QAAQ,CAAC,CAAC;AAiBjD,IAAME,WAAUR,KAAIG,WAAUG,UAAS,MAAM,QAAQ,CAAC,CAAC;AAiBvD,IAAMG,OAAMT,KAAIU,KAAGN,OAAMD,WAAUF,QAAOC,MAAK,GAAGI,UAAS,MAAM,QAAQ,CAAC,CAAC;AAElF,IAAMK,QAAOC,KACX,MAAM,QAAQ,GACdN,UAAS,MAAM,WAAW,CAAC,CAAC;AAE9B,IAAMO,QAAOD,KACXN,UAAS,MAAM,YAAY,CAAC,GAC5B,MAAM,QAAQ,GACdA,UAAS,MAAM,WAAW,CAAC,CAAC;AAE9B,IAAMQ,OAAMJ,KAAGC,OAAME,KAAI;AAEzB,IAAME,iBAAgBL,KAAGI,MAAKV,OAAMH,QAAOC,QAAOC,SAAQ;AAiBnD,IAAMa,gBAAehB,KAAIU,KAAGI,MAAKF,KAAIF,KAAGN,OAAMD,WAAUF,QAAOC,MAAK,GAAGI,UAAS,MAAM,QAAQ,CAAC,CAAC,CAAC,CAAC;AAkBlG,IAAMW,OAAMjB,KAAIW,KAAI;AAkBpB,IAAMO,OAAMlB,KAAIa,KAAI;AAepB,IAAMM,MAAKnB,KAAIc,IAAG;AAEzB,IAAMM,QAAOR,KAAIG,gBAAe,MAAM,QAAQ,CAAC;AAC/C,IAAMM,QAAOT,KAAIG,gBAAe,MAAM,QAAQ,CAAC;AAcxC,IAAMO,OAAMtB,KAAIY,KAAIQ,OAAMd,UAAS,MAAM,QAAQ,CAAC,CAAC,CAAC;AAcpD,IAAMiB,OAAMvB,KAAIqB,KAAI;AAE3B,IAAMG,SAAQZ,KAAIS,OAAMI,MAAK,SAAS,GAAGnB,UAAS,MAAM,QAAQ,CAAC,CAAC;AAClE,IAAM,WAAWM,KAAIS,OAAMI,MAAK,YAAY,GAAGnB,UAAS,MAAM,QAAQ,CAAC,CAAC;AAExE,IAAMoB,iBAAgBhB,KAAGc,QAAO,QAAQ;AAcjC,IAAMG,QAAO3B,KAAIwB,MAAK;AActB,IAAM,UAAUxB,KAAI,QAAQ;AAEnC,IAAM4B,QAAOlB,KACXK,gBACAK,OACAC,OACAG,QACA,QAAQ;AAGV,IAAMK,eAAcnB,KAClBE,KAAIgB,OAAMH,MAAK,OAAO,GAAGnB,UAAS,MAAM,QAAQ,CAAC,CAAC,CAAC;AAe9C,IAAMwB,cAAa9B,KAAI6B,YAAW;AAEzC,IAAME,qBAAoBrB,KACxBE,KAAIgB,OAAMH,MAAK,QAAQ,GAAGnB,UAAS,MAAM,QAAQ,CAAC,CAAC,GACnDM,KAAIgB,OAAMH,MAAK,QAAQ,GAAGnB,UAAS,MAAM,QAAQ,CAAC,GAAGmB,MAAK,OAAO,GAAGnB,UAAS,MAAM,QAAQ,CAAC,CAAC,CAAC;AAezF,IAAM0B,oBAAmBhC,KAAI+B,kBAAiB;AAErD,IAAME,iBAAgBrB,KAAIS,OAAMI,MAAK,kBAAkB,GAAGnB,UAAS,MAAM,aAAa,CAAC,GAAGA,UAAS,MAAM,aAAa,CAAC,GAAGA,UAAS,MAAM,QAAQ,CAAC,CAAC;AAc5I,IAAM4B,gBAAelC,KAAIiC,cAAa;AAE7C,IAAME,iBAAgBvB,KAAI,UAAUa,MAAK,iBAAiB,GAAGnB,UAAS,MAAM,aAAa,CAAC,GAAGA,UAAS,MAAM,aAAa,CAAC,GAAGA,UAAS,MAAM,QAAQ,CAAC,CAAC;AAc/I,IAAM8B,gBAAepC,KAAImC,cAAa;AAE7C,IAAME,QAAO3B,KACXmB,cACAE,oBACAnB,KAAIQ,OAAMd,UAAS,MAAM,QAAQ,CAAC,CAAC,GACnCM,KAAIc,gBAAepB,UAAS,MAAM,QAAQ,CAAC,CAAC,GAC5CM,KAAIG,gBAAeT,UAAS,MAAM,QAAQ,CAAC,CAAC,GAC5C2B,gBACAE,gBACA,MAAM,QAAQ,CAAC;AAeV,IAAMG,OAAMtC,KAAIqC,KAAI;AAE3B,IAAME,YAAW3B,KAAIyB,OAAMZ,MAAK,gBAAgB,GAAG,MAAM,QAAQ,CAAC;AAc3D,IAAMe,WAAUxC,KAAIuC,SAAQ;AAEnC,IAAME,WAAU/B,KACdE,KAAIyB,OAAMZ,MAAK,gBAAgB,GAAGA,MAAK,WAAW,GAAGnB,UAAS,MAAM,QAAQ,CAAC,CAAC,GAC9EM,KAAIyB,OAAMZ,MAAK,WAAW,GAAGnB,UAAS,MAAM,QAAQ,CAAC,CAAC,GACtDM,KAAIa,MAAK,WAAW,GAAGnB,UAAS,MAAM,QAAQ,CAAC,CAAC,CAAC;AAe5C,IAAMoC,UAAS1C,KAAIyC,QAAO;AAEjC,IAAME,SAAQjC,KACZE,KAAIG,gBAAe,MAAM,QAAQ,GAAGU,MAAK,SAAS,GAAGnB,UAAS,MAAM,QAAQ,CAAC,CAAC,GAC9EM,KAAIG,gBAAeU,MAAK,SAAS,GAAGnB,UAAS,MAAM,QAAQ,CAAC,CAAC,CAAC;AAezD,IAAMsC,QAAO5C,KAAI2C,MAAK;AAE7B,IAAME,UAASjC,KAAIG,gBAAeL,KAChCE,KAAI,MAAM,UAAU,KAAK,GAAGa,MAAK,SAAS,CAAC,GAC3Cb,KAAI,MAAM,QAAQ,GAAGa,MAAK,UAAU,CAAC,GACrCb,KAAI,MAAM,QAAQ,GAAGa,MAAK,QAAQ,GAAGA,MAAK,SAAS,CAAC,GACpDb,KAAIa,MAAK,QAAQ,GAAGA,MAAK,SAAS,CAAC,GACnCA,MAAK,QAAQ,GACbA,MAAK,UAAU,CAAC,GAElBnB,UAAS,MAAM,QAAQ,CAAC,CAAC;AAelB,IAAMwC,SAAQ9C,KAAI6C,OAAM;AAE/B,IAAME,WAAUrC,KACdE,KAAI,MAAM,WAAW,GAAGN,UAAS,MAAM,QAAQ,CAAC,CAAC,CAAC;AAe7C,IAAM0C,UAAShD,KAAI+C,QAAO;AAEjC,IAAME,SAAQvC,KACZE,KAAI,MAAM,SAAS,GAAGN,UAAS,MAAM,QAAQ,CAAC,CAAC,CAAC;AAe3C,IAAM4C,QAAOlD,KAAIiD,MAAK;;;AClgB7B,IAAM,WAAW;AAajB,IAAM,YAAY;AAClB,IAAM,YAAY;AAClB,IAAM,YAAY;AAClB,IAAM,aAAa;AACnB,IAAM,aAAa;AACnB,IAAM,gBAAgB;AAEhB,IAAO,cAAP,MAAkB;EACL;EACA;EAEjB,YAAa,YAAsC,OAA2B,CAAA,GAAE;AAC9E,SAAK,MAAM,WAAW,OAAO,aAAa,qCAAqC;AAC/E,SAAK,WAAW,WAAW;MACzB,MAAM;MACN,SAAS,WAAW;KACrB;EACH;EAEA,IAAK,IAAa;AAChB,UAAM,OAAO,KAAK,SAAS,EAAE;AAE7B,eAAW,WAAW,KAAK,SAAS,OAAM,GAAI;AAC5C,UAAI,QAAQ,WAAW,MAAM;AAC3B,eAAO;MACT;IACF;AAEA,WAAO;EACT;EAEA,IAAK,QAAgB,WAAmB;AACtC,cAAU,QAAQ,QAAK;AACrB,WAAK,IAAI,4BAA4B,IAAI,MAAM;AAG/C,YAAM,WAAW,YAAY,EAAE,MAAM;AAErC,WAAK,SAAS,IAAI,IAAI;QACpB;QACA;QACA,SAAS,WAAW,WAAW,KAAK,IAAG,IAAK;QAC5C,cAAc,WAAW,WAAW,KAAK,IAAG,IAAK;OAClD;IACH,CAAC;EACH;EAEA,OAAQ,IAAa;AACnB,UAAM,OAAO,KAAK,SAAS,EAAE;AAC7B,QAAI,eAAe;AAEnB,eAAW,CAAC,IAAI,OAAO,KAAK,KAAK,SAAS,QAAO,GAAI;AACnD,UAAI,QAAQ,WAAW,MAAM;AAC3B,aAAK,IAAI,oCAAoC,IAAI,QAAQ,QAAQ,IAAI,MAAM,OAAO,CAAC;AACnF,aAAK,SAAS,OAAO,EAAE;AACvB,uBAAe,gBAAgB,QAAQ;MACzC;IACF;AAEA,WAAO;EACT;EAEA,OAAQ,WAAwB;AAC9B,UAAM,qBAAoC,CAAA;AAE1C,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,YAAM,UAAU,UAAU,CAAC;AAC3B,YAAM,SAAS,QAAQ,UAAU,aAAY;AAC7C,YAAM,OAAO,OAAO,CAAC,EAAE,CAAC;AAExB,UAAI,QAAQ,MAAM;AAChB;MACF;AAEA,iBAAW,CAAC,IAAI,OAAO,KAAK,KAAK,SAAS,QAAO,GAAI;AACnD,YAAI,SAAS,IAAI;AACf;QACF;AAGA,cAAM,WAAW,KAAK,iBAAiB,QAAQ,QAAQ,MAAM;AAE7D,YAAI,UAAU;AAGZ,oBAAU,OAAO,GAAG,CAAC;AACrB;AAEA,6BAAmB,KAAK;YACtB,WAAW,UAAU,IACnB,OAAO,IAAI,WAAQ;AACjB,qBAAO;gBACL,UAAU,MAAM,CAAC,CAAC,EAAE;gBACpB,MAAM,CAAC;gBACP,KAAK,GAAG;YACZ,CAAC,EAAE,KAAK,GAAG,CACb,EAAE;YACF,UAAU,QAAQ;YAClB,MAAM;YACN,SAAS,QAAQ;YACjB,cAAc,QAAQ;WACvB;QACH;MACF;IACF;AAEA,WAAO;EACT;EAEQ,iBAAkB,QAAuB,QAAc;AAC7D,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,UAAI,OAAO,CAAC,EAAE,CAAC,MAAM,aAAa,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,WAAW;AAClE,eAAO,OAAO,IAAI,GAAG,GAAG,CAAC,WAAW,MAAM,CAAC;AAC3C,eAAO;MACT;IACF;AAEA,WAAO;EACT;EAEA,QAAS,IAAe,KAAW;AACjC,UAAM,OAAO,KAAK,SAAS,EAAE;AAC7B,QAAI,qBAAqB;AAEzB,eAAW,CAAC,IAAI,OAAO,KAAK,KAAK,SAAS,QAAO,GAAI;AACnD,UAAI,QAAQ,WAAW,MAAM;AAC3B,aAAK,IAAI,4CAA4C,IAAI,QAAQ,MAAM;AACvE,6BAAqB,QAAQ;AAC7B,gBAAQ,WAAW;AACnB,gBAAQ,UAAU,KAAK,IAAG,IAAK;AAC/B,gBAAQ,eAAe,KAAK,IAAG;MACjC;IACF;AAEA,WAAO;EACT;EAEA,UAAW,IAAe,KAAW;AACnC,UAAM,OAAO,KAAK,SAAS,EAAE;AAC7B,QAAI,eAAe;AAEnB,eAAW,CAAC,IAAI,OAAO,KAAK,KAAK,SAAS,QAAO,GAAI;AACnD,UAAI,QAAQ,WAAW,MAAM;AAC3B,aAAK,IAAI,iDAAiD,IAAI,QAAQ,MAAM;AAC5E,uBAAe,gBAAgB,QAAQ;AACvC,gBAAQ,WAAW;AACnB,gBAAQ,UAAU,KAAK,IAAG,IAAK;MACjC;IACF;AAEA,WAAO;EACT;EAEQ,SAAU,IAAa;AAC7B,eAAW,SAAS,GAAG,aAAY,GAAI;AACrC,UAAI,MAAM,CAAC,MAAM,WAAW;AAC1B,eAAO,MAAM,CAAC;MAChB;AAEA,UAAI,MAAM,CAAC,MAAM,aAAa,MAAM,CAAC,MAAM,cAAc,MAAM,CAAC,MAAM,cAAc,MAAM,CAAC,MAAM,eAAe;AAC9G,eAAO,MAAM,CAAC;MAChB;IACF;EACF;;;;AChKF,IAAM,YAAY;AAClB,IAAM,YAAY;AAClB,IAAM,YAAY;AAClB,IAAM,YAAY;AAEZ,IAAO,aAAP,MAAiB;EACJ;EACA;EAEjB,YAAa,YAAsC,OAA2B,CAAA,GAAE;AAC9E,SAAK,MAAM,WAAW,OAAO,aAAa,oCAAoC;AAC9E,SAAK,WAAW,WAAW;MACzB,MAAM;MACN,SAAS,WAAW;KACrB;EACH;EAEA,IAAK,IAAa;AAChB,UAAM,SAAS,GAAG,aAAY;AAE9B,eAAW,YAAY,KAAK,SAAS,OAAM,GAAI;AAC7C,iBAAW,WAAW,UAAU;AAC9B,YAAI,QAAQ,eAAe,OAAO,CAAC,EAAE,CAAC,GAAG;AACvC,iBAAO;QACT;MACF;IACF;AAEA,WAAO;EACT;EAEA,IAAK,YAAoB,cAAsB,YAAoB,eAAuB,cAAc,WAA0B,OAAK;AACrI,UAAM,MAAM,GAAG,UAAU,IAAI,YAAY,IAAI,QAAQ;AACrD,UAAM,WAAW,KAAK,SAAS,IAAI,GAAG,KAAK,CAAA;AAC3C,UAAM,UAAgC;MACpC;MACA;MACA;MACA;MACA,gBAAgB,OAAO,UAAU,IAAI,IAAI;MACzC;MACA,UAAU;MACV,SAAS;;AAEX,aAAS,KAAK,OAAO;AAErB,SAAK,SAAS,IAAI,KAAK,QAAQ;EACjC;EAEA,OAAQ,IAAa;AACnB,UAAM,SAAS,GAAG,aAAY;AAC9B,UAAM,OAAO,OAAO,CAAC,EAAE,CAAC,KAAK;AAC7B,UAAM,WAAW,OAAO,CAAC,EAAE,CAAC,MAAM,YAAY,QAAQ;AACtD,UAAM,OAAO,SAAS,OAAO,CAAC,EAAE,CAAC,KAAK,GAAG;AACzC,QAAI,eAAe;AAEnB,eAAW,CAAC,KAAK,QAAQ,KAAK,KAAK,SAAS,QAAO,GAAI;AACrD,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,cAAM,UAAU,SAAS,CAAC;AAE1B,YAAI,QAAQ,eAAe,QAAQ,QAAQ,iBAAiB,QAAQ,QAAQ,aAAa,UAAU;AACjG,eAAK,IAAI,yCAAyC,QAAQ,YAAY,QAAQ,cAAc,MAAM,MAAM,QAAQ;AAEhH,yBAAe,gBAAgB,QAAQ;AACvC,mBAAS,OAAO,GAAG,CAAC;AACpB;QACF;MACF;AAEA,UAAI,SAAS,WAAW,GAAG;AACzB,aAAK,SAAS,OAAO,GAAG;MAC1B;IACF;AAEA,WAAO;EACT;EAEA,OAAQ,WAAwB;AAC9B,UAAM,oBAAmC,CAAA;AAEzC,eAAW,EAAE,WAAW,GAAE,KAAM,WAAW;AACzC,YAAM,SAAS,GAAG,aAAY;AAC9B,UAAI;AAGJ,WAAK,OAAO,CAAC,EAAE,CAAC,MAAM,aAAa,OAAO,CAAC,EAAE,CAAC,MAAM,cAAc,OAAO,CAAC,EAAE,CAAC,MAAM,WAAW;AAC5F,gBAAQ,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC;MACzC,YAAY,OAAO,CAAC,EAAE,CAAC,MAAM,aAAa,OAAO,CAAC,EAAE,CAAC,MAAM,cAAc,OAAO,CAAC,EAAE,CAAC,MAAM,WAAW;AACnG,gBAAQ,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC;MACzC;AAEA,UAAI,SAAS,MAAM;AACjB;MACF;AAEA,YAAM,WAAW,KAAK,SAAS,IAAI,KAAK;AAExC,UAAI,YAAY,MAAM;AACpB;MACF;AAEA,iBAAW,WAAW,UAAU;AAC9B,eAAO,CAAC,EAAE,CAAC,IAAI,QAAQ,mBAAmB,IAAI,YAAY;AAC1D,eAAO,CAAC,EAAE,CAAC,IAAI,QAAQ;AACvB,eAAO,CAAC,EAAE,CAAC,IAAI,GAAG,QAAQ,YAAY;AAEtC,0BAAkB,KAAK;UACrB,WAAW,UAAU,IACnB,OAAO,IAAI,CAAAE,WAAQ;AACjB,mBAAO;cACL,UAAUA,OAAM,CAAC,CAAC,EAAE;cACpBA,OAAM,CAAC;cACP,KAAK,GAAG;UACZ,CAAC,EAAE,KAAK,GAAG,CACb,EAAE;UACF,UAAU,QAAQ;UAClB,MAAM;UACN,SAAS,QAAQ;UACjB,cAAc,QAAQ;SACvB;MACH;IACF;AAEA,WAAO;EACT;EAEA,QAAS,IAAe,KAAW;AACjC,UAAM,SAAS,GAAG,aAAY;AAC9B,UAAM,OAAO,OAAO,CAAC,EAAE,CAAC;AACxB,QAAI,qBAAqB;AAEzB,eAAW,YAAY,KAAK,SAAS,OAAM,GAAI;AAC7C,iBAAW,WAAW,UAAU;AAC9B,YAAI,QAAQ,eAAe,MAAM;AAC/B,eAAK,IAAI,2CAA2C,QAAQ,YAAY,QAAQ,UAAU;AAC1F,+BAAqB,QAAQ;AAC7B,kBAAQ,WAAW;AACnB,kBAAQ,UAAU,KAAK,IAAG,IAAK;AAC/B,kBAAQ,eAAe,KAAK,IAAG;QACjC;MACF;IACF;AAEA,WAAO;EACT;EAEA,UAAW,IAAe,KAAW;AACnC,UAAM,SAAS,GAAG,aAAY;AAC9B,UAAM,OAAO,OAAO,CAAC,EAAE,CAAC,KAAK;AAC7B,UAAM,WAAW,OAAO,CAAC,EAAE,CAAC,MAAM,YAAY,QAAQ;AACtD,UAAM,OAAO,SAAS,OAAO,CAAC,EAAE,CAAC,KAAK,GAAG;AACzC,QAAI,eAAe;AAEnB,eAAW,YAAY,KAAK,SAAS,OAAM,GAAI;AAC7C,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,cAAM,UAAU,SAAS,CAAC;AAE1B,YAAI,QAAQ,eAAe,QAAQ,QAAQ,iBAAiB,QAAQ,QAAQ,aAAa,UAAU;AACjG,eAAK,IAAI,yDAAyD,QAAQ,YAAY,QAAQ,cAAc,MAAM,MAAM,QAAQ;AAEhI,yBAAe,gBAAgB,QAAQ;AACvC,kBAAQ,WAAW;AACnB,kBAAQ,UAAU,KAAK,IAAG,IAAK;QACjC;MACF;IACF;AAEA,WAAO;EACT;;;;AC1LI,SAAU,YAAa,IAAa;AACxC,MAAI;AACF,eAAW,EAAE,MAAAC,QAAM,OAAAC,OAAK,KAAM,GAAG,cAAa,GAAI;AAChD,UAAID,WAAS,cAAc;AACzB;MACF;AAEA,UAAIC,UAAS,MAAM;AACjB;MACF;AAEA,UAAID,WAAS,UAAU;AACrB,eAAOC,OAAM,WAAW,UAAU;MACpC;AAEA,UAAID,WAAS,UAAU;AACrB,eAAOC,OAAM,YAAW,EAAG,WAAW,MAAM;MAC9C;IACF;EACF,QAAQ;EAER;AAEA,SAAO;AACT;;;ACxBM,SAAU,UAAW,IAAa;AACtC,MAAI;AACF,eAAW,EAAE,MAAAC,OAAI,KAAM,GAAG,cAAa,GAAI;AACzC,UAAIA,WAAS,cAAc;AACzB;MACF;AAEA,aAAOA,WAAS,YAAYA,WAAS;IACvC;EACF,QAAQ;EAER;AAEA,SAAO;AACT;;;ACbM,SAAU,UAAW,IAAa;AACtC,MAAI;AACF,QAAI,CAAC,UAAU,EAAE,GAAG;AAElB,aAAO;IACT;AAEA,UAAM,CAAC,CAAC,EAAEC,MAAK,CAAC,IAAI,GAAG,aAAY;AAEnC,QAAIA,UAAS,MAAM;AACjB,aAAO;IACT;AAEA,WAAO,YAAYA,MAAK,KAAK;EAC/B,QAAQ;EAER;AAEA,SAAO;AACT;;;ACjBO,IAAMC,iBAAgB;EAC3B,sBAAsB;;AASlB,IAAO,oBAAP,MAAwB;EACX;EACA;EACA;EAEjB,YAAa,YAAsC,OAA2B,CAAA,GAAE;AAC9E,SAAK,MAAM,WAAW,OAAO,aAAa,2CAA2C;AACrF,SAAK,YAAY,WAAW;MAC1B,MAAM;MACN,SAAS,WAAW;KACrB;AACD,SAAK,uBAAuB,KAAK,wBAAwBA,eAAc;EACzE;EAEA,IAAK,IAAa;AAChB,WAAO,KAAK,UAAU,IAAI,GAAG,SAAQ,CAAE;EACzC;EAEA,eAAgB,QAAc;AAC5B,eAAW,OAAO,KAAK,UAAU,KAAI,GAAI;AACvC,UAAI,IAAI,SAAQ,EAAG,WAAW,MAAM,GAAG;AACrC,aAAK,UAAU,OAAO,GAAG;MAC3B;IACF;EACF;EAEA,IAAK,IAAa;AAChB,QAAI,KAAK,UAAU,SAAS,KAAK,sBAAsB;AACrD;IACF;AAEA,QAAI,UAAU,EAAE,KAAK,YAAY,EAAE,GAAG;AACpC;IACF;AAEA,SAAK,IAAI,8BAA8B,EAAE;AACzC,SAAK,UAAU,IAAI,GAAG,SAAQ,GAAI;MAChC,UAAU;MACV,SAAS;KACV;EACH;EAEA,SAAM;AACJ,WAAO,MAAM,KAAK,KAAK,SAAS,EAC7B,IAAI,CAAC,CAAC,IAAI,QAAQ,OAAO;MACxB,WAAW,UAAU,EAAE;MACvB,UAAU,SAAS;MACnB,MAAM;MACN,SAAS,SAAS;MAClB,cAAc,SAAS;MACvB;EACN;EAEA,OAAQ,IAAa;AACnB,UAAM,qBAAqB,KAAK,UAAU,IAAI,GAAG,SAAQ,CAAE,GAAG,YAAY;AAE1E,SAAK,IAAI,gCAAgC,EAAE;AAC3C,SAAK,UAAU,OAAO,GAAG,SAAQ,CAAE;AAEnC,WAAO;EACT;EAEA,QAAS,IAAe,KAAW;AACjC,UAAM,aAAa,GAAG,SAAQ;AAC9B,UAAM,WAAW,KAAK,UAAU,IAAI,UAAU,KAAK;MACjD,UAAU;MACV,SAAS,KAAK,IAAG,IAAK;MACtB,cAAc,KAAK,IAAG;;AAExB,UAAM,qBAAqB,SAAS;AACpC,aAAS,WAAW;AACpB,aAAS,UAAU,KAAK,IAAG,IAAK;AAChC,aAAS,eAAe,KAAK,IAAG;AAEhC,SAAK,IAAI,2CAA2C,UAAU;AAC9D,SAAK,UAAU,IAAI,YAAY,QAAQ;AAEvC,WAAO;EACT;;;;AC9FF,IAAM,iBAAiB;EACrB;EACA;EACA;EACA;EACA;EACA;;AAMI,SAAU,iBAAkB,IAAa;AAC7C,MAAI;AACF,eAAW,EAAE,MAAAC,OAAI,KAAM,GAAG,cAAa,GAAI;AACzC,UAAIA,WAAS,cAAc;AACzB;MACF;AAEA,aAAO,eAAe,SAASA,MAAI;IACrC;EACF,QAAQ;EAER;AAEA,SAAO;AACT;;;ACrBO,IAAMC,iBAAgB;EAC3B,sBAAsB;;AASlB,IAAO,qBAAP,MAAyB;EACZ;EACA;EACA;EAEjB,YAAa,YAAsC,OAA2B,CAAA,GAAE;AAC9E,SAAK,MAAM,WAAW,OAAO,aAAa,2CAA2C;AACrF,SAAK,YAAY,WAAW;MAC1B,MAAM;MACN,SAAS,WAAW;KACrB;AACD,SAAK,uBAAuB,KAAK,wBAAwBA,eAAc;EACzE;EAEA,IAAKC,YAAsB,KAAW;AACpC,QAAI,UAAUA,UAAS,GAAG;AACxB,aAAO;QACL,WAAAA;QACA,UAAU;QACV,MAAM;QACN,SAAS,KAAK,IAAG,IAAK;QACtB,cAAc,KAAK,IAAG;;IAE1B;AAEA,UAAM,MAAM,KAAK,MAAMA,UAAS;AAChC,QAAI,WAAW,KAAK,UAAU,IAAI,GAAG;AAErC,QAAI,YAAY,MAAM;AACpB,iBAAW;QACT,UAAU,CAAC,iBAAiBA,UAAS;QACrC,SAAS;;AAGX,WAAK,UAAU,IAAI,KAAK,QAAQ;IAClC;AAEA,WAAO;MACL,WAAAA;MACA,UAAU,SAAS;MACnB,MAAM;MACN,SAAS,SAAS;MAClB,cAAc,SAAS;;EAE3B;EAEA,IAAK,IAAa;AAChB,UAAM,MAAM,KAAK,MAAM,EAAE;AACzB,WAAO,KAAK,UAAU,IAAI,GAAG;EAC/B;EAEA,OAAQ,IAAa;AACnB,UAAM,MAAM,KAAK,MAAM,EAAE;AACzB,UAAM,qBAAqB,KAAK,UAAU,IAAI,GAAG,GAAG,YAAY;AAEhE,SAAK,IAAI,gCAAgC,EAAE;AAC3C,SAAK,UAAU,OAAO,GAAG;AAEzB,WAAO;EACT;EAEA,QAAS,IAAe,KAAW;AACjC,UAAM,MAAM,KAAK,MAAM,EAAE;AACzB,UAAM,WAAW,KAAK,UAAU,IAAI,GAAG,KAAK;MAC1C,UAAU;MACV,SAAS;MACT,cAAc;;AAGhB,UAAM,qBAAqB,SAAS;AAEpC,aAAS,WAAW;AACpB,aAAS,UAAU,KAAK,IAAG,IAAK;AAChC,aAAS,eAAe,KAAK,IAAG;AAEhC,SAAK,UAAU,IAAI,KAAK,QAAQ;AAEhC,WAAO;EACT;EAEA,UAAW,IAAe,KAAW;AACnC,UAAM,MAAM,KAAK,MAAM,EAAE;AACzB,UAAM,WAAW,KAAK,UAAU,IAAI,GAAG,KAAK;MAC1C,UAAU;MACV,SAAS;;AAGX,UAAM,qBAAqB,SAAS;AAEpC,aAAS,WAAW;AACpB,aAAS,UAAU,KAAK,IAAG,IAAK;AAEhC,SAAK,UAAU,IAAI,KAAK,QAAQ;AAEhC,WAAO;EACT;EAEQ,MAAO,IAAa;AAC1B,QAAI,iBAAiB,EAAE,GAAG;AAExB,YAAMC,WAAU,GAAG,UAAS;AAE5B,aAAO,GAAGA,SAAQ,IAAI,IAAIA,SAAQ,IAAI,IAAIA,SAAQ,SAAS;IAC7D;AAEA,WAAO,GAAG,SAAQ;EACpB;;;;AC1GF,IAAM,aAAa;AAEZ,IAAMC,iBAAgB;EAC3B,sBAAsB;EACtB,wBAAwB,aAAa;EACrC,0BAA0B,aAAa;;AA0EzC,IAAM,uBAAuB,CAAC,UAAoC;AAKlE,SAAS,YAAa,IAAeC,SAAc;AACjD,QAAM,oBAAoB,GAAG,UAAS;AAGtC,MAAI,qBAAqB,MAAM;AAC7B,UAAM,iBAAiB,iBAAiB,iBAAiB;AAGzD,QAAI,eAAe,OAAOA,OAAM,GAAG;AACjC,WAAK,GAAG,YAAY,UAAU,QAAQA,QAAO,SAAQ,CAAE,EAAE,CAAC;IAC5D;EACF;AAEA,SAAO;AACT;AAEM,IAAO,iBAAP,MAAqB;EACR;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;;;;;EAQjB,YAAa,YAAsC,OAA2B,CAAA,GAAE;AAC9E,UAAM,EAAE,SAAS,CAAA,GAAI,WAAW,CAAA,GAAI,iBAAiB,CAAA,EAAE,IAAK;AAE5D,SAAK,aAAa;AAClB,SAAK,MAAM,WAAW,OAAO,aAAa,wBAAwB;AAClE,SAAK,SAAS,OAAO,IAAI,QAAM,GAAG,SAAQ,CAAE;AAC5C,SAAK,WAAW,IAAI,IAAI,SAAS,IAAI,QAAM,GAAG,SAAQ,CAAE,CAAC;AACzD,SAAK,iBAAiB,IAAI,IAAI,eAAe,IAAI,QAAM,GAAG,SAAQ,CAAE,CAAC;AACrE,SAAK,WAAW,IAAI,kBAAkB,YAAY,IAAI;AACtD,SAAK,cAAc,IAAI,YAAY,YAAY,IAAI;AACnD,SAAK,aAAa,IAAI,WAAW,YAAY,IAAI;AACjD,SAAK,qBAAqB,IAAI,mBAAmB,YAAY,IAAI;AACjE,SAAK,iBAAiB,KAAK,kBAAkB;AAC7C,SAAK,wBAAwB,2BAA2B,IAAI;AAC5D,SAAK,yBAAyB,KAAK,0BAA0BD,eAAc;AAC3E,SAAK,2BAA2B,KAAK,4BAA4BA,eAAc;AAI/E,SAAK,4BAA4B,SAAS,KAAK,0BAA0B,KAAK,IAAI,GAAG,GAAI;AAGzF,eAAW,OAAO,iBAAiB,uBAAuB,MAAK;AAC7D,WAAK,0BAAyB;IAChC,CAAC;AAED,eAAW,OAAO,iBAAiB,mBAAmB,MAAK;AACzD,WAAK,0BAAyB;IAChC,CAAC;EACH;EAES,CAAC,OAAO,WAAW,IAAI;EAEhC,4BAAyB;AAGvB,UAAM,QAAQ,KAAK,aAAY,EAC5B,IAAI,QAAK;AAER,UAAI,GAAG,UAAS,MAAO,KAAK,WAAW,OAAO,SAAQ,GAAI;AACxD,eAAO,GAAG,YAAY,QAAQ,KAAK,WAAW,OAAO,SAAQ,CAAE,EAAE;MACnE;AAEA,aAAO;IACT,CAAC;AAEH,SAAK,WAAW,UAAU,MAAM,KAAK,WAAW,QAAQ;MACtD,YAAY;KACb,EACE,MAAM,SAAM;AACX,WAAK,IAAI,MAAM,4BAA4B,GAAG;IAChD,CAAC;EACL;;;;EAKA,iBAAc;AACZ,WAAO,MAAM,KAAK,KAAK,MAAM,EAAE,IAAI,CAAC,MAAM,UAAU,CAAC,CAAC;EACxD;;;;EAKA,mBAAgB;AACd,WAAO,MAAM,KAAK,KAAK,QAAQ,EAAE,IAAI,CAAC,MAAM,UAAU,CAAC,CAAC;EAC1D;;;;EAKA,yBAAsB;AACpB,WAAO,MAAM,KAAK,KAAK,cAAc,EAAE,IAAI,CAAC,MAAM,UAAU,CAAC,CAAC;EAChE;;;;EAKA,mBAAgB;AACd,WAAO,KAAK,SAAS,OAAM,EAAG,IAAI,UAAQ,KAAK,SAAS;EAC1D;;;;EAKA,gBAAiB,MAAe;AAC9B,UAAM,SAAS,KAAK,aAAY;AAChC,UAAM,gBAAgB,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC;AAGrD,QAAI,KAAK,sBAAsB,IAAI,aAAa,GAAG;AACjD;IACF;AAEA,SAAK,sBAAsB,IAAI,aAAa;AAE5C,WAAO,YAAY,MAAM,KAAK,WAAW,MAAM;AAG/C,QAAI,KAAK,WAAW,IAAI,IAAI,GAAG;AAC7B;IACF;AAGA,QAAI,KAAK,YAAY,IAAI,IAAI,GAAG;AAC9B;IACF;AAEA,SAAK,SAAS,IAAI,IAAI;EACxB;EAEA,oBAAqB,MAAiBE,UAA+B;AACnE,WAAO,YAAY,MAAM,KAAK,WAAW,MAAM;AAC/C,QAAI,qBAAqB;AAEzB,QAAIA,UAAS,SAAS,eAAe,KAAK,mBAAmB,IAAI,IAAI,GAAG;AACtE,YAAM,8BAA8B,KAAK,mBAAmB,QAAQ,MAAMA,UAAS,OAAO,KAAK,sBAAsB;AAErH,UAAI,CAAC,+BAA+B,oBAAoB;AACtD,6BAAqB;MACvB;IACF;AAEA,QAAIA,UAAS,SAAS,iBAAiB,KAAK,YAAY,IAAI,IAAI,GAAG;AACjE,YAAM,+BAA+B,KAAK,YAAY,QAAQ,MAAMA,UAAS,OAAO,KAAK,sBAAsB;AAE/G,UAAI,CAAC,gCAAgC,oBAAoB;AACvD,6BAAqB;MACvB;IACF;AAEA,QAAIA,UAAS,SAAS,gBAAgB,KAAK,WAAW,IAAI,IAAI,GAAG;AAC/D,YAAM,8BAA8B,KAAK,WAAW,QAAQ,MAAMA,UAAS,OAAO,KAAK,sBAAsB;AAE7G,UAAI,CAAC,+BAA+B,oBAAoB;AACtD,6BAAqB;MACvB;IACF;AAEA,QAAIA,UAAS,SAAS,cAAc,KAAK,SAAS,IAAI,IAAI,GAAG;AAE3D,UAAI,KAAK,wBAAwB,IAAI,GAAG;AACtC,aAAK,WAAW,QAAQ,MAAMA,UAAS,OAAO,KAAK,sBAAsB;AACzE,6BAAqB;MACvB,OAAO;AACL,cAAM,6BAA6B,KAAK,SAAS,QAAQ,MAAMA,UAAS,OAAO,KAAK,sBAAsB;AAE1G,YAAI,CAAC,8BAA8B,oBAAoB;AACrD,+BAAqB;QACvB;MACF;IACF;AAGA,QAAI,CAAC,oBAAoB;AACvB,WAAK,0BAAyB;IAChC;EACF;EAEA,mBAAoB,MAAiBA,UAA+B;AAClE,WAAO,YAAY,MAAM,KAAK,WAAW,MAAM;AAE/C,QAAI,qBAAqB;AAEzB,QAAI,KAAK,SAAS,IAAI,IAAI,GAAG;AAC3B,YAAM,6BAA6B,KAAK,SAAS,OAAO,IAAI;AAE5D,UAAI,CAAC,8BAA8B,oBAAoB;AACrD,6BAAqB;MACvB;IACF;AAEA,QAAI,KAAK,mBAAmB,IAAI,IAAI,GAAG;AACrC,YAAM,8BAA8B,KAAK,mBAAmB,UAAU,MAAMA,UAAS,OAAO,KAAK,wBAAwB;AAEzH,UAAI,CAAC,+BAA+B,oBAAoB;AACtD,6BAAqB;MACvB;IACF;AAEA,QAAI,KAAK,YAAY,IAAI,IAAI,GAAG;AAC9B,YAAM,+BAA+B,KAAK,YAAY,UAAU,MAAMA,UAAS,OAAO,KAAK,wBAAwB;AAEnH,UAAI,CAAC,gCAAgC,oBAAoB;AACvD,6BAAqB;MACvB;IACF;AAEA,QAAI,KAAK,WAAW,IAAI,IAAI,GAAG;AAC7B,YAAM,8BAA8B,KAAK,WAAW,UAAU,MAAMA,UAAS,OAAO,KAAK,wBAAwB;AAEjH,UAAI,CAAC,+BAA+B,oBAAoB;AACtD,6BAAqB;MACvB;IACF;AAGA,QAAI,oBAAoB;AACtB,WAAK,0BAAyB;IAChC;EACF;EAEA,eAAY;AACV,UAAM,YAAY,oBAAI,IAAG;AAEzB,UAAM,aAAa,KAAK,yBAAwB,EAC7C,OAAO,UAAO;AACb,UAAI,CAAC,KAAK,UAAU;AAClB,eAAO;MACT;AAEA,YAAM,QAAQ,KAAK,UAAU,SAAQ;AAErC,UAAI,UAAU,IAAI,KAAK,GAAG;AACxB,eAAO;MACT;AAEA,gBAAU,IAAI,KAAK;AAEnB,aAAO;IACT,CAAC,EACA,IAAI,aAAW,QAAQ,SAAS;AAGnC,WAAO,KAAK,eACV,WAAW,IAAI,SAAM;AACnB,YAAM,KAAK,UAAU,GAAG;AACxB,YAAM,gBAAgB,GAAG,cAAa,EAAG,IAAG;AAE5C,UAAI,eAAe,UAAU,KAAK,WAAW,OAAO,SAAQ,GAAI;AAC9D,eAAO;MACT;AAEA,aAAO,GAAG,YAAY,QAAQ,KAAK,WAAW,OAAO,SAAQ,CAAE,EAAE;IACnE,CAAC,CAAC;EAEN;EAEA,2BAAwB;AACtB,UAAM,qBAAqB,KAAK,iBAAgB;AAEhD,QAAI,mBAAmB,SAAS,GAAG;AAEjC,WAAK,WAAW,iBAAiB,aAAY,EAAG,QAAQ,cAAW;AACjE,iBAAS,oBAAoB,kBAAkB;MACjD,CAAC;AAED,aAAO,mBAAmB,IAAI,CAAAC,gBAAc;QAC1C,WAAAA;QACA,UAAU;QACV,MAAM;QACN,SAAS,KAAK,IAAG,IAAK,KAAK;QAC3B,cAAc,KAAK,IAAG;QACtB;IACJ;AAEA,QAAI,YAA2B,CAAA;AAG/B,gBAAY,UAAU,OACpB,KAAK,WAAW,iBAAiB,SAAQ,EACtC,IAAI,CAAAA,eAAa,KAAK,mBAAmB,IAAIA,YAAW,KAAK,sBAAsB,CAAC,CAAC;AAG1F,UAAM,2BAA2B,KAAK,uBAAsB;AAG5D,QAAI,yBAAyB,SAAS,GAAG;AAEvC,WAAK,WAAW,iBAAiB,aAAY,EAAG,QAAQ,cAAW;AACjE,iBAAS,oBAAoB,wBAAwB;MACvD,CAAC;AAED,kBAAY,UAAU,OACpB,yBAAyB,IAAI,CAAAA,gBAAc;QACzC,WAAAA;QACA,UAAU;QACV,MAAM;QACN,SAAS,KAAK,IAAG,IAAK,KAAK;QAC3B,cAAc,KAAK,IAAG;QACtB,CAAC;IAEP;AAGA,gBAAY,UAAU,OACpB,KAAK,SAAS,OAAM,CAAE;AAIxB,gBAAY,UAAU,OACpB,KAAK,WAAW,OAAO,SAAS,CAAC;AAInC,gBAAY,UAAU,OACpB,KAAK,YAAY,OAAO,SAAS,CAAC;AAGpC,WAAO;EACT;EAEA,cAAe,QAAgB,WAAmB;AAChD,SAAK,YAAY,IAAI,QAAQ,SAAS;EACxC;EAEA,iBAAkB,QAAc;AAC9B,QAAI,KAAK,YAAY,OAAO,UAAU,QAAQ,MAAM,EAAE,CAAC,GAAG;AACxD,WAAK,0BAAyB;IAChC;EACF;EAEA,wBAAyB,YAAoB,cAAsB,YAAoB,eAAuB,cAAc,WAA0B,OAAK;AACzJ,SAAK,WAAW,IAAI,YAAY,cAAc,YAAY,cAAc,QAAQ;AAGhF,SAAK,SAAS,eAAe,MAAM,OAAO,UAAU,IAAI,IAAI,CAAC,IAAI,UAAU,IAAI,QAAQ,IAAI,YAAY,EAAE;EAC3G;EAEA,2BAA4B,YAAoB,cAAsB,YAAoB,eAAuB,cAAc,WAA0B,OAAK;AAC5J,QAAI,KAAK,WAAW,OAAO,UAAU,MAAM,OAAO,UAAU,IAAI,IAAI,CAAC,IAAI,UAAU,IAAI,QAAQ,IAAI,YAAY,EAAE,CAAC,GAAG;AACnH,WAAK,0BAAyB;IAChC;EACF;;;;;;;;;EAUQ,wBAAyB,IAAa;AAE5C,QAAI,KAAK,WAAW,IAAI,EAAE,GAAG;AAC3B,aAAO;IACT;AAEA,UAAM,YAAY,GAAG,UAAS;AAG9B,QAAI,UAAU,WAAW,KAAK,UAAU,SAAS,eAAe,YAAY,UAAU,IAAI,MAAM,MAAM;AACpG,aAAO;IACT;AAEA,UAAM,YAAY,KAAK,WAAW,iBAAiB,aAAY;AAE/D,UAAM,oBAAuD;MAC3D,CAACC,QAAkBC,YAAW,WAAWD,GAAE,KAAKE,kBAAiB,WAAWF,GAAE;MAC9E,CAACA,QAAkBG,KAAI,WAAWH,GAAE;MACpC,CAACA,QAAkB,QAAQ,WAAWA,GAAE;;AAG1C,eAAW,WAAW,mBAAmB;AAEvC,UAAI,CAAC,QAAQ,EAAE,GAAG;AAChB;MACF;AAGA,YAAM,qBAAqB,UAAU,OAAO,cAAW;AACrD,eAAO,SAAS,SAAQ,EAAG,OAAO,CAAAA,QAAK;AAErC,iBAAOA,IAAG,UAAS,EAAG,WAAW,KAAK,QAAQA,GAAE;QAClD,CAAC,EAAE,SAAS;MACd,CAAC;AAKD,UAAI,mBAAmB,WAAW,GAAG;AACnC;MACF;AAIA,YAAM,gBAAgB,mBAAmB,CAAC,EAAE,SAAQ,EAAG,OAAO,CAAAA,QAAK;AACjE,eAAOA,IAAG,UAAS,EAAG,SAAS;MACjC,CAAC,EAAE,IAAG;AAEN,UAAI,iBAAiB,MAAM;AACzB;MACF;AAEA,YAAM,mBAAmB,cAAc,UAAS;AAGhD,WAAK,SAAS,OAAO,EAAE;AACvB,WAAK,WAAW,IACd,iBAAiB,MACjB,iBAAiB,MACjB,UAAU,MACV,UAAU,MACV,UAAU,SAAS;AAGrB,aAAO;IACT;AAEA,WAAO;EACT;;;;AC7hBF,IAAY;CAAZ,SAAYI,WAAQ;AAClB,EAAAA,UAAA,iBAAA,IAAA;AACA,EAAAA,UAAA,WAAA,IAAA;AACF,GAHY,aAAA,WAAQ,CAAA,EAAA;AAKd,IAAO,sBAAP,cAAmC,MAAK;EAC5C,YAAaC,WAAU,mBAAiB;AACtC,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,gCAAP,cAA6C,MAAK;EACtD,YAAaA,WAAU,8BAA4B;AACjD,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,wBAAP,cAAqC,MAAK;EAC9C,YAAaA,WAAU,gCAA8B;AACnD,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,qBAAP,cAAkC,MAAK;EAC3C,YAAaA,WAAU,6BAA2B;AAChD,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,sBAAP,cAAmC,MAAK;EAC5C,YAAaA,WAAU,+BAA6B;AAClD,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,yBAAP,cAAsC,MAAK;EAC/C,YAAaA,WAAU,4BAA0B;AAC/C,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,gCAAP,cAA6C,MAAK;EACtD,YAAaA,WAAU,oCAAkC;AACvD,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,kBAAP,cAA+B,MAAK;EACxC,YAAaA,WAAU,qBAAmB;AACxC,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,gCAAP,cAA6C,MAAK;EACtD,YAAaA,WAAU,yDAAuD;AAC5E,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,kCAAP,cAA+C,MAAK;EACxD,YAAaA,WAAU,wDAAsD;AAC3E,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,wBAAP,cAAqC,MAAK;EAC9C,YAAaA,WAAU,sBAAoB;AACzC,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,6BAAP,cAA0C,MAAK;EACnD,YAAaA,WAAU,0BAAwB;AAC7C,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,wBAAP,cAAqC,MAAK;EAC9C,YAAaA,WAAU,qBAAmB;AACxC,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,wBAAP,cAAqC,MAAK;EAC9C,YAAaA,WAAU,6BAA2B;AAChD,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,wBAAP,cAAqC,MAAK;EAC9C,YAAaA,WAAU,qBAAmB;AACxC,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,4BAAP,cAAyC,MAAK;EAClD,YAAaA,WAAU,yBAAuB;AAC5C,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,sBAAP,cAAmC,MAAK;EAC5C,YAAaA,WAAU,+BAA6B;AAClD,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;;;ACpEF,IAAM,oBAAN,MAAuB;EACd,aAAkC,CAAA;EACjC,WAAW;EAEnB,YAAa,OAAuB,CAAA,GAAE;AACpC,SAAK,aAAa,CAAA;AAElB,eAAW,CAAC,KAAKC,MAAK,KAAK,OAAO,QAAQ,IAAI,GAAG;AAC/C,WAAK,WAAW,GAAG,IAAIA;IACzB;AAEA,QAAI,KAAK,WAAW,UAAU,MAAM;AAClC,WAAK,WAAW,SAAS,cAAa;IACxC;EACF;EAEA,YAAS;AACP,WAAO,KAAK;EACd;EAEQ,MAAM,uBAAwB,YAAwF;AAC5H,UAAM,QAAQ,IACZ,OAAO,OAAO,KAAK,UAAU,EAC1B,OAAO,SAAO,YAAY,GAAG,CAAC,EAC9B,IAAI,OAAO,cAAwB;AAClC,YAAM,UAAU,UAAU,IAAG;IAC/B,CAAC,CAAC;EAER;EAEA,MAAM,cAAW;AACf,UAAM,KAAK,uBAAuB,aAAa;EACjD;EAEA,MAAM,QAAK;AACT,UAAM,KAAK,uBAAuB,OAAO;AACzC,SAAK,WAAW;EAClB;EAEA,MAAM,aAAU;AACd,UAAM,KAAK,uBAAuB,YAAY;EAChD;EAEA,MAAM,aAAU;AACd,UAAM,KAAK,uBAAuB,YAAY;EAChD;EAEA,MAAM,OAAI;AACR,UAAM,KAAK,uBAAuB,MAAM;AACxC,SAAK,WAAW;EAClB;EAEA,MAAM,YAAS;AACb,UAAM,KAAK,uBAAuB,WAAW;EAC/C;;AAGF,IAAM,oBAAoB;EACxB;EACA;EACA;;AAGF,IAAM,yBAAyB;EAC7B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AAGI,SAAU,kBAAmB,OAAuB,CAAA,GAAE;AAC1D,QAAM,aAAa,IAAI,kBAAkB,IAAI;AAE7C,QAAM,QAAQ,IAAI,MAAM,YAAY;IAClC,IAAK,QAAQ,MAAM,UAAQ;AACzB,UAAI,OAAO,SAAS,YAAY,CAAC,uBAAuB,SAAS,IAAI,GAAG;AACtE,cAAM,UAAU,WAAW,WAAW,IAAI;AAE1C,YAAI,WAAW,QAAQ,CAAC,kBAAkB,SAAS,IAAI,GAAG;AACxD,gBAAM,IAAI,oBAAoB,GAAG,IAAI,UAAU;QACjD;AAEA,eAAO;MACT;AAEA,aAAO,QAAQ,IAAI,QAAQ,MAAM,QAAQ;IAC3C;IAEA,IAAK,QAAQ,MAAMA,QAAK;AACtB,UAAI,OAAO,SAAS,UAAU;AAC5B,mBAAW,WAAW,IAAI,IAAIA;MAChC,OAAO;AACL,gBAAQ,IAAI,QAAQ,MAAMA,MAAK;MACjC;AAEA,aAAO;IACT;GACD;AAGD,SAAO;AACT;AAEM,SAAU,yBAA0B,YAAsB;AAC9D,QAAMC,uBAAwD,CAAA;AAE9D,aAAW,WAAW,OAAO,OAAO,WAAW,UAAU,GAAG;AAC1D,eAAW,cAAc,uBAAuB,OAAO,GAAG;AACxD,MAAAA,qBAAoB,UAAU,IAAI;IACpC;EACF;AAEA,aAAW,WAAW,OAAO,OAAO,WAAW,UAAU,GAAG;AAC1D,eAAW,cAAc,uBAAuB,OAAO,GAAG;AACxD,UAAIA,qBAAoB,UAAU,MAAM,MAAM;AAC5C,cAAM,IAAI,8BAA8B,YAAY,eAAe,OAAO,CAAC,0BAA0B,UAAU,mHAAmH;MACpO;IACF;EACF;AACF;AAEA,SAAS,uBAAwB,SAAY;AAC3C,MAAI,MAAM,QAAQ,UAAU,mBAAmB,CAAC,GAAG;AACjD,WAAO,QAAQ,mBAAmB;EACpC;AAEA,SAAO,CAAA;AACT;AAEA,SAAS,uBAAwB,SAAY;AAC3C,MAAI,MAAM,QAAQ,UAAU,mBAAmB,CAAC,GAAG;AACjD,WAAO,QAAQ,mBAAmB;EACpC;AAEA,SAAO,CAAA;AACT;AAEA,SAAS,eAAgB,SAAY;AACnC,SAAO,UAAU,OAAO,WAAW,KAAK,SAAS,SAAQ,KAAM;AACjE;;;ACjMA,IAAMC,aAAY;AAClB,IAAMC,aAAY;AAWZ,SAAU,gBAAiB,QAAyB,CAAA,GAAE;AAC1D,SAAO;IACL,cAAc,YAAY;IAC1B,mBAAmB,OAAOC,eAAwB;AAEhD,UAAIC,YAAW,QAAQD,UAAS,GAAG;AACjC,eAAO;MACT;AAEA,YAAM,SAASA,WAAU,aAAY;AAGrC,UAAI,OAAO,CAAC,EAAE,CAAC,MAAMF,cAAa,OAAO,CAAC,EAAE,CAAC,MAAMC,YAAW;AAC5D,eAAO,QAAQ,YAAY,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;MAC/C;AAEA,aAAO;IACT;IACA,uBAAuB,YAAY;IACnC,wBAAwB,YAAY;IACpC,gCAAgC,YAAY;IAC5C,iCAAiC,YAAY;IAC7C,+BAA+B,YAAY;IAC3C,gCAAgC,YAAY;IAC5C,wBAAwB,YAAY;IACpC,GAAG;;AAEP;;;ACzCA,IAAM,mBAAmB,MAAM;AAC9B,QAAM,QAAQ,IAAI,MAAM,eAAe;AACvC,QAAM,OAAO;AACb,SAAO;AACR;AAEA,IAAM,eAAe,oBAAI,QAAQ;AAE1B,SAAS,YAAY,EAAC,cAAc,cAAc,YAAY,WAAU,IAAI,CAAC,GAAG;AAEtF,SAAO,CAAC,cAAc,EAAC,OAAAG,QAAO,OAAM,IAAI,CAAC,MAAM;AAE9C,QAAI,QAAQ,SAAS;AACpB,aAAO,QAAQ,OAAO,iBAAiB,CAAC;AAAA,IACzC;AAEA,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,UAAM,QAAQ,gBAAgB;AAE9B,UAAM,iBAAiB,MAAM;AAC5B,YAAM,SAAS;AACf,qBAAe,iBAAiB,CAAC;AAAA,IAClC;AAEA,UAAM,UAAU,MAAM;AACrB,UAAI,QAAQ;AACX,eAAO,oBAAoB,SAAS,cAAc;AAAA,MACnD;AAAA,IACD;AAEA,UAAM,eAAe,IAAI,QAAQ,CAAC,SAAS,WAAW;AACrD,eAAS,MAAM;AACd,gBAAQ;AACR,gBAAQA,MAAK;AAAA,MACd;AAEA,uBAAiB;AACjB,mBAAa,cAAc,YAAY,QAAQ,YAAY;AAAA,IAC5D,CAAC;AAED,QAAI,QAAQ;AACX,aAAO,iBAAiB,SAAS,gBAAgB,EAAC,MAAM,KAAI,CAAC;AAAA,IAC9D;AAEA,iBAAa,IAAI,cAAc,MAAM;AACpC,YAAM,SAAS;AACf,kBAAY;AACZ,aAAO;AAAA,IACR,CAAC;AAED,WAAO;AAAA,EACR;AACD;AAEA,IAAM,QAAQ,YAAY;AAE1B,IAAO,gBAAQ;;;ACCT,IAAO,cAAP,MAAkB;EACN;EACN;EACA;EACA;EACA;EACA;EACA;EAEV,YAAa,OAAwB,CAAA,GAAE;AACrC,SAAK,SAAS,KAAK,UAAU;AAC7B,SAAK,WAAW,KAAK,YAAY;AACjC,SAAK,gBAAgB,KAAK,iBAAiB;AAC3C,SAAK,aAAa,KAAK,cAAc;AACrC,SAAK,uBAAuB,KAAK,wBAAyB,KAAK,WAAW,MAAO,KAAK;AACtF,SAAK,YAAY,KAAK,aAAa;AACnC,SAAK,gBAAgB,IAAI,cAAa;EACxC;EAEA,MAAM,QAAS,KAAa,kBAA0B,GAAGC,WAAoC,CAAA,GAAE;AAC7F,UAAM,QAAQ,KAAK,OAAO,GAAG;AAC7B,UAAM,cAAc,KAAK,mBAAmBA,QAAO;AACnD,QAAI,MAAM,KAAK,cAAc,OAAO,OAAO,iBAAiB,WAAW;AACvE,QAAI,kBAAkB,KAAK,IAAI,KAAK,SAAS,IAAI,gBAAgB,CAAC;AAElE,QAAI,IAAI,iBAAiB,KAAK,QAAQ;AAEpC,UAAI,KAAK,gBAAgB,KAAK,IAAI,kBAAmB,KAAK,SAAS,iBAAkB;AAEnF,cAAM,KAAK,cAAc,IAAI,OAAO,IAAI,gBAAgB,KAAK,aAAa;MAC5E;AAEA,YAAM,IAAI,eAAe,uBAAuB,GAAG;IACrD,WAAW,KAAK,cAAc,IAAI,eAAe,KAAK,CAAC,IAAI,mBAAmB;AAE5E,UAAI,UAAU,KAAK,KAAK,IAAI,gBAAgB,IAAI,kBAAkB,EAAE;AACpE,UAAI,UAAU,KAAK,sBAAsB;AACvC,kBAAU,IAAI,iBAAiB,KAAK;MACtC;AAEA,YAAM,cAAM,OAAO;IACrB;AAEA,WAAO;EACT;EAEA,QAAS,KAAa,SAAiB,GAAGA,WAAoC,CAAA,GAAE;AAC9E,UAAM,QAAQ,KAAK,OAAO,GAAG;AAC7B,UAAM,cAAc,KAAK,mBAAmBA,QAAO;AACnD,UAAM,MAAM,KAAK,cAAc,OAAO,OAAO,QAAQ,WAAW;AAChE,QAAI,kBAAkB,KAAK,IAAI,KAAK,SAAS,IAAI,gBAAgB,CAAC;AAElE,WAAO;EACT;EAEA,OAAQ,KAAa,SAAiB,GAAGA,WAAoC,CAAA,GAAE;AAC7E,UAAM,QAAQ,KAAK,OAAO,GAAG;AAC7B,UAAM,cAAc,KAAK,mBAAmBA,QAAO;AACnD,UAAM,MAAM,KAAK,cAAc,OAAO,OAAO,CAAC,QAAQ,WAAW;AACjE,QAAI,kBAAkB,KAAK,IAAI,KAAK,SAAS,IAAI,gBAAgB,CAAC;AAElE,WAAO;EACT;;;;;;;EAQA,MAAO,KAAa,aAAmB;AACrC,UAAM,aAAa,cAAc;AACjC,UAAM,aAAa,KAAK,SAAS;AAEjC,SAAK,cAAc,IAAI,KAAK,OAAO,GAAG,GAAG,YAAY,WAAW;AAEhE,WAAO;MACL,iBAAiB;MACjB,cAAc,eAAe,IAAI,KAAK;MACtC,gBAAgB;MAChB,mBAAmB;;EAEvB;EAEA,IAAK,KAAa,QAAgB,cAAsB,GAAC;AACvD,UAAM,cAAc,eAAe,IAAI,cAAc,KAAK,YAAY;AAEtE,SAAK,cAAc,IAAI,KAAK,OAAO,GAAG,GAAG,QAAQ,WAAW;AAE5D,WAAO;MACL,iBAAiB;MACjB,cAAc,eAAe,IAAI,KAAK;MACtC,gBAAgB;MAChB,mBAAmB;;EAEvB;EAEA,IAAK,KAAW;AACd,UAAM,MAAM,KAAK,cAAc,IAAI,KAAK,OAAO,GAAG,CAAC;AAEnD,QAAI,OAAO,MAAM;AACf,UAAI,kBAAkB,KAAK,IAAI,KAAK,SAAS,IAAI,gBAAgB,CAAC;IACpE;AAEA,WAAO;EACT;EAEA,OAAQ,KAAW;AACjB,SAAK,cAAc,OAAO,KAAK,OAAO,GAAG,CAAC;EAC5C;EAEQ,mBAAoBA,UAAkC;AAC5D,QAAIA,UAAS,kBAAkB,QAAQA,SAAQ,kBAAkB,GAAG;AAClE,aAAOA,SAAQ;IACjB;AAEA,WAAO,KAAK;EACd;EAEA,OAAQ,KAAW;AACjB,WAAO,KAAK,UAAU,SAAS,IAAI,GAAG,KAAK,SAAS,IAAI,GAAG,KAAK;EAClE;EAEA,SAAU,OAAa;AACrB,WAAO,MAAM,UAAU,KAAK,UAAU,MAAM;EAC9C;;AAGI,IAAO,gBAAP,MAAoB;EACR;EAEhB,cAAA;AACE,SAAK,UAAU,oBAAI,IAAG;EACxB;EAEA,OAAQ,KAAaC,QAAe,aAAmB;AACrD,UAAM,WAAW,KAAK,QAAQ,IAAI,GAAG;AAErC,QAAI,YAAY,MAAM;AACpB,YAAM,kBAAkB,SAAS,aAAa,OAC1C,SAAS,UAAU,QAAO,KAAK,oBAAI,KAAI,GAAG,QAAO,IACjD;AAEJ,UAAI,SAAS,aAAa,QAAQ,kBAAkB,GAAG;AAErD,iBAAS,SAASA;AAElB,eAAO;UACL,iBAAiB;UACjB,cAAc;UACd,gBAAgB,SAAS;UACzB,mBAAmB;;MAEvB;AAEA,aAAO,KAAK,IAAI,KAAKA,QAAO,WAAW;IACzC;AAEA,WAAO,KAAK,IAAI,KAAKA,QAAO,WAAW;EACzC;EAEA,IAAK,KAAaA,QAAe,aAAmB;AAClD,UAAM,aAAa,cAAc;AACjC,UAAM,WAAW,KAAK,QAAQ,IAAI,GAAG;AAErC,QAAI,YAAY,MAAM;AACpB,mBAAa,SAAS,SAAS;IACjC;AAEA,UAAM,SAAqB;MACzB,OAAAA;MACA,WAAW,aAAa,IAAI,IAAI,KAAK,KAAK,IAAG,IAAK,UAAU,IAAI;;AAGlE,SAAK,QAAQ,IAAI,KAAK,MAAM;AAE5B,QAAI,aAAa,GAAG;AAClB,aAAO,YAAY,WAAW,MAAK;AACjC,aAAK,QAAQ,OAAO,GAAG;MACzB,GAAG,UAAU;AAEb,UAAI,OAAO,UAAU,SAAS,MAAM;AAClC,eAAO,UAAU,MAAK;MACxB;IACF;AAEA,WAAO;MACL,iBAAiB;MACjB,cAAc,eAAe,IAAI,KAAK;MACtC,gBAAgB,OAAO;MACvB,mBAAmB;;EAEvB;EAEA,IAAK,KAAW;AACd,UAAM,WAAW,KAAK,QAAQ,IAAI,GAAG;AAErC,QAAI,YAAY,MAAM;AACpB,YAAM,kBAAkB,SAAS,aAAa,OAC1C,SAAS,UAAU,QAAO,KAAK,oBAAI,KAAI,GAAG,QAAO,IACjD;AACJ,aAAO;QACL,iBAAiB;QACjB,cAAc;QACd,gBAAgB,SAAS;QACzB,mBAAmB;;IAEvB;EACF;EAEA,OAAQ,KAAW;AACjB,UAAM,SAAS,KAAK,QAAQ,IAAI,GAAG;AAEnC,QAAI,UAAU,MAAM;AAClB,UAAI,OAAO,aAAa,MAAM;AAC5B,qBAAa,OAAO,SAAS;MAC/B;AAEA,WAAK,QAAQ,OAAO,GAAG;AAEvB,aAAO;IACT;AACA,WAAO;EACT;;;;AC7QI,SAAU,eAAgB,MAAsC;AACpE,MAAI,SAAS,IAAI,GAAG;AAClB,WAAO,EAAE,QAAQ,MAAM,YAAY,CAAA,EAAE;EACvC;AAEA,MAAI,aAAa,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,IAAI;AAEnD,MAAIC;AAEJ,MAAI,WAAW,SAAS,GAAG;AACzB,UAAM,YAAY,WAAW,CAAC,EAAE,UAAS;AACzC,IAAAA,UAAS,aAAa,OAAO,SAAY,iBAAiB,SAAS;AAGnE,eAAW,QAAQ,QAAK;AACtB,UAAI,CAAC,YAAY,EAAE,GAAG;AACpB,cAAM,IAAI,sBAAsB,mBAAmB;MACrD;AAEA,YAAM,cAAc,GAAG,UAAS;AAEhC,UAAI,eAAe,MAAM;AACvB,YAAIA,WAAU,MAAM;AAClB,gBAAM,IAAI,uBAAuB,8DAA8D;QACjG;MACF,OAAO;AACL,cAAM,WAAW,iBAAiB,WAAW;AAE7C,YAAIA,SAAQ,OAAO,QAAQ,MAAM,MAAM;AACrC,gBAAM,IAAI,uBAAuB,8DAA8D;QACjG;MACF;IACF,CAAC;EACH;AAIA,eAAa,WAAW,OAAO,QAAK;AAClC,WAAO,CAACC,SAAQ,WAAW,EAAE;EAC/B,CAAC;AAED,SAAO;IACL,QAAAD;IACA;;AAEJ;;;ACxCA,IAAM,6BAA6B;;EAEjC;;EAGA;;EAGA;;EAGA;;AAiBF,eAAsB,8BAA+B,YAAyBE,UAAsC;AAClH,QAAM,kBAAkB,YAAY,SAAS,IAAI,YAAU,OAAO,QAAQ,KAAK,CAAA;AAC/E,QAAM,oBAAoBA,UAAS,qBAAqB;AAIxD,MAAI,gBAAgB,OAAO,WAAS,SAAS,QAAQ,CAAC,kBAAkB,SAAS,KAAK,CAAC,EAAE,SAAS,GAAG;AACnG;EACF;AAEA,MAAI;AACF,UAAM,YAAY,MAAMA,QAAO;EACjC,SAAS,KAAU;AACjB,gBAAY,MAAM,GAAG;EACvB;AACF;;;ACjDM,SAAU,iBAAkB,IAAsB;AACtD,MAAI;AACF,QAAI;AACJ,QAAI,OAAO,OAAO,UAAU;AAC1B,iBAAW,UAAU,EAAE;IACzB,OAAO;AACL,iBAAW;IACb;AAEA,UAAM,aAAa,oBAAI,IAAI,CAAC,GAAG,SAAS,cAAa,EAAG,IAAI,eAAa,UAAU,IAAI,CAAC,CAAC;AAGzF,QAAI,CAAC,WAAW,IAAI,QAAQ,GAAG;AAC7B,YAAMC,UAAS,WAAW,IAAI,KAAK;AACnC,YAAM,OAAOA,UAAS,gBAAgB;AACtC,iBAAW,SAAS,YAAY,IAAI;IACtC;AAEA,WAAO,eAAe,QAAQ;EAChC,SAAS,OAAO;AACd,UAAM,IAAI,MAAM,qDAAqD,EAAE,EAAE;EAC3E;AACF;;;ACdM,IAAO,mBAAP,MAAuB;EACV;EACA;EACA;EACA;EACA;EAEjB,YAAa,YAAwC,OAA6B,CAAA,GAAE;AAClF,SAAK,SAAS,KAAK,SAAS,CAAA,GAAI,IAAI,QAAM,iBAAiB,EAAE,CAAC;AAC9D,SAAK,oBAAoB,WAAW;AACpC,SAAK,YAAY,WAAW;AAC5B,SAAK,SAAS,WAAW;AACzB,SAAK,MAAM,WAAW,OAAO,aAAa,6CAA6C;AACvF,SAAK,wBAAwB,KAAK,sBAAsB,KAAK,IAAI;EACnE;EAEA,QAAK;AACH,SAAK,OAAO,iBAAiB,mBAAmB,KAAK,qBAAqB;EAC5E;EAEA,OAAI;AACF,SAAK,OAAO,oBAAoB,mBAAmB,KAAK,qBAAqB;EAC/E;EAEA,wBAAqB;AACnB,SAAK,uBAAsB,EACxB,MAAM,SAAM;AACX,WAAK,IAAI,MAAM,sCAAsC,GAAG;IAC1D,CAAC;EACL;;;;;EAMQ,MAAM,yBAAsB;AAClC,UAAM,cAAc,KAAK,kBAAkB,eAAc;AACzD,UAAM,iBAAiB,YAAY;AACnC,UAAM,iBAAiB,KAAK,kBAAkB,kBAAiB;AAE/D,SAAK,IAAI,wCAAwC,gBAAgB,cAAc;AAE/E,QAAI,kBAAkB,gBAAgB;AACpC;IACF;AAEA,UAAM,aAAa,IAAI,QAAO;AAG9B,eAAW,cAAc,aAAa;AACpC,YAAM,aAAa,WAAW;AAE9B,UAAI,WAAW,IAAI,UAAU,GAAG;AAC9B;MACF;AAEA,iBAAW,IAAI,YAAY,CAAC;AAE5B,UAAI;AACF,cAAM,OAAO,MAAM,KAAK,UAAU,IAAI,UAAU;AAGhD,mBAAW,IAAI,YAAY,CAAC,GAAG,KAAK,KAAK,OAAM,CAAE,EAAE,OAAO,CAAC,KAAK,SAAQ;AACtE,iBAAO,MAAM,KAAK;QACpB,GAAG,CAAC,CAAC;MACP,SAAS,KAAU;AACjB,YAAI,IAAI,SAAS,iBAAiB;AAChC,eAAK,IAAI,MAAM,2BAA2B,GAAG;QAC/C;MACF;IACF;AAEA,UAAM,oBAAoB,KAAK,gBAAgB,aAAa,UAAU;AAGtE,UAAM,UAAU,KAAK,IAAI,iBAAiB,gBAAgB,CAAC;AAC3D,UAAM,UAAU,CAAA;AAEhB,eAAW,cAAc,mBAAmB;AAC1C,WAAK,IAAI,0DAA0D,WAAW,UAAU;AAExF,YAAM,wBAAwB,KAAK,MAAM,KAAK,CAAC,UAAS;AACtD,eAAO,MAAM,SAAS,WAAW,WAAW,YAAW,EAAG,OAAO;MACnE,CAAC;AAGD,UAAI,CAAC,uBAAuB;AAC1B,gBAAQ,KAAK,UAAU;MACzB;AAEA,UAAI,QAAQ,WAAW,SAAS;AAC9B;MACF;IACF;AAGA,UAAM,QAAQ,IACZ,QAAQ,IAAI,OAAM,eAAa;AAC7B,YAAM,8BAA8B,YAAY;QAC9C,QAAQ,YAAY,QAAQ,GAAI;OACjC;IACH,CAAC,CAAC;AAIJ,SAAK,OAAO,kBAAkB,oBAAoB,EAAE,QAAQ,QAAO,CAAE;EACvE;EAEA,gBAAiB,aAA2B,YAA2B;AACrE,WAAO,YAEJ,KAAK,CAAC,GAAG,MAAK;AACb,YAAM,sBAAsB,EAAE,SAAS;AACvC,YAAM,sBAAsB,EAAE,SAAS;AAEvC,UAAI,sBAAsB,qBAAqB;AAC7C,eAAO;MACT;AAEA,UAAI,sBAAsB,qBAAqB;AAC7C,eAAO;MACT;AAEA,aAAO;IACT,CAAC,EAEA,KAAK,CAAC,GAAG,MAAK;AACb,UAAI,EAAE,cAAc,cAAc,EAAE,cAAc,WAAW;AAC3D,eAAO;MACT;AAEA,UAAI,EAAE,cAAc,aAAa,EAAE,cAAc,YAAY;AAC3D,eAAO;MACT;AAEA,aAAO;IACT,CAAC,EAEA,KAAK,CAAC,GAAG,MAAK;AACb,UAAI,EAAE,QAAQ,SAAS,EAAE,QAAQ,QAAQ;AACvC,eAAO;MACT;AAEA,UAAI,EAAE,QAAQ,SAAS,EAAE,QAAQ,QAAQ;AACvC,eAAO;MACT;AAEA,aAAO;IACT,CAAC,EAEA,KAAK,CAAC,GAAG,MAAK;AACb,YAAM,aAAa,WAAW,IAAI,EAAE,UAAU,KAAK;AACnD,YAAM,aAAa,WAAW,IAAI,EAAE,UAAU,KAAK;AAEnD,UAAI,aAAa,YAAY;AAC3B,eAAO;MACT;AAEA,UAAI,aAAa,YAAY;AAC3B,eAAO;MACT;AAEA,aAAO;IACT,CAAC;EACL;;;;ACxLK,IAAM,eAAe;AAKrB,IAAM,0BAA0B;AAKhC,IAAM,+BAA+B;AAKrC,IAAM,yBAAyB;AAK/B,IAAM,+BAA+B;AAKrC,IAAM,mCAAmC;AAKzC,IAAM,0BAA0B;AAUhC,IAAM,wBAAwB;AAO9B,IAAM,wBAAwB;AAK9B,IAAM,wBAAwB;AAK9B,IAAM,sBAAsB;;;ACvD5B,IAAM,kBAAkB;AAKxB,IAAM,qBAAqB;;;ACF5B,IAAO,gBAAP,cAA0H,MAAgC;EAC9J,YAAa,OAA6C,CAAA,GAAE;AAC1D,UAAM;MACJ,GAAG;MACH,MAAM,CAAC,GAAG,MAAK;AACb,YAAI,EAAE,QAAQ,WAAW,EAAE,QAAQ,UAAU;AAC3C,iBAAO;QACT;AAEA,YAAI,EAAE,QAAQ,WAAW,EAAE,QAAQ,UAAU;AAC3C,iBAAO;QACT;AAEA,eAAO;MACT;KACD;EACH;;;;ACrBI,SAAU,eAAgB,IAAU;AACxC,SAAO,mDAAmD,KAAK,EAAE,KAC/D,QAAQ,KAAK,EAAE;AACnB;;;ACCM,SAAU,WAAY,IAAa;AACvC,MAAI,CAAC,UAAU,EAAE,GAAG;AAElB,WAAO;EACT;AAEA,QAAM,EAAE,QAAO,IAAK,GAAG,YAAW;AAElC,SAAO,eAAe,OAAO;AAC/B;;;ACJM,SAAU,wBAAyB,GAAY,GAAU;AAC7D,QAAM,SAASC,KAAI,WAAW,EAAE,SAAS;AACzC,QAAM,SAASA,KAAI,WAAW,EAAE,SAAS;AAEzC,MAAI,UAAU,CAAC,QAAQ;AACrB,WAAO;EACT;AAEA,MAAI,CAAC,UAAU,QAAQ;AACrB,WAAO;EACT;AAEA,QAAM,qBAAqBC,kBAAiB,WAAW,EAAE,SAAS;AAClE,QAAM,qBAAqBA,kBAAiB,WAAW,EAAE,SAAS;AAElE,MAAI,sBAAsB,CAAC,oBAAoB;AAC7C,WAAO;EACT;AAEA,MAAI,CAAC,sBAAsB,oBAAoB;AAC7C,WAAO;EACT;AAEA,QAAM,eAAeC,YAAW,WAAW,EAAE,SAAS;AACtD,QAAM,eAAeA,YAAW,WAAW,EAAE,SAAS;AAEtD,MAAI,gBAAgB,CAAC,cAAc;AACjC,WAAO;EACT;AAEA,MAAI,CAAC,gBAAgB,cAAc;AACjC,WAAO;EACT;AAEA,QAAM,YAAYC,QAAO,WAAW,EAAE,SAAS;AAC/C,QAAM,YAAYA,QAAO,WAAW,EAAE,SAAS;AAE/C,MAAI,aAAa,CAAC,WAAW;AAC3B,WAAO;EACT;AAEA,MAAI,CAAC,aAAa,WAAW;AAC3B,WAAO;EACT;AAEA,QAAM,kBAAkBC,cAAa,WAAW,EAAE,SAAS;AAC3D,QAAM,kBAAkBA,cAAa,WAAW,EAAE,SAAS;AAE3D,MAAI,mBAAmB,CAAC,iBAAiB;AACvC,WAAO;EACT;AAEA,MAAI,CAAC,mBAAmB,iBAAiB;AACvC,WAAO;EACT;AAEA,QAAM,kBAAkBC,cAAa,WAAW,EAAE,SAAS;AAC3D,QAAM,kBAAkBA,cAAa,WAAW,EAAE,SAAS;AAE3D,MAAI,mBAAmB,CAAC,iBAAiB;AACvC,WAAO;EACT;AAEA,MAAI,CAAC,mBAAmB,iBAAiB;AACvC,WAAO;EACT;AAGA,SAAO;AACT;AAMM,SAAU,oBAAqB,GAAY,GAAU;AACzD,QAAM,cAAc,WAAW,EAAE,SAAS;AAC1C,QAAM,cAAc,WAAW,EAAE,SAAS;AAE1C,MAAI,eAAe,CAAC,aAAa;AAC/B,WAAO;EACT,WAAW,CAAC,eAAe,aAAa;AACtC,WAAO;EACT;AAEA,SAAO;AACT;AAMM,SAAU,qBAAsB,GAAY,GAAU;AAC1D,QAAM,aAAa,UAAU,EAAE,SAAS;AACxC,QAAM,aAAa,UAAU,EAAE,SAAS;AAExC,MAAI,cAAc,CAAC,YAAY;AAC7B,WAAO;EACT,WAAW,CAAC,cAAc,YAAY;AACpC,WAAO;EACT;AAEA,SAAO;AACT;AAMM,SAAU,wBAAyB,GAAY,GAAU;AAC7D,MAAI,EAAE,eAAe,CAAC,EAAE,aAAa;AACnC,WAAO;EACT,WAAW,CAAC,EAAE,eAAe,EAAE,aAAa;AAC1C,WAAO;EACT;AAEA,SAAO;AACT;AAMM,SAAU,0BAA2B,GAAY,GAAU;AAC/D,QAAM,aAAaC,SAAQ,WAAW,EAAE,SAAS;AACjD,QAAM,aAAaA,SAAQ,WAAW,EAAE,SAAS;AAEjD,MAAI,cAAc,CAAC,YAAY;AAC7B,WAAO;EACT,WAAW,CAAC,cAAc,YAAY;AACpC,WAAO;EACT;AAEA,SAAO;AACT;AAEM,SAAU,qBAAsB,WAAoB;AACxD,SAAO,UACJ,KAAK,uBAAuB,EAC5B,KAAK,uBAAuB,EAC5B,KAAK,yBAAyB,EAC9B,KAAK,oBAAoB,EACzB,KAAK,mBAAmB;AAC7B;;;AClIA,eAAsB,iBAAkB,SAAoB,WAA8CC,UAAuB;AAC/H,QAAM,QAAQA,SAAQ,SAAS;AAE/B,MAAI,SAASA,SAAQ,qBAAqB,sBAAsB;AAC9D,UAAM,IAAI,oBAAoB,6BAA6B;EAC7D;AAEA,MAAI,WAAW;AACf,QAAM,SAAsB,CAAA;AAE5B,aAAW,YAAY,OAAO,OAAO,SAAS,GAAG;AAC/C,QAAI,SAAS,WAAW,OAAO,GAAG;AAChC,iBAAW;AACX,YAAM,YAAY,MAAM,SAAS,QAAQ,SAASA,QAAO;AAEzD,iBAAWC,YAAW,WAAW;AAC/B,eAAO,KACL,GAAI,MAAM,iBAAiBA,UAAS,WAAW;UAC7C,GAAGD;UACH,OAAO,QAAQ;SAChB,CAAE;MAEP;IACF;EACF;AAEA,MAAI,aAAa,OAAO;AACtB,WAAO,KAAK,OAAO;EACrB;AAEA,SAAO;AACT;;;ACNA,IAAME,kBAAiB;EACrB,kBAAkB;EAClB,oBAAoB;EACpB,oBAAoB;EACpB,aAAa;EACb,WAAW;IACT,SAAS;;;AAeP,IAAO,YAAP,MAAgB;EACb;EACU;EACA;EACA;EACA;EACA;EACT;EACS;EACA;EACA;EAEjB,YAAa,YAAiC,OAAmB,CAAA,GAAE;AACjE,SAAK,gBAAgB,KAAK;AAC1B,SAAK,qBAAqB,KAAK,sBAAsBA,gBAAe;AACpE,SAAK,qBAAqB,KAAK,sBAAsBA,gBAAe;AACpE,SAAK,cAAc,KAAK,eAAeA,gBAAe;AACtD,SAAK,cAAc,KAAK,eAAe,IAAI,QAAO;AAClD,SAAK,MAAM,WAAW,OAAO,aAAa,sCAAsC;AAChF,SAAK,aAAa;AAClB,SAAK,YAAY,KAAK,aAAaA,gBAAe;AAElD,SAAK,qBAAqB,IAAI,gBAAe;AAC7C,oBAAgB,UAAU,KAAK,mBAAmB,MAAM;AAGxD,SAAK,QAAQ,IAAI,cAAc;MAC7B,aAAa,KAAK,oBAAoBA,gBAAe;MACrD,YAAY;MACZ,SAAS,WAAW;KACrB;AAED,SAAK,MAAM,iBAAiB,SAAS,CAAC,UAAS;AAC7C,UAAI,MAAM,QAAQ,SAAS,WAAW,MAAM;AAC1C,aAAK,IAAI,MAAM,4BAA4B,MAAM,MAAM;MACzD;IACF,CAAC;EACH;EAEA,QAAK;AACH,SAAK,qBAAqB,IAAI,gBAAe;AAC7C,oBAAgB,UAAU,KAAK,mBAAmB,MAAM;EAC1D;;;;EAKA,OAAI;AACF,SAAK,mBAAmB,MAAK;AAC7B,SAAK,MAAM,MAAK;EAClB;;;;;;;;;;;;;EAcA,MAAM,KAAM,mBAAqDC,WAAiC,CAAA,GAAE;AAClG,UAAM,EAAE,QAAAC,SAAQ,WAAU,IAAK,eAAe,iBAAiB;AAI/D,UAAM,qBAAqB,MAAM,KAAK,KAAK,YAAY,OAAM,CAAE,EAAE,KAAI,EAAG,KAAK,UAAO;AAClF,UAAID,SAAQ,UAAU,MAAM;AAC1B,eAAO;MACT;AAEA,UAAI,KAAK,UAAU,MAAM;AACvB,eAAO;MACT;AAEA,UAAI,KAAK,WAAW,OAAOC,OAAM,GAAG;AAClC,eAAO;MACT;AAEA,aAAO,WAAW,KAAK,UAAO;AAC5B,eAAO,KAAK,OAAO,KAAK,UAAU;MACpC,CAAC;IACH,CAAC;AAED,QAAI,oBAAoB,WAAW,QAAQ;AACzC,WAAK,IAAI,2BAA2B,mBAAmB,UAAU;AACjE,MAAAD,SAAQ,aAAa,IAAI,oBAAoB,8BAA8B,CAAC;AAC5E,aAAO;IACT;AAIA,UAAM,eAAe,KAAK,MAAM,MAAM,KAAK,SAAM;AAC/C,UAAIC,SAAQ,OAAO,IAAI,QAAQ,MAAM,MAAM,MAAM;AAC/C,eAAO;MACT;AAGA,YAAM,YAAY,IAAI,QAAQ;AAE9B,UAAI,aAAa,MAAM;AACrB,eAAO;MACT;AAEA,iBAAWC,cAAa,YAAY;AAClC,YAAI,UAAU,IAAIA,WAAU,SAAQ,CAAE,GAAG;AACvC,iBAAO;QACT;MACF;AAEA,aAAO;IACT,CAAC;AAED,QAAI,gBAAgB,MAAM;AACxB,WAAK,IAAI,uCAAuCD,OAAM;AAGtD,iBAAWC,cAAa,YAAY;AAClC,qBAAa,QAAQ,WAAW,IAAIA,WAAU,SAAQ,CAAE;MAC1D;AAEA,MAAAF,SAAQ,aAAa,IAAI,oBAAoB,kCAAkC,CAAC;AAChF,aAAO,aAAa,KAAKA,QAAO;IAClC;AAEA,QAAI,KAAK,MAAM,QAAQ,KAAK,oBAAoB;AAC9C,YAAM,IAAI,UAAU,oBAAoB;IAC1C;AAEA,SAAK,IAAI,+BAA+BC,SAAQ,WAAW,IAAI,QAAM,GAAG,SAAQ,CAAE,CAAC;AAEnF,IAAAD,SAAQ,aAAa,IAAI,oBAAoB,8BAA8B,CAAC;AAC5E,WAAO,KAAK,MAAM,IAAI,OAAOA,aAAW;AACtC,MAAAA,SAAQ,aAAa,IAAI,oBAAoB,uBAAuB,CAAC;AAGrE,YAAM,SAAS,UAAU;QACvB,KAAK,mBAAmB;QACxBA,SAAQ;OACT;AACD,sBAAgB,UAAU,MAAM;AAEhC,UAAI;AACF,eAAO,MAAM,KAAK,SAASA,UAAS,MAAM;MAC5C;AAEE,eAAO,MAAK;MACd;IACF,GAAG;MACD,QAAAC;MACA,UAAUD,SAAQ,YAAY;MAC9B,YAAY,IAAI,IAAI,WAAW,IAAI,QAAM,GAAG,SAAQ,CAAE,CAAC;MACvD,QAAQA,SAAQ,UAAU,YAAY,QAAQ,KAAK,WAAW;MAC9D,YAAYA,SAAQ;KACrB;EACH;EAEQ,MAAM,SAAUA,UAA8B,QAAmB;AACvE,UAAMC,UAASD,SAAQ;AACvB,UAAM,aAAaA,SAAQ;AAC3B,UAAM,mBAAmB,oBAAI,IAAG;AAIhC,QAAI,kBAAkBA,SAAQ,WAAW,SAAS;AAElD,QAAI,SAAS;AACb,QAAI,gBAAgB;AACpB,UAAM,SAAkB,CAAA;AAExB,SAAK,IAAI,uBAAuBC,OAAM;AAItC,WAAO,mBAAmB,WAAW,OAAO,GAAG;AAC7C;AAGA,wBAAkB;AAGlB,YAAM,cAAyB,CAAA;AAG/B,YAAM,QAAQ,IAAI,IAAID,SAAQ,UAAU;AAIxC,iBAAW,MAAK;AAEhB,WAAK,IAAI,wCAAwCC,SAAQ,CAAC,GAAG,KAAK,CAAC;AAInE,YAAM,kBAAkB,MAAM,KAAK,oBAAoBA,SAAQ,OAAO;QACpE,GAAGD;QACH;OACD;AAED,iBAAW,QAAQ,iBAAiB;AAElC,YAAI,iBAAiB,IAAI,KAAK,UAAU,SAAQ,CAAE,GAAG;AACnD,eAAK,IAAI,MAAM,4DAA4D,KAAK,WAAWC,OAAM;AACjG;QACF;AAEA,oBAAY,KAAK,IAAI;MACvB;AAEA,WAAK,IAAI,yBAAyB,kBAAkB,IAAI,aAAa,cAAcA,SAAQ,YAAY,IAAI,QAAM,GAAG,UAAU,SAAQ,CAAE,CAAC;AAEzI,MAAAD,UAAS,aAAa,IAAI,oBAA+B,mCAAmC,WAAW,CAAC;AAExG,iBAAW,WAAW,aAAa;AACjC,YAAI,WAAW,KAAK,oBAAoB;AACtC,eAAK,IAAI,0EAA0E,QAAQA,SAAQ,MAAM;AAEzG,gBAAM,IAAI,UAAU,uCAAuC;QAC7D;AAEA;AAEA,YAAI;AAEF,gBAAM,OAAO,MAAM,KAAK,WAAW,iBAAiB,KAAK,QAAQ,WAAW;YAC1E,GAAGA;YACH;WACD;AAED,eAAK,IAAI,wBAAwB,QAAQ,SAAS;AAGlD,cAAI;AACF,kBAAM,KAAK,WAAW,UAAU,MAAM,KAAK,YAAY;cACrD,YAAY;gBACV,KAAK;;cAEP,UAAU;gBACR,CAAC,qBAAqB,GAAG,WAAqB,KAAK,IAAG,EAAG,SAAQ,CAAE;;aAEtE;UACH,SAAS,KAAU;AACjB,iBAAK,IAAI,MAAM,iDAAiDC,SAAQ,GAAG;UAC7E;AAGA,iBAAO;QACT,SAAS,KAAU;AACjB,eAAK,IAAI,MAAM,qBAAqB,QAAQ,WAAW,GAAG;AAG1D,2BAAiB,IAAI,QAAQ,UAAU,SAAQ,CAAE;AAEjD,cAAIA,WAAU,MAAM;AAElB,gBAAI;AACF,oBAAM,KAAK,WAAW,UAAU,MAAMA,SAAQ;gBAC5C,UAAU;kBACR,CAAC,qBAAqB,GAAG,WAAqB,KAAK,IAAG,EAAG,SAAQ,CAAE;;eAEtE;YACH,SAASE,MAAU;AACjB,mBAAK,IAAI,MAAM,iDAAiDF,SAAQE,IAAG;YAC7E;UACF;AAGA,cAAI,OAAO,SAAS;AAClB,kBAAM,IAAI,aAAa,IAAI,OAAO;UACpC;AAEA,iBAAO,KAAK,GAAG;QACjB;MACF;IACF;AAEA,QAAI,OAAO,WAAW,GAAG;AACvB,YAAM,OAAO,CAAC;IAChB;AAEA,UAAM,IAAI,eAAe,QAAQ,4BAA4B;EAC/D;;EAGQ,MAAM,oBAAqBF,SAAiB,aAA0B,oBAAI,IAAG,GAAYD,WAAiC,CAAA,GAAE;AAClI,UAAM,QAAmB,CAAC,GAAG,UAAU,EAAE,IAAI,SAAO;MAClD,WAAW,UAAU,EAAE;MACvB,aAAa;MACb;AAGF,QAAIC,WAAU,MAAM;AAClB,UAAI,KAAK,WAAW,OAAO,OAAOA,OAAM,GAAG;AACzC,cAAM,IAAI,UAAU,oBAAoB;MAC1C;AAEA,UAAK,MAAM,KAAK,WAAW,gBAAgB,eAAeA,OAAM,MAAO,MAAM;AAC3E,cAAM,IAAI,gBAAgB,oDAAoD;MAChF;AAIA,UAAI,MAAM,WAAW,GAAG;AACtB,aAAK,IAAI,6BAA6BA,OAAM;AAC5C,YAAI;AACF,gBAAM,OAAO,MAAM,KAAK,WAAW,UAAU,IAAIA,OAAM;AACvD,gBAAM,KAAK,GAAG,KAAK,SAAS;AAC5B,eAAK,IAAI,4BAA4BA,SAAQ,MAAM,IAAI,CAAC,EAAE,WAAAC,WAAS,MAAOA,WAAU,SAAQ,CAAE,CAAC;QACjG,SAAS,KAAU;AACjB,cAAI,IAAI,SAAS,iBAAiB;AAChC,kBAAM;UACR;QACF;MACF;AAKA,UAAI,MAAM,WAAW,GAAG;AACtB,aAAK,IAAI,oDAAoDD,OAAM;AAEnE,YAAI;AACF,gBAAM,WAAW,MAAM,KAAK,WAAW,YAAY,SAASA,SAAQD,QAAO;AAE3E,eAAK,IAAI,+CAA+CC,SAAQ,MAAM,IAAI,CAAC,EAAE,WAAAC,WAAS,MAAOA,WAAU,SAAQ,CAAE,CAAC;AAElH,gBAAM,KAAK,GAAG,SAAS,WAAW,IAAI,CAAAA,gBAAc;YAClD,WAAAA;YACA,aAAa;YACb,CAAC;QACL,SAAS,KAAU;AACjB,cAAI,IAAI,SAAS,sBAAsB;AACrC,iBAAK,IAAI,8BAA8BD,OAAM;UAC/C,OAAO;AACL,iBAAK,IAAI,MAAM,gEAAgEA,SAAQ,GAAG;UAC5F;QACF;MACF;IACF;AAIA,QAAI,qBAAqB,MAAM,QAAQ,IACrC,MAAM,IAAI,OAAM,SAAO;AACrB,YAAM,SAAS,MAAM,iBAAiB,KAAK,WAAW,KAAK,WAAW;QACpE,KAAK,KAAK,WAAW;QACrB,KAAK,KAAK;QACV,GAAGD;OACJ;AAED,UAAI,OAAO,WAAW,KAAK,OAAO,CAAC,EAAE,OAAO,KAAK,SAAS,GAAG;AAC3D,eAAO;MACT;AAEA,aAAO,OAAO,IAAI,CAAAE,gBAAc;QAC9B,WAAAA;QACA,aAAa;QACb;IACJ,CAAC,CAAC,GAED,KAAI;AAGP,QAAID,WAAU,MAAM;AAClB,YAAM,kBAAkB,QAAQA,QAAO,SAAQ,CAAE;AACjD,0BAAoB,kBAAkB,IAAI,UAAO;AAC/C,cAAM,gBAAgB,KAAK,UAAU,cAAa,EAAG,IAAG;AAGxD,YAAI,eAAe,SAAS,OAAO;AACjC,iBAAO;YACL,WAAW,KAAK,UAAU,YAAY,eAAe;YACrD,aAAa,KAAK;;QAEtB;AAEA,eAAO;MACT,CAAC;IACH;AAEA,UAAM,gBAAgB,kBAAkB,OAAO,UAAO;AAEpD,UAAI,KAAK,WAAW,iBAAiB,0BAA0B,KAAK,SAAS,KAAK,MAAM;AACtF,eAAO;MACT;AAKA,YAAM,aAAa,KAAK,UAAU,UAAS;AAC3C,UAAIA,WAAU,QAAQ,cAAc,MAAM;AACxC,eAAOA,QAAO,OAAO,UAAU;MACjC;AAEA,aAAO;IACT,CAAC;AAGD,UAAM,eAAe,oBAAI,IAAG;AAE5B,eAAW,QAAQ,eAAe;AAChC,YAAM,QAAQ,KAAK,UAAU,SAAQ;AACrC,YAAM,WAAW,aAAa,IAAI,KAAK;AAEvC,UAAI,YAAY,MAAM;AACpB,iBAAS,cAAc,SAAS,eAAe,KAAK,eAAe;AACnE;MACF;AAEA,mBAAa,IAAI,OAAO,IAAI;IAC9B;AAEA,UAAM,oBAAoB,CAAC,GAAG,aAAa,OAAM,CAAE;AAGnD,QAAI,kBAAkB,WAAW,GAAG;AAClC,YAAM,IAAI,sBAAsB,yCAAyC;IAC3E;AAEA,UAAM,aAAwB,CAAA;AAE9B,eAAW,QAAQ,mBAAmB;AACpC,UAAI,KAAK,WAAW,gBAAgB,qBAAqB,QAAQ,MAAM,KAAK,WAAW,gBAAgB,kBAAkB,KAAK,SAAS,GAAG;AACxI;MACF;AAEA,iBAAW,KAAK,IAAI;IACtB;AAEA,UAAM,mBAAmB,KAAK,iBAAiB,OAAO,qBAAqB,UAAU,IAAI,WAAW,KAAK,KAAK,aAAa;AAG3H,QAAI,iBAAiB,WAAW,GAAG;AACjC,YAAM,IAAI,gBAAgB,+DAA+D;IAC3F;AAEA,SAAK,IAAI,MAAM,qCAAqCA,WAAU,gBAAgB,kBAAkB,IAAI,CAAC,EAAE,WAAAC,WAAS,MAAOA,WAAU,SAAQ,CAAE,CAAC;AAC5I,SAAK,IAAI,MAAM,oCAAoCD,WAAU,gBAAgB,iBAAiB,IAAI,CAAC,EAAE,WAAAC,WAAS,MAAOA,WAAU,SAAQ,CAAE,CAAC;AAE1I,WAAO;EACT;EAEA,MAAM,WAAYA,YAAoCF,WAA6B,CAAA,GAAE;AACnF,QAAI,CAAC,MAAM,QAAQE,UAAS,GAAG;AAC7B,MAAAA,aAAY,CAACA,UAAS;IACxB;AAEA,QAAI;AACF,YAAM,YAAY,MAAM,KAAK,oBAAoB,QAAW,IAAI,IAAIA,WAAU,IAAI,QAAM,GAAG,SAAQ,CAAE,CAAC,GAAGF,QAAO;AAEhH,UAAIA,SAAQ,2BAA2B,OAAO;AAE5C,eAAO,UAAU,KAAK,UAAO;AAC3B,iBAAO,CAACI,SAAQ,QAAQ,KAAK,SAAS;QACxC,CAAC,KAAK;MACR;AAEA,aAAO;IACT,SAAS,KAAK;AACZ,WAAK,IAAI,MAAM,mDAAmD,GAAG;IACvE;AAEA,WAAO;EACT;;;;ACzhBF,mBAAkB;;;ACAlB,IAAM,iBAAiB,OAAO,UAAU;AAExC,IAAM,UAAU,CAAAC,WAAS,eAAe,KAAKA,MAAK,MAAM;AAExD,IAAM,gBAAgB,oBAAI,IAAI;AAAA,EAC7B;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AACD,CAAC;AAEc,SAAR,eAAgC,OAAO;AAC7C,QAAM,UAAU,SACZ,QAAQ,KAAK,KACb,MAAM,SAAS,eACf,OAAO,MAAM,YAAY;AAE7B,MAAI,CAAC,SAAS;AACb,WAAO;AAAA,EACR;AAIA,MAAI,MAAM,YAAY,eAAe;AACpC,WAAO,MAAM,UAAU;AAAA,EACxB;AAEA,SAAO,cAAc,IAAI,MAAM,OAAO;AACvC;;;AD7BO,IAAMC,cAAN,cAAyB,MAAM;AAAA,EACrC,YAAYC,UAAS;AACpB,UAAM;AAEN,QAAIA,oBAAmB,OAAO;AAC7B,WAAK,gBAAgBA;AACrB,OAAC,EAAC,SAAAA,SAAO,IAAIA;AAAA,IACd,OAAO;AACN,WAAK,gBAAgB,IAAI,MAAMA,QAAO;AACtC,WAAK,cAAc,QAAQ,KAAK;AAAA,IACjC;AAEA,SAAK,OAAO;AACZ,SAAK,UAAUA;AAAA,EAChB;AACD;AAEA,IAAM,0BAA0B,CAAC,OAAO,eAAeC,aAAY;AAElE,QAAM,cAAcA,SAAQ,WAAW,gBAAgB;AAEvD,QAAM,gBAAgB;AACtB,QAAM,cAAc;AACpB,SAAO;AACR;AAEA,eAAO,OAA8B,OAAOA,UAAS;AACpD,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACvC,IAAAA,WAAU,EAAC,GAAGA,SAAO;AACrB,IAAAA,SAAQ,oBAAoB,MAAM;AAAA,IAAC;AACnC,IAAAA,SAAQ,gBAAgB,MAAM;AAC9B,IAAAA,SAAQ,YAAY;AAEpB,UAAM,YAAY,aAAAC,QAAM,UAAUD,QAAO;AAEzC,UAAM,eAAe,MAAM;AAC1B,gBAAU,KAAK;AACf,aAAOA,SAAQ,QAAQ,MAAM;AAAA,IAC9B;AAEA,QAAIA,SAAQ,UAAU,CAACA,SAAQ,OAAO,SAAS;AAC9C,MAAAA,SAAQ,OAAO,iBAAiB,SAAS,cAAc,EAAC,MAAM,KAAI,CAAC;AAAA,IACpE;AAEA,UAAM,UAAU,MAAM;AACrB,MAAAA,SAAQ,QAAQ,oBAAoB,SAAS,YAAY;AACzD,gBAAU,KAAK;AAAA,IAChB;AAEA,cAAU,QAAQ,OAAM,kBAAiB;AACxC,UAAI;AACH,cAAM,SAAS,MAAM,MAAM,aAAa;AACxC,gBAAQ;AACR,gBAAQ,MAAM;AAAA,MACf,SAAS,OAAO;AACf,YAAI;AACH,cAAI,EAAE,iBAAiB,QAAQ;AAC9B,kBAAM,IAAI,UAAU,0BAA0B,KAAK,kCAAkC;AAAA,UACtF;AAEA,cAAI,iBAAiBF,aAAY;AAChC,kBAAM,MAAM;AAAA,UACb;AAEA,cAAI,iBAAiB,aAAa,CAAC,eAAe,KAAK,GAAG;AACzD,kBAAM;AAAA,UACP;AAEA,kCAAwB,OAAO,eAAeE,QAAO;AAErD,cAAI,CAAE,MAAMA,SAAQ,YAAY,KAAK,GAAI;AACxC,sBAAU,KAAK;AACf,mBAAO,KAAK;AAAA,UACb;AAEA,gBAAMA,SAAQ,gBAAgB,KAAK;AAEnC,cAAI,CAAC,UAAU,MAAM,KAAK,GAAG;AAC5B,kBAAM,UAAU,UAAU;AAAA,UAC3B;AAAA,QACD,SAAS,YAAY;AACpB,kCAAwB,YAAY,eAAeA,QAAO;AAC1D,kBAAQ;AACR,iBAAO,UAAU;AAAA,QAClB;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AACF;;;AEhEM,IAAO,iBAAP,MAAqB;EACR;EACA;EACT;EACS;EACA;EACA;EACA;EACA;EACA;EAEjB,YAAa,YAAsC,OAA2B,CAAA,GAAE;AAC9E,SAAK,MAAM,WAAW,OAAO,aAAa,wBAAwB;AAClE,SAAK,YAAY,WAAW;AAC5B,SAAK,oBAAoB,WAAW;AACpC,SAAK,QAAQ,IAAI,UAAU;MACzB,aAAa,KAAK,yBAAyB;MAC3C,YAAY;MACZ,SAAS,WAAW;KACrB;AACD,SAAK,UAAU;AACf,SAAK,UAAU,KAAK,WAAW;AAC/B,SAAK,gBAAgB,KAAK;AAC1B,SAAK,gBAAgB,KAAK;AAC1B,SAAK,SAAS,WAAW;AAEzB,eAAW,OAAO,iBAAiB,mBAAmB,CAAC,QAAO;AAC5D,WAAK,eAAe,IAAI,MAAM,EAC3B,MAAM,SAAM;AACX,aAAK,IAAI,MAAM,wCAAwC,IAAI,QAAQ,GAAG;MACxE,CAAC;IACL,CAAC;EACH;EAEQ,MAAM,eAAgBE,SAAc;AAC1C,QAAI,CAAC,KAAK,SAAS;AACjB;IACF;AAEA,UAAM,OAAO,MAAM,KAAK,UAAU,IAAIA,OAAM;AAE5C,QAAI,CAAC,gBAAgB,IAAI,GAAG;AAC1B;IACF;AAEA,QAAI,KAAK,MAAM,IAAIA,OAAM,GAAG;AAC1B;IACF;AAEA,SAAK,MAAM,IAAI,OAAOC,aAAW;AAC/B,YAAM,OAAO,OAAO,YAAW;AAC7B,YAAI,CAAC,KAAK,SAAS;AACjB;QACF;AAEA,YAAI;AACF,gBAAM,KAAK,kBAAkB,eAAeD,SAAQ;YAClD,QAAQC,UAAS;WAClB;QACH,SAAS,KAAK;AACZ,eAAK,IAAI,mDAAmDD,SAAQ,SAAS,KAAK,SAAS,GAAG;AAC9F,gBAAM;QACR;MACF,GAAG;QACD,QAAQC,UAAS;QACjB,SAAS,KAAK;QACd,QAAQ,KAAK;QACb,YAAY,KAAK;OAClB;IACH,GAAG;MACD,QAAAD;KACD,EACE,MAAM,OAAM,QAAM;AACjB,WAAK,IAAI,MAAM,kCAAkCA,SAAQ,GAAG;AAE5D,YAAM,OAAkC,CAAA;AAEvC,OAAC,GAAG,KAAK,KAAK,KAAI,CAAE,EAAE,QAAQ,SAAM;AACnC,YAAI,IAAI,WAAW,UAAU,GAAG;AAC9B,eAAK,GAAG,IAAI;QACd;MACF,CAAC;AAED,YAAM,KAAK,UAAU,MAAMA,SAAQ;QACjC;OACD;AAED,WAAK,OAAO,kBAAkB,0BAA0B;QACtD,QAAQA;OACT;IACH,CAAC,EACA,MAAM,OAAM,QAAM;AACjB,WAAK,IAAI,MAAM,gDAAgDA,SAAQ,GAAG;IAC5E,CAAC;EACL;EAEA,QAAK;AACH,SAAK,UAAU;EACjB;EAEA,MAAM,aAAU;AAEd,SAAK,QAAQ,QAAO,EACjB,KAAK,YAAW;AACf,YAAM,iBAAyB,MAAM,KAAK,UAAU,IAAI;QACtD,SAAS;UACP,CAAC,SAAS,gBAAgB,IAAI;;OAEjC;AAED,YAAM,QAAQ,IACZ,eAAe,IAAI,OAAM,SAAO;AAC9B,cAAM,KAAK,kBAAkB,eAAe,KAAK,EAAE,EAChD,MAAM,SAAM;AACX,eAAK,IAAI,MAAM,GAAG;QACpB,CAAC;MACL,CAAC,CAAC;IAEN,CAAC,EACA,MAAM,SAAM;AACX,WAAK,IAAI,MAAM,GAAG;IACpB,CAAC;EACL;EAEA,OAAI;AACF,SAAK,UAAU;AACf,SAAK,MAAM,MAAK;EAClB;;AAGF,SAAS,gBAAiB,MAAU;AAClC,aAAW,OAAO,KAAK,KAAK,KAAI,GAAI;AAClC,QAAI,IAAI,WAAW,UAAU,GAAG;AAC9B,aAAO;IACT;EACF;AAEA,SAAO;AACT;;;AClJO,IAAM,wBAAwB;AAiKrC,IAAME,kBAAiB;EACrB,gBAAgB;EAChB,4BAA4B;EAC5B,+BAA+B;;AAiB3B,IAAO,2BAAP,MAA+B;EAC3B;EACS;EACA;EACA;EACA;EACT;EACA;EACA;EAEQ;EACA;EACA;EACC;EACA;EACA;EACA;EACA;EACA;EAEjB,YAAa,YAAgD,OAA8B,CAAA,GAAE;AAC3F,SAAK,iBAAiB,KAAK,kBAAkBA,gBAAe;AAE5D,QAAI,KAAK,iBAAiB,GAAG;AAC3B,YAAM,IAAI,uBAAuB,0DAA0D;IAC7F;AAKA,SAAK,cAAc,IAAI,QAAO;AAE9B,SAAK,UAAU;AACf,SAAK,SAAS,WAAW;AACzB,SAAK,YAAY,WAAW;AAC5B,SAAK,UAAU,WAAW;AAC1B,SAAK,SAAS,WAAW;AACzB,SAAK,MAAM,WAAW,OAAO,aAAa,2BAA2B;AAErE,SAAK,YAAY,KAAK,UAAU,KAAK,IAAI;AACzC,SAAK,eAAe,KAAK,aAAa,KAAK,IAAI;AAG/C,SAAK,SAAS,KAAK,SAAS,CAAA,GAAI,IAAI,SAAO,iBAAiB,GAAG,CAAC;AAChE,SAAK,QAAQ,KAAK,QAAQ,CAAA,GAAI,IAAI,SAAO,iBAAiB,GAAG,CAAC;AAE9D,SAAK,6BAA6B;AAClC,SAAK,gCAAgC,KAAK,iCAAiCA,gBAAe;AAC1F,SAAK,6BAA6B;AAGlC,SAAK,+BAA+B,IAAI,YAAY;MAClD,QAAQ,KAAK,8BAA8BA,gBAAe;MAC1D,UAAU;KACX;AAGD,SAAK,mBAAmB,IAAI,iBAAiB;MAC3C,mBAAmB;MACnB,WAAW,WAAW;MACtB,QAAQ,WAAW;MACnB,QAAQ,WAAW;OAClB;MACD,OAAO,KAAK,OAAO,IAAI,OAAK,UAAU,CAAC,CAAC;KACzC;AAED,SAAK,YAAY,IAAI,UAAU,YAAY;MACzC,eAAe,KAAK;MACpB,kBAAkB,KAAK,oBAAoB;MAC3C,oBAAoB,KAAK,sBAAsB;MAC/C,oBAAoB,KAAK,sBAAsB;MAC/C,aAAa,KAAK,eAAe;MACjC,WAAW,KAAK,aAAa;QAC3B,SAAS;;MAEX,aAAa,KAAK;KACnB;AAED,SAAK,iBAAiB,IAAI,eAAe;MACvC,QAAQ,WAAW;MACnB,WAAW,WAAW;MACtB,QAAQ,WAAW;MACnB,mBAAmB;OAClB;MACD,SAAS,KAAK;MACd,eAAe,KAAK;MACpB,eAAe,KAAK;MACpB,uBAAuB,KAAK;KAC7B;EACH;EAES,CAAC,OAAO,WAAW,IAAI;;;;;EAMhC,MAAM,QAAK;AAET,SAAK,SAAS,oBAAoB,yCAAyC;MACzE,WAAW,MAAK;AACd,cAAM,SAAS;UACb,SAAS;UACT,mBAAmB,KAAK;UACxB,UAAU;UACV,oBAAoB,KAAK;;AAG3B,mBAAW,SAAS,KAAK,YAAY,OAAM,GAAI;AAC7C,qBAAW,QAAQ,OAAO;AACxB,mBAAO,KAAK,SAAS;UACvB;QACF;AAEA,eAAO;MACT;KACD;AAGD,SAAK,SAAS,oBAAoB,iCAAiC;MACjE,OAAO;MACP,WAAW,MAAK;AACd,cAAM,SAAiC,CAAA;AAEvC,mBAAW,SAAS,KAAK,YAAY,OAAM,GAAI;AAC7C,qBAAW,QAAQ,OAAO;AACxB,uBAAW,UAAU,KAAK,SAAS;AACjC,oBAAM,MAAM,GAAG,OAAO,SAAS,IAAI,OAAO,YAAY,cAAc;AAEpE,qBAAO,GAAG,KAAK,OAAO,GAAG,KAAK,KAAK;YACrC;UACF;QACF;AAEA,eAAO;MACT;KACD;AAGD,SAAK,SAAS,oBAAoB,6EAA6E;MAC7G,OAAO;MACP,WAAW,MAAK;AACd,cAAM,aAAuC,CAAA;AAE7C,mBAAW,SAAS,KAAK,YAAY,OAAM,GAAI;AAC7C,qBAAW,QAAQ,OAAO;AACxB,kBAAM,UAAkC,CAAA;AAExC,uBAAW,UAAU,KAAK,SAAS;AACjC,oBAAM,MAAM,GAAG,OAAO,SAAS,IAAI,OAAO,YAAY,cAAc;AAEpE,sBAAQ,GAAG,KAAK,QAAQ,GAAG,KAAK,KAAK;YACvC;AAEA,uBAAW,CAAC,UAAU,KAAK,KAAK,OAAO,QAAQ,OAAO,GAAG;AACvD,yBAAW,QAAQ,IAAI,WAAW,QAAQ,KAAK,CAAA;AAC/C,yBAAW,QAAQ,EAAE,KAAK,KAAK;YACjC;UACF;QACF;AAEA,cAAM,SAAiC,CAAA;AAEvC,iBAAS,CAAC,UAAU,MAAM,KAAK,OAAO,QAAQ,UAAU,GAAG;AACzD,mBAAS,OAAO,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAEpC,gBAAM,QAAQ,KAAK,MAAM,OAAO,SAAS,GAAG;AAC5C,iBAAO,QAAQ,IAAI,OAAO,KAAK;QACjC;AAEA,eAAO;MACT;KACD;AAED,SAAK,OAAO,iBAAiB,mBAAmB,KAAK,SAAS;AAC9D,SAAK,OAAO,iBAAiB,oBAAoB,KAAK,YAAY;AAElE,UAAM,MACJ,KAAK,WACL,KAAK,gBACL,KAAK,gBAAgB;AAGvB,SAAK,UAAU;AACf,SAAK,IAAI,SAAS;EACpB;;;;EAKA,MAAM,OAAI;AACR,SAAK,OAAO,oBAAoB,mBAAmB,KAAK,SAAS;AACjE,SAAK,OAAO,oBAAoB,oBAAoB,KAAK,YAAY;AAErE,UAAM,KACJ,KAAK,gBACL,KAAK,WACL,KAAK,gBAAgB;AAIvB,UAAM,QAA8B,CAAA;AACpC,eAAW,kBAAkB,KAAK,YAAY,OAAM,GAAI;AACtD,iBAAW,cAAc,gBAAgB;AACvC,cAAM,MAAM,YAAW;AACrB,cAAI;AACF,kBAAM,WAAW,MAAK;UACxB,SAAS,KAAK;AACZ,iBAAK,IAAI,MAAM,GAAG;UACpB;QACF,GAAE,CAAE;MACN;IACF;AAEA,SAAK,IAAI,0BAA0B,MAAM,MAAM;AAC/C,UAAM,QAAQ,IAAI,KAAK;AACvB,SAAK,YAAY,MAAK;AAEtB,SAAK,IAAI,SAAS;EACpB;EAEA,oBAAiB;AACf,WAAO,KAAK;EACd;EAEA,kBAAmB,gBAAsB;AACvC,QAAI,KAAK,iBAAiB,GAAG;AAC3B,YAAM,IAAI,uBAAuB,0DAA0D;IAC7F;AAEA,QAAI,aAAa;AAEjB,QAAI,iBAAiB,KAAK,gBAAgB;AACxC,mBAAa;IACf;AAEA,SAAK,iBAAiB;AAEtB,QAAI,YAAY;AACd,WAAK,iBAAiB,sBAAqB;IAC7C;EACF;EAEA,UAAW,KAA4B;AACrC,SAAK,KAAK,WAAW,GAAG,EAAE,MAAM,SAAM;AACpC,WAAK,IAAI,MAAM,GAAG;IACpB,CAAC;EACH;;;;EAKA,MAAM,WAAY,KAA4B;AAC5C,UAAM,EAAE,QAAQ,WAAU,IAAK;AAE/B,QAAI,CAAC,KAAK,SAAS;AAEjB,YAAM,WAAW,MAAK;AACtB;IACF;AAEA,QAAI,WAAW,WAAW,QAAQ;AAGhC;IACF;AAEA,UAAMC,UAAS,WAAW;AAC1B,UAAM,YAAY,CAAC,KAAK,YAAY,IAAIA,OAAM;AAC9C,UAAM,cAAc,KAAK,YAAY,IAAIA,OAAM,KAAK,CAAA;AACpD,gBAAY,KAAK,UAAU;AAE3B,SAAK,YAAY,IAAIA,SAAQ,WAAW;AAGxC,QAAIA,QAAO,aAAa,QAAQA,QAAO,SAAS,OAAO;AACrD,YAAM,KAAK,UAAU,MAAMA,SAAQ;QACjC,WAAWA,QAAO;OACnB;IACH;AAEA,QAAI,WAAW;AACb,WAAK,OAAO,kBAAkB,gBAAgB,EAAE,QAAQ,WAAW,WAAU,CAAE;IACjF;EACF;;;;EAKA,aAAc,KAA4B;AACxC,UAAM,EAAE,QAAQ,WAAU,IAAK;AAC/B,UAAMA,UAAS,WAAW;AAC1B,UAAM,YAAY,KAAK,YAAY,IAAIA,OAAM,KAAK,CAAA;AAGlD,UAAM,oBAAoB,UAAU,OAAO,UAAQ,KAAK,OAAO,WAAW,EAAE;AAG5E,SAAK,YAAY,IAAIA,SAAQ,iBAAiB;AAE9C,QAAI,kBAAkB,WAAW,GAAG;AAElC,WAAK,IAAI,mDAAmDA,OAAM;AAClE,WAAK,YAAY,OAAOA,OAAM;AAG9B,WAAK,OAAO,kBAAkB,mBAAmB,EAAE,QAAQ,WAAW,WAAU,CAAE;IACpF;EACF;EAEA,eAAgBA,SAAe;AAC7B,QAAIA,WAAU,MAAM;AAClB,aAAO,KAAK,YAAY,IAAIA,OAAM,KAAK,CAAA;IACzC;AAEA,QAAI,QAAsB,CAAA;AAE1B,eAAW,KAAK,KAAK,YAAY,OAAM,GAAI;AACzC,cAAQ,MAAM,OAAO,CAAC;IACxB;AAEA,WAAO;EACT;EAEA,oBAAiB;AACf,WAAO,KAAK;EACd;EAEA,MAAM,eAAgB,mBAAqDC,WAAiC,CAAA,GAAE;AAC5G,QAAI,CAAC,KAAK,SAAS;AACjB,YAAM,IAAI,gBAAgB,aAAa;IACzC;AAEA,SAAK;AAEL,QAAI;AACF,MAAAA,SAAQ,QAAQ,eAAc;AAE9B,YAAM,EAAE,QAAAD,QAAM,IAAK,eAAe,iBAAiB;AAEnD,UAAI,KAAK,OAAO,OAAOA,OAAM,GAAG;AAC9B,cAAM,IAAI,mBAAmB,mBAAmB;MAClD;AAEA,UAAIA,WAAU,QAAQC,SAAQ,UAAU,MAAM;AAC5C,aAAK,IAAI,WAAWD,OAAM;AAC1B,cAAM,qBAAqB,KAAK,eAAeA,OAAM,EAClD,KAAK,UAAQ,KAAK,UAAU,IAAI;AAEnC,YAAI,sBAAsB,MAAM;AAC9B,eAAK,IAAI,gDAAgDA,OAAM;AAE/D,UAAAC,SAAQ,aAAa,IAAI,oBAAoB,8BAA8B,CAAC;AAC5E,iBAAO;QACT;MACF;AAEA,YAAM,aAAa,MAAM,KAAK,UAAU,KAAK,mBAAmB;QAC9D,GAAGA;QACH,UAAUA,SAAQ,YAAY;OAC/B;AAED,UAAI,WAAW,WAAW,QAAQ;AAChC,cAAM,IAAI,sBAAsB,yCAAyC;MAC3E;AAEA,UAAI,kBAAkB,KAAK,YAAY,IAAI,WAAW,UAAU;AAEhE,UAAI,mBAAmB,MAAM;AAC3B,0BAAkB,CAAA;AAClB,aAAK,YAAY,IAAI,WAAW,YAAY,eAAe;MAC7D;AAKA,UAAI,oBAAoB;AAExB,iBAAW,QAAQ,iBAAiB;AAClC,YAAI,KAAK,OAAO,WAAW,IAAI;AAC7B,8BAAoB;QACtB;AAGA,YAAIA,SAAQ,UAAU,QAAQ,KAAK,OAAO,WAAW,MAAM,KAAK,WAAW,OAAO,WAAW,UAAU,GAAG;AACxG,qBAAW,MAAM,IAAI,sBAAsB,gCAAgC,CAAC;AAG5E,iBAAO;QACT;MACF;AAEA,UAAI,CAAC,mBAAmB;AACtB,wBAAgB,KAAK,UAAU;MACjC;AAEA,aAAO;IACT;AACE,WAAK;IACP;EACF;EAEA,MAAM,iBAAkBD,SAAgBC,WAAwB,CAAA,GAAE;AAChE,UAAM,cAAc,KAAK,YAAY,IAAID,OAAM,KAAK,CAAA;AAEpD,UAAM,QAAQ,IACZ,YAAY,IAAI,OAAM,eAAa;AACjC,UAAI;AACF,cAAM,WAAW,MAAMC,QAAO;MAChC,SAAS,KAAU;AACjB,mBAAW,MAAM,GAAG;MACtB;IACF,CAAC,CAAC;EAEN;EAEA,MAAM,yBAA0B,QAA2B;AAEzD,UAAM,iBAAiB,KAAK,KAAK,KAAK,QAAK;AACzC,aAAO,GAAG,SAAS,OAAO,WAAW,YAAW,EAAG,OAAO;IAC5D,CAAC;AAED,QAAI,gBAAgB;AAClB,WAAK,IAAI,2EAA2E,OAAO,UAAU;AACrG,aAAO;IACT;AAGA,UAAM,kBAAkB,KAAK,MAAM,KAAK,WAAQ;AAC9C,aAAO,MAAM,SAAS,OAAO,WAAW,YAAW,EAAG,OAAO;IAC/D,CAAC;AAED,QAAI,iBAAiB;AACnB,WAAK;AAEL,aAAO;IACT;AAGA,QAAI,KAAK,+BAA+B,KAAK,+BAA+B;AAC1E,WAAK,IAAI,4EAA4E,OAAO,UAAU;AACtG,aAAO;IACT;AAEA,QAAI,OAAO,WAAW,mBAAkB,GAAI;AAC1C,YAAM,OAAO,OAAO,WAAW,YAAW,EAAG;AAE7C,UAAI;AACF,cAAM,KAAK,6BAA6B,QAAQ,MAAM,CAAC;MACzD,QAAQ;AACN,aAAK,IAAI,+EAA+E,OAAO,YAAY,IAAI;AAC/G,eAAO;MACT;IACF;AAEA,QAAI,KAAK,eAAc,EAAG,SAAS,KAAK,gBAAgB;AACtD,WAAK;AAEL,aAAO;IACT;AAEA,SAAK,IAAI,wDAAwD,OAAO,UAAU;AAClF,WAAO;EACT;EAEA,sBAAmB;AACjB,SAAK;EACP;EAEA,eAAY;AACV,UAAM,YAAkD;MACtD,QAAQ;MACR,SAAS;MACT,SAAS;MACT,UAAU;;AAGZ,WAAO,KAAK,UAAU,MAAM,MAAM,IAAI,SAAM;AAC1C,aAAO;QACL,IAAI,IAAI;QACR,QAAQ,UAAU,IAAI,MAAM;QAC5B,QAAQ,IAAI,QAAQ;QACpB,YAAY,CAAC,GAAG,IAAI,QAAQ,UAAU,EAAE,IAAI,QAAM,UAAU,EAAE,CAAC;;IAEnE,CAAC;EACH;EAEA,MAAM,WAAYC,YAAoCD,WAA6B,CAAA,GAAE;AACnF,WAAO,KAAK,UAAU,WAAWC,YAAWD,QAAO;EACrD;;;;AC3qBI,IAAO,gBAAP,MAAoB;EACjB;EACA;EACA;EACA;EACU;EACT;EAER,YAAaE,WAAgB;AAC3B,SAAK,WAAWA;AAChB,SAAK,gBAAgB;AACrB,SAAK,WAAW;AAChB,SAAK,YAAY;AACjB,SAAK,WAAW;EAClB;EAEA,MAAO,GAAW,IAAU;AAC1B,WAAO,IAAK,KAAK,IAAI,EAAE,IAAI,MAAM,KAAK,QAAQ;EAChD;EAEA,KAAMC,QAAe,OAAe,KAAK,IAAG,GAAE;AAC5C,QAAI,KAAK,gBAAgB,MAAM;AAE7B,YAAM,IAAI,KAAK,MAAM,MAAM,KAAK,YAAY;AAC5C,YAAM,OAAOA,SAAQ,KAAK;AAC1B,YAAM,OAAO,IAAI;AACjB,WAAK,gBAAgB,IAAIA,UAAS,IAAI,KAAK,KAAK;AAEhD,WAAK,YAAY,IAAI,MAAM,KAAK,WAAW,OAAO;AAClD,WAAK,YAAY,KAAK,KAAK,KAAK,QAAQ;AAExC,WAAK,WAAW,KAAK,gBAAgB,IAAI;IAC3C,OAAO;AACL,WAAK,gBAAgBA;IACvB;AAEA,SAAK,eAAe;EACtB;;;;ACrCK,IAAM,6BAA6B;AACnC,IAAM,6BAA6B;AACnC,IAAM,sBAAsB;AAC5B,IAAM,sBAAsB;AAC5B,IAAM,mBAAmB;AAsB1B,IAAO,kBAAP,MAAsB;EACT;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEjB,YAAa,OAA4B,CAAA,GAAE;AACzC,UAAM,WAAW,KAAK,YAAY;AAClC,SAAK,UAAU,IAAI,cAAc,QAAQ;AACzC,SAAK,UAAU,IAAI,cAAc,QAAQ;AACzC,SAAK,OAAO,IAAI,cAAc,QAAQ;AACtC,SAAK,oBAAoB,KAAK,qBAAqB;AACnD,SAAK,oBAAoB,KAAK,qBAAqB;AACnD,SAAK,aAAa,KAAK,cAAc;AACrC,SAAK,aAAa,KAAK,cAAc;AAErC,QAAI,KAAK,cAAc,MAAM;AAC3B,WAAK,SAAS,KAAK,SAAS,oBAAoB,KAAK,UAAU;IACjE;EACF;EAEA,iBAAkBC,WAAmC,CAAA,GAAE;AAGrD,QAAI,UAAU,KAAK,MAAM,KAAK,KAAK,iBAAiBA,SAAQ,iBAAiB,KAAK,kBAAkB;AAEpG,QAAI,UAAU,KAAK,YAAY;AAC7B,gBAAU,KAAK;IACjB;AAEA,QAAI,UAAU,KAAK,YAAY;AAC7B,gBAAU,KAAK;IACjB;AAEA,UAAM,cAAc,YAAY,QAAQ,OAAO;AAC/C,UAAM,gBAAgB,UAAU,CAACA,SAAQ,QAAQ,WAAW,CAAC;AAC7D,oBAAgB,UAAU,eAAe,WAAW;AAEpD,kBAAc,QAAQ,KAAK,IAAG;AAC9B,kBAAc,UAAU;AAExB,WAAO;EACT;EAEA,QAAS,QAA6B;AACpC,UAAM,OAAO,KAAK,IAAG,IAAK,OAAO;AAEjC,QAAI,OAAO,SAAS;AAClB,WAAK,QAAQ,KAAK,IAAI;AACtB,WAAK,KAAK,KAAK,OAAO,KAAK,iBAAiB;AAC5C,WAAK,QAAQ,OAAO;QAClB,sBAAsB,KAAK,QAAQ;QACnC,kBAAkB,KAAK,QAAQ;QAC/B,iBAAiB,KAAK,QAAQ;QAC9B,iBAAiB,KAAK,QAAQ;QAC9B,SAAS;OACV;IACH,OAAO;AACL,WAAK,QAAQ,KAAK,IAAI;AACtB,WAAK,KAAK,KAAK,IAAI;AACnB,WAAK,QAAQ,OAAO;QAClB,sBAAsB,KAAK,QAAQ;QACnC,kBAAkB,KAAK,QAAQ;QAC/B,iBAAiB,KAAK,QAAQ;QAC9B,iBAAiB,KAAK,QAAQ;QAC9B,SAAS;OACV;IACH;EACF;;;;ACrGI,IAAOC,sBAAP,cAAkC,MAAK;EAC3C,OAAO;EACP,OAAO;;;;ACiEH,SAAU,WAAmD,QAAgB,MAAqB;AACtG,QAAMC,SAAQ,kBAAiB;AAE/B,SAAO,KAAKA,MAAK,EAAE,MAAM,OAAO,QAAc;AAC5C,UAAMA,OAAM,IAAI,GAAG;EACrB,CAAC;AAED,SAAO,OAAO,OAAOC,YAAe;AAClC,qBAAiB,OAAOA,SAAQ;AAC9B,YAAMD,OAAM,KAAK,GAAG;IACtB;AAEA,UAAMA,OAAM,IAAG;EACjB;AAEA,MAAI,SAA8B,OAAO;AAEzC,MAAI,OAAO,OAAO,OAAO,QAAQ,KAAK,MAAM;AAC1C,aAAS,OAAO,OAAO,OAAO,QAAQ,EAAC;EACzC,WAAW,OAAO,OAAO,OAAO,aAAa,KAAK,MAAM;AACtD,aAAS,OAAO,OAAO,OAAO,aAAa,EAAC;EAC9C;AAEA,QAAM,aAAa,IAAI,eAAc;AAErC,QAAM,IAAwB;IAC5B,MAAM,OAAOE,aAAyB;AACpC,MAAAA,UAAS,QAAQ,eAAc;AAE/B,UAAIA,UAAS,SAAS,MAAM;AAE1B,cAAM,EAAE,MAAM,OAAAC,OAAK,IAAK,MAAM,WAAW,OAAO,KAAI,GAAID,UAAS,MAAM;AAEvE,YAAI,SAAS,MAAM;AACjB,iBAAO;QACT;AAEA,eAAOC;MACT;AAEA,aAAO,WAAW,aAAaD,SAAQ,OAAO;AAC5C,cAAM,EAAE,OAAAC,QAAO,KAAI,IAAK,MAAM,WAAW,OAAO,KAAI,GAAID,UAAS,MAAM;AAEvE,YAAI,SAAS,MAAM;AACjB,gBAAM,IAAIE,oBAAmB,yBAAyB;QACxD;AAEA,mBAAW,OAAOD,MAAK;MACzB;AAEA,YAAM,MAAM,WAAW,QAAQ,GAAGD,SAAQ,KAAK;AAC/C,iBAAW,QAAQA,SAAQ,KAAK;AAEhC,aAAO;IACT;IACA,OAAO,OAAO,MAAMA,aAA0B;AAC5C,MAAAA,UAAS,QAAQ,eAAc;AAG/B,UAAI,gBAAgB,YAAY;AAC9B,cAAMF,OAAM,KAAK,MAAME,QAAO;MAChC,OAAO;AACL,cAAMF,OAAM,KAAK,KAAK,SAAQ,GAAIE,QAAO;MAC3C;IACF;IACA,QAAQ,MAAK;AACX,UAAI,WAAW,aAAa,GAAG;AAC7B,cAAM,iBAAiB,OAAO;AAC9B,eAAO,SAAU,mBAAgB;AAC/B,cAAI,MAAM,eAAe,OAAO;AAC9B,kBAAM;UACR,OAAO;AACL,mBAAQ;UACV;AAEA,iBAAQ;QACV,EAAC;MACH;AAEA,aAAO;IACT;;AAGF,SAAO;AACT;;;ACjJA,IAAM,2BAA2B;AACjC,IAAM,mBAAmB;AACzB,IAAM,gBAAgB;AACtB,IAAM,kBAAkB;AACxB,IAAM,cAAc;AACpB,IAAM,2CAA2C;AA+C3C,IAAO,oBAAP,MAAwB;EACX;EACA;EACA;EACT;EACS;EACT;EACS;EACA;EAEjB,YAAa,YAAyC,OAA8B,CAAA,GAAE;AACpF,SAAK,aAAa;AAClB,SAAK,WAAW,IAAI,KAAK,kBAAkB,eAAe,IAAI,aAAa,IAAI,gBAAgB;AAE/F,SAAK,MAAM,WAAW,OAAO,aAAa,2BAA2B;AACrE,SAAK,iBAAiB,KAAK,gBAAgB;AAC3C,SAAK,+BAA+B,KAAK,gCAAgC;AACzE,SAAK,UAAU,IAAI,gBAAgB;MACjC,GAAI,KAAK,eAAe,CAAA;MACxB,SAAS,WAAW;MACpB,YAAY;KACb;EACH;EAES,CAAC,OAAO,WAAW,IAAI;EAEvB,CAAC,mBAAmB,IAAc;IACzC;;EAGF,QAAK;AACH,SAAK,kBAAkB,IAAI,gBAAe;AAC1C,oBAAgB,UAAU,KAAK,gBAAgB,MAAM;AAErD,SAAK,oBAAoB,YAAY,MAAK;AACxC,WAAK,WAAW,kBAAkB,eAAc,EAAG,QAAQ,UAAO;AAChE,gBAAQ,QAAO,EAAG,KAAK,YAAW;AAChC,cAAIG,SAAQ,KAAK,IAAG;AACpB,cAAI;AACF,kBAAM,SAAS,KAAK,QAAQ,iBAAiB;cAC3C,QAAQ,KAAK,iBAAiB;aAC/B;AACD,kBAAM,SAAS,MAAM,KAAK,UAAU,KAAK,UAAU;cACjD;cACA,wBAAwB;aACzB;AACD,kBAAM,KAAK,WAAW,MAAM;AAC5B,YAAAA,SAAQ,KAAK,IAAG;AAEhB,kBAAM,QAAQ,IAAI;cAChB,GAAG,MAAM,YAAY,WAAW,GAAG;gBACjC;eACD;cACD,GAAG,KAAK;gBACN,OAAO;gBACP;eACD;aACF;AAED,iBAAK,MAAM,KAAK,IAAG,IAAKA;AAExB,kBAAM,GAAG,OAAM,EAAG,MAAM;cACtB;aACD;UACH,SAAS,KAAU;AACjB,gBAAI,IAAI,SAAS,4BAA4B;AAC3C,oBAAM;YACR;AAMA,iBAAK,OAAO,KAAK,IAAG,IAAKA,UAAS;UACpC;QACF,CAAC,EACE,MAAM,SAAM;AACX,eAAK,IAAI,MAAM,0BAA0B,GAAG;AAE5C,cAAI,KAAK,8BAA8B;AACrC,iBAAK,IAAI,MAAM,yCAAyC;AACxD,iBAAK,MAAM,GAAG;UAChB,OAAO;AACL,iBAAK,IAAI,mFAAmF;UAC9F;QACF,CAAC;MACL,CAAC;IACH,GAAG,KAAK,cAAc;EACxB;EAEA,OAAI;AACF,SAAK,iBAAiB,MAAK;AAE3B,QAAI,KAAK,qBAAqB,MAAM;AAClC,oBAAc,KAAK,iBAAiB;IACtC;EACF;;;;AC1II,IAAO,yBAAP,MAA6B;EAChB;EACT;EACS;EAEjB,YAAa,YAA8C,MAAgC;AACzF,SAAK,UAAU,KAAK,WAAW,CAAA;AAC/B,SAAK,UAAU;AACf,SAAK,aAAa;AAElB,SAAK,gBAAgB,WAAW,SAAS,cAAc,uCAAuC,KAAK,cAAc,KAAK,IAAI,GAAG;MAC3H,cAAc;MACd,uBAAuB,CAAC,CAAC,GAAG,GAAG,UAAS;AACtC,eAAO;UACL,GAAG;UACH,KAAK,IAAI,SAAQ;;MAErB;MACA,+BAA+B,CAACC,QAAO,UAAmC;AACxE,eAAO;UACL,GAAG;UACH,WAAW,CAAC,GAAI,MAAM,QAAQ,MAAM,SAAS,IAAI,MAAM,YAAY,CAAA,GAAKA,OAAM,GAAG,SAAQ,CAAE;;MAE/F;KACD,KAAK,KAAK;AACX,SAAK,UAAU,WAAW,SAAS,cAAc,iCAAiC,KAAK,QAAQ,KAAK,IAAI,GAAG;MACzG,cAAc;MACd,uBAAuB,CAAC,CAAC,GAAG,GAAG,UAAS;AACtC,eAAO;UACL,GAAG;UACH,KAAK,IAAI,SAAQ;;MAErB;KACD,KAAK,KAAK;AACX,SAAK,kBAAkB,WAAW,SAAS,cAAc,yCAAyC,KAAK,gBAAgB,KAAK,IAAI,GAAG;MACjI,cAAc;MACd,uBAAuB,CAAC,CAAC,GAAG,GAAG,UAAS;AACtC,eAAO;UACL,GAAG;UACH,KAAK,IAAI,SAAQ;;MAErB;KACD,KAAK,KAAK;AACX,SAAK,MAAM,WAAW,SAAS,cAAc,6BAA6B,KAAK,IAAI,KAAK,IAAI,GAAG;MAC7F,cAAc;MACd,uBAAuB,CAAC,CAAC,GAAG,MAAK;AAC/B,eAAO;UACL,KAAK,SAAmB,KAAK,QAAQ;;MAEzC;KACD,KAAK,KAAK;AACX,SAAK,MAAM,WAAW,SAAS,cAAc,6BAA6B,KAAK,IAAI,KAAK,IAAI,GAAG;MAC7F,cAAc;MACd,uBAAuB,CAAC,CAAC,GAAG,MAAK;AAC/B,eAAO;UACL,KAAK,SAAmB,KAAK,QAAQ;;MAEzC;KACD,KAAK,KAAK;EACb;EAES,CAAC,OAAO,WAAW,IAAI;EAEhC,YAAS;AACP,WAAO,KAAK;EACd;EAEA,MAAM,QAAK;AACT,SAAK,UAAU;EACjB;EAEA,MAAM,OAAI;AACR,SAAK,UAAU;EACjB;;;;EAKA,OAAQ,cAAe,KAAUC,WAA0B,CAAA,GAAE;AAC3D,QAAI,KAAK,QAAQ,WAAW,GAAG;AAC7B,YAAM,IAAI,sBAAsB,8BAA8B;IAChE;AAEA,UAAMC,QAAO;AACb,UAAM,OAAO,IAAI,QAAO;AAExB,qBAAiB,QAAQC,aACvB,GAAGD,MAAK,QACL,OAAO,YAAU,OAAO,yBAAyB,QAAQ,EACzD,IAAI,YAAU,OAAO,cAAc,KAAKD,QAAO,CAAC,CAAC,GACnD;AAGD,UAAI,QAAQ,MAAM;AAChB;MACF;AAGA,UAAI,KAAK,WAAW,SAAS,GAAG;AAC9B,cAAM,KAAK,WAAW,UAAU,MAAM,KAAK,IAAI;UAC7C,YAAY,KAAK;WAChBA,QAAO;MACZ;AAGA,UAAI,KAAK,IAAI,KAAK,EAAE,GAAG;AACrB;MACF;AAEA,WAAK,IAAI,KAAK,EAAE;AAEhB,YAAM;IACR;EACF;;;;;EAMA,MAAM,QAAS,KAAUA,WAAwB,CAAA,GAAE;AACjD,QAAI,KAAK,QAAQ,WAAW,GAAG;AAC7B,YAAM,IAAI,sBAAsB,8BAA8B;IAChE;AAEA,UAAM,QAAQ,IACZ,KAAK,QACF,OAAO,YAAU,OAAO,mBAAmB,QAAQ,EACnD,IAAI,OAAO,WAAU;AACpB,YAAM,OAAO,QAAQ,KAAKA,QAAO;IACnC,CAAC,CAAC;EACR;EAEA,MAAM,gBAAiB,KAAUA,WAAwB,CAAA,GAAE;AACzD,QAAI,KAAK,QAAQ,WAAW,GAAG;AAC7B,YAAM,IAAI,sBAAsB,8BAA8B;IAChE;AAEA,UAAM,QAAQ,IACZ,KAAK,QACF,OAAO,YAAU,OAAO,2BAA2B,QAAQ,EAC3D,IAAI,OAAO,WAAU;AACpB,YAAM,OAAO,gBAAgB,KAAKA,QAAO;IAC3C,CAAC,CAAC;EAER;;;;EAKA,MAAM,IAAK,KAAiBD,QAAmBC,UAAsB;AACnE,QAAI,CAAC,KAAK,UAAS,GAAI;AACrB,YAAM,IAAI,gBAAe;IAC3B;AAEA,UAAM,QAAQ,IACZ,KAAK,QACF,OAAO,YAAU,OAAO,eAAe,QAAQ,EAC/C,IAAI,OAAO,WAAU;AACpB,YAAM,OAAO,IAAI,KAAKD,QAAOC,QAAO;IACtC,CAAC,CAAC;EAER;;;;;EAMA,MAAM,IAAK,KAAiBA,UAAsB;AAChD,QAAI,CAAC,KAAK,UAAS,GAAI;AACrB,YAAM,IAAI,gBAAe;IAC3B;AAEA,WAAO,QAAQ,IACb,KAAK,QACF,OAAO,YAAU,OAAO,eAAe,QAAQ,EAC/C,IAAI,OAAO,WAAU;AACpB,aAAO,OAAO,IAAI,KAAKA,QAAO;IAChC,CAAC,CAAC;EAER;;;;AClLI,IAAO,qBAAP,MAAyB;EACZ;EACA;EACA;EACA;EAEjB,YAAa,YAA0C,OAAwB,CAAA,GAAE;AAC/E,SAAK,MAAM,WAAW,OAAO,aAAa,qBAAqB;AAC/D,SAAK,SAAS,WAAW;AACzB,SAAK,YAAY,WAAW;AAC5B,SAAK,UAAU,KAAK,WAAW,CAAA;AAE/B,SAAK,WAAW,WAAW,SAAS,cAAc,+BAA+B,KAAK,SAAS,KAAK,IAAI,GAAG;MACzG,cAAc;MACd,uBAAuB,CAAC,CAAC,IAAI,GAAG,UAAS;AACvC,eAAO;UACL,GAAG;UACH,MAAM,KAAK,SAAQ;;MAEvB;KACD,KAAK,KAAK;AACX,SAAK,kBAAkB,WAAW,SAAS,cAAc,sCAAsC,KAAK,gBAAgB,KAAK,IAAI,GAAG;MAC9H,cAAc;MACd,uBAAuB,CAAC,CAAC,GAAG,GAAG,UAAS;AACtC,eAAO;UACL,GAAG;UACH,KAAK,SAAmB,KAAK,QAAQ;;MAEzC;MACA,+BAA+B,CAACG,QAAO,UAA+B;AACpE,eAAO;UACL,GAAG;UACH,OAAO,CAAC,GAAI,MAAM,QAAQ,MAAM,KAAK,IAAI,MAAM,QAAQ,CAAA,GAAKA,OAAM,GAAG,SAAQ,CAAE;;MAEnF;KACD,KAAK,KAAK;EACb;EAES,CAAC,OAAO,WAAW,IAAI;;;;EAKhC,MAAM,SAAU,IAAYC,UAAwB;AAClD,QAAI,KAAK,QAAQ,WAAW,GAAG;AAC7B,YAAM,IAAI,mBAAmB,2BAA2B;IAC1D;AAEA,QAAI,GAAG,SAAQ,MAAO,KAAK,OAAO,SAAQ,GAAI;AAC5C,YAAM,IAAI,oBAAoB,6BAA6B;IAC7D;AAEA,UAAMC,QAAO;AACb,UAAM,SAASC,aACb,GAAG,KAAK,QACL,OAAO,YAAU,OAAO,oBAAoB,QAAQ,EACpD,IAAI,YAAW,mBAAgB;AAC9B,UAAI;AACF,cAAM,MAAM,OAAO,SAAS,IAAIF,QAAO;MACzC,SAAS,KAAK;AACZ,QAAAC,MAAK,IAAI,MAAM,GAAG;MACpB;IACF,EAAE,CAAE,CAAC;AAGT,qBAAiB,QAAQ,QAAQ;AAC/B,UAAI,QAAQ,MAAM;AAChB;MACF;AAGA,UAAI,KAAK,WAAW,SAAS,GAAG;AAC9B,cAAM,KAAK,UAAU,MAAM,KAAK,IAAI;UAClC,YAAY,KAAK;WAChBD,QAAO;MACZ;AAEA,aAAO;IACT;AAEA,UAAM,IAAI,cAAa;EACzB;;;;EAKA,OAAQ,gBAAiB,KAAiBA,WAA0B,CAAA,GAAE;AACpE,QAAI,KAAK,QAAQ,WAAW,GAAG;AAC7B,YAAM,IAAI,mBAAmB,2BAA2B;IAC1D;AAEA,UAAMC,QAAO;AACb,UAAM,OAAO,2BAA2B,IAAI;AAE5C,qBAAiB,QAAQ,SACvB,mBAAgB;AACd,YAAM,SAASC,aACb,GAAGD,MAAK,QACL,OAAO,YAAU,OAAO,2BAA2B,QAAQ,EAC3D,IAAI,YAAU,OAAO,gBAAgB,KAAKD,QAAO,CAAC,CAAC;AAGxD,qBAAeG,SAAQ,QAAQ;AAC7B,cAAM,YAAW;AAEf,cAAIA,MAAK,WAAW,WAAW,GAAG;AAChC,gBAAI;AACF,cAAAA,QAAO,MAAMF,MAAK,SAASE,MAAK,IAAI;gBAClC,GAAGH;gBACH,UAAU;eACX;YACH,SAAS,KAAK;AACZ,cAAAC,MAAK,IAAI,MAAM,kCAAkC,GAAG;AACpD;YACF;UACF;AAEA,iBAAOE;QACT;MACF;IACF,EAAC,CAAE,GACF;AACD,UAAI,QAAQ,MAAM;AAChB;MACF;AAGA,UAAI,KAAK,WAAW,SAAS,GAAG;AAC9B,cAAM,KAAK,UAAU,MAAM,KAAK,IAAI;UAClC,YAAY,KAAK;WAChBH,QAAO;MACZ;AAGA,UAAI,KAAK,IAAI,KAAK,GAAG,YAAW,EAAG,KAAK,GAAG;AACzC;MACF;AAEA,WAAK,IAAI,KAAK,GAAG,YAAW,EAAG,KAAK;AAEpC,YAAM;IACR;EACF;;;;AC9II,IAAO,aAAP,cAA0B,kBAAmC;EAChD;EACA;EACT;EACA;EACA;EACA;EACA;EAER,YAAa,YAAgC;AAC3C,UAAK;AAEL,SAAK,MAAM,WAAW,OAAO,aAAa,oBAAoB;AAC9D,SAAK,cAAc,WAAW;AAC9B,SAAK,UAAU;AACf,SAAK,UAAU;AAGf,SAAK,qBAAqB,IAAI,gBAAe;AAC7C,oBAAgB,UAAU,KAAK,mBAAmB,MAAM;EAC1D;EAES,CAAC,OAAO,WAAW,IAAI;EAEhC,QAAK;AACH,SAAK,qBAAqB,IAAI,gBAAe;AAC7C,oBAAgB,UAAU,KAAK,mBAAmB,MAAM;EAC1D;EAEA,OAAI;AACF,SAAK,mBAAmB,MAAK;EAC/B;EAEA,OAAQ,KAAMI,UAAsB;AAClC,QAAI,CAAC,KAAK,SAAS;AAEjB,WAAK,UAAS;IAChB;AAEA,SAAK;AACL,UAAM,SAAS,UAAU,CAAC,KAAK,mBAAmB,QAAQA,UAAS,MAAM,CAAC;AAC1E,oBAAgB,UAAU,MAAM;AAEhC,QAAI;AACF,aAAO,MAAM;AAEX,aAAK,UAAU,QAAO;AACtB,aAAK,WAAW,OAAM;AAGtB,cAAM,QAAQ,MAAM,UAAiC,MAAM,aAAa,QAAQ;UAC9E,YAAY;SACb;AAED,cAAM,MAAM;MACd;IACF;AACE,aAAO,MAAK;AACZ,WAAK;AAGL,UAAI,KAAK,YAAY,GAAG;AACtB,aAAK,gBAAgB,MAAK;AAC1B,aAAK,iBAAiB;MACxB;IACF;EACF;EAEQ,YAAS;AACf,SAAK,UAAU;AAIf,SAAK,iBAAiB,IAAI,gBAAe;AACzC,oBAAgB,UAAU,KAAK,eAAe,MAAM;AAEpD,UAAM,SAAS,UAAU,CAAC,KAAK,eAAe,QAAQ,KAAK,mBAAmB,MAAM,CAAC;AACrF,oBAAgB,UAAU,MAAM;AAEhC,UAAMC,SAAQ,KAAK,IAAG;AACtB,QAAI,QAAQ;AAEZ,YAAQ,QAAO,EAAG,KAAK,YAAW;AAChC,WAAK,IAAI,YAAY;AAGrB,aAAO,KAAK,UAAU,GAAG;AACvB,YAAI;AACF,gBAAM,OAAO,YAAY,EAAE;AAC3B,cAAI,IAAI,KAAK,IAAG;AAEhB,2BAAiB,QAAQ,KAAK,YAAY,gBAAgB,MAAM,EAAE,OAAM,CAAE,GAAG;AAC3E,gBAAI,OAAO,SAAS;AAClB,mBAAK,IAAI,eAAe;YAC1B;AAEA,mBAAO,eAAc;AAErB,iBAAK,IAAI,2CAA2C,KAAK,IAAI,KAAK,IAAG,IAAK,GAAG,KAAK,OAAO;AACzF;AACA,iBAAK,kBAAkB,aAAa;cAClC,QAAQ;aACT;AAID,gBAAI,KAAK,YAAY,KAAK,KAAK,YAAY,MAAM;AAC/C,mBAAK,IAAI,oBAAoB;AAC7B,oBAAM,WAAW,KAAK,SAAS,SAAS,MAAM;YAChD;AAEA,gBAAI,KAAK,IAAG;UACd;AAEA,eAAK,IAAI,iEAAiE,MAAM,KAAK,SAAS,KAAK;QACrG,SAAS,KAAK;AACZ,eAAK,IAAI,MAAM,uBAAuB,GAAG;AAEzC,eAAK,kBAAkB,cAAc;YACnC,QAAQ;WACT;QACH;MACF;AAEA,WAAK,IAAI,6BAA6B;IACxC,CAAC,EACE,MAAM,SAAM;AACX,WAAK,IAAI,MAAM,uBAAuB,GAAG;IAC3C,CAAC,EACA,QAAQ,MAAK;AACZ,WAAK,IAAI,4CAA4C,OAAO,KAAK,IAAG,IAAKA,MAAK;AAC9E,WAAK,UAAU;IACjB,CAAC;EACL;;;;AChJK,IAAMC,+BAA8B;AACpC,IAAMC,gCAA+B;AAatC,IAAO,YAAP,MAAgB;EACH;EACA;EACA;EACA;EAEjB,YAAa,YAA+B;AAC1C,SAAK,aAAa;AAClB,SAAK,MAAM,WAAW,OAAO,aAAa,kBAAkB;AAC5D,SAAK,aAAa,oBAAI,IAAG;AACzB,eAAW,SAAS,oBAAoB,+BAA+B;MACrE,WAAW,MAAK;AACd,cAAM,SAAiC,CAAA;AAEvC,mBAAW,CAAC,KAAKC,MAAK,KAAK,KAAK,YAAY;AAC1C,iBAAO,GAAG,IAAIA,OAAM;QACtB;AAEA,eAAO;MACT;KACD;AACD,SAAK,WAAW,WAAW;MACzB,MAAM;MACN,SAAS,WAAW;KACrB;AAED,SAAK,gBAAgB,KAAK,cAAc,KAAK,IAAI;AACjD,SAAK,gBAAgB,KAAK,cAAc,KAAK,IAAI;AACjD,SAAK,kBAAkB,KAAK,gBAAgB,KAAK,IAAI;AAErD,SAAK,WAAW,OAAO,iBAAiB,mBAAmB,KAAK,aAAa;AAC7E,SAAK,WAAW,OAAO,iBAAiB,eAAe,KAAK,aAAa;AACzE,SAAK,WAAW,OAAO,iBAAiB,iBAAiB,KAAK,eAAe;EAC/E;EAES,CAAC,OAAO,WAAW,IAAI;EAEhC,eAAY;AACV,WAAO,MAAM,KAAK,oBAAI,IAAY;MAChC,GAAG,KAAK,SAAS,KAAI;KACtB,CAAC,EAAE,KAAI;EACV;EAEA,WAAY,UAAgB;AAC1B,UAAM,UAAU,KAAK,SAAS,IAAI,QAAQ;AAE1C,QAAI,WAAW,MAAM;AACnB,YAAM,IAAa,uBAAuB,sCAAsC,QAAQ,EAAE;IAC5F;AAEA,WAAO;EACT;EAEA,cAAe,UAAgB;AAC7B,UAAM,aAAa,KAAK,WAAW,IAAI,QAAQ;AAE/C,QAAI,cAAc,MAAM;AACtB,aAAO,CAAA;IACT;AAEA,WAAO;MACL,GAAG,WAAW,OAAM;;EAExB;;;;EAKA,MAAM,OAAQ,UAAkB,SAAwB,MAA2B;AACjF,QAAI,KAAK,SAAS,IAAI,QAAQ,KAAK,MAAM,UAAU,MAAM;AACvD,YAAM,IAAa,8BAA8B,2CAA2C,QAAQ,EAAE;IACxG;AAEA,UAAMC,WAAU,aAAa,KAAK,EAAE,iBAAiB,KAAI,CAAE,EAAE;MAC3D,mBAAmBH;MACnB,oBAAoBC;OACnB,IAAI;AAEP,SAAK,SAAS,IAAI,UAAU;MAC1B;MACA,SAAAE;KACD;AAGD,UAAM,KAAK,WAAW,UAAU,MAAM,KAAK,WAAW,QAAQ;MAC5D,WAAW,CAAC,QAAQ;OACnB,IAAI;EACT;;;;;EAMA,MAAM,SAAUC,YAA8BD,UAAsB;AAClE,UAAM,eAAe,MAAM,QAAQC,UAAS,IAAIA,aAAY,CAACA,UAAS;AAEtE,iBAAa,QAAQ,cAAW;AAC9B,WAAK,SAAS,OAAO,QAAQ;IAC/B,CAAC;AAGD,UAAM,KAAK,WAAW,UAAU,MAAM,KAAK,WAAW,QAAQ;MAC5D,WAAW,KAAK,aAAY;OAC3BD,QAAO;EACZ;;;;EAKA,MAAM,SAAU,UAAkB,UAAkB;AAClD,QAAI,YAAY,MAAM;AACpB,YAAM,IAAI,uBAAuB,kBAAkB;IACrD;AAGA,UAAM,KAAK,IAAI,KAAK,OAAM,IAAK,KAAK,SAAS,EAAE,CAAC,GAAG,KAAK,IAAG,CAAE;AAE7D,QAAI,aAAa,KAAK,WAAW,IAAI,QAAQ;AAE7C,QAAI,cAAc,MAAM;AACtB,mBAAa,oBAAI,IAAG;AACpB,WAAK,WAAW,IAAI,UAAU,UAAU;IAC1C;AAEA,eAAW,IAAI,IAAI,QAAQ;AAE3B,WAAO;EACT;;;;EAKA,WAAY,IAAU;AACpB,eAAW,CAAC,UAAU,UAAU,KAAK,KAAK,WAAW,QAAO,GAAI;AAC9D,UAAI,WAAW,IAAI,EAAE,GAAG;AACtB,mBAAW,OAAO,EAAE;AAEpB,YAAI,WAAW,SAAS,GAAG;AACzB,eAAK,WAAW,OAAO,QAAQ;QACjC;MACF;IACF;EACF;;;;EAKA,cAAe,KAAwB;AACrC,UAAM,aAAa,IAAI;AACvB,UAAMA,WAAU;MACd,QAAQ,YAAY,QAAQ,GAAK;;AAGnC,SAAK,KAAK,WAAW,UAAU,IAAI,YAAYA,QAAO,EACnD,KAAK,UAAO;AACX,iBAAW,YAAY,KAAK,WAAW;AACrC,cAAM,aAAa,KAAK,WAAW,IAAI,QAAQ;AAE/C,YAAI,cAAc,MAAM;AAEtB;QACF;AAEA,mBAAW,YAAY,WAAW,OAAM,GAAI;AAC1C,cAAI,SAAS,QAAQ,IAAI,UAAU,MAAM,OAAO;AAC9C;UACF;AAEA,mBAAS,QAAQ,OAAO,UAAU;AAClC,mBAAS,eAAe,UAAU;QACpC;MACF;IACF,CAAC,EACA,MAAM,SAAM;AACX,UAAI,IAAI,SAAS,iBAAiB;AAEhC;MACF;AAEA,WAAK,IAAI,MAAM,wDAAwD,YAAY,GAAG;IACxF,CAAC;EACL;;;;;EAMA,cAAe,KAA4B;AACzC,UAAM,EAAE,MAAM,SAAQ,IAAK,IAAI;AAC/B,UAAM,WAAW,UAAU,aAAa,CAAA,GAAI,OAAO,cAAY,CAAC,KAAK,UAAU,SAAS,QAAQ,CAAC;AAEjG,eAAW,YAAY,SAAS;AAC9B,YAAM,aAAa,KAAK,WAAW,IAAI,QAAQ;AAE/C,UAAI,cAAc,MAAM;AAEtB;MACF;AAEA,iBAAW,YAAY,WAAW,OAAM,GAAI;AAC1C,YAAI,SAAS,QAAQ,IAAI,KAAK,EAAE,MAAM,OAAO;AAC3C;QACF;AAEA,iBAAS,QAAQ,OAAO,KAAK,EAAE;AAC/B,iBAAS,eAAe,KAAK,EAAE;MACjC;IACF;EACF;;;;;EAMA,gBAAiB,KAAgC;AAC/C,UAAMC,aAAY,IAAI,OAAO;AAC7B,UAAM,aAAa,IAAI,OAAO;AAC9B,UAAMC,UAAS,IAAI,OAAO;AAE1B,eAAW,YAAYD,YAAW;AAChC,YAAM,aAAa,KAAK,WAAW,IAAI,QAAQ;AAE/C,UAAI,cAAc,MAAM;AAEtB;MACF;AAEA,iBAAW,YAAY,WAAW,OAAM,GAAI;AAC1C,YAAI,WAAW,UAAU,QAAQ,SAAS,8BAA8B,MAAM;AAC5E;QACF;AAEA,YAAI,SAAS,QAAQ,IAAIC,OAAM,MAAM,MAAM;AACzC;QACF;AAEA,iBAAS,QAAQ,IAAIA,OAAM;AAC3B,iBAAS,YAAYA,SAAQ,UAAU;MACzC;IACF;EACF;;;;ACtOI,IAAO,0BAAP,MAA8B;EACjB;EACA;EACA;EACA;EACA;EACT;EAER,YAAa,YAA+C,OAA6B,CAAA,GAAE;AACzF,SAAK,MAAM,WAAW,OAAO,aAAa,mBAAmB;AAC7D,SAAK,aAAa;AAClB,SAAK,UAAU;AACf,SAAK,aAAa,WAAW;MAC3B,MAAM;MACN,SAAS,KAAK,WAAW;KAC1B;AACD,SAAK,YAAY,WAAW;MAC1B,MAAM;MACN,SAAS,KAAK,WAAW;KAC1B;AACD,SAAK,iBAAiB,KAAK,kBAAkB,eAAe;EAC9D;EAES,CAAC,OAAO,WAAW,IAAI;;;;EAKhC,IAAK,WAAoB;AACvB,UAAM,MAAM,UAAU,OAAO,WAAW;AAExC,QAAI,OAAO,MAAM;AACf,YAAM,IAAI,uBAAuB,iCAAiC;IACpE;AAEA,QAAI,KAAK,WAAW,IAAI,GAAG,GAAG;AAC5B,YAAM,IAAI,uBAAuB,6CAA6C,GAAG,EAAE;IACrF;AAEA,SAAK,IAAI,uBAAuB,GAAG;AAEnC,SAAK,WAAW,IAAI,KAAK,SAAS;AAElC,QAAI,CAAC,KAAK,UAAU,IAAI,GAAG,GAAG;AAC5B,WAAK,UAAU,IAAI,KAAK,CAAA,CAAE;IAC5B;EACF;EAEA,YAAS;AACP,WAAO,KAAK;EACd;EAEA,QAAK;AACH,SAAK,UAAU;EACjB;EAEA,MAAM,aAAU;AAEd,UAAM,QAAQ,KAAK,WAAW,eAAe,eAAc;AAE3D,UAAM,KAAK,OAAO,KAAK;EACzB;;;;EAKA,MAAM,OAAI;AACR,UAAM,QAAQ,CAAA;AACd,eAAW,CAAC,KAAK,SAAS,KAAK,KAAK,WAAW;AAC7C,WAAK,IAAI,4BAA4B,GAAG;AACxC,aAAO,UAAU,SAAS,GAAG;AAC3B,cAAM,WAAW,UAAU,IAAG;AAE9B,YAAI,YAAY,MAAM;AACpB;QACF;AAEA,cAAM,KAAK,SAAS,MAAK,CAAE;MAC7B;IACF;AAEA,UAAM,QAAQ,IAAI,KAAK;AACvB,SAAK,IAAI,sBAAsB;AAC/B,eAAW,OAAO,KAAK,UAAU,KAAI,GAAI;AACvC,WAAK,UAAU,IAAI,KAAK,CAAA,CAAE;IAC5B;AAEA,SAAK,UAAU;EACjB;;;;EAKA,MAAM,KAAM,IAAeC,UAAqC;AAC9D,UAAM,YAAY,KAAK,0BAA0B,EAAE;AAEnD,QAAI,aAAa,MAAM;AACrB,YAAM,IAAI,0BAA0B,sCAAsC,OAAO,EAAE,CAAC,EAAE;IACxF;AAEA,IAAAA,UAAS,aAAa,IAAI,oBAA4B,wCAAwC,UAAU,OAAO,WAAW,CAAC,CAAC;AAK5H,WAAO,UAAU,KAAK,IAAI;MACxB,GAAGA;MACH,UAAU,KAAK,WAAW;KAC3B;EACH;;;;EAKA,WAAQ;AACN,QAAI,QAAqB,CAAA;AACzB,eAAW,aAAa,KAAK,UAAU,OAAM,GAAI;AAC/C,iBAAW,YAAY,WAAW;AAChC,gBAAQ,CAAC,GAAG,OAAO,GAAG,SAAS,SAAQ,CAAE;MAC3C;IACF;AACA,WAAO;EACT;;;;EAKA,gBAAa;AACX,WAAO,MAAM,GAAG,GAAG,KAAK,WAAW,OAAM,CAAE;EAC7C;;;;EAKA,eAAY;AACV,WAAO,MAAM,GAAG,GAAG,KAAK,UAAU,OAAM,CAAE,EAAE,KAAI;EAClD;;;;EAKA,0BAA2B,IAAa;AACtC,eAAW,aAAa,KAAK,WAAW,OAAM,GAAI;AAChD,YAAM,QAAQ,UAAU,WAAW,CAAC,EAAE,CAAC;AAEvC,UAAI,MAAM,SAAS,GAAG;AACpB,eAAO;MACT;IACF;EACF;;;;EAKA,4BAA6B,IAAa;AACxC,eAAW,aAAa,KAAK,WAAW,OAAM,GAAI;AAChD,YAAM,QAAQ,UAAU,aAAa,CAAC,EAAE,CAAC;AAEzC,UAAI,MAAM,SAAS,GAAG;AACpB,eAAO;MACT;IACF;EACF;;;;EAKA,MAAM,OAAQ,OAAkB;AAC9B,QAAI,CAAC,KAAK,UAAS,GAAI;AACrB,YAAM,IAAI,gBAAgB,aAAa;IACzC;AAEA,QAAI,SAAS,QAAQ,MAAM,WAAW,GAAG;AACvC,WAAK,IAAI,kEAAkE;AAC3E;IACF;AAIA,UAAM,cAA2B;MAC/B,QAAQ,oBAAI,IAAG;MACf,MAAM;QACJ,SAAS;QACT,UAAU;;MAEZ,MAAM;QACJ,SAAS;QACT,UAAU;;;AAId,UAAM,QAAQ,QAAK;AACjB,kBAAY,OAAO,IAAI,GAAG,SAAQ,GAAI,IAAI,8BAA6B,CAAE;IAC3E,CAAC;AAED,UAAM,QAA8B,CAAA;AAEpC,eAAW,CAAC,KAAK,SAAS,KAAK,KAAK,WAAW,QAAO,GAAI;AACxD,YAAM,iBAAiB,UAAU,aAAa,KAAK;AAGnD,iBAAW,QAAQ,gBAAgB;AACjC,aAAK,IAAI,kCAAkC,KAAK,IAAI;AACpD,cAAM,WAAW,UAAU,eAAe;UACxC,UAAU,KAAK,WAAW;SAC3B;AAED,YAAI,YAAwB,KAAK,UAAU,IAAI,GAAG,KAAK,CAAA;AAEvD,YAAI,aAAa,MAAM;AACrB,sBAAY,CAAA;AACZ,eAAK,UAAU,IAAI,KAAK,SAAS;QACnC;AAEA,kBAAU,KAAK,QAAQ;AAGvB,iBAAS,iBAAiB,aAAa,MAAK;AAC1C,eAAK,WAAW,OAAO,kBAAkB,uBAAuB;YAC9D,QAAQ;WACT;QACH,CAAC;AACD,iBAAS,iBAAiB,SAAS,MAAK;AACtC,gBAAM,QAAQ,UAAU,UAAU,OAAK,MAAM,QAAQ;AAGrD,oBAAU,OAAO,OAAO,CAAC;AAEzB,eAAK,WAAW,OAAO,kBAAkB,mBAAmB;YAC1D,QAAQ;WACT;QACH,CAAC;AAGD,YAAIC,KAAI,QAAQ,IAAI,GAAG;AACrB,sBAAY,KAAK;QACnB,WAAWC,KAAI,QAAQ,IAAI,GAAG;AAC5B,sBAAY,KAAK;QACnB;AAGA,cAAM,KACJ,SAAS,OAAO,IAAI,EACjB,KAAK,MAAK;AACT,sBAAY,OAAO,OAAO,KAAK,SAAQ,CAAE;AAEzC,cAAID,KAAI,QAAQ,IAAI,GAAG;AACrB,wBAAY,KAAK;UACnB;AAEA,cAAIC,KAAI,QAAQ,IAAI,GAAG;AACrB,wBAAY,KAAK;UACnB;QACF,GAAG,CAAC,QAAO;AACT,eAAK,IAAI,MAAM,oDAAoD,KAAK,MAAM,GAAG;AACjF,sBAAY,OAAO,IAAI,KAAK,SAAQ,GAAI,GAAG;AAC3C,gBAAM;QACR,CAAC,CAAC;MAER;IACF;AAEA,UAAM,UAAU,MAAM,QAAQ,WAAW,KAAK;AAG9C,QAAI,QAAQ,SAAS,KAAK,QAAQ,MAAM,SAAO,IAAI,WAAW,WAAW,GAAG;AAC1E;IACF;AAKA,QAAI,KAAK,gBAAgB,WAAW,GAAG;AACrC,WAAK,IAAI,gDAAgD;AACzD;IACF;AAEA,QAAI,KAAK,mBAAmB,eAAe,UAAU;AAEnD,WAAK,IAAI,iEAAiE;AAC1E;IACF;AAGA,UAAM,IAAI,gCAAgC;EACxC,CAAC,GAAG,YAAY,OAAO,QAAO,CAAE,EAAE,IAAI,CAAC,CAAC,MAAM,GAAG,MAAK;AACpD,aAAO;IACX,IAAI,KAAK,GAAG,IAAI,SAAS,GAAG,GAAG,MAAM,IAAI,EAAE,KAAK,MAAM,CAAC;;IAErD,CAAC,EAAE,KAAK,EAAE,CACZ,EAAE;EACJ;EAEQ,gBAAiB,aAAwB;AAC/C,QAAI,YAAY,KAAK,aAAa,KAAK,YAAY,KAAK,aAAa,GAAG;AACtE,aAAO;IACT;AAEA,UAAM,mBAAmB,YAAY,KAAK,aAAa,YAAY,KAAK;AACxE,UAAM,gBAAgB,YAAY,KAAK,YAAY;AAEnD,WAAO,oBAAoB;EAC7B;;;;;EAMA,MAAM,OAAQ,KAAW;AACvB,UAAM,YAAY,KAAK,UAAU,IAAI,GAAG,KAAK,CAAA;AAC7C,SAAK,IAAI,MAAM,yBAAyB,GAAG;AAG3C,UAAM,QAAQ,CAAA;AACd,SAAK,IAAI,MAAM,4BAA4B,GAAG;AAC9C,WAAO,UAAU,SAAS,GAAG;AAC3B,YAAM,WAAW,UAAU,IAAG;AAE9B,UAAI,YAAY,MAAM;AACpB;MACF;AAEA,YAAM,KAAK,SAAS,MAAK,CAAE;IAC7B;AACA,UAAM,QAAQ,IAAI,KAAK;AAEvB,SAAK,WAAW,OAAO,GAAG;AAC1B,SAAK,UAAU,OAAO,GAAG;EAC3B;;;;;;;EAQA,MAAM,YAAS;AACb,UAAM,QAAQ,CAAA;AACd,eAAW,OAAO,KAAK,WAAW,KAAI,GAAI;AACxC,YAAM,KAAK,KAAK,OAAO,GAAG,CAAC;IAC7B;AAEA,UAAM,QAAQ,IAAI,KAAK;EACzB;;;;ACxXK,IAAM,cAAc;AAIpB,IAAM,sBAAsB;;;ACD7B,IAAOC,6BAAP,cAAyC,MAAK;EAClD,OAAO;EACP,OAAO;;AAOH,IAAOC,0BAAP,cAAsC,MAAK;EAC/C,OAAO;EACP,OAAO;;AAOH,IAAOC,gCAAP,cAA4C,MAAK;EACrD,OAAO;EACP,OAAO;;;;AC0CH,SAAU,SAAiD,QAAgB,OAA0C,CAAA,GAAE;AAC3H,QAAM,QAAQ,WAAW,QAAQ,IAAI;AAErC,MAAI,KAAK,iBAAiB,QAAQ,KAAK,mBAAmB,MAAM;AAG9D,SAAK,kBAAyB,eAAe,KAAK,aAAa;EACjE;AAEA,QAAM,eAAe,MAAM,iBAAwB;AACnD,QAAM,eAAe,MAAM,iBAAwB;AAEnD,QAAM,IAAkC;IACtC,MAAM,OAAOC,aAA0B;AACrC,UAAI,aAAqB;AACzB,YAAM,eAAe,IAAI,eAAc;AAEvC,aAAO,MAAM;AAEX,qBAAa,OAAO,MAAM,MAAM,KAAK;UACnC,GAAGA;UACH,OAAO;SACR,CAAC;AAEF,YAAI;AACF,uBAAa,aAAa,YAAY;QACxC,SAAS,KAAK;AACZ,cAAI,eAAe,YAAY;AAC7B;UACF;AAEA,gBAAM;QACR;AAEA,YAAI,aAAa,GAAG;AAClB,gBAAM,IAAIC,2BAA0B,wBAAwB;QAC9D;AAEA,YAAI,MAAM,mBAAmB,QAAQ,aAAa,aAAa,KAAK,iBAAiB;AACnF,gBAAM,IAAIC,8BAA6B,gCAAgC;QACzE;AAEA,YAAI,aAAa,IAAI;AACnB;QACF;MACF;AAEA,UAAI,MAAM,iBAAiB,QAAQ,aAAa,KAAK,eAAe;AAClE,cAAM,IAAIC,wBAAuB,yBAAyB;MAC5D;AAEA,aAAO,MAAM,KAAK;QAChB,GAAGH;QACH,OAAO;OACR;IACH;IACA,OAAO,OAAO,MAAMA,aAA0B;AAE5C,YAAM,MAAM,MAAM,IAAI,eAAe,aAAa,KAAK,UAAU,GAAG,IAAI,GAAGA,QAAO;IACpF;IACA,QAAQ,OAAO,MAAMA,aAA0B;AAC7C,YAAM,OAAO,IAAI,eACf,GAAG,KAAK,QAAQ,SAAQ,CAAC,aAAa,IAAI,UAAU,GAAG,GAAG,CAAE,CAAC;AAI/D,YAAM,MAAM,MAAM,MAAMA,QAAO;IACjC;IACA,QAAQ,MAAK;AACX,aAAO,MAAM,OAAM;IACrB;;AAGF,SAAO;AACT;;;ACnIA,IAAM,UAAU,WAAqB,IAAI;AAKzC,eAAsB,MAAO,QAAuG,QAAqCI,UAAsB;AAC7L,QAAM,OAAO,MAAM,QAAQA,QAAO;AACpC;AAKA,eAAsB,SAAU,QAAuG,SAAuBA,UAAsB;AAClL,QAAM,OAAO,OAAO,SAASA,QAAO;AACtC;AAKA,eAAsBC,OAAM,QAAuGD,UAAqC;AACtK,QAAM,MAAM,MAAM,OAAO,KAAKA,QAAO;AAErC,MAAI,IAAI,eAAe,KAAK,IAAI,IAAI,IAAI,aAAa,CAAC,MAAM,QAAQ,CAAC,GAAG;AACtE,IAAAA,SAAQ,IAAI,MAAM,yCAAyC,GAAG;AAC9D,UAAM,IAAI,oBAAoB,iBAAiB;EACjD;AAEA,SAAO,IAAI,QAAQ,GAAG,EAAE;AAC1B;AAKA,eAAsB,WAAY,QAAuGA,UAAqC;AAC5K,QAAM,MAAM,MAAMC,OAAK,QAAQD,QAAO;AAEtC,SAAO,SAAmB,IAAI,SAAQ,CAAE;AAC1C;;;ACmBA,eAAsB,OAAsC,QAAgBE,YAA8BC,UAA8B;AACtI,EAAAD,aAAY,MAAM,QAAQA,UAAS,IAAI,CAAC,GAAGA,UAAS,IAAI,CAACA,UAAS;AAElE,MAAIA,WAAU,WAAW,KAAKC,SAAQ,mBAAmB,OAAO;AAC9D,WAAO,iBAAiB,QAAQD,WAAU,CAAC,GAAGC,QAAO;EACvD;AAEA,QAAM,KAAK,SAAS,QAAQ;IAC1B,GAAGA;IACH,eAAe;GAChB;AACD,QAAM,WAAWD,WAAU,MAAK;AAEhC,MAAI,YAAY,MAAM;AACpB,UAAM,IAAI,MAAM,yCAAyC;EAC3D;AAEA,EAAAC,SAAQ,IAAI,MAAM,8BAA8B,aAAa,QAAQ;AACrE,QAAM,KAAK,WAAqB,GAAG,WAAW;CAAI;AAClD,QAAM,KAAK,WAAqB,GAAG,QAAQ;CAAI;AAC/C,QAAkB,SAAS,IAAI,CAAC,IAAI,EAAE,GAAGA,QAAO;AAEhD,EAAAA,SAAQ,IAAI,MAAM,2CAA2C;AAC7D,MAAI,WAAW,MAAkB,WAAW,IAAIA,QAAO;AACvD,EAAAA,SAAQ,IAAI,MAAM,qBAAqB,QAAQ;AAG/C,MAAI,aAAa,aAAa;AAC5B,IAAAA,SAAQ,IAAI,MAAM,mCAAmC;AACrD,eAAW,MAAkB,WAAW,IAAIA,QAAO;AACnD,IAAAA,SAAQ,IAAI,MAAM,qBAAqB,QAAQ;EACjD;AAGA,MAAI,aAAa,UAAU;AACzB,WAAO,EAAE,QAAQ,GAAG,OAAM,GAAI,SAAQ;EACxC;AAGA,aAAWC,aAAYF,YAAW;AAChC,IAAAC,SAAQ,IAAI,MAAM,sBAAsBC,SAAQ;AAChD,UAAkB,MAAM,IAAI,WAAqB,GAAGA,SAAQ;CAAI,GAAGD,QAAO;AAC1E,IAAAA,SAAQ,IAAI,MAAM,mCAAmC;AACrD,UAAME,YAAW,MAAkB,WAAW,IAAIF,QAAO;AACzD,IAAAA,SAAQ,IAAI,MAAM,8BAA8BE,WAAUD,SAAQ;AAElE,QAAIC,cAAaD,WAAU;AACzB,aAAO,EAAE,QAAQ,GAAG,OAAM,GAAI,UAAAA,UAAQ;IACxC;EACF;AAEA,QAAM,IAAI,yBAAyB,2BAA2B;AAChE;AAUA,SAAS,iBAAgD,QAAgB,UAAkBD,UAA8B;AACvH,QAAM,eAAe,OAAO,KAAK,KAAK,MAAM;AAC5C,QAAM,iBAAiB,OAAO;AAE9B,MAAI,aAAa;AACjB,MAAI,cAAc;AAClB,QAAM,kBAAkB,OAAM;AAE9B,MAAI,eAAe;AACnB,MAAI,kBAAkB;AACtB,QAAM,sBAAsB,OAAM;AAElC,MAAI,eAAe;AACnB,MAAI,kBAAkB;AACtB,QAAM,sBAAsB,OAAM;AAElC,QAAM,KAAK,SAAS;IAClB,MAAM;IACN,QAAQ;KACP;IACD,GAAGA;IACH,eAAe;GAChB;AAED,SAAO,OAAO,OAAM,WAAS;AAC3B,UAAM,EAAE,KAAI,IAAK,GAAG,OAAM;AAE1B,UAAM,KAAK,mBAAgB;AACzB,UAAI,WAAW;AAEf,uBAAiB,OAAO,QAAQ;AAE9B,YAAI,iBAAiB;AACnB,gBAAM,oBAAoB;QAC5B;AAGA,YAAI,CAAC,cAAc;AACjB,4BAAkB;AAElB,UAAAA,SAAQ,IAAI,MAAM,oDAAoD,aAAa,UAAU,IAAI,UAAU;AAE3G,gBAAM,iBAAiB,GAAG,QAAQ;;AAGlC,gBAAM,IAAI;YACR,WAAW,KAAK,CAAC,EAAE,CAAC;;YACpB,WAAqB,GAAG,WAAW;CAAI;YAChC,OAAO,eAAe,MAAM;YACnC,WAAqB,cAAc;YACnC;UAAG,EACH,SAAQ;AAEV,UAAAA,SAAQ,IAAI,MAAM,oDAAoD,aAAa,UAAU,IAAI,UAAU;AAE3G,yBAAe;AACf,4BAAkB;AAClB,8BAAoB,QAAO;AAG3B,oBAAS,EACN,MAAM,SAAM;AACX,YAAAA,SAAQ,IAAI,MAAM,0DAA0D,UAAU,GAAG;UAC3F,CAAC;QACL,OAAO;AACL,gBAAM;QACR;AAEA,mBAAW;MACb;AAIA,UAAI,CAAC,UAAU;AACb,cAAM,UAAS;MACjB;IACF,EAAC,CAAE;EACL;AAEA,iBAAe,YAAS;AACtB,QAAI,aAAa;AACf,MAAAA,SAAQ,IAAI,MAAM,6CAA6C,QAAQ;AACvE,YAAM,gBAAgB;AACtB;IACF;AAEA,kBAAc;AAEd,QAAI;AAEF,UAAI,CAAC,cAAc;AACjB,QAAAA,SAAQ,IAAI,MAAM,iDAAiD,QAAQ;AAC3E,cAAM,eAAc;MACtB;AAGA,UAAI,CAAC,cAAc;AACjB,QAAAA,SAAQ,IAAI,MAAM,iDAAiD,QAAQ;AAC3E,cAAM,eAAc;MACtB;IACF;AACE,oBAAc;AACd,mBAAa;AACb,sBAAgB,QAAO;IACzB;EACF;AAEA,iBAAe,iBAAc;AAC3B,QAAI,iBAAiB;AACnB,YAAM,oBAAoB;AAC1B;IACF;AAEA,sBAAkB;AAElB,QAAI;AACF,MAAAA,SAAQ,IAAI,MAAM,kDAAkD,aAAa,QAAQ;AACzF,YAAM,GAAG,OAAO;QACd,WAAqB,GAAG,WAAW;CAAI;QACvC,WAAqB,GAAG,QAAQ;CAAI;OACrC;AACD,MAAAA,SAAQ,IAAI,MAAM,kDAAkD,aAAa,QAAQ;IAC3F;AACE,qBAAe;AACf,wBAAkB;AAClB,0BAAoB,QAAO;IAC7B;EACF;AAEA,iBAAe,iBAAc;AAC3B,QAAI,iBAAiB;AACnB,YAAM,oBAAoB;AAC1B;IACF;AAEA,sBAAkB;AAElB,QAAI;AACF,MAAAA,SAAQ,IAAI,MAAM,+CAA+C;AACjE,UAAI,WAAW,MAAkB,WAAW,IAAIA,QAAO;AACvD,MAAAA,SAAQ,IAAI,MAAM,mDAAmD,QAAQ;AAE7E,UAAI,aAAa,aAAa;AAC5B,mBAAW,MAAkB,WAAW,IAAIA,QAAO;MACrD;AAEA,MAAAA,SAAQ,IAAI,MAAM,kDAAkD,UAAU,QAAQ;AAEtF,UAAI,aAAa,UAAU;AACzB,cAAM,IAAI,yBAAyB,2BAA2B;MAChE;IACF;AACE,qBAAe;AACf,wBAAkB;AAClB,0BAAoB,QAAO;IAC7B;EACF;AAEA,SAAO,SAAU,mBAAgB;AAE/B,UAAM,UAAS;AAEf,IAAAA,SAAQ,IAAI,MAAM,6CAA6C,QAAQ;AACvE,WAAQ,GAAG,OAAM,EAAG;EACtB,EAAE;AAEF,MAAI,OAAO,aAAa,MAAM;AAC5B,UAAM,oBAAoB,OAAO,UAAU,KAAK,MAAM;AAEtD,WAAO,YAAY,OAAO,SAAQ;AAGhC,UAAI,CAAC,YAAY;AACf,cAAM,UAAS,EAAG,MAAM,SAAM;AAC5B,UAAAA,SAAQ,IAAI,MAAM,kDAAkD,GAAG;QACzE,CAAC;MACH;AAGA,YAAM,kBAAkB,IAAI;IAC9B;EACF;AAEA,MAAI,OAAO,cAAc,MAAM;AAC7B,UAAM,qBAAqB,OAAO,WAAW,KAAK,MAAM;AAExD,WAAO,aAAa,OAAO,SAAQ;AAGjC,UAAI,CAAC,YAAY;AACf,cAAM,UAAS,EAAG,MAAM,SAAM;AAC5B,UAAAA,SAAQ,IAAI,MAAM,mDAAmD,GAAG;QAC1E,CAAC;MACH;AAGA,YAAM,mBAAmB,IAAI;IAC/B;EACF;AAEA,MAAI,OAAO,SAAS,MAAM;AACxB,UAAM,gBAAgB,OAAO,MAAM,KAAK,MAAM;AAE9C,WAAO,QAAQ,OAAO,SAAQ;AAG5B,YAAM,QAAQ,CAAA;AAEd,UAAI,iBAAiB;AACnB,cAAM,KAAK,oBAAoB,OAAO;MACxC;AAEA,UAAI,iBAAiB;AACnB,cAAM,KAAK,oBAAoB,OAAO;MACxC;AAEA,UAAI,MAAM,SAAS,GAAG;AAEpB,cAAM,WACJ,QAAQ,IAAI,KAAK,GACjB,MAAM,MAAM;MAEhB,OAAO;AAEL,qBAAa;AACb,sBAAc;AACd,wBAAgB,QAAO;MACzB;AAGA,YAAM,cAAc,IAAI;IAC1B;EACF;AAEA,SAAO;IACL;IACA;;AAEJ;;;ACrTA,eAAsB,OAA+C,QAAgBG,YAA8BC,UAA8B;AAC/I,EAAAD,aAAY,MAAM,QAAQA,UAAS,IAAIA,aAAY,CAACA,UAAS;AAC7D,EAAAC,SAAQ,IAAI,MAAM,kCAAkCD,UAAS;AAE7D,QAAM,KAAK,SAAS,QAAQ;IAC1B,GAAGC;IACH,eAAe;IACf,iBAAiB;;GAClB;AAED,SAAO,MAAM;AACX,IAAAA,SAAQ,IAAI,MAAM,iCAAiC;AACnD,UAAM,WAAW,MAAkB,WAAW,IAAIA,QAAO;AACzD,IAAAA,SAAQ,IAAI,MAAM,qBAAqB,QAAQ;AAE/C,QAAI,aAAa,aAAa;AAC5B,MAAAA,SAAQ,IAAI,MAAM,sCAAsC,aAAa,QAAQ;AAC7E,YAAkB,MAAM,IAAI,WAAqB,GAAG,WAAW;CAAI,GAAGA,QAAO;AAC7E,MAAAA,SAAQ,IAAI,MAAM,wCAAwC,aAAa,QAAQ;AAC/E;IACF;AAEA,QAAID,WAAU,SAAS,QAAQ,GAAG;AAChC,MAAAC,SAAQ,IAAI,MAAM,sCAAsC,UAAU,QAAQ;AAC1E,YAAkB,MAAM,IAAI,WAAqB,GAAG,QAAQ;CAAI,GAAGA,QAAO;AAC1E,MAAAA,SAAQ,IAAI,MAAM,wCAAwC,UAAU,QAAQ;AAE5E,aAAO,EAAE,QAAQ,GAAG,OAAM,GAAI,SAAQ;IACxC;AAEA,QAAI,aAAa,MAAM;AAErB,YAAM,SAAS,IAAI,eACjB,GAAGD,WAAU,IAAI,OAAKE,QAAO,OAAO,WAAqB,GAAG,CAAC;CAAI,CAAC,CAAC,GACnE,WAAqB,IAAI,CAAC;AAG5B,MAAAD,SAAQ,IAAI,MAAM,oCAAoCD,YAAW,QAAQ;AACzE,YAAkB,MAAM,IAAI,QAAQC,QAAO;AAC3C,MAAAA,SAAQ,IAAI,MAAM,sCAAsCD,YAAW,QAAQ;AAC3E;IACF;AAEA,IAAAC,SAAQ,IAAI,MAAM,sCAAsC,QAAQ;AAChE,UAAkB,MAAM,IAAI,WAAqB,MAAM,GAAGA,QAAO;AACjE,IAAAA,SAAQ,IAAI,wCAAwC,QAAQ;EAC9D;AACF;;;ACjGA,IAAM,gBAAgB;AAsBhB,IAAO,iBAAP,MAAqB;;;;EAIT;;;;EAKA;;;;EAKA;EAET;EACA;EACA;EACA;EACA;EACA;EACS;;;;;EAMT;;;;EAKU;;;;EAKA;EAEA;;;;EAKA;;;;;EAMjB,YAAa,MAAoB;AAC/B,UAAM,EAAE,YAAY,YAAY,WAAW,OAAO,OAAO,WAAU,IAAK;AAExE,SAAK,KAAK,GAAI,SAAS,OAAO,KAAK,OAAM,IAAK,GAAG,CAAC,EAAG,SAAS,EAAE,CAAC,GAAG,KAAK,IAAG,CAAE;AAC9E,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,YAAY,KAAK;AACtB,SAAK,SAAS;AACd,SAAK,WAAW,KAAK;AACrB,SAAK,cAAc,KAAK;AACxB,SAAK,aAAa,KAAK;AACvB,SAAK,SAAS,KAAK;AACnB,SAAK,MAAM,KAAK,OAAO,aAAa,qBAAqB,KAAK,SAAS,IAAI,KAAK,EAAE,EAAE;AAEpF,QAAI,KAAK,WAAW,UAAS,KAAM,MAAM;AACvC,WAAK,aAAa,KAAK,WAAW,YAAY,QAAQ,KAAK,UAAU,EAAE;IACzE;AAEA,SAAK,aAAa;AAClB,SAAK,SAAS;AACd,SAAK,SAAS;AACd,SAAK,cAAc;AACnB,SAAK,OAAO,CAAA;EACd;EAES,CAAC,OAAO,WAAW,IAAI;EAEvB,CAAC,gBAAgB,IAAI;;;;EAK9B,IAAI,UAAO;AACT,WAAO,KAAK,YAAW;EACzB;;;;EAKA,MAAM,UAAWE,YAA8BC,UAA0B;AACvE,QAAI,KAAK,WAAW,WAAW;AAC7B,YAAM,IAAI,uBAAuB,gCAAgC;IACnE;AAEA,QAAI,KAAK,WAAW,UAAU;AAC5B,YAAM,IAAI,sBAAsB,0BAA0B;IAC5D;AAEA,QAAI,CAAC,MAAM,QAAQD,UAAS,GAAG;AAC7B,MAAAA,aAAY,CAACA,UAAS;IACxB;AAEA,QAAI,KAAK,UAAU,QAAQC,UAAS,2BAA2B,MAAM;AACnE,YAAM,IAAI,uBAAuB,mDAAmD;IACtF;AAEA,UAAM,SAAS,MAAM,KAAK,WAAWD,YAAWC,QAAO;AAEvD,WAAO,YAAY;AAEnB,WAAO;EACT;;;;EAKA,MAAM,MAAOA,WAAwB,CAAA,GAAE;AACrC,QAAI,KAAK,WAAW,YAAY,KAAK,WAAW,WAAW;AACzD;IACF;AAEA,SAAK,IAAI,4BAA4B,KAAK,UAAU;AAEpD,SAAK,SAAS;AAEd,QAAIA,SAAQ,UAAU,MAAM;AAC1B,YAAM,SAAS,YAAY,QAAQ,aAAa;AAChD,sBAAgB,UAAU,MAAM;AAEhC,MAAAA,WAAU;QACR,GAAGA;QACH;;IAEJ;AAEA,QAAI;AACF,WAAK,IAAI,MAAM,8BAA8B;AAG7C,YAAM,KAAK,OAAOA,QAAO;AAEzB,WAAK,IAAI,MAAM,mCAAmC;AAElD,WAAK,SAAS;AACd,WAAK,SAAS,QAAQ,KAAK,IAAG;IAChC,SAAS,KAAU;AACjB,WAAK,IAAI,MAAM,+DAA+D,KAAK,YAAY,GAAG;AAClG,WAAK,MAAM,GAAG;IAChB;EACF;EAEA,MAAO,KAAU;AACf,QAAI,KAAK,WAAW,UAAU;AAC5B;IACF;AAEA,SAAK,IAAI,MAAM,0CAA0C,KAAK,YAAY,GAAG;AAE7E,SAAK,SAAS;AAGd,SAAK,OAAO,GAAG;AAEf,SAAK,SAAS;AACd,SAAK,SAAS,QAAQ,KAAK,IAAG;EAChC;;AAGI,SAAU,iBAAkB,MAAoB;AACpD,SAAO,IAAI,eAAe,IAAI;AAChC;;;ACtIA,SAAS,wBAAyB,UAAkB,WAAoB;AACtE,MAAI;AACF,UAAM,EAAE,SAAAC,SAAO,IAAK,UAAU,WAAW,QAAQ;AAEjD,WAAOA,SAAQ;EACjB,SAAS,KAAU;AACjB,QAAI,IAAI,SAAS,0BAA0B;AACzC,YAAM;IACR;EACF;AAEA,SAAOC;AACT;AAEA,SAAS,wBAAyB,UAAkB,WAAsBD,WAA4B,CAAA,GAAE;AACtG,MAAI;AACF,UAAM,EAAE,SAAAA,SAAO,IAAK,UAAU,WAAW,QAAQ;AAEjD,QAAIA,SAAQ,sBAAsB,MAAM;AACtC,aAAOA,SAAQ;IACjB;EACF,SAAS,KAAU;AACjB,QAAI,IAAI,SAAS,0BAA0B;AACzC,YAAM;IACR;EACF;AAEA,SAAOA,SAAQ,sBAAsBE;AACvC;AAEA,SAAS,aAAc,UAAkB,WAAmC,YAAsB;AAChG,MAAI,cAAc;AAElB,aAAW,QAAQ,QAAQ,YAAS;AAClC,QAAI,OAAO,cAAc,aAAa,OAAO,aAAa,UAAU;AAClE;IACF;EACF,CAAC;AAED,SAAO;AACT;AAgBM,IAAO,WAAP,MAAe;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAOjB,YAAa,YAAgC,MAAkB;AAC7D,SAAK,aAAa;AAClB,SAAK,uBAAuB,WAAW;MACrC,MAAM;MACN,SAAS,KAAK,WAAW;KAC1B;AAED,SAAK,qBAAqB,QAAQ,eAAY;AAC5C,WAAK,qBAAqB,IAAI,UAAU,UAAU,SAAS;IAC7D,CAAC;AAED,SAAK,eAAe,WAAW;MAC7B,MAAM;MACN,SAAS,KAAK,WAAW;KAC1B;AAED,SAAK,aAAa,QAAQ,WAAQ;AAChC,WAAK,aAAa,IAAI,MAAM,UAAU,KAAK;IAC7C,CAAC;AAED,SAAK,wBAAwB,KAAK,yBAAyB;AAC3D,SAAK,0CAA0C,KAAK,2CAA2C;AAC/F,SAAK,2CAA2C,KAAK,4CAA4C;AACjG,SAAK,SAAS,WAAW;AACzB,SAAK,UAAU;MACb,OAAO,WAAW,SAAS,qBAAqB,uCAAuC;MACvF,QAAQ,WAAW,SAAS,qBAAqB,6CAA6C;MAC9F,eAAe,WAAW,SAAS,qBAAqB,sDAAsD;MAC9G,gBAAgB,WAAW,SAAS,qBAAqB,uDAAuD;;EAEpH;EAES,CAAC,OAAO,WAAW,IAAI;EAIhC,MAAM,sBAAuB,WAA2D,MAAW;AACjG,UAAM,gBAAqB,KAAK,WAAW,gBAAgB,MAAM;AAEjE,QAAI,iBAAiB,MAAM;AACzB;IACF;AAEA,UAAM,SAAS,MAAM,cAAc,MAAM,KAAK,WAAW,iBAAiB,IAAI;AAE9E,QAAI,WAAW,MAAM;AACnB,YAAM,IAAI,2BAA2B,gDAAgD,MAAM,EAAE;IAC/F;EACF;EAEA,yBAA0B,QAAmB;AAC3C,UAAM,SAAS,UAAU;MACvB,YAAY,QAAQ,KAAK,qBAAqB;MAC9C;KACD;AACD,oBAAgB,UAAU,MAAM;AAEhC,WAAO;EACT;;;;EAKA,MAAM,eAAgB,QAA6B,MAAqB;AACtE,QAAI,WAAW;AAGf,UAAM,SAAS,KAAK,yBAAyB,KAAK,MAAM;AAExD,QAAI;AACF,WAAK,QAAQ,OAAO,UAAU;QAC5B,SAAS;OACV;AAED,iBAAW,MAAM,WAAW,KAAK,WAAW,kBAAkB,yBAAyB,MAAM,GAAG,MAAM;AAEtG,UAAI,CAAC,UAAU;AACb,cAAM,IAAI,sBAAsB,mBAAmB;MACrD;AAEA,YAAM,WAAW,KAAK,sBAAsB,yBAAyB,MAAM,GAAG,MAAM;AAEpF,YAAM,KAAK,gBAAgB,QAAQ,WAAW;QAC5C,GAAG;QACH;OACD;IACH,SAAS,KAAU;AACjB,WAAK,QAAQ,QAAQ,UAAU;QAC7B,SAAS;OACV;AACD,WAAK,QAAQ,eAAe,UAAU;QACpC,CAAC,IAAI,QAAQ,OAAO,GAAG;OACxB;AAED,YAAM;IACR;AACE,aAAO,MAAK;AAEZ,UAAI,UAAU;AACZ,aAAK,WAAW,kBAAkB,oBAAmB;MACvD;IACF;EACF;;;;EAKA,MAAM,gBAAiB,QAA6B,MAAqB;AACvE,QAAI;AACF,WAAK,QAAQ,OAAO,UAAU;QAC5B,UAAU;OACX;AAED,YAAM,QAAQ,OAAO,WAAW,UAAS;AACzC,UAAI;AAEJ,UAAI,SAAS,MAAM;AACjB,uBAAe,iBAAiB,KAAK;AACrC,cAAM,WAAW,KAAK,sBAAsB,0BAA0B,cAAc,MAAM,GAAG,KAAK,MAAM;MAC1G;AAEA,UAAI,YAAoC;AAGxC,UAAI,KAAK,cAAc,OAAO;AAC5B,oBAAY;MACd;AAEA,aAAO,MAAM,KAAK,gBAAgB,QAAQ,WAAW,IAAI;IAC3D,SAAS,KAAU;AACjB,WAAK,QAAQ,QAAQ,UAAU;QAC7B,UAAU;OACX;AACD,WAAK,QAAQ,gBAAgB,UAAU;QACrC,CAAC,IAAI,QAAQ,OAAO,GAAG;OACxB;AAED,YAAM;IACR;EACF;EAEQ,MAAM,gBAAiB,QAA6B,WAAmC,MAAqB;AAClH,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AAEJ,SAAK,WAAW,SAAS,yBAAyB,MAAM;AAExD,WAAO,IAAI,MAAM,sCAAsC,SAAS;AAGhE,QAAI,gBAAgB;AAEpB,QAAI,MAAM,mBAAmB,MAAM;AACjC,YAAM,YAAY,KAAK,WAAW;AAElC,UAAI,aAAa,MAAM;AACrB,eAAO,IAAI,gCAAgC,SAAS;AACpD,wBAAgB,MAAM,UAAU,QAAQ,QAAQ,IAAI;MACtD;IACF;AAEA,QAAI;AAEF,sBAAgB;AAChB,UAAI,MAAM,mBAAmB,MAAM;AACjC,cAAM,aAAa,IAAI,oBAAoB,oBAAoB,SAAS,aAAa,CAAC;AAEtF,SAAC;UACC,MAAM;UACN;UACA,UAAU;UACV,aAAa;YACX,OAAO,cAAc,YACrB,KAAK,gBAAgB,eAAe,IAAI,IACxC,KAAK,iBAAiB,eAAe,IAAI;AAG7C,cAAMC,UAA8B;UAClC,GAAG;UACH,GAAG;;AAGL,cAAM,KAAK,sBAAsB,cAAc,YAAY,mCAAmC,mCAAmC,YAAYA,OAAM;MACrJ,OAAO;AACL,cAAM,QAAQ,OAAO,WAAW,UAAS;AAEzC,YAAI,SAAS,MAAM;AACjB,gBAAM,IAAI,sBAAsB,GAAG,SAAS,yDAAyD;QACvG;AAEA,cAAM,eAAe,iBAAiB,KAAK;AAE3C,yBAAiB;AACjB,qBAAa;MACf;AAIA,UAAI,WAAW,OAAO,KAAK,WAAW,MAAM,GAAG;AAC7C,cAAM,MAAM,IAAI,mBAAmB,mBAAmB;AACtD,eAAO,MAAM,GAAG;AAChB,cAAM;MACR;AAEA,qBAAe;AACf,UAAI,MAAM,gBAAgB,MAAM;AAC9B,uBAAe,KAAK;MACtB,WAAW,gBAAgB,QAAQ,KAAK,aAAa,OAAO,GAAG;AAC7D,cAAM,aAAa,IAAI,oBAAoB,sBAAsB,SAAS,aAAa,CAAC;AAGxF,cAAM,cAAc,OAAO,cAAc,YACrC,KAAK,kBAAkB;UACvB,GAAG;UACH,GAAG;WACF,KAAK,cAAc,IAAI,IACxB,KAAK,mBAAmB;UACxB,GAAG;UACH,GAAG;WACF,KAAK,cAAc,IAAI;AAC5B,uBAAe,YAAY;AAC3B,uBAAe,YAAY;MAC7B;IACF,SAAS,KAAU;AACjB,aAAO,IAAI,MAAM,mDAAmD,cAAc,YAAY,SAAS,MAAM,OAAO,YAAY,GAAG;AACnI,YAAM;IACR;AAEA,UAAM,KAAK,sBAAsB,cAAc,YAAY,kCAAkC,kCAAkC,YAAY,MAAM;AAEjJ,WAAO,IAAI,uCAAuC,SAAS;AAE3D,WAAO,KAAK,kBAAkB;MAC5B;MACA;MACA;MACA;MACA;MACA;MACA,QAAQ,MAAM;KACf;EACH;;;;EAKA,kBAAmB,MAA6B;AAC9C,UAAM,EACJ,gBACA,WACA,QACA,cACA,YACA,cACA,OAAM,IACJ;AAEJ,QAAI;AACJ,QAAI;AACJ,QAAI;AAEJ,QAAI,gBAAgB,MAAM;AAExB,cAAQ,aAAa,kBAAkB;QACrC;;QAEA,kBAAkB,iBAAc;AAC9B,cAAI,cAAc,MAAM;AACtB;UACF;AAEA,gBAAM,SAAS,YAAY,QAAQ,KAAK,uCAAuC;AAC/E,0BAAgB,UAAU,MAAM;AAEhC,eAAK,QAAQ,QAAO,EACjB,KAAK,YAAW;AACf,kBAAMC,aAAY,KAAK,WAAW,UAAU,aAAY;AAExD,kBAAM,EAAE,QAAQ,SAAQ,IAAK,MAAU,OAAO,aAAaA,YAAW;cACpE;cACA,KAAK,YAAY;cACjB,YAAY;aACb;AAED,gBAAI,cAAc,MAAM;AACtB;YACF;AAEA,uBAAW,IAAI,gCAAgC,QAAQ;AAEvD,kBAAM,gBAAgB,wBAAwB,UAAU,KAAK,WAAW,SAAS;AACjF,kBAAM,cAAc,aAAa,UAAU,WAAW,UAAU;AAEhE,gBAAI,gBAAgB,eAAe;AACjC,oBAAM,MAAM,IAAI,mCAAmC,mDAAmD,QAAQ,aAAa,aAAa,EAAE;AAC1I,0BAAY,MAAM,GAAG;AAErB,oBAAM;YACR;AAIA,wBAAY,SAAS,OAAO;AAC5B,wBAAY,OAAO,OAAO;AAC1B,wBAAY,WAAW;AAGvB,gBAAI,OAAO,cAAc,MAAM;AAC7B,0BAAY,aAAa,OAAO;YAClC;AAGA,gBAAI,OAAO,aAAa,MAAM;AAC5B,0BAAY,YAAY,OAAO;YACjC;AAGA,gBAAI,OAAO,SAAS,MAAM;AACxB,0BAAY,QAAQ,OAAO;YAC7B;AAIA,kBAAM,KAAK,WAAW,UAAU,MAAM,YAAY;cAChD,WAAW,CAAC,QAAQ;eACnB;cACD;aACD;AAED,iBAAK,WAAW,SAAS,oBAAoB,aAAa,UAAU;AAEpE,iBAAK,UAAU,EAAE,YAAY,QAAQ,aAAa,SAAQ,CAAE;UAC9D,CAAC,EACA,MAAM,OAAM,QAAM;AACjB,uBAAW,IAAI,MAAM,6CAA6C,YAAY,IAAI,GAAG;AAErF,gBAAI,YAAY,SAAS,SAAS,MAAM;AACtC,oBAAM,YAAY,MAAM;gBACtB;eACD,EACE,MAAM,CAAAC,SAAO,YAAY,MAAMA,IAAG,CAAC;YACxC;UACF,CAAC;QACL;OACD;AAED,kBAAY,OAAOD,YAAqBJ,WAA4B,CAAA,MAAuB;AACzF,YAAI,SAAS,MAAM;AACjB,gBAAM,IAAI,sBAAsB,+BAA+B;QACjE;AAEA,mBAAW,IAAI,MAAM,wCAAwCI,UAAS;AACtE,cAAM,cAAc,MAAM,MAAM,UAAS;AACzC,mBAAW,IAAI,MAAM,0CAA0C,YAAY,IAAIA,UAAS;AAExF,YAAI;AACF,cAAIJ,SAAQ,UAAU,MAAM;AAC1B,wBAAY,IAAI,qGAAqGI,UAAS;AAE9H,kBAAM,SAAS,YAAY,QAAQ,KAAK,wCAAwC;AAChF,4BAAgB,UAAU,MAAM;AAEhC,YAAAJ,WAAU;cACR,GAAGA;cACH;;UAEJ;AAEA,sBAAY,IAAI,MAAM,wCAAwCI,UAAS;AAEvE,gBAAM,EACJ,QACA,SAAQ,IACN,MAAU,OAAO,aAAaA,YAAW;YAC3C,GAAGJ;YACH,KAAK,YAAY;YACjB,YAAY;WACb;AAED,sBAAY,IAAI,MAAM,wBAAwB,QAAQ;AAEtD,gBAAM,gBAAgB,wBAAwB,UAAU,KAAK,WAAW,WAAWA,QAAO;AAC1F,gBAAM,cAAc,aAAa,UAAU,YAAY,UAAU;AAEjE,cAAI,eAAe,eAAe;AAChC,kBAAM,MAAM,IAAI,oCAAoC,oDAAoD,QAAQ,OAAO,WAAW,IAAI,aAAa,EAAE;AACrJ,wBAAY,MAAM,GAAG;AAErB,kBAAM;UACR;AAIA,gBAAM,KAAK,WAAW,UAAU,MAAM,YAAY;YAChD,WAAW,CAAC,QAAQ;WACrB;AAID,sBAAY,SAAS,OAAO;AAC5B,sBAAY,OAAO,OAAO;AAC1B,sBAAY,WAAW;AAGvB,cAAI,OAAO,cAAc,MAAM;AAC7B,wBAAY,aAAa,OAAO;UAClC;AAGA,cAAI,OAAO,aAAa,MAAM;AAC5B,wBAAY,YAAY,OAAO;UACjC;AAGA,cAAI,OAAO,SAAS,MAAM;AACxB,wBAAY,QAAQ,OAAO;UAC7B;AAEA,eAAK,WAAW,SAAS,oBAAoB,aAAa,UAAU;AAEpE,iBAAO;QACT,SAAS,KAAU;AACjB,qBAAW,IAAI,MAAM,kFAAkF,cAAc,YAAY,SAAS,MAAM,KAAK,OAAO,YAAYI,YAAW,GAAG;AAEtL,cAAI,YAAY,SAAS,SAAS,MAAM;AACtC,wBAAY,MAAM,GAAG;UACvB;AAEA,gBAAM;QACR;MACF;AAGA,WAAK,QAAQ,IAAI;QACf,MAAM,KAAK,aAAa,MAAM;QAC9B,aAAa,KAAK,MAAM,MAAM;OAC/B,EAAE,MAAM,SAAM;AACb,mBAAW,IAAI,MAAM,wCAAwC,GAAG;MAClE,CAAC;IACH;AAEA,UAAM,YAAY,OAAO;AACzB,WAAO,WAAW,IAAI,MAAM,WAAW;MACrC,KAAK,IAAI,SAAQ;AACf,YAAI,KAAK,CAAC,MAAM,WAAW,KAAK,CAAC,KAAK,QAAQ,UAAU,SAAS,MAAM;AAErE,WAAC,YAAW;AACV,gBAAI;AACF,kBAAI,WAAW,WAAW,QAAQ;AAChC,sBAAM,WAAW,MAAK;cACxB;YACF,SAAS,KAAU;AACjB,yBAAW,IAAI,MAAM,oDAAoD,GAAG;YAC9E;AACE,mBAAK,OAAO,kBAAkB,oBAAoB;gBAChD,QAAQ;eACT;YACH;UACF,GAAE,EAAG,MAAM,SAAM;AACf,uBAAW,IAAI,MAAM,4DAA4D,GAAG;UACtF,CAAC;QACH;AAEA,eAAO,QAAQ,IAAI,GAAG,IAAI;MAC5B;KACD;AACD,WAAO,SAAS,WAAW,KAAK,IAAG;AAEnC,UAAM,8BAA8B,MAAU;AAC5C,YAAM,IAAI,sBAAsB,+BAA+B;IACjE;AAGA,iBAAa,iBAAiB;MAC5B,YAAY,OAAO;MACnB;MACA,QAAQ;MACR;MACA,UAAU,OAAO;MACjB,aAAa,OAAO;MACpB,YAAY;MACZ;MACA,QAAQ,KAAK,WAAW;MACxB,WAAW,aAAa;MACxB,YAAY,MAAK;AACf,eAAO,OAAO,WAAW,CAAA;MAC3B;MACA,OAAO,OAAOJ,aAA0B;AAEtC,cAAM,OAAO,MAAMA,QAAO;AAG1B,cAAM,OAAO,MAAMA,QAAO;MAC5B;MACA,OAAO,CAAC,QAAO;AACb,eAAO,MAAM,GAAG;AAGhB,eAAO,MAAM,GAAG;MAClB;KACD;AAED,SAAK,OAAO,kBAAkB,mBAAmB;MAC/C,QAAQ;KACT;AAGD,eAAW,mBAAmB;AAE9B,WAAO;EACT;;;;EAKA,UAAW,MAAqB;AAC9B,UAAM,EAAE,YAAY,QAAQ,SAAQ,IAAK;AACzC,UAAM,EAAE,SAAS,SAAAA,SAAO,IAAK,KAAK,WAAW,UAAU,WAAW,QAAQ;AAE1E,QAAI,WAAW,UAAU,QAAQA,SAAQ,2BAA2B,MAAM;AACxE,YAAM,IAAI,uBAAuB,mDAAmD;IACtF;AAEA,YAAQ,EAAE,YAAY,OAAM,CAAE;EAChC;;;;EAKA,MAAM,gBAAiB,YAAiCA,UAAsB;AAC5E,UAAMI,aAAY,MAAM,KAAK,KAAK,qBAAqB,KAAI,CAAE;AAE7D,QAAI;AACF,YAAM,EAAE,QAAQ,SAAQ,IAAK,MAAU,OAAO,YAAYA,YAAW;QACnE,GAAGJ;QACH,KAAK,WAAW;OACjB;AACD,YAAM,YAAY,KAAK,qBAAqB,IAAI,QAAQ;AAExD,UAAI,aAAa,MAAM;AACrB,cAAM,IAAI,sBAAsB,8BAA8B,QAAQ,EAAE;MAC1E;AAEA,iBAAW,IAAI,gDAAgD,WAAW,YAAY,QAAQ;AAE9F,aAAO;QACL,GAAG,MAAM,UAAU,cAAc,QAAQA,QAAO;QAChD;;IAEJ,SAAS,KAAU;AACjB,iBAAW,IAAI,MAAM,gDAAgD,WAAW,YAAY,GAAG;AAC/F,YAAM,IAAI,sBAAsB,IAAI,OAAO;IAC7C;EACF;;;;;EAMA,MAAM,iBAAkB,YAAiCA,UAAgC;AACvF,UAAMI,aAAY,MAAM,KAAK,KAAK,qBAAqB,KAAI,CAAE;AAE7D,QAAI;AACF,iBAAW,IAAI,MAAM,+BAA+BA,UAAS;AAE7D,YAAM,EAAE,QAAQ,SAAQ,IAAK,MAAU,OAAO,YAAYA,YAAW;QACnE,GAAGJ;QACH,KAAK,WAAW;QAChB,YAAY;OACb;AACD,YAAM,YAAY,KAAK,qBAAqB,IAAI,QAAQ;AAExD,UAAI,aAAa,MAAM;AACrB,cAAM,IAAI,sBAAsB,8BAA8B,QAAQ,EAAE;MAC1E;AAEA,iBAAW,IAAI,iDAAiD,WAAW,YAAY,QAAQ;AAE/F,aAAO;QACL,GAAG,MAAM,UAAU,eAAe,QAAQA,QAAO;QACjD;;IAEJ,SAAS,KAAU;AACjB,iBAAW,IAAI,MAAM,+CAA+C,WAAW,YAAY,GAAG;AAC9F,YAAM,IAAI,sBAAsB,IAAI,OAAO;IAC7C;EACF;;;;;EAMA,MAAM,mBAAoB,YAAiC,QAAyCA,UAAqB;AACvH,UAAMI,aAAY,MAAM,KAAK,OAAO,KAAI,CAAE;AAC1C,eAAW,IAAI,+BAA+BA,UAAS;AACvD,QAAI;AACF,iBAAW,IAAI,MAAM,kCAAkCA,UAAS;AAEhE,YAAM,EACJ,QACA,SAAQ,IACN,MAAU,OAAO,YAAYA,YAAW;QAC1C,GAAGJ;QACH,KAAK,WAAW;QAChB,YAAY;OACb;AAED,iBAAW,IAAI,iCAAiC,QAAQ;AACxD,YAAM,eAAe,OAAO,IAAI,QAAQ;AAExC,aAAO,EAAE,QAAQ,aAAY;IAC/B,SAAS,KAAU;AACjB,iBAAW,IAAI,MAAM,0CAA0C,GAAG;AAClE,YAAM,IAAI,sBAAsB,OAAO,GAAG,CAAC;IAC7C;EACF;;;;;EAMA,MAAM,kBAAmB,YAAiC,QAAyCA,UAAqB;AACtH,UAAMI,aAAY,MAAM,KAAK,OAAO,KAAI,CAAE;AAC1C,eAAW,IAAI,8BAA8BA,UAAS;AACtD,QAAI;AACF,YAAM,EAAE,QAAQ,SAAQ,IAAK,MAAU,OAAO,YAAYA,YAAW;QACnE,GAAGJ;QACH,KAAK,WAAW;OACjB;AACD,YAAM,eAAe,OAAO,IAAI,QAAQ;AAExC,aAAO,EAAE,QAAQ,aAAY;IAC/B,SAAS,KAAU;AACjB,iBAAW,IAAI,MAAM,yCAAyC,GAAG;AACjE,YAAM,IAAI,sBAAsB,OAAO,GAAG,CAAC;IAC7C;EACF;EAEA,0BAAuB;AACrB,WAAO,KAAK;EACd;EAEA,kBAAe;AACb,WAAO,KAAK;EACd;;;;AC9wBK,IAAM,UAAU;AAChB,IAAMM,QAAO;;;ACCd,SAAU,UAAWC,OAAeC,UAAgB;AACxD,SAAO,GAAGD,SAAYA,KAAI,IAAIC,YAAe,OAAO,YAAY,WAAW,UAAU,SAAS;AAChG;;;ACyBM,IAAO,SAAP,cAAyD,kBAA+B;EACrF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACU;;EAGjB,YAAa,MAAwC;AACnD,UAAK;AAEL,SAAK,SAAS;AAId,UAAM,SAAS,IAAI,kBAAiB;AACpC,UAAM,mBAAmB,OAAO,cAAc,KAAK,MAAM;AACzD,WAAO,gBAAgB,CAAC,QAAY;AAClC,YAAM,iBAAiB,iBAAiB,GAAG;AAC3C,YAAM,iBAAiB,KAAK,cAC1B,IAAI,YAAY,IAAI,MAAM,EAAE,QAAQ,IAAI,OAAM,CAAE,CAAC;AAGnD,aAAO,kBAAkB;IAC3B;AAGA,oBAAgB,UAAU,MAAM;AAEhC,SAAK,SAAS,KAAK;AACnB,SAAK,SAAS,KAAK,UAAU,cAAa;AAC1C,SAAK,MAAM,KAAK,OAAO,aAAa,QAAQ;AAE5C,SAAK,WAAW,CAAA;AAEhB,UAAM,eAAe,KAAK,UAAU,QAAYC;AAChD,UAAM,kBAAkB,KAAK,UAAU,WAAe;AAGtD,UAAM,aAAa,KAAK,aAAa,kBAAkB;MACrD,QAAQ,KAAK;MACb,YAAY,KAAK;MACjB,UAAU;QACR,MAAM;QACN,SAAS;QACT,WAAW,KAAK,UAAU,aAAa,UAAU,cAAc,eAAe;;MAEhF,QAAQ,KAAK;MACb;MACA,WAAW,KAAK,aAAa,IAAI,gBAAe;MAChD,iBAAiB,gBAAgB,KAAK,eAAe;MACrD,KAAK,KAAK;KACX;AAGD,QAAI,KAAK,WAAW,MAAM;AACxB,WAAK,UAAU,KAAK,mBAAmB,WAAW,KAAK,QAAQ,KAAK,UAAU,CAAC;IACjF;AAEA,SAAK,YAAY,KAAK,mBAAmB,aAAa,oBAAoB,YAAY;MACpF,eAAe,KAAK,WAAW,gBAAgB;MAC/C,GAAG,KAAK;KACT,CAAC;AAEF,eAAW,OAAO,iBAAiB,eAAe,SAAM;AAEtD,UAAI,IAAI,OAAO,YAAY,MAAM;AAC/B,cAAM,WAAqB;UACzB,IAAI,IAAI,OAAO,KAAK;UACpB,YAAY,IAAI,OAAO,KAAK,UAAU,IAAI,OAAK,EAAE,SAAS;;AAG5D,mBAAW,OAAO,kBAAkB,kBAAkB,EAAE,QAAQ,SAAQ,CAAE;MAC5E;IACF,CAAC;AAGD,QAAI,KAAK,uBAAuB,MAAM;AACpC,WAAK,mBAAmB,uBAAuB,KAAK,oBAAoB,UAAU,CAAC;IACrF;AAGA,SAAK,WAAW,WAAW,IAAI,SAAS,KAAK,YAAY;MACvD,uBAAuB,KAAK,wBAAwB,CAAA,GAAI,IAAI,CAAC,IAAI,UAAU,KAAK,mBAAmB,yBAAyB,KAAK,IAAI,GAAG,KAAK,UAAU,CAAC,CAAC;MACzJ,eAAe,KAAK,gBAAgB,CAAA,GAAI,IAAI,CAAC,IAAI,UAAU,KAAK,mBAAmB,iBAAiB,KAAK,IAAI,GAAG,KAAK,UAAU,CAAC,CAAC;MACjI,uBAAuB,KAAK,mBAAmB;MAC/C,yCAAyC,KAAK,mBAAmB,2CAA2C,KAAK,mBAAmB;MACpI,0CAA0C,KAAK,mBAAmB,4CAA4C,KAAK,mBAAmB;KACvI;AAGD,SAAK,mBAAmB,oBAAoB,IAAI,wBAAwB,KAAK,YAAY,KAAK,gBAAgB,CAAC;AAG/G,SAAK,mBAAmB,qBAAqB,IAAI,yBAAyB,KAAK,YAAY,KAAK,iBAAiB,CAAC;AAElH,QAAI,KAAK,mBAAmB,YAAY,OAAO;AAE7C,WAAK,mBAAmB,qBAAqB,IAAI,kBAAkB,KAAK,YAAY,KAAK,iBAAiB,CAAC;IAC7G;AAGA,SAAK,mBAAmB,aAAa,IAAI,UAAU,KAAK,UAAU,CAAC;AAGnE,SAAK,mBAAmB,kBAAkB,IAAI,eAAe,KAAK,YAAY,KAAK,SAAS,CAAC;AAG7F,UAAM,eAA8B,KAAK,eAAe,CAAA,GAAI,IAAI,CAAC,IAAI,UAAU,KAAK,mBAAmB,eAAe,KAAK,IAAI,GAAG,KAAK,UAAU,CAAC,CAAC;AACnJ,SAAK,cAAc,KAAK,WAAW,cAAc,KAAK,mBAAmB,eAAe,IAAI,mBAAmB,KAAK,YAAY;MAC9H,SAAS;KACV,CAAC;AAGF,UAAM,kBAAoC,KAAK,kBAAkB,CAAA,GAAI,IAAI,CAAC,IAAI,UAAU,KAAK,mBAAmB,kBAAkB,KAAK,IAAI,GAAG,KAAK,UAAU,CAAC,CAAC;AAC/J,SAAK,iBAAiB,KAAK,WAAW,iBAAiB,KAAK,mBAAmB,kBAAkB,IAAI,uBAAuB,KAAK,YAAY;MAC3I,SAAS;KACV,CAAC;AAGF,SAAK,mBAAmB,cAAc,IAAI,WAAW,KAAK,UAAU,CAAC;AAGpE,KAAC,KAAK,iBAAiB,CAAA,GAAI,QAAQ,CAAC,IAAI,UAAS;AAChD,YAAM,UAAU,KAAK,mBAAmB,kBAAkB,KAAK,IAAI,GAAG,KAAK,UAAU,CAAC;AAEtF,cAAQ,iBAAiB,QAAQ,CAAC,QAAO;AACvC,aAAK,iBAAiB,GAAG;MAC3B,CAAC;IACH,CAAC;AAGD,SAAK,YAAY,QAAQ,CAAC,IAAI,UAAS;AACrC,WAAK,WAAW,iBAAiB,IAAI,KAAK,mBAAmB,aAAa,KAAK,IAAI,GAAG,KAAK,UAAU,CAAC,CAAC;IACzG,CAAC;AAGD,QAAI,KAAK,YAAY,MAAM;AACzB,iBAAWA,SAAQ,OAAO,KAAK,KAAK,QAAQ,GAAG;AAC7C,cAAM,gBAAgB,KAAK,SAASA,KAAI;AACxC,cAAM,UAAe,cAAc,KAAK,UAAU;AAElD,YAAI,WAAW,MAAM;AACnB,eAAK,IAAI,MAAM,0DAA0DA,KAAI;AAC7E;QACF;AAEA,aAAK,SAASA,KAAe,IAAI;AACjC,aAAK,mBAAmBA,OAAM,OAAO;AAErC,YAAI,QAAQ,oBAAoB,KAAK,MAAM;AACzC,eAAK,IAAI,8CAA8CA,KAAI;AAC3D,yBAAe,KAAK,QAAQ,oBAAoB,CAAC;QACnD;AAEA,YAAI,QAAQ,iBAAiB,KAAK,MAAM;AACtC,eAAK,IAAI,2CAA2CA,KAAI;AACxD,sBAAY,KAAK,QAAQ,iBAAiB,CAAC;QAC7C;AAEA,YAAI,QAAQ,mBAAmB,KAAK,MAAM;AACxC,eAAK,IAAI,6CAA6CA,KAAI;AAC1D,kBAAQ,mBAAmB,EAAE,mBAAmB,QAAQ,CAAC,QAA8B;AACrF,iBAAK,iBAAiB,GAAG;UAC3B,CAAC;QACH;MACF;IACF;AAGA,6BAAyB,UAAU;EACrC;EAEQ,mBAAwBA,OAAc,WAAY;AACxD,QAAI,aAAa,MAAM;AACrB,WAAK,IAAI,MAAM,sCAAsCA,KAAI;IAC3D;AAGA,SAAK,WAAWA,KAAI,IAAI;AAExB,WAAO;EACT;;;;EAKA,MAAM,QAAK;AACT,QAAI,KAAK,WAAW,WAAW;AAC7B;IACF;AAEA,SAAK,SAAS;AAEd,SAAK,IAAI,oBAAoB;AAE7B,QAAI;AACF,YAAM,KAAK,WAAW,cAAa;AACnC,YAAM,KAAK,WAAW,MAAK;AAC3B,YAAM,KAAK,WAAW,aAAY;AAElC,WAAK,SAAS;AACd,WAAK,kBAAkB,SAAS,EAAE,QAAQ,KAAI,CAAE;AAChD,WAAK,IAAI,oBAAoB;IAC/B,SAAS,KAAU;AACjB,WAAK,IAAI,MAAM,qCAAqC,GAAG;AAEvD,WAAK,SAAS;AACd,YAAM,KAAK,KAAI;AACf,YAAM;IACR;EACF;;;;EAKA,MAAM,OAAI;AACR,QAAI,KAAK,WAAW,WAAW;AAC7B;IACF;AAEA,SAAK,IAAI,oBAAoB;AAE7B,SAAK,SAAS;AAEd,UAAM,KAAK,WAAW,aAAY;AAClC,UAAM,KAAK,WAAW,KAAI;AAC1B,UAAM,KAAK,WAAW,YAAW;AAEjC,SAAK,SAAS;AACd,SAAK,kBAAkB,QAAQ,EAAE,QAAQ,KAAI,CAAE;AAC/C,SAAK,IAAI,oBAAoB;EAC/B;EAEA,eAAgBC,SAAe;AAC7B,WAAO,KAAK,WAAW,kBAAkB,eAAeA,OAAM;EAChE;EAEA,eAAY;AACV,WAAO,KAAK,WAAW,kBAAkB,aAAY;EACvD;EAEA,WAAQ;AACN,UAAMC,WAAU,IAAI,QAAO;AAE3B,eAAW,QAAQ,KAAK,WAAW,kBAAkB,eAAc,GAAI;AACrE,MAAAA,SAAQ,IAAI,KAAK,UAAU;IAC7B;AAEA,WAAO,MAAM,KAAKA,QAAO;EAC3B;EAEA,MAAM,KAAM,MAAwCC,WAAuB,CAAA,GAAE;AAC3E,WAAO,KAAK,WAAW,kBAAkB,eAAe,MAAM;;MAE5D,UAAU;MACV,GAAGA;KACJ;EACH;EAEA,MAAM,aAAc,MAAwCC,YAA8BD,WAA4B,CAAA,GAAE;AACtH,QAAIC,cAAa,MAAM;AACrB,YAAM,IAAI,uBAAuB,6CAA6C;IAChF;AAEA,IAAAA,aAAY,MAAM,QAAQA,UAAS,IAAIA,aAAY,CAACA,UAAS;AAE7D,QAAIA,WAAU,WAAW,GAAG;AAC1B,YAAM,IAAI,uBAAuB,6CAA6C;IAChF;AAEA,UAAM,aAAa,MAAM,KAAK,KAAK,MAAMD,QAAO;AAEhD,WAAO,WAAW,UAAUC,YAAWD,QAAO;EAChD;EAEA,gBAAa;AACX,WAAO,KAAK,WAAW,eAAe,aAAY;EACpD;EAEA,eAAY;AACV,WAAO,KAAK,WAAW,UAAU,aAAY;EAC/C;EAEA,MAAM,OAAQ,MAA0BA,WAAwB,CAAA,GAAE;AAChE,QAAI,YAAY,IAAI,GAAG;AACrB,aAAO,iBAAiB,KAAK,UAAS,KAAM,EAAE;IAChD;AAEA,UAAM,KAAK,WAAW,kBAAkB,iBAAiB,MAAMA,QAAO;EACxE;EAUA,MAAM,aAAc,MAAcA,WAAwB,CAAA,GAAE;AAC1D,SAAK,IAAI,mBAAmB,IAAI;AAEhC,QAAI,KAAK,aAAa,MAAM;AAC1B,aAAO,KAAK;IACd;AAEA,QAAI;AACF,YAAM,WAAW,MAAM,KAAK,UAAU,IAAI,MAAMA,QAAO;AAEvD,UAAI,SAAS,GAAG,aAAa,MAAM;AACjC,eAAO,SAAS,GAAG;MACrB;IACF,SAAS,KAAU;AACjB,UAAI,IAAI,SAAS,iBAAiB;AAChC,cAAM;MACR;IACF;AAEA,UAAM,UAAU,OAAiB;MAC/B,WAAqB,MAAM;MAC3B,KAAK,YAAW,EAAG;KACpB;AAGD,UAAM,QAAQ,MAAM,KAAK,eAAe,IAAI,SAASA,QAAO;AAG5D,UAAME,aAAY,sBAAsB,KAAK;AAE7C,UAAM,KAAK,UAAU,MAAM,MAAM;MAC/B,WAAAA;OACCF,QAAO;AAEV,WAAOE;EACT;EAEA,MAAM,OAAQD,YAA8B,SAAwBD,UAA8B;AAChG,QAAI,CAAC,MAAM,QAAQC,UAAS,GAAG;AAC7B,MAAAA,aAAY,CAACA,UAAS;IACxB;AAEA,UAAM,QAAQ,IACZA,WAAU,IAAI,OAAM,aAAW;AAC7B,YAAM,KAAK,WAAW,UAAU,OAAO,UAAU,SAASD,QAAO;IACnE,CAAC,CAAC;EAEN;EAEA,MAAM,SAAUC,YAA8BD,UAAsB;AAClE,QAAI,CAAC,MAAM,QAAQC,UAAS,GAAG;AAC7B,MAAAA,aAAY,CAACA,UAAS;IACxB;AAEA,UAAM,QAAQ,IACZA,WAAU,IAAI,OAAM,aAAW;AAC7B,YAAM,KAAK,WAAW,UAAU,SAAS,UAAUD,QAAO;IAC5D,CAAC,CAAC;EAEN;EAEA,MAAM,SAAU,UAAkB,UAAoBA,UAAsB;AAC1E,WAAO,KAAK,WAAW,UAAU,SAAS,UAAU,UAAUA,QAAO;EACvE;EAEA,WAAY,IAAU;AACpB,SAAK,WAAW,UAAU,WAAW,EAAE;EACzC;EAEA,MAAM,WAAYG,YAAsBH,WAA6B,CAAA,GAAE;AACrE,WAAO,KAAK,WAAW,kBAAkB,WAAWG,YAAWH,QAAO;EACxE;;;;;EAMA,iBAAkB,KAA0B;AAC1C,UAAM,EAAE,QAAQ,KAAI,IAAK;AAEzB,QAAI,KAAK,GAAG,SAAQ,MAAO,KAAK,OAAO,SAAQ,GAAI;AACjD,WAAK,IAAI,MAAM,0CAA0C;AACzD;IACF;AAEA,SAAK,KAAK,WAAW,UAAU,MAAM,KAAK,IAAI;MAC5C,YAAY,KAAK;KAClB,EACE,MAAM,SAAM;AAAG,WAAK,IAAI,MAAM,GAAG;IAAE,CAAC;EACzC;;;;AChOF,eAAsB,aAAkDI,WAA4B,CAAA,GAAE;AACpG,EAAAA,SAAQ,eAAe,MAAM,gBAAgB,SAAS;AAEtD,QAAM,OAAO,IAAI,OAAY;IAC3B,GAAG,MAAM,eAAeA,QAAO;IAC/B,QAAQ,qBAAqBA,SAAQ,UAAU;GAChD;AAED,MAAIA,SAAQ,UAAU,OAAO;AAC3B,UAAM,KAAK,MAAK;EAClB;AAEA,SAAO;AACT;;;AC/MM,SAAU,OAAI;AAClB,QAAM,WAAW,OAAK;AACtB,MAAI,QAAQ;AAEZ,SAAO;IACL,MAAM,OAAM,WAAS;AACnB,UAAI,OAAO;AACT,cAAM,IAAI,MAAM,eAAe;;AAGjC,cAAQ;AACR,eAAS,QAAQ,MAAM;IACzB;IACA,QAAS,mBAAgB;AACvB,YAAM,SAAS,MAAM,SAAS;AAE9B,aAAQ;IACV,EAAC;;AAEL;;;ACnBM,SAAU,aAAU;AACxB,QAAM,IAAI,KAAI;AACd,QAAM,IAAI,KAAI;AACd,SAAO;IACL;MACE,QAAQ,EAAE;MACV,MAAM,EAAE;;IAEV;MACE,QAAQ,EAAE;MACV,MAAM,EAAE;;;AAGd;;;ACnBO,IAAM,6BAA6B;AACnC,IAAM,yCAAyC,6BAA6B;AAE5E,IAAM,oBAAoB,QAAQ,WAAW,SAAS,KAAK,iBAAiB;;;ACI7E,SAAU,QAAQ,GAAU;AAChC,SAAO,aAAa,cAAe,YAAY,OAAO,CAAC,KAAK,EAAE,YAAY,SAAS;AACrF;AAGM,SAAU,MAAM,GAAU;AAC9B,MAAI,OAAO,MAAM;AAAW,UAAM,IAAI,MAAM,yBAAyB,CAAC,EAAE;AAC1E;AAGM,SAAUC,SAAQ,GAAS;AAC/B,MAAI,CAAC,OAAO,cAAc,CAAC,KAAK,IAAI;AAAG,UAAM,IAAI,MAAM,oCAAoC,CAAC;AAC9F;AAGM,SAAU,OAAO,MAA8B,SAAiB;AACpE,MAAI,CAAC,QAAQ,CAAC;AAAG,UAAM,IAAI,MAAM,qBAAqB;AACtD,MAAI,QAAQ,SAAS,KAAK,CAAC,QAAQ,SAAS,EAAE,MAAM;AAClD,UAAM,IAAI,MAAM,mCAAmC,UAAU,kBAAkB,EAAE,MAAM;AAC3F;AAeM,SAAU,QAAQC,WAAe,gBAAgB,MAAI;AACzD,MAAIA,UAAS;AAAW,UAAM,IAAI,MAAM,kCAAkC;AAC1E,MAAI,iBAAiBA,UAAS;AAAU,UAAM,IAAI,MAAM,uCAAuC;AACjG;AAGM,SAAU,QAAQ,KAAUA,WAAa;AAC7C,SAAO,GAAG;AACV,QAAM,MAAMA,UAAS;AACrB,MAAI,IAAI,SAAS,KAAK;AACpB,UAAM,IAAI,MAAM,2DAA2D,GAAG;EAChF;AACF;AAoBM,SAAU,IAAI,KAAe;AACjC,SAAO,IAAI,YAAY,IAAI,QAAQ,IAAI,YAAY,KAAK,MAAM,IAAI,aAAa,CAAC,CAAC;AACnF;AAGM,SAAUC,UAAS,QAAoB;AAC3C,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,WAAO,CAAC,EAAE,KAAK,CAAC;EAClB;AACF;AAGM,SAAU,WAAW,KAAe;AACxC,SAAO,IAAI,SAAS,IAAI,QAAQ,IAAI,YAAY,IAAI,UAAU;AAChE;AAGO,IAAM,QAAiC,MAC5C,IAAI,WAAW,IAAI,YAAY,CAAC,SAAU,CAAC,EAAE,MAAM,EAAE,CAAC,MAAM,IAAK;AAGnE,IAAM,iBAA0C;;EAE9C,OAAO,WAAW,KAAK,CAAA,CAAE,EAAE,UAAU,cAAc,OAAO,WAAW,YAAY;GAAW;AAG9F,IAAM,QAAwB,MAAM,KAAK,EAAE,QAAQ,IAAG,GAAI,CAAC,GAAG,MAC5D,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC;AAmF3B,SAAU,YAAY,KAAW;AACrC,MAAI,OAAO,QAAQ;AAAU,UAAM,IAAI,MAAM,iBAAiB;AAC9D,SAAO,IAAI,WAAW,IAAI,YAAW,EAAG,OAAO,GAAG,CAAC;AACrD;AAiBM,SAAUC,SAAQ,MAAyB;AAC/C,MAAI,OAAO,SAAS;AAAU,WAAO,YAAY,IAAI;WAC5C,QAAQ,IAAI;AAAG,WAAO,UAAU,IAAI;;AACxC,UAAM,IAAI,MAAM,8BAA8B,OAAO,IAAI;AAC9D,SAAO;AACT;AA8CM,SAAU,UACdC,WACA,MAAQ;AAER,MAAI,QAAQ,QAAQ,OAAO,SAAS;AAAU,UAAM,IAAI,MAAM,yBAAyB;AACvF,QAAM,SAAS,OAAO,OAAOA,WAAU,IAAI;AAC3C,SAAO;AACT;AAGM,SAAU,WAAW,GAAe,GAAa;AACrD,MAAI,EAAE,WAAW,EAAE;AAAQ,WAAO;AAClC,MAAI,OAAO;AACX,WAAS,IAAI,GAAG,IAAI,EAAE,QAAQ;AAAK,YAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;AACrD,SAAO,SAAS;AAClB;AAiEO,IAAM,aAAa,CACxB,QACA,gBACS;AACT,WAAS,cAAc,QAAoB,MAAW;AAEpD,WAAO,GAAG;AAGV,QAAI,CAAC;AAAM,YAAM,IAAI,MAAM,iDAAiD;AAG5E,QAAI,OAAO,gBAAgB,QAAW;AACpC,YAAM,QAAQ,KAAK,CAAC;AACpB,UAAI,CAAC;AAAO,cAAM,IAAI,MAAM,qBAAqB;AACjD,UAAI,OAAO;AAAc,eAAO,KAAK;;AAChC,eAAO,OAAO,OAAO,WAAW;IACvC;AAGA,UAAM,OAAO,OAAO;AACpB,QAAI,QAAQ,KAAK,CAAC,MAAM,QAAW;AACjC,aAAO,KAAK,CAAC,CAAC;IAChB;AAEA,UAAM,SAAS,YAAY,KAAK,GAAG,IAAI;AACvC,UAAM,cAAc,CAAC,UAAkB,WAAuB;AAC5D,UAAI,WAAW,QAAW;AACxB,YAAI,aAAa;AAAG,gBAAM,IAAI,MAAM,6BAA6B;AACjE,eAAO,MAAM;MACf;IACF;AAEA,QAAI,SAAS;AACb,UAAM,WAAW;MACf,QAAQ,MAAkB,QAAmB;AAC3C,YAAI;AAAQ,gBAAM,IAAI,MAAM,8CAA8C;AAC1E,iBAAS;AACT,eAAO,IAAI;AACX,oBAAY,OAAO,QAAQ,QAAQ,MAAM;AACzC,eAAQ,OAA4B,QAAQ,MAAM,MAAM;MAC1D;MACA,QAAQ,MAAkB,QAAmB;AAC3C,eAAO,IAAI;AACX,YAAI,QAAQ,KAAK,SAAS;AACxB,gBAAM,IAAI,MAAM,uDAAuD,IAAI;AAC7E,oBAAY,OAAO,QAAQ,QAAQ,MAAM;AACzC,eAAQ,OAA4B,QAAQ,MAAM,MAAM;MAC1D;;AAGF,WAAO;EACT;AAEA,SAAO,OAAO,eAAe,MAAM;AACnC,SAAO;AACT;AAeM,SAAU,UACd,gBACA,KACA,cAAc,MAAI;AAElB,MAAI,QAAQ;AAAW,WAAO,IAAI,WAAW,cAAc;AAC3D,MAAI,IAAI,WAAW;AACjB,UAAM,IAAI,MAAM,qCAAqC,iBAAiB,YAAY,IAAI,MAAM;AAC9F,MAAI,eAAe,CAAC,YAAY,GAAG;AAAG,UAAM,IAAI,MAAM,iCAAiC;AACvF,SAAO;AACT;AAGM,SAAU,aACd,MACA,YACAC,QACAC,OAAa;AAEb,MAAI,OAAO,KAAK,iBAAiB;AAAY,WAAO,KAAK,aAAa,YAAYD,QAAOC,KAAI;AAC7F,QAAM,OAAO,OAAO,EAAE;AACtB,QAAM,WAAW,OAAO,UAAU;AAClC,QAAM,KAAK,OAAQD,UAAS,OAAQ,QAAQ;AAC5C,QAAM,KAAK,OAAOA,SAAQ,QAAQ;AAClC,QAAM,IAAIC,QAAO,IAAI;AACrB,QAAM,IAAIA,QAAO,IAAI;AACrB,OAAK,UAAU,aAAa,GAAG,IAAIA,KAAI;AACvC,OAAK,UAAU,aAAa,GAAG,IAAIA,KAAI;AACzC;AAEM,SAAU,WAAW,YAAoB,WAAmBA,OAAa;AAC7E,QAAMA,KAAI;AACV,QAAM,MAAM,IAAI,WAAW,EAAE;AAC7B,QAAM,OAAO,WAAW,GAAG;AAC3B,eAAa,MAAM,GAAG,OAAO,SAAS,GAAGA,KAAI;AAC7C,eAAa,MAAM,GAAG,OAAO,UAAU,GAAGA,KAAI;AAC9C,SAAO;AACT;AAGM,SAAU,YAAY,OAAiB;AAC3C,SAAO,MAAM,aAAa,MAAM;AAClC;AAGM,SAAU,UAAU,OAAiB;AACzC,SAAO,WAAW,KAAK,KAAK;AAC9B;;;ACvZA,IAAM,eAAe,CAAC,QAAgB,WAAW,KAAK,IAAI,MAAM,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;AAC/F,IAAM,UAAU,aAAa,kBAAkB;AAC/C,IAAM,UAAU,aAAa,kBAAkB;AAC/C,IAAM,aAAa,IAAI,OAAO;AAC9B,IAAM,aAAa,IAAI,OAAO;AAExB,SAAU,KAAK,GAAW,GAAS;AACvC,SAAQ,KAAK,IAAM,MAAO,KAAK;AACjC;AAkCA,SAASC,aAAY,GAAa;AAChC,SAAO,EAAE,aAAa,MAAM;AAC9B;AAGA,IAAM,YAAY;AAClB,IAAM,cAAc;AAIpB,IAAM,cAAc,KAAK,KAAK;AAE9B,IAAM,YAAY,IAAI,YAAW;AACjC,SAAS,UACP,MACA,OACA,KACA,OACA,MACA,QACA,SACA,QAAc;AAEd,QAAM,MAAM,KAAK;AACjB,QAAM,QAAQ,IAAI,WAAW,SAAS;AACtC,QAAM,MAAM,IAAI,KAAK;AAErB,QAAM,YAAYA,aAAY,IAAI,KAAKA,aAAY,MAAM;AACzD,QAAM,MAAM,YAAY,IAAI,IAAI,IAAI;AACpC,QAAM,MAAM,YAAY,IAAI,MAAM,IAAI;AACtC,WAAS,MAAM,GAAG,MAAM,KAAK,WAAW;AACtC,SAAK,OAAO,KAAK,OAAO,KAAK,SAAS,MAAM;AAC5C,QAAI,WAAW;AAAa,YAAM,IAAI,MAAM,uBAAuB;AACnE,UAAM,OAAO,KAAK,IAAI,WAAW,MAAM,GAAG;AAE1C,QAAI,aAAa,SAAS,WAAW;AACnC,YAAM,QAAQ,MAAM;AACpB,UAAI,MAAM,MAAM;AAAG,cAAM,IAAI,MAAM,6BAA6B;AAChE,eAAS,IAAI,GAAG,MAAc,IAAI,aAAa,KAAK;AAClD,eAAO,QAAQ;AACf,YAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;MAC/B;AACA,aAAO;AACP;IACF;AACA,aAAS,IAAI,GAAG,MAAM,IAAI,MAAM,KAAK;AACnC,aAAO,MAAM;AACb,aAAO,IAAI,IAAI,KAAK,IAAI,IAAI,MAAM,CAAC;IACrC;AACA,WAAO;EACT;AACF;AAGM,SAAU,aAAa,MAAoB,MAAgB;AAC/D,QAAM,EAAE,gBAAgB,eAAe,eAAe,cAAc,OAAM,IAAK,UAC7E,EAAE,gBAAgB,OAAO,eAAe,GAAG,cAAc,OAAO,QAAQ,GAAE,GAC1E,IAAI;AAEN,MAAI,OAAO,SAAS;AAAY,UAAM,IAAI,MAAM,yBAAyB;AACzE,EAAAC,SAAQ,aAAa;AACrB,EAAAA,SAAQ,MAAM;AACd,QAAM,YAAY;AAClB,QAAM,cAAc;AACpB,SAAO,CACL,KACA,OACA,MACA,QACA,UAAU,MACI;AACd,WAAO,GAAG;AACV,WAAO,KAAK;AACZ,WAAO,IAAI;AACX,UAAM,MAAM,KAAK;AACjB,QAAI,WAAW;AAAW,eAAS,IAAI,WAAW,GAAG;AACrD,WAAO,MAAM;AACb,IAAAA,SAAQ,OAAO;AACf,QAAI,UAAU,KAAK,WAAW;AAAa,YAAM,IAAI,MAAM,uBAAuB;AAClF,QAAI,OAAO,SAAS;AAClB,YAAM,IAAI,MAAM,gBAAgB,OAAO,MAAM,2BAA2B,GAAG,GAAG;AAChF,UAAM,UAAU,CAAA;AAKhB,QAAI,IAAI,IAAI;AACZ,QAAI;AACJ,QAAI;AACJ,QAAI,MAAM,IAAI;AACZ,cAAQ,KAAM,IAAI,UAAU,GAAG,CAAE;AACjC,cAAQ;IACV,WAAW,MAAM,MAAM,gBAAgB;AACrC,UAAI,IAAI,WAAW,EAAE;AACrB,QAAE,IAAI,GAAG;AACT,QAAE,IAAI,KAAK,EAAE;AACb,cAAQ;AACR,cAAQ,KAAK,CAAC;IAChB,OAAO;AACL,YAAM,IAAI,MAAM,wCAAwC,CAAC,EAAE;IAC7D;AASA,QAAI,CAACD,aAAY,KAAK;AAAG,cAAQ,KAAM,QAAQ,UAAU,KAAK,CAAE;AAEhE,UAAM,MAAM,IAAI,CAAC;AAEjB,QAAI,eAAe;AACjB,UAAI,MAAM,WAAW;AAAI,cAAM,IAAI,MAAM,sCAAsC;AAC/E,oBAAc,OAAO,KAAK,IAAI,MAAM,SAAS,GAAG,EAAE,CAAC,GAAG,GAAG;AACzD,cAAQ,MAAM,SAAS,EAAE;IAC3B;AAGA,UAAM,aAAa,KAAK;AACxB,QAAI,eAAe,MAAM;AACvB,YAAM,IAAI,MAAM,sBAAsB,UAAU,cAAc;AAGhE,QAAI,eAAe,IAAI;AACrB,YAAM,KAAK,IAAI,WAAW,EAAE;AAC5B,SAAG,IAAI,OAAO,eAAe,IAAI,KAAK,MAAM,MAAM;AAClD,cAAQ;AACR,cAAQ,KAAK,KAAK;IACpB;AACA,UAAM,MAAM,IAAI,KAAK;AACrB,cAAU,MAAM,OAAO,KAAK,KAAK,MAAM,QAAQ,SAAS,MAAM;AAC9D,IAAAE,OAAM,GAAG,OAAO;AAChB,WAAO;EACT;AACF;;;AC1MA,IAAM,SAAS,CAAC,GAAe,MAAe,EAAE,GAAG,IAAI,OAAU,EAAE,GAAG,IAAI,QAAS;AACnF,IAAM,WAAN,MAAc;EAUZ,YAAY,KAAU;AATb,SAAA,WAAW;AACX,SAAA,YAAY;AACb,SAAA,SAAS,IAAI,WAAW,EAAE;AAC1B,SAAA,IAAI,IAAI,YAAY,EAAE;AACtB,SAAA,IAAI,IAAI,YAAY,EAAE;AACtB,SAAA,MAAM,IAAI,YAAY,CAAC;AACvB,SAAA,MAAM;AACJ,SAAA,WAAW;AAGnB,UAAMC,SAAQ,GAAG;AACjB,WAAO,KAAK,EAAE;AACd,UAAM,KAAK,OAAO,KAAK,CAAC;AACxB,UAAM,KAAK,OAAO,KAAK,CAAC;AACxB,UAAM,KAAK,OAAO,KAAK,CAAC;AACxB,UAAM,KAAK,OAAO,KAAK,CAAC;AACxB,UAAM,KAAK,OAAO,KAAK,CAAC;AACxB,UAAM,KAAK,OAAO,KAAK,EAAE;AACzB,UAAM,KAAK,OAAO,KAAK,EAAE;AACzB,UAAM,KAAK,OAAO,KAAK,EAAE;AAGzB,SAAK,EAAE,CAAC,IAAI,KAAK;AACjB,SAAK,EAAE,CAAC,KAAM,OAAO,KAAO,MAAM,KAAM;AACxC,SAAK,EAAE,CAAC,KAAM,OAAO,KAAO,MAAM,KAAM;AACxC,SAAK,EAAE,CAAC,KAAM,OAAO,IAAM,MAAM,KAAM;AACvC,SAAK,EAAE,CAAC,KAAM,OAAO,IAAM,MAAM,MAAO;AACxC,SAAK,EAAE,CAAC,IAAK,OAAO,IAAK;AACzB,SAAK,EAAE,CAAC,KAAM,OAAO,KAAO,MAAM,KAAM;AACxC,SAAK,EAAE,CAAC,KAAM,OAAO,KAAO,MAAM,KAAM;AACxC,SAAK,EAAE,CAAC,KAAM,OAAO,IAAM,MAAM,KAAM;AACvC,SAAK,EAAE,CAAC,IAAK,OAAO,IAAK;AACzB,aAAS,IAAI,GAAG,IAAI,GAAG;AAAK,WAAK,IAAI,CAAC,IAAI,OAAO,KAAK,KAAK,IAAI,CAAC;EAClE;EAEQ,QAAQ,MAAkB,QAAgB,SAAS,OAAK;AAC9D,UAAM,QAAQ,SAAS,IAAI,KAAK;AAChC,UAAM,EAAE,GAAG,EAAC,IAAK;AACjB,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AACd,UAAM,KAAK,EAAE,CAAC;AAEd,UAAM,KAAK,OAAO,MAAM,SAAS,CAAC;AAClC,UAAM,KAAK,OAAO,MAAM,SAAS,CAAC;AAClC,UAAM,KAAK,OAAO,MAAM,SAAS,CAAC;AAClC,UAAM,KAAK,OAAO,MAAM,SAAS,CAAC;AAClC,UAAM,KAAK,OAAO,MAAM,SAAS,CAAC;AAClC,UAAM,KAAK,OAAO,MAAM,SAAS,EAAE;AACnC,UAAM,KAAK,OAAO,MAAM,SAAS,EAAE;AACnC,UAAM,KAAK,OAAO,MAAM,SAAS,EAAE;AAEnC,QAAI,KAAK,EAAE,CAAC,KAAK,KAAK;AACtB,QAAI,KAAK,EAAE,CAAC,MAAO,OAAO,KAAO,MAAM,KAAM;AAC7C,QAAI,KAAK,EAAE,CAAC,MAAO,OAAO,KAAO,MAAM,KAAM;AAC7C,QAAI,KAAK,EAAE,CAAC,MAAO,OAAO,IAAM,MAAM,KAAM;AAC5C,QAAI,KAAK,EAAE,CAAC,MAAO,OAAO,IAAM,MAAM,MAAO;AAC7C,QAAI,KAAK,EAAE,CAAC,KAAM,OAAO,IAAK;AAC9B,QAAI,KAAK,EAAE,CAAC,MAAO,OAAO,KAAO,MAAM,KAAM;AAC7C,QAAI,KAAK,EAAE,CAAC,MAAO,OAAO,KAAO,MAAM,KAAM;AAC7C,QAAI,KAAK,EAAE,CAAC,MAAO,OAAO,IAAM,MAAM,KAAM;AAC5C,QAAI,KAAK,EAAE,CAAC,KAAM,OAAO,IAAK;AAE9B,QAAI,IAAI;AAER,QAAI,KAAK,IAAI,KAAK,KAAK,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI;AACjF,QAAI,OAAO;AACX,UAAM;AACN,UAAM,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI;AAChF,SAAK,OAAO;AACZ,UAAM;AAEN,QAAI,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI;AAC3E,QAAI,OAAO;AACX,UAAM;AACN,UAAM,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI;AAChF,SAAK,OAAO;AACZ,UAAM;AAEN,QAAI,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,IAAI,MAAM,MAAM,IAAI;AACrE,QAAI,OAAO;AACX,UAAM;AACN,UAAM,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI;AAChF,SAAK,OAAO;AACZ,UAAM;AAEN,QAAI,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,IAAI;AAC/D,QAAI,OAAO;AACX,UAAM;AACN,UAAM,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI;AAChF,SAAK,OAAO;AACZ,UAAM;AAEN,QAAI,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC1D,QAAI,OAAO;AACX,UAAM;AACN,UAAM,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI;AAChF,SAAK,OAAO;AACZ,UAAM;AAEN,QAAI,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC1D,QAAI,OAAO;AACX,UAAM;AACN,UAAM,KAAK,KAAK,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI;AAC1E,SAAK,OAAO;AACZ,UAAM;AAEN,QAAI,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC1D,QAAI,OAAO;AACX,UAAM;AACN,UAAM,KAAK,KAAK,KAAK,KAAK,MAAM,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI;AACpE,SAAK,OAAO;AACZ,UAAM;AAEN,QAAI,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC1D,QAAI,OAAO;AACX,UAAM;AACN,UAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,IAAI,MAAM,MAAM,IAAI;AAC9D,SAAK,OAAO;AACZ,UAAM;AAEN,QAAI,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC1D,QAAI,OAAO;AACX,UAAM;AACN,UAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,IAAI;AACxD,SAAK,OAAO;AACZ,UAAM;AAEN,QAAI,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC1D,QAAI,OAAO;AACX,UAAM;AACN,UAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AACnD,SAAK,OAAO;AACZ,UAAM;AAEN,SAAM,KAAK,KAAK,IAAK;AACrB,QAAK,IAAI,KAAM;AACf,SAAK,IAAI;AACT,QAAI,MAAM;AACV,UAAM;AAEN,MAAE,CAAC,IAAI;AACP,MAAE,CAAC,IAAI;AACP,MAAE,CAAC,IAAI;AACP,MAAE,CAAC,IAAI;AACP,MAAE,CAAC,IAAI;AACP,MAAE,CAAC,IAAI;AACP,MAAE,CAAC,IAAI;AACP,MAAE,CAAC,IAAI;AACP,MAAE,CAAC,IAAI;AACP,MAAE,CAAC,IAAI;EACT;EAEQ,WAAQ;AACd,UAAM,EAAE,GAAG,IAAG,IAAK;AACnB,UAAM,IAAI,IAAI,YAAY,EAAE;AAC5B,QAAI,IAAI,EAAE,CAAC,MAAM;AACjB,MAAE,CAAC,KAAK;AACR,aAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,QAAE,CAAC,KAAK;AACR,UAAI,EAAE,CAAC,MAAM;AACb,QAAE,CAAC,KAAK;IACV;AACA,MAAE,CAAC,KAAK,IAAI;AACZ,QAAI,EAAE,CAAC,MAAM;AACb,MAAE,CAAC,KAAK;AACR,MAAE,CAAC,KAAK;AACR,QAAI,EAAE,CAAC,MAAM;AACb,MAAE,CAAC,KAAK;AACR,MAAE,CAAC,KAAK;AAER,MAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACd,QAAI,EAAE,CAAC,MAAM;AACb,MAAE,CAAC,KAAK;AACR,aAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,QAAE,CAAC,IAAI,EAAE,CAAC,IAAI;AACd,UAAI,EAAE,CAAC,MAAM;AACb,QAAE,CAAC,KAAK;IACV;AACA,MAAE,CAAC,KAAK,KAAK;AAEb,QAAI,QAAQ,IAAI,KAAK;AACrB,aAAS,IAAI,GAAG,IAAI,IAAI;AAAK,QAAE,CAAC,KAAK;AACrC,WAAO,CAAC;AACR,aAAS,IAAI,GAAG,IAAI,IAAI;AAAK,QAAE,CAAC,IAAK,EAAE,CAAC,IAAI,OAAQ,EAAE,CAAC;AACvD,MAAE,CAAC,KAAK,EAAE,CAAC,IAAK,EAAE,CAAC,KAAK,MAAO;AAC/B,MAAE,CAAC,KAAM,EAAE,CAAC,MAAM,IAAM,EAAE,CAAC,KAAK,MAAO;AACvC,MAAE,CAAC,KAAM,EAAE,CAAC,MAAM,IAAM,EAAE,CAAC,KAAK,KAAM;AACtC,MAAE,CAAC,KAAM,EAAE,CAAC,MAAM,IAAM,EAAE,CAAC,KAAK,KAAM;AACtC,MAAE,CAAC,KAAM,EAAE,CAAC,MAAM,KAAO,EAAE,CAAC,KAAK,IAAM,EAAE,CAAC,KAAK,MAAO;AACtD,MAAE,CAAC,KAAM,EAAE,CAAC,MAAM,IAAM,EAAE,CAAC,KAAK,MAAO;AACvC,MAAE,CAAC,KAAM,EAAE,CAAC,MAAM,IAAM,EAAE,CAAC,KAAK,KAAM;AACtC,MAAE,CAAC,KAAM,EAAE,CAAC,MAAM,IAAM,EAAE,CAAC,KAAK,KAAM;AAEtC,QAAI,IAAI,EAAE,CAAC,IAAI,IAAI,CAAC;AACpB,MAAE,CAAC,IAAI,IAAI;AACX,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,WAAO,EAAE,CAAC,IAAI,IAAI,CAAC,IAAK,MAAM,MAAM,MAAO;AAC3C,QAAE,CAAC,IAAI,IAAI;IACb;AACA,IAAAC,OAAM,CAAC;EACT;EACA,OAAO,MAAW;AAChB,YAAQ,IAAI;AACZ,WAAOD,SAAQ,IAAI;AACnB,WAAO,IAAI;AACX,UAAM,EAAE,QAAQ,SAAQ,IAAK;AAC7B,UAAM,MAAM,KAAK;AAEjB,aAAS,MAAM,GAAG,MAAM,OAAO;AAC7B,YAAM,OAAO,KAAK,IAAI,WAAW,KAAK,KAAK,MAAM,GAAG;AAEpD,UAAI,SAAS,UAAU;AACrB,eAAO,YAAY,MAAM,KAAK,OAAO;AAAU,eAAK,QAAQ,MAAM,GAAG;AACrE;MACF;AACA,aAAO,IAAI,KAAK,SAAS,KAAK,MAAM,IAAI,GAAG,KAAK,GAAG;AACnD,WAAK,OAAO;AACZ,aAAO;AACP,UAAI,KAAK,QAAQ,UAAU;AACzB,aAAK,QAAQ,QAAQ,GAAG,KAAK;AAC7B,aAAK,MAAM;MACb;IACF;AACA,WAAO;EACT;EACA,UAAO;AACL,IAAAC,OAAM,KAAK,GAAG,KAAK,GAAG,KAAK,QAAQ,KAAK,GAAG;EAC7C;EACA,WAAW,KAAe;AACxB,YAAQ,IAAI;AACZ,YAAQ,KAAK,IAAI;AACjB,SAAK,WAAW;AAChB,UAAM,EAAE,QAAQ,EAAC,IAAK;AACtB,QAAI,EAAE,IAAG,IAAK;AACd,QAAI,KAAK;AACP,aAAO,KAAK,IAAI;AAChB,aAAO,MAAM,IAAI;AAAO,eAAO,GAAG,IAAI;AACtC,WAAK,QAAQ,QAAQ,GAAG,IAAI;IAC9B;AACA,SAAK,SAAQ;AACb,QAAI,OAAO;AACX,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,UAAI,MAAM,IAAI,EAAE,CAAC,MAAM;AACvB,UAAI,MAAM,IAAI,EAAE,CAAC,MAAM;IACzB;AACA,WAAO;EACT;EACA,SAAM;AACJ,UAAM,EAAE,QAAQ,UAAS,IAAK;AAC9B,SAAK,WAAW,MAAM;AACtB,UAAM,MAAM,OAAO,MAAM,GAAG,SAAS;AACrC,SAAK,QAAO;AACZ,WAAO;EACT;;AAII,SAAU,uBACd,UAAiC;AAOjC,QAAM,QAAQ,CAAC,KAAY,QAA2B,SAAS,GAAG,EAAE,OAAOD,SAAQ,GAAG,CAAC,EAAE,OAAM;AAC/F,QAAM,MAAM,SAAS,IAAI,WAAW,EAAE,CAAC;AACvC,QAAM,YAAY,IAAI;AACtB,QAAM,WAAW,IAAI;AACrB,QAAM,SAAS,CAAC,QAAe,SAAS,GAAG;AAC3C,SAAO;AACT;AAGO,IAAM,WAAkB,uBAAuB,CAAC,QAAQ,IAAI,SAAS,GAAG,CAAC;;;ACjRhF,SAAS,WACP,GAAgB,GAAgB,GAAgB,KAAkB,KAAa,SAAS,IAAE;AAE1F,MAAI,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAC/C,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAC7C,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAC7C,MAAM,KAAK,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC;AAE9C,MAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KACvC,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KACvC,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KACvC,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM;AAC3C,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG;AAClC,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAC9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAE9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAC9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAE9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAC9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAE9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAC9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAE9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAC9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAE9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAC9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAE9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAC9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAE9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAC9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;EAChD;AAEA,MAAI,KAAK;AACT,MAAI,IAAI,IAAK,MAAM,MAAO;AAAG,MAAI,IAAI,IAAK,MAAM,MAAO;AACvD,MAAI,IAAI,IAAK,MAAM,MAAO;AAAG,MAAI,IAAI,IAAK,MAAM,MAAO;AACvD,MAAI,IAAI,IAAK,MAAM,MAAO;AAAG,MAAI,IAAI,IAAK,MAAM,MAAO;AACvD,MAAI,IAAI,IAAK,MAAM,MAAO;AAAG,MAAI,IAAI,IAAK,MAAM,MAAO;AACvD,MAAI,IAAI,IAAK,MAAM,MAAO;AAAG,MAAI,IAAI,IAAK,MAAM,MAAO;AACvD,MAAI,IAAI,IAAK,MAAM,MAAO;AAAG,MAAI,IAAI,IAAK,MAAM,MAAO;AACvD,MAAI,IAAI,IAAK,MAAM,MAAO;AAAG,MAAI,IAAI,IAAK,MAAM,MAAO;AACvD,MAAI,IAAI,IAAK,MAAM,MAAO;AAAG,MAAI,IAAI,IAAK,MAAM,MAAO;AACzD;AAQM,SAAU,QACd,GAAgB,GAAgB,GAAgB,KAAgB;AAEhE,MAAI,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAC7C,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAC7C,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAC7C,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC;AACjD,WAAS,IAAI,GAAG,IAAI,IAAI,KAAK,GAAG;AAC9B,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAC9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAE9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAC9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAE9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAC9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAE9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAC9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAE9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAC9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAE9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAC9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAE9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAC9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAE9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,EAAE;AAC/C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;AAC9C,UAAO,MAAM,MAAO;AAAG,UAAM,KAAK,MAAM,KAAK,CAAC;EAChD;AACA,MAAI,KAAK;AACT,MAAI,IAAI,IAAI;AAAK,MAAI,IAAI,IAAI;AAC7B,MAAI,IAAI,IAAI;AAAK,MAAI,IAAI,IAAI;AAC7B,MAAI,IAAI,IAAI;AAAK,MAAI,IAAI,IAAI;AAC7B,MAAI,IAAI,IAAI;AAAK,MAAI,IAAI,IAAI;AAC/B;AAIO,IAAM,eAA0C,aAAa,YAAY;EAC9E,cAAc;EACd,eAAe;EACf,gBAAgB;CACjB;AAKM,IAAM,WAAsC,aAAa,YAAY;EAC1E,cAAc;EACd,eAAe;EACf,gBAAgB;CACjB;AAOM,IAAM,YAAuC,aAAa,YAAY;EAC3E,cAAc;EACd,eAAe;EACf,eAAe;EACf,gBAAgB;CACjB;AAKM,IAAM,UAAqC,aAAa,YAAY;EACzE,cAAc;EACd,eAAe;EACf,QAAQ;CACT;AAKM,IAAM,WAAsC,aAAa,YAAY;EAC1E,cAAc;EACd,eAAe;EACf,QAAQ;CACT;AAED,IAAM,UAA0B,IAAI,WAAW,EAAE;AAEjD,IAAM,eAAe,CAAC,GAAuC,QAAmB;AAC9E,IAAE,OAAO,GAAG;AACZ,QAAM,OAAO,IAAI,SAAS;AAC1B,MAAI;AAAM,MAAE,OAAO,QAAQ,SAAS,IAAI,CAAC;AAC3C;AAEA,IAAM,UAA0B,IAAI,WAAW,EAAE;AACjD,SAAS,WACP,IACA,KACA,OACA,MACA,KAAgB;AAEhB,QAAM,UAAU,GAAG,KAAK,OAAO,OAAO;AACtC,QAAM,IAAI,SAAS,OAAO,OAAO;AACjC,MAAI;AAAK,iBAAa,GAAG,GAAG;AAC5B,eAAa,GAAG,IAAI;AACpB,QAAM,MAAM,WAAW,KAAK,QAAQ,MAAM,IAAI,SAAS,GAAG,IAAI;AAC9D,IAAE,OAAO,GAAG;AACZ,QAAM,MAAM,EAAE,OAAM;AACpB,EAAAE,OAAM,SAAS,GAAG;AAClB,SAAO;AACT;AAWO,IAAM,iBACX,CAAC,cACD,CAAC,KAAiB,OAAmB,QAAsC;AACzE,QAAM,YAAY;AAClB,SAAO;IACL,QAAQ,WAAuB,QAAmB;AAChD,YAAM,UAAU,UAAU;AAC1B,eAAS,UAAU,UAAU,WAAW,QAAQ,KAAK;AACrD,aAAO,IAAI,SAAS;AACpB,YAAM,SAAS,OAAO,SAAS,GAAG,CAAC,SAAS;AAC5C,gBAAU,KAAK,OAAO,QAAQ,QAAQ,CAAC;AACvC,YAAM,MAAM,WAAW,WAAW,KAAK,OAAO,QAAQ,GAAG;AACzD,aAAO,IAAI,KAAK,OAAO;AACvB,MAAAA,OAAM,GAAG;AACT,aAAO;IACT;IACA,QAAQ,YAAwB,QAAmB;AACjD,eAAS,UAAU,WAAW,SAAS,WAAW,QAAQ,KAAK;AAC/D,YAAM,OAAO,WAAW,SAAS,GAAG,CAAC,SAAS;AAC9C,YAAM,YAAY,WAAW,SAAS,CAAC,SAAS;AAChD,YAAM,MAAM,WAAW,WAAW,KAAK,OAAO,MAAM,GAAG;AACvD,UAAI,CAAC,WAAW,WAAW,GAAG;AAAG,cAAM,IAAI,MAAM,aAAa;AAC9D,aAAO,IAAI,WAAW,SAAS,GAAG,CAAC,SAAS,CAAC;AAC7C,gBAAU,KAAK,OAAO,QAAQ,QAAQ,CAAC;AACvC,MAAAA,OAAM,GAAG;AACT,aAAO;IACT;;AAEJ;AAQK,IAAM,mBAA8C,WACzD,EAAE,WAAW,IAAI,aAAa,IAAI,WAAW,GAAE,GAC/C,eAAe,QAAQ,CAAC;AAQnB,IAAM,oBAA+C,WAC1D,EAAE,WAAW,IAAI,aAAa,IAAI,WAAW,GAAE,GAC/C,eAAe,SAAS,CAAC;;;ACjRrB,SAAU,QAAQ,MAAa,KAAY,MAAY;AAC3D,QAAM,IAAI;AAIV,MAAI,SAAS;AAAW,WAAO,IAAI,WAAW,KAAK,SAAS;AAC5D,SAAO,KAAK,MAAM,QAAQ,IAAI,GAAG,QAAQ,GAAG,CAAC;AAC/C;AAEA,IAAM,eAA+B,WAAW,KAAK,CAAC,CAAC,CAAC;AACxD,IAAMC,gBAA+B,WAAW,GAAE;AAS5C,SAAU,OAAO,MAAa,KAAY,MAAcC,WAAiB,IAAE;AAC/E,QAAM,IAAI;AACV,UAAQA,QAAM;AACd,QAAM,OAAO,KAAK;AAClB,MAAIA,WAAS,MAAM;AAAM,UAAM,IAAI,MAAM,iCAAiC;AAC1E,QAAM,SAAS,KAAK,KAAKA,WAAS,IAAI;AACtC,MAAI,SAAS;AAAW,WAAOD;AAE/B,QAAM,MAAM,IAAI,WAAW,SAAS,IAAI;AAExC,QAAM,OAAO,KAAK,OAAO,MAAM,GAAG;AAClC,QAAM,UAAU,KAAK,WAAU;AAC/B,QAAM,IAAI,IAAI,WAAW,KAAK,SAAS;AACvC,WAAS,UAAU,GAAG,UAAU,QAAQ,WAAW;AACjD,iBAAa,CAAC,IAAI,UAAU;AAG5B,YAAQ,OAAO,YAAY,IAAIA,gBAAe,CAAC,EAC5C,OAAO,IAAI,EACX,OAAO,YAAY,EACnB,WAAW,CAAC;AACf,QAAI,IAAI,GAAG,OAAO,OAAO;AACzB,SAAK,WAAW,OAAO;EACzB;AACA,OAAK,QAAO;AACZ,UAAQ,QAAO;AACf,QAAM,GAAG,YAAY;AACrB,SAAO,IAAI,MAAM,GAAGC,QAAM;AAC5B;;;ACtDO,IAAM,eAAiC;EAC5C,WAAY,MAAiC;AAC3C,WAAO,OAAO,KAAK,SAAQ,CAAE;EAC/B;EAEA,QAAS,IAAgB,KAAe;AACtC,UAAM,MAAM,QAAQ,QAAQ,KAAK,EAAE;AACnC,UAAM,aAAa,OAAO,QAAQ,KAAK,QAAW,EAAE;AACpD,UAAM,MAAM;AAEZ,UAAM,KAAK,IAAI,SAAS,GAAG,EAAE;AAC7B,UAAM,KAAK,IAAI,SAAS,IAAI,EAAE;AAC9B,UAAM,KAAK,IAAI,SAAS,IAAI,EAAE;AAE9B,WAAO,CAAC,IAAI,IAAI,EAAE;EACpB;EAEA,wBAAqB;AACnB,UAAM,YAAY,OAAO,MAAM,iBAAgB;AAC/C,UAAMC,aAAY,OAAO,aAAa,SAAS;AAE/C,WAAO;MACL,WAAAA;MACA,YAAY;;EAEhB;EAEA,8BAA+B,MAAgB;AAC7C,UAAMA,aAAY,OAAO,aAAa,IAAI;AAE1C,WAAO;MACL,WAAAA;MACA,YAAY;;EAEhB;EAEA,wBAAyB,YAAyCA,YAAsC;AACtG,WAAO,OAAO,gBAAgB,WAAW,SAAQ,GAAIA,WAAU,SAAQ,CAAE;EAC3E;EAEA,wBAAyB,WAAwC,OAAmB,IAAgB,GAAa;AAC/G,WAAO,iBAAiB,GAAG,OAAO,EAAE,EAAE,QAAQ,UAAU,SAAQ,CAAE;EACpE;EAEA,wBAAyB,YAAyC,OAAmB,IAAgB,GAAe,KAAgB;AAClI,WAAO,iBAAiB,GAAG,OAAO,EAAE,EAAE,QAAQ,WAAW,SAAQ,GAAI,GAAG;EAC1E;;;;ACpDK,IAAM,gBAAgB;;;ACevB,SAAU,WAAYC,SAAwB;AAClD,SAAO;IACL,iBAAiBA,QAAO;IACxB,IAAI,CAAC,SAASC,eAAcD,QAAO,wBAAwB,QAAQ,YAAYC,UAAS,EAAE,SAAS,GAAG,EAAE;IACxG,SAASD,QAAO;IAChB,SAASA,QAAO;IAChB,MAAMA,QAAO;IACb,MAAMA,QAAO;;AAEjB;;;ACtBO,IAAM,iBAAiB,CAACE,WAA6B;AAC1D,QAAM,SAAS,YAAsB,CAAC;AACtC,SAAO,CAAC,IAAIA,UAAS;AACrB,SAAO,CAAC,IAAIA;AACZ,SAAO;AACT;AACA,eAAe,QAAQ;AAEhB,IAAM,iBAAwC,CAAC,SAA6C;AACjG,MAAI,KAAK,SAAS,GAAG;AAAE,UAAM,WAAW,0BAA0B;EAAE;AAEpE,MAAI,gBAAgB,YAAY;AAC9B,QAAIA,SAAQ;AACZ,IAAAA,UAAS,KAAK,CAAC,KAAK;AACpB,IAAAA,UAAS,KAAK,CAAC;AACf,WAAOA;EACT;AAEA,SAAO,KAAK,UAAU,CAAC;AACzB;AACA,eAAe,QAAQ;;;ACpBjB,SAAU,gBAAiB,SAAgB;AAC/C,SAAO;IACL,sBAAsB,QAAQ,gBAC5B,4CAA4C;MAC1C,MAAM;KACP;IAEH,mBAAmB,QAAQ,gBACzB,wCAAwC;MACtC,MAAM;KACP;IAEH,kBAAkB,QAAQ,gBACxB,wCAAwC;MACtC,MAAM;KACP;IAEH,kBAAkB,QAAQ,gBACxB,wCAAwC;MACtC,MAAM;KACP;IAEH,eAAe,QAAQ,gBACrB,qCAAqC;MACnC,MAAM;KACP;;AAEP;;;ACxBM,SAAU,mBAAoB,GAAwB,WAAiB;AAC3E,MAAI,CAAC,UAAU,WAAW,CAAC,mBAAmB;AAC5C;EACF;AAEA,MAAI,GAAG;AACL,cAAU,2BAA2B,SAAmB,EAAE,WAAW,KAAK,CAAC,EAAE;AAC7E,cAAU,4BAA4B,SAAmB,EAAE,YAAY,KAAK,CAAC,EAAE;EACjF,OAAO;AACL,cAAU,4BAA4B;EACxC;AACF;AAEM,SAAU,sBAAuB,GAAwB,WAAiB;AAC9E,MAAI,CAAC,UAAU,WAAW,CAAC,mBAAmB;AAC5C;EACF;AAEA,MAAI,GAAG;AACL,cAAU,8BAA8B,SAAmB,EAAE,WAAW,KAAK,CAAC,EAAE;AAChF,cAAU,+BAA+B,SAAmB,EAAE,YAAY,KAAK,CAAC,EAAE;EACpF,OAAO;AACL,cAAU,+BAA+B;EAC3C;AACF;AAEM,SAAU,mBAAoB,IAA6C,WAAiB;AAChG,MAAI,CAAC,UAAU,WAAW,CAAC,mBAAmB;AAC5C;EACF;AAEA,MAAI,IAAI;AACN,cAAU,4BAA4B,SAAmB,GAAG,SAAQ,GAAI,KAAK,CAAC,EAAE;EAClF,OAAO;AACL,cAAU,mCAAmC;EAC/C;AACF;AAEM,SAAU,sBAAuB,IAA6C,WAAiB;AACnG,MAAI,CAAC,UAAU,WAAW,CAAC,mBAAmB;AAC5C;EACF;AAEA,MAAI,IAAI;AACN,cAAU,+BAA+B,SAAmB,GAAG,SAAQ,GAAI,KAAK,CAAC,EAAE;EACrF,OAAO;AACL,cAAU,gCAAgC;EAC5C;AACF;AAEM,SAAU,eAAgB,KAAkB,KAAkB,WAAiB;AACnF,MAAI,CAAC,UAAU,WAAW,CAAC,mBAAmB;AAC5C;EACF;AAEA,YAAU,kBAAkB,IAAI,EAAE,UAAS,CAAE,IAAI,IAAI,KAAK,SAAmB,IAAI,GAAG,KAAK,CAAC,EAAE;AAC5F,YAAU,kBAAkB,IAAI,EAAE,UAAS,CAAE,IAAI,IAAI,KAAK,SAAmB,IAAI,GAAG,KAAK,CAAC,EAAE;AAC9F;;;AC1DM,SAAU,IAAK,GAAe,GAAa;AAC/C,MAAI,EAAE,WAAW,EAAE,QAAQ;AACzB,UAAM,IAAI,MAAM,oCAAoC;EACtD;AAEA,QAAM,SAAS,YAAY,EAAE,MAAM;AAEnC,WAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AACjC,WAAO,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;EACxB;AAEA,SAAO,aAAa,MAAM;AAC5B;;;AClBM,IAAOC,8BAAP,MAAO,oCAAmC,MAAK;EAC5C;EAEP,YAAaC,WAAU,2BAAyB;AAC9C,UAAMA,QAAO;AACb,SAAK,OAAO,4BAA2B;EACzC;EAEA,OAAgB,OAAO;;;;ACNlB,IAAM,YAAY;AAOlB,IAAM,YAAY;AAEzB,IAAM,gBAAgB;AAMhB,IAAO,QAAP,MAAY;EACR;EACS;EACA;EAEjB,YAAa,IAAI,WAAS;AACxB,SAAK,IAAI;AACT,SAAK,QAAQ,MAAgB,EAAE;AAC/B,SAAK,OAAO,IAAI,SAAS,KAAK,MAAM,QAAQ,KAAK,MAAM,YAAY,KAAK,MAAM,UAAU;AACxF,SAAK,KAAK,UAAU,GAAG,GAAG,IAAI;EAChC;EAEA,YAAS;AACP,SAAK;AAEL,SAAK,KAAK,UAAU,GAAG,KAAK,GAAG,IAAI;EACrC;EAEA,WAAQ;AACN,WAAO,KAAK;EACd;EAEA,YAAS;AACP,WAAO,KAAK;EACd;EAEA,cAAW;AACT,QAAI,KAAK,IAAI,WAAW;AACtB,YAAM,IAAI,MAAM,aAAa;IAC/B;EACF;;;;ACrCK,IAAM,UAAU,MAAgB,CAAC;AAMlC,IAAO,cAAP,MAAkB;EACf;EACA;EACU;EAEjB,YAAaC,SAAiB,IAA4B,QAAW,IAAI,GAAC;AACxE,SAAK,SAASA;AACd,SAAK,IAAI;AACT,SAAK,IAAI,IAAI,MAAM,CAAC;EACtB;EAEO,SAAM;AACX,WAAO,QAAQ,KAAK,CAAC;EACvB;EAEO,cAAe,IAAgB,WAAsC;AAC1E,QAAI,CAAC,KAAK,OAAM,GAAI;AAClB,aAAO;IACT;AAEA,SAAK,EAAE,YAAW;AAClB,UAAM,IAAI,KAAK,OAAO,QAAQ,WAAW,KAAK,EAAE,SAAQ,GAAI,IAAI,KAAK,CAAC;AACtE,SAAK,EAAE,UAAS;AAEhB,WAAO;EACT;EAEO,cAAe,IAAgB,YAAyC,KAAgB;AAC7F,QAAI,CAAC,KAAK,OAAM,GAAI;AAClB,aAAO;IACT;AAEA,SAAK,EAAE,YAAW;AAClB,UAAM,YAAY,KAAK,OAAO,QAAQ,YAAY,KAAK,EAAE,SAAQ,GAAI,IAAI,KAAK,GAAG,GAAG;AACpF,SAAK,EAAE,UAAS;AAEhB,WAAO;EACT;;AAGI,IAAO,iBAAP,MAAqB;EAClB;EACA;EACA;EACU;EAEjB,YAAaA,SAAiB,cAAoB;AAChD,SAAK,SAASA;AAEd,UAAM,oBAAoB,WAAqB,cAAc,OAAO;AACpE,SAAK,IAAI,iBAAiBA,SAAQ,iBAAiB;AAEnD,SAAK,KAAK,KAAK;AACf,SAAK,KAAK,IAAI,YAAYA,OAAM;EAClC;EAEO,OAAQ,KAAe;AAC5B,UAAM,CAAC,IAAI,KAAK,IAAI,KAAK,OAAO,KAAK,KAAK,IAAI,GAAG;AACjD,SAAK,KAAK;AACV,SAAK,KAAK,IAAI,YAAY,KAAK,QAAQ,KAAK;EAC9C;EAEO,QAAS,MAAiC;AAC/C,SAAK,IAAI,KAAK,OAAO,KAAK,IAAI,eAAe,KAAK,GAAG,IAAI,CAAC;EAC5D;EAEO,eAAgB,WAAsC;AAC3D,UAAM,aAAa,KAAK,GAAG,cAAc,KAAK,GAAG,SAAS;AAC1D,SAAK,QAAQ,UAAU;AACvB,WAAO;EACT;EAEO,eAAgB,YAAuC;AAC5D,UAAM,YAAY,KAAK,GAAG,cAAc,KAAK,GAAG,UAAU;AAC1D,SAAK,QAAQ,UAAU;AACvB,WAAO;EACT;EAEO,QAAK;AACV,UAAM,CAAC,QAAQ,MAAM,IAAI,KAAK,OAAO,KAAK,KAAK,IAAI,OAAO;AAC1D,WAAO,CAAC,IAAI,YAAY,KAAK,QAAQ,MAAM,GAAG,IAAI,YAAY,KAAK,QAAQ,MAAM,CAAC;EACpF;;AAiBI,IAAgB,yBAAhB,MAAsC;EACnC;EACA;EACA;EACA;EACA;EACA;EACY;EAEnB,YAAa,MAAwB;AACnC,UAAM,EAAE,QAAAA,SAAQ,cAAc,UAAU,WAAW,GAAG,GAAG,IAAI,GAAE,IAAK;AACpE,SAAK,SAASA;AACd,SAAK,KAAK,IAAI,eAAeA,SAAQ,YAAY;AACjD,SAAK,GAAG,QAAQ,QAAQ;AACxB,SAAK,YAAY;AACjB,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,KAAK;AACV,SAAK,KAAK;EACZ;EAEU,SAAM;AACd,QAAI,KAAK,GAAG;AACV,YAAM,IAAI,MAAM,kCAAkC;IACpD;AACA,UAAM,IAAI,KAAK,OAAO,gBAAe;AACrC,SAAK,GAAG,QAAQ,EAAE,SAAS;AAC3B,SAAK,IAAI;AACT,WAAO,EAAE;EACX;EAEU,SAAM;AACd,QAAI,CAAC,KAAK,GAAG;AACX,YAAM,IAAI,MAAM,2BAA2B;IAC7C;AACA,WAAO,KAAK,GAAG,eAAe,KAAK,EAAE,SAAS;EAChD;EAEU,UAAO;AACf,QAAI,CAAC,KAAK,GAAG;AACX,YAAM,IAAI,MAAM,8BAA8B;IAChD;AACA,QAAI,CAAC,KAAK,IAAI;AACZ,YAAM,IAAI,MAAM,wCAAwC;IAC1D;AACA,SAAK,GAAG,OAAO,KAAK,OAAO,GAAG,KAAK,GAAG,KAAK,EAAE,CAAC;EAChD;EAEU,UAAO;AACf,QAAI,KAAK,WAAW;AAClB,UAAI,CAAC,KAAK,GAAG;AACX,cAAM,IAAI,MAAM,8BAA8B;MAChD;AACA,UAAI,CAAC,KAAK,IAAI;AACZ,cAAM,IAAI,MAAM,qCAAqC;MACvD;AACA,WAAK,GAAG,OAAO,KAAK,OAAO,GAAG,KAAK,GAAG,KAAK,EAAE,CAAC;IAChD,OAAO;AACL,UAAI,CAAC,KAAK,GAAG;AACX,cAAM,IAAI,MAAM,2BAA2B;MAC7C;AACA,UAAI,CAAC,KAAK,IAAI;AACZ,cAAM,IAAI,MAAM,wCAAwC;MAC1D;AACA,WAAK,GAAG,OAAO,KAAK,OAAO,GAAG,KAAK,GAAG,KAAK,EAAE,CAAC;IAChD;EACF;EAEU,UAAO;AACf,QAAI,KAAK,WAAW;AAClB,UAAI,CAAC,KAAK,GAAG;AACX,cAAM,IAAI,MAAM,2BAA2B;MAC7C;AACA,UAAI,CAAC,KAAK,IAAI;AACZ,cAAM,IAAI,MAAM,wCAAwC;MAC1D;AACA,WAAK,GAAG,OAAO,KAAK,OAAO,GAAG,KAAK,GAAG,KAAK,EAAE,CAAC;IAChD,OAAO;AACL,UAAI,CAAC,KAAK,GAAG;AACX,cAAM,IAAI,MAAM,8BAA8B;MAChD;AACA,UAAI,CAAC,KAAK,IAAI;AACZ,cAAM,IAAI,MAAM,qCAAqC;MACvD;AACA,WAAK,GAAG,OAAO,KAAK,OAAO,GAAG,KAAK,GAAG,KAAK,EAAE,CAAC;IAChD;EACF;EAEU,MAAOC,UAAyB,SAAS,GAAC;AAClD,QAAI,KAAK,IAAI;AACX,YAAM,IAAI,MAAM,4CAA4C;IAC9D;AACA,QAAIA,SAAQ,aAAa,SAAS,IAAI;AACpC,YAAM,IAAI,MAAM,4BAA4B;IAC9C;AACA,SAAK,KAAKA,SAAQ,QAAQ,QAAQ,SAAS,EAAE;AAC7C,SAAK,GAAG,QAAQ,KAAK,EAAE;EACzB;EAEU,MAAOA,UAAyB,SAAS,GAAC;AAClD,QAAI,KAAK,IAAI;AACX,YAAM,IAAI,MAAM,yCAAyC;IAC3D;AACA,UAAM,eAAe,MAAM,KAAK,GAAG,GAAG,OAAM,IAAK,KAAK;AACtD,QAAIA,SAAQ,aAAa,SAAS,cAAc;AAC9C,YAAM,IAAI,MAAM,4BAA4B;IAC9C;AACA,UAAM,OAAOA,SAAQ,QAAQ,QAAQ,SAAS,YAAY;AAC1D,SAAK,KAAK,KAAK,GAAG,eAAe,IAAI;AACrC,WAAO;EACT;EAEU,SAAM;AACd,SAAK,QAAO;EACd;EAEU,SAAM;AACd,SAAK,QAAO;EACd;EAEU,SAAM;AACd,SAAK,QAAO;EACd;;AAMI,IAAO,mBAAP,cAAgC,uBAAsB;;EAE1D,cAAe,SAAoC;AACjD,WAAO,IAAI,eAAe,KAAK,OAAM,GAAI,KAAK,GAAG,eAAe,OAAO,CAAC;EAC1E;;EAGA,cAAe,SAAoC;AACjD,UAAM,IAAI,KAAK,OAAM;AACrB,SAAK,QAAO;AACZ,UAAM,OAAO,KAAK,OAAM;AACxB,SAAK,QAAO;AAEZ,WAAO,IAAI,eAAe,GAAG,MAAM,KAAK,GAAG,eAAe,OAAO,CAAC;EACpE;;EAGA,cAAe,SAAoC;AACjD,UAAM,OAAO,KAAK,OAAM;AACxB,SAAK,QAAO;AAEZ,WAAO,IAAI,eAAe,MAAM,KAAK,GAAG,eAAe,OAAO,CAAC;EACjE;;EAGA,aAAcA,UAAuB;AACnC,QAAI;AACF,WAAK,MAAMA,QAAO;AAElB,aAAO,KAAK,GAAG,eAAeA,SAAQ,QAAQ,EAAE,CAAC;IACnD,SAAS,GAAG;AACV,YAAM,IAAIC,4BAA2B,sCAAuC,EAAY,OAAO,EAAE;IACnG;EACF;;EAGA,aAAcD,UAAuB;AACnC,QAAI;AACF,WAAK,MAAMA,QAAO;AAClB,WAAK,OAAM;AACX,YAAM,WAAW,KAAK,MAAMA,UAAS,EAAE;AACvC,WAAK,OAAM;AAEX,aAAO,KAAK,GAAG,eAAeA,SAAQ,QAAQ,KAAK,QAAQ,CAAC;IAC9D,SAAS,GAAG;AACV,YAAM,IAAIC,4BAA2B,sCAAuC,EAAY,OAAO,EAAE;IACnG;EACF;;EAGA,aAAcD,UAAuB;AACnC,QAAI;AACF,YAAM,WAAW,KAAK,MAAMA,QAAO;AACnC,WAAK,OAAM;AAEX,aAAO,KAAK,GAAG,eAAeA,SAAQ,QAAQ,QAAQ,CAAC;IACzD,SAAS,GAAG;AACV,YAAM,IAAIC,4BAA2B,sCAAuC,EAAY,OAAO,EAAE;IACnG;EACF;;AAGF,SAAS,iBAAkBF,SAAiB,cAAwB;AAClE,MAAI,aAAa,UAAU,IAAI;AAC7B,UAAM,IAAI,MAAgB,EAAE;AAC5B,MAAE,IAAI,YAAY;AAClB,WAAO;EACT,OAAO;AACL,WAAOA,QAAO,KAAK,YAAY;EACjC;AACF;;;AC9SM,IAAW;CAAjB,SAAiBG,kBAAe;AAC9B,MAAI;AAES,EAAAA,iBAAA,QAAQ,MAA6B;AAChD,QAAI,UAAU,MAAM;AAClB,eAAS,QAAyB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AACtD,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAI,IAAI,0BAA0B,MAAM;AACtC,qBAAWC,UAAS,IAAI,wBAAwB;AAC9C,cAAE,OAAO,EAAE;AACX,cAAE,MAAMA,MAAK;UACf;QACF;AAEA,YAAI,IAAI,gBAAgB,MAAM;AAC5B,qBAAWA,UAAS,IAAI,cAAc;AACpC,cAAE,OAAO,EAAE;AACX,cAAE,OAAOA,MAAK;UAChB;QACF;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQC,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,wBAAwB,CAAA;UACxB,cAAc,CAAA;;AAGhB,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,KAAK,QAAQ,0BAA0B,QAAQ,IAAI,uBAAuB,WAAW,KAAK,OAAO,wBAAwB;AAC3H,sBAAM,IAAI,eAAe,yEAAyE;cACpG;AAEA,kBAAI,uBAAuB,KAAK,OAAO,MAAK,CAAE;AAC9C;YACF;YACA,KAAK,GAAG;AACN,kBAAI,KAAK,QAAQ,gBAAgB,QAAQ,IAAI,aAAa,WAAW,KAAK,OAAO,cAAc;AAC7F,sBAAM,IAAI,eAAe,+DAA+D;cAC1F;AAEA,kBAAI,aAAa,KAAK,OAAO,OAAM,CAAE;AACrC;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAF,iBAAA,SAAS,CAAC,QAA6C;AAClE,WAAO,cAAc,KAAKA,iBAAgB,MAAK,CAAE;EACnD;AAEa,EAAAA,iBAAA,SAAS,CAAC,KAAkC,SAA0D;AACjH,WAAO,cAAc,KAAKA,iBAAgB,MAAK,GAAI,IAAI;EACzD;AACF,GA5EiB,oBAAA,kBAAe,CAAA,EAAA;AAoF1B,IAAW;CAAjB,SAAiBG,wBAAqB;AACpC,MAAI;AAES,EAAAA,uBAAA,QAAQ,MAAmC;AACtD,QAAI,UAAU,MAAM;AAClB,eAAS,QAA+B,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAC5D,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAK,IAAI,eAAe,QAAQ,IAAI,YAAY,aAAa,GAAI;AAC/D,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,WAAW;QACzB;AAEA,YAAK,IAAI,eAAe,QAAQ,IAAI,YAAY,aAAa,GAAI;AAC/D,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,WAAW;QACzB;AAEA,YAAI,IAAI,cAAc,MAAM;AAC1B,YAAE,OAAO,EAAE;AACX,0BAAgB,MAAK,EAAG,OAAO,IAAI,YAAY,CAAC;QAClD;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQD,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,aAAa,MAAgB,CAAC;UAC9B,aAAa,MAAgB,CAAC;;AAGhC,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,cAAc,OAAO,MAAK;AAC9B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,cAAc,OAAO,MAAK;AAC9B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,aAAa,gBAAgB,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;gBACvE,QAAQ,KAAK,QAAQ;eACtB;AACD;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAC,uBAAA,SAAS,CAAC,QAAmD;AACxE,WAAO,cAAc,KAAKA,uBAAsB,MAAK,CAAE;EACzD;AAEa,EAAAA,uBAAA,SAAS,CAAC,KAAkC,SAAsE;AAC7H,WAAO,cAAc,KAAKA,uBAAsB,MAAK,GAAI,IAAI;EAC/D;AACF,GA3EiB,0BAAA,wBAAqB,CAAA,EAAA;;;ACrFtC,eAAsB,uBACpB,YACA,iBACA,YAA4B;AAE5B,QAAM,cAAc,MAAM,WAAW,KAAK,oBAAoB,eAAe,CAAC;AAE9E,SAAO,sBAAsB,OAAO;IAClC,aAAa,oBAAoB,WAAW,SAAS;IACrD;IACA;GACD;AACH;AAEA,eAAsB,uBACpB,cACA,iBACA,mBAA6B;AAE7B,MAAI;AACF,UAAM,UAAU,sBAAsB,OAAO,YAAY;AACzD,UAAMC,aAAY,sBAAsB,QAAQ,WAAW;AAE3D,QAAI,mBAAmB,OAAOA,UAAS,MAAM,OAAO;AAClD,YAAM,IAAI,MAAM,wBAAwBA,UAAS,gDAAgD,iBAAiB,EAAE;IACtH;AAEA,QAAI,CAAC,iBAAiB;AACpB,YAAM,IAAI,MAAM,8BAA8B;IAChD;AAEA,UAAM,mBAAmB,oBAAoB,eAAe;AAE5D,QAAI,CAAE,MAAMA,WAAU,OAAO,kBAAkB,QAAQ,WAAW,GAAI;AACpE,YAAM,IAAI,MAAM,2BAA2B;IAC7C;AAEA,WAAO;EACT,SAAS,GAAG;AACV,UAAM,IAAI,oBAAqB,EAAY,OAAO;EACpD;AACF;AAEM,SAAU,oBAAqBA,YAAsC;AACzE,QAAM,SAAS,WAAqB,0BAA0B;AAE9D,MAAIA,sBAAqB,YAAY;AACnC,WAAO,OAAiB,CAAC,QAAQA,UAAS,GAAG,OAAO,SAASA,WAAU,MAAM;EAC/E;AAEA,EAAAA,WAAU,QAAQ,MAAM;AAExB,SAAOA;AACT;;;AClDA,eAAsB,0BAA2B,MAAuBC,UAAsB;AAC5F,QAAM,EAAE,KAAAC,MAAK,YAAY,QAAAC,SAAQ,YAAY,UAAU,GAAG,mBAAmB,WAAU,IAAK;AAE5F,QAAM,UAAU,MAAM,uBAAuB,YAAY,EAAE,WAAW,UAAU;AAChF,QAAM,KAAK,IAAI,iBAAiB;IAC9B,QAAAA;IACA,cAAc;IACd,WAAW;IACX;IACA;GACD;AAED,qBAAmB,GAAG,GAAGD,IAAG;AAC5B,EAAAA,KAAI,MAAM,qDAAqD;AAC/D,QAAM,WAAW,MAAM,GAAG,cAAc,OAAO,GAAGD,QAAO;AACzD,EAAAC,KAAI,MAAM,qDAAqD;AAC/D,wBAAsB,GAAG,GAAGA,IAAG;AAE/B,EAAAA,KAAI,MAAM,wEAAwE;AAClF,QAAM,YAAY,GAAG,aAAa,MAAM,WAAW,KAAKD,QAAO,CAAC;AAChE,EAAAC,KAAI,MAAM,2CAA2C;AACrD,wBAAsB,GAAG,IAAIA,IAAG;AAChC,qBAAmB,GAAG,IAAIA,IAAG;AAE7B,EAAAA,KAAI,MAAM,gDAAgD;AAC1D,QAAM,kBAAkB,MAAM,uBAAuB,WAAW,GAAG,IAAI,iBAAiB;AACxF,EAAAA,KAAI,MAAM,8BAA8B;AAExC,EAAAA,KAAI,MAAM,sDAAsD;AAChE,QAAM,WAAW,MAAM,GAAG,cAAc,OAAO,GAAGD,QAAO;AACzD,EAAAC,KAAI,MAAM,uDAAuD;AAEjE,QAAM,CAAC,KAAK,GAAG,IAAI,GAAG,GAAG,MAAK;AAC9B,iBAAe,KAAK,KAAKA,IAAG;AAE5B,SAAO;IACL,SAAS;IACT,SAAS,CAACE,eAAc,IAAI,cAAc,SAASA,UAAS;IAC5D,SAAS,CAAC,YAAY,QAAQ,IAAI,cAAc,SAAS,YAAY,GAAG;;AAE5E;AAEA,eAAsB,0BAA2B,MAAuBH,UAAsB;AAC5F,QAAM,EAAE,KAAAC,MAAK,YAAY,QAAAC,SAAQ,YAAY,UAAU,GAAG,mBAAmB,WAAU,IAAK;AAE5F,QAAM,UAAU,MAAM,uBAAuB,YAAY,EAAE,WAAW,UAAU;AAChF,QAAM,KAAK,IAAI,iBAAiB;IAC9B,QAAAA;IACA,cAAc;IACd,WAAW;IACX;IACA;GACD;AAED,qBAAmB,GAAG,GAAGD,IAAG;AAC5B,EAAAA,KAAI,MAAM,uDAAuD;AACjE,KAAG,aAAa,MAAM,WAAW,KAAKD,QAAO,CAAC;AAC9C,EAAAC,KAAI,MAAM,6CAA6C;AACvD,wBAAsB,GAAG,IAAIA,IAAG;AAEhC,EAAAA,KAAI,MAAM,mFAAmF;AAC7F,QAAM,WAAW,MAAM,GAAG,cAAc,OAAO,GAAGD,QAAO;AACzD,EAAAC,KAAI,MAAM,4EAA4E;AACtF,wBAAsB,GAAG,GAAGA,IAAG;AAE/B,EAAAA,KAAI,MAAM,4DAA4D;AACtE,QAAM,YAAY,GAAG,aAAa,MAAM,WAAW,KAAKD,QAAO,CAAC;AAChE,EAAAC,KAAI,MAAM,+DAA+D;AACzE,QAAM,kBAAkB,MAAM,uBAAuB,WAAW,GAAG,IAAI,iBAAiB;AAExF,QAAM,CAAC,KAAK,GAAG,IAAI,GAAG,GAAG,MAAK;AAC9B,iBAAe,KAAK,KAAKA,IAAG;AAE5B,SAAO;IACL,SAAS;IACT,SAAS,CAACE,eAAc,IAAI,cAAc,SAASA,UAAS;IAC5D,SAAS,CAAC,YAAY,QAAQ,IAAI,cAAc,SAAS,YAAY,GAAG;;AAE5E;;;ACnFA,IAAM,oBAAoB;AAGpB,SAAU,cAAe,WAA4B,SAAyB;AAClF,SAAO,iBAAkB,QAAM;AAC7B,qBAAiB,SAAS,QAAQ;AAChC,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,wCAAwC;AAC7E,YAAI,MAAM,IAAI;AACd,YAAI,MAAM,MAAM,QAAQ;AACtB,gBAAM,MAAM;QACd;AAEA,YAAI;AAEJ,YAAI,iBAAiB,YAAY;AAC/B,iBAAO,UAAU,QAAQ,MAAM,SAAS,GAAG,GAAG,CAAC;QACjD,OAAO;AACL,iBAAO,UAAU,QAAQ,MAAM,QAAQ,GAAG,GAAG,CAAC;QAChD;AAEA,iBAAS,iBAAiB,UAAS;AAEnC,cAAM,IAAI,eAAe,eAAe,KAAK,UAAU,GAAG,IAAI;MAChE;IACF;EACF;AACF;AAGM,SAAU,cAAe,WAA4B,SAAyB;AAClF,SAAO,iBAAkB,QAAM;AAC7B,qBAAiB,SAAS,QAAQ;AAChC,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,4BAA4B;AACjE,YAAI,MAAM,IAAI;AACd,YAAI,MAAM,MAAM,QAAQ;AACtB,gBAAM,MAAM;QACd;AAEA,YAAI,MAAM,oBAAoB,GAAG;AAC/B,gBAAM,IAAI,MAAM,eAAe;QACjC;AAEA,cAAM,YAAY,MAAM,QAAQ,GAAG,GAAG;AAKtC,cAAM,MAAM,MAAM,SAAS,GAAG,MAAM,iBAAiB;AACrD,YAAI;AACF,gBAAM,YAAY,UAAU,QAAQ,WAAW,GAAG;AAClD,mBAAS,iBAAiB,UAAS;AACnC,gBAAM;QACR,SAAS,GAAG;AACV,mBAAS,cAAc,UAAS;AAChC,gBAAM;QACR;MACF;IACF;EACF;AACF;;;AC5BM,IAAO,QAAP,MAAY;EACT,WAAW;EACX;EAEU;EACA;EACA;EACA;EACA;EAEjB,YAAa,YAA6B,OAAkB,CAAA,GAAE;AAC5D,UAAM,EAAE,gBAAgB,YAAY,QAAAC,SAAQ,cAAa,IAAK;AAC9D,UAAM,EAAE,QAAO,IAAK;AAEpB,SAAK,aAAa;AAClB,UAAM,UAAUA,WAAU;AAC1B,SAAK,SAAS,WAAW,OAAO;AAChC,SAAK,aAAa;MAChB,wBAAwB,CAAA;MACxB,GAAG;;AAEL,SAAK,UAAU,UAAU,gBAAgB,OAAO,IAAI;AAEpD,QAAI,gBAAgB;AAElB,WAAK,YAAY,QAAQ,8BAA8B,cAAc;IACvE,OAAO;AACL,WAAK,YAAY,QAAQ,sBAAqB;IAChD;AACA,SAAK,WAAW,iBAAiB,MAAgB,CAAC;EACpD;EAES,CAAC,OAAO,WAAW,IAAI;EAEvB,CAAC,mBAAmB,IAAc;IACzC;IACA;;;;;;;;;;EAWK,MAAM,eAA2G,YAAoBC,UAAiC;AAC3K,UAAM,oBAAoB,SACxB,YACA;MACE,eAAe;MACf,eAAe;MACf,eAAe;KAChB;AAGH,UAAM,YAAY,MAAM,KAAK,0BAC3B,mBACA,KAAK,WAAW,YAChBA,UAAS,YAAY,WACrBA,QAAO;AAET,UAAM,OAAO,MAAM,KAAK,uBAAuB,mBAAmB,SAAS;AAE3E,eAAW,SAAS,KAAK;AACzB,eAAW,OAAO,KAAK;AAEvB,UAAMC,aAAY,sBAAsB,UAAU,QAAQ,WAAW;AAErE,WAAO;MACL,MAAM;MACN,kBAAkB,UAAU,QAAQ;MACpC,YAAY,oBAAoBA,UAAS;MACzC,aAAaD,UAAS,+BAA+B,OAAO,SAAY,KAAK,eAAe,UAAU,QAAQ,YAAY,YAAY;;EAE1I;EAEQ,eAAgBE,YAAoB;AAC1C,QAAIA,cAAa,QAAQA,WAAU,WAAW,GAAG;AAC/C;IACF;AAEA,UAAM,eAAe,KAAK,WAAW,SAAS,gBAAe;AAE7D,QAAI,gBAAgB,MAAM;AACxB,iBAAW,YAAYA,YAAW;AAChC,cAAM,cAAc,aAAa,IAAI,QAAQ;AAE7C,YAAI,eAAe,MAAM;AACvB,iBAAO;QACT;MACF;IACF;AAEA,QAAIA,WAAU,QAAQ;AACpB,YAAM,IAAI,2BAA2B,4FAA4F;IACnI;EACF;;;;;;;;;EAUO,MAAM,cAA0G,YAAoBF,UAAiC;AAC1K,UAAM,oBAAoB,SACxB,YACA;MACE,eAAe;MACf,eAAe;MACf,eAAe;KAChB;AAGH,UAAM,YAAY,MAAM,KAAK,0BAC3B,mBACA,KAAK,WAAW,YAChBA,UAAS,YAAY,WACrBA,QAAO;AAET,UAAM,OAAO,MAAM,KAAK,uBAAuB,mBAAmB,SAAS;AAE3E,eAAW,SAAS,KAAK;AACzB,eAAW,OAAO,KAAK;AAEvB,UAAMC,aAAY,sBAAsB,UAAU,QAAQ,WAAW;AAErE,WAAO;MACL,MAAM;MACN,kBAAkB,UAAU,QAAQ;MACpC,YAAY,oBAAoBA,UAAS;MACzC,aAAaD,UAAS,+BAA+B,OAAO,SAAY,KAAK,eAAe,UAAU,QAAQ,YAAY,YAAY;;EAE1I;;;;EAKQ,MAAM,0BACZ,YAEA,YACA,mBACAA,UAAiC;AAEjC,QAAI;AACJ,UAAM,eAAeA,UAAS,+BAA+B,OAAO,CAAA,IAAK,CAAC,GAAG,KAAK,WAAW,SAAS,gBAAe,EAAG,KAAI,CAAE;AAE9H,QAAI;AACF,eAAS,MAAM,0BAA0B;QACvC;QACA;QACA;QACA,KAAK,KAAK,WAAW,OAAO,aAAa,0BAA0B;QACnE,QAAQ,KAAK;QACb,UAAU,KAAK;QACf,GAAG,KAAK;QACR,YAAY;UACV;UACA,wBAAwB,CAAA;UACxB,GAAG,KAAK;;SAETA,QAAO;AACV,WAAK,SAAS,qBAAqB,UAAS;IAC9C,SAAS,GAAY;AACnB,WAAK,SAAS,kBAAkB,UAAS;AACzC,YAAM;IACR;AAEA,WAAO;EACT;;;;EAKQ,MAAM,0BACZ,YACA,YACA,mBACAA,UAAiC;AAEjC,QAAI;AACJ,UAAM,eAAeA,UAAS,+BAA+B,OAAO,CAAA,IAAK,CAAC,GAAG,KAAK,WAAW,SAAS,gBAAe,EAAG,KAAI,CAAE;AAE9H,QAAI;AACF,eAAS,MAAM,0BAA0B;QACvC;QACA;QACA;QACA,KAAK,KAAK,WAAW,OAAO,aAAa,0BAA0B;QACnE,QAAQ,KAAK;QACb,UAAU,KAAK;QACf,GAAG,KAAK;QACR,YAAY;UACV;UACA,wBAAwB,CAAA;UACxB,GAAG,KAAK;;SAETA,QAAO;AACV,WAAK,SAAS,qBAAqB,UAAS;IAC9C,SAAS,GAAY;AACnB,WAAK,SAAS,kBAAkB,UAAS;AACzC,YAAM;IACR;AAEA,WAAO;EACT;EAEQ,MAAM,uBACZ,YACA,WAA0B;AAG1B,UAAM,CAAC,QAAQ,IAAI,IAAI,WAAU;AACjC,UAAM,UAAU,WAAW,OAAM;AAEjC,UAAM;MACJ;;MACA,cAAc,WAAW,KAAK,OAAO;;MACrC;;MACA,CAAC,WAAWG,QAAO,QAAQ,EAAE,eAAe,eAAc,CAAE;;MAC5D,cAAc,WAAW,KAAK,OAAO;;MACrC;;;AAGF,WAAO;EACT;;;;ACrNI,SAAU,MAAO,OAAkB,CAAA,GAAE;AACzC,SAAO,CAAC,eAAgC,IAAI,MAAM,YAAY,IAAI;AACpE;;;AChDM,SAAU,YAAiB,KAAQ;AACvC,MAAI,OAAO,MAAM;AACf,QAAI,OAAO,IAAI,OAAO,QAAQ,MAAM,YAAY;AAC9C,aAAO,IAAI,OAAO,QAAQ,EAAC;;AAE7B,QAAI,OAAO,IAAI,OAAO,aAAa,MAAM,YAAY;AACnD,aAAO,IAAI,OAAO,aAAa,EAAC;;AAElC,QAAI,OAAO,IAAI,SAAS,YAAY;AAClC,aAAO;;;AAGX,QAAM,IAAI,MAAM,yCAAyC;AAC3D;;;ACtBM,IAAO,oBAAP,cAAiC,MAAK;EAC1C,OAAO,OAAO;EAEd,YAAaC,WAAU,yBAAuB;AAC5C,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,uBAAP,cAAoC,MAAK;EAC7C,OAAO,OAAO;EAEd,YAAaA,WAAU,0BAAwB;AAC7C,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,uBAAP,cAAoC,MAAK;EAC7C,OAAO,OAAO;EAEd,YAAaA,WAAU,0BAAwB;AAC7C,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,oBAAP,cAAiC,MAAK;EAC1C,OAAO,OAAO;EAEd,YAAaA,WAAU,iBAAe;AACpC,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,2BAAP,cAAwC,MAAK;EACjD,OAAO,OAAO;EAEd,YAAaA,WAAU,yBAAuB;AAC5C,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,4BAAP,cAAyC,MAAK;EAClD,OAAO,OAAO;EAEd,YAAaA,WAAU,0BAAwB;AAC7C,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,mBAAP,cAAgC,MAAK;EACzC,OAAO,OAAO;EAEd,YAAaA,WAAU,gBAAc;AACnC,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAGI,IAAO,6BAAP,cAA0C,MAAK;EACnD,OAAO,OAAO;EAEd,YAAaA,WAAU,2BAAyB;AAC9C,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;;;ACjEK,IAAM,kBAAkB,oBAAI,IAAI;EACrC,kBAAkB;EAClB,qBAAqB;EACrB,qBAAqB;EACrB,yBAAyB;EACzB,0BAA0B;EAC1B,iBAAiB;EACjB,2BAA2B;CAC5B;AAOM,IAAM,wBAAwB,MAAM;AAKpC,IAAM,oBAAoB,KAAK,OAAO;;;ACwBtC,IAAM,gBAAwB;EACnC,iBAAiB;EACjB,mBAAmB;EACnB,mBAAmB;EACnB,oBAAoB;EACpB,yBAAyB;EACzB,qBAAqB;EACrB,gBAAgB,KAAK;;AAGjB,SAAU,aAAc,QAAc;AAC1C,MAAI,OAAO,qBAAqB,GAAG;AACjC,UAAM,IAAI,uBAAuB,sCAAsC;EACzE;AACA,MAAI,OAAO,oBAAoB,GAAG;AAChC,UAAM,IAAI,uBAAuB,+CAA+C;EAClF;AACA,MAAI,OAAO,qBAAqB,GAAG;AACjC,UAAM,IAAI,uBAAuB,gDAAgD;EACnF;AACA,MAAI,OAAO,0BAA0B,uBAAuB;AAC1D,UAAM,IAAI,uBAAuB,wDAAwD;EAC3F;AACA,MAAI,OAAO,sBAAsB,OAAO,yBAAyB;AAC/D,UAAM,IAAI,uBAAuB,qEAAqE;EACxG;AACA,MAAI,OAAO,sBAAsB,KAAK,KAAK,GAAG;AAC5C,UAAM,IAAI,uBAAuB,wDAAwD;EAC3F;AACA,MAAI,OAAO,iBAAiB,MAAM;AAChC,UAAM,IAAI,uBAAuB,gDAAgD;EACnF;AACF;;;AChFA,IAAY;CAAZ,SAAYC,YAAS;AAEnB,EAAAA,WAAAA,WAAA,MAAA,IAAA,CAAA,IAAA;AAEA,EAAAA,WAAAA,WAAA,cAAA,IAAA,CAAA,IAAA;AAEA,EAAAA,WAAAA,WAAA,MAAA,IAAA,CAAA,IAAA;AAEA,EAAAA,WAAAA,WAAA,QAAA,IAAA,CAAA,IAAA;AACF,GATY,cAAA,YAAS,CAAA,EAAA;AAWrB,IAAY;CAAZ,SAAYC,OAAI;AAEd,EAAAA,MAAAA,MAAA,KAAA,IAAA,CAAA,IAAA;AAEA,EAAAA,MAAAA,MAAA,KAAA,IAAA,CAAA,IAAA;AAEA,EAAAA,MAAAA,MAAA,KAAA,IAAA,CAAA,IAAA;AAEA,EAAAA,MAAAA,MAAA,KAAA,IAAA,CAAA,IAAA;AACF,GATY,SAAA,OAAI,CAAA,EAAA;AAWhB,IAAM,YAAY,OAAO,OAAO,IAAI,EAAE,OAAO,CAAC,MAAM,OAAO,MAAM,QAAQ;AAElE,IAAM,gBAAgB;AAE7B,IAAY;CAAZ,SAAYC,aAAU;AACpB,EAAAA,YAAAA,YAAA,mBAAA,IAAA,CAAA,IAAA;AACA,EAAAA,YAAAA,YAAA,eAAA,IAAA,CAAA,IAAA;AACA,EAAAA,YAAAA,YAAA,eAAA,IAAA,CAAA,IAAA;AACF,GAJY,eAAA,aAAU,CAAA,EAAA;AAMf,IAAM,gBAAgB;;;ACxB7B,IAAM,WAAW,KAAK;AAOhB,SAAU,aAAc,MAAgB;AAC5C,MAAI,KAAK,CAAC,MAAM,eAAe;AAC7B,UAAM,IAAI,kBAAkB,uBAAuB;EACrD;AACA,SAAO;IACL,MAAM,KAAK,CAAC;IACZ,OAAO,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC;IAC7B,UAAW,KAAK,CAAC,IAAI,YAAa,KAAK,CAAC,KAAK,OAAO,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC;IAC1E,QAAS,KAAK,CAAC,IAAI,YAAa,KAAK,CAAC,KAAK,OAAO,KAAK,EAAE,KAAK,KAAK,KAAK,EAAE;;AAE9E;AAKM,IAAOC,YAAP,MAAc;EACD;;EAEA;;EAET;EAER,YAAa,QAA2C;AAStD,SAAK,SAAS,iBAAiB,MAAM;AACrC,SAAK,SAAS,IAAI,eAAc;AAChC,SAAK,kBAAkB;EACzB;;;;;;;EAQA,OAAQ,aAAU;AAChB,qBAAiB,SAAS,KAAK,QAAQ;AACrC,WAAK,OAAO,OAAO,KAAK;AAIxB,aAAO,MAAM;AACX,cAAM,SAAS,KAAK,WAAU;AAC9B,YAAI,WAAW,QAAW;AACxB;QACF;AAEA,cAAM,EAAE,MAAM,QAAAC,SAAM,IAAK;AACzB,YAAI,SAAS,UAAU,MAAM;AAG3B,eAAK,kBAAkB;AACvB,gBAAM;YACJ;YACA,UAAU,KAAK,UAAU,KAAK,MAAMA,QAAM;;QAE9C,OAAO;AACL,gBAAM,EAAE,OAAM;QAChB;MACF;IACF;EACF;EAEQ,aAAU;AAGhB,QAAI,KAAK,iBAAiB;AACxB,YAAM,IAAI,kBAAkB,oCAAoC;IAClE;AAEA,QAAI,KAAK,OAAO,SAAS,eAAe;AAEtC;IACF;AAEA,UAAM,SAAS,aAAa,KAAK,OAAO,SAAS,GAAG,aAAa,CAAC;AAClE,SAAK,OAAO,QAAQ,aAAa;AACjC,WAAO;EACT;EAEQ,MAAM,UAAWA,UAAc;AACrC,QAAI,KAAK,OAAO,SAASA,UAAQ;AAC/B,uBAAiB,SAAS,KAAK,QAAQ;AACrC,aAAK,OAAO,OAAO,KAAK;AAExB,YAAI,KAAK,OAAO,UAAUA,UAAQ;AAEhC;QACF;MACF;IACF;AAEA,UAAM,MAAM,KAAK,OAAO,QAAQ,GAAGA,QAAM;AACzC,SAAK,OAAO,QAAQA,QAAM;AAG1B,SAAK,kBAAkB;AAEvB,WAAO;EACT;;AAMI,SAAU,iBAAqB,QAAiB;AACpD,MAAK,OAAuB,OAAO,QAAQ,MAAM,QAAW;AAC1D,UAAM,WAAY,OAAuB,OAAO,QAAQ,EAAC;AACzD,aAAS,SAAS;AAClB,WAAO;MACL,CAAC,OAAO,QAAQ,IAAC;AAAM,eAAO;MAAS;;EAE3C,WAAY,OAA4B,OAAO,aAAa,MAAM,QAAW;AAC3E,UAAM,WAAY,OAA4B,OAAO,aAAa,EAAC;AACnE,aAAS,SAAS;AAClB,WAAO;MACL,CAAC,OAAO,aAAa,IAAC;AAAM,eAAO;MAAS;;EAEhD,OAAO;AACL,UAAM,IAAI,MAAM,0DAA0D;EAC5E;AACF;;;AC5IM,SAAU,aAAc,QAAmB;AAC/C,QAAM,QAAQ,IAAI,WAAW,aAAa;AAK1C,QAAM,CAAC,IAAI,OAAO;AAElB,QAAM,CAAC,IAAI,OAAO,SAAS;AAC3B,QAAM,CAAC,IAAI,OAAO;AAElB,QAAM,CAAC,IAAI,OAAO,aAAa;AAC/B,QAAM,CAAC,IAAI,OAAO,aAAa;AAC/B,QAAM,CAAC,IAAI,OAAO,aAAa;AAC/B,QAAM,CAAC,IAAI,OAAO;AAElB,QAAM,CAAC,IAAI,OAAO,WAAW;AAC7B,QAAM,CAAC,IAAI,OAAO,WAAW;AAC7B,QAAM,EAAE,IAAI,OAAO,WAAW;AAC9B,QAAM,EAAE,IAAI,OAAO;AAEnB,SAAO;AACT;;;ACzBM,SAAUC,WAAyB,OAAU;AACjD,MAAI,SAAS,MAAM;AACjB,WAAO;EACT;AAEA,SAAO,OAAO,MAAM,SAAS,cAC3B,OAAO,MAAM,UAAU,cACvB,OAAO,MAAM,YAAY;AAC7B;;;ACHM,SAAU,YAAa,QAAyBC,MAAW;AAC/D,QAAM,MAAM,YAAY,MAAM,EAAE,SAAQ;AAExC,MAAIC,WAAU,GAAG,GAAG;AAClB,QAAI,MAAM,SAAM;AACd,MAAAD,KAAI,MAAM,sCAAsC,GAAG;IACrD,CAAC;EACH;AACF;;;ACDA,IAAM,mCAAmC;AA+DzC,SAASE,WAAyB,OAAU;AAC1C,MAAI,SAAS,MAAM;AACjB,WAAO;EACT;AAEA,SAAO,OAAO,MAAM,SAAS,cAC3B,OAAO,MAAM,UAAU,cACvB,OAAO,MAAM,YAAY;AAC7B;AAEM,IAAgB,iBAAhB,MAA8B;EAC3B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACS;EAEC;EACA;EACA;EACT;EACS;EACA;EACA;EACA;EACA;EACA;EACA;EACT;EAER,YAAa,MAAwB;AACnC,SAAK,iBAAiB,IAAI,gBAAe;AACzC,SAAK,UAAU,OAAK;AACpB,SAAK,SAAS,OAAK;AACnB,SAAK,MAAM,KAAK;AAGhB,SAAK,SAAS;AACd,SAAK,aAAa;AAClB,SAAK,cAAc;AAEnB,SAAK,KAAK,KAAK;AACf,SAAK,WAAW,KAAK,YAAY,CAAA;AACjC,SAAK,YAAY,KAAK;AACtB,SAAK,WAAW;MACd,MAAM,KAAK,IAAG;;AAEhB,SAAK,wBAAwB,KAAK,yBAAyB;AAE3D,SAAK,QAAQ,KAAK;AAClB,SAAK,cAAc,KAAK;AACxB,SAAK,eAAe,KAAK;AACzB,SAAK,UAAU,KAAK;AACpB,SAAK,UAAU,KAAK;AAEpB,SAAK,SAAS,KAAK,eAAe,SAAyB;MACzD,OAAO,CAAC,QAAO;AACb,YAAI,OAAO,MAAM;AACf,eAAK,IAAI,MAAM,2BAA2B,GAAG;QAC/C,OAAO;AACL,eAAK,IAAI,MAAM,cAAc;QAC/B;AAEA,aAAK,YAAY,GAAG;MACtB;KACD;AAGD,SAAK,OAAO,KAAK,KAAK,KAAK,IAAI;EACjC;EAEA,MAAM,KAAM,QAA2C;AACrD,QAAI,KAAK,gBAAgB,SAAS;AAChC,YAAM,IAAI,iBAAiB,0BAA0B,KAAK,WAAW,eAAe;IACtF;AAEA,QAAI;AACF,WAAK,cAAc;AAEnB,YAAMC,WAAwB;QAC5B,QAAQ,KAAK,eAAe;;AAG9B,UAAI,KAAK,cAAc,YAAY;AACjC,cAAM,MAAM,KAAK,cAAcA,QAAO;AAEtC,YAAID,WAAU,GAAG,GAAG;AAClB,gBAAM;QACR;MACF;AAEA,YAAM,gBAAgB,MAAW;AAC/B,oBAAY,QAAQ,KAAK,GAAG;MAC9B;AAEA,UAAI;AACF,aAAK,eAAe,OAAO,iBAAiB,SAAS,aAAa;AAElE,aAAK,IAAI,MAAM,0BAA0B;AAEzC,uBAAe,QAAQ,QAAQ;AAC7B,iBAAO,gBAAgB,aAAa,IAAI,eAAe,IAAI,IAAI;AAE/D,gBAAM,MAAM,KAAK,SAAS,MAAMC,QAAO;AAEvC,cAAID,WAAU,GAAG,GAAG;AAClB,iBAAK,cAAc,OAAK;AACxB,kBAAM;AACN,iBAAK,YAAY,QAAO;AACxB,iBAAK,cAAc;UACrB;QACF;MACF;AACE,aAAK,eAAe,OAAO,oBAAoB,SAAS,aAAa;MACvE;AAEA,WAAK,IAAI,MAAM,2DAA2D,KAAK,WAAW;AAE1F,UAAI,KAAK,gBAAgB,WAAW;AAClC,aAAK,cAAc;AAEnB,aAAK,IAAI,MAAM,4BAA4B;AAC3C,cAAM,KAAK,eAAe;UACxB,QAAQ,YAAY,QAAQ,KAAK,qBAAqB;SACvD;AAED,aAAK,cAAc;MACrB;AAEA,WAAK,UAAS;IAChB,SAAS,KAAU;AACjB,WAAK,IAAI,MAAM,mDAAmD,GAAG;AACrE,WAAK,MAAM,GAAG;AAEd,YAAM;IACR;AACE,WAAK,IAAI,MAAM,kBAAkB;AACjC,WAAK,QAAQ,QAAO;IACtB;EACF;EAEU,YAAa,KAAW;AAChC,QAAI,KAAK,SAAS,aAAa,MAAM;AACnC;IACF;AAEA,SAAK,SAAS,YAAY,KAAK,IAAG;AAClC,SAAK,aAAa;AAElB,QAAI,OAAO,QAAQ,KAAK,UAAU,MAAM;AACtC,WAAK,SAAS;IAChB;AAEA,SAAK,cAAa;AAElB,QAAI,KAAK,SAAS,cAAc,MAAM;AACpC,WAAK,IAAI,MAAM,uBAAuB;AACtC,WAAK,SAAS,QAAQ,KAAK,IAAG;AAE9B,UAAI,KAAK,WAAW,aAAa,KAAK,WAAW,SAAS;AACxD,aAAK,SAAS;MAChB;AAEA,UAAI,KAAK,SAAS,MAAM;AACtB,aAAK,MAAM,KAAK,MAAM;MACxB;AAEA,WAAK,OAAO,QAAO;IACrB,OAAO;AACL,WAAK,IAAI,MAAM,uCAAuC;IACxD;EACF;EAEU,UAAW,KAAW;AAC9B,QAAI,KAAK,SAAS,cAAc,MAAM;AACpC;IACF;AAEA,SAAK,SAAS,aAAa,KAAK,IAAG;AACnC,SAAK,cAAc;AAEnB,QAAI,OAAO,QAAQ,KAAK,UAAU,MAAM;AACtC,WAAK,SAAS;IAChB;AAEA,SAAK,eAAc;AAEnB,QAAI,KAAK,SAAS,aAAa,MAAM;AACnC,WAAK,IAAI,MAAM,uBAAuB;AACtC,WAAK,SAAS,QAAQ,KAAK,IAAG;AAE9B,UAAI,KAAK,WAAW,aAAa,KAAK,WAAW,SAAS;AACxD,aAAK,SAAS;MAChB;AAEA,UAAI,KAAK,SAAS,MAAM;AACtB,aAAK,MAAM,KAAK,MAAM;MACxB;AAEA,WAAK,OAAO,QAAO;IACrB,OAAO;AACL,WAAK,IAAI,MAAM,uCAAuC;IACxD;EACF;;EAGA,MAAM,MAAOC,UAAsB;AACjC,QAAI,KAAK,WAAW,QAAQ;AAC1B;IACF;AAEA,SAAK,IAAI,MAAM,oBAAoB;AAEnC,SAAK,SAAS;AAGd,UAAM,WAAW,QAAQ,IAAI;MAC3B,KAAK,WAAWA,QAAO;MACvB,KAAK,UAAUA,QAAO;MACtB,KAAK,OAAO;KACb,GAAGA,UAAS,MAAM;AAEnB,SAAK,SAAS;AAEd,SAAK,IAAI,MAAM,mBAAmB;EACpC;EAEA,MAAM,UAAWA,WAAwB,CAAA,GAAE;AACzC,QAAI,KAAK,eAAe,aAAa,KAAK,eAAe,UAAU;AACjE;IACF;AAEA,SAAK,IAAI,MAAM,iEAAiE,KAAK,UAAU;AAE/F,UAAM,aAAa,KAAK;AACxB,SAAK,aAAa;AAElB,QAAI,KAAK,WAAW,WAAW,KAAK,WAAW,aAAa,KAAK,SAAS,aAAa,MAAM;AAC3F,WAAK,IAAI,MAAM,2BAA2B;AAC1C,YAAM,KAAK,cAAcA,QAAO;IAClC;AAEA,QAAI,eAAe,SAAS;AAC1B,WAAK,IAAI,MAAM,qDAAqD,KAAK,aAAa,cAAc;AACpG,WAAK,aAAa,IAAG;IACvB;AAEA,SAAK,IAAI,MAAM,+BAA+B;EAChD;EAEA,MAAM,WAAYA,WAAwB,CAAA,GAAE;AAC1C,QAAI,KAAK,gBAAgB,aAAa,KAAK,gBAAgB,UAAU;AACnE;IACF;AAEA,SAAK,IAAI,MAAM,kEAAkE,KAAK,WAAW;AAEjG,QAAI,KAAK,gBAAgB,SAAS;AAChC,WAAK,IAAI,MAAM,0CAA0C;AAEzD,YAAM,WAAW,KAAK,KAAK,CAAA,CAAE,GAAGA,SAAQ,MAAM;IAChD;AAEA,QAAI,KAAK,gBAAgB,WAAW;AAElC,UAAI,KAAK,eAAe,MAAM;AAC5B,cAAM,WAAW,KAAK,YAAY,SAASA,SAAQ,MAAM;MAC3D;AAGA,WAAK,IAAI,MAAM,iCAAiC;AAChD,WAAK,eAAe,MAAK;AACzB,YAAM,WAAW,KAAK,QAAQ,SAASA,SAAQ,MAAM;IACvD;AAEA,SAAK,cAAc;AAEnB,SAAK,IAAI,MAAM,+BAA+B;EAChD;;;;;EAMA,MAAO,KAAU;AACf,QAAI,KAAK,WAAW,YAAY,KAAK,WAAW,aAAa,KAAK,WAAW,SAAS;AACpF;IACF;AAEA,SAAK,IAAI,oBAAoB,GAAG;AAGhC,SAAK,IAAI,6BAA6B;AACtC,UAAM,MAAM,KAAK,UAAS;AAE1B,QAAID,WAAU,GAAG,GAAG;AAClB,UAAI,MAAM,CAACE,SAAO;AAChB,aAAK,IAAI,MAAM,+BAA+BA,IAAG;MACnD,CAAC;IACH;AAEA,SAAK,SAAS;AACd,SAAK,SAAS,QAAQ,KAAK,IAAG;AAC9B,SAAK,oBAAoB,GAAG;AAC5B,SAAK,UAAU,GAAG;EACpB;;;;;EAMA,QAAK;AACH,QAAI,KAAK,WAAW,YAAY,KAAK,WAAW,aAAa,KAAK,WAAW,SAAS;AACpF;IACF;AAEA,UAAM,MAAM,IAAI,iBAAiB,cAAc;AAE/C,SAAK,SAAS;AACd,SAAK,SAAS,QAAQ,KAAK,IAAG;AAC9B,SAAK,oBAAoB,GAAG;AAC5B,SAAK,UAAS;EAChB;EAEA,oBAAqB,KAAW;AAC9B,SAAK,WAAW,GAAG;AACnB,SAAK,aAAa,GAAG;EACvB;EAEA,WAAY,KAAW;AAErB,QAAI,KAAK,gBAAgB,WAAW;AAClC,WAAK,IAAI,MAAM,iBAAiB;AAChC,WAAK,eAAe,MAAK;IAC3B;AAEA,SAAK,UAAU,GAAG;EACpB;EAEA,aAAc,KAAW;AAEvB,QAAI,KAAK,eAAe,aAAa,KAAK,eAAe,UAAU;AACjE,WAAK,IAAI,MAAM,sDAAsD,KAAK,aAAa,cAAc;AACrG,WAAK,aAAa;AAClB,WAAK,aAAa,IAAI,GAAG;IAC3B;EACF;;;;;EAMA,mBAAgB;AACd,QAAI,KAAK,eAAe,aAAa,KAAK,eAAe,UAAU;AACjE,WAAK,IAAI,gEAAgE;AACzE;IACF;AAEA,SAAK,IAAI,MAAM,oBAAoB;AACnC,SAAK,aAAY;EACnB;;;;;EAMA,kBAAe;AACb,QAAI,KAAK,gBAAgB,aAAa,KAAK,gBAAgB,UAAU;AACnE,WAAK,IAAI,6DAA6D;AACtE;IACF;AAEA,SAAK,IAAI,MAAM,mBAAmB;AAClC,SAAK,WAAU;EACjB;;;;;EAMA,UAAO;AACL,QAAI,KAAK,WAAW,YAAY,KAAK,WAAW,aAAa,KAAK,WAAW,SAAS;AACpF,WAAK,IAAI,4CAA4C;AACrD;IACF;AAEA,SAAK,IAAI,MAAM,kBAAkB;AAEjC,SAAK,oBAAmB;EAC1B;;;;;EAMA,WAAY,MAAoB;AAC9B,SAAK,aAAa,KAAK,IAAI;EAC7B;;;;;EAMA,uBAAoB;AAClB,WAAO,KAAK,aAAa;EAC3B;;;;ACzdF,IAAY;CAAZ,SAAYC,cAAW;AACrB,EAAAA,aAAAA,aAAA,MAAA,IAAA,CAAA,IAAA;AACA,EAAAA,aAAAA,aAAA,SAAA,IAAA,CAAA,IAAA;AACA,EAAAA,aAAAA,aAAA,aAAA,IAAA,CAAA,IAAA;AACA,EAAAA,aAAAA,aAAA,aAAA,IAAA,CAAA,IAAA;AACA,EAAAA,aAAAA,aAAA,UAAA,IAAA,CAAA,IAAA;AACF,GANY,gBAAA,cAAW,CAAA,EAAA;AAiBjB,IAAO,cAAP,cAA2B,eAAc;EAC7C;EACA;EAEiB;EACA;;EAGT;;EAEA;;EAGA;;EAEA;;;;;;EAOA;EACS;EAEA;EAEjB,YAAa,MAAqB;AAChC,UAAM;MACJ,GAAG;MACH,OAAO,CAAC,QAAe;AACrB,aAAK,QAAQ,YAAY;AACzB,aAAK,QAAQ,GAAG;MAClB;KACD;AAED,SAAK,SAAS,KAAK;AACnB,SAAK,MAAM,SAAS,KAAK,IAAI,EAAE;AAC/B,SAAK,OAAO,KAAK;AACjB,SAAK,QAAQ,KAAK;AAClB,SAAK,qBAAqB;AAC1B,SAAK,aAAa,KAAK,OAAO;AAC9B,SAAK,qBAAqB,KAAK;AAC/B,SAAK,aAAa,KAAK,IAAG;AAC1B,SAAK,SAAS,KAAK;AAEnB,SAAK,YAAY,KAAK;AAEtB,SAAK,SAASC,aAAK,KAAK,QAAQ,MAAK;AACnC,WAAK,iBAAgB;IACvB,CAAC;EACH;;;;;;;;EASA,MAAM,gBAAa;EAEnB;;;;EAKA,MAAM,SAAU,KAAqBC,WAAwB,CAAA,GAAE;AAC7D,UAAM,IAAI,QAAO;AAGjB,WAAO,IAAI,eAAe,GAAG;AAE3B,UAAI,KAAK,uBAAuB,GAAG;AACjC,aAAK,KAAK,MAAM,4CAA4C,KAAK,MAAM;AACvE,cAAM,KAAK,0BAA0BA,QAAO;AAG5C,YAAI,KAAK,WAAW,YAAY,KAAK,WAAW,aAAa,KAAK,WAAW,SAAS;AACpF,eAAK,KAAK,MAAM,6CAA6C,KAAK,MAAM;AACxE;QACF;MACF;AAGA,YAAM,SAAS,KAAK,IAAI,KAAK,oBAAoB,KAAK,OAAO,iBAAiB,eAAe,IAAI,MAAM;AACvG,YAAM,QAAQ,KAAK,aAAY;AAE/B,WAAK,UAAU;QACb,MAAM,UAAU;QAChB,MAAM;QACN,UAAU,KAAK;QACf,QAAQ;SACP,IAAI,QAAQ,GAAG,MAAM,CAAC;AAEzB,WAAK,sBAAsB;AAE3B,UAAI,QAAQ,MAAM;IACpB;EACF;;;;EAKA,MAAM,YAAS;AACb,SAAK,UAAU;MACb,MAAM,UAAU;MAChB,MAAM,KAAK;MACX,UAAU,KAAK;MACf,QAAQ;KACT;EACH;;;;;EAMA,MAAM,iBAAc;AAClB,UAAM,QAAQ,KAAK,aAAY,IAAK,KAAK;AACzC,SAAK,UAAU;MACb,MAAM,UAAU;MAChB,MAAM;MACN,UAAU,KAAK;MACf,QAAQ;KACT;EACH;;;;;EAMA,MAAM,gBAAa;EAEnB;;;;;;EAOA,MAAM,0BAA2BA,WAAwB,CAAA,GAAE;AACzD,QAAI,KAAK,qBAAqB,GAAG;AAC/B;IACF;AAEA,QAAI;AACJ,QAAI;AACJ,UAAM,QAAQ,MAAW;AACvB,UAAI,KAAK,WAAW,UAAU,KAAK,WAAW,WAAW;AACvD,eAAO,IAAI,WAAW,gBAAgB,CAAC;MACzC,OAAO;AAEL,gBAAO;MACT;IACF;AACA,IAAAA,SAAQ,QAAQ,iBAAiB,SAAS,KAAK;AAE/C,QAAI;AACF,YAAM,IAAI,QAAc,CAAC,UAAU,YAAW;AAC5C,aAAK,2BAA2B,MAAK;AACnC,mBAAQ;QACV;AACA,iBAAS;AACT,kBAAU;MACZ,CAAC;IACH;AACE,MAAAA,SAAQ,QAAQ,oBAAoB,SAAS,KAAK;IACpD;EACF;;;;EAKA,mBAAoB,QAAmB;AACrC,SAAK,KAAK,MAAM,uCAAuC,KAAK,GAAG;AAC/D,SAAK,aAAa,OAAO,IAAI;AAG7B,UAAM,YAAY,KAAK;AACvB,SAAK,sBAAsB,OAAO;AAElC,QAAI,cAAc,KAAK,OAAO,SAAS,GAAG;AACxC,WAAK,2BAA0B;IACjC;EACF;;;;EAKA,MAAM,WAAY,QAAqB,UAAuC;AAC5E,SAAK,KAAK,MAAM,8BAA8B,KAAK,GAAG;AACtD,SAAK,aAAa,OAAO,IAAI;AAG7B,QAAI,KAAK,qBAAqB,OAAO,QAAQ;AAC3C,YAAM,IAAI,2BAA2B,yBAAyB;IAChE;AAEA,UAAM,OAAO,MAAM,SAAQ;AAC3B,SAAK,sBAAsB,OAAO;AAElC,SAAK,WAAW,IAAI;EACtB;;;;EAKQ,aAAc,OAAa;AACjC,SAAK,QAAQ,KAAK,SAAS,KAAK,KAAK;AACnC,UAAI,KAAK,UAAU,YAAY,SAAS;AACtC,aAAK,QAAQ,YAAY;MAC3B;IACF;AACA,SAAK,QAAQ,KAAK,SAAS,KAAK,KAAK;AACnC,WAAK,iBAAgB;IACvB;AACA,SAAK,QAAQ,KAAK,SAAS,KAAK,KAAK;AACnC,WAAK,MAAK;IACZ;EACF;;;;;;;EAQQ,eAAY;AAClB,YAAQ,KAAK,OAAO;MAClB,KAAK,YAAY;AACf,aAAK,QAAQ,YAAY;AACzB,eAAO,KAAK;MACd,KAAK,YAAY;AACf,aAAK,QAAQ,YAAY;AACzB,eAAO,KAAK;MACd;AACE,eAAO;IACX;EACF;;;;EAKA,mBAAgB;AAEd,UAAM,QAAQ,KAAK,aAAY;AAK/B,UAAM,MAAM,KAAK,IAAG;AACpB,UAAM,MAAM,KAAK,OAAM;AACvB,QAAI,UAAU,KAAK,MAAM,MAAM,MAAM,KAAK,aAAa,MAAM,GAAG;AAE9D,WAAK,aAAa,KAAK,IAAI,KAAK,aAAa,GAAG,KAAK,OAAO,mBAAmB;IACjF;AAEA,QAAI,KAAK,sBAAsB,KAAK,cAAc,UAAU,GAAG;AAE7D;IACF;AAGA,UAAM,QAAQ,KAAK,aAAa,KAAK;AACrC,SAAK,qBAAqB,KAAK;AAG/B,SAAK,aAAa;AAGlB,SAAK,UAAU;MACb,MAAM,UAAU;MAChB,MAAM;MACN,UAAU,KAAK;MACf,QAAQ;KACT;EACH;;;;AC9RF,IAAM,oBAAoB;AAC1B,IAAMC,iBAAgB;AAKhB,IAAO,QAAP,MAAY;EAChB,WAAW;EACM;EACA;EAEjB,YAAa,YAAkC,OAAuB,CAAA,GAAE;AACtE,SAAK,cAAc;AACnB,SAAK,QAAQ;EACf;EAES,CAAC,OAAO,WAAW,IAAI;EAEvB,CAAC,mBAAmB,IAAc;IACzC;;EAGF,kBAAmB,MAAqB;AACtC,WAAO,IAAI,WAAW,KAAK,aAAa;MACtC,GAAG,KAAK;MACR,GAAG;KACJ;EACH;;AAOI,IAAO,aAAP,MAAiB;EACrB,WAAW;EACX;EACA;EAEiB;EACA;EACA;;EAGA;;EAGT;;EAES;;EAGT;;EAEA;;EAEA;;EAGS;EAET;EACA;;EAGA;;EAEA;EAES;EACA;EAEjB,YAAa,YAAkC,MAAoB;AACjE,SAAK,SAAS,KAAK,cAAc;AACjC,SAAK,SAAS,EAAE,GAAG,eAAe,GAAG,KAAI;AACzC,SAAK,SAAS,WAAW;AACzB,SAAK,MAAM,KAAK,OAAO,aAAa,cAAc;AAClD,iBAAa,KAAK,MAAM;AAExB,SAAK,kBAAkB,IAAI,gBAAe;AAC1C,oBAAgB,UAAU,KAAK,gBAAgB,MAAM;AAErD,SAAK,mBAAmB,KAAK;AAC7B,SAAK,cAAc,KAAK;AAExB,SAAK,WAAW,oBAAI,IAAG;AAEvB,SAAK,SAAS,SAAS;MACrB,OAAO,MAAW;AAChB,aAAK,KAAK,MAAM,oBAAoB;AAEpC,aAAK,SAAS,QAAQ,YAAS;AAC7B,iBAAO,QAAO;QAChB,CAAC;MACH;KACD;AAED,SAAK,OAAO,OAAO,WAA8D;AAC/E,YAAM,mBAAmB,MAAW;AAClC,cAAM,WAAW,YAAY,MAAM;AAEnC,YAAI,SAAS,UAAU,MAAM;AAC3B,gBAAM,MAAM,SAAS,OAAM;AAE3B,cAAIC,WAAU,GAAG,GAAG;AAClB,gBAAI,MAAM,SAAM;AACd,mBAAK,MAAM,yCAAyC,GAAG;YACzD,CAAC;UACH;QACF;MACF;AAEA,UAAI,QAAQ;AACZ,UAAI;AACF,cAAM,UAAU,IAAIC,UAAQ,MAAM;AAElC,YAAI;AACF,eAAK,gBAAgB,OAAO,iBAAiB,SAAS,gBAAgB;AAEtE,2BAAiB,SAAS,QAAQ,WAAU,GAAI;AAC9C,kBAAM,KAAK,YAAY,MAAM,QAAQ,MAAM,QAAQ;UACrD;QACF;AACE,eAAK,gBAAgB,OAAO,oBAAoB,SAAS,gBAAgB;QAC3E;AAEA,iBAAS,WAAW;MACtB,SAAS,KAAU;AAEjB,YAAI,gBAAgB,IAAI,IAAI,IAAI,GAAG;AACjC,eAAK,KAAK,MAAM,0BAA0B,GAAG;AAC7C,mBAAS,WAAW;QACtB,OAAO;AACL,eAAK,KAAK,MAAM,0BAA0B,GAAG;AAC7C,mBAAS,WAAW;QACtB;AAEA,gBAAQ;MACV;AAEA,WAAK,KAAK,MAAM,kBAAkB;AAElC,UAAI,SAAS,MAAM;AACjB,aAAK,MAAM,OAAO,MAAM;MAC1B,OAAO;AACL,cAAM,KAAK,MAAM,EAAE,OAAM,CAAE;MAC7B;IACF;AAEA,SAAK,oBAAoB;AACzB,SAAK,qBAAqB;AAG1B,SAAK,eAAe,KAAK,SAAS,IAAI;AAEtC,SAAK,aAAa;AAClB,SAAK,MAAM;AAEX,SAAK,KAAK,MAAM,eAAe;AAE/B,QAAI,KAAK,OAAO,iBAAiB;AAC/B,WAAK,cAAa,EAAG,MAAM,OAAK,KAAK,KAAK,MAAM,uBAAuB,CAAC,CAAC;IAC3E;AAGA,SAAK,KAAI,EAAG,MAAM,OAAK,KAAK,KAAK,MAAM,kBAAkB,CAAC,CAAC;EAC7D;EAEA,IAAI,UAAO;AACT,WAAO,MAAM,KAAK,KAAK,SAAS,OAAM,CAAE;EAC1C;EAEA,UAAWC,OAAyB;AAClC,QAAI,KAAK,iBAAiB,QAAW;AACnC,YAAM,IAAI,iBAAiB,uBAAuB;IACpD;AACA,QAAI,KAAK,gBAAgB,QAAW;AAClC,YAAM,IAAI,iBAAiB,sBAAsB;IACnD;AAEA,UAAM,KAAK,KAAK;AAChB,SAAK,gBAAgB;AAGrB,QAAI,KAAK,sBAAsB,KAAK,OAAO,oBAAoB;AAC7D,YAAM,IAAI,oCAAoC,+BAA+B;IAC/E;AAEA,SAAK,KAAK,MAAM,6BAA6B,EAAE;AAE/C,UAAM,SAAS,KAAK,WAAW,IAAIA,OAAM,YAAY,MAAM,UAAU;AACrE,SAAK,SAAS,IAAI,IAAI,MAAM;AAE5B,SAAK;AAGL,WAAO,iBAAgB;AAEvB,WAAO;EACT;;;;;;;;;EAUA,MAAM,OAAI;AACR,QAAI,KAAK,iBAAiB,QAAW;AACnC,YAAM,IAAI,iBAAiB,uBAAuB;IACpD;AACA,QAAI,KAAK,gBAAgB,QAAW;AAClC,YAAM,IAAI,iBAAiB,sBAAsB;IACnD;AAGA,QAAI,KAAK,eAAe,QAAW;AAEjC,UAAI,WAAW,MAAW;MAAE;AAC5B,WAAK,aAAa;QAChB,IAAI,KAAK;;QAET,SAAS,IAAI,QAAc,CAAC,SAAS,WAAU;AAC7C,gBAAM,SAAS,MAAW;AACxB,mBAAO,IAAI,iBAAiB,sBAAsB,CAAC;UACrD;AACA,eAAK,gBAAgB,OAAO,iBAAiB,SAAS,QAAQ,EAAE,MAAM,KAAI,CAAE;AAC5E,qBAAW,MAAW;AACpB,iBAAK,gBAAgB,OAAO,oBAAoB,SAAS,MAAM;AAC/D,oBAAO;UACT;QACF,CAAC;QACD,SAAS;;AAGX,YAAMC,SAAQ,KAAK,IAAG;AACtB,WAAK,SAAS,KAAK,WAAW,EAAE;AAEhC,UAAI;AACF,cAAM,KAAK,WAAW;MACxB;AAEE,eAAO,KAAK;MACd;AAEA,YAAM,MAAM,KAAK,IAAG;AACpB,WAAK,MAAM,MAAMA;IACnB,OAAO;AAEL,YAAM,KAAK,WAAW;IACxB;AACA,WAAO,KAAK;EACd;;;;;;;;EASA,SAAM;AACJ,WAAO,KAAK;EACd;;;;EAKA,MAAM,MAAOC,WAAwB,CAAA,GAAE;AACrC,QAAI,KAAK,gBAAgB,OAAO,SAAS;AAEvC;IACF;AAEA,UAAM,SAASA,UAAS,UAAU,WAAW;AAE7C,SAAK,KAAK,MAAM,yBAAyB,MAAM;AAE/C,QAAIA,SAAQ,UAAU,MAAM;AAC1B,YAAM,SAAS,YAAY,QAAQL,cAAa;AAChD,sBAAgB,UAAU,MAAM;AAEhC,MAAAK,WAAU;QACR,GAAGA;QACH;;IAEJ;AAEA,QAAI;AACF,YAAM,QAAQ,IACZ,CAAC,GAAG,KAAK,SAAS,OAAM,CAAE,EAAE,IAAI,OAAM,MAAK,EAAE,MAAMA,QAAO,CAAC,CAAC;AAI9D,WAAK,WAAW,MAAM;AAEtB,WAAK,YAAW;IAClB,SAAS,KAAU;AACjB,WAAK,MAAM,GAAG;IAChB;EACF;EAEA,MAAO,KAAY,QAAmB;AACpC,QAAI,KAAK,gBAAgB,OAAO,SAAS;AAEvC;IACF;AAEA,aAAS,UAAU,WAAW;AAG9B,SAAK,KAAK,MAAM,kCAAkC,QAAQ,GAAG;AAG7D,eAAW,UAAU,KAAK,SAAS,OAAM,GAAI;AAC3C,aAAO,MAAM,GAAG;IAClB;AAGA,SAAK,WAAW,MAAM;AAEtB,SAAK,YAAW;EAClB;EAEA,WAAQ;AACN,WAAO,KAAK,gBAAgB,OAAO;EACrC;;;;EAKQ,cAAW;AAEjB,SAAK,gBAAgB,MAAK;AAG1B,SAAK,OAAO,IAAG;EACjB;;EAGQ,WAAY,IAAYF,OAA0B,OAAoB,WAAiC;AAC7G,QAAI,KAAK,SAAS,IAAI,EAAE,KAAK,MAAM;AACjC,YAAM,IAAI,uBAAuB,oCAAoC;IACvE;AAEA,UAAM,SAAS,IAAI,YAAY;MAC7B,IAAI,GAAG,SAAQ;MACf,MAAAA;MACA;MACA;MACA,WAAW,KAAK,UAAU,KAAK,IAAI;MACnC,OAAO,MAAK;AACV,aAAK,YAAY,EAAE;AACnB,aAAK,cAAc,MAAM;MAC3B;MACA,KAAK,KAAK,OAAO,aAAa,gBAAgB,SAAS,IAAI,EAAE,EAAE;MAC/D,QAAQ,KAAK;MACb,QAAQ,KAAK,OAAO,KAAK,IAAI;KAC9B;AAED,WAAO;EACT;;;;;EAMQ,YAAa,IAAU;AAC7B,QAAI,KAAK,YAAY,KAAK,MAAM,IAAI;AAClC,WAAK;IACP,OAAO;AACL,WAAK;IACP;AACA,SAAK,SAAS,OAAO,EAAE;EACzB;EAEQ,MAAM,gBAAa;AACzB,SAAK,KAAK,MAAM,uCAAuC,KAAK,OAAO,iBAAiB;AACpF,WAAO,MAAM;AACX,UAAI;AACJ,UAAI;AACF,cAAM,WACJ,IAAI,QAAQ,CAAC,YAAW;AACtB,sBAAY,WAAW,SAAS,KAAK,OAAO,iBAAiB;QAC/D,CAAC,GACD,KAAK,gBAAgB,MAAM;AAE7B,aAAK,KAAI,EAAG,MAAM,OAAK,KAAK,KAAK,MAAM,kBAAkB,CAAC,CAAC;MAC7D,SAAS,GAAG;AAEV,sBAAc,SAAS;AACvB;MACF;IACF;EACF;EAEQ,MAAM,YAAa,QAAqB,UAAwC;AACtF,UAAM,EACJ,UACA,MACA,QAAAG,SAAM,IACJ;AACJ,SAAK,KAAK,MAAM,qBAAqB,MAAM;AAE3C,QAAI,aAAa,GAAG;AAClB,cAAQ,MAAM;QACZ,KAAK,UAAU,MACf;AAAE,eAAK,WAAW,MAAM;AAAG;QAAO;QAClC,KAAK,UAAU,QACf;AAAE,eAAK,aAAaA,QAAM;AAAG;QAAO;QACpC;AAEE,gBAAM,IAAI,kBAAkB,oBAAoB;MACpD;IACF,OAAO;AACL,cAAQ,OAAO,MAAM;QACnB,KAAK,UAAU;QACf,KAAK,UAAU,cACf;AAAE,gBAAM,KAAK,oBAAoB,QAAQ,QAAQ;AAAG;QAAO;QAC3D;AAEE,gBAAM,IAAI,kBAAkB,oBAAoB;MACpD;IACF;EACF;EAEQ,WAAY,QAAmB;AAErC,QAAI,OAAO,SAAS,KAAK,KAAK;AAC5B,WAAK,KAAK,MAAM,mCAAmC,OAAO,MAAM;AAChE,WAAK,SAAS,OAAO,QAAQ,KAAK,GAAG;IACvC,WAAW,OAAO,SAAS,KAAK,KAAK;AACnC,WAAK,KAAK,MAAM,oCAAoC,OAAO,MAAM;AACjE,WAAK,mBAAmB,OAAO,MAAM;IACvC,OAAO;AAEL,YAAM,IAAI,kBAAkB,oBAAoB;IAClD;EACF;EAEQ,mBAAoB,QAAc;AACxC,QAAI,KAAK,eAAe,QAAW;AAEjC,YAAM,IAAI,qBAAqB,oBAAoB;IACrD;AACA,QAAI,KAAK,WAAW,OAAO,QAAQ;AAEjC,YAAM,IAAI,qBAAqB,2BAA4B;IAC7D;AAGA,SAAK,WAAW,QAAO;EACzB;EAEQ,aAAc,QAAkB;AACtC,SAAK,KAAK,MAAM,6BAA6B,WAAW,MAAM,KAAK,SAAS;AAC5E,SAAK,eAAe;AAIpB,eAAW,UAAU,KAAK,SAAS,OAAM,GAAI;AAC3C,aAAO,MAAK;IACd;AAEA,SAAK,YAAW;EAClB;EAEQ,MAAM,oBAAqB,QAAqB,UAAwC;AAC9F,UAAM,EAAE,UAAU,MAAM,KAAI,IAAK;AAEjC,SAAK,OAAO,KAAK,SAAS,KAAK,KAAK;AAClC,WAAK,eAAe,QAAQ;IAC9B;AAEA,UAAM,SAAS,KAAK,SAAS,IAAI,QAAQ;AACzC,QAAI,WAAW,QAAW;AACxB,UAAI,SAAS,UAAU,MAAM;AAC3B,aAAK,MAAM,oCAAoC,QAAQ;AACvD,YAAI,aAAa,QAAW;AAC1B,gBAAM,IAAI,MAAM,aAAa;QAC/B;AACA,cAAM,SAAQ;MAChB,OAAO;AACL,aAAK,KAAK,MAAM,kCAAkC,QAAQ;MAC5D;AACA;IACF;AAEA,YAAQ,MAAM;MACZ,KAAK,UAAU,cAAc;AAC3B,eAAO,mBAAmB,MAAM;AAAG;MACrC;MACA,KAAK,UAAU,MAAM;AACnB,YAAI,aAAa,QAAW;AAC1B,gBAAM,IAAI,MAAM,aAAa;QAC/B;AAEA,cAAM,OAAO,WAAW,QAAQ,QAAQ;AAAG;MAC7C;MACA;AACE,cAAM,IAAI,MAAM,aAAa;IACjC;EACF;EAEQ,eAAgB,IAAU;AAChC,QAAI,KAAK,YAAY,KAAK,MAAM,IAAI;AAClC,YAAM,IAAI,uBAAuB,4BAA4B;IAC/D;AACA,QAAI,KAAK,SAAS,IAAI,EAAE,GAAG;AACzB;IACF;AAEA,SAAK,KAAK,MAAM,6BAA6B,EAAE;AAE/C,QAAI,KAAK,gBAAgB,QAAW;AAElC,WAAK,UAAU;QACb,MAAM,UAAU;QAChB,MAAM,KAAK;QACX,UAAU;QACV,QAAQ;OACT;AAAG;IACN;AAGA,QAAI,KAAK,qBAAqB,KAAK,OAAO,mBAAmB;AAC3D,WAAK,MAAM,mDAAmD;AAC9D,WAAK,UAAU;QACb,MAAM,UAAU;QAChB,MAAM,KAAK;QACX,UAAU;QACV,QAAQ;OACT;AAAG;IACN;AAGA,UAAM,SAAS,KAAK,WAAW,IAAI,QAAW,YAAY,aAAa,SAAS;AAEhF,SAAK;AAEL,SAAK,SAAS,IAAI,IAAI,MAAM;AAE5B,SAAK,mBAAmB,MAAM;EAChC;EAEQ,UAAW,QAAqB,MAAqB;AAC3D,SAAK,KAAK,MAAM,oBAAoB,MAAM;AAC1C,QAAI,OAAO,SAAS,UAAU,MAAM;AAClC,UAAI,SAAS,QAAW;AACtB,cAAM,IAAI,kBAAkB,eAAe;MAC7C;AACA,WAAK,OAAO,KACV,IAAI,eAAe,aAAa,MAAM,GAAG,IAAI,CAAC;IAElD,OAAO;AACL,WAAK,OAAO,KAAK,aAAa,MAAM,CAAC;IACvC;EACF;EAEQ,SAAU,QAAgB,OAAa,KAAK,KAAG;AACrD,QAAI,SAAS,KAAK,KAAK;AACrB,WAAK,KAAK,MAAM,kCAAkC,MAAM;IAC1D,OAAO;AACL,WAAK,KAAK,MAAM,mCAAmC,MAAM;IAC3D;AACA,SAAK,UAAU;MACb,MAAM,UAAU;MAChB;MACA,UAAU;MACV,QAAQ;KACT;EACH;EAEQ,WAAY,SAAqB,WAAW,mBAAiB;AACnE,SAAK,MAAM,4BAA4B,WAAW,MAAM,CAAC;AACzD,SAAK,cAAc;AACnB,SAAK,UAAU;MACb,MAAM,UAAU;MAChB,MAAM;MACN,UAAU;MACV,QAAQ;KACT;EACH;;AAGF,SAASL,WAAyB,OAAU;AAC1C,SAAO,SAAS,QAAQ,OAAO,MAAM,SAAS;AAChD;;;ACtgBM,SAAU,MAAO,OAAuB,CAAA,GAAE;AAC9C,SAAO,CAAC,eAAe,IAAI,MAAM,YAAY,IAAI;AACnD;;;ACrFM,SAAU,gBAAiB,IAAa;AAC5C,MAAI;AACF,eAAW,EAAE,MAAAM,QAAM,OAAAC,OAAK,KAAM,GAAG,cAAa,GAAI;AAChD,UAAIA,UAAS,MAAM;AACjB;MACF;AAEA,UAAID,WAAS,UAAU;AACrB,eAAO,aAAa,YAAYC,MAAK;MACvC;IACF;EACF,QAAQ;EAER;AAEA,SAAO;AACT;;;AC8CM,SAAU,cAAe,IAAsD,UAAkBC,UAA8B;AACnI,MAAI;AACJ,MAAI;AACJ,MAAI,UAAU;AAEd,WAAS,UAAO;AACd,UAAM,OAAqB;MACzB,QAAQ,mBAAmB;;AAG7B,QAAIA,UAAS,WAAW,MAAM;AAC5B,YAAM,SAAS,UAAU,CAAC,mBAAmB,QAAQ,YAAY,QAAQA,SAAQ,OAAO,CAAC,CAAC;AAC1F,sBAAgB,UAAU,MAAM;AAEhC,WAAK,SAAS;IAChB;AAEA,cAAU;AAEV,YAAQ,QAAO,EAAG,KAAK,YAAW;AAChC,YAAM,GAAG,IAAI;IACf,CAAC,EACE,MAAM,MAAK;IAAE,CAAC,EACd,QAAQ,MAAK;AACZ,gBAAU;AAEV,UAAI,mBAAmB,OAAO,SAAS;AAErC;MACF;AAGA,gBAAU,WAAW,SAAS,QAAQ;IACxC,CAAC;EACL;AAEA,QAAM,mBAAmB,SAAS,SAASA,UAAS,YAAY,GAAG;AAEnE,MAAI,UAAU;AAEd,SAAO;IACL,aAAa,CAAC,OAAY;AACxB,UAAI,aAAa,IAAI;AAEnB;MACF;AAEA,iBAAW;AAGX,UAAI,WAAW,MAAM;AACnB,qBAAa,OAAO;AACpB,kBAAU,WAAW,SAAS,QAAQ;MACxC;IACF;IACA,YAAY,CAAC,OAAY;AACvB,MAAAA,aAAY,CAAA;AACZ,MAAAA,SAAQ,UAAU;IACpB;IACA,KAAK,MAAW;AACd,UAAI,SAAS;AACX;MACF;AAEA,mBAAa,OAAO;AACpB,uBAAgB;IAClB;IACA,OAAO,MAAW;AAChB,UAAI,SAAS;AACX;MACF;AAEA,gBAAU;AACV,2BAAqB,IAAI,gBAAe;AACxC,sBAAgB,UAAU,mBAAmB,MAAM;AAGnD,UAAIA,UAAS,mBAAmB,MAAM;AACpC,uBAAe,MAAK;AAClB,kBAAO;QACT,CAAC;MACH,OAAO;AAEL,kBAAU,WAAW,SAAS,QAAQ;MACxC;IACF;IACA,MAAM,MAAW;AACf,mBAAa,OAAO;AACpB,0BAAoB,MAAK;AACzB,gBAAU;IACZ;;AAEJ;;;ACvDM,SAAU,SAAiD,QAAgB,MAAkC;AACjH,QAAM,KAAK,SAAS,QAAQ,IAAI;AAEhC,QAAM,IAA4B;IAChC,MAAM,OAAO,OAAOC,aAA0B;AAE5C,YAAMC,SAAQ,MAAM,GAAG,KAAKD,QAAO;AAEnC,aAAO,MAAM,OAAOC,MAAK;IAC3B;IACA,OAAO,OAAOC,UAAS,OAAOF,aAA0B;AAEtD,YAAM,GAAG,MAAM,MAAM,OAAOE,QAAO,GAAGF,QAAO;IAC/C;IACA,QAAQ,OAAOG,WAAU,OAAOH,aAA0B;AAExD,YAAM,GAAG,OAAOG,UAAS,IAAI,CAAAD,aAAW,MAAM,OAAOA,QAAO,CAAC,GAAGF,QAAO;IACzE;IACA,IAAI,CAAC,UAAS;AACZ,aAAO;QACL,MAAM,OAAOA,aAAY,EAAE,KAAK,OAAOA,QAAO;QAC9C,OAAO,OAAO,GAAGA,aAAY,EAAE,MAAM,GAAG,OAAOA,QAAO;QACtD,QAAQ,OAAO,GAAGA,aAAY,EAAE,OAAO,GAAG,OAAOA,QAAO;QACxD,QAAQ,MAAM;;IAElB;IACA,QAAQ,MAAK;AACX,aAAO,GAAG,OAAM;IAClB;;AAGF,SAAO;AACT;;;AC1IO,IAAMI,UAAQ,IAAI,WAAW,CAAC;AA0B/B,SAAUC,SAAQ,GAA6C;AACnE,MAAI,aAAa,cAAc,EAAE,YAAY,SAAS,cAAc;AAAE,WAAO;EAAE;AAC/E,MAAI,aAAa,aAAa;AAAE,WAAO,IAAI,WAAW,CAAC;EAAE;AACzD,MAAI,YAAY,OAAO,CAAC,GAAG;AACzB,WAAO,IAAI,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU;EAC5D;AACA,QAAM,IAAI,MAAM,mCAAmC;AACrD;;;AChCA,IAAIC,aAAWC;AAEf,IAAIC,QAAM;AAAV,IACIC,SAAO;AADX,IAEIC,WAAS,CAACD;AAFd,IAGIE,QAAM,KAAK,IAAI,GAAG,EAAE;AAOxB,SAASJ,SAAO,KAAK,KAAK,QAAM;AAC9B,QAAM,OAAO,CAAA;AACb,WAAS,UAAU;AACnB,MAAI,YAAY;AAEhB,SAAM,OAAOI,OAAK;AAChB,QAAI,QAAQ,IAAK,MAAM,MAAQH;AAC/B,WAAO;EACT;AACA,SAAM,MAAME,UAAQ;AAClB,QAAI,QAAQ,IAAK,MAAM,MAAQF;AAC/B,aAAS;EACX;AACA,MAAI,MAAM,IAAI,MAAM;AAGpB,EAAAD,SAAO,QAAQ,SAAS,YAAY;AAEpC,SAAO;AACT;AAEA,IAAIK,WAASC;AAEb,IAAIC,UAAQ;AAAZ,IACIC,WAAS;AAMb,SAASF,OAAK,KAAK,QAAM;AACvB,MAAI,MAAS,GACT,SAAS,UAAU,GACnB,QAAS,GACT,UAAU,QACV,GACA,IAAI,IAAI;AAEZ,KAAG;AACD,QAAI,WAAW,GAAG;AAEhB,MAAAA,OAAK,QAAQ;AACb,YAAM,IAAI,WAAW,yBAAyB;IAChD;AACA,QAAI,IAAI,SAAS;AACjB,WAAO,QAAQ,MACV,IAAIE,aAAW,SACf,IAAIA,YAAU,KAAK,IAAI,GAAG,KAAK;AACpC,aAAS;EACX,SAAS,KAAKD;AAGd,EAAAD,OAAK,QAAQ,UAAU;AAEvB,SAAO;AACT;AAEA,IAAIG,OAAK,KAAK,IAAI,GAAI,CAAC;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AAEvB,IAAIC,WAAS,SAAgCC,QAAK;AAChD,SACEA,SAAQV,OAAK,IACbU,SAAQT,OAAK,IACbS,SAAQR,OAAK,IACbQ,SAAQP,OAAK,IACbO,SAAQN,OAAK,IACbM,SAAQL,OAAK,IACbK,SAAQJ,OAAK,IACbI,SAAQH,OAAK,IACbG,SAAQF,OAAK,IACA;AAEjB;AAEA,IAAIG,WAAS;EACT,QAAQrB;EACR,QAAQM;EACR,gBAAgBa;;AAGpB,IAAIG,iBAAeD;AAEnB,IAAAE,mBAAeD;;;ACrGT,SAAUE,SAAQ,MAAkB,SAAS,GAAC;AAClD,QAAMC,SAAOC,iBAAO,OAAO,MAAM,MAAM;AACvC,SAAO,CAACD,QAAMC,iBAAO,OAAO,KAAK;AACnC;;;ACkBM,SAAUC,SAAQ,WAAqB;AAC3C,QAAM,QAAQC,SAAO,SAAS;AAC9B,QAAM,CAACC,QAAM,UAAU,IAAWF,SAAO,KAAK;AAC9C,QAAM,CAAC,MAAM,YAAY,IAAWA,SAAO,MAAM,SAAS,UAAU,CAAC;AACrE,QAAMG,UAAS,MAAM,SAAS,aAAa,YAAY;AAEvD,MAAIA,QAAO,eAAe,MAAM;AAC9B,UAAM,IAAI,MAAM,kBAAkB;EACpC;AAEA,SAAO,IAAIC,SAAOF,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAqBM,IAAOE,WAAP,MAAa;EACR;EACA;EACA;EACA;;;;EAKT,YAAaC,QAAY,MAAYC,SAAoB,OAAiB;AACxE,SAAK,OAAOD;AACZ,SAAK,OAAO;AACZ,SAAK,SAASC;AACd,SAAK,QAAQ;EACf;;;;AClEK,IAAMC,mBAAkB;AAKxB,IAAMC,iBAAgB;AAKtB,IAAMC,oBAAmB;AACzB,IAAM,UAAU;AAChB,IAAM,sBAAsB;AAC5B,IAAM,uBAAuB;AAC7B,IAAM,+BAA+B;AACrC,IAAM,mBAAmB;;;ACR1B,IAAW;CAAjB,SAAiBC,UAAO;AACtB,MAAYC;AAAZ,GAAA,SAAYA,cAAW;AACrB,IAAAA,aAAA,MAAA,IAAA;AACA,IAAAA,aAAA,eAAA,IAAA;EACF,GAHYA,eAAAD,SAAA,gBAAAA,SAAA,cAAW,CAAA,EAAA;AAKvB,MAAKE;AAAL,GAAA,SAAKA,sBAAmB;AACtB,IAAAA,qBAAAA,qBAAA,MAAA,IAAA,CAAA,IAAA;AACA,IAAAA,qBAAAA,qBAAA,eAAA,IAAA,CAAA,IAAA;EACF,GAHKA,yBAAAA,uBAAmB,CAAA,EAAA;AAKxB,GAAA,SAAiBD,cAAW;AACb,IAAAA,aAAA,QAAQ,MAAyB;AAC5C,aAAO,YAAyBC,oBAAmB;IACrD;EACF,GAJiBD,eAAAD,SAAA,gBAAAA,SAAA,cAAW,CAAA,EAAA;AAM5B,MAAY;AAAZ,GAAA,SAAYG,iBAAc;AACxB,IAAAA,gBAAA,IAAA,IAAA;AACA,IAAAA,gBAAA,cAAA,IAAA;AACA,IAAAA,gBAAA,gBAAA,IAAA;AACA,IAAAA,gBAAA,eAAA,IAAA;AACA,IAAAA,gBAAA,kBAAA,IAAA;EACF,GANY,iBAAAH,SAAA,mBAAAA,SAAA,iBAAc,CAAA,EAAA;AAQ1B,MAAK;AAAL,GAAA,SAAKI,yBAAsB;AACzB,IAAAA,wBAAAA,wBAAA,IAAA,IAAA,CAAA,IAAA;AACA,IAAAA,wBAAAA,wBAAA,cAAA,IAAA,GAAA,IAAA;AACA,IAAAA,wBAAAA,wBAAA,gBAAA,IAAA,GAAA,IAAA;AACA,IAAAA,wBAAAA,wBAAA,eAAA,IAAA,GAAA,IAAA;AACA,IAAAA,wBAAAA,wBAAA,kBAAA,IAAA,GAAA,IAAA;EACF,GANK,2BAAA,yBAAsB,CAAA,EAAA;AAQ3B,GAAA,SAAiBD,iBAAc;AAChB,IAAAA,gBAAA,QAAQ,MAA4B;AAC/C,aAAO,YAA4B,sBAAsB;IAC3D;EACF,GAJiB,iBAAAH,SAAA,mBAAAA,SAAA,iBAAc,CAAA,EAAA;AAW/B,MAAiBK;AAAjB,GAAA,SAAiBA,WAAQ;AACvB,QAAIC;AAES,IAAAD,UAAA,QAAQ,MAAsB;AACzC,UAAIC,WAAU,MAAM;AAClB,QAAAA,UAAS,QAAkB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAC/C,cAAI,KAAK,oBAAoB,OAAO;AAClC,cAAE,KAAI;UACR;AAEA,cAAI,IAAI,MAAM,MAAM;AAClB,cAAE,OAAO,EAAE;AACX,cAAE,MAAM,IAAI,EAAE;UAChB;AAEA,cAAI,IAAI,SAAS,MAAM;AACrB,uBAAWC,UAAS,IAAI,OAAO;AAC7B,gBAAE,OAAO,EAAE;AACX,gBAAE,MAAMA,MAAK;YACf;UACF;AAEA,cAAI,KAAK,oBAAoB,OAAO;AAClC,cAAE,OAAM;UACV;QACF,GAAG,CAAC,QAAQC,UAAQ,OAAO,CAAA,MAAM;AAC/B,gBAAM,MAAW;YACf,OAAO,CAAA;;AAGT,gBAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,iBAAO,OAAO,MAAM,KAAK;AACvB,kBAAM,MAAM,OAAO,OAAM;AAEzB,oBAAQ,QAAQ,GAAG;cACjB,KAAK,GAAG;AACN,oBAAI,KAAK,OAAO,MAAK;AACrB;cACF;cACA,KAAK,GAAG;AACN,oBAAI,KAAK,QAAQ,SAAS,QAAQ,IAAI,MAAM,WAAW,KAAK,OAAO,OAAO;AACxE,wBAAM,IAAI,eAAe,wDAAwD;gBACnF;AAEA,oBAAI,MAAM,KAAK,OAAO,MAAK,CAAE;AAC7B;cACF;cACA,SAAS;AACP,uBAAO,SAAS,MAAM,CAAC;AACvB;cACF;YACF;UACF;AAEA,iBAAO;QACT,CAAC;MACH;AAEA,aAAOF;IACT;AAEa,IAAAD,UAAA,SAAS,CAAC,QAAsC;AAC3D,aAAO,cAAc,KAAKA,UAAS,MAAK,CAAE;IAC5C;AAEa,IAAAA,UAAA,SAAS,CAAC,KAAkC,SAA4C;AACnG,aAAO,cAAc,KAAKA,UAAS,MAAK,GAAI,IAAI;IAClD;EACF,GArEiBA,YAAAL,SAAA,aAAAA,SAAA,WAAQ,CAAA,EAAA;AA2EzB,MAAiB;AAAjB,GAAA,SAAiBS,OAAI;AACnB,QAAIH;AAES,IAAAG,MAAA,QAAQ,MAAkB;AACrC,UAAIH,WAAU,MAAM;AAClB,QAAAA,UAAS,QAAc,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAC3C,cAAI,KAAK,oBAAoB,OAAO;AAClC,cAAE,KAAI;UACR;AAEA,cAAI,IAAI,QAAQ,MAAM;AACpB,cAAE,OAAO,EAAE;AACX,YAAAN,SAAQ,SAAS,MAAK,EAAG,OAAO,IAAI,MAAM,CAAC;UAC7C;AAEA,cAAI,KAAK,oBAAoB,OAAO;AAClC,cAAE,OAAM;UACV;QACF,GAAG,CAAC,QAAQQ,UAAQ,OAAO,CAAA,MAAM;AAC/B,gBAAM,MAAW,CAAA;AAEjB,gBAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,iBAAO,OAAO,MAAM,KAAK;AACvB,kBAAM,MAAM,OAAO,OAAM;AAEzB,oBAAQ,QAAQ,GAAG;cACjB,KAAK,GAAG;AACN,oBAAI,OAAOR,SAAQ,SAAS,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;kBAClE,QAAQ,KAAK,QAAQ;iBACtB;AACD;cACF;cACA,SAAS;AACP,uBAAO,SAAS,MAAM,CAAC;AACvB;cACF;YACF;UACF;AAEA,iBAAO;QACT,CAAC;MACH;AAEA,aAAOM;IACT;AAEa,IAAAG,MAAA,SAAS,CAAC,QAAkC;AACvD,aAAO,cAAc,KAAKA,MAAK,MAAK,CAAE;IACxC;AAEa,IAAAA,MAAA,SAAS,CAAC,KAAkC,SAAoC;AAC3F,aAAO,cAAc,KAAKA,MAAK,MAAK,GAAI,IAAI;IAC9C;EACF,GAtDiB,OAAAT,SAAA,SAAAA,SAAA,OAAI,CAAA,EAAA;AA8DrB,MAAiB;AAAjB,GAAA,SAAiBU,eAAY;AAC3B,QAAIJ;AAES,IAAAI,cAAA,QAAQ,MAA0B;AAC7C,UAAIJ,WAAU,MAAM;AAClB,QAAAA,UAAS,QAAsB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AACnD,cAAI,KAAK,oBAAoB,OAAO;AAClC,cAAE,KAAI;UACR;AAEA,cAAI,IAAI,UAAU,MAAM;AACtB,cAAE,OAAO,CAAC;AACV,YAAAN,SAAQ,eAAe,MAAK,EAAG,OAAO,IAAI,QAAQ,CAAC;UACrD;AAEA,cAAI,IAAI,cAAc,MAAM;AAC1B,cAAE,OAAO,EAAE;AACX,cAAE,OAAO,IAAI,UAAU;UACzB;AAEA,cAAI,IAAI,QAAQ,MAAM;AACpB,cAAE,OAAO,EAAE;AACX,cAAE,MAAM,IAAI,IAAI;UAClB;AAEA,cAAI,KAAK,oBAAoB,OAAO;AAClC,cAAE,OAAM;UACV;QACF,GAAG,CAAC,QAAQQ,UAAQ,OAAO,CAAA,MAAM;AAC/B,gBAAM,MAAW,CAAA;AAEjB,gBAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,iBAAO,OAAO,MAAM,KAAK;AACvB,kBAAM,MAAM,OAAO,OAAM;AAEzB,oBAAQ,QAAQ,GAAG;cACjB,KAAK,GAAG;AACN,oBAAI,SAASR,SAAQ,eAAe,MAAK,EAAG,OAAO,MAAM;AACzD;cACF;cACA,KAAK,GAAG;AACN,oBAAI,aAAa,OAAO,OAAM;AAC9B;cACF;cACA,KAAK,GAAG;AACN,oBAAI,OAAO,OAAO,MAAK;AACvB;cACF;cACA,SAAS;AACP,uBAAO,SAAS,MAAM,CAAC;AACvB;cACF;YACF;UACF;AAEA,iBAAO;QACT,CAAC;MACH;AAEA,aAAOM;IACT;AAEa,IAAAI,cAAA,SAAS,CAAC,QAA0C;AAC/D,aAAO,cAAc,KAAKA,cAAa,MAAK,CAAE;IAChD;AAEa,IAAAA,cAAA,SAAS,CAAC,KAAkC,SAAoD;AAC3G,aAAO,cAAc,KAAKA,cAAa,MAAK,GAAI,IAAI;IACtD;EACF,GAtEiB,eAAAV,SAAA,iBAAAA,SAAA,eAAY,CAAA,EAAA;AAwE7B,MAAI;AAES,EAAAA,SAAA,QAAQ,MAAqB;AACxC,QAAI,UAAU,MAAM;AAClB,eAAS,QAAiB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAC9C,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAI,IAAI,QAAQ,MAAM;AACpB,YAAE,OAAO,CAAC;AACV,UAAAA,SAAQ,YAAY,MAAK,EAAG,OAAO,IAAI,MAAM,CAAC;QAChD;AAEA,YAAI,IAAI,QAAQ,MAAM;AACpB,YAAE,OAAO,EAAE;AACX,UAAAA,SAAQ,KAAK,MAAK,EAAG,OAAO,IAAI,MAAM,CAAC;QACzC;AAEA,YAAI,IAAI,gBAAgB,MAAM;AAC5B,YAAE,OAAO,EAAE;AACX,UAAAA,SAAQ,aAAa,MAAK,EAAG,OAAO,IAAI,cAAc,CAAC;QACzD;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQQ,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW,CAAA;AAEjB,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,OAAOR,SAAQ,YAAY,MAAK,EAAG,OAAO,MAAM;AACpD;YACF;YACA,KAAK,GAAG;AACN,kBAAI,OAAOA,SAAQ,KAAK,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;gBAC9D,QAAQ,KAAK,QAAQ;eACtB;AACD;YACF;YACA,KAAK,GAAG;AACN,kBAAI,eAAeA,SAAQ,aAAa,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;gBAC9E,QAAQ,KAAK,QAAQ;eACtB;AACD;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAA,SAAA,SAAS,CAAC,QAAqC;AAC1D,WAAO,cAAc,KAAKA,SAAQ,MAAK,CAAE;EAC3C;AAEa,EAAAA,SAAA,SAAS,CAAC,KAAkC,SAA0C;AACjG,WAAO,cAAc,KAAKA,SAAQ,MAAK,GAAI,IAAI;EACjD;AACF,GAtUiB,YAAA,UAAO,CAAA,EAAA;;;ACiBxB,IAAM,4BAA4B;AAClC,IAAM,wBAAwB;AAwDxB,IAAO,iBAAP,MAAqB;EACR;EACA;EACA;EACA;EACA;EACA;EACT;EACS;EACT;EACS;EACA;EACA;EACA;EAEjB,YAAa,YAA+B,MAAwB;AAClE,SAAK,aAAa;AAClB,SAAK,MAAM,WAAW,OAAO,aAAa,iBAAiB;AAC3D,SAAK,UAAU;AACf,SAAK,WAAW,IAAI,KAAK,kBAAkBW,gBAAe,IAAIC,cAAa,IAAIC,iBAAgB;AAC/F,SAAK,UAAU,KAAK,WAAW;AAC/B,SAAK,oBAAoB,KAAK,qBAAqB;AACnD,SAAK,qBAAqB,KAAK,sBAAsB;AACrD,SAAK,sBAAsB,KAAK,uBAAuB;AACvD,SAAK,iBAAiB,KAAK,kBAAkB;AAC7C,SAAK,cAAc,WAAW;MAC5B,MAAM;MACN,SAAS,WAAW;KACrB;AACD,SAAK,YAAY,cAAc,KAAK,gBAAgB,KAAK,IAAI,GAAG,GAAM;AACtE,SAAK,gBAAgB,2BAA2B,IAAI;EACtD;EAES,CAAC,OAAO,WAAW,IAAI;EAEvB,CAAC,mBAAmB,IAAc;IACzC;;EAGF,KAAK,mBAAmB,IAAC;AACvB,WAAO;MACL;;EAEJ;EAEA,YAAS;AACP,WAAO,KAAK;EACd;EAEA,MAAM,QAAK;AACT,QAAI,KAAK,SAAS;AAChB;IACF;AAEA,UAAM,KAAK,WAAW,UAAU,OAAO,KAAK,UAAU,CAAC,SAAQ;AAC7D,WAAK,KAAK,4BAA4B,IAAI,EACvC,MAAM,SAAM;AACX,aAAK,IAAI,MAAM,+CAA+C,GAAG;MACnE,CAAC;IACL,GAAG;MACD,mBAAmB,KAAK;MACxB,oBAAoB,KAAK;KAC1B;AAED,SAAK,aAAa,MAAM,KAAK,WAAW,UAAU,SAAS,KAAK,UAAU;MACxE,WAAW,CAACC,SAAQ,eAAc;AAChC,aAAK,wBAAwB,UAAU,EACpC,MAAM,SAAM;AACX,eAAK,IAAI,MAAM,mCAAmC,GAAG;QACvD,CAAC;MACL;KACD;AAED,SAAK,UAAU,MAAK;AACpB,SAAK,UAAU;EACjB;EAEA,MAAM,OAAI;AACR,UAAM,KAAK,WAAW,UAAU,SAAS,KAAK,QAAQ;AAEtD,QAAI,KAAK,cAAc,MAAM;AAC3B,YAAM,KAAK,WAAW,UAAU,SAAS,KAAK,UAAU;IAC1D;AAEA,SAAK,YAAY,MAAK;AACtB,SAAK,UAAU,KAAI;AACnB,SAAK,UAAU;EACjB;EAEQ,0BAAuB;AAC7B,WAAO,KAAK,WAAW,eAAe,yBAAwB,EAAG,MAAM,UAAO;AAC5E,UAAI,KAAK,UAAU,KAAK,IAAG,GAAI;AAE7B,eAAO;MACT;AAEA,aAAO,KAAK;IACd,CAAC;EACH;EAEA,MAAM,gBAAiBC,UAAsB;AAE3C,QAAI,KAAK,wBAAuB,GAAI;AAClC;IACF;AAEA,UAAM,SAAS,UAAU;MACvB,YAAY,QAAQ,GAAM;MAC1BA,UAAS;KACV;AAID,QAAI;AACF,WAAK,IAAI,mDAAmD;AAE5D,uBAAiB,QAAQ,KAAK,WAAW,WAAW,KAAK,EAAE,OAAM,CAAE,GAAG;AACpE,YAAI,CAAE,MAAM,KAAK,WAAW,kBAAkB,WAAW,KAAK,UAAU,GAAI;AAC1E,eAAK,IAAI,MAAM,sCAAsC,KAAK,IAAI,KAAK,WAAW,IAAI,QAAM,GAAG,SAAQ,CAAE,EAAE,KAAK,IAAI,CAAC;AAGjH;QACF;AAEA,YAAI;AACF,eAAK,IAAI,MAAM,uBAAuB,KAAK,EAAE;AAC7C,gBAAM,KAAK,WAAW,kBAAkB,eAAe,KAAK,YAAY;YACtE;WACD;QACH,QAAQ;QAAC;AAET,YAAI,KAAK,wBAAuB,GAAI;AAClC,eAAK,IAAI,kDAAkD;AAC3D;QACF;AAEA,YAAI,CAAC,KAAK,sBAAqB,GAAI;AACjC,eAAK,IAAI,oDAAoD;AAC7D;QACF;MACF;IACF,QAAQ;IAAC;EACX;;;;EAKA,MAAM,4BAA6B,MAAwB;AACzD,UAAM,SAAS,YAAY,QAAQ,KAAK,OAAO;AAC/C,oBAAgB,UAAU,MAAM;AAEhC,UAAMC,YAAW,SAAS,KAAK,QAAQ;MACrC,eAAe,KAAK;KACrB,EAAE,GAAG,OAAO;AAEb,QAAI;AACF,YAAM,UAAU,MAAMA,UAAS,KAAK;QAClC;OACD;AACD,YAAM,WAAW,MAAM,KAAK,qBAAqB,SAAS,KAAK,YAAY;QACzE;OACD;AACD,YAAMA,UAAS,MAAM,UAAU;QAC7B;OACD;AACD,YAAMA,UAAS,OAAM,EAAG,OAAM,EAAG,MAAM;QACrC;OACD;IACH,SAAS,KAAU;AACjB,WAAK,IAAI,MAAM,+CAA+C,GAAG;AACjE,WAAK,OAAO,MAAM,GAAG;IACvB;EACF;EAEQ,MAAM,qBAAsBC,UAAkB,YAAwBF,UAAsB;AAClG,UAAM,WAAW,KAAK,WAAW,eAAe,aAAY,EACzD,IAAI,QAAM,GAAG,UAAS,EAAG,IAAI;AAEhC,UAAM,cAAcE,SAAQ;AAE5B,QAAI,eAAe,MAAM;AACvB,WAAK,IAAI,MAAM,+BAA+B;AAE9C,aAAO;QACL,MAAM,QAAQ,YAAY;QAC1B,cAAc;UACZ,QAAQ,QAAQ,eAAe;UAC/B,YAAY;;;IAGlB;AAEA,QAAIH;AACJ,UAAM,OAAO,YAAY;AAEzB,QAAI,MAAM,MAAM,MAAM;AACpB,WAAK,IAAI,MAAM,6BAA6B;AAE5C,aAAO;QACL,MAAM,QAAQ,YAAY;QAC1B,cAAc;UACZ,QAAQ,QAAQ,eAAe;UAC/B,YAAY;;;IAGlB;AAEA,QAAI;AACF,YAAMI,UAAgBC,SAAO,KAAK,EAAE;AACpC,MAAAL,UAAS,oBAAoBI,OAAM;IACrC,SAAS,KAAK;AACZ,WAAK,IAAI,MAAM,uBAAuB,GAAG;AAEzC,aAAO;QACL,MAAM,QAAQ,YAAY;QAC1B,cAAc;UACZ,QAAQ,QAAQ,eAAe;UAC/B,YAAY;;;IAGlB;AAEA,SAAK,IAAI,4BAA4BJ,OAAM;AAG3C,QAAI,CAAC,WAAW,WAAW,OAAOA,OAAM,GAAG;AACzC,WAAK,IAAI,gDAAgDA,SAAQ,WAAW,UAAU;AAEtF,aAAO;QACL,MAAM,QAAQ,YAAY;QAC1B,cAAc;UACZ,QAAQ,QAAQ,eAAe;UAC/B,YAAY;;;IAGlB;AAGA,UAAM,aAAa,KAAK,MACrB,IAAI,SAAO,UAAU,GAAG,CAAC,EACzB,OAAO,QAAK;AACX,YAAMC,WAAU,GAAG,UAAS;AAE5B,UAAI,UAAU,EAAE,GAAG;AAEjB,eAAO;MACT;AAEA,UAAIA,SAAQ,SAAS,WAAW,WAAW,UAAS,EAAG,MAAM;AAE3D,aAAK,IAAI,MAAM,6DAA6D,IAAI,WAAW,UAAU;AACrG,eAAO;MACT;AAEA,UAAI,SAAS,SAASA,SAAQ,IAAI,GAAG;AAEnC,eAAO;MACT;AAEA,UAAI,KAAK,WAAW,iBAAiB,0BAA0B,EAAE,KAAK,MAAM;AAE1E,aAAK,IAAI,MAAM,0CAA0C,EAAE;AAC3D,eAAO;MACT;AAEA,aAAO;IACT,CAAC,EACA,IAAI,QAAK;AACR,UAAI,GAAG,UAAS,KAAM,MAAM;AAE1B,aAAK,GAAG,YAAY,QAAQD,QAAO,SAAQ,CAAE,EAAE;MACjD;AAEA,aAAO;IACT,CAAC;AAGH,QAAI,WAAW,WAAW,GAAG;AAC3B,WAAK,IAAI,sDAAsDA,OAAM;AAErE,aAAO;QACL,MAAM,QAAQ,YAAY;QAC1B,cAAc;UACZ,QAAQ,QAAQ,eAAe;UAC/B,YAAY;;;IAGlB;AAEA,SAAK,IAAI,kCAAkC,WAAW,IAAI,QAAM,GAAG,SAAQ,CAAE,EAAE,KAAK,IAAI,GAAGA,OAAM;AAEjG,QAAI,eAAe;AACnB,QAAI,gBAAgB,WAAW,CAAC;AAEhC,eAAWM,cAAa,YAAY;AAClC,UAAIC;AACJ,sBAAgBD;AAEhB,UAAI;AACF,QAAAC,cAAa,MAAM,KAAK,WAAW,kBAAkB,eAAeD,YAAWL,QAAO;AAEtF,YAAI,CAACM,YAAW,WAAW,OAAOD,UAAS,GAAG;AAC5C,eAAK,IAAI,MAAM,kCAAkCA,YAAWC,YAAW,UAAU;AACjF,gBAAM,IAAI,MAAM,2BAA2B;QAC7C;AAEA,aAAK,IAAI,iCAAiCP,SAAQM,UAAS;AAE3D,eAAO;UACL,MAAM,QAAQ,YAAY;UAC1B,cAAc;YACZ,QAAQ,QAAQ,eAAe;YAC/B,MAAMC,YAAW,WAAW,gBAAgB,UAAU,KAAK,EAAE,IAAI,EAAE;;;MAGzE,SAAS,KAAU;AACjB,aAAK,IAAI,MAAM,0BAA0BP,SAAQ,GAAG;AACpD,uBAAe,IAAI;MACrB;AACE,YAAIO,eAAc,MAAM;AACtB,gBAAMA,YAAW,MAAK;QACxB;MACF;IACF;AAEA,WAAO;MACL,MAAM,QAAQ,YAAY;MAC1B,cAAc;QACZ,QAAQ,QAAQ,eAAe;QAC/B,YAAY;QACZ,MAAM,cAAc;;;EAG1B;;;;;;;;;;;;;EAcQ,4BAA6B,SAAiB,cAAqB;AACzE,UAAM,QAAQ,KAAK,WAAW,eAAe,yBAAwB,EAClE,KAAK,CAAC,GAAG,MAAK;AAEb,UAAI,EAAE,SAAS,cAAc,EAAE,SAAS,YAAY;AAClD,eAAO;MACT;AAEA,UAAI,EAAE,SAAS,cAAc,EAAE,SAAS,YAAY;AAClD,eAAO;MACT;AAEA,aAAO;IACT,CAAC,EACA,OAAO,UAAO;AACb,YAAM,UAAU,KAAK,UAAU,KAAK,IAAG;AAEvC,UAAI,CAAC,SAAS;AAEZ,eAAO;MACT;AAEA,YAAMN,WAAU,KAAK,UAAU,UAAS;AAExC,UAAIA,SAAQ,WAAW,GAAG;AAExB,YAAI,CAAC,cAAc;AACjB,iBAAO;QACT;AAEA,YAAI,CAAC,gBAAgB,KAAK,SAAS,GAAG;AAEpC,iBAAO;QACT;MACF;AAEA,UAAI,UAAU,KAAK,SAAS,GAAG;AAE7B,eAAO;MACT;AAEA,aAAO;IACT,CAAC;AAEH,eAAW,QAAQ,OAAO;AACxB,YAAM,aAAa,KAAK,UAAU,SAAQ;AAC1C,UAAI,UAAU,KAAK,YAAY,IAAI,UAAU;AAE7C,UAAI,WAAW,MAAM;AACnB,YAAI,QAAQ,gBAAgB,SAAS,OAAO,GAAG;AAC7C,eAAK,IAAI,MAAM,mDAAmD,QAAQ,WAAW,OAAO;AAG5F;QACF;AAEA,YAAI,QAAQ,MAAM,OAAO,IAAI;AAC3B,eAAK,IAAI,MAAM,sCAAsC,QAAQ,SAAS;AAGtE;QACF;MACF;AAGA,UAAI,WAAW,MAAM;AACnB,cAAM,oBAAoB,KAAK,UAAU,KAAK,IAAG;AAGjD,YAAI,mBAAmB;AACrB,eAAK,cAAc,SAAS,UAAU;QACxC;AAEA,YAAI,KAAK,cAAc,IAAI,UAAU,GAAG;AACtC;QACF;AAGA,aAAK,cAAc,IAAI,UAAU;AAEjC,aAAK,IAAI,MAAM,8BAA8B,oBAAoB,kBAAkB,OAAO,UAAU;AACpG,kBAAU;UACR,WAAW,KAAK;UAChB,SAAS;UACT,SAAS;UACT,iBAAiB,CAAA;UACjB,gBAAgB,QAAO;UACvB,OAAO,IAAI,UAAU;YACnB,aAAa;YACb,SAAS;WACV;UACD,MAAM,KAAK;UACX,cAAc,KAAK;;AAGrB,aAAK,YAAY,IAAI,YAAY,OAAO;MAC1C;AAEA,aAAO;IACT;EACF;;;;;EAMQ,iCAA8B;AACpC,UAAM,uBAAuB,IAAI,IAAI,KAAK,WAAW,eAAe,yBAAwB,EACzF,OAAO,CAAC,EAAE,QAAO,MAAM;AACtB,UAAI,UAAU,KAAK,IAAG,GAAI;AACxB,eAAO;MACT;AAEA,aAAO;IACT,CAAC,EACA,IAAI,CAAC,EAAE,WAAAK,WAAS,MAAOA,WAAU,SAAQ,CAAE,CAAC;AAG/C,eAAWA,cAAa,KAAK,YAAY,KAAI,GAAI;AAC/C,UAAI,CAAC,qBAAqB,IAAIA,UAAS,GAAG;AACxC,aAAK,IAAI,MAAM,yBAAyBA,UAAS;AACjD,aAAK,YAAY,OAAOA,UAAS;MACnC;IACF;EACF;;;;EAKA,MAAM,wBAAyB,YAAsB;AAEnD,QAAI,CAAC,KAAK,UAAS,GAAI;AACrB;IACF;AAGA,SAAK,+BAA8B;AAEnC,UAAM,OAAO,MAAM,KAAK,WAAW,UAAU,IAAI,WAAW,UAAU;AAItE,UAAM,eAAe,KAAK,UAAU,KAAK,CAAC,EAAE,WAAAA,WAAS,MAAM;AACzD,aAAOA,WAAU,UAAS,EAAG,WAAW;IAC1C,CAAC;AAGD,UAAM,UAAU,KAAK,kBAAkB,WAAW,UAAU;AAC5D,UAAM,UAAU,KAAK,4BAA4B,SAAS,YAAY;AAEtE,QAAI,WAAW,MAAM;AACnB,WAAK,IAAI,MAAM,2FAA2F,WAAW,UAAU;AAC/H;IACF;AAEA,QAAI,CAAC,KAAK,sBAAqB,GAAI;AAKjC,UAAI,QAAQ,gBAAgB,MAAM;AAChC,aAAK,IAAI,kFAAkF,QAAQ,SAAS;AAC5G,aAAK,eAAe,OAAO;MAC7B,OAAO;AACL,aAAK,IAAI,0EAA0E,QAAQ,SAAS;MACtG;AAEA;IACF;AAEA,YAAQ,MAAM,IAAI,OAAOL,aAA+B;AACtD,YAAM,KAAK,gBAAgB,YAAY,SAASA,QAAO;IACzD,GAAG;MACD,QAAQ,WAAW;MACnB,WAAW,QAAQ;KACpB,EACE,MAAM,SAAM;AACX,UAAI,SAAS,UAAU,MAAM;AAC3B,aAAK,IAAI,MAAM,2CAA2C,WAAW,YAAY,SAAS,WAAW,GAAG;MAC1G;IACF,CAAC;EACL;EAEQ,MAAM,gBAAiB,YAAwB,SAAiBA,UAA2B;AACjG,QAAI,UAAU,KAAK,YAAY,IAAIA,SAAQ,UAAU,SAAQ,CAAE;AAE/D,QAAI,WAAW,MAAM;AACnB,WAAK,IAAI,uCAAuCA,SAAQ,WAAW,WAAW,UAAU;AACxF;IACF;AAEA,UAAM,SAAS,YAAY,QAAQ,KAAK,OAAO;AAC/C,oBAAgB,UAAU,MAAM;AAEhC,SAAK,IAAI,MAAM,oCAAoC,WAAW,YAAYA,SAAQ,SAAS;AAE3F,UAAM,SAAS,MAAM,WAAW,UAAU,KAAK,UAAU;MACvD;KACD;AAED,QAAI;AACF,YAAMC,YAAW,SAAS,MAAM,EAAE,GAAG,OAAO;AAC5C,YAAM,CAAC,EAAE,QAAQ,IAAI,MAAM,QAAQ,IAAI;QACrCA,UAAS,MAAM;UACb,MAAM,QAAQ,YAAY;UAC1B,MAAM;YACJ,MAAM;cACJ,IAAI,KAAK,WAAW,OAAO,YAAW,EAAG;cACzC,OAAO,CAACD,SAAQ,UAAU,KAAK;;;WAGlC,EAAE,OAAM,CAAE;QACbC,UAAS,KAAK,EAAE,OAAM,CAAE;OACzB;AAED,UAAI,SAAS,SAAS,QAAQ,YAAY,iBAAiB,SAAS,gBAAgB,MAAM;AACxF,aAAK,IAAI,yCAAyC,WAAW,YAAY,QAAQ;AACjF;MACF;AAEA,YAAM,SAAS,SAAS,aAAa;AAErC,WAAK,IAAI,MAAM,yCAAyC,WAAW,YAAYD,SAAQ,WAAW,MAAM;AAExG,UAAI,WAAW,QAAQ,eAAe,MAAM,WAAW,QAAQ,eAAe,cAAc;AAC1F;MACF;AAEA,gBAAU,KAAK,YAAY,IAAIA,SAAQ,UAAU,SAAQ,CAAE;AAE3D,UAAI,WAAW,MAAM;AACnB,aAAK,IAAI,MAAM,wDAAwDA,SAAQ,WAAW,SAAS,aAAa,MAAM;AACtH;MACF;AAEA,UAAI,QAAQ,gBAAgB,SAAS,OAAO,GAAG;AAC7C,aAAK,IAAI,MAAM,0CAA0CA,SAAQ,WAAW,OAAO;AACnF;MACF;AAEA,UAAI,QAAQ,UAAU,MAAM;AAC1B,aAAK,IAAI,MAAM,0DAA0DA,SAAQ,WAAW,WAAW,UAAU;AACjH;MACF;AAEA,UAAI,QAAQ,eAAe,IAAI,WAAW,UAAU,GAAG;AACrD,aAAK,IAAI,MAAM,sDAAsD,WAAW,YAAYA,SAAQ,SAAS;AAC7G;MACF;AAEA,cAAQ,eAAe,IAAI,WAAW,UAAU;AAChD,cAAQ,gBAAgB,KAAK,OAAO;AAEpC,UAAI,WAAW,QAAQ,eAAe,IAAI;AACxC,gBAAQ;AAGR,YAAI,QAAQ,SAAS,YAAY;AAC/B,eAAK,eAAe,OAAO;AAC3B;QACF;MACF,WAAW,WAAW,QAAQ,eAAe,cAAc;AACzD,gBAAQ;MACV;AAEA,WAAK,IAAI,4BAA4B,QAAQ,WAAW,QAAQ,SAAS,QAAQ,OAAO;AAExF,UAAI,QAAQ,YAAY,2BAA2B;AACjD,aAAK,eAAe,OAAO;MAC7B;AAEA,UAAI,QAAQ,YAAY,uBAAuB;AAC7C,aAAK,iBAAiB,OAAO;MAC/B;IACF;AACE,UAAI;AACF,cAAM,OAAO,MAAM;UACjB;SACD;MACH,SAAS,KAAU;AACjB,eAAO,MAAM,GAAG;MAClB;IACF;EACF;EAEQ,wBAAqB;AAC3B,UAAM,cAAc,KAAK,WAAW,kBAAkB,eAAc;AACpE,UAAM,yBAAyB,YAAY;AAC3C,UAAM,iBAAiB,KAAK,WAAW,kBAAkB,kBAAiB;AAE1E,WAAS,yBAAyB,iBAAkB,MAAO,KAAK;EAClE;EAEQ,eAAgB,SAAoB;AAE1C,SAAK,IAAI,wCAAwC,QAAQ,MAAM,QAAQ,SAAS;AAChF,SAAK,WAAW,eAAe,oBAAoB,QAAQ,SAAS;AACpE,SAAK,YAAY,OAAO,QAAQ,UAAU,SAAQ,CAAE;AAGpD,YAAQ,SAAS;AACjB,YAAQ,MAAM,MAAK;EACrB;EAEQ,iBAAkB,SAAoB;AAE5C,SAAK,IAAI,4CAA4C,QAAQ,MAAM,QAAQ,SAAS;AACpF,SAAK,WAAW,eAAe,mBAAmB,QAAQ,SAAS;AACnE,SAAK,YAAY,OAAO,QAAQ,UAAU,SAAQ,CAAE;AAGpD,YAAQ,SAAS;AACjB,YAAQ,MAAM,MAAK;EACrB;EAEQ,kBAAmB,IAAa;AAEtC,UAAMA,WAAU,GAAG,UAAS;AAE5B,QAAIA,SAAQ,WAAW,GAAG;AACxB,YAAMO,UAASP,SAAQ,KAAK,MAAM,GAAG;AACrC,aAAOO,QAAO,CAAC,EAAE,SAAS,GAAG,GAAG;IAClC;AAEA,UAAM,SAASP,SAAQ,KAAK,MAAM,GAAG;AACrC,WAAO,OAAO,CAAC,EAAE,SAAS,GAAG,GAAG;EAClC;;;;ACppBI,SAAU,QAAS,OAA2B,CAAA,GAAE;AACpD,SAAO,CAAC,eAAc;AACpB,WAAO,IAAI,eAAe,YAAY,IAAI;EAC5C;AACF;;;AC3DA,IAAM,6BAA6B;AACnC,IAAM,8BAA8B;AACpC,IAAM,sCAAsC;AA0C5C,IAAM,YAAN,cAAwB,kBAAsC;EAC5D,OAAO,MAAM;EAEI;EACT;EACS;EACA;EACA;EACA;EAEjB,YAAa,YAAiCQ,WAAyB,EAAE,MAAM,CAAA,EAAE,GAAE;AACjF,QAAIA,SAAQ,QAAQ,QAAQA,SAAQ,KAAK,WAAW,GAAG;AACrD,YAAM,IAAI,MAAM,6CAA6C;IAC/D;AACA,UAAK;AAEL,SAAK,aAAa;AAClB,SAAK,MAAM,WAAW,OAAO,aAAa,kBAAkB;AAC5D,SAAK,UAAUA,SAAQ,WAAW;AAClC,SAAK,OAAO,CAAA;AAEZ,eAAW,aAAaA,SAAQ,MAAM;AACpC,UAAI,CAAC,IAAI,QAAQ,SAAS,GAAG;AAC3B,aAAK,IAAI,MAAM,mBAAmB;AAClC;MACF;AAEA,YAAM,KAAK,UAAU,SAAS;AAC9B,YAAM,YAAY,GAAG,UAAS;AAE9B,UAAI,aAAa,MAAM;AACrB,aAAK,IAAI,MAAM,6CAA6C;AAC5D;MACF;AAEA,YAAM,WAAqB;QACzB,IAAI,iBAAiB,SAAS;QAC9B,YAAY,CAAC,EAAE;;AAGjB,WAAK,KAAK,KAAK,QAAQ;IACzB;AAEA,SAAK,QAAQA;EACf;EAES,CAAC,mBAAmB,IAAI;EAExB,CAAC,OAAO,WAAW,IAAI;EAEvB,CAAC,mBAAmB,IAAc;IACzC;;EAGF,YAAS;AACP,WAAO,QAAQ,KAAK,KAAK;EAC3B;;;;EAKA,QAAK;AACH,QAAI,KAAK,UAAS,GAAI;AACpB;IACF;AAEA,SAAK,IAAI,oEAAoE,KAAK,OAAO;AACzF,SAAK,QAAQ,WAAW,MAAK;AAC3B,WAAK,KAAK,wBAAuB,EAC9B,MAAM,SAAM;AACX,aAAK,IAAI,MAAM,GAAG;MACpB,CAAC;IACL,GAAG,KAAK,OAAO;EACjB;;;;EAKA,MAAM,0BAAuB;AAC3B,QAAI,KAAK,SAAS,MAAM;AACtB;IACF;AAEA,eAAW,YAAY,KAAK,MAAM;AAChC,YAAM,KAAK,WAAW,UAAU,MAAM,SAAS,IAAI;QACjD,MAAM;UACJ,CAAC,KAAK,MAAM,WAAW,0BAA0B,GAAG;YAClD,OAAO,KAAK,MAAM,YAAY;YAC9B,KAAK,KAAK,MAAM;;;QAGpB,YAAY,SAAS;OACtB;AAGD,UAAI,KAAK,SAAS,MAAM;AACtB;MACF;AAEA,WAAK,kBAAkB,QAAQ,EAAE,QAAQ,SAAQ,CAAE;AACnD,WAAK,WAAW,kBAAkB,eAAe,SAAS,EAAE,EACzD,MAAM,SAAM;AACX,aAAK,IAAI,MAAM,oCAAoC,SAAS,IAAI,GAAG;MACrE,CAAC;IACL;EACF;;;;EAKA,OAAI;AACF,QAAI,KAAK,SAAS,MAAM;AACtB,mBAAa,KAAK,KAAK;IACzB;AAEA,SAAK,QAAQ;EACf;;AAGI,SAAU,UAAW,MAAmB;AAC5C,SAAO,CAAC,eAAoC,IAAI,UAAU,YAAY,IAAI;AAC5E;;;AC/MO,IAAMC,UAAQ,IAAI,WAAW,CAAC;AAW/B,SAAUC,SAAQ,IAAgB,IAAc;AACpD,MAAI,OAAO,IAAI;AAAE,WAAO;EAAK;AAC7B,MAAI,GAAG,eAAe,GAAG,YAAY;AACnC,WAAO;EACT;AAEA,WAAS,KAAK,GAAG,KAAK,GAAG,YAAY,MAAM;AACzC,QAAI,GAAG,EAAE,MAAM,GAAG,EAAE,GAAG;AACrB,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEM,SAAUC,SAAQ,GAA6C;AACnE,MAAI,aAAa,cAAc,EAAE,YAAY,SAAS,cAAc;AAAE,WAAO;EAAE;AAC/E,MAAI,aAAa,aAAa;AAAE,WAAO,IAAI,WAAW,CAAC;EAAE;AACzD,MAAI,YAAY,OAAO,CAAC,GAAG;AACzB,WAAO,IAAI,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU;EAC5D;AACA,QAAM,IAAI,MAAM,mCAAmC;AACrD;;;AChCA,IAAIC,aAAWC;AAEf,IAAIC,QAAM;AAAV,IACIC,SAAO;AADX,IAEIC,WAAS,CAACD;AAFd,IAGIE,QAAM,KAAK,IAAI,GAAG,EAAE;AAOxB,SAASJ,SAAO,KAAK,KAAK,QAAM;AAC9B,QAAM,OAAO,CAAA;AACb,WAAS,UAAU;AACnB,MAAI,YAAY;AAEhB,SAAM,OAAOI,OAAK;AAChB,QAAI,QAAQ,IAAK,MAAM,MAAQH;AAC/B,WAAO;EACT;AACA,SAAM,MAAME,UAAQ;AAClB,QAAI,QAAQ,IAAK,MAAM,MAAQF;AAC/B,aAAS;EACX;AACA,MAAI,MAAM,IAAI,MAAM;AAGpB,EAAAD,SAAO,QAAQ,SAAS,YAAY;AAEpC,SAAO;AACT;AAEA,IAAIK,WAASC;AAEb,IAAIC,UAAQ;AAAZ,IACIC,WAAS;AAMb,SAASF,OAAK,KAAK,QAAM;AACvB,MAAI,MAAS,GACT,SAAS,UAAU,GACnB,QAAS,GACT,UAAU,QACV,GACA,IAAI,IAAI;AAEZ,KAAG;AACD,QAAI,WAAW,GAAG;AAEhB,MAAAA,OAAK,QAAQ;AACb,YAAM,IAAI,WAAW,yBAAyB;IAChD;AACA,QAAI,IAAI,SAAS;AACjB,WAAO,QAAQ,MACV,IAAIE,aAAW,SACf,IAAIA,YAAU,KAAK,IAAI,GAAG,KAAK;AACpC,aAAS;EACX,SAAS,KAAKD;AAGd,EAAAD,OAAK,QAAQ,UAAU;AAEvB,SAAO;AACT;AAEA,IAAIG,OAAK,KAAK,IAAI,GAAI,CAAC;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AAEvB,IAAIC,WAAS,SAAgCC,QAAK;AAChD,SACEA,SAAQV,OAAK,IACbU,SAAQT,OAAK,IACbS,SAAQR,OAAK,IACbQ,SAAQP,OAAK,IACbO,SAAQN,OAAK,IACbM,SAAQL,OAAK,IACbK,SAAQJ,OAAK,IACbI,SAAQH,OAAK,IACbG,SAAQF,OAAK,IACA;AAEjB;AAEA,IAAIG,WAAS;EACT,QAAQrB;EACR,QAAQM;EACR,gBAAgBa;;AAGpB,IAAIG,iBAAeD;AAEnB,IAAAE,mBAAeD;;;ACrGT,SAAUE,SAAQ,MAAkB,SAAS,GAAC;AAClD,QAAMC,SAAOC,iBAAO,OAAO,MAAM,MAAM;AACvC,SAAO,CAACD,QAAMC,iBAAO,OAAO,KAAK;AACnC;AAEM,SAAUC,WAAU,KAAa,QAAoB,SAAS,GAAC;AACnE,EAAAD,iBAAO,OAAO,KAAK,QAAQ,MAAM;AACjC,SAAO;AACT;AAEM,SAAUE,iBAAgB,KAAW;AACzC,SAAOF,iBAAO,eAAe,GAAG;AAClC;;;ACPM,SAAUG,SAA8BC,QAAYC,SAAkB;AAC1E,QAAM,OAAOA,QAAO;AACpB,QAAM,aAAoBC,iBAAeF,MAAI;AAC7C,QAAM,eAAe,aAAoBE,iBAAe,IAAI;AAE5D,QAAM,QAAQ,IAAI,WAAW,eAAe,IAAI;AAChD,EAAOC,WAASH,QAAM,OAAO,CAAC;AAC9B,EAAOG,WAAS,MAAM,OAAO,UAAU;AACvC,QAAM,IAAIF,SAAQ,YAAY;AAE9B,SAAO,IAAIG,SAAOJ,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAKM,SAAUI,SAAQ,WAAqB;AAC3C,QAAM,QAAQC,SAAO,SAAS;AAC9B,QAAM,CAACN,QAAM,UAAU,IAAWK,SAAO,KAAK;AAC9C,QAAM,CAAC,MAAM,YAAY,IAAWA,SAAO,MAAM,SAAS,UAAU,CAAC;AACrE,QAAMJ,UAAS,MAAM,SAAS,aAAa,YAAY;AAEvD,MAAIA,QAAO,eAAe,MAAM;AAC9B,UAAM,IAAI,MAAM,kBAAkB;EACpC;AAEA,SAAO,IAAIG,SAAOJ,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAEM,SAAUM,SAAQ,GAAoB,GAAU;AACpD,MAAI,MAAM,GAAG;AACX,WAAO;EACT,OAAO;AACL,UAAM,OAAO;AAEb,WACE,EAAE,SAAS,KAAK,QAChB,EAAE,SAAS,KAAK,QAChB,KAAK,iBAAiB,cACtBA,SAAW,EAAE,OAAO,KAAK,KAAK;EAElC;AACF;AAMM,IAAOH,WAAP,MAAa;EACR;EACA;EACA;EACA;;;;EAKT,YAAaJ,QAAY,MAAYC,SAAoB,OAAiB;AACxE,SAAK,OAAOD;AACZ,SAAK,OAAO;AACZ,SAAK,SAASC;AACd,SAAK,QAAQ;EACf;;;;ACnEF,IAAM,SAAS;AACf,IAAM,SAAS,KAAK;AAKb,IAAM,qBAAqB;AAU3B,IAAM,8BAA8B,IAAI,KAAK;AAK7C,IAAM,kCAAkC;AAKxC,IAAM,yCAAyC;AAK/C,IAAM,uCAAuC;AAI7C,IAAM,iBAAiB,GAAG,UAAU;AACpC,IAAM,wBAAwB,GAAG,UAAU;AAM3C,IAAM,yBAAyB,IAAI;AAGnC,IAAM,qBAAqB,OAAO,KAAK,EAAE;AAKzC,IAAM,qBAAqB;AAK3B,IAAM,sBAAsB;AAK5B,IAAM,sBAAsB,KAAK;AAKjC,IAAM,4BAA4B,KAAK;AAEvC,IAAMO,mBAAkB;AAExB,IAAM,gCAAgC;AACtC,IAAM,sCAAsC;;;AC3D7C,IAAW;CAAjB,SAAiBC,aAAU;AACzB,MAAY;AAAZ,GAAA,SAAYC,OAAI;AACd,IAAAA,MAAA,SAAA,IAAA;AACA,IAAAA,MAAA,SAAA,IAAA;AACA,IAAAA,MAAA,QAAA,IAAA;EACF,GAJY,OAAAD,YAAA,SAAAA,YAAA,OAAI,CAAA,EAAA;AAMhB,MAAK;AAAL,GAAA,SAAKE,eAAY;AACf,IAAAA,cAAAA,cAAA,SAAA,IAAA,CAAA,IAAA;AACA,IAAAA,cAAAA,cAAA,SAAA,IAAA,CAAA,IAAA;AACA,IAAAA,cAAAA,cAAA,QAAA,IAAA,CAAA,IAAA;EACF,GAJK,iBAAA,eAAY,CAAA,EAAA;AAMjB,GAAA,SAAiBD,OAAI;AACN,IAAAA,MAAA,QAAQ,MAAkB;AACrC,aAAO,YAAkB,YAAY;IACvC;EACF,GAJiB,OAAAD,YAAA,SAAAA,YAAA,OAAI,CAAA,EAAA;AAMrB,MAAI;AAES,EAAAA,YAAA,QAAQ,MAAwB;AAC3C,QAAI,UAAU,MAAM;AAClB,eAAS,QAAoB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AACjD,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAI,IAAI,QAAQ,MAAM;AACpB,YAAE,OAAO,CAAC;AACV,UAAAA,YAAW,KAAK,MAAK,EAAG,OAAO,IAAI,MAAM,CAAC;QAC5C;AAEA,YAAI,IAAI,QAAQ,MAAM;AACpB,YAAE,OAAO,EAAE;AACX,UAAAG,MAAK,MAAK,EAAG,OAAO,IAAI,MAAM,CAAC;QACjC;AAEA,YAAI,IAAI,eAAe,MAAM;AAC3B,YAAE,OAAO,EAAE;AACX,sBAAY,MAAK,EAAG,OAAO,IAAI,aAAa,CAAC;QAC/C;AAEA,YAAI,IAAI,SAAS,MAAM;AACrB,YAAE,OAAO,EAAE;AACX,gBAAM,MAAK,EAAG,OAAO,IAAI,OAAO,CAAC;QACnC;AAEA,YAAI,IAAI,UAAU,MAAM;AACtB,YAAE,OAAO,EAAE;AACX,iBAAO,MAAK,EAAG,OAAO,IAAI,QAAQ,CAAC;QACrC;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQC,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW,CAAA;AAEjB,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,OAAOJ,YAAW,KAAK,MAAK,EAAG,OAAO,MAAM;AAChD;YACF;YACA,KAAK,GAAG;AACN,kBAAI,OAAOG,MAAK,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;gBACtD,QAAQ,KAAK,QAAQ;eACtB;AACD;YACF;YACA,KAAK,GAAG;AACN,kBAAI,cAAc,YAAY,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;gBACpE,QAAQ,KAAK,QAAQ;eACtB;AACD;YACF;YACA,KAAK,GAAG;AACN,kBAAI,QAAQ,MAAM,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;gBACxD,QAAQ,KAAK,QAAQ;eACtB;AACD;YACF;YACA,KAAK,GAAG;AACN,kBAAI,SAAS,OAAO,MAAK,EAAG,OAAO,MAAM;AACzC;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAH,YAAA,SAAS,CAAC,QAAwC;AAC7D,WAAO,cAAc,KAAKA,YAAW,MAAK,CAAE;EAC9C;AAEa,EAAAA,YAAA,SAAS,CAAC,KAAkC,SAAgD;AACvG,WAAO,cAAc,KAAKA,YAAW,MAAK,GAAI,IAAI;EACpD;AACF,GAhHiB,eAAA,aAAU,CAAA,EAAA;AAyHrB,IAAW;CAAjB,SAAiBK,cAAW;AAC1B,MAAY;AAAZ,GAAA,SAAYJ,OAAI;AACd,IAAAA,MAAA,SAAA,IAAA;AACA,IAAAA,MAAA,QAAA,IAAA;EACF,GAHY,OAAAI,aAAA,SAAAA,aAAA,OAAI,CAAA,EAAA;AAKhB,MAAK;AAAL,GAAA,SAAKH,eAAY;AACf,IAAAA,cAAAA,cAAA,SAAA,IAAA,CAAA,IAAA;AACA,IAAAA,cAAAA,cAAA,QAAA,IAAA,CAAA,IAAA;EACF,GAHK,iBAAA,eAAY,CAAA,EAAA;AAKjB,GAAA,SAAiBD,OAAI;AACN,IAAAA,MAAA,QAAQ,MAAkB;AACrC,aAAO,YAAkB,YAAY;IACvC;EACF,GAJiB,OAAAI,aAAA,SAAAA,aAAA,OAAI,CAAA,EAAA;AAMrB,MAAI;AAES,EAAAA,aAAA,QAAQ,MAAyB;AAC5C,QAAI,UAAU,MAAM;AAClB,eAAS,QAAqB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAClD,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAI,IAAI,QAAQ,MAAM;AACpB,YAAE,OAAO,CAAC;AACV,UAAAA,aAAY,KAAK,MAAK,EAAG,OAAO,IAAI,MAAM,CAAC;QAC7C;AAEA,YAAI,IAAI,QAAQ,MAAM;AACpB,YAAE,OAAO,EAAE;AACX,UAAAF,MAAK,MAAK,EAAG,OAAO,IAAI,MAAM,CAAC;QACjC;AAEA,YAAI,IAAI,SAAS,MAAM;AACrB,YAAE,OAAO,EAAE;AACX,gBAAM,MAAK,EAAG,OAAO,IAAI,OAAO,CAAC;QACnC;AAEA,YAAI,IAAI,UAAU,MAAM;AACtB,YAAE,OAAO,EAAE;AACX,iBAAO,MAAK,EAAG,OAAO,IAAI,QAAQ,CAAC;QACrC;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQC,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW,CAAA;AAEjB,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,OAAOC,aAAY,KAAK,MAAK,EAAG,OAAO,MAAM;AACjD;YACF;YACA,KAAK,GAAG;AACN,kBAAI,OAAOF,MAAK,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;gBACtD,QAAQ,KAAK,QAAQ;eACtB;AACD;YACF;YACA,KAAK,GAAG;AACN,kBAAI,QAAQ,MAAM,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;gBACxD,QAAQ,KAAK,QAAQ;eACtB;AACD;YACF;YACA,KAAK,GAAG;AACN,kBAAI,SAAS,OAAO,MAAK,EAAG,OAAO,MAAM;AACzC;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAE,aAAA,SAAS,CAAC,QAAyC;AAC9D,WAAO,cAAc,KAAKA,aAAY,MAAK,CAAE;EAC/C;AAEa,EAAAA,aAAA,SAAS,CAAC,KAAkC,SAAkD;AACzG,WAAO,cAAc,KAAKA,aAAY,MAAK,GAAI,IAAI;EACrD;AACF,GAnGiB,gBAAA,cAAW,CAAA,EAAA;AA0GtB,IAAWF;CAAjB,SAAiBA,OAAI;AACnB,MAAI;AAES,EAAAA,MAAA,QAAQ,MAAkB;AACrC,QAAI,UAAU,MAAM;AAClB,eAAS,QAAc,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAC3C,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAK,IAAI,MAAM,QAAQ,IAAI,GAAG,aAAa,GAAI;AAC7C,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,EAAE;QAChB;AAEA,YAAI,IAAI,SAAS,MAAM;AACrB,qBAAWG,UAAS,IAAI,OAAO;AAC7B,cAAE,OAAO,EAAE;AACX,cAAE,MAAMA,MAAK;UACf;QACF;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQF,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,IAAI,MAAgB,CAAC;UACrB,OAAO,CAAA;;AAGT,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,KAAK,OAAO,MAAK;AACrB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,KAAK,QAAQ,SAAS,QAAQ,IAAI,MAAM,WAAW,KAAK,OAAO,OAAO;AACxE,sBAAM,IAAI,eAAe,wDAAwD;cACnF;AAEA,kBAAI,MAAM,KAAK,OAAO,MAAK,CAAE;AAC7B;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAD,MAAA,SAAS,CAAC,QAAkC;AACvD,WAAO,cAAc,KAAKA,MAAK,MAAK,CAAE;EACxC;AAEa,EAAAA,MAAA,SAAS,CAAC,KAAkC,SAAoC;AAC3F,WAAO,cAAc,KAAKA,MAAK,MAAK,GAAI,IAAI;EAC9C;AACF,GAtEiBA,UAAAA,QAAI,CAAA,EAAA;AA8Ef,IAAW;CAAjB,SAAiBI,cAAW;AAC1B,MAAI;AAES,EAAAA,aAAA,QAAQ,MAAyB;AAC5C,QAAI,UAAU,MAAM;AAClB,eAAS,QAAqB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAClD,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAK,IAAI,UAAU,QAAQ,IAAI,WAAW,IAAK;AAC7C,YAAE,OAAO,CAAC;AACV,YAAE,OAAO,IAAI,MAAM;QACrB;AAEA,YAAI,IAAI,SAAS,MAAM;AACrB,qBAAWD,UAAS,IAAI,OAAO;AAC7B,cAAE,OAAO,EAAE;AACX,cAAE,MAAMA,MAAK;UACf;QACF;AAEA,YAAI,IAAI,WAAW,MAAM;AACvB,YAAE,OAAO,EAAE;AACX,UAAAE,UAAS,MAAK,EAAG,OAAO,IAAI,SAAS,CAAC;QACxC;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQJ,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,QAAQ;UACR,OAAO,CAAA;;AAGT,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,SAAS,OAAO,OAAM;AAC1B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,KAAK,QAAQ,SAAS,QAAQ,IAAI,MAAM,WAAW,KAAK,OAAO,OAAO;AACxE,sBAAM,IAAI,eAAe,wDAAwD;cACnF;AAEA,kBAAI,MAAM,KAAK,OAAO,MAAK,CAAE;AAC7B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,UAAUI,UAAS,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;gBAC7D,QAAQ,KAAK,QAAQ;eACtB;AACD;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAD,aAAA,SAAS,CAAC,QAAyC;AAC9D,WAAO,cAAc,KAAKA,aAAY,MAAK,CAAE;EAC/C;AAEa,EAAAA,aAAA,SAAS,CAAC,KAAkC,SAAkD;AACzG,WAAO,cAAc,KAAKA,aAAY,MAAK,GAAI,IAAI;EACrD;AACF,GAjFiB,gBAAA,cAAW,CAAA,EAAA;AAwFtB,IAAW;CAAjB,SAAiBE,QAAK;AACpB,MAAI;AAES,EAAAA,OAAA,QAAQ,MAAmB;AACtC,QAAI,UAAU,MAAM;AAClB,eAAS,QAAe,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAC5C,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAI,IAAI,YAAY,MAAM;AACxB,YAAE,OAAO,CAAC;AACV,YAAE,OAAO,IAAI,QAAQ;QACvB;AAEA,YAAI,IAAI,QAAQ,MAAM;AACpB,YAAE,OAAO,EAAE;AACX,YAAE,OAAO,IAAI,IAAI;QACnB;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQL,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW,CAAA;AAEjB,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,WAAW,OAAO,OAAM;AAC5B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,OAAO,OAAO,OAAM;AACxB;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAK,OAAA,SAAS,CAAC,QAAmC;AACxD,WAAO,cAAc,KAAKA,OAAM,MAAK,CAAE;EACzC;AAEa,EAAAA,OAAA,SAAS,CAAC,KAAkC,SAAsC;AAC7F,WAAO,cAAc,KAAKA,OAAM,MAAK,GAAI,IAAI;EAC/C;AACF,GA7DiB,UAAA,QAAK,CAAA,EAAA;AA+DtB,IAAY;CAAZ,SAAYC,SAAM;AAChB,EAAAA,QAAA,QAAA,IAAA;AACA,EAAAA,QAAA,IAAA,IAAA;AACA,EAAAA,QAAA,qBAAA,IAAA;AACA,EAAAA,QAAA,yBAAA,IAAA;AACA,EAAAA,QAAA,mBAAA,IAAA;AACA,EAAAA,QAAA,mBAAA,IAAA;AACA,EAAAA,QAAA,gBAAA,IAAA;AACA,EAAAA,QAAA,mBAAA,IAAA;AACA,EAAAA,QAAA,oBAAA,IAAA;AACF,GAVY,WAAA,SAAM,CAAA,EAAA;AAYlB,IAAK;CAAL,SAAKC,iBAAc;AACjB,EAAAA,gBAAAA,gBAAA,QAAA,IAAA,CAAA,IAAA;AACA,EAAAA,gBAAAA,gBAAA,IAAA,IAAA,GAAA,IAAA;AACA,EAAAA,gBAAAA,gBAAA,qBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,gBAAAA,gBAAA,yBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,gBAAAA,gBAAA,mBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,gBAAAA,gBAAA,mBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,gBAAAA,gBAAA,gBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,gBAAAA,gBAAA,mBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,gBAAAA,gBAAA,oBAAA,IAAA,GAAA,IAAA;AACF,GAVK,mBAAA,iBAAc,CAAA,EAAA;CAYnB,SAAiBD,SAAM;AACR,EAAAA,QAAA,QAAQ,MAAoB;AACvC,WAAO,YAAoB,cAAc;EAC3C;AACF,GAJiB,WAAA,SAAM,CAAA,EAAA;AAWjB,IAAW;CAAjB,SAAiBE,qBAAkB;AACjC,MAAI;AAES,EAAAA,oBAAA,QAAQ,MAAgC;AACnD,QAAI,UAAU,MAAM;AAClB,eAAS,QAA4B,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AACzD,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAK,IAAI,SAAS,QAAQ,IAAI,MAAM,aAAa,GAAI;AACnD,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,KAAK;QACnB;AAEA,YAAK,IAAI,QAAQ,QAAQ,IAAI,KAAK,aAAa,GAAI;AACjD,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,IAAI;QAClB;AAEA,YAAK,IAAI,cAAc,QAAQ,IAAI,eAAe,IAAK;AACrD,YAAE,OAAO,EAAE;AACX,YAAE,OAAO,IAAI,UAAU;QACzB;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQR,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,OAAO,MAAgB,CAAC;UACxB,MAAM,MAAgB,CAAC;UACvB,YAAY;;AAGd,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,QAAQ,OAAO,MAAK;AACxB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,OAAO,OAAO,MAAK;AACvB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,aAAa,OAAO,OAAM;AAC9B;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAQ,oBAAA,SAAS,CAAC,QAAgD;AACrE,WAAO,cAAc,KAAKA,oBAAmB,MAAK,CAAE;EACtD;AAEa,EAAAA,oBAAA,SAAS,CAAC,KAAkC,SAAgE;AACvH,WAAO,cAAc,KAAKA,oBAAmB,MAAK,GAAI,IAAI;EAC5D;AACF,GA1EiB,uBAAA,qBAAkB,CAAA,EAAA;AAmF7B,IAAWJ;CAAjB,SAAiBA,WAAQ;AACvB,MAAI;AAES,EAAAA,UAAA,QAAQ,MAAsB;AACzC,QAAI,UAAU,MAAM;AAClB,eAAS,QAAkB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAC/C,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAK,IAAI,aAAa,QAAQ,IAAI,UAAU,aAAa,GAAI;AAC3D,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,SAAS;QACvB;AAEA,YAAK,IAAI,eAAe,QAAQ,IAAI,YAAY,aAAa,GAAI;AAC/D,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,WAAW;QACzB;AAEA,YAAI,IAAI,WAAW,MAAM;AACvB,YAAE,OAAO,EAAE;AACX,6BAAmB,MAAK,EAAG,OAAO,IAAI,SAAS,CAAC;QAClD;AAEA,YAAK,IAAI,aAAa,QAAQ,IAAI,UAAU,aAAa,GAAI;AAC3D,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,SAAS;QACvB;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQJ,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,WAAW,MAAgB,CAAC;UAC5B,aAAa,MAAgB,CAAC;UAC9B,WAAW,MAAgB,CAAC;;AAG9B,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,YAAY,OAAO,MAAK;AAC5B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,cAAc,OAAO,MAAK;AAC9B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,UAAU,mBAAmB,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;gBACvE,QAAQ,KAAK,QAAQ;eACtB;AACD;YACF;YACA,KAAK,GAAG;AACN,kBAAI,YAAY,OAAO,MAAK;AAC5B;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAI,UAAA,SAAS,CAAC,QAAsC;AAC3D,WAAO,cAAc,KAAKA,UAAS,MAAK,CAAE;EAC5C;AAEa,EAAAA,UAAA,SAAS,CAAC,KAAkC,SAA4C;AACnG,WAAO,cAAc,KAAKA,UAAS,MAAK,GAAI,IAAI;EAClD;AACF,GArFiBA,cAAAA,YAAQ,CAAA,EAAA;;;ACrkBlB,IAAMK,SAAO,CAACA,WAAyB;AAC5C,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,YAAM,YAAY,KAAK,CAAC;AAExB,UAAI,aAAa,MAAM;AACrB,eAAO;MACT;AAEA,UAAI,UAAU,SAASA,QAAM;AAC3B,eAAO;MACT;AAEA,UAAI,UAAU,SAAS,MAAM;AAC3B,eAAO;MACT;AAEA,aAAO,KAAK,MAAM,CAAC;IACrB;;AAEJ;AAMO,IAAMC,SAAQ,CAACD,QAAcC,WAA2B;AAC7D,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,YAAM,YAAY,KAAK,CAAC;AAExB,UAAI,WAAW,SAASD,QAAM;AAC5B,eAAO;MACT;AAEA,UAAI,UAAU,SAAS,MAAM;AAC3B,eAAO;MACT;AAEA,UAAIC,UAAS,QAAQ,UAAU,UAAUA,QAAO;AAC9C,eAAO;MACT;AAEA,aAAO,KAAK,MAAM,CAAC;IACrB;;AAEJ;AAKO,IAAMC,YAAW,CAAC,YAA6B;AACpD,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,YAAM,SAAS,QAAQ,MAAM,IAAI;AAEjC,UAAI,WAAW,OAAO;AACpB,eAAO;MACT;AAEA,aAAO;IACT;;AAEJ;AAKO,IAAMC,OAAK,IAAI,aAAgC;AACpD,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,UAAI;AAEJ,iBAAW,WAAW,UAAU;AAC9B,cAAM,SAAS,QAAQ,MAAM,IAAI;AAGjC,YAAI,WAAW,OAAO;AACpB;QACF;AAGA,YAAI,WAAW,QAAQ,OAAO,SAAS,QAAQ,QAAQ;AACrD,oBAAU;QACZ;MACF;AAEA,UAAI,WAAW,MAAM;AACnB,eAAO;MACT;AAEA,aAAO;IACT;;AAEJ;AAKO,IAAMC,OAAM,IAAI,aAAgC;AACrD,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,iBAAW,WAAW,UAAU;AAE9B,cAAM,SAAS,QAAQ,MAAM,IAAI;AAGjC,YAAI,WAAW,OAAO;AACpB,iBAAO;QACT;AAEA,eAAO;MACT;AAEA,aAAO;IACT;;AAEJ;AAKM,SAAUC,QAAQ,UAAmB;AACzC,WAAS,MAAO,IAAc;AAC5B,QAAI,MAAM,MAAM;AACd,aAAO;IACT;AAEA,QAAI,QAAQ,GAAG,cAAa;AAE5B,eAAW,WAAW,UAAU;AAC9B,YAAM,SAAS,QAAQ,MAAM,KAAK;AAElC,UAAI,WAAW,OAAO;AACpB,eAAO;MACT;AAEA,cAAQ;IACV;AAEA,WAAO;EACT;AAEA,WAAS,QAAS,IAAc;AAC9B,UAAM,SAAS,MAAM,EAAE;AAEvB,WAAO,WAAW;EACpB;AAEA,WAAS,WAAY,IAAc;AACjC,UAAM,SAAS,MAAM,EAAE;AAEvB,QAAI,WAAW,OAAO;AACpB,aAAO;IACT;AAEA,WAAO,OAAO,WAAW;EAC3B;AAEA,SAAO;IACL;IACA;IACA;;AAEJ;;;ACvFA,IAAMC,YAAWC,OAAM,QAAQ;AAExB,IAAMC,WAAUC,KAAIH,SAAQ;AAKnC,IAAMI,SAAQH,OAAM,SAAS;AAC7B,IAAMI,SAAQJ,OAAM,SAAS;AAC7B,IAAMK,YAAWL,OAAM,YAAY;AACnC,IAAMM,QAAON,OAAM,QAAQ;AAgBpB,IAAMO,QAAOL,KAAIC,QAAOK,UAASR,OAAM,QAAQ,CAAC,CAAC;AAgBjD,IAAMS,QAAOP,KAAIE,QAAOI,UAASR,OAAM,QAAQ,CAAC,CAAC;AAiBjD,IAAMU,WAAUR,KAAIG,WAAUG,UAASR,OAAM,QAAQ,CAAC,CAAC;AAiBvD,IAAMW,OAAMT,KAAIU,KAAGN,OAAMD,WAAUF,QAAOC,MAAK,GAAGI,UAASR,OAAM,QAAQ,CAAC,CAAC;AAElF,IAAMa,QAAOC,KACXd,OAAM,QAAQ,GACdQ,UAASR,OAAM,WAAW,CAAC,CAAC;AAE9B,IAAMe,QAAOD,KACXN,UAASR,OAAM,YAAY,CAAC,GAC5BA,OAAM,QAAQ,GACdQ,UAASR,OAAM,WAAW,CAAC,CAAC;AAE9B,IAAMgB,OAAMJ,KAAGC,OAAME,KAAI;AAEzB,IAAME,iBAAgBL,KAAGI,MAAKV,OAAMH,QAAOC,QAAOC,SAAQ;AAiBnD,IAAMa,gBAAehB,KAAIU,KAAGI,MAAKF,KAAIF,KAAGN,OAAMD,WAAUF,QAAOC,MAAK,GAAGI,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC,CAAC;AAkBlG,IAAMmB,OAAMjB,KAAIW,KAAI;AAkBpB,IAAMO,OAAMlB,KAAIa,KAAI;AAepB,IAAMM,MAAKnB,KAAIc,IAAG;AAEzB,IAAMM,QAAOR,KAAIG,gBAAejB,OAAM,QAAQ,CAAC;AAC/C,IAAMuB,QAAOT,KAAIG,gBAAejB,OAAM,QAAQ,CAAC;AAcxC,IAAMwB,OAAMtB,KAAIY,KAAIQ,OAAMd,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAcpD,IAAMyB,OAAMvB,KAAIqB,KAAI;AAE3B,IAAMG,SAAQZ,KAAIS,OAAMI,OAAK,SAAS,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC;AAClE,IAAM4B,YAAWd,KAAIS,OAAMI,OAAK,YAAY,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC;AAExE,IAAM6B,iBAAgBjB,KAAGc,QAAOE,SAAQ;AAcjC,IAAME,QAAO5B,KAAIwB,MAAK;AActB,IAAMK,WAAU7B,KAAI0B,SAAQ;AAEnC,IAAMI,QAAOpB,KACXK,gBACAK,OACAC,OACAG,QACAE,SAAQ;AAGV,IAAMK,eAAcrB,KAClBE,KAAIkB,OAAML,OAAK,OAAO,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAe9C,IAAMkC,cAAahC,KAAI+B,YAAW;AAEzC,IAAME,qBAAoBvB,KACxBE,KAAIkB,OAAML,OAAK,QAAQ,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,GACnDc,KAAIkB,OAAML,OAAK,QAAQ,GAAGnB,UAASR,OAAM,QAAQ,CAAC,GAAG2B,OAAK,OAAO,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAezF,IAAMoC,oBAAmBlC,KAAIiC,kBAAiB;AAErD,IAAME,iBAAgBvB,KAAIS,OAAMI,OAAK,kBAAkB,GAAGnB,UAASR,OAAM,aAAa,CAAC,GAAGQ,UAASR,OAAM,aAAa,CAAC,GAAGQ,UAASR,OAAM,QAAQ,CAAC,CAAC;AAc5I,IAAMsC,gBAAepC,KAAImC,cAAa;AAE7C,IAAME,iBAAgBzB,KAAIc,WAAUD,OAAK,iBAAiB,GAAGnB,UAASR,OAAM,aAAa,CAAC,GAAGQ,UAASR,OAAM,aAAa,CAAC,GAAGQ,UAASR,OAAM,QAAQ,CAAC,CAAC;AAc/I,IAAMwC,gBAAetC,KAAIqC,cAAa;AAE7C,IAAME,QAAO7B,KACXqB,cACAE,oBACArB,KAAIQ,OAAMd,UAASR,OAAM,QAAQ,CAAC,CAAC,GACnCc,KAAIe,gBAAerB,UAASR,OAAM,QAAQ,CAAC,CAAC,GAC5Cc,KAAIG,gBAAeT,UAASR,OAAM,QAAQ,CAAC,CAAC,GAC5CqC,gBACAE,gBACAvC,OAAM,QAAQ,CAAC;AAeV,IAAM0C,OAAMxC,KAAIuC,KAAI;AAE3B,IAAME,YAAW7B,KAAI2B,OAAMd,OAAK,gBAAgB,GAAG3B,OAAM,QAAQ,CAAC;AAc3D,IAAM4C,WAAU1C,KAAIyC,SAAQ;AAEnC,IAAME,WAAUjC,KACdE,KAAI2B,OAAMd,OAAK,gBAAgB,GAAGA,OAAK,WAAW,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,GAC9Ec,KAAI2B,OAAMd,OAAK,WAAW,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,GACtDc,KAAIa,OAAK,WAAW,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAe5C,IAAM8C,UAAS5C,KAAI2C,QAAO;AAEjC,IAAME,SAAQnC,KACZE,KAAIG,gBAAejB,OAAM,QAAQ,GAAG2B,OAAK,SAAS,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,GAC9Ec,KAAIG,gBAAeU,OAAK,SAAS,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAezD,IAAMgD,QAAO9C,KAAI6C,MAAK;AAE7B,IAAME,UAASnC,KAAIG,gBAAeL,KAChCE,KAAId,OAAM,UAAU,KAAK,GAAG2B,OAAK,SAAS,CAAC,GAC3Cb,KAAId,OAAM,QAAQ,GAAG2B,OAAK,UAAU,CAAC,GACrCb,KAAId,OAAM,QAAQ,GAAG2B,OAAK,QAAQ,GAAGA,OAAK,SAAS,CAAC,GACpDb,KAAIa,OAAK,QAAQ,GAAGA,OAAK,SAAS,CAAC,GACnCA,OAAK,QAAQ,GACbA,OAAK,UAAU,CAAC,GAElBnB,UAASR,OAAM,QAAQ,CAAC,CAAC;AAelB,IAAMkD,SAAQhD,KAAI+C,OAAM;AAE/B,IAAME,WAAUvC,KACdE,KAAId,OAAM,WAAW,GAAGQ,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAe7C,IAAMoD,UAASlD,KAAIiD,QAAO;AAEjC,IAAME,SAAQzC,KACZE,KAAId,OAAM,SAAS,GAAGQ,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAe3C,IAAMsD,QAAOpD,KAAImD,MAAK;;;AChgB7B,SAASE,OAAM,UAAUC,OAAI;AAC3B,MAAI,SAAS,UAAU,KAAK;AAAE,UAAM,IAAI,UAAU,mBAAmB;EAAE;AACvE,MAAI,WAAW,IAAI,WAAW,GAAG;AACjC,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,aAAS,CAAC,IAAI;EAChB;AACA,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,QAAI,IAAI,SAAS,OAAO,CAAC;AACzB,QAAI,KAAK,EAAE,WAAW,CAAC;AACvB,QAAI,SAAS,EAAE,MAAM,KAAK;AAAE,YAAM,IAAI,UAAU,IAAI,eAAe;IAAE;AACrE,aAAS,EAAE,IAAI;EACjB;AACA,MAAI,OAAO,SAAS;AACpB,MAAI,SAAS,SAAS,OAAO,CAAC;AAC9B,MAAI,SAAS,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,GAAG;AAC1C,MAAI,UAAU,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI;AAI3C,WAASC,SAAQ,QAAM;AAErB,QAAI,kBAAkB;AAAY;aAAW,YAAY,OAAO,MAAM,GAAG;AACvE,eAAS,IAAI,WAAW,OAAO,QAAQ,OAAO,YAAY,OAAO,UAAU;IAC7E,WAAW,MAAM,QAAQ,MAAM,GAAG;AAChC,eAAS,WAAW,KAAK,MAAM;IACjC;AACA,QAAI,EAAE,kBAAkB,aAAa;AAAE,YAAM,IAAI,UAAU,qBAAqB;IAAE;AAClF,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO;IAAG;AAErC,QAAI,SAAS;AACb,QAAIC,WAAS;AACb,QAAI,SAAS;AACb,QAAI,OAAO,OAAO;AAClB,WAAO,WAAW,QAAQ,OAAO,MAAM,MAAM,GAAG;AAC9C;AACA;IACF;AAEA,QAAI,QAAS,OAAO,UAAU,UAAU,MAAO;AAC/C,QAAI,MAAM,IAAI,WAAW,IAAI;AAE7B,WAAO,WAAW,MAAM;AACtB,UAAI,QAAQ,OAAO,MAAM;AAEzB,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,MAAM,IAAI,GAAG,MAAO;AAC9B,YAAI,GAAG,IAAK,QAAQ,SAAU;AAC9B,gBAAS,QAAQ,SAAU;MAC7B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,IAAI,GAAG,MAAM,GAAG;AACrC;IACF;AAEA,QAAI,MAAM,OAAO,OAAO,MAAM;AAC9B,WAAO,MAAM,MAAM,EAAE,KAAK;AAAE,aAAO,SAAS,OAAO,IAAI,GAAG,CAAC;IAAG;AAC9D,WAAO;EACT;AAIA,WAAS,aAAc,QAAM;AAC3B,QAAI,OAAO,WAAW,UAAU;AAAE,YAAM,IAAI,UAAU,iBAAiB;IAAE;AACzE,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO,IAAI,WAAU;IAAG;AACnD,QAAI,MAAM;AAEV,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,SAAS;AACb,QAAIA,WAAS;AACb,WAAO,OAAO,GAAG,MAAM,QAAQ;AAC7B;AACA;IACF;AAEA,QAAI,QAAU,OAAO,SAAS,OAAO,SAAU,MAAO;AACtD,QAAI,OAAO,IAAI,WAAW,IAAI;AAE9B,WAAO,OAAO,GAAG,GAAG;AAElB,UAAI,QAAQ,SAAS,OAAO,WAAW,GAAG,CAAC;AAE3C,UAAI,UAAU,KAAK;AAAE;MAAO;AAC5B,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,OAAO,KAAK,GAAG,MAAO;AAChC,aAAK,GAAG,IAAK,QAAQ,QAAS;AAC9B,gBAAS,QAAQ,QAAS;MAC5B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,KAAK,GAAG,MAAM,GAAG;AACtC;IACF;AACA,QAAI,MAAM,IAAI,WAAW,UAAU,OAAO,IAAI;AAC9C,QAAIE,KAAI;AACR,WAAO,QAAQ,MAAM;AACnB,UAAIA,IAAG,IAAI,KAAK,KAAK;IACvB;AACA,WAAO;EACT;AAIA,WAASC,SAAQC,SAAM;AACrB,QAAI,SAAS,aAAaA,OAAM;AAChC,QAAI,QAAQ;AAAE,aAAO;IAAO;AAC5B,UAAM,IAAI,MAAM,OAAON,KAAI,YAAY;EACzC;AACA,SAAO;IACL,QAAQC;IACR;IACA,QAAQI;;AAEZ;AACA,IAAIE,QAAMR;AAEV,IAAIS,oCAAkCD;AAEtC,IAAAE,mBAAeD;;;ACjIf,IAAME,YAAN,MAAa;EACF;EACA;EACA;EAET,YAAaC,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;EACpB;EAEA,OAAQ,OAAiB;AACvB,QAAI,iBAAiB,YAAY;AAC/B,aAAO,GAAG,KAAK,MAAM,GAAG,KAAK,WAAW,KAAK,CAAC;IAChD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;;AAQF,IAAMC,YAAN,MAAa;EACF;EACA;EACA;EACQ;EAEjB,YAAaD,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,UAAM,kBAAkB,OAAO,YAAY,CAAC;AAE5C,QAAI,oBAAoB,QAAW;AACjC,YAAM,IAAI,MAAM,0BAA0B;IAC5C;AACA,SAAK,kBAAkB;AACvB,SAAK,aAAa;EACpB;EAEA,OAAQ,MAAY;AAClB,QAAI,OAAO,SAAS,UAAU;AAC5B,UAAI,KAAK,YAAY,CAAC,MAAM,KAAK,iBAAiB;AAChD,cAAM,MAAM,qCAAqC,KAAK,UAAU,IAAI,CAAC,KAAK,KAAK,IAAI,+CAA+C,KAAK,MAAM,EAAE;MACjJ;AACA,aAAO,KAAK,WAAW,KAAK,MAAM,KAAK,OAAO,MAAM,CAAC;IACvD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;EAEA,GAAgC,SAAmE;AACjG,WAAOE,KAAG,MAAM,OAAO;EACzB;;AAKF,IAAMC,oBAAN,MAAqB;EACV;EAET,YAAa,UAA0B;AACrC,SAAK,WAAW;EAClB;EAEA,GAAiC,SAAmE;AAClG,WAAOD,KAAG,MAAM,OAAO;EACzB;EAEA,OAAQ,OAAa;AACnB,UAAM,SAAS,MAAM,CAAC;AACtB,UAAM,UAAU,KAAK,SAAS,MAAM;AACpC,QAAI,WAAW,MAAM;AACnB,aAAO,QAAQ,OAAO,KAAK;IAC7B,OAAO;AACL,YAAM,WAAW,qCAAqC,KAAK,UAAU,KAAK,CAAC,+BAA+B,OAAO,KAAK,KAAK,QAAQ,CAAC,gBAAgB;IACtJ;EACF;;AAGI,SAAUA,KAAyC,MAA+C,OAA8C;AACpJ,SAAO,IAAIC,kBAAgB;IACzB,GAAI,KAAK,YAAY,EAAE,CAAE,KAA2B,MAAM,GAAG,KAAI;IACjE,GAAI,MAAM,YAAY,EAAE,CAAE,MAA4B,MAAM,GAAG,MAAK;GAClD;AACtB;AAEM,IAAOC,UAAP,MAAY;EACP;EACA;EACA;EACA;EACA;EACA;EAET,YAAaJ,OAAY,QAAgB,YAAsB,YAAoB;AACjF,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,UAAU,IAAID,UAAQC,OAAM,QAAQ,UAAU;AACnD,SAAK,UAAU,IAAIC,UAAQD,OAAM,QAAQ,UAAU;EACrD;EAEA,OAAQ,OAAiB;AACvB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;EAEA,OAAQ,OAAa;AACnB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;;AAGI,SAAUK,OAAmD,EAAE,MAAAL,OAAM,QAAQ,QAAAM,UAAQ,QAAAC,SAAM,GAAsE;AACrK,SAAO,IAAIH,QAAMJ,OAAM,QAAQM,UAAQC,QAAM;AAC/C;AAEM,SAAUC,QAAoD,EAAE,MAAAR,OAAM,QAAQ,UAAAS,UAAQ,GAAoD;AAC9I,QAAM,EAAE,QAAAH,UAAQ,QAAAC,SAAM,IAAKG,iBAAMD,WAAUT,KAAI;AAC/C,SAAOK,OAAK;IACV;IACA,MAAAL;IACA,QAAAM;IACA,QAAQ,CAAC,SAA6BK,SAAOJ,SAAO,IAAI,CAAC;GAC1D;AACH;AAEA,SAASA,SAAQK,SAAgB,aAAqC,aAAqBZ,OAAY;AAErG,MAAI,MAAMY,QAAO;AACjB,SAAOA,QAAO,MAAM,CAAC,MAAM,KAAK;AAC9B,MAAE;EACJ;AAGA,QAAM,MAAM,IAAI,WAAY,MAAM,cAAc,IAAK,CAAC;AAGtD,MAAI,OAAO;AACX,MAAI,SAAS;AACb,MAAI,UAAU;AACd,WAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAE5B,UAAMC,SAAQ,YAAYD,QAAO,CAAC,CAAC;AACnC,QAAIC,WAAU,QAAW;AACvB,YAAM,IAAI,YAAY,OAAOb,KAAI,YAAY;IAC/C;AAGA,aAAU,UAAU,cAAea;AACnC,YAAQ;AAGR,QAAI,QAAQ,GAAG;AACb,cAAQ;AACR,UAAI,SAAS,IAAI,MAAQ,UAAU;IACrC;EACF;AAGA,MAAI,QAAQ,gBAAgB,MAAQ,UAAW,IAAI,UAAY,GAAG;AAChE,UAAM,IAAI,YAAY,wBAAwB;EAChD;AAEA,SAAO;AACT;AAEA,SAASP,SAAQ,MAAkBG,WAAkB,aAAmB;AACtE,QAAM,MAAMA,UAASA,UAAS,SAAS,CAAC,MAAM;AAC9C,QAAM,QAAQ,KAAK,eAAe;AAClC,MAAI,MAAM;AAEV,MAAI,OAAO;AACX,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAEpC,aAAU,UAAU,IAAK,KAAK,CAAC;AAC/B,YAAQ;AAGR,WAAO,OAAO,aAAa;AACzB,cAAQ;AACR,aAAOA,UAAS,OAAQ,UAAU,IAAK;IACzC;EACF;AAGA,MAAI,SAAS,GAAG;AACd,WAAOA,UAAS,OAAQ,UAAW,cAAc,IAAM;EACzD;AAGA,MAAI,KAAK;AACP,YAAS,IAAI,SAAS,cAAe,OAAO,GAAG;AAC7C,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEA,SAASK,oBAAmBL,WAAgB;AAE1C,QAAM,cAAsC,CAAA;AAC5C,WAAS,IAAI,GAAG,IAAIA,UAAS,QAAQ,EAAE,GAAG;AACxC,gBAAYA,UAAS,CAAC,CAAC,IAAI;EAC7B;AACA,SAAO;AACT;AAKM,SAAUM,UAAsD,EAAE,MAAAf,OAAM,QAAQ,aAAa,UAAAS,UAAQ,GAAyE;AAClL,QAAM,cAAcK,oBAAkBL,SAAQ;AAC9C,SAAOJ,OAAK;IACV;IACA,MAAAL;IACA,OAAQ,OAAiB;AACvB,aAAOM,SAAO,OAAOG,WAAU,WAAW;IAC5C;IACA,OAAQ,OAAa;AACnB,aAAOF,SAAO,OAAO,aAAa,aAAaP,KAAI;IACrD;GACD;AACH;;;AC9OO,IAAMgB,UAASC,UAAQ;EAC5B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMC,eAAcD,UAAQ;EACjC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAME,aAAYF,UAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMG,kBAAiBH,UAAQ;EACpC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMI,aAAYJ,UAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMK,kBAAiBL,UAAQ;EACpC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMM,gBAAeN,UAAQ;EAClC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMO,qBAAoBP,UAAQ;EACvC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMQ,WAAUR,UAAQ;EAC7B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;;;AC7DM,IAAMS,UAASC,QAAM;EAC1B,QAAQ;EACR,MAAM;EACN,UAAU;CACX;AAEM,IAAMC,eAAcD,QAAM;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;CACX;;;ACVM,IAAME,cAAYC,QAAM;EAC7B,MAAM;EACN,QAAQ;EACR,UAAU;CACX;AAEM,IAAMC,iBAAeD,QAAM;EAChC,MAAM;EACN,QAAQ;EACR,UAAU;CACX;;;ACDK,SAAUE,QAA0F,MAASC,QAAmC;AACpJ,QAAM,EAAE,OAAO,SAAAC,SAAO,IAAK;AAC3B,UAAQA,UAAS;IACf,KAAK;AACH,aAAOC,YACL,OACAC,WAAU,IAAI,GACdH,UAAqCI,YAAU,OAAO;IAE1D;AACE,aAAOC,YACL,OACAF,WAAU,IAAI,GACbH,UAAQM,QAAO,OAAwC;EAE9D;AACF;AAYA,IAAMC,SAAQ,oBAAI,QAAO;AAEzB,SAASC,WAAW,KAAoB;AACtC,QAAMA,cAAYD,OAAM,IAAI,GAAG;AAC/B,MAAIC,eAAa,MAAM;AACrB,UAAMA,cAAY,oBAAI,IAAG;AACzB,IAAAD,OAAM,IAAI,KAAKC,WAAS;AACxB,WAAOA;EACT;AACA,SAAOA;AACT;AAEM,IAAOC,OAAP,MAAO,KAAG;EACL;EACA;EACA;EACA;EACA;;;;;;EAOT,YAAaC,UAAkBC,QAAc,WAAqC,OAAiB;AACjG,SAAK,OAAOA;AACZ,SAAK,UAAUD;AACf,SAAK,YAAY;AACjB,SAAK,QAAQ;AAIb,SAAK,GAAG,IAAI;EACd;;;;;;;EAQA,IAAI,QAAK;AACP,WAAO;EACT;;EAGA,IAAI,aAAU;AACZ,WAAO,KAAK,MAAM;EACpB;;EAGA,IAAI,aAAU;AACZ,WAAO,KAAK,MAAM;EACpB;EAEA,OAAI;AACF,YAAQ,KAAK,SAAS;MACpB,KAAK,GAAG;AACN,eAAO;MACT;MACA,KAAK,GAAG;AACN,cAAM,EAAE,MAAAC,QAAM,UAAS,IAAK;AAE5B,YAAIA,WAASC,cAAa;AACxB,gBAAM,IAAI,MAAM,0CAA0C;QAC5D;AAGA,YAAI,UAAU,SAASC,eAAc;AACnC,gBAAM,IAAI,MAAM,oDAAoD;QACtE;AAEA,eACE,KAAI,SACF,SAA6C;MAGnD;MACA,SAAS;AACP,cAAM,MACJ,+BAA+B,KAAK,OAAO,4CAA4C;MAE3F;IACF;EACF;EAEA,OAAI;AACF,YAAQ,KAAK,SAAS;MACpB,KAAK,GAAG;AACN,cAAM,EAAE,MAAAF,QAAM,QAAAG,QAAM,IAAK,KAAK;AAC9B,cAAM,YAAmBC,SAAOJ,QAAMG,OAAM;AAC5C,eACE,KAAI,SAAS,KAAK,MAAM,SAAS;MAErC;MACA,KAAK,GAAG;AACN,eAAO;MACT;MACA,SAAS;AACP,cAAM,MACJ,+BAA+B,KAAK,OAAO,4CAA4C;MAE3F;IACF;EACF;EAEA,OAAQ,OAAc;AACpB,WAAO,KAAI,OAAO,MAAM,KAAK;EAC/B;EAEA,OAAO,OAAsFE,OAA4C,OAAc;AACrJ,UAAM,UAAU;AAChB,WACE,WAAW,QACXA,MAAK,SAAS,QAAQ,QACtBA,MAAK,YAAY,QAAQ,WAClBC,SAAOD,MAAK,WAAW,QAAQ,SAAS;EAEnD;EAEA,SAAUE,QAAmC;AAC3C,WAAOC,QAAO,MAAMD,MAAI;EAC1B;EAEA,SAAM;AACJ,WAAO,EAAE,KAAKC,QAAO,IAAI,EAAC;EAC5B;EAEA,OAAI;AACF,WAAO;EACT;EAES,CAAC,OAAO,WAAW,IAAI;;EAIhC,CAAC,OAAO,IAAI,4BAA4B,CAAC,IAAC;AACxC,WAAO,OAAO,KAAK,SAAQ,CAAE;EAC/B;;;;;;;;;;;EAYA,OAAO,MAAwF,OAA+C;AAC5I,QAAI,SAAS,MAAM;AACjB,aAAO;IACT;AAEA,UAAMC,SAAQ;AACd,QAAIA,kBAAiB,MAAK;AAExB,aAAOA;IACT,WAAYA,OAAM,GAAG,KAAK,QAAQA,OAAM,GAAG,MAAMA,OAAM,SAAUA,OAAM,UAAUA,QAAO;AAMtF,YAAM,EAAE,SAAAV,UAAS,MAAAC,QAAM,WAAW,MAAK,IAAKS;AAC5C,aAAO,IAAI,KACTV,UACAC,QACA,WACA,SAASU,WAAUX,UAASC,QAAM,UAAU,KAAK,CAAC;IAEtD,WAAWS,OAAME,UAAS,MAAM,MAAM;AAIpC,YAAM,EAAE,SAAAZ,UAAS,WAAW,MAAAC,OAAI,IAAKS;AACrC,YAAMN,UAAgBS,SAAO,SAAS;AACtC,aAAO,KAAI,OAAOb,UAASC,QAAMG,OAAM;IACzC,OAAO;AAGL,aAAO;IACT;EACF;;;;;;EAOA,OAAO,OAAsFJ,UAAkBC,QAAcG,SAAgC;AAC3J,QAAI,OAAOH,WAAS,UAAU;AAC5B,YAAM,IAAI,MAAM,uCAAuC;IACzD;AAEA,QAAI,EAAEG,QAAO,iBAAiB,aAAa;AACzC,YAAM,IAAI,MAAM,gBAAgB;IAClC;AAEA,YAAQJ,UAAS;MACf,KAAK,GAAG;AACN,YAAIC,WAASC,cAAa;AACxB,gBAAM,IAAI,MACR,wCAAwCA,YAAW,kBAAkB;QAEzE,OAAO;AACL,iBAAO,IAAI,KAAIF,UAASC,QAAMG,SAAQA,QAAO,KAAK;QACpD;MACF;MACA,KAAK,GAAG;AACN,cAAM,QAAQO,WAAUX,UAASC,QAAMG,QAAO,KAAK;AACnD,eAAO,IAAI,KAAIJ,UAASC,QAAMG,SAAQ,KAAK;MAC7C;MACA,SAAS;AACP,cAAM,IAAI,MAAM,iBAAiB;MACnC;IACF;EACF;;;;EAKA,OAAO,SAAuBA,SAAgD;AAC5E,WAAO,KAAI,OAAO,GAAGF,cAAaE,OAAM;EAC1C;;;;;;;EAQA,OAAO,SAAyDH,QAAYG,SAAgC;AAC1G,WAAO,KAAI,OAAO,GAAGH,QAAMG,OAAM;EACnC;;;;;;;;EASA,OAAO,OAAoF,OAAuD;AAChJ,UAAM,CAAC,KAAK,SAAS,IAAI,KAAI,YAAY,KAAK;AAC9C,QAAI,UAAU,WAAW,GAAG;AAC1B,YAAM,IAAI,MAAM,kBAAkB;IACpC;AACA,WAAO;EACT;;;;;;;;;;EAWA,OAAO,YAA2E,OAAyC;AACzH,UAAM,QAAQ,KAAI,aAAa,KAAK;AACpC,UAAM,aAAa,MAAM,OAAO,MAAM;AACtC,UAAM,iBAAiBU,SACrB,MAAM,SAAS,YAAY,aAAa,MAAM,aAAa,CAAC;AAE9D,QAAI,eAAe,eAAe,MAAM,eAAe;AACrD,YAAM,IAAI,MAAM,kBAAkB;IACpC;AACA,UAAM,cAAc,eAAe,SACjC,MAAM,gBAAgB,MAAM,UAAU;AAExC,UAAMV,UAAS,IAAWW,SACxB,MAAM,eACN,MAAM,YACN,aACA,cAAc;AAEhB,UAAM,MACJ,MAAM,YAAY,IACd,KAAI,SAASX,OAA0C,IACvD,KAAI,SAAS,MAAM,OAAOA,OAAM;AACtC,WAAO,CAAC,KAAwB,MAAM,SAAS,MAAM,IAAI,CAAC;EAC5D;;;;;;;;;;EAWA,OAAO,aAA4E,cAAgD;AACjI,QAAI,SAAS;AACb,UAAM,OAAO,MAAa;AACxB,YAAM,CAAC,GAAGY,QAAM,IAAWH,SAAO,aAAa,SAAS,MAAM,CAAC;AAC/D,gBAAUG;AACV,aAAO;IACT;AAEA,QAAIhB,WAAU,KAAI;AAClB,QAAI,QAAQE;AACZ,QAAIF,aAAsB,IAAI;AAE5B,MAAAA,WAAU;AACV,eAAS;IACX,OAAO;AACL,cAAQ,KAAI;IACd;AAEA,QAAIA,aAAY,KAAKA,aAAY,GAAG;AAClC,YAAM,IAAI,WAAW,uBAAuBA,QAAO,EAAE;IACvD;AAEA,UAAM,aAAa;AACnB,UAAM,gBAAgB,KAAI;AAC1B,UAAM,aAAa,KAAI;AACvB,UAAM,OAAO,SAAS;AACtB,UAAM,gBAAgB,OAAO;AAE7B,WAAO,EAAE,SAAAA,UAAS,OAAO,eAAe,YAAY,eAAe,KAAI;EACzE;;;;;;;EAQA,OAAO,MAA0G,QAAkEQ,QAAmC;AACpN,UAAM,CAAC,QAAQ,KAAK,IAAIS,iBAAgB,QAAQT,MAAI;AAEpD,UAAM,MAAM,KAAI,OAAO,KAAK;AAE5B,QAAI,IAAI,YAAY,KAAK,OAAO,CAAC,MAAM,KAAK;AAC1C,YAAM,MAAM,wDAAwD;IACtE;AAGA,IAAAV,WAAU,GAAG,EAAE,IAAI,QAAQ,MAAM;AAEjC,WAAO;EACT;;AAGF,SAASmB,iBAAqH,QAAkET,QAAmC;AACjO,UAAQ,OAAO,CAAC,GAAG;;IAEjB,KAAK,KAAK;AACR,YAAM,UAAUA,UAAQU;AACxB,aAAO;QACLA,YAAU;QACV,QAAQ,OAAO,GAAGA,YAAU,MAAM,GAAG,MAAM,EAAE;;IAEjD;IACA,KAAKA,YAAU,QAAQ;AACrB,YAAM,UAAUV,UAAQU;AACxB,aAAO,CAACA,YAAU,QAAkB,QAAQ,OAAO,MAAM,CAAC;IAC5D;IACA,KAAKC,QAAO,QAAQ;AAClB,YAAM,UAAUX,UAAQW;AACxB,aAAO,CAACA,QAAO,QAAkB,QAAQ,OAAO,MAAM,CAAC;IACzD;IACA,KAAKC,QAAO,QAAQ;AAClB,YAAM,UAAUZ,UAAQY;AACxB,aAAO,CAACA,QAAO,QAAkB,QAAQ,OAAO,MAAM,CAAC;IACzD;IACA,SAAS;AACP,UAAIZ,UAAQ,MAAM;AAChB,cAAM,MACJ,yFAAyF;MAE7F;AACA,aAAO,CAAC,OAAO,CAAC,GAAaA,OAAK,OAAO,MAAM,CAAC;IAClD;EACF;AACF;AAEA,SAASa,YAAY,OAAmBxB,SAA4BW,QAA+B;AACjG,QAAM,EAAE,OAAM,IAAKA;AACnB,MAAI,WAAWU,YAAU,QAAQ;AAC/B,UAAM,MAAM,8BAA8BV,OAAK,IAAI,WAAW;EAChE;AAEA,QAAM,MAAMX,QAAM,IAAI,MAAM;AAC5B,MAAI,OAAO,MAAM;AACf,UAAMyB,OAAMd,OAAK,OAAO,KAAK,EAAE,MAAM,CAAC;AACtC,IAAAX,QAAM,IAAI,QAAQyB,IAAG;AACrB,WAAOA;EACT,OAAO;AACL,WAAO;EACT;AACF;AAEA,SAASC,YAAoC,OAAmB1B,SAA4BW,QAAkC;AAC5H,QAAM,EAAE,OAAM,IAAKA;AACnB,QAAM,MAAMX,QAAM,IAAI,MAAM;AAC5B,MAAI,OAAO,MAAM;AACf,UAAMyB,OAAMd,OAAK,OAAO,KAAK;AAC7B,IAAAX,QAAM,IAAI,QAAQyB,IAAG;AACrB,WAAOA;EACT,OAAO;AACL,WAAO;EACT;AACF;AAEA,IAAMpB,eAAc;AACpB,IAAMC,gBAAe;AAErB,SAASQ,WAAWX,UAAsBC,QAAc,WAAqB;AAC3E,QAAM,aAAoBuB,iBAAexB,QAAO;AAChD,QAAM,aAAa,aAAoBwB,iBAAevB,MAAI;AAC1D,QAAM,QAAQ,IAAI,WAAW,aAAa,UAAU,UAAU;AAC9D,EAAOwB,WAASzB,UAAS,OAAO,CAAC;AACjC,EAAOyB,WAASxB,QAAM,OAAO,UAAU;AACvC,QAAM,IAAI,WAAW,UAAU;AAC/B,SAAO;AACT;AAEA,IAAMW,aAAY,OAAO,IAAI,kBAAkB;;;ACxczC,SAAUc,OAAiD,EAAE,MAAAC,OAAM,MAAAC,QAAM,QAAAC,SAAM,GAA4E;AAC/J,SAAO,IAAIC,QAAOH,OAAMC,QAAMC,QAAM;AACtC;AAMM,IAAOC,UAAP,MAAa;EACR;EACA;EACA;EAET,YAAaH,OAAYC,QAAYC,UAAgD;AACnF,SAAK,OAAOF;AACZ,SAAK,OAAOC;AACZ,SAAK,SAASC;EAChB;EAEA,OAAQ,OAAiB;AACvB,QAAI,iBAAiB,YAAY;AAC/B,YAAM,SAAS,KAAK,OAAO,KAAK;AAChC,aAAO,kBAAkB,aACdE,SAAO,KAAK,MAAM,MAAM,IAE/B,OAAO,KAAK,CAAAC,YAAiBD,SAAO,KAAK,MAAMC,OAAM,CAAC;IAC5D,OAAO;AACL,YAAM,MAAM,mCAAmC;IAEjD;EACF;;;;AC/BF,SAASC,KAAKC,OAAyB;AACrC,SAAO,OAAM,SAAQ,IAAI,WAAW,MAAM,OAAO,OAAO,OAAOA,OAAM,IAAI,CAAC;AAC5E;AAEO,IAAMC,UAASC,OAAK;EACzB,MAAM;EACN,MAAM;EACN,QAAQH,KAAI,SAAS;CACtB;AAEM,IAAMI,UAASD,OAAK;EACzB,MAAM;EACN,MAAM;EACN,QAAQH,KAAI,SAAS;CACtB;;;ACKK,IAAO,uBAAP,cAAoC,MAAK;EAC7C,OAAO,OAAe;EACtB,OAAe;;AAMX,IAAO,mBAAP,cAAgC,MAAK;EACzC,OAAO,OAAe;EACtB,OAAe;;AAOX,IAAO,sBAAP,cAAmC,MAAK;EAC5C,OAAO,OAAe;EACtB,OAAe;;;;ACqFX,SAAU,0BAA2B,mBAAyB;AAClE,QAAM,mBAAmB,oBAAoB,OAAO,GAAI;AACxD,QAAM,eAAc,oBAAI,KAAI,GAAG,QAAO;AAGtC,SAAO,OAAO,mBAAmB,OAAO,WAAW,CAAC;AACtD;AAEM,IAAO,eAAP,MAAmB;EACN;EACT;EAER,YAAa,QAAc;AACzB,QAAI,QAAQ,YAAY,QAAQ,QAAQ,aAAa,GAAG;AACtD,WAAK,UAAU,KAAK,IAAG,IAAM,OAAO,WAAW;IACjD;AAEA,SAAK,QAAQ,QAAQ;AAErB,QAAI,KAAK,UAAU,IAAI;AACrB,WAAK,QAAQ;IACf;AAEA,SAAK,SAAS,KAAK,OAAO,KAAK,IAAI;EACrC;EAEA,OAAQ,KAAgC;AACtC,QAAI,KAAK,SAAS,MAAM;AACtB;IACF;AAEA,SAAK,SAAS,OAAO,IAAI,UAAU;AAEnC,QAAI,KAAK,QAAQ,IAAI;AACnB,WAAK,QAAQ;IACf;EACF;EAEA,YAAS;AACP,QAAI,KAAK,WAAW,QAAQ,KAAK,SAAS,MAAM;AAC9C;IACF;AAEA,UAAM,SAAS,CAAA;AAEf,QAAI,KAAK,SAAS,MAAM;AACtB,YAAMK,QAAO;AAEb,aAAO,eAAe,QAAQ,SAAS;QACrC,MAAG;AACD,iBAAOA,MAAK;QACd;OACD;IACH;AAEA,QAAI,KAAK,WAAW,MAAM;AACxB,YAAMA,QAAO;AAEb,aAAO,eAAe,QAAQ,WAAW;QACvC,MAAG;AACD,iBAAO,KAAK,QAAQA,MAAK,WAAW,KAAK,KAAK,IAAG,KAAM,GAAI;QAC7D;OACD;IACH;AAEA,WAAO;EACT;;AAMK,IAAM,gBAAgBC,KAC3BC,KAAIC,KAAI,SAAS,CAAC,GAAGC,OAAK,gBAAgB,CAAC,CAAC;AAMvC,IAAM,gBAAgBH,KAC3BG,OAAK,gBAAgB,CAAC;;;ACpLlB,SAAU,qBAAsB,OAAuB;AAC3D,QAAM,EAAE,QAAQ,YAAY,QAAAC,SAAQ,YAAY,YAAW,IAAK;AAChE,QAAMC,OAAMD,QAAO,aAAa,yBAAyB;AAEzD,MAAI,aAAa;AACjB,MAAI,cAAc;AAGlB,QAAM,cAAc,OAAO,MAAM,KAAK,MAAM;AAC5C,SAAO,QAAQ,OAAOE,aAA0B;AAC9C,UAAM,YAAYA,QAAO;AACzB,UAAM,IAAI;EACZ;AAGA,QAAM,cAAc,OAAO,MAAM,KAAK,MAAM;AAC5C,SAAO,QAAQ,CAAC,QAAa;AAC3B,gBAAY,GAAG;AACf,UAAM,IAAI;EACZ;AAGA,QAAM,aAAa,OAAO,KAAK,KAAK,MAAM;AAC1C,SAAO,OAAO,OAAO,WAAyB;AAC5C,QAAI;AACF,YAAM,WACJ,KACE,QACA,CAACC,YAAWC,aAAQD,SAAQ,SAAO,cAAc,GAAG,CAAC,CAAC,CACvD;IAEL,SAAS,KAAU;AAEjB,UAAI,IAAI,SAAS,WAAW;AAI1B,QAAAF,KAAI,MAAM,oBAAoB,YAAY,GAAG;MAC/C;IACF;AACE,oBAAc;AACd,YAAK;IACP;EACF;AAEA,QAAM,SAA8B;IAClC,KAAAA;IACA,MAAM,OAAO;IACb,QAAS,mBAAgB;AACvB,UAAI;AACF,yBAAiB,OAAO,OAAO,QAAQ;AACrC,uBAAa,GAAG;AAChB,gBAAM;QACR;MACF;AACE,qBAAa;AACb,cAAK;MACP;IACF,EAAC;IACD;IACA,UAAU,EAAE,MAAM,KAAK,IAAG,GAAI,OAAO,OAAS;IAC9C,OAAO,OAAO;IACd,OAAO,OAAO;;AAGhB,WAAS,MAAO,OAAe;AAC7B,QAAI,UAAU,MAAM;AAClB,mBAAa;AACb,oBAAc;IAChB;AAEA,QAAI,cAAc,eAAe,OAAO,SAAS,SAAS,MAAM;AAC9D,aAAO,SAAS,QAAQ,KAAK,IAAG;IAClC;EACF;AAEA,SAAO;AACT;;;ACxEM,IAAO,iBAAP,cAA8B,kBAAuC;EACxD;EACT;EACA;EACA;EACS;EACT;EACS;EACT;EAER,YAAa,YAAsC,OAA2B,CAAA,GAAE;AAC9E,UAAK;AAEL,SAAK,MAAM,WAAW,OAAO,aAAa,sCAAsC;AAChF,SAAK,aAAa;AAClB,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,SAAS,KAAK;AACnB,SAAK,sBAAsB,IAAI,gBAAe;AAC9C,oBAAgB,UAAU,KAAK,oBAAoB,MAAM;AACzD,SAAK,WAAW,KAAK,SAAS,KAAK,IAAI;AACvC,SAAK,SAAS,KAAK,OAAO,KAAK,IAAI;EACrC;EAEA,YAAS;AACP,WAAO,KAAK;EACd;EAEA,MAAM,QAAK;AAGT,SAAK,aAAa,MAAM,KAAK,WAAW,UAAU,SAAS,oBAAoB;MAC7E,QAAQ,KAAK;MACb,WAAW,CAACI,YAAU;AACpB,aAAK,IAAI,MAAM,qDAAqDA,SAAQ,KAAK,OAAO,MAAM,KAAK,OAAO,OAAO;AACjH,aAAK,kBAAkB,kBAAkB,EAAE,QAAQA,QAAM,CAAE;MAC7D;KACD;AAED,SAAK,UAAU;EACjB;EAEA,OAAI;AACF,QAAI,KAAK,cAAc,MAAM;AAC3B,WAAK,WAAW,UAAU,WAAW,KAAK,UAAU;IACtD;AAEA,QAAI,KAAK,SAAS;AAChB,WAAK,cAAa;IACpB;AAEA,SAAK,UAAU;EACjB;;;;;;;;;;EAWA,iBAAc;AACZ,QAAI,KAAK,SAAS;AAChB;IACF;AAEA,SAAK,IAAI,iBAAiB;AAC1B,SAAK,UAAU;AACf,SAAK,sBAAsB,IAAI,gBAAe;AAC9C,oBAAgB,UAAU,KAAK,oBAAoB,MAAM;AAGzD,SAAK,WAAW,OAAO,iBAAiB,kBAAkB,KAAK,MAAM;AAErE,YAAQ,QAAO,EACZ,KAAK,YAAW;AACf,WAAK,IAAI,iCAAiC;AAE1C,YAAM,QAAS,MAAM,KAAK,WAAW,UAAU,IAAI;QACjD,SAAS;;UAEP,CAAC,SAAQ;AACP,mBAAO,KAAK,UAAU,SAAS,kBAAkB;UACnD;;QAEF,QAAQ;;UAEN,MAAM,KAAK,OAAM,IAAK,MAAM,IAAI;;UAEhC,CAAC,GAAG,MAAK;AACP,kBAAM,YAAY,YAAY,CAAC;AAC/B,kBAAM,YAAY,YAAY,CAAC;AAE/B,gBAAI,YAAY,WAAW;AACzB,qBAAO;YACT;AAEA,gBAAI,YAAY,WAAW;AACzB,qBAAO;YACT;AAEA,mBAAO;UACT;;OAEH;AAED,iBAAW,QAAQ,OAAO;AACxB,aAAK,IAAI,MAAM,qCAAqC,KAAK,EAAE;AAC3D,aAAK,kBAAkB,kBAAkB,EAAE,QAAQ,KAAK,GAAE,CAAE;MAC9D;AAEA,WAAK,IAAI,sCAAsC,MAAM,MAAM;AAI3D,YAAM,QAAQ,KAAK,QAAQ,IAAI,UAAU;QACvC,aAAa;OACd;AAED,WAAK,IAAI,mBAAmB;AAE5B,uBAAiB,QAAQ,KAAK,WAAW,WAAW,KAAK,EAAE,QAAQ,KAAK,oBAAoB,OAAM,CAAE,GAAG;AACrG,aAAK,IAAI,MAAM,wBAAwB,KAAK,EAAE;AAE9C,YAAI,MAAM,IAAI,KAAK,EAAE,GAAG;AACtB,eAAK,IAAI,MAAM,uCAAuC,KAAK,EAAE;AAG7D;QACF;AAEA,YAAI,KAAK,WAAW,kBAAkB,eAAe,KAAK,EAAE,GAAG,SAAS,GAAG;AACzE,eAAK,IAAI,MAAM,wCAAwC,KAAK,EAAE;AAG9D;QACF;AAEA,YAAI,CAAE,MAAM,KAAK,WAAW,kBAAkB,WAAW,KAAK,UAAU,GAAI;AAC1E,eAAK,IAAI,MAAM,mCAAmC,KAAK,IAAI,KAAK,WAAW,IAAI,QAAM,GAAG,SAAQ,CAAE,CAAC;AAGnG;QACF;AAEA,YAAI,MAAM,SAAS,IAAI;AACrB,eAAK,IAAI,MAAM,kCAAkC,KAAK,EAAE;AAGxD,gBAAM,MAAM,eAAe,IAAI;YAC7B,QAAQ,KAAK,oBAAoB;WAClC;QACH;AAEA,aAAK,IAAI,+DAA+D,KAAK,IAAI,MAAM,MAAM,MAAM,OAAO;AAI1G,cAAM,IAAI,KAAK,UAAU;UACvB,QAAQ,KAAK;UACb,QAAQ,KAAK,oBAAoB;SAClC,EACE,MAAM,SAAM;AACX,eAAK,IAAI,MAAM,8CAA8C,KAAK,IAAI,GAAG;QAC3E,CAAC;MACL;AAEA,WAAK,IAAI,kBAAkB;AAE3B,YAAM,MAAM,OAAM;IACpB,CAAC,EACA,MAAM,SAAM;AACX,UAAI,CAAC,KAAK,oBAAoB,OAAO,SAAS;AAC5C,aAAK,IAAI,MAAM,6CAA6C,GAAG;MACjE;IACF,CAAC;EACL;EAEA,gBAAa;AACX,SAAK,IAAI,gBAAgB;AACzB,SAAK,UAAU;AACf,SAAK,qBAAqB,MAAK;AAC/B,SAAK,OAAO,MAAK;AAGjB,SAAK,WAAW,OAAO,oBAAoB,kBAAkB,KAAK,MAAM;EAC1E;EAEA,OAAQ,KAA0B;AAChC,SAAK,IAAI,MAAM,yCAAyC,IAAI,OAAO,EAAE;AAErE,SAAK,cAAc,GAAG,EACnB,MAAM,SAAM;AACX,WAAK,IAAI,MAAM,yCAAyC,IAAI,OAAO,IAAI,GAAG;IAC5E,CAAC;EACL;EAEA,MAAM,cAAe,KAA0B;AAC7C,QAAI,KAAK,SAAS,MAAM;AACtB;IACF;AAEA,UAAMA,UAAS,IAAI,OAAO;AAC1B,UAAM,aAAa,IAAI,OAAO;AAE9B,QAAI,KAAK,MAAM,IAAIA,OAAM,GAAG;AAC1B,WAAK,IAAI,MAAM,uCAAuCA,OAAM;AAG5D;IACF;AAEA,QAAI,KAAK,WAAW,kBAAkB,eAAeA,OAAM,GAAG,SAAS,GAAG;AACxE,WAAK,IAAI,MAAM,wCAAwCA,OAAM;AAG7D;IACF;AAEA,QAAI,CAAE,MAAM,KAAK,WAAW,kBAAkB,WAAW,UAAU,GAAI;AACrE,WAAK,IAAI,MAAM,mCAAmCA,OAAM;AAGxD;IACF;AAEA,SAAK,OAAO,IAAI,KAAK,UAAU;MAC7B,QAAQ,IAAI,OAAO;MACnB,QAAQ,KAAK,oBAAoB;KAClC,EACE,MAAM,SAAM;AACX,WAAK,IAAI,MAAM,kDAAkD,IAAI,OAAO,IAAI,GAAG;IACrF,CAAC;EACL;EAEA,MAAM,SAAU,EAAE,QAAAA,SAAQ,OAAM,GAA4C;AAC1E,UAAM,iBAAiB,UAAU,CAAC,YAAY,QAAQ,GAAK,GAAG,MAAM,CAAC;AACrE,oBAAgB,UAAU,cAAc;AAExC,QAAI;AACF,YAAM,KAAK,WAAW,kBAAkB,eAAeA,SAAQ;QAC7D,QAAQ;OACT;IACH;AACE,qBAAe,MAAK;IACtB;EACF;;AAOF,SAAS,YAAa,MAAU;AAC9B,QAAM,WAAW,KAAK,SAAS,IAAI,mBAAmB;AAEtD,MAAI,YAAY,MAAM;AACpB,WAAO;EACT;AAEA,SAAO,IAAI,KAAK,SAAmB,QAAQ,CAAC,EAAE,QAAO;AACvD;;;ACjRA,IAAM,gCAAN,cAA4C,kBAAiC;EAC1D;EACA;EACA;EACT;EACS;EACA;EACT;EACA;EAER,YAAa,YAAqD,OAA0C,CAAA,GAAE;AAC5G,UAAK;AAEL,SAAK,MAAM,WAAW,OAAO,aAAa,yCAAyC;AACnF,SAAK,oBAAoB,WAAW;AACpC,SAAK,iBAAiB,WAAW;AACjC,SAAK,mBAAmB,WAAW;AACnC,SAAK,iBAAiB,CAAA;AACtB,SAAK,gBAAgB,KAAK,iBAAiB;AAG3C,SAAK,iBAAiB,iBAAiB,iBAAiB,KAAK,kBAAkB;AAC/E,SAAK,iBAAiB,iBAAiB,6BAA6B,KAAK,eAAe;EAC1F;EAEA,qBAAqB,CAAC,QAA4C;AAChE,SAAK,IAAI,iCAAiC,IAAI,OAAO,OAAO,KAAK,OAAO,KAAK,OAAO,OAAO,IAAI,OAAO,KAAK,CAAC;AAE5G,QAAI,KAAK,OAAO,OAAO,IAAI,OAAO,KAAK,MAAM,MAAM;AACjD;IACF;AAEA,SAAK,IAAI,yBAAyB,IAAI,OAAO,KAAK;AAElD,SAAK,eAAe,QAAQ,QAAK;AAE/B,WAAK,eAAe,mBAAmB,EAAE;IAC3C,CAAC;AAED,SAAK,iBAAiB,CAAA;AAGtB,SAAK,kBAAkB,WAAW;EACpC;EAEA,kBAAkB,CAAC,QAA4C;AAC7D,UAAM,EACJ,QAAO,IACL,IAAI;AAER,QAAI,QAAQ,SAAS,cAAc;AACjC;IACF;AAEA,QAAI,QAAQ,OAAO,KAAK,eAAe;AACrC;IACF;AAEA,SAAK,WAAW,IAAI,MAAM;EAC5B;EAEA,MAAM,OAAQ,MAAe;AAC3B,QAAI,cAAc,WAAW,IAAI,GAAG;AAClC,WAAK,IAAI,qCAAqC;AAG9C,WAAK,gBAAgB,KAAK,iBAAiB,aAAY;IACzD,WAAW,cAAc,WAAW,IAAI,GAAG;AACzC,WAAK,IAAI,sCAAsC,IAAI;AAEnD,YAAM,SAAS,YAAY,QAAQ,KAAK,aAAa;AACrD,sBAAgB,UAAU,MAAM;AAIhC,YAAM,YAAY,KAAK,YAAY,cAAc;AACjD,YAAM,YAAY,MAAM,KAAK,kBAAkB,eAAe,WAAW;QACvE;OACD;AAED,UAAI,CAAC,KAAK,iBAAiB,eAAe,UAAU,UAAU,GAAG;AAC/D,aAAK,IAAI,iCAAiC,UAAU,UAAU;AAC9D,cAAM,cAAc,MAAM,KAAK,iBAAiB,SAAS,UAAU,YAAY,YAAY;AAC3F,aAAK,WAAW,WAAW;MAC7B;IACF,OAAO;AACL,YAAM,IAAI,YAAY,4CAA4C,IAAI,GAAG;IAC3E;EACF;EAEA,WAAQ;AACN,WAAO,CAAC,GAAG,KAAK,eAAe,OAAM,CAAE,EAAE,KAAI;EAC/C;EAEA,sBAAmB;EAEnB;EAEA,MAAM,QAAK;AACT,SAAK,iBAAiB,mBAAkB;AACxC,SAAK,iBAAiB,CAAA;AAGtB,SAAK,iBAAiB,oBAAoB,iBAAiB,KAAK,kBAAkB;AAGlF,mBAAe,MAAK;AAClB,WAAK,kBAAkB,OAAO;IAChC,CAAC;EACH;EAEQ,WAAY,aAA6B;AAC/C,SAAK,IAAI,uBAAuB,YAAY,KAAK;AAEjD,SAAK,QAAQ,YAAY;AAGzB,SAAK,iBAAiB,YAAY,QAAQ,YAAY,MACnD,IAAI,SAAO,UAAU,GAAG,EAAE,YAAY,cAAc,CAAC;AAExD,SAAK,eAAe,QAAQ,QAAK;AAE/B,WAAK,eAAe,oBAAoB,IAAI;QAC1C,MAAM;OACP;IACH,CAAC;AAGD,mBAAe,MAAK;AAClB,WAAK,kBAAkB,WAAW;IACpC,CAAC;EACH;;AAGI,SAAU,eAAgBC,UAAgD;AAC9E,SAAO,IAAI,8BAA8BA,QAAO;AAClD;;;AC9JO,IAAM,cACX;;;ACoBK,IAAIC,UAAS,CAAC,OAAO,OAAO;AACjC,MAAI,KAAK;AACT,MAAI,QAAQ,OAAO,gBAAgB,IAAI,WAAY,QAAQ,CAAE,CAAC;AAC9D,SAAO,QAAQ;AACb,UAAM,YAAkB,MAAM,IAAI,IAAI,EAAE;AAAA,EAC1C;AACA,SAAO;AACT;;;ACRA,IAAM,iBAAkB,KAAK,MAAQ;AAGrC,IAAM,kBAAmB,KAAK,MAAQ;AAGtC,IAAM,sBAAsB,KAAK;AAkF3B,IAAOC,oBAAP,cAAgC,kBAAyC;EAC5D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACT;EACS;EACT;EAER,YAAa,YAAwC,MAA2B;AAC9E,UAAK;AAEL,SAAK,MAAM,WAAW,OAAO,aAAa,kDAAkD;AAC5F,SAAK,SAAS,WAAW;AACzB,SAAK,oBAAoB,WAAW;AACpC,SAAK,YAAY,WAAW;AAC5B,SAAK,SAAS,WAAW;AACzB,SAAK,eAAe,IAAI,QAAO;AAC/B,SAAK,sBAAsB,CAAA;AAC3B,SAAK,4BAA4B,MAAM,6BAA6B;AACpE,SAAK,+BAA+B,MAAM,gCAAgC;AAC1E,SAAK,UAAU;AACf,SAAK,cAAc,2BAA2B,GAAG;AAGjD,SAAK,eAAe,IAAI,UAAU;MAChC,aAAa,MAAM,0BAA0B;MAC7C,YAAY;MACZ,SAAS,WAAW;KACrB;AAKD,SAAK,OAAO,iBAAiB,oBAAoB,CAAC,QAAO;AACvD,YAAM,cAAc,CAAC,GAAG,KAAK,aAAa,OAAM,CAAE,EAC/C,KAAK,CAAAC,iBAAeA,aAAY,eAAe,IAAI,OAAO,EAAE;AAE/D,UAAI,eAAe,MAAM;AACvB;MACF;AAEA,WAAK,mBAAmB,IAAI,OAAO,UAAU,EAC1C,MAAM,SAAM;AACX,aAAK,IAAI,kCAAkC,IAAI,QAAQ,GAAG;MAC5D,CAAC;IACL,CAAC;EACH;EAEA,YAAS;AACP,WAAO,KAAK;EACd;EAEA,QAAK;AACH,SAAK,UAAU;EACjB;EAEA,aAAU;AAER,SAAK,QAAQ,QAAO,EACjB,KAAK,YAAW;AACf,YAAM,aAAqB,MAAM,KAAK,UAAU,IAAI;QAClD,SAAS,CAAC,CAAC,SAAQ;AACjB,iBAAO,KAAK,KAAK,IAAI,cAAc;QACrC,CAAC;OACF;AAED,WAAK,IAAI,mCAAmC,WAAW,MAAM;AAG7D,YAAM,QAAQ,IACZ,WAAW,IAAI,OAAM,SAAO;AAC1B,cAAM,KAAK,UAAU,MAAM,KAAK,IAAI;UAClC,MAAM;YACJ,CAAC,cAAc,GAAG;;SAErB;MACH,CAAC,CAAC;AAGJ,WAAK,IAAI,2BAA2B,WAAW,MAAM;AACrD,YAAM,QAAQ,IACZ,WAAW,IAAI,OAAM,SAAQ,KAAK,SAAS,KAAK,IAAI,YAAY,CAAC,CAAC;AAGpE,WAAK,uBAAsB;IAC7B,CAAC,EACA,MAAM,SAAM;AACX,WAAK,IAAI,MAAM,GAAG;IACpB,CAAC;EACL;EAEA,OAAI;AACF,SAAK,aAAa,MAAK;AACvB,SAAK,aAAa,QAAQ,CAAC,EAAE,QAAO,MAAM;AACxC,mBAAa,OAAO;IACtB,CAAC;AACD,SAAK,aAAa,MAAK;AACvB,SAAK,UAAU;EACjB;EAEA,eAAY;AACV,UAAM,KAAKC,QAAM;AAEjB,SAAK,oBAAoB,KAAK,EAAE;AAEhC,SAAK,uBAAsB;AAE3B,WAAO;EACT;;;;;;;EAQA,MAAM,SAAUC,SAAgB,MAAe;AAC7C,QAAI,KAAK,OAAO,OAAOA,OAAM,GAAG;AAC9B,WAAK,IAAI,MAAM,iCAAiC;AAChD,YAAM,IAAI,YAAY,0BAA0B;IAClD;AAEA,QAAI,KAAK,aAAa,OAAO,KAAK,2BAA2B;AAC3D,YAAM,IAAI,oBAAoB,+BAA+B;IAC/D;AAEA,UAAM,cAAc,KAAK,aAAa,KAAKA,OAAM;AAEjD,QAAI,eAAe,MAAM;AACvB,WAAK,IAAI,MAAM,+DAA+DA,OAAM;AACpF,aAAO,YAAY,KAAI;IACzB;AAEA,QAAI,KAAK,YAAY,IAAIA,QAAO,YAAW,EAAG,KAAK,GAAG;AACpD,YAAM,IAAI,YAAY,kCAAkC;IAC1D;AAEA,SAAK,IAAI,MAAM,qCAAqCA,OAAM;AAE1D,WAAO,KAAK,aAAa,IAAI,YAAW;AACtC,YAAMC,SAAQ,KAAK,IAAG;AAEtB,UAAI;AAEF,cAAM,sBAAsB,KAAK,aAAa,IAAID,OAAM;AAExD,YAAI,uBAAuB,MAAM;AAC/B,gBAAM,cAAc,KAAK,kBAAkB,eAAeA,OAAM;AAChE,cAAI,YAAY;AAEhB,cAAI,YAAY,WAAW,GAAG;AAC5B,iBAAK,IAAI,yEAAyEA,OAAM;UAC1F;AAEA,cAAI,YAAY,IAAI,UAAQ,KAAK,EAAE,EAAE,SAAS,oBAAoB,UAAU,GAAG;AAC7E,iBAAK,IAAI,oFAAoFA,OAAM;AACnG,wBAAY;UACd;AAEA,cAAI,aAAa,0BAA0B,oBAAoB,YAAY,MAAM,IAAI,gBAAgB;AACnG,iBAAK,IAAI,iGAAiGA,OAAM;AAChH,mBAAO;cACL,OAAOA;cACP,SAAS;;UAEb;AAEA,gBAAM,KAAK,mBAAmBA,OAAM;QACtC;AAEA,YAAI,SAAS,gBAAgB,KAAK,oBAAoB,WAAW,GAAG;AAClE,gBAAM,IAAI,qBAAqB,mFAAmF;QACpH;AAEA,cAAM,SAAS,YAAY,QAAQ,KAAK,4BAA4B;AACpE,wBAAgB,UAAU,MAAM;AAEhC,cAAM,aAAa,MAAM,KAAK,kBAAkB,eAAeA,SAAQ;UACrE;SACD;AAED,YAAIE,SAAQ,QAAQ,WAAW,UAAU,GAAG;AAC1C,gBAAM,IAAI,iBAAiB,kDAAkD;QAC/E;AAEA,cAAM,cAAc,MAAM,KAAK,mBAAmB,YAAY;UAC5D;SACD;AAED,cAAM,aAAa,0BAA0B,YAAY,MAAM;AAE/D,aAAK,IAAI,2DAA2DF,SAAQ,IAAI,KAAK,KAAK,IAAG,IAAK,UAAU,EAAE,SAAQ,CAAE;AAIxH,cAAM,kBAAkB,KAAK,IAAI,KAAK,IAAI,aAAa,iBAAiB,mBAAmB,GAAG,KAAK,IAAI,GAAG,EAAE,IAAI,CAAC;AAEjH,cAAM,UAAU,WAAW,MAAK;AAC9B,eAAK,IAAI,mCAAmCA,OAAM;AAElD,eAAK,SAASA,SAAQ,IAAI,EACvB,MAAM,OAAM,QAAM;AACjB,iBAAK,IAAI,MAAM,kDAAkDA,SAAQ,GAAG;AAC5E,kBAAM,KAAK,mBAAmBA,OAAM;UACtC,CAAC,EACA,MAAM,SAAM;AACX,iBAAK,IAAI,MAAM,yDAAyDA,SAAQ,GAAG;UACrF,CAAC;QACL,GAAG,eAAe;AAElB,YAAI;AAGJ,YAAI,SAAS,cAAc;AACzB,gBAAM,KAAK,KAAK,oBAAoB,IAAG;AAEvC,cAAI,MAAM,MAAM;AACd,kBAAM,IAAI,qBAAqB,uEAAuE;UACxG;AAEA,gBAAM;YACJ;YACA;YACA;YACA,YAAY,WAAW;YACvB;;QAEJ,OAAO;AACL,gBAAM;YACJ;YACA;YACA;YACA,YAAY,WAAW;;QAE3B;AAGA,aAAK,aAAa,IAAIA,SAAQ,GAAG;AAGjC,cAAM,KAAK,UAAU,MAAMA,SAAQ;UACjC,MAAM;YACJ,CAAC,cAAc,GAAG;cAChB,OAAO;cACP,KAAK;;;SAGV;AAGD,aAAK,uBAAsB;AAE3B,cAAM,SAA2B;UAC/B,OAAOA;UACP,SAAS;;AAGX,aAAK,kBAAkB,6BAA6B;UAClD,QAAQ;SACT;AAED,eAAO;MACT,SAAS,KAAU;AACjB,YAAI,EAAE,SAAS,gBAAgB,IAAI,SAAS,yBAAyB;AACnE,eAAK,IAAI,MAAM,gDAAgDA,SAAQ,KAAK,IAAG,IAAKC,QAAO,GAAG;QAChG;AAIA,YAAI,IAAI,SAAS,eAAe,IAAI,SAAS,4BAA4B;AACvE,eAAK,YAAY,IAAID,QAAO,YAAW,EAAG,KAAK;QACjD;AAGA,aAAK,mBAAmBA,OAAM,EAC3B,MAAM,CAAAG,SAAM;AACX,eAAK,IAAI,MAAM,uEAAuEH,SAAQG,IAAG;QACnG,CAAC;AAEH,cAAM;MACR;IACF,GAAG;MACD,QAAAH;KACD;EACH;EAEA,eAAgBA,SAAc;AAC5B,WAAO,KAAK,aAAa,IAAIA,OAAM;EACrC;EAEA,eAAgBA,SAAc;AAC5B,WAAO,KAAK,aAAa,IAAIA,OAAM,GAAG;EACxC;EAEA,iBAAkB,MAAgB;AAChC,QAAI,QAAQ,MAAM;AAChB,aAAO,KAAK,aAAa;IAC3B;AAEA,WAAO,CAAC,GAAG,KAAK,aAAa,OAAM,CAAE,EAAE,OAAO,CAAC,KAAK,SAAQ;AAC1D,UAAI,KAAK,SAAS,MAAM;AACtB;MACF;AAEA,aAAO;IACT,GAAG,CAAC;EACN;EAEA,qBAAkB;AAChB,KAAC,GAAG,KAAK,aAAa,OAAM,CAAE,EAAE,QAAQ,iBAAc;AACpD,mBAAa,YAAY,OAAO;IAClC,CAAC;AAED,SAAK,aAAa,MAAK;EACzB;EAEA,MAAM,mBAAoB,YAAwBI,UAAqB;AACrE,IAAAA,SAAQ,QAAQ,eAAc;AAE9B,SAAK,IAAI,kCAAkC,WAAW,UAAU;AAChE,UAAM,SAAS,MAAM,WAAW,UAAU,oBAAoBA,QAAO;AACrE,UAAM,QAAQ,SAAS,MAAM;AAC7B,UAAM,SAAS,MAAM,GAAG,UAAU;AAElC,SAAK,IAAI,MAAM,sBAAsB,WAAW,UAAU;AAC1D,UAAM,OAAO,MAAM,EAAE,MAAM,WAAW,KAAK,QAAO,GAAIA,QAAO;AAE7D,QAAI;AAEJ,QAAI;AACF,WAAK,IAAI,MAAM,4BAA4B,WAAW,UAAU;AAChE,iBAAW,MAAM,OAAO,KAAKA,QAAO;IACtC,SAAS,KAAU;AACjB,aAAO,MAAM,GAAG;AAChB,YAAM;IACR;AACE,UAAI,OAAO,WAAW,UAAU;AAC9B,cAAM,OAAO,MAAMA,QAAO;MAC5B;IACF;AAEA,SAAK,IAAI,MAAM,oBAAoB,QAAQ;AAE3C,QAAI,SAAS,WAAW,OAAO,MAAM,SAAS,eAAe,MAAM;AAIjE,YAAM,YAAY,oBAAI,IAAG;AACzB,gBAAU,IAAI,WAAW,WAAW,SAAQ,CAAE;AAE9C,iBAAW,OAAO,SAAS,YAAY,OAAO;AAC5C,YAAI,KAAK,UAAU,GAAG;AAEtB,YAAI,GAAG,UAAS,KAAM,MAAM;AAC1B,eAAK,GAAG,YAAY,QAAQ,WAAW,UAAU,EAAE;QACrD;AAGA,aAAK,UAAU,GAAG,SAAQ,EAAG,QAC3B,QAAQ,WAAW,UAAU,QAAQ,WAAW,UAAU,IAC1D,QAAQ,WAAW,UAAU,EAAE,CAChC;AAED,kBAAU,IAAI,GAAG,SAAQ,CAAE;MAC7B;AAEA,eAAS,YAAY,QAAQ,CAAC,GAAG,SAAS,EAAE,IAAI,SAAO,UAAU,GAAG,EAAE,KAAK;AAE3E,aAAO,SAAS;IAClB;AAEA,UAAM,SAAS,kCAAkC,SAAS,UAAU,WAAW;AAC/E,SAAK,IAAI,MAAM,MAAM;AAErB,UAAM,IAAI,MAAM,MAAM;EACxB;;;;EAKA,MAAM,mBAAoBJ,SAAc;AACtC,UAAM,cAAc,KAAK,aAAa,IAAIA,OAAM;AAEhD,QAAI,eAAe,MAAM;AACvB;IACF;AAEA,SAAK,IAAI,uDAAuDA,OAAM;AACtE,iBAAa,YAAY,OAAO;AAChC,SAAK,aAAa,OAAOA,OAAM;AAG/B,QAAI,YAAY,SAAS,cAAc;AACrC,WAAK,oBAAoB,KACvB,YAAY,EAAE;IAElB;AAGA,UAAM,KAAK,UAAU,MAAMA,SAAQ;MACjC,MAAM;QACJ,CAAC,cAAc,GAAG;;KAErB;AAED,SAAK,kBAAkB,iBAAiB;MACtC,QAAQ;QACN,OAAOA;QACP,SAAS;;KAEZ;AAGD,SAAK,uBAAsB;EAC7B;EAEA,yBAAsB;AACpB,QAAI,KAAK,oBAAoB,WAAW,GAAG;AACzC,WAAK,IAAI,MAAM,+BAA+B;AAC9C,WAAK,aAAa,MAAK;AACvB,WAAK,kBAAkB,2BAA2B;AAElD;IACF;AAEA,SAAK,cAAc,2BAA2B,GAAG;AACjD,SAAK,IAAI,sCAAsC,KAAK,aAAa,MAAM,KAAK,oBAAoB,MAAM;AACtG,SAAK,kBAAkB,yBAAyB;EAClD;;;;ACxgBF,IAAM,cAAc,CAAC,YAA0D;AAC7E,MAAI,QAAQ,QAAQ,MAAM;AACxB,WAAO;EACT;AAEA,MAAI;AACF,YAAQ,KAAK,MAAM,QAAQ,SAAS;EACtC,QAAQ;AACN,WAAO;EACT;AAEA,SAAO;AACT;AAEA,IAAM,WAAW;EACf,uBAAuBK;EACvB,wBAAwBA;EACxB,aAAa;;AAYT,IAAO,wBAAP,MAA4B;EACf;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACD;EACC;EACA;EACA;EACT;EACS;EACT;EAER,YAAa,YAA6C,OAAkC,CAAA,GAAE;AAC5F,SAAK,MAAM,WAAW,OAAO,aAAa,gCAAgC;AAC1E,SAAK,YAAY,WAAW;AAC5B,SAAK,YAAY,WAAW;AAC5B,SAAK,oBAAoB,WAAW;AACpC,SAAK,mBAAmB,WAAW;AACnC,SAAK,SAAS,WAAW;AACzB,SAAK,SAAS,WAAW;AACzB,SAAK,WAAW,WAAW;AAC3B,SAAK,iBAAiB,WAAW;AACjC,SAAK,kBAAkB,WAAW;AAClC,SAAK,wBAAwB,KAAK,yBAAyB,SAAS;AACpE,SAAK,yBAAyB,KAAK,0BAA0B,SAAS;AACtE,SAAK,qBAAqB,IAAI,gBAAe;AAE7C,SAAK,YAAY,IAAI,eAAe,YAAY;MAC9C,QAAQ,KAAK,mBAAmB,WAAW,+BAA+B,mCAAmC;KAC9G;AACD,SAAK,UAAU,iBAAiB,kBAAkB,CAAC,QAAO;AACxD,WAAK,iBAAiB,SAAS,IAAI,QAAQ,YAAY,EACpD,MAAM,SAAM;AACX,YAAI,IAAI,SAAS,0BAA0B,IAAI,SAAS,uBAAuB;AAC7E,eAAK,IAAI,MAAM,qCAAqC,IAAI,QAAQ,GAAG;QACrE;MACF,CAAC;IACL,CAAC;AACD,SAAK,mBAAmB,IAAIC,kBAAiB,YAAY,IAAI;AAC7D,SAAK,iBAAiB,iBAAiB,2BAA2B,MAAK;AACrE,WAAK,WAAW,eAAc;IAChC,CAAC;AACD,SAAK,iBAAiB,iBAAiB,6BAA6B,MAAK;AACvE,WAAK,WAAW,cAAa;IAC/B,CAAC;AAED,SAAK,UAAU;EACjB;EAES,CAAC,OAAO,WAAW,IAAI;EAEvB,CAAC,mBAAmB,IAAc;IACzC;IACA;;EAGF,KAAK,mBAAmB,IAAC;AAEvB,QAAI,KAAK,aAAa,MAAM;AAC1B,aAAO;QACL;;IAEJ;AAEA,WAAO,CAAA;EACT;EAES,CAAC,eAAe,IAAI;EAE7B,YAAS;AACP,WAAO,KAAK;EACd;EAEA,MAAM,QAAK;AACT,SAAK,qBAAqB,IAAI,gBAAe;AAC7C,oBAAgB,UAAU,KAAK,mBAAmB,MAAM;AAExD,UAAM,KAAK,UAAU,OAAO,qBAAqB,CAAC,SAAQ;AACxD,YAAM,SAAS,KAAK,SAAS,yBAAyB,KAAK,mBAAmB,MAAM;AAEpF,WAAK,KAAK,OAAO,MAAM,MAAM,EAC1B,MAAM,SAAM;AACX,aAAK,IAAI,MAAM,sCAAsC,GAAG;AACxD,aAAK,OAAO,MAAM,GAAG;MACvB,CAAC,EACA,QAAQ,MAAK;AACZ,eAAO,MAAK;MACd,CAAC;IACL,GAAG;MACD,mBAAmB,KAAK;MACxB,oBAAoB,KAAK;MACzB,wBAAwB;KACzB;AAED,UAAM,MAAM,KAAK,WAAW,KAAK,gBAAgB;AAEjD,SAAK,UAAU;EACjB;EAEA,MAAM,OAAI;AACR,SAAK,mBAAmB,MAAK;AAC7B,UAAM,KAAK,KAAK,WAAW,KAAK,gBAAgB;AAChD,UAAM,KAAK,UAAU,SAAS,mBAAmB;AAEjD,SAAK,UAAU;EACjB;;;;EAKA,MAAM,KAAM,IAAeC,UAAqD;AAC9E,QAAI,GAAG,WAAU,EAAG,OAAO,CAAAC,WAAQA,WAAS,kBAAkB,EAAE,WAAW,GAAG;AAC5E,YAAM,SAAS;AACf,WAAK,IAAI,MAAM,QAAQ,EAAE;AACzB,YAAM,IAAI,UAAU,MAAM;IAC5B;AAGA,UAAM,QAAQ,GAAG,SAAQ,EAAG,MAAM,cAAc;AAChD,UAAM,YAAY,UAAU,MAAM,CAAC,CAAC;AACpC,UAAM,kBAAkB,UAAU,MAAM,MAAM,SAAS,CAAC,CAAC;AACzD,UAAM,UAAU,UAAU,UAAS;AACnC,UAAM,gBAAgB,gBAAgB,UAAS;AAE/C,QAAI,WAAW,QAAQ,iBAAiB,MAAM;AAC5C,YAAM,SAAS,wBAAwB,GAAG,SAAQ,CAAE;AACpD,WAAK,IAAI,MAAM,IAAI,MAAM,EAAE;AAC3B,YAAM,IAAI,UAAU,IAAI,MAAM,EAAE;IAClC;AAEA,UAAM,YAAY,iBAAiB,OAAO;AAC1C,UAAM,kBAAkB,iBAAiB,aAAa;AAEtD,UAAM,mBAAmB,KAAK,kBAAkB,eAAe,SAAS;AACxE,QAAI,kBAAkB,iBAAiB,CAAC;AAExC,QAAI,mBAAmB,MAAM;AAC3B,YAAM,KAAK,UAAU,MAAM,WAAW;QACpC,YAAY,CAAC,SAAS;OACvB;AAED,MAAAD,SAAQ,aAAa,IAAI,oBAAoB,+BAA+B,CAAC;AAC7E,wBAAkB,MAAM,KAAK,kBAAkB,eAAe,WAAWA,QAAO;IAClF,OAAO;AACL,MAAAA,SAAQ,aAAa,IAAI,oBAAoB,gCAAgC,CAAC;IAChF;AAEA,QAAI;AAEJ,QAAI;AACF,MAAAA,SAAQ,aAAa,IAAI,oBAAoB,+BAA+B,CAAC;AAC7E,eAAS,MAAM,gBAAgB,UAAU,oBAAoBA,QAAO;AAEpE,YAAM,QAAQ,SAAS,MAAM;AAC7B,YAAM,SAAS,MAAM,GAAG,UAAU;AAElC,MAAAA,SAAQ,aAAa,IAAI,oBAAoB,qCAAqC,CAAC;AACnF,YAAM,OAAO,MAAM;QACjB,MAAM,WAAW,KAAK;QACtB,MAAM;UACJ,IAAI,gBAAgB,YAAW,EAAG;UAClC,OAAO,CAAC,UAAU,eAAe,EAAE,KAAK;;SAEzCA,QAAO;AAEV,MAAAA,SAAQ,aAAa,IAAI,oBAAoB,qCAAqC,CAAC;AACnF,YAAM,SAAS,MAAM,OAAO,KAAKA,QAAO;AAExC,UAAI,OAAO,WAAW,OAAO,IAAI;AAC/B,cAAM,IAAI,oBAAoB,2CAA2C,QAAQ,QAAQ,SAAQ,KAAM,WAAW,EAAE;MACtH;AAEA,YAAM,SAAS,IAAI,aAAa,OAAO,KAAK;AAE5C,YAAM,SAAS,qBAAqB;QAClC,QAAQ,MAAM,OAAM;QACpB,YAAY;QACZ,WAAW,UAAU,YAAY,oBAAoB,KAAK,OAAO,SAAQ,CAAE,EAAE;QAC7E,QAAQ,KAAK;QACb,YAAY,OAAO;QACnB,aAAa,OAAO;OACrB;AAED,WAAK,IAAI,sCAAsC,OAAO,UAAU;AAEhE,aAAO,MAAM,KAAK,SAAS,gBAAgB,QAAQ;QACjD,GAAGA;QACH,QAAQ,OAAO,UAAS;OACzB;IACH,SAAS,KAAU;AACjB,WAAK,IAAI,MAAM,4DAA4D,iBAAiB,WAAW,GAAG;AAC1G,cAAQ,MAAM,GAAG;AAEjB,YAAM;IACR;EACF;;;;EAKA,eAAgBA,UAA8B;AAC5C,WAAO,eAAe;MACpB,QAAQ,KAAK;MACb,mBAAmB,KAAK;MACxB,gBAAgB,KAAK;MACrB,kBAAkB,KAAK;MACvB,QAAQ,KAAK;KACd;EACH;;;;EAKA,aAAc,YAAuB;AACnC,iBAAa,MAAM,QAAQ,UAAU,IAAI,aAAa,CAAC,UAAU;AAEjE,WAAO,WAAW,OAAO,CAAC,OAAM;AAC9B,aAAO,cAAc,WAAW,EAAE,KAAK,cAAc,WAAW,EAAE;IACpE,CAAC;EACH;;;;EAKA,WAAY,YAAuB;AACjC,iBAAa,MAAM,QAAQ,UAAU,IAAI,aAAa,CAAC,UAAU;AAEjE,WAAO,WAAW,OAAO,CAAC,OAAM;AAC9B,aAAOE,SAAQ,WAAW,EAAE;IAC9B,CAAC;EACH;;;;EAKA,MAAM,OAAQ,EAAE,YAAY,OAAM,GAAwB,QAAmB;AAC3E,QAAI,CAAC,KAAK,iBAAiB,eAAe,WAAW,UAAU,GAAG;AAChE,UAAI;AACF,aAAK,IAAI,0FAA0F;AACnG,cAAM,KAAK,iBAAiB,OAAO,CAAC,WAAW,WAAW,YAAY,cAAc,CAAC,CAAC;MACxF,SAAS,KAAU;AAEjB,aAAK,IAAI,MAAM,yFAAyF,GAAG;MAC7G;IACF;AAEA,UAAM,QAAQ,SAAS,MAAM,EAAE,GAAG,WAAW;AAC7C,UAAM,UAAU,MAAM,MAAM,KAAK;MAC/B;KACD;AAED,SAAK,IAAI,yDAAyD,WAAW,YAAY,QAAQ,IAAI;AAErG,QAAI,SAAS,SAAS,QAAW;AAC/B,WAAK,IAAI,MAAM,kEAAkE,WAAW,UAAU;AACtG,YAAM,MAAM,MAAM,EAAE,MAAM,YAAY,KAAK,QAAQ,QAAQ,OAAO,kBAAiB,GAAI;QACrF;OACD;AACD,YAAM,OAAO,MAAK;AAClB;IACF;AAGA,QAAI,QAAQ,SAAS,YAAY,KAAK,SAAS;AAC7C,WAAK,IAAI,MAAM,4CAA4C,WAAW,UAAU;AAChF,YAAM,MAAM,MAAM,EAAE,MAAM,YAAY,KAAK,QAAQ,QAAQ,OAAO,mBAAkB,GAAI;QACtF;OACD;AACD,YAAM,OAAO,MAAK;AAClB;IACF;AAEA,QAAI,CAAC,YAAY,OAAO,GAAG;AACzB,WAAK,IAAI,MAAM,4CAA4C,WAAW,UAAU;AAChF,YAAM,MAAM,MAAM,EAAE,MAAM,YAAY,KAAK,QAAQ,QAAQ,OAAO,kBAAiB,GAAI;QACrF;OACD;AACD,YAAM,OAAO,MAAM;QACjB;OACD;AACD;IACF;AAEA,UAAM,eAAe,oBAA2BC,SAAO,QAAQ,KAAK,EAAE,CAAC;AAEvE,QAAK,MAAM,KAAK,gBAAgB,+BAA+B,WAAW,YAAY,YAAY,MAAO,MAAM;AAC7G,WAAK,IAAI,MAAM,8DAA8D,WAAW,UAAU;AAClG,YAAM,MAAM,MAAM,EAAE,MAAM,YAAY,KAAK,QAAQ,QAAQ,OAAO,kBAAiB,GAAI;QACrF;OACD;AACD,YAAM,OAAO,MAAM;QACjB;OACD;AACD;IACF;AAEA,SAAK,IAAI,MAAM,kCAAkC,WAAW,UAAU;AACtE,UAAM,MAAM,MAAM,EAAE,MAAM,YAAY,KAAK,QAAQ,QAAQ,OAAO,GAAE,GAAI;MACtE;KACD;AAED,UAAM,SAAS,IAAI,aAAa,QAAQ,KAAK;AAC7C,UAAM,aAAa,WAAW,WAAW,YAAY,oBAAoB,aAAa,SAAQ,CAAE,EAAE;AAClG,UAAM,YAAY,KAAK,eAAe,aAAY,EAAG,CAAC;AACtD,UAAM,SAAS,qBAAqB;MAClC,QAAQ,MAAM,OAAM,EAAG,OAAM;MAC7B;MACA;MACA,QAAQ,KAAK;MACb,YAAY,OAAO;MACnB,aAAa,OAAO;KACrB;AAED,SAAK,IAAI,qCAAqC,OAAO,UAAU;AAC/D,UAAM,KAAK,SAAS,eAAe,QAAQ;MACzC,QAAQ,OAAO,UAAS;MACxB;KACD;AACD,SAAK,IAAI,6BAA6B,WAAW,OAAO,UAAU;EACpE;;;;AC5TI,SAAU,sBAAuB,OAAkC,CAAA,GAAE;AACzE,SAAO,CAAC,eAAc;AACpB,WAAO,IAAI,sBAAsB,YAAY,IAAI;EACnD;AACF;;;AC1DO,IAAMC,SAAO,CAACA,WAAyB;AAC5C,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,YAAM,YAAY,KAAK,CAAC;AAExB,UAAI,aAAa,MAAM;AACrB,eAAO;MACT;AAEA,UAAI,UAAU,SAASA,QAAM;AAC3B,eAAO;MACT;AAEA,UAAI,UAAU,SAAS,MAAM;AAC3B,eAAO;MACT;AAEA,aAAO,KAAK,MAAM,CAAC;IACrB;;AAEJ;AAMO,IAAMC,SAAQ,CAACD,QAAcC,WAA2B;AAC7D,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,YAAM,YAAY,KAAK,CAAC;AAExB,UAAI,WAAW,SAASD,QAAM;AAC5B,eAAO;MACT;AAEA,UAAI,UAAU,SAAS,MAAM;AAC3B,eAAO;MACT;AAEA,UAAIC,UAAS,QAAQ,UAAU,UAAUA,QAAO;AAC9C,eAAO;MACT;AAEA,aAAO,KAAK,MAAM,CAAC;IACrB;;AAEJ;AAKO,IAAMC,YAAW,CAAC,YAA6B;AACpD,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,YAAM,SAAS,QAAQ,MAAM,IAAI;AAEjC,UAAI,WAAW,OAAO;AACpB,eAAO;MACT;AAEA,aAAO;IACT;;AAEJ;AAKO,IAAMC,OAAK,IAAI,aAAgC;AACpD,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,UAAI;AAEJ,iBAAW,WAAW,UAAU;AAC9B,cAAM,SAAS,QAAQ,MAAM,IAAI;AAGjC,YAAI,WAAW,OAAO;AACpB;QACF;AAGA,YAAI,WAAW,QAAQ,OAAO,SAAS,QAAQ,QAAQ;AACrD,oBAAU;QACZ;MACF;AAEA,UAAI,WAAW,MAAM;AACnB,eAAO;MACT;AAEA,aAAO;IACT;;AAEJ;AAKO,IAAMC,OAAM,IAAI,aAAgC;AACrD,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,iBAAW,WAAW,UAAU;AAE9B,cAAM,SAAS,QAAQ,MAAM,IAAI;AAGjC,YAAI,WAAW,OAAO;AACpB,iBAAO;QACT;AAEA,eAAO;MACT;AAEA,aAAO;IACT;;AAEJ;AAKM,SAAUC,QAAQ,UAAmB;AACzC,WAAS,MAAO,IAAc;AAC5B,QAAI,MAAM,MAAM;AACd,aAAO;IACT;AAEA,QAAI,QAAQ,GAAG,cAAa;AAE5B,eAAW,WAAW,UAAU;AAC9B,YAAM,SAAS,QAAQ,MAAM,KAAK;AAElC,UAAI,WAAW,OAAO;AACpB,eAAO;MACT;AAEA,cAAQ;IACV;AAEA,WAAO;EACT;AAEA,WAAS,QAAS,IAAc;AAC9B,UAAM,SAAS,MAAM,EAAE;AAEvB,WAAO,WAAW;EACpB;AAEA,WAAS,WAAY,IAAc;AACjC,UAAM,SAAS,MAAM,EAAE;AAEvB,QAAI,WAAW,OAAO;AACpB,aAAO;IACT;AAEA,WAAO,OAAO,WAAW;EAC3B;AAEA,SAAO;IACL;IACA;IACA;;AAEJ;;;ACvFA,IAAMC,YAAWC,OAAM,QAAQ;AAExB,IAAMC,WAAUC,KAAIH,SAAQ;AAKnC,IAAMI,SAAQH,OAAM,SAAS;AAC7B,IAAMI,SAAQJ,OAAM,SAAS;AAC7B,IAAMK,YAAWL,OAAM,YAAY;AACnC,IAAMM,QAAON,OAAM,QAAQ;AAgBpB,IAAMO,QAAOL,KAAIC,QAAOK,UAASR,OAAM,QAAQ,CAAC,CAAC;AAgBjD,IAAMS,QAAOP,KAAIE,QAAOI,UAASR,OAAM,QAAQ,CAAC,CAAC;AAiBjD,IAAMU,WAAUR,KAAIG,WAAUG,UAASR,OAAM,QAAQ,CAAC,CAAC;AAiBvD,IAAMW,OAAMT,KAAIU,KAAGN,OAAMD,WAAUF,QAAOC,MAAK,GAAGI,UAASR,OAAM,QAAQ,CAAC,CAAC;AAElF,IAAMa,QAAOC,KACXd,OAAM,QAAQ,GACdQ,UAASR,OAAM,WAAW,CAAC,CAAC;AAE9B,IAAMe,QAAOD,KACXN,UAASR,OAAM,YAAY,CAAC,GAC5BA,OAAM,QAAQ,GACdQ,UAASR,OAAM,WAAW,CAAC,CAAC;AAE9B,IAAMgB,OAAMJ,KAAGC,OAAME,KAAI;AAEzB,IAAME,iBAAgBL,KAAGI,MAAKV,OAAMH,QAAOC,QAAOC,SAAQ;AAiBnD,IAAMa,gBAAehB,KAAIU,KAAGI,MAAKF,KAAIF,KAAGN,OAAMD,WAAUF,QAAOC,MAAK,GAAGI,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC,CAAC;AAkBlG,IAAMmB,OAAMjB,KAAIW,KAAI;AAkBpB,IAAMO,OAAMlB,KAAIa,KAAI;AAepB,IAAMM,MAAKnB,KAAIc,IAAG;AAEzB,IAAMM,QAAOR,KAAIG,gBAAejB,OAAM,QAAQ,CAAC;AAC/C,IAAMuB,QAAOT,KAAIG,gBAAejB,OAAM,QAAQ,CAAC;AAcxC,IAAMwB,OAAMtB,KAAIY,KAAIQ,OAAMd,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAcpD,IAAMyB,OAAMvB,KAAIqB,KAAI;AAE3B,IAAMG,SAAQZ,KAAIS,OAAMI,OAAK,SAAS,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC;AAClE,IAAM4B,YAAWd,KAAIS,OAAMI,OAAK,YAAY,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC;AAExE,IAAM6B,iBAAgBjB,KAAGc,QAAOE,SAAQ;AAcjC,IAAME,QAAO5B,KAAIwB,MAAK;AActB,IAAMK,WAAU7B,KAAI0B,SAAQ;AAEnC,IAAMI,QAAOpB,KACXK,gBACAK,OACAC,OACAG,QACAE,SAAQ;AAGV,IAAMK,eAAcrB,KAClBE,KAAIkB,OAAML,OAAK,OAAO,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAe9C,IAAMkC,cAAahC,KAAI+B,YAAW;AAEzC,IAAME,qBAAoBvB,KACxBE,KAAIkB,OAAML,OAAK,QAAQ,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,GACnDc,KAAIkB,OAAML,OAAK,QAAQ,GAAGnB,UAASR,OAAM,QAAQ,CAAC,GAAG2B,OAAK,OAAO,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAezF,IAAMoC,oBAAmBlC,KAAIiC,kBAAiB;AAErD,IAAME,iBAAgBvB,KAAIS,OAAMI,OAAK,kBAAkB,GAAGnB,UAASR,OAAM,aAAa,CAAC,GAAGQ,UAASR,OAAM,aAAa,CAAC,GAAGQ,UAASR,OAAM,QAAQ,CAAC,CAAC;AAc5I,IAAMsC,gBAAepC,KAAImC,cAAa;AAE7C,IAAME,iBAAgBzB,KAAIc,WAAUD,OAAK,iBAAiB,GAAGnB,UAASR,OAAM,aAAa,CAAC,GAAGQ,UAASR,OAAM,aAAa,CAAC,GAAGQ,UAASR,OAAM,QAAQ,CAAC,CAAC;AAc/I,IAAMwC,gBAAetC,KAAIqC,cAAa;AAE7C,IAAME,QAAO7B,KACXqB,cACAE,oBACArB,KAAIQ,OAAMd,UAASR,OAAM,QAAQ,CAAC,CAAC,GACnCc,KAAIe,gBAAerB,UAASR,OAAM,QAAQ,CAAC,CAAC,GAC5Cc,KAAIG,gBAAeT,UAASR,OAAM,QAAQ,CAAC,CAAC,GAC5CqC,gBACAE,gBACAvC,OAAM,QAAQ,CAAC;AAeV,IAAM0C,OAAMxC,KAAIuC,KAAI;AAE3B,IAAME,YAAW7B,KAAI2B,OAAMd,OAAK,gBAAgB,GAAG3B,OAAM,QAAQ,CAAC;AAc3D,IAAM4C,WAAU1C,KAAIyC,SAAQ;AAEnC,IAAME,WAAUjC,KACdE,KAAI2B,OAAMd,OAAK,gBAAgB,GAAGA,OAAK,WAAW,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,GAC9Ec,KAAI2B,OAAMd,OAAK,WAAW,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,GACtDc,KAAIa,OAAK,WAAW,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAe5C,IAAM8C,UAAS5C,KAAI2C,QAAO;AAEjC,IAAME,SAAQnC,KACZE,KAAIG,gBAAejB,OAAM,QAAQ,GAAG2B,OAAK,SAAS,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,GAC9Ec,KAAIG,gBAAeU,OAAK,SAAS,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAezD,IAAMgD,QAAO9C,KAAI6C,MAAK;AAE7B,IAAME,UAASnC,KAAIG,gBAAeL,KAChCE,KAAId,OAAM,UAAU,KAAK,GAAG2B,OAAK,SAAS,CAAC,GAC3Cb,KAAId,OAAM,QAAQ,GAAG2B,OAAK,UAAU,CAAC,GACrCb,KAAId,OAAM,QAAQ,GAAG2B,OAAK,QAAQ,GAAGA,OAAK,SAAS,CAAC,GACpDb,KAAIa,OAAK,QAAQ,GAAGA,OAAK,SAAS,CAAC,GACnCA,OAAK,QAAQ,GACbA,OAAK,UAAU,CAAC,GAElBnB,UAASR,OAAM,QAAQ,CAAC,CAAC;AAelB,IAAMkD,SAAQhD,KAAI+C,OAAM;AAE/B,IAAME,WAAUvC,KACdE,KAAId,OAAM,WAAW,GAAGQ,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAe7C,IAAMoD,UAASlD,KAAIiD,QAAO;AAEjC,IAAME,SAAQzC,KACZE,KAAId,OAAM,SAAS,GAAGQ,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAe3C,IAAMsD,QAAOpD,KAAImD,MAAK;;;ACjgBvB,IAAW;CAAjB,SAAiBE,YAAS;AACxB,MAAY;AAAZ,GAAA,SAAYC,OAAI;AACd,IAAAA,MAAA,QAAA,IAAA;AACA,IAAAA,MAAA,SAAA,IAAA;AACA,IAAAA,MAAA,MAAA,IAAA;EACF,GAJY,OAAAD,WAAA,SAAAA,WAAA,OAAI,CAAA,EAAA;AAMhB,MAAK;AAAL,GAAA,SAAKE,eAAY;AACf,IAAAA,cAAAA,cAAA,QAAA,IAAA,CAAA,IAAA;AACA,IAAAA,cAAAA,cAAA,SAAA,IAAA,GAAA,IAAA;AACA,IAAAA,cAAAA,cAAA,MAAA,IAAA,GAAA,IAAA;EACF,GAJK,iBAAA,eAAY,CAAA,EAAA;AAMjB,GAAA,SAAiBD,OAAI;AACN,IAAAA,MAAA,QAAQ,MAAkB;AACrC,aAAO,YAAkB,YAAY;IACvC;EACF,GAJiB,OAAAD,WAAA,SAAAA,WAAA,OAAI,CAAA,EAAA;AAMrB,MAAI;AAES,EAAAA,WAAA,QAAQ,MAAuB;AAC1C,QAAI,UAAU,MAAM;AAClB,eAAS,QAAmB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAChD,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAI,IAAI,QAAQ,MAAM;AACpB,YAAE,OAAO,CAAC;AACV,UAAAA,WAAU,KAAK,MAAK,EAAG,OAAO,IAAI,MAAM,CAAC;QAC3C;AAEA,YAAI,IAAI,qBAAqB,MAAM;AACjC,qBAAWG,UAAS,IAAI,mBAAmB;AACzC,cAAE,OAAO,EAAE;AACX,cAAE,MAAMA,MAAK;UACf;QACF;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQC,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,mBAAmB,CAAA;;AAGrB,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,OAAOJ,WAAU,KAAK,MAAK,EAAG,OAAO,MAAM;AAC/C;YACF;YACA,KAAK,GAAG;AACN,kBAAI,KAAK,QAAQ,qBAAqB,QAAQ,IAAI,kBAAkB,WAAW,KAAK,OAAO,mBAAmB;AAC5G,sBAAM,IAAI,eAAe,oEAAoE;cAC/F;AAEA,kBAAI,kBAAkB,KAAK,OAAO,MAAK,CAAE;AACzC;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAA,WAAA,SAAS,CAAC,QAAuC;AAC5D,WAAO,cAAc,KAAKA,WAAU,MAAK,CAAE;EAC7C;AAEa,EAAAA,WAAA,SAAS,CAAC,KAAkC,SAA8C;AACrG,WAAO,cAAc,KAAKA,WAAU,MAAK,GAAI,IAAI;EACnD;AACF,GAvFiB,cAAA,YAAS,CAAA,EAAA;;;ACApB,SAAU,oBAAqB,IAAe,kBAAkC;AAEpF,MAAIK,SAAQ,QAAQ,EAAE,GAAG;AACvB,WAAO;EACT;AAEA,QAAM,YAAY,iBAAiB,0BAA0B,EAAE;AAE/D,MAAI,aAAa,MAAM;AACrB,WAAO;EACT;AAGA,MAAIC,KAAI,QAAQ,EAAE,GAAG;AACnB,WAAO;EACT;AAGA,MAAI,CAACC,IAAG,QAAQ,EAAE,GAAG;AACnB,WAAO;EACT;AAEA,SAAO,YAAY,GAAG,UAAS,EAAG,IAAI,MAAM;AAC9C;;;AClBA,IAAM,yBAAyB,OAAO;AAEtC,IAAM,sBAAsB;AAE5B,IAAMC,iBAAgB;;EAEpB,SAAS;;EAET,SAAS;EACT,mBAAmB;EACnB,oBAAoB;;AAGhB,IAAO,sBAAP,MAA0B;EACtB;EACS;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACT;EACS;EAEjB,YAAa,YAAoC,MAAsB;AACrE,SAAK,MAAM,WAAW,OAAO,aAAa,cAAc;AACxD,SAAK,UAAU;AACf,SAAK,YAAY,WAAW;AAC5B,SAAK,YAAY,WAAW;AAC5B,SAAK,iBAAiB,WAAW;AACjC,SAAK,oBAAoB,WAAW;AACpC,SAAK,mBAAmB,WAAW;AAEnC,SAAK,UAAU,KAAK,WAAWA,eAAc;AAC7C,SAAK,UAAU,KAAK,WAAWA,eAAc;AAC7C,SAAK,oBAAoB,KAAK,qBAAqBA,eAAc;AACjE,SAAK,qBAAqB,KAAK,sBAAsBA,eAAc;EACrE;EAES,CAAC,OAAO,WAAW,IAAI;EAEvB,CAAC,mBAAmB,IAAc;IACzC;;EAGF,YAAS;AACP,WAAO,KAAK;EACd;EAEA,MAAM,QAAK;AACT,QAAI,KAAK,SAAS;AAChB;IACF;AAIA,SAAK,aAAa,MAAM,KAAK,UAAU,SAAS,YAAY;MAC1D,2BAA2B;MAC3B,WAAW,CAACC,SAAQ,eAAc;AAChC,YAAI,CAACC,SAAQ,WAAW,WAAW,UAAU,GAAG;AAE9C;QACF;AAGA,YAAI,WAAW,cAAc,WAAW;AACtC;QACF;AAEA,aAAK,eAAe,UAAU,EAC3B,MAAM,SAAM;AACX,eAAK,IAAI,MAAM,uCAAuC,GAAG;QAC3D,CAAC;MACL;KACD;AAED,UAAM,KAAK,UAAU,OAAO,YAAY,CAAC,SAAQ;AAC/C,WAAK,KAAK,sBAAsB,KAAK,QAAQ,KAAK,UAAU,EAAE,MAAM,SAAM;AACxE,aAAK,IAAI,MAAM,uCAAuC,GAAG;AACzD,aAAK,OAAO,MAAM,GAAG;MACvB,CAAC;IACH,GAAG;MACD,mBAAmB,KAAK;MACxB,oBAAoB,KAAK;MACzB,wBAAwB;KACzB;AAED,SAAK,UAAU;EACjB;EAEA,MAAM,OAAI;AACR,UAAM,KAAK,UAAU,SAAS,UAAU;AAExC,QAAI,KAAK,cAAc,MAAM;AAC3B,WAAK,UAAU,WAAW,KAAK,UAAU;IAC3C;AAEA,SAAK,UAAU;EACjB;;;;;;EAOA,MAAM,eAAgB,mBAA6B;AAOjD,QAAI,MAAM,KAAK,mCAAmC,iBAAiB,GAAG;AACpE;IACF;AAEA,QAAI;AAEJ,aAAS,IAAI,GAAG,IAAI,KAAK,SAAS,KAAK;AACrC,YAAMC,WAAU;QACd,QAAQ,YAAY,QAAQ,KAAK,OAAO;;AAG1C,UAAI;AAEF,iBAAS,MAAM,kBAAkB,UAAU,CAAC,UAAU,GAAG;UACvD,QAAQA,SAAQ;UAChB,wBAAwB;SACzB;AAED,cAAM,KAAK,SAAS,QAAQ;UAC1B,eAAe;SAChB,EAAE,GAAG,SAAS;AAKf,aAAK,IAAI,2BAA2B,kBAAkB,UAAU;AAChE,cAAM,eAAe,KAAK,IAAG;AAC7B,cAAM,GAAG,MAAM;UACb,MAAM,UAAU,KAAK;UACrB,mBAAmB,KAAK,eAAe,aAAY,EAAG,IAAI,QAAM,GAAG,KAAK;WACvEA,QAAO;AAEV,aAAK,IAAI,+BAA+B,kBAAkB,UAAU;AAEpE,cAAMC,WAAU,MAAM,GAAG,KAAKD,QAAO;AAErC,YAAIC,SAAQ,SAAS,UAAU,KAAK,SAAS;AAC3C,eAAK,IAAI,2BAA2B;AACpC,gBAAM,IAAI,oBAAoB,kCAAkC;QAClE;AAEA,cAAM,aAAa,KAAK,sBAAsBA,SAAQ,iBAAiB;AAEvE,YAAI,WAAW,WAAW,GAAG;AAC3B,eAAK,IAAI,wCAAwC;AACjD,gBAAM,IAAI,oBAAoB,yCAAyC;QACzE;AAEA,cAAM,MAAM,KAAK,IAAG,IAAK;AAEzB,aAAK,IAAI,4BAA4B,GAAG;AACxC,cAAM,GAAG,MAAM;UACb,MAAM,UAAU,KAAK;UACrB,mBAAmB,CAAA;WAClBD,QAAO;AAEV,aAAK,IAAI,wBAAwB;AAGjC,cAAM,cAAM,MAAM,CAAC;AAMnB,aAAK,IAAI,aAAa,UAAU;AAGhC,cAAM,OAAO,MAAM,KAAK,kBAAkB,eAAe,YAAY;UACnE,QAAQA,SAAQ;UAChB,UAAU;UACV,OAAO;UACP,WAAW;SACZ;AAED,aAAK,IAAI,mEAAmE,kBAAkB,YAAY,KAAK,UAAU;AACzH,cAAM,kBAAkB,MAAMA,QAAO;AAErC;MACF,SAAS,KAAU;AACjB,aAAK,IAAI,MAAM,oDAAoD,IAAI,GAAG,KAAK,SAAS,GAAG;AAC3F,gBAAQ,MAAM,GAAG;AAEjB,YAAI,MAAM,KAAK,SAAS;AACtB,gBAAM;QACR;MACF;AACE,YAAI,UAAU,MAAM;AAClB,gBAAM,OAAO,MAAMA,QAAO;QAC5B;MACF;IACF;EACF;;;;;EAMA,MAAM,mCAAoC,mBAA6B;AAGrE,UAAM,WAAW,MAAM,KAAK,UAAU,IAAI,kBAAkB,UAAU;AAKtE,UAAM,kBAAkB,SAAS,UAC9B,IAAI,aAAU;AACb,YAAM,KAAK,QAAQ;AAGnB,UAAI,GAAG,UAAS,KAAM,MAAM;AAC1B,eAAO,GAAG,YAAY,QAAQ,kBAAkB,UAAU,EAAE;MAC9D;AAEA,aAAO;IACT,CAAC,EACA,OAAO,QAAK;AACX,aAAO,oBAAoB,IAAI,KAAK,gBAAgB;IACtD,CAAC;AAEH,QAAI,gBAAgB,SAAS,GAAG;AAC9B,YAAM,SAAS,YAAY,QAAQ,KAAK,OAAO;AAE/C,UAAI;AACF,aAAK,IAAI,kDAAkD,eAAe;AAI1E,cAAM,aAAa,MAAM,KAAK,kBAAkB,eAAe,iBAAiB;UAC9E;UACA,OAAO;SACR;AAED,YAAID,SAAQ,WAAW,WAAW,UAAU,GAAG;AAC7C,gBAAM,IAAI,MAAM,+CAA+C;QACjE;AAEA,aAAK,IAAI,oFAAoF,kBAAkB,YAAY,WAAW,UAAU;AAEhJ,cAAM,kBAAkB,MAAM;UAC5B;SACD;AAED,eAAO;MACT,SAAS,KAAK;AACZ,aAAK,IAAI,MAAM,8DAA8D,kBAAkB,YAAY,iBAAiB,GAAG;MACjI;IACF,OAAO;AACL,WAAK,IAAI,iFAAiF,kBAAkB,UAAU;IACxH;AAGA,WAAO;EACT;;;;;;EAOA,MAAM,sBAAuB,QAAgB,mBAA6B;AACxE,UAAMC,WAAU;MACd,QAAQ,YAAY,QAAQ,KAAK,OAAO;;AAG1C,QAAI;AACF,YAAM,KAAK,SAAS,QAAQ;QAC1B,eAAe;OAChB,EAAE,GAAG,SAAS;AAEf,WAAK,IAAI,qBAAqB;AAG9B,YAAMC,WAAU,MAAM,GAAG,KAAKD,QAAO;AAErC,UAAIC,SAAQ,SAAS,UAAU,KAAK,SAAS;AAC3C,aAAK,IAAI,2BAA2B;AACpC,cAAM,IAAI,oBAAoB,kCAAkC;MAClE;AAEA,UAAIA,SAAQ,kBAAkB,WAAW,GAAG;AAC1C,aAAK,IAAI,sBAAsB;AAC/B,cAAM,IAAI,oBAAoB,yCAAyC;MACzE;AAEA,YAAM,aAAa,KAAK,sBAAsBA,SAAQ,iBAAiB;AAEvE,UAAI,WAAW,WAAW,GAAG;AAC3B,aAAK,IAAI,8BAA8B;AACvC,cAAM,IAAI,oBAAoB,kDAAkD;MAClF;AAEA,WAAK,IAAI,mBAAmB;AAC5B,YAAM,GAAG,MAAM;QACb,MAAM,UAAU,KAAK;QACrB,mBAAmB,KAAK,eAAe,aAAY,EAAG,IAAI,QAAM,GAAG,KAAK;OACzE;AAED,WAAK,IAAI,kBAAkB;AAC3B,YAAM,OAAO,MAAM,GAAG,KAAKD,QAAO;AAElC,UAAI,KAAK,SAAS,UAAU,KAAK,MAAM;AACrC,cAAM,IAAI,oBAAoB,kCAAkC;MAClE;AAOA,WAAK,IAAI,aAAa,UAAU;AAChC,YAAM,aAAa,MAAM,KAAK,kBAAkB,eAAe,YAAY;QACzE,QAAQA,SAAQ;QAChB,UAAU;QACV,OAAO;OACR;AAED,WAAK,IAAI,4DAA4D,kBAAkB,YAAY,WAAW,UAAU;AACxH,YAAM,kBAAkB,MAAMA,QAAO;IACvC,SAAS,KAAU;AACjB,WAAK,IAAI,MAAM,iCAAiC,kBAAkB,YAAY,GAAG;AACjF,aAAO,MAAM,GAAG;IAClB;AACE,YAAM,OAAO,MAAMA,QAAO;IAC5B;EACF;;;;EAKA,sBAAuB,OAAoD;AACzE,UAAM,SAAS,CAAA;AAEf,eAAW,QAAQ,OAAO;AACxB,UAAI,QAAQ,QAAQ,KAAK,WAAW,GAAG;AACrC;MACF;AAEA,UAAI;AACF,cAAM,KAAK,UAAU,IAAI;AAEzB,YAAI,CAAC,oBAAoB,IAAI,KAAK,gBAAgB,GAAG;AACnD;QACF;AAEA,eAAO,KAAK,EAAE;MAChB,QAAQ;MAAC;IACX;AAEA,WAAO;EACT;;;;ACnRK,IAAM,aAAa;AAEpB,SAAU,MAAO,OAAyB,CAAA,GAAE;AAChD,SAAO,CAAC,eAAe,IAAI,oBAAoB,YAAY,IAAI;AACjE;;;ACzGO,IAAM,4BAA4B;AAClC,IAAM,oCAAoC;AAC1C,IAAM,yCAAyC;AAC/C,IAAM,uCAAuC;AAC7C,IAAM,4CAA4C;AAGlD,IAAM,4BAA4B,OAAO;AAGzC,IAAM,uBAAuB;AAE7B,IAAM,mBAAmB;;;ACF1B,IAAW;CAAjB,SAAiBE,WAAQ;AACvB,MAAI;AAES,EAAAA,UAAA,QAAQ,MAAsB;AACzC,QAAI,UAAU,MAAM;AAClB,eAAS,QAAkB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAC/C,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAI,IAAI,mBAAmB,MAAM;AAC/B,YAAE,OAAO,EAAE;AACX,YAAE,OAAO,IAAI,eAAe;QAC9B;AAEA,YAAI,IAAI,gBAAgB,MAAM;AAC5B,YAAE,OAAO,EAAE;AACX,YAAE,OAAO,IAAI,YAAY;QAC3B;AAEA,YAAI,IAAI,aAAa,MAAM;AACzB,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,SAAS;QACvB;AAEA,YAAI,IAAI,eAAe,MAAM;AAC3B,qBAAWC,UAAS,IAAI,aAAa;AACnC,cAAE,OAAO,EAAE;AACX,cAAE,MAAMA,MAAK;UACf;QACF;AAEA,YAAI,IAAI,gBAAgB,MAAM;AAC5B,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,YAAY;QAC1B;AAEA,YAAI,IAAI,aAAa,MAAM;AACzB,qBAAWA,UAAS,IAAI,WAAW;AACjC,cAAE,OAAO,EAAE;AACX,cAAE,OAAOA,MAAK;UAChB;QACF;AAEA,YAAI,IAAI,oBAAoB,MAAM;AAChC,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,gBAAgB;QAC9B;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQC,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,aAAa,CAAA;UACb,WAAW,CAAA;;AAGb,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,kBAAkB,OAAO,OAAM;AACnC;YACF;YACA,KAAK,GAAG;AACN,kBAAI,eAAe,OAAO,OAAM;AAChC;YACF;YACA,KAAK,GAAG;AACN,kBAAI,YAAY,OAAO,MAAK;AAC5B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,KAAK,QAAQ,eAAe,QAAQ,IAAI,YAAY,WAAW,KAAK,OAAO,aAAa;AAC1F,sBAAM,IAAI,eAAe,8DAA8D;cACzF;AAEA,kBAAI,YAAY,KAAK,OAAO,MAAK,CAAE;AACnC;YACF;YACA,KAAK,GAAG;AACN,kBAAI,eAAe,OAAO,MAAK;AAC/B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,KAAK,QAAQ,aAAa,QAAQ,IAAI,UAAU,WAAW,KAAK,OAAO,WAAW;AACpF,sBAAM,IAAI,eAAe,4DAA4D;cACvF;AAEA,kBAAI,UAAU,KAAK,OAAO,OAAM,CAAE;AAClC;YACF;YACA,KAAK,GAAG;AACN,kBAAI,mBAAmB,OAAO,MAAK;AACnC;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAF,UAAA,SAAS,CAAC,QAAsC;AAC3D,WAAO,cAAc,KAAKA,UAAS,MAAK,CAAE;EAC5C;AAEa,EAAAA,UAAA,SAAS,CAAC,KAAkC,SAA4C;AACnG,WAAO,cAAc,KAAKA,UAAS,MAAK,GAAI,IAAI;EAClD;AACF,GAzHiB,aAAA,WAAQ,CAAA,EAAA;;;ACAlB,IAAMG,iBAAgB;EAC3B,gBAAgB;EAChB,SAAS;EACT,mBAAmB;EACnB,oBAAoB;EACpB,sBAAsB;EACtB,gBAAgB;EAChB,qBAAqB;EACrB,iBAAiB;EACjB,wBAAwB;EACxB,aAAa;;AAMT,SAAU,kBAAmB,MAA4C;AAC7E,MAAI,QAAQ,QAAQ,KAAK,SAAS,GAAG;AACnC,QAAI;AACF,aAAO,UAAU,IAAI;IACvB,QAAQ;IAER;EACF;AACF;AAEM,SAAU,gBAAiB,UAAoB,cAAqB;AACxE,MAAI,gBAAgB,MAAM;AACxB,WAAO;EACT;AAEA,SAAO,SAAS;AAClB;AAEA,eAAsB,uBAAwB,WAAsB,QAAwCC,MAAa,YAAwBC,UAAwB;AACvK,EAAAD,KAAI,6BAA6B,WAAW,UAAU;AAEtD,MAAIC,YAAW,MAAM;AACnB,UAAM,IAAI,oBAAoB,+BAA+B;EAC/D;AAEA,QAAM,OAAiB,CAAA;AAEvB,MAAIA,SAAQ,YAAY,SAAS,GAAG;AAClC,SAAK,YAAYA,SAAQ,YAAY,IAAI,UAAQ;MAC/C,aAAa;MACb,WAAW,UAAU,GAAG;MACxB;EACJ;AAEA,MAAIA,SAAQ,UAAU,SAAS,GAAG;AAChC,SAAK,YAAYA,SAAQ;EAC3B;AAEA,MAAIA,SAAQ,aAAa,MAAM;AAC7B,UAAMC,aAAY,sBAAsBD,SAAQ,SAAS;AACzD,UAAME,UAAS,oBAAoBD,UAAS;AAE5C,QAAI,CAACC,QAAO,OAAO,WAAW,UAAU,GAAG;AACzC,YAAM,IAAI,oBAAoB,wCAAwC;IACxE;AAEA,SAAK,YAAYD;EACnB;AAEA,MAAI;AAGJ,MAAID,SAAQ,oBAAoB,MAAM;AACpC,IAAAD,KAAI,MAAM,qCAAqC,WAAW,UAAU;AAEpE,QAAII,sBAAqBH,SAAQ;AACjC,UAAM,WAAW,MAAM,eAAe,eAAeG,qBAAoBC,YAAW,MAAM;AAC1F,QAAI,aAAaA,YAAW,mBAAmB,SAAS,OAAO;AAC/D,UAAM,eAAe,cAAc,SAAS,UAAU,MAAK,CAAE;AAG7D,QAAI,CAAC,WAAW,OAAO,OAAO,YAAY,GAAG;AAC3C,YAAM,IAAI,oBAAoB,qDAAqD;IACrF;AAGA,QAAI,CAAC,WAAW,WAAW,OAAO,WAAW,MAAM,GAAG;AACpD,YAAM,IAAI,oBAAoB,0CAA0C;IAC1E;AAEA,QAAI;AAEJ,QAAI;AACF,qBAAe,MAAM,UAAU,IAAI,WAAW,MAAM;IACtD,SAAS,KAAU;AACjB,UAAI,IAAI,SAAS,iBAAiB;AAChC,cAAM;MACR;IACF;AAEA,QAAI,gBAAgB,MAAM;AAExB,WAAK,WAAW,aAAa;AAG7B,UAAI,aAAa,sBAAsB,MAAM;AAC3C,cAAM,iBAAiB,eAAe,mBAAmB,aAAa,kBAAkB;AACxF,cAAM,eAAeA,YAAW,mBAAmB,eAAe,OAAO;AAGzE,YAAI,aAAa,aAAa,WAAW,WAAW;AAClD,UAAAL,KAAI,4FAA4F,aAAa,WAAW,WAAW,SAAS;AAC5I,uBAAa;AACb,UAAAI,sBAAqB,aAAa;QACpC;MACF;IACF;AAGA,SAAK,qBAAqBA;AAG1B,SAAK,YAAY,WAAW,WAAW,IAAI,CAAAE,gBAAc;MACvD,aAAa;MACb,WAAAA;MACA;AAEF,aAAS;MACP,KAAK,WAAW;MAChB,WAAW,WAAW;;EAE1B,OAAO;AACL,IAAAN,KAAI,wCAAwC,WAAW,UAAU;EACnE;AAEA,EAAAA,KAAI,MAAM,oBAAoB,WAAW,YAAY,IAAI;AACzD,QAAM,UAAU,MAAM,WAAW,YAAY,IAAI;AAEjD,MAAIC,SAAQ,gBAAgB,QAAQA,SAAQ,mBAAmB,MAAM;AACnE,UAAM,WAAuC,CAAA;AAE7C,QAAIA,SAAQ,gBAAgB,MAAM;AAChC,eAAS,eAAe,WAAqBA,SAAQ,YAAY;IACnE;AAEA,QAAIA,SAAQ,mBAAmB,MAAM;AACnC,eAAS,kBAAkB,WAAqBA,SAAQ,eAAe;IACzE;AAEA,IAAAD,KAAI,MAAM,uBAAuB,WAAW,YAAY,QAAQ;AAChE,UAAM,UAAU,MAAM,WAAW,YAAY;MAC3C;KACD;EACH;AAEA,QAAM,SAAyB;IAC7B,QAAQ,WAAW;IACnB,iBAAiBC,SAAQ;IACzB,cAAcA,SAAQ;IACtB,WAAWA,SAAQ;IACnB,aAAaA,SAAQ,YAAY,IAAI,SAAO,UAAU,GAAG,CAAC;IAC1D,cAAcA,SAAQ,gBAAgB,OAAO,SAAY,UAAUA,SAAQ,YAAY;IACvF,WAAWA,SAAQ;IACnB,kBAAkB;IAClB;;AAGF,SAAO,kBAAkB,iBAAiB,EAAE,QAAQ,OAAM,CAAE;AAE5D,SAAO;AACT;AAOM,IAAgB,mBAAhB,MAAgC;EACpB;EAKN;EACA;EACS;EACA;EACA;EACA;EACA;EACA;EACF;EACA;EACE;EACA;EACA;EACA;EACA;EAEnB,YAAa,YAAgC,MAA0B;AACrE,SAAK,WAAW,KAAK;AACrB,SAAK,UAAU;AACf,SAAK,SAAS,WAAW;AACzB,SAAK,aAAa,WAAW;AAC7B,SAAK,YAAY,WAAW;AAC5B,SAAK,YAAY,WAAW;AAC5B,SAAK,iBAAiB,WAAW;AACjC,SAAK,SAAS,WAAW;AACzB,SAAK,MAAM,KAAK;AAEhB,SAAK,UAAU,KAAK,WAAWF,eAAc;AAC7C,SAAK,oBAAoB,KAAK,qBAAqBA,eAAc;AACjE,SAAK,qBAAqB,KAAK,sBAAsBA,eAAc;AACnE,SAAK,iBAAiB,KAAK,kBAAkBA,eAAc;AAC3D,SAAK,uBAAuB,KAAK,wBAAwBA,eAAc;AACvE,SAAK,yBAAyB,KAAK,0BAA0BA,eAAc;AAG3E,SAAK,OAAO;MACV,iBAAiB,GAAG,KAAK,kBAAkBA,eAAc,cAAc,IAAI,yBAAyB;MACpG,cAAc,gBAAgB,WAAW,UAAU,KAAK,YAAY;;EAExE;EAEA,YAAS;AACP,WAAO,KAAK;EACd;EAEA,MAAM,QAAK;AACT,QAAI,KAAK,SAAS;AAChB;IACF;AAEA,UAAM,KAAK,UAAU,MAAM,KAAK,QAAQ;MACtC,UAAU;QACR,cAAc,WAAqB,KAAK,KAAK,YAAY;QACzD,iBAAiB,WAAqB,KAAK,KAAK,eAAe;;KAElE;AAED,UAAM,KAAK,UAAU,OAAO,KAAK,UAAU,CAAC,SAAQ;AAClD,WAAK,KAAK,eAAe,IAAI,EAAE,MAAM,SAAM;AACzC,aAAK,IAAI,MAAM,GAAG;MACpB,CAAC;IACH,GAAG;MACD,mBAAmB,KAAK;MACxB,oBAAoB,KAAK;MACzB,wBAAwB,KAAK;KAC9B;AAED,SAAK,UAAU;EACjB;EAEA,MAAM,OAAI;AACR,UAAM,KAAK,UAAU,SAAS,KAAK,QAAQ;AAE3C,SAAK,UAAU;EACjB;;;;ACtPI,IAAO,eAAP,cAA4B,iBAAgB;EAC/B;EACA;EACT;EAER,YAAa,YAAoC,OAAyB,CAAA,GAAE;AAC1E,UAAM,YAAY;MAChB,GAAG;MACH,UAAU,IAAI,KAAK,kBAAkBQ,eAAc,cAAc,IAAI,sCAAsC,IAAI,yCAAyC;MACxJ,KAAK,WAAW,OAAO,aAAa,sBAAsB;KAC3D;AAED,SAAK,oBAAoB,WAAW;AACpC,SAAK,cAAc,KAAK,eAAeA,eAAc;AAErD,SAAK,QAAQ,SAAS,KAAK,gBAAgB,KAAK,IAAI,GAAG,KAAK,YAAY,gBAAgB;AAExF,QAAK,KAAK,mBAAmBA,eAAc,iBAAkB;AAE3D,iBAAW,OAAO,iBAAiB,oBAAoB,CAAC,QAAO;AAC7D,aAAK,KAAI,EAAG,MAAM,SAAM;AACtB,eAAK,IAAI,MAAM,uCAAuC,GAAG;QAC3D,CAAC;MACH,CAAC;IACH;EACF;EAEA,CAAC,mBAAmB,IAAc;IAChC;;;;;EAMF,MAAM,OAAI;AACR,SAAK,MAAK;EACZ;EAEQ,MAAM,kBAAe;AAE3B,QAAI,CAAC,KAAK,UAAS,GAAI;AACrB;IACF;AAEA,QAAI;AACF,YAAM,kBAAkB,KAAK,eAAe,aAAY,EAAG,IAAI,QAAM,GAAG,gBAAgB,UAAU,KAAK,EAAE,IAAI,CAAC;AAC9G,YAAM,aAAa,IAAIC,YAAW;QAChC,QAAQ,KAAK;QACb,YAAY;OACb;AACD,YAAM,mBAAmB,MAAM,eAAe,KAAK,YAAY,KAAK,UAAU;AAC9E,YAAM,qBAAqB,KAAK,UAAU,aAAY;AACtD,YAAM,OAAO,MAAM,KAAK,UAAU,IAAI,KAAK,MAAM;AACjD,YAAM,eAAe,SAAmB,KAAK,SAAS,IAAI,cAAc,KAAK,WAAqB,KAAK,KAAK,YAAY,CAAC;AACzH,YAAM,kBAAkB,SAAmB,KAAK,SAAS,IAAI,iBAAiB,KAAK,WAAqB,KAAK,KAAK,eAAe,CAAC;AAClI,YAAMC,QAAO;AAEb,sBAAiB,oBAAiB;AAChC,mBAAW,cAAcA,MAAK,kBAAkB,eAAc,GAAI;AAChE,gBAAMC,QAAO,MAAMD,MAAK,UAAU,IAAI,WAAW,UAAU;AAE3D,cAAI,CAACC,MAAK,UAAU,SAASD,MAAK,QAAQ,GAAG;AAC3C;UACF;AAEA,gBAAM,YAAW;AACf,gBAAI;AACJ,kBAAM,SAAS,YAAY,QAAQA,MAAK,OAAO;AAE/C,4BAAgB,UAAU,MAAM;AAEhC,gBAAI;AACF,uBAAS,MAAM,WAAW,UAAUA,MAAK,UAAU;gBACjD;gBACA,wBAAwBA,MAAK;eAC9B;AAED,oBAAM,KAAK,SAAS,QAAQ;gBAC1B,eAAeA,MAAK;eACrB,EAAE,GAAG,QAAe;AAErB,oBAAM,GAAG,MAAM;gBACb,aAAa,gBAAgB,IAAI,QAAM,GAAG,KAAK;gBAC/C,kBAAkB,iBAAiB,QAAO;gBAC1C,WAAW;gBACX;gBACA;iBACC;gBACD;eACD;AAED,oBAAM,OAAO,MAAM;gBACjB;eACD;YACH,SAAS,KAAU;AAEjB,cAAAA,MAAK,IAAI,MAAM,0CAA0C,GAAG;AAC5D,sBAAQ,MAAM,GAAG;YACnB;UACF;QACF;MACF;AAEA,YAAM,YAAM,SAAS,kBAAiB,GAAI;QACxC,aAAa,KAAK;OACnB,CAAC;IACJ,SAAS,KAAU;AACjB,WAAK,IAAI,MAAM,uCAAuC,GAAG;IAC3D;EACF;;;;EAKA,MAAM,eAAgB,MAAwB;AAC5C,UAAM,EAAE,YAAY,OAAM,IAAK;AAE/B,QAAI;AACF,UAAI,KAAK,OAAO,OAAO,WAAW,UAAU,GAAG;AAC7C,cAAM,IAAI,MAAM,+BAA+B;MACjD;AAEA,YAAME,WAAU;QACd,QAAQ,YAAY,QAAQ,KAAK,OAAO;;AAG1C,YAAM,KAAK,SAAS,QAAQ;QAC1B,eAAe,KAAK;OACrB,EAAE,GAAG,QAAe;AAErB,YAAMC,WAAU,MAAM,GAAG,KAAKD,QAAO;AACrC,YAAM,OAAO,MAAMA,QAAO;AAE1B,YAAM,uBAAuB,KAAK,WAAW,KAAK,QAAQ,KAAK,KAAK,YAAYC,QAAO;IACzF,SAAS,KAAU;AACjB,WAAK,IAAI,MAAM,4BAA4B,GAAG;AAC9C,aAAO,MAAM,GAAG;AAChB;IACF;AAEA,SAAK,IAAI,MAAM,wBAAwB,WAAW,UAAU;EAC9D;;;;AC5JK,IAAMC,SAAO,CAACA,WAAyB;AAC5C,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,YAAM,YAAY,KAAK,CAAC;AAExB,UAAI,aAAa,MAAM;AACrB,eAAO;MACT;AAEA,UAAI,UAAU,SAASA,QAAM;AAC3B,eAAO;MACT;AAEA,UAAI,UAAU,SAAS,MAAM;AAC3B,eAAO;MACT;AAEA,aAAO,KAAK,MAAM,CAAC;IACrB;;AAEJ;AAMO,IAAMC,SAAQ,CAACD,QAAcC,WAA2B;AAC7D,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,YAAM,YAAY,KAAK,CAAC;AAExB,UAAI,WAAW,SAASD,QAAM;AAC5B,eAAO;MACT;AAEA,UAAI,UAAU,SAAS,MAAM;AAC3B,eAAO;MACT;AAEA,UAAIC,UAAS,QAAQ,UAAU,UAAUA,QAAO;AAC9C,eAAO;MACT;AAEA,aAAO,KAAK,MAAM,CAAC;IACrB;;AAEJ;AAKO,IAAMC,YAAW,CAAC,YAA6B;AACpD,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,YAAM,SAAS,QAAQ,MAAM,IAAI;AAEjC,UAAI,WAAW,OAAO;AACpB,eAAO;MACT;AAEA,aAAO;IACT;;AAEJ;AAKO,IAAMC,OAAK,IAAI,aAAgC;AACpD,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,UAAI;AAEJ,iBAAW,WAAW,UAAU;AAC9B,cAAM,SAAS,QAAQ,MAAM,IAAI;AAGjC,YAAI,WAAW,OAAO;AACpB;QACF;AAGA,YAAI,WAAW,QAAQ,OAAO,SAAS,QAAQ,QAAQ;AACrD,oBAAU;QACZ;MACF;AAEA,UAAI,WAAW,MAAM;AACnB,eAAO;MACT;AAEA,aAAO;IACT;;AAEJ;AAKO,IAAMC,OAAM,IAAI,aAAgC;AACrD,SAAO;IACL,OAAO,CAAC,SAAQ;AACd,iBAAW,WAAW,UAAU;AAE9B,cAAM,SAAS,QAAQ,MAAM,IAAI;AAGjC,YAAI,WAAW,OAAO;AACpB,iBAAO;QACT;AAEA,eAAO;MACT;AAEA,aAAO;IACT;;AAEJ;AAKM,SAAUC,QAAQ,UAAmB;AACzC,WAAS,MAAO,IAAc;AAC5B,QAAI,MAAM,MAAM;AACd,aAAO;IACT;AAEA,QAAI,QAAQ,GAAG,cAAa;AAE5B,eAAW,WAAW,UAAU;AAC9B,YAAM,SAAS,QAAQ,MAAM,KAAK;AAElC,UAAI,WAAW,OAAO;AACpB,eAAO;MACT;AAEA,cAAQ;IACV;AAEA,WAAO;EACT;AAEA,WAAS,QAAS,IAAc;AAC9B,UAAM,SAAS,MAAM,EAAE;AAEvB,WAAO,WAAW;EACpB;AAEA,WAAS,WAAY,IAAc;AACjC,UAAM,SAAS,MAAM,EAAE;AAEvB,QAAI,WAAW,OAAO;AACpB,aAAO;IACT;AAEA,WAAO,OAAO,WAAW;EAC3B;AAEA,SAAO;IACL;IACA;IACA;;AAEJ;;;ACvFA,IAAMC,YAAWC,OAAM,QAAQ;AAExB,IAAMC,WAAUC,KAAIH,SAAQ;AAKnC,IAAMI,SAAQH,OAAM,SAAS;AAC7B,IAAMI,SAAQJ,OAAM,SAAS;AAC7B,IAAMK,YAAWL,OAAM,YAAY;AACnC,IAAMM,QAAON,OAAM,QAAQ;AAgBpB,IAAMO,QAAOL,KAAIC,QAAOK,UAASR,OAAM,QAAQ,CAAC,CAAC;AAgBjD,IAAMS,QAAOP,KAAIE,QAAOI,UAASR,OAAM,QAAQ,CAAC,CAAC;AAiBjD,IAAMU,WAAUR,KAAIG,WAAUG,UAASR,OAAM,QAAQ,CAAC,CAAC;AAiBvD,IAAMW,OAAMT,KAAIU,KAAGN,OAAMD,WAAUF,QAAOC,MAAK,GAAGI,UAASR,OAAM,QAAQ,CAAC,CAAC;AAElF,IAAMa,QAAOC,KACXd,OAAM,QAAQ,GACdQ,UAASR,OAAM,WAAW,CAAC,CAAC;AAE9B,IAAMe,QAAOD,KACXN,UAASR,OAAM,YAAY,CAAC,GAC5BA,OAAM,QAAQ,GACdQ,UAASR,OAAM,WAAW,CAAC,CAAC;AAE9B,IAAMgB,OAAMJ,KAAGC,OAAME,KAAI;AAEzB,IAAME,iBAAgBL,KAAGI,MAAKV,OAAMH,QAAOC,QAAOC,SAAQ;AAiBnD,IAAMa,gBAAehB,KAAIU,KAAGI,MAAKF,KAAIF,KAAGN,OAAMD,WAAUF,QAAOC,MAAK,GAAGI,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC,CAAC;AAkBlG,IAAMmB,OAAMjB,KAAIW,KAAI;AAkBpB,IAAMO,OAAMlB,KAAIa,KAAI;AAepB,IAAMM,MAAKnB,KAAIc,IAAG;AAEzB,IAAMM,QAAOR,KAAIG,gBAAejB,OAAM,QAAQ,CAAC;AAC/C,IAAMuB,QAAOT,KAAIG,gBAAejB,OAAM,QAAQ,CAAC;AAcxC,IAAMwB,OAAMtB,KAAIY,KAAIQ,OAAMd,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAcpD,IAAMyB,OAAMvB,KAAIqB,KAAI;AAE3B,IAAMG,SAAQZ,KAAIS,OAAMI,OAAK,SAAS,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC;AAClE,IAAM4B,YAAWd,KAAIS,OAAMI,OAAK,YAAY,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC;AAExE,IAAM6B,iBAAgBjB,KAAGc,QAAOE,SAAQ;AAcjC,IAAME,QAAO5B,KAAIwB,MAAK;AActB,IAAMK,WAAU7B,KAAI0B,SAAQ;AAEnC,IAAMI,QAAOpB,KACXK,gBACAK,OACAC,OACAG,QACAE,SAAQ;AAGV,IAAMK,eAAcrB,KAClBE,KAAIkB,OAAML,OAAK,OAAO,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAe9C,IAAMkC,cAAahC,KAAI+B,YAAW;AAEzC,IAAME,qBAAoBvB,KACxBE,KAAIkB,OAAML,OAAK,QAAQ,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,GACnDc,KAAIkB,OAAML,OAAK,QAAQ,GAAGnB,UAASR,OAAM,QAAQ,CAAC,GAAG2B,OAAK,OAAO,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAezF,IAAMoC,oBAAmBlC,KAAIiC,kBAAiB;AAErD,IAAME,iBAAgBvB,KAAIS,OAAMI,OAAK,kBAAkB,GAAGnB,UAASR,OAAM,aAAa,CAAC,GAAGQ,UAASR,OAAM,aAAa,CAAC,GAAGQ,UAASR,OAAM,QAAQ,CAAC,CAAC;AAc5I,IAAMsC,gBAAepC,KAAImC,cAAa;AAE7C,IAAME,iBAAgBzB,KAAIc,WAAUD,OAAK,iBAAiB,GAAGnB,UAASR,OAAM,aAAa,CAAC,GAAGQ,UAASR,OAAM,aAAa,CAAC,GAAGQ,UAASR,OAAM,QAAQ,CAAC,CAAC;AAc/I,IAAMwC,gBAAetC,KAAIqC,cAAa;AAE7C,IAAME,QAAO7B,KACXqB,cACAE,oBACArB,KAAIQ,OAAMd,UAASR,OAAM,QAAQ,CAAC,CAAC,GACnCc,KAAIe,gBAAerB,UAASR,OAAM,QAAQ,CAAC,CAAC,GAC5Cc,KAAIG,gBAAeT,UAASR,OAAM,QAAQ,CAAC,CAAC,GAC5CqC,gBACAE,gBACAvC,OAAM,QAAQ,CAAC;AAeV,IAAM0C,OAAMxC,KAAIuC,KAAI;AAE3B,IAAME,YAAW7B,KAAI2B,OAAMd,OAAK,gBAAgB,GAAG3B,OAAM,QAAQ,CAAC;AAc3D,IAAM4C,WAAU1C,KAAIyC,SAAQ;AAEnC,IAAME,WAAUjC,KACdE,KAAI2B,OAAMd,OAAK,gBAAgB,GAAGA,OAAK,WAAW,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,GAC9Ec,KAAI2B,OAAMd,OAAK,WAAW,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,GACtDc,KAAIa,OAAK,WAAW,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAe5C,IAAM8C,UAAS5C,KAAI2C,QAAO;AAEjC,IAAME,SAAQnC,KACZE,KAAIG,gBAAejB,OAAM,QAAQ,GAAG2B,OAAK,SAAS,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,GAC9Ec,KAAIG,gBAAeU,OAAK,SAAS,GAAGnB,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAezD,IAAMgD,QAAO9C,KAAI6C,MAAK;AAE7B,IAAME,UAASnC,KAAIG,gBAAeL,KAChCE,KAAId,OAAM,UAAU,KAAK,GAAG2B,OAAK,SAAS,CAAC,GAC3Cb,KAAId,OAAM,QAAQ,GAAG2B,OAAK,UAAU,CAAC,GACrCb,KAAId,OAAM,QAAQ,GAAG2B,OAAK,QAAQ,GAAGA,OAAK,SAAS,CAAC,GACpDb,KAAIa,OAAK,QAAQ,GAAGA,OAAK,SAAS,CAAC,GACnCA,OAAK,QAAQ,GACbA,OAAK,UAAU,CAAC,GAElBnB,UAASR,OAAM,QAAQ,CAAC,CAAC;AAelB,IAAMkD,SAAQhD,KAAI+C,OAAM;AAE/B,IAAME,WAAUvC,KACdE,KAAId,OAAM,WAAW,GAAGQ,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAe7C,IAAMoD,UAASlD,KAAIiD,QAAO;AAEjC,IAAME,SAAQzC,KACZE,KAAId,OAAM,SAAS,GAAGQ,UAASR,OAAM,QAAQ,CAAC,CAAC,CAAC;AAe3C,IAAMsD,QAAOpD,KAAImD,MAAK;;;ACvfvB,IAAOE,YAAP,cAAwB,iBAAgB;EAC5C,YAAa,YAAgC,OAAqB,CAAA,GAAE;AAClE,UAAM,YAAY;MAChB,GAAG;MACH,UAAU,IAAI,KAAK,kBAAkBC,eAAc,cAAc,IAAI,iCAAiC,IAAI,oCAAoC;MAC9I,KAAK,WAAW,OAAO,aAAa,iBAAiB;KACtD;AAED,QAAI,KAAK,uBAAuBA,eAAc,qBAAqB;AAEjE,iBAAW,OAAO,iBAAiB,mBAAmB,CAAC,QAAO;AAC5D,cAAM,aAAa,IAAI;AACvB,aAAK,SAAS,UAAU,EACrB,MAAM,SAAM;AACX,cAAI,IAAI,SAAS,yBAAyB,MAAM;AAE9C;UACF;AAEA,eAAK,IAAI,MAAM,oDAAoD,GAAG;QACxE,CAAC;MACL,CAAC;IACH;EACF;EAEA,CAAC,mBAAmB,IAAc;IAChC;;EAGF,MAAM,UAAW,YAAwBC,WAAwB,CAAA,GAAE;AACjE,QAAI;AAEJ,QAAIA,SAAQ,UAAU,MAAM;AAC1B,YAAM,SAAS,YAAY,QAAQ,KAAK,OAAO;AAC/C,sBAAgB,UAAU,MAAM;AAEhC,MAAAA,WAAU;QACR,GAAGA;QACH;;IAEJ;AAEA,QAAI;AACF,eAAS,MAAM,WAAW,UAAU,KAAK,UAAU;QACjD,GAAGA;QACH,wBAAwB,KAAK;OAC9B;AAED,YAAM,KAAK,SAAS,QAAQ;QAC1B,eAAe,KAAK;OACrB,EAAE,GAAG,QAAe;AAErB,YAAMC,WAAU,MAAM,GAAG,KAAKD,QAAO;AAErC,YAAM,OAAO,MAAMA,QAAO;AAE1B,aAAOC;IACT,SAAS,KAAU;AACjB,cAAQ,MAAM,GAAG;AACjB,YAAM;IACR;EACF;EAEA,MAAM,SAAU,YAAwBD,WAAwB,CAAA,GAAE;AAChE,UAAMC,WAAU,MAAM,KAAK,UAAU,YAAYD,QAAO;AACxD,UAAM,EACJ,WAAAE,YACA,WAAAC,YACA,aAAY,IACVF;AAEJ,QAAIC,cAAa,MAAM;AACrB,YAAM,IAAI,oBAAoB,8CAA8C;IAC9E;AAEA,UAAM,MAAM,sBAAsBA,UAAS;AAC3C,UAAM,KAAK,cAAc,IAAI,MAAK,CAAE;AAEpC,QAAI,CAAC,WAAW,WAAW,OAAO,EAAE,GAAG;AACrC,YAAM,IAAI,oBAAoB,kDAAkD;IAClF;AAEA,QAAI,KAAK,OAAO,OAAO,EAAE,GAAG;AAC1B,YAAM,IAAI,oBAAoB,qCAAqC;IACrE;AAIA,SAAK,wBAAwB,YAAY;AAEzC,SAAK,IAAI,mDAAmD,IAAIC,UAAS;AAEzE,WAAO,uBAAuB,KAAK,WAAW,KAAK,QAAQ,KAAK,KAAK,YAAYF,QAAO;EAC1F;EAEQ,wBAAyB,cAAoC;AACnE,UAAM,oBAAoB,kBAAkB,YAAY;AAExD,QAAI,qBAAqB,MAAM;AAC7B;IACF;AAEA,SAAK,IAAI,MAAM,+BAA+B,iBAAiB;AAE/D,QAAI,UAAU,iBAAiB,GAAG;AAChC,WAAK,IAAI,MAAM,kCAAkC;AACjD;IACF;AAEA,UAAM,SAAS,kBAAkB,cAAa;AAE9C,SAAM,OAAO,CAAC,EAAE,SAAS,YAAc,OAAO,CAAC,EAAE,SAAS,gBAAgB,OAAO,CAAC,EAAE,SAAS,aAAc,CAAC,gBAAgB,iBAAiB,GAAG;AAC9I,WAAK,IAAI,MAAM,gEAAgE;AAC/E;IACF;AAEA,QAAIG,KAAI,WAAW,iBAAiB,GAAG;AAKrC;IACF;AAEA,SAAK,IAAI,MAAM,8BAA8B;AAC7C,SAAK,eAAe,gBAAgB,iBAAiB;EACvD;;;;;EAMA,MAAM,eAAgB,MAAwB;AAC5C,UAAM,EAAE,YAAY,OAAM,IAAK;AAE/B,UAAM,SAAS,YAAY,QAAQ,KAAK,OAAO;AAE/C,oBAAgB,UAAU,MAAM;AAEhC,QAAI;AACF,YAAM,WAAW,MAAM,KAAK,UAAU,IAAI,KAAK,MAAM;AACrD,YAAM,aAAa,KAAK,eAAe,aAAY,EAAG,IAAI,QAAM,GAAG,gBAAgB,UAAU,KAAK,EAAE,IAAI,CAAC;AACzG,UAAI,mBAAmB,SAAS;AAEhC,UAAI,WAAW,SAAS,KAAK,oBAAoB,MAAM;AACrD,cAAM,aAAa,IAAIC,YAAW;UAChC,QAAQ,KAAK;UACb;SACD;AAED,cAAM,WAAW,MAAM,eAAe,KAAK,YAAY,KAAK,UAAU;AACtE,2BAAmB,SAAS,QAAO,EAAG,SAAQ;MAChD;AAEA,UAAI,eAAuC,WAAW,WAAW;AAEjE,UAAI,CAACC,cAAa,QAAQ,WAAW,UAAU,GAAG;AAChD,uBAAe;MACjB;AAEA,YAAM,KAAK,SAAS,MAAM,EAAE,GAAG,QAAe;AAE9C,YAAM,GAAG,MAAM;QACb,iBAAiB,KAAK,KAAK;QAC3B,cAAc,KAAK,KAAK;QACxB,WAAW,oBAAoB,KAAK,WAAW,SAAS;QACxD,aAAa,WAAW,IAAI,UAAQ,KAAK,KAAK;QAC9C;QACA;QACA,WAAW,SAAS;SACnB;QACD;OACD;AAED,YAAM,OAAO,MAAM;QACjB;OACD;IACH,SAAS,KAAU;AACjB,WAAK,IAAI,MAAM,yCAAyC,GAAG;AAC3D,aAAO,MAAM,GAAG;IAClB;EACF;;;;ACvBI,SAAU,SAAU,OAAqB,CAAA,GAAE;AAC/C,SAAO,CAAC,eAAe,IAAIC,UAAc,YAAY,IAAI;AAC3D;AAEM,SAAU,aAAc,OAAyB,CAAA,GAAE;AACvD,SAAO,CAAC,eAAe,IAAI,aAAkB,YAAY,IAAI;AAC/D;;;ACrLO,IAAMC,UAAS;AACf,IAAMC,UAAS,KAAKD;AACpB,IAAM,OAAO,KAAKC;AAElB,IAAM,iBAAiB,KAAK;AAE5B,IAAM,WAAW;AAKjB,IAAM,qBAAqB,KAAK;AAKhC,IAAM,sBAAsB,KAAK;AAGjC,IAAM,wBAAwB;AAG9B,IAAM,2BAA2B;AAGjC,IAAM,qBAAqB;AAG3B,IAAM,oBAAoB;AAE1B,IAAM,uBAAuB,KAAKC;AAGlC,IAAM,0BAA0B,KAAKA;AAMrC,IAAM,IAAI;AAGV,IAAM,QAAQ;AAGd,IAAM,sBAAsB,IAAIC;AAGhC,IAAM,8BAA8BC;AAGpC,IAAM,qBAAqB,IAAIA;AAG/B,IAAM,yBAAyB,IAAID;AAGnC,IAAM,8BAA8B,KAAKC;AAGzC,IAAM,wBAAwB,MAAMA;AAGpC,IAAMC,kBAAiB,GAAG,UAAU;;;ACtDrC,IAAW;CAAjB,SAAiBC,SAAM;AACrB,MAAI;AAES,EAAAA,QAAA,QAAQ,MAAoB;AACvC,QAAI,UAAU,MAAM;AAClB,eAAS,QAAgB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAC7C,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAK,IAAI,OAAO,QAAQ,IAAI,IAAI,aAAa,GAAI;AAC/C,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,GAAG;QACjB;AAEA,YAAK,IAAI,SAAS,QAAQ,IAAI,MAAM,aAAa,GAAI;AACnD,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,KAAK;QACnB;AAEA,YAAK,IAAI,gBAAgB,QAAQ,IAAI,iBAAiB,IAAK;AACzD,YAAE,OAAO,EAAE;AACX,YAAE,OAAO,IAAI,YAAY;QAC3B;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQC,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,KAAK,MAAgB,CAAC;UACtB,OAAO,MAAgB,CAAC;UACxB,cAAc;;AAGhB,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,MAAM,OAAO,MAAK;AACtB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,QAAQ,OAAO,MAAK;AACxB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,eAAe,OAAO,OAAM;AAChC;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAD,QAAA,SAAS,CAAC,QAAoC;AACzD,WAAO,cAAc,KAAKA,QAAO,MAAK,CAAE;EAC1C;AAEa,EAAAA,QAAA,SAAS,CAAC,KAAkC,SAAwC;AAC/F,WAAO,cAAc,KAAKA,QAAO,MAAK,GAAI,IAAI;EAChD;AACF,GA1EiB,WAAA,SAAM,CAAA,EAAA;;;ACPjB,SAAU,UAAW,MAAU;AACnC,QAAM,OAAO,KAAK,eAAc;AAChC,QAAM,QAAQ,OAAO,KAAK,YAAW,IAAK,CAAC,EAAE,SAAS,GAAG,GAAG;AAC5D,QAAM,MAAM,OAAO,KAAK,WAAU,CAAE,EAAE,SAAS,GAAG,GAAG;AACrD,QAAME,QAAO,OAAO,KAAK,YAAW,CAAE,EAAE,SAAS,GAAG,GAAG;AACvD,QAAMC,UAAS,OAAO,KAAK,cAAa,CAAE,EAAE,SAAS,GAAG,GAAG;AAC3D,QAAM,UAAU,OAAO,KAAK,cAAa,CAAE,EAAE,SAAS,GAAG,GAAG;AAC5D,QAAM,eAAe,KAAK,mBAAkB;AAC5C,QAAM,cAAc,OAAO,eAAe,MAAO,GAAI,EAAE,SAAS,GAAG,GAAG;AAEtE,SAAO,GAAG,IAAI,IAAI,KAAK,IAAI,GAAG,IAAID,KAAI,IAAIC,OAAM,IAAI,OAAO,IAAI,WAAW;AAC5E;AAMM,SAAU,aAAc,MAAY;AACxC,QAAM,iBAAiB,IAAI;;IAEzB;EAIY;AAEd,QAAM,IAAI,OAAO,IAAI,EAAE,KAAI,EAAG,MAAM,cAAc;AAElD,MAAI,KAAK,MAAM;AACb,UAAM,IAAI,MAAM,gBAAgB;EAClC;AAEA,QAAM,OAAO,SAAS,EAAE,CAAC,GAAG,EAAE;AAC9B,QAAM,QAAQ,SAAS,EAAE,CAAC,GAAG,EAAE,IAAI;AACnC,QAAM,OAAO,SAAS,EAAE,CAAC,GAAG,EAAE;AAC9B,QAAMD,QAAO,SAAS,EAAE,CAAC,GAAG,EAAE;AAC9B,QAAMC,UAAS,SAAS,EAAE,CAAC,GAAG,EAAE;AAChC,QAAMC,UAAS,SAAS,EAAE,CAAC,GAAG,EAAE;AAChC,QAAM,cAAc,SAAS,EAAE,CAAC,EAAE,MAAM,GAAG,EAAE,GAAG,EAAE;AAElD,SAAO,IAAI,KAAK,KAAK,IAAI,MAAM,OAAO,MAAMF,OAAMC,SAAQC,SAAQ,WAAW,CAAC;AAChF;;;ACXM,IAAO,eAAP,MAAO,cAAY;EAChB;EACA;EACA;EAEP,YAAa,KAAiBC,QAAmB,cAAkB;AACjE,QAAI,EAAE,eAAe,aAAa;AAChC,YAAM,IAAI,MAAM,0BAA0B;IAC5C;AAEA,QAAI,EAAEA,kBAAiB,aAAa;AAClC,YAAM,IAAI,MAAM,4BAA4B;IAC9C;AAEA,SAAK,MAAM;AACX,SAAK,QAAQA;AACb,SAAK,eAAe;EACtB;EAEA,YAAS;AACP,WAAO,OAAO,OAAO,KAAK,iBAAgB,CAAE;EAC9C;;;;EAKA,mBAAgB;AACd,WAAO;MACL,KAAK,KAAK;MACV,OAAO,KAAK;MACZ,cAAoB,UAAU,KAAK,YAAY;;EAEnD;;;;EAKA,OAAO,YAAa,KAAgC;AAClD,UAAM,MAAM,OAAO,OAAO,GAAG;AAE7B,WAAO,IAAI,cAAa,IAAI,KAAK,IAAI,OAAO,IAAI,KAAK,IAAI,YAAY,CAAC;EACxE;;;;EAKA,OAAO,iBAAkB,KAAW;AAClC,UAAM,eAAqB,aAAa,IAAI,YAAY;AAExD,QAAI,IAAI,OAAO,MAAM;AACnB,YAAM,IAAI,MAAM,sCAAsC;IACxD;AAEA,QAAI,IAAI,SAAS,MAAM;AACrB,YAAM,IAAI,MAAM,wCAAwC;IAC1D;AAEA,UAAM,MAAM,IAAI,cACd,IAAI,KAAK,IAAI,OAAO,YAAY;AAGlC,WAAO;EACT;;;;AC7FI,IAAO,aAAP,cAA0B,MAAK;EACnC,YAAaC,WAAU,eAAa;AAClC,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAMI,IAAO,qBAAP,cAAkC,MAAK;EAC3C,YAAaA,WAAU,kBAAgB;AACrC,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;AAMI,IAAO,uBAAP,cAAoC,MAAK;EAC7C,YAAaA,WAAU,8CAA4C;AACjE,UAAMA,QAAO;AACb,SAAK,OAAO;EACd;;;;ACdI,IAAWC;CAAjB,SAAiBA,SAAM;AACrB,MAAI;AAES,EAAAA,QAAA,QAAQ,MAAoB;AACvC,QAAI,UAAU,MAAM;AAClB,eAAS,QAAgB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAC7C,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAI,IAAI,OAAO,MAAM;AACnB,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,GAAG;QACjB;AAEA,YAAI,IAAI,SAAS,MAAM;AACrB,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,KAAK;QACnB;AAEA,YAAI,IAAI,UAAU,MAAM;AACtB,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,MAAM;QACpB;AAEA,YAAI,IAAI,aAAa,MAAM;AACzB,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,SAAS;QACvB;AAEA,YAAI,IAAI,gBAAgB,MAAM;AAC5B,YAAE,OAAO,EAAE;AACX,YAAE,OAAO,IAAI,YAAY;QAC3B;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQC,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW,CAAA;AAEjB,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,MAAM,OAAO,MAAK;AACtB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,QAAQ,OAAO,MAAK;AACxB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,SAAS,OAAO,MAAK;AACzB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,YAAY,OAAO,MAAK;AAC5B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,eAAe,OAAO,OAAM;AAChC;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAD,QAAA,SAAS,CAAC,QAAoC;AACzD,WAAO,cAAc,KAAKA,QAAO,MAAK,CAAE;EAC1C;AAEa,EAAAA,QAAA,SAAS,CAAC,KAAkC,SAAwC;AAC/F,WAAO,cAAc,KAAKA,QAAO,MAAK,GAAI,IAAI;EAChD;AACF,GAxFiBA,YAAAA,UAAM,CAAA,EAAA;AA0FvB,IAAY;CAAZ,SAAYE,cAAW;AACrB,EAAAA,aAAA,WAAA,IAAA;AACA,EAAAA,aAAA,WAAA,IAAA;AACA,EAAAA,aAAA,cAAA,IAAA;AACA,EAAAA,aAAA,eAAA,IAAA;AACA,EAAAA,aAAA,WAAA,IAAA;AACA,EAAAA,aAAA,MAAA,IAAA;AACF,GAPY,gBAAA,cAAW,CAAA,EAAA;AASvB,IAAK;CAAL,SAAKC,sBAAmB;AACtB,EAAAA,qBAAAA,qBAAA,WAAA,IAAA,CAAA,IAAA;AACA,EAAAA,qBAAAA,qBAAA,WAAA,IAAA,CAAA,IAAA;AACA,EAAAA,qBAAAA,qBAAA,cAAA,IAAA,CAAA,IAAA;AACA,EAAAA,qBAAAA,qBAAA,eAAA,IAAA,CAAA,IAAA;AACA,EAAAA,qBAAAA,qBAAA,WAAA,IAAA,CAAA,IAAA;AACA,EAAAA,qBAAAA,qBAAA,MAAA,IAAA,CAAA,IAAA;AACF,GAPK,wBAAA,sBAAmB,CAAA,EAAA;CASxB,SAAiBD,cAAW;AACb,EAAAA,aAAA,QAAQ,MAAyB;AAC5C,WAAO,YAAyB,mBAAmB;EACrD;AACF,GAJiB,gBAAA,cAAW,CAAA,EAAA;AAK5B,IAAY;CAAZ,SAAYE,iBAAc;AACxB,EAAAA,gBAAA,eAAA,IAAA;AACA,EAAAA,gBAAA,WAAA,IAAA;AACA,EAAAA,gBAAA,aAAA,IAAA;AACA,EAAAA,gBAAA,gBAAA,IAAA;AACF,GALY,mBAAA,iBAAc,CAAA,EAAA;AAO1B,IAAK;CAAL,SAAKC,yBAAsB;AACzB,EAAAA,wBAAAA,wBAAA,eAAA,IAAA,CAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,WAAA,IAAA,CAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,aAAA,IAAA,CAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,gBAAA,IAAA,CAAA,IAAA;AACF,GALK,2BAAA,yBAAsB,CAAA,EAAA;CAO3B,SAAiBD,iBAAc;AAChB,EAAAA,gBAAA,QAAQ,MAA4B;AAC/C,WAAO,YAA4B,sBAAsB;EAC3D;AACF,GAJiB,mBAAA,iBAAc,CAAA,EAAA;AAWzB,IAAW;CAAjB,SAAiBE,WAAQ;AACvB,MAAI;AAES,EAAAA,UAAA,QAAQ,MAAsB;AACzC,QAAI,UAAU,MAAM;AAClB,eAAS,QAAkB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAC/C,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAK,IAAI,MAAM,QAAQ,IAAI,GAAG,aAAa,GAAI;AAC7C,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,EAAE;QAChB;AAEA,YAAI,IAAI,cAAc,MAAM;AAC1B,qBAAWC,UAAS,IAAI,YAAY;AAClC,cAAE,OAAO,EAAE;AACX,cAAE,MAAMA,MAAK;UACf;QACF;AAEA,YAAI,IAAI,cAAc,MAAM;AAC1B,YAAE,OAAO,EAAE;AACX,yBAAe,MAAK,EAAG,OAAO,IAAI,YAAY,CAAC;QACjD;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQN,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,IAAI,MAAgB,CAAC;UACrB,YAAY,CAAA;;AAGd,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,KAAK,OAAO,MAAK;AACrB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,KAAK,QAAQ,cAAc,QAAQ,IAAI,WAAW,WAAW,KAAK,OAAO,YAAY;AACvF,sBAAM,IAAI,eAAe,6DAA6D;cACxF;AAEA,kBAAI,WAAW,KAAK,OAAO,MAAK,CAAE;AAClC;YACF;YACA,KAAK,GAAG;AACN,kBAAI,aAAa,eAAe,MAAK,EAAG,OAAO,MAAM;AACrD;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAK,UAAA,SAAS,CAAC,QAAsC;AAC3D,WAAO,cAAc,KAAKA,UAAS,MAAK,CAAE;EAC5C;AAEa,EAAAA,UAAA,SAAS,CAAC,KAAkC,SAA4C;AACnG,WAAO,cAAc,KAAKA,UAAS,MAAK,GAAI,IAAI;EAClD;AACF,GA/EiB,aAAA,WAAQ,CAAA,EAAA;AA0FnB,IAAWE;CAAjB,SAAiBA,UAAO;AACtB,MAAI;AAES,EAAAA,SAAA,QAAQ,MAAqB;AACxC,QAAI,UAAU,MAAM;AAClB,eAAS,QAAiB,CAAC,KAAK,GAAG,OAAO,CAAA,MAAM;AAC9C,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,KAAI;QACR;AAEA,YAAI,IAAI,QAAQ,QAAQ,oBAAoB,IAAI,IAAI,MAAM,GAAG;AAC3D,YAAE,OAAO,CAAC;AACV,sBAAY,MAAK,EAAG,OAAO,IAAI,MAAM,CAAC;QACxC;AAEA,YAAI,IAAI,gBAAgB,MAAM;AAC5B,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,YAAY;QAC1B;AAEA,YAAI,IAAI,OAAO,MAAM;AACnB,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,GAAG;QACjB;AAEA,YAAI,IAAI,UAAU,MAAM;AACtB,YAAE,OAAO,EAAE;AACX,YAAE,MAAM,IAAI,MAAM;QACpB;AAEA,YAAI,IAAI,UAAU,MAAM;AACtB,qBAAWD,UAAS,IAAI,QAAQ;AAC9B,cAAE,OAAO,EAAE;AACX,qBAAS,MAAK,EAAG,OAAOA,QAAO,CAAC;UAClC;QACF;AAEA,YAAI,IAAI,aAAa,MAAM;AACzB,qBAAWA,UAAS,IAAI,WAAW;AACjC,cAAE,OAAO,EAAE;AACX,qBAAS,MAAK,EAAG,OAAOA,QAAO,CAAC;UAClC;QACF;AAEA,YAAI,KAAK,oBAAoB,OAAO;AAClC,YAAE,OAAM;QACV;MACF,GAAG,CAAC,QAAQN,UAAQ,OAAO,CAAA,MAAM;AAC/B,cAAM,MAAW;UACf,MAAM,YAAY;UAClB,QAAQ,CAAA;UACR,WAAW,CAAA;;AAGb,cAAM,MAAMA,YAAU,OAAO,OAAO,MAAM,OAAO,MAAMA;AAEvD,eAAO,OAAO,MAAM,KAAK;AACvB,gBAAM,MAAM,OAAO,OAAM;AAEzB,kBAAQ,QAAQ,GAAG;YACjB,KAAK,GAAG;AACN,kBAAI,OAAO,YAAY,MAAK,EAAG,OAAO,MAAM;AAC5C;YACF;YACA,KAAK,IAAI;AACP,kBAAI,eAAe,OAAO,MAAK;AAC/B;YACF;YACA,KAAK,GAAG;AACN,kBAAI,MAAM,OAAO,MAAK;AACtB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,SAAS,OAAO,MAAK;AACzB;YACF;YACA,KAAK,GAAG;AACN,kBAAI,KAAK,QAAQ,UAAU,QAAQ,IAAI,OAAO,WAAW,KAAK,OAAO,QAAQ;AAC3E,sBAAM,IAAI,eAAe,yDAAyD;cACpF;AAEA,kBAAI,OAAO,KAAK,SAAS,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;gBAC/D,QAAQ,KAAK,QAAQ;eACtB,CAAC;AACF;YACF;YACA,KAAK,GAAG;AACN,kBAAI,KAAK,QAAQ,aAAa,QAAQ,IAAI,UAAU,WAAW,KAAK,OAAO,WAAW;AACpF,sBAAM,IAAI,eAAe,4DAA4D;cACvF;AAEA,kBAAI,UAAU,KAAK,SAAS,MAAK,EAAG,OAAO,QAAQ,OAAO,OAAM,GAAI;gBAClE,QAAQ,KAAK,QAAQ;eACtB,CAAC;AACF;YACF;YACA,SAAS;AACP,qBAAO,SAAS,MAAM,CAAC;AACvB;YACF;UACF;QACF;AAEA,eAAO;MACT,CAAC;IACH;AAEA,WAAO;EACT;AAEa,EAAAO,SAAA,SAAS,CAAC,QAAqC;AAC1D,WAAO,cAAc,KAAKA,SAAQ,MAAK,CAAE;EAC3C;AAEa,EAAAA,SAAA,SAAS,CAAC,KAAkC,SAA0C;AACjG,WAAO,cAAc,KAAKA,SAAQ,MAAK,GAAI,IAAI;EACjD;AACF,GArHiBA,aAAAA,WAAO,CAAA,EAAA;;;ACtOlB,SAAU,eAAgB,QAA0BC,WAA2B,CAAA,GAAE;AACrF,QAAM,QAAwB;IAC5B,GAAG;IACH,MAAM;IACN,MAAM;IACN,aAAa,OAAO;IACpB,aAAa,OAAO;;AAGtB,EAAAA,SAAQ,aAAa,IAAI,YAAY,4BAA4B,EAAE,QAAQ,MAAK,CAAE,CAAC;AAEnF,SAAO;AACT;AAWM,SAAU,kBAAmB,QAAiCA,WAA2B,CAAA,GAAE;AAC/F,QAAM,QAA2B;IAC/B,GAAG;IACH,MAAM;IACN,MAAM;IACN,aAAa,OAAO;IACpB,QAAQ,OAAO,UAAU,CAAA;IACzB,WAAW,OAAO,aAAa,CAAA;;AAGjC,EAAAA,SAAQ,aAAa,IAAI,YAAY,+BAA+B,EAAE,QAAQ,MAAK,CAAE,CAAC;AAEtF,SAAO;AACT;AAQM,SAAU,eAAgB,QAA8BA,WAA2B,CAAA,GAAE;AACzF,QAAM,QAAwB;IAC5B,GAAG;IACH,MAAM;IACN,MAAM;;AAGR,EAAAA,SAAQ,aAAa,IAAI,YAAY,4BAA4B,EAAE,QAAQ,MAAK,CAAE,CAAC;AAEnF,SAAO;AACT;AAQM,SAAU,gBAAiB,QAA0BA,WAA2B,CAAA,GAAE;AACtF,QAAM,QAAyB;IAC7B,GAAG;IACH,MAAM;IACN,MAAM;;AAGR,EAAAA,SAAQ,aAAa,IAAI,YAAY,6BAA6B,EAAE,QAAQ,MAAK,CAAE,CAAC;AAEpF,SAAO;AACT;AAQM,SAAU,cAAe,QAA6BA,WAA2B,CAAA,GAAE;AACvF,QAAM,QAAuB;IAC3B,GAAG;IACH,MAAM;IACN,MAAM;;AAGR,EAAAA,SAAQ,aAAa,IAAI,YAAY,0BAA0B,EAAE,QAAQ,MAAK,CAAE,CAAC;AAEjF,SAAO;AACT;AAQM,SAAU,WAAY,QAA0BA,WAA2B,CAAA,GAAE;AACjF,QAAM,QAAoB;IACxB,GAAG;IACH,MAAM;IACN,MAAM;;AAGR,EAAAA,SAAQ,aAAa,IAAI,YAAY,uBAAuB,EAAE,QAAQ,MAAK,CAAE,CAAC;AAE9E,SAAO;AACT;AAwBM,SAAU,cAAe,QAA6BC,WAA2B,CAAA,GAAE;AACvF,QAAM,QAAuB;IAC3B,GAAG;IACH,MAAM;IACN,MAAM;;AAGR,EAAAA,SAAQ,aAAa,IAAI,YAAY,2BAA2B,EAAE,QAAQ,MAAK,CAAE,CAAC;AAElF,SAAO;AACT;AAMM,SAAU,eAAgB,QAA8BA,WAA2B,CAAA,GAAE;AACzF,QAAM,QAAwB;IAC5B,GAAG;IACH,MAAM;IACN,MAAM;;AAGR,EAAAA,SAAQ,aAAa,IAAI,YAAY,4BAA4B,EAAE,QAAQ,MAAK,CAAE,CAAC;AAEnF,SAAO;AACT;;;ACjKM,SAAU,WAAYC,YAAsB,GAAe,SAAqB;AACpF,MAAI,QAAQ,WAAW,GAAG;AACxB,UAAM,IAAI,uBAAuB,kBAAkB;EACrD;AAEA,QAAM,OAAO,SAAmB,CAAC;AACjC,QAAM,QAAQ,KAAK,MAAM,GAAG;AAE5B,MAAI,MAAM,SAAS,GAAG;AACpB,UAAM,IAAI,uBAAuB,8CAA8C;EACjF;AAEA,QAAM,WAAWA,WAAU,MAAM,CAAC,EAAE,SAAQ,CAAE;AAE9C,MAAI,YAAY,MAAM;AACpB,UAAM,IAAI,qBAAqB,iDAAiD,MAAM,CAAC,CAAC,GAAG;EAC7F;AAEA,MAAI,QAAQ,WAAW,GAAG;AACxB,WAAO;EACT;AAEA,SAAO,SAAS,GAAG,OAAO;AAC5B;AAOA,SAAS,UAAW,GAAe,SAAqB;AACtD,SAAO;AACT;AAEO,IAAM,YAAuB;EAClC,IAAI;;;;AC9BN,eAAsB,aAAcC,aAAwB,QAAsBC,UAAsB;AACtG,QAAM,MAAM,OAAO;AACnB,QAAM,YAAY,SAAmB,GAAG;AACxC,QAAM,QAAQ,UAAU,MAAM,GAAG;AAEjC,MAAI,MAAM,SAAS,GAAG;AAEpB;EACF;AAEA,QAAM,YAAYD,YAAW,MAAM,CAAC,EAAE,SAAQ,CAAE;AAEhD,MAAI,aAAa,MAAM;AACrB,UAAM,IAAI,uBAAuB,wCAAwC,MAAM,CAAC,CAAC,GAAG;EACtF;AAEA,QAAM,UAAU,KAAK,OAAO,OAAOC,QAAO;AAC5C;AAWA,IAAM,0BAA0B,OAAO,KAAiBC,YAAuBD,aAAyC;AACtH,MAAI,EAAE,eAAe,aAAa;AAChC,UAAM,IAAI,uBAAuB,4BAA4B;EAC/D;AAEA,MAAI,IAAI,aAAa,GAAG;AACtB,UAAM,IAAI,uBAAuB,2BAA2B;EAC9D;AAEA,QAAM,SAAS,SAAmB,IAAI,SAAS,GAAG,CAAC,CAAC;AAEpD,MAAI,WAAW,QAAQ;AACrB,UAAM,IAAI,uBAAuB,gCAAgC;EACnE;AAEA,QAAM,SAAS,sBAAsBC,UAAS;AAC9C,QAAM,UAAU,IAAI,MAAM,CAAC;AAE3B,MAAI,CAAC,OAAiB,SAAS,OAAO,YAAW,EAAG,KAAK,GAAG;AAC1D,UAAM,IAAI,uBAAuB,yCAAyC;EAC5E;AACF;AAEO,IAAM,aAAyB;EACpC,IAAI;;;;ACjEC,IAAMC,UAAQ,IAAI,WAAW,CAAC;AAW/B,SAAUC,SAAQ,IAAgB,IAAc;AACpD,MAAI,OAAO,IAAI;AAAE,WAAO;EAAK;AAC7B,MAAI,GAAG,eAAe,GAAG,YAAY;AACnC,WAAO;EACT;AAEA,WAAS,KAAK,GAAG,KAAK,GAAG,YAAY,MAAM;AACzC,QAAI,GAAG,EAAE,MAAM,GAAG,EAAE,GAAG;AACrB,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEM,SAAUC,SAAQ,GAA6C;AACnE,MAAI,aAAa,cAAc,EAAE,YAAY,SAAS,cAAc;AAAE,WAAO;EAAE;AAC/E,MAAI,aAAa,aAAa;AAAE,WAAO,IAAI,WAAW,CAAC;EAAE;AACzD,MAAI,YAAY,OAAO,CAAC,GAAG;AACzB,WAAO,IAAI,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU;EAC5D;AACA,QAAM,IAAI,MAAM,mCAAmC;AACrD;;;ACvBA,SAASC,OAAM,UAAUC,OAAI;AAC3B,MAAI,SAAS,UAAU,KAAK;AAAE,UAAM,IAAI,UAAU,mBAAmB;EAAE;AACvE,MAAI,WAAW,IAAI,WAAW,GAAG;AACjC,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,aAAS,CAAC,IAAI;EAChB;AACA,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,QAAI,IAAI,SAAS,OAAO,CAAC;AACzB,QAAI,KAAK,EAAE,WAAW,CAAC;AACvB,QAAI,SAAS,EAAE,MAAM,KAAK;AAAE,YAAM,IAAI,UAAU,IAAI,eAAe;IAAE;AACrE,aAAS,EAAE,IAAI;EACjB;AACA,MAAI,OAAO,SAAS;AACpB,MAAI,SAAS,SAAS,OAAO,CAAC;AAC9B,MAAI,SAAS,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,GAAG;AAC1C,MAAI,UAAU,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI;AAI3C,WAASC,SAAQ,QAAM;AAErB,QAAI,kBAAkB;AAAY;aAAW,YAAY,OAAO,MAAM,GAAG;AACvE,eAAS,IAAI,WAAW,OAAO,QAAQ,OAAO,YAAY,OAAO,UAAU;IAC7E,WAAW,MAAM,QAAQ,MAAM,GAAG;AAChC,eAAS,WAAW,KAAK,MAAM;IACjC;AACA,QAAI,EAAE,kBAAkB,aAAa;AAAE,YAAM,IAAI,UAAU,qBAAqB;IAAE;AAClF,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO;IAAG;AAErC,QAAI,SAAS;AACb,QAAIC,WAAS;AACb,QAAI,SAAS;AACb,QAAI,OAAO,OAAO;AAClB,WAAO,WAAW,QAAQ,OAAO,MAAM,MAAM,GAAG;AAC9C;AACA;IACF;AAEA,QAAI,QAAS,OAAO,UAAU,UAAU,MAAO;AAC/C,QAAI,MAAM,IAAI,WAAW,IAAI;AAE7B,WAAO,WAAW,MAAM;AACtB,UAAI,QAAQ,OAAO,MAAM;AAEzB,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,MAAM,IAAI,GAAG,MAAO;AAC9B,YAAI,GAAG,IAAK,QAAQ,SAAU;AAC9B,gBAAS,QAAQ,SAAU;MAC7B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,IAAI,GAAG,MAAM,GAAG;AACrC;IACF;AAEA,QAAI,MAAM,OAAO,OAAO,MAAM;AAC9B,WAAO,MAAM,MAAM,EAAE,KAAK;AAAE,aAAO,SAAS,OAAO,IAAI,GAAG,CAAC;IAAG;AAC9D,WAAO;EACT;AAIA,WAAS,aAAc,QAAM;AAC3B,QAAI,OAAO,WAAW,UAAU;AAAE,YAAM,IAAI,UAAU,iBAAiB;IAAE;AACzE,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO,IAAI,WAAU;IAAG;AACnD,QAAI,MAAM;AAEV,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,SAAS;AACb,QAAIA,WAAS;AACb,WAAO,OAAO,GAAG,MAAM,QAAQ;AAC7B;AACA;IACF;AAEA,QAAI,QAAU,OAAO,SAAS,OAAO,SAAU,MAAO;AACtD,QAAI,OAAO,IAAI,WAAW,IAAI;AAE9B,WAAO,OAAO,GAAG,GAAG;AAElB,UAAI,QAAQ,SAAS,OAAO,WAAW,GAAG,CAAC;AAE3C,UAAI,UAAU,KAAK;AAAE;MAAO;AAC5B,UAAIC,KAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAKA,KAAID,aAAY,QAAQ,IAAK,OAAOC,MAAK;AAChF,iBAAU,OAAO,KAAK,GAAG,MAAO;AAChC,aAAK,GAAG,IAAK,QAAQ,QAAS;AAC9B,gBAAS,QAAQ,QAAS;MAC5B;AACA,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;MAAE;AACrD,MAAAD,WAASC;AACT;IACF;AAEA,QAAI,OAAO,GAAG,MAAM,KAAK;AAAE;IAAO;AAElC,QAAI,MAAM,OAAOD;AACjB,WAAO,QAAQ,QAAQ,KAAK,GAAG,MAAM,GAAG;AACtC;IACF;AACA,QAAI,MAAM,IAAI,WAAW,UAAU,OAAO,IAAI;AAC9C,QAAIE,KAAI;AACR,WAAO,QAAQ,MAAM;AACnB,UAAIA,IAAG,IAAI,KAAK,KAAK;IACvB;AACA,WAAO;EACT;AAIA,WAASC,SAAQC,SAAM;AACrB,QAAI,SAAS,aAAaA,OAAM;AAChC,QAAI,QAAQ;AAAE,aAAO;IAAO;AAC5B,UAAM,IAAI,MAAM,OAAON,KAAI,YAAY;EACzC;AACA,SAAO;IACL,QAAQC;IACR;IACA,QAAQI;;AAEZ;AACA,IAAIE,QAAMR;AAEV,IAAIS,oCAAkCD;AAEtC,IAAAE,mBAAeD;;;ACjIf,IAAME,YAAN,MAAa;EACF;EACA;EACA;EAET,YAAaC,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;EACpB;EAEA,OAAQ,OAAiB;AACvB,QAAI,iBAAiB,YAAY;AAC/B,aAAO,GAAG,KAAK,MAAM,GAAG,KAAK,WAAW,KAAK,CAAC;IAChD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;;AAQF,IAAMC,YAAN,MAAa;EACF;EACA;EACA;EACQ;EAEjB,YAAaD,OAAY,QAAgB,YAAoB;AAC3D,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,UAAM,kBAAkB,OAAO,YAAY,CAAC;AAE5C,QAAI,oBAAoB,QAAW;AACjC,YAAM,IAAI,MAAM,0BAA0B;IAC5C;AACA,SAAK,kBAAkB;AACvB,SAAK,aAAa;EACpB;EAEA,OAAQ,MAAY;AAClB,QAAI,OAAO,SAAS,UAAU;AAC5B,UAAI,KAAK,YAAY,CAAC,MAAM,KAAK,iBAAiB;AAChD,cAAM,MAAM,qCAAqC,KAAK,UAAU,IAAI,CAAC,KAAK,KAAK,IAAI,+CAA+C,KAAK,MAAM,EAAE;MACjJ;AACA,aAAO,KAAK,WAAW,KAAK,MAAM,KAAK,OAAO,MAAM,CAAC;IACvD,OAAO;AACL,YAAM,MAAM,mCAAmC;IACjD;EACF;EAEA,GAAgC,SAAmE;AACjG,WAAOE,KAAG,MAAM,OAAO;EACzB;;AAKF,IAAMC,oBAAN,MAAqB;EACV;EAET,YAAa,UAA0B;AACrC,SAAK,WAAW;EAClB;EAEA,GAAiC,SAAmE;AAClG,WAAOD,KAAG,MAAM,OAAO;EACzB;EAEA,OAAQ,OAAa;AACnB,UAAM,SAAS,MAAM,CAAC;AACtB,UAAM,UAAU,KAAK,SAAS,MAAM;AACpC,QAAI,WAAW,MAAM;AACnB,aAAO,QAAQ,OAAO,KAAK;IAC7B,OAAO;AACL,YAAM,WAAW,qCAAqC,KAAK,UAAU,KAAK,CAAC,+BAA+B,OAAO,KAAK,KAAK,QAAQ,CAAC,gBAAgB;IACtJ;EACF;;AAGI,SAAUA,KAAyC,MAA+C,OAA8C;AACpJ,SAAO,IAAIC,kBAAgB;IACzB,GAAI,KAAK,YAAY,EAAE,CAAE,KAA2B,MAAM,GAAG,KAAI;IACjE,GAAI,MAAM,YAAY,EAAE,CAAE,MAA4B,MAAM,GAAG,MAAK;GAClD;AACtB;AAEM,IAAOC,UAAP,MAAY;EACP;EACA;EACA;EACA;EACA;EACA;EAET,YAAaJ,OAAY,QAAgB,YAAsB,YAAoB;AACjF,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,UAAU,IAAID,UAAQC,OAAM,QAAQ,UAAU;AACnD,SAAK,UAAU,IAAIC,UAAQD,OAAM,QAAQ,UAAU;EACrD;EAEA,OAAQ,OAAiB;AACvB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;EAEA,OAAQ,OAAa;AACnB,WAAO,KAAK,QAAQ,OAAO,KAAK;EAClC;;AAGI,SAAUK,OAAmD,EAAE,MAAAL,OAAM,QAAQ,QAAAM,UAAQ,QAAAC,SAAM,GAAsE;AACrK,SAAO,IAAIH,QAAMJ,OAAM,QAAQM,UAAQC,QAAM;AAC/C;AAEM,SAAUC,QAAoD,EAAE,MAAAR,OAAM,QAAQ,UAAAS,UAAQ,GAAoD;AAC9I,QAAM,EAAE,QAAAH,UAAQ,QAAAC,SAAM,IAAKG,iBAAMD,WAAUT,KAAI;AAC/C,SAAOK,OAAK;IACV;IACA,MAAAL;IACA,QAAAM;IACA,QAAQ,CAAC,SAA6BK,SAAOJ,SAAO,IAAI,CAAC;GAC1D;AACH;AAEA,SAASA,SAAQK,SAAgB,aAAqC,aAAqBZ,OAAY;AAErG,MAAI,MAAMY,QAAO;AACjB,SAAOA,QAAO,MAAM,CAAC,MAAM,KAAK;AAC9B,MAAE;EACJ;AAGA,QAAM,MAAM,IAAI,WAAY,MAAM,cAAc,IAAK,CAAC;AAGtD,MAAI,OAAO;AACX,MAAI,SAAS;AACb,MAAI,UAAU;AACd,WAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAE5B,UAAMC,SAAQ,YAAYD,QAAO,CAAC,CAAC;AACnC,QAAIC,WAAU,QAAW;AACvB,YAAM,IAAI,YAAY,OAAOb,KAAI,YAAY;IAC/C;AAGA,aAAU,UAAU,cAAea;AACnC,YAAQ;AAGR,QAAI,QAAQ,GAAG;AACb,cAAQ;AACR,UAAI,SAAS,IAAI,MAAQ,UAAU;IACrC;EACF;AAGA,MAAI,QAAQ,gBAAgB,MAAQ,UAAW,IAAI,UAAY,GAAG;AAChE,UAAM,IAAI,YAAY,wBAAwB;EAChD;AAEA,SAAO;AACT;AAEA,SAASP,SAAQ,MAAkBG,WAAkB,aAAmB;AACtE,QAAM,MAAMA,UAASA,UAAS,SAAS,CAAC,MAAM;AAC9C,QAAM,QAAQ,KAAK,eAAe;AAClC,MAAI,MAAM;AAEV,MAAI,OAAO;AACX,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAEpC,aAAU,UAAU,IAAK,KAAK,CAAC;AAC/B,YAAQ;AAGR,WAAO,OAAO,aAAa;AACzB,cAAQ;AACR,aAAOA,UAAS,OAAQ,UAAU,IAAK;IACzC;EACF;AAGA,MAAI,SAAS,GAAG;AACd,WAAOA,UAAS,OAAQ,UAAW,cAAc,IAAM;EACzD;AAGA,MAAI,KAAK;AACP,YAAS,IAAI,SAAS,cAAe,OAAO,GAAG;AAC7C,aAAO;IACT;EACF;AAEA,SAAO;AACT;AAEA,SAASK,oBAAmBL,WAAgB;AAE1C,QAAM,cAAsC,CAAA;AAC5C,WAAS,IAAI,GAAG,IAAIA,UAAS,QAAQ,EAAE,GAAG;AACxC,gBAAYA,UAAS,CAAC,CAAC,IAAI;EAC7B;AACA,SAAO;AACT;AAKM,SAAUM,UAAsD,EAAE,MAAAf,OAAM,QAAQ,aAAa,UAAAS,UAAQ,GAAyE;AAClL,QAAM,cAAcK,oBAAkBL,SAAQ;AAC9C,SAAOJ,OAAK;IACV;IACA,MAAAL;IACA,OAAQ,OAAiB;AACvB,aAAOM,SAAO,OAAOG,WAAU,WAAW;IAC5C;IACA,OAAQ,OAAa;AACnB,aAAOF,SAAO,OAAO,aAAa,aAAaP,KAAI;IACrD;GACD;AACH;;;AC9OO,IAAMgB,UAASC,UAAQ;EAC5B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMC,eAAcD,UAAQ;EACjC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAME,aAAYF,UAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMG,kBAAiBH,UAAQ;EACpC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMI,aAAYJ,UAAQ;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMK,kBAAiBL,UAAQ;EACpC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMM,gBAAeN,UAAQ;EAClC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMO,qBAAoBP,UAAQ;EACvC,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;AAEM,IAAMQ,WAAUR,UAAQ;EAC7B,QAAQ;EACR,MAAM;EACN,UAAU;EACV,aAAa;CACd;;;AC7DM,IAAMS,UAASC,QAAM;EAC1B,QAAQ;EACR,MAAM;EACN,UAAU;CACX;AAEM,IAAMC,eAAcD,QAAM;EAC/B,QAAQ;EACR,MAAM;EACN,UAAU;CACX;;;ACVM,IAAME,cAAYC,QAAM;EAC7B,MAAM;EACN,QAAQ;EACR,UAAU;CACX;AAEM,IAAMC,iBAAeD,QAAM;EAChC,MAAM;EACN,QAAQ;EACR,UAAU;CACX;;;ACXD,IAAIE,aAAWC;AAEf,IAAIC,QAAM;AAAV,IACIC,SAAO;AADX,IAEIC,WAAS,CAACD;AAFd,IAGIE,QAAM,KAAK,IAAI,GAAG,EAAE;AAOxB,SAASJ,SAAO,KAAK,KAAK,QAAM;AAC9B,QAAM,OAAO,CAAA;AACb,WAAS,UAAU;AACnB,MAAI,YAAY;AAEhB,SAAM,OAAOI,OAAK;AAChB,QAAI,QAAQ,IAAK,MAAM,MAAQH;AAC/B,WAAO;EACT;AACA,SAAM,MAAME,UAAQ;AAClB,QAAI,QAAQ,IAAK,MAAM,MAAQF;AAC/B,aAAS;EACX;AACA,MAAI,MAAM,IAAI,MAAM;AAGpB,EAAAD,SAAO,QAAQ,SAAS,YAAY;AAEpC,SAAO;AACT;AAEA,IAAIK,WAASC;AAEb,IAAIC,UAAQ;AAAZ,IACIC,WAAS;AAMb,SAASF,OAAK,KAAK,QAAM;AACvB,MAAI,MAAS,GACT,SAAS,UAAU,GACnB,QAAS,GACT,UAAU,QACV,GACA,IAAI,IAAI;AAEZ,KAAG;AACD,QAAI,WAAW,GAAG;AAEhB,MAAAA,OAAK,QAAQ;AACb,YAAM,IAAI,WAAW,yBAAyB;IAChD;AACA,QAAI,IAAI,SAAS;AACjB,WAAO,QAAQ,MACV,IAAIE,aAAW,SACf,IAAIA,YAAU,KAAK,IAAI,GAAG,KAAK;AACpC,aAAS;EACX,SAAS,KAAKD;AAGd,EAAAD,OAAK,QAAQ,UAAU;AAEvB,SAAO;AACT;AAEA,IAAIG,OAAK,KAAK,IAAI,GAAI,CAAC;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AACvB,IAAIC,OAAK,KAAK,IAAI,GAAG,EAAE;AAEvB,IAAIC,WAAS,SAAgCC,QAAK;AAChD,SACEA,SAAQV,OAAK,IACbU,SAAQT,OAAK,IACbS,SAAQR,OAAK,IACbQ,SAAQP,OAAK,IACbO,SAAQN,OAAK,IACbM,SAAQL,OAAK,IACbK,SAAQJ,OAAK,IACbI,SAAQH,OAAK,IACbG,SAAQF,OAAK,IACA;AAEjB;AAEA,IAAIG,WAAS;EACT,QAAQrB;EACR,QAAQM;EACR,gBAAgBa;;AAGpB,IAAIG,iBAAeD;AAEnB,IAAAE,mBAAeD;;;ACrGT,SAAUE,SAAQ,MAAkB,SAAS,GAAC;AAClD,QAAMC,SAAOC,iBAAO,OAAO,MAAM,MAAM;AACvC,SAAO,CAACD,QAAMC,iBAAO,OAAO,KAAK;AACnC;AAEM,SAAUC,WAAU,KAAa,QAAoB,SAAS,GAAC;AACnE,EAAAD,iBAAO,OAAO,KAAK,QAAQ,MAAM;AACjC,SAAO;AACT;AAEM,SAAUE,iBAAgB,KAAW;AACzC,SAAOF,iBAAO,eAAe,GAAG;AAClC;;;ACPM,SAAUG,SAA8BC,QAAYC,SAAkB;AAC1E,QAAM,OAAOA,QAAO;AACpB,QAAM,aAAoBC,iBAAeF,MAAI;AAC7C,QAAM,eAAe,aAAoBE,iBAAe,IAAI;AAE5D,QAAM,QAAQ,IAAI,WAAW,eAAe,IAAI;AAChD,EAAOC,WAASH,QAAM,OAAO,CAAC;AAC9B,EAAOG,WAAS,MAAM,OAAO,UAAU;AACvC,QAAM,IAAIF,SAAQ,YAAY;AAE9B,SAAO,IAAIG,SAAOJ,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAKM,SAAUI,SAAQ,WAAqB;AAC3C,QAAM,QAAQC,SAAO,SAAS;AAC9B,QAAM,CAACN,QAAM,UAAU,IAAWK,SAAO,KAAK;AAC9C,QAAM,CAAC,MAAM,YAAY,IAAWA,SAAO,MAAM,SAAS,UAAU,CAAC;AACrE,QAAMJ,UAAS,MAAM,SAAS,aAAa,YAAY;AAEvD,MAAIA,QAAO,eAAe,MAAM;AAC9B,UAAM,IAAI,MAAM,kBAAkB;EACpC;AAEA,SAAO,IAAIG,SAAOJ,QAAM,MAAMC,SAAQ,KAAK;AAC7C;AAEM,SAAUM,SAAQ,GAAoB,GAAU;AACpD,MAAI,MAAM,GAAG;AACX,WAAO;EACT,OAAO;AACL,UAAM,OAAO;AAEb,WACE,EAAE,SAAS,KAAK,QAChB,EAAE,SAAS,KAAK,QAChB,KAAK,iBAAiB,cACtBA,SAAW,EAAE,OAAO,KAAK,KAAK;EAElC;AACF;AAMM,IAAOH,WAAP,MAAa;EACR;EACA;EACA;EACA;;;;EAKT,YAAaJ,QAAY,MAAYC,SAAoB,OAAiB;AACxE,SAAK,OAAOD;AACZ,SAAK,OAAO;AACZ,SAAK,SAASC;AACd,SAAK,QAAQ;EACf;;;;AC1DI,SAAUO,QAA0F,MAASC,QAAmC;AACpJ,QAAM,EAAE,OAAO,SAAAC,SAAO,IAAK;AAC3B,UAAQA,UAAS;IACf,KAAK;AACH,aAAOC,YACL,OACAC,WAAU,IAAI,GACdH,UAAqCI,YAAU,OAAO;IAE1D;AACE,aAAOC,YACL,OACAF,WAAU,IAAI,GACbH,UAAQM,QAAO,OAAwC;EAE9D;AACF;AAYA,IAAMC,UAAQ,oBAAI,QAAO;AAEzB,SAASC,WAAW,KAAoB;AACtC,QAAMA,cAAYD,QAAM,IAAI,GAAG;AAC/B,MAAIC,eAAa,MAAM;AACrB,UAAMA,cAAY,oBAAI,IAAG;AACzB,IAAAD,QAAM,IAAI,KAAKC,WAAS;AACxB,WAAOA;EACT;AACA,SAAOA;AACT;AAEM,IAAOC,OAAP,MAAO,KAAG;EACL;EACA;EACA;EACA;EACA;;;;;;EAOT,YAAaC,UAAkBC,QAAc,WAAqC,OAAiB;AACjG,SAAK,OAAOA;AACZ,SAAK,UAAUD;AACf,SAAK,YAAY;AACjB,SAAK,QAAQ;AAIb,SAAK,GAAG,IAAI;EACd;;;;;;;EAQA,IAAI,QAAK;AACP,WAAO;EACT;;EAGA,IAAI,aAAU;AACZ,WAAO,KAAK,MAAM;EACpB;;EAGA,IAAI,aAAU;AACZ,WAAO,KAAK,MAAM;EACpB;EAEA,OAAI;AACF,YAAQ,KAAK,SAAS;MACpB,KAAK,GAAG;AACN,eAAO;MACT;MACA,KAAK,GAAG;AACN,cAAM,EAAE,MAAAC,QAAM,UAAS,IAAK;AAE5B,YAAIA,WAASC,cAAa;AACxB,gBAAM,IAAI,MAAM,0CAA0C;QAC5D;AAGA,YAAI,UAAU,SAASC,eAAc;AACnC,gBAAM,IAAI,MAAM,oDAAoD;QACtE;AAEA,eACE,KAAI,SACF,SAA6C;MAGnD;MACA,SAAS;AACP,cAAM,MACJ,+BAA+B,KAAK,OAAO,4CAA4C;MAE3F;IACF;EACF;EAEA,OAAI;AACF,YAAQ,KAAK,SAAS;MACpB,KAAK,GAAG;AACN,cAAM,EAAE,MAAAF,QAAM,QAAAG,QAAM,IAAK,KAAK;AAC9B,cAAM,YAAmBC,SAAOJ,QAAMG,OAAM;AAC5C,eACE,KAAI,SAAS,KAAK,MAAM,SAAS;MAErC;MACA,KAAK,GAAG;AACN,eAAO;MACT;MACA,SAAS;AACP,cAAM,MACJ,+BAA+B,KAAK,OAAO,4CAA4C;MAE3F;IACF;EACF;EAEA,OAAQ,OAAc;AACpB,WAAO,KAAI,OAAO,MAAM,KAAK;EAC/B;EAEA,OAAO,OAAsFE,OAA4C,OAAc;AACrJ,UAAM,UAAU;AAChB,WACE,WAAW,QACXA,MAAK,SAAS,QAAQ,QACtBA,MAAK,YAAY,QAAQ,WAClBC,SAAOD,MAAK,WAAW,QAAQ,SAAS;EAEnD;EAEA,SAAUE,QAAmC;AAC3C,WAAOC,QAAO,MAAMD,MAAI;EAC1B;EAEA,SAAM;AACJ,WAAO,EAAE,KAAKC,QAAO,IAAI,EAAC;EAC5B;EAEA,OAAI;AACF,WAAO;EACT;EAES,CAAC,OAAO,WAAW,IAAI;;EAIhC,CAAC,OAAO,IAAI,4BAA4B,CAAC,IAAC;AACxC,WAAO,OAAO,KAAK,SAAQ,CAAE;EAC/B;;;;;;;;;;;EAYA,OAAO,MAAwF,OAA+C;AAC5I,QAAI,SAAS,MAAM;AACjB,aAAO;IACT;AAEA,UAAMC,SAAQ;AACd,QAAIA,kBAAiB,MAAK;AAExB,aAAOA;IACT,WAAYA,OAAM,GAAG,KAAK,QAAQA,OAAM,GAAG,MAAMA,OAAM,SAAUA,OAAM,UAAUA,QAAO;AAMtF,YAAM,EAAE,SAAAV,UAAS,MAAAC,QAAM,WAAW,MAAK,IAAKS;AAC5C,aAAO,IAAI,KACTV,UACAC,QACA,WACA,SAASU,WAAUX,UAASC,QAAM,UAAU,KAAK,CAAC;IAEtD,WAAWS,OAAME,UAAS,MAAM,MAAM;AAIpC,YAAM,EAAE,SAAAZ,UAAS,WAAW,MAAAC,OAAI,IAAKS;AACrC,YAAMN,UAAgBS,SAAO,SAAS;AACtC,aAAO,KAAI,OAAOb,UAASC,QAAMG,OAAM;IACzC,OAAO;AAGL,aAAO;IACT;EACF;;;;;;EAOA,OAAO,OAAsFJ,UAAkBC,QAAcG,SAAgC;AAC3J,QAAI,OAAOH,WAAS,UAAU;AAC5B,YAAM,IAAI,MAAM,uCAAuC;IACzD;AAEA,QAAI,EAAEG,QAAO,iBAAiB,aAAa;AACzC,YAAM,IAAI,MAAM,gBAAgB;IAClC;AAEA,YAAQJ,UAAS;MACf,KAAK,GAAG;AACN,YAAIC,WAASC,cAAa;AACxB,gBAAM,IAAI,MACR,wCAAwCA,YAAW,kBAAkB;QAEzE,OAAO;AACL,iBAAO,IAAI,KAAIF,UAASC,QAAMG,SAAQA,QAAO,KAAK;QACpD;MACF;MACA,KAAK,GAAG;AACN,cAAM,QAAQO,WAAUX,UAASC,QAAMG,QAAO,KAAK;AACnD,eAAO,IAAI,KAAIJ,UAASC,QAAMG,SAAQ,KAAK;MAC7C;MACA,SAAS;AACP,cAAM,IAAI,MAAM,iBAAiB;MACnC;IACF;EACF;;;;EAKA,OAAO,SAAuBA,SAAgD;AAC5E,WAAO,KAAI,OAAO,GAAGF,cAAaE,OAAM;EAC1C;;;;;;;EAQA,OAAO,SAAyDH,QAAYG,SAAgC;AAC1G,WAAO,KAAI,OAAO,GAAGH,QAAMG,OAAM;EACnC;;;;;;;;EASA,OAAO,OAAoF,OAAuD;AAChJ,UAAM,CAAC,KAAK,SAAS,IAAI,KAAI,YAAY,KAAK;AAC9C,QAAI,UAAU,WAAW,GAAG;AAC1B,YAAM,IAAI,MAAM,kBAAkB;IACpC;AACA,WAAO;EACT;;;;;;;;;;EAWA,OAAO,YAA2E,OAAyC;AACzH,UAAM,QAAQ,KAAI,aAAa,KAAK;AACpC,UAAM,aAAa,MAAM,OAAO,MAAM;AACtC,UAAM,iBAAiBU,SACrB,MAAM,SAAS,YAAY,aAAa,MAAM,aAAa,CAAC;AAE9D,QAAI,eAAe,eAAe,MAAM,eAAe;AACrD,YAAM,IAAI,MAAM,kBAAkB;IACpC;AACA,UAAM,cAAc,eAAe,SACjC,MAAM,gBAAgB,MAAM,UAAU;AAExC,UAAMV,UAAS,IAAWW,SACxB,MAAM,eACN,MAAM,YACN,aACA,cAAc;AAEhB,UAAM,MACJ,MAAM,YAAY,IACd,KAAI,SAASX,OAA0C,IACvD,KAAI,SAAS,MAAM,OAAOA,OAAM;AACtC,WAAO,CAAC,KAAwB,MAAM,SAAS,MAAM,IAAI,CAAC;EAC5D;;;;;;;;;;EAWA,OAAO,aAA4E,cAAgD;AACjI,QAAI,SAAS;AACb,UAAM,OAAO,MAAa;AACxB,YAAM,CAAC,GAAGY,QAAM,IAAWH,SAAO,aAAa,SAAS,MAAM,CAAC;AAC/D,gBAAUG;AACV,aAAO;IACT;AAEA,QAAIhB,WAAU,KAAI;AAClB,QAAI,QAAQE;AACZ,QAAIF,aAAsB,IAAI;AAE5B,MAAAA,WAAU;AACV,eAAS;IACX,OAAO;AACL,cAAQ,KAAI;IACd;AAEA,QAAIA,aAAY,KAAKA,aAAY,GAAG;AAClC,YAAM,IAAI,WAAW,uBAAuBA,QAAO,EAAE;IACvD;AAEA,UAAM,aAAa;AACnB,UAAM,gBAAgB,KAAI;AAC1B,UAAM,aAAa,KAAI;AACvB,UAAM,OAAO,SAAS;AACtB,UAAM,gBAAgB,OAAO;AAE7B,WAAO,EAAE,SAAAA,UAAS,OAAO,eAAe,YAAY,eAAe,KAAI;EACzE;;;;;;;EAQA,OAAO,MAA0G,QAAkEQ,QAAmC;AACpN,UAAM,CAAC,QAAQ,KAAK,IAAIS,iBAAgB,QAAQT,MAAI;AAEpD,UAAM,MAAM,KAAI,OAAO,KAAK;AAE5B,QAAI,IAAI,YAAY,KAAK,OAAO,CAAC,MAAM,KAAK;AAC1C,YAAM,MAAM,wDAAwD;IACtE;AAGA,IAAAV,WAAU,GAAG,EAAE,IAAI,QAAQ,MAAM;AAEjC,WAAO;EACT;;AAGF,SAASmB,iBAAqH,QAAkET,QAAmC;AACjO,UAAQ,OAAO,CAAC,GAAG;;IAEjB,KAAK,KAAK;AACR,YAAM,UAAUA,UAAQU;AACxB,aAAO;QACLA,YAAU;QACV,QAAQ,OAAO,GAAGA,YAAU,MAAM,GAAG,MAAM,EAAE;;IAEjD;IACA,KAAKA,YAAU,QAAQ;AACrB,YAAM,UAAUV,UAAQU;AACxB,aAAO,CAACA,YAAU,QAAkB,QAAQ,OAAO,MAAM,CAAC;IAC5D;IACA,KAAKC,QAAO,QAAQ;AAClB,YAAM,UAAUX,UAAQW;AACxB,aAAO,CAACA,QAAO,QAAkB,QAAQ,OAAO,MAAM,CAAC;IACzD;IACA,KAAKC,QAAO,QAAQ;AAClB,YAAM,UAAUZ,UAAQY;AACxB,aAAO,CAACA,QAAO,QAAkB,QAAQ,OAAO,MAAM,CAAC;IACzD;IACA,SAAS;AACP,UAAIZ,UAAQ,MAAM;AAChB,cAAM,MACJ,yFAAyF;MAE7F;AACA,aAAO,CAAC,OAAO,CAAC,GAAaA,OAAK,OAAO,MAAM,CAAC;IAClD;EACF;AACF;AAEA,SAASa,YAAY,OAAmBxB,SAA4BW,QAA+B;AACjG,QAAM,EAAE,OAAM,IAAKA;AACnB,MAAI,WAAWU,YAAU,QAAQ;AAC/B,UAAM,MAAM,8BAA8BV,OAAK,IAAI,WAAW;EAChE;AAEA,QAAM,MAAMX,QAAM,IAAI,MAAM;AAC5B,MAAI,OAAO,MAAM;AACf,UAAMyB,OAAMd,OAAK,OAAO,KAAK,EAAE,MAAM,CAAC;AACtC,IAAAX,QAAM,IAAI,QAAQyB,IAAG;AACrB,WAAOA;EACT,OAAO;AACL,WAAO;EACT;AACF;AAEA,SAASC,YAAoC,OAAmB1B,SAA4BW,QAAkC;AAC5H,QAAM,EAAE,OAAM,IAAKA;AACnB,QAAM,MAAMX,QAAM,IAAI,MAAM;AAC5B,MAAI,OAAO,MAAM;AACf,UAAMyB,OAAMd,OAAK,OAAO,KAAK;AAC7B,IAAAX,QAAM,IAAI,QAAQyB,IAAG;AACrB,WAAOA;EACT,OAAO;AACL,WAAO;EACT;AACF;AAEA,IAAMpB,eAAc;AACpB,IAAMC,gBAAe;AAErB,SAASQ,WAAWX,UAAsBC,QAAc,WAAqB;AAC3E,QAAM,aAAoBuB,iBAAexB,QAAO;AAChD,QAAM,aAAa,aAAoBwB,iBAAevB,MAAI;AAC1D,QAAM,QAAQ,IAAI,WAAW,aAAa,UAAU,UAAU;AAC9D,EAAOwB,WAASzB,UAAS,OAAO,CAAC;AACjC,EAAOyB,WAASxB,QAAM,OAAO,UAAU;AACvC,QAAM,IAAI,WAAW,UAAU;AAC/B,SAAO;AACT;AAEA,IAAMW,aAAY,OAAO,IAAI,kBAAkB;;;ACzcxC,IAAMc,SAAO;;;ACCd,SAAUC,OAAiD,EAAE,MAAAC,OAAM,MAAAC,QAAM,QAAAC,SAAM,GAA4E;AAC/J,SAAO,IAAIC,QAAOH,OAAMC,QAAMC,QAAM;AACtC;AAMM,IAAOC,UAAP,MAAa;EACR;EACA;EACA;EAET,YAAaH,OAAYC,QAAYC,UAAgD;AACnF,SAAK,OAAOF;AACZ,SAAK,OAAOC;AACZ,SAAK,SAASC;EAChB;EAEA,OAAQ,OAAiB;AACvB,QAAI,iBAAiB,YAAY;AAC/B,YAAM,SAAS,KAAK,OAAO,KAAK;AAChC,aAAO,kBAAkB,aACdE,SAAO,KAAK,MAAM,MAAM,IAE/B,OAAO,KAAK,CAAAC,YAAiBD,SAAO,KAAK,MAAMC,OAAM,CAAC;IAC5D,OAAO;AACL,YAAM,MAAM,mCAAmC;IAEjD;EACF;;;;AC/BF,SAASC,KAAKC,OAAyB;AACrC,SAAO,OAAM,SAAQ,IAAI,WAAW,MAAM,OAAO,OAAO,OAAOA,OAAM,IAAI,CAAC;AAC5E;AAEO,IAAMC,UAASC,OAAK;EACzB,MAAM;EACN,MAAM;EACN,QAAQH,KAAI,SAAS;CACtB;AAEM,IAAMI,UAASD,OAAK;EACzB,MAAM;EACN,MAAM;EACN,QAAQH,KAAI,SAAS;CACtB;;;ACDD,IAAM,YAAY,WAAqB,MAAM;AAEvC,SAAU,6BAA8B,MAAc;AAC1D,SAAO;IACL,GAAG;IACH,YAAY,KAAK,WAAW,OAAO,CAAAK,eAAY;AAC7C,YAAM,CAAC,CAAC,MAAM,IAAI,CAAC,IAAIA,WAAU,aAAY;AAG7C,UAAI,SAAS,MAAM,SAAS,MAAM,SAAS,IAAI;AAE7C,YAAI,SAAS,aAAa;AACxB,iBAAO;QACT;AAEA,eAAO;MACT;AAEA,UAAI,SAAS,KAAK,SAAS,GAAG;AAC5B,eAAO;MACT;AAEA,UAAI,QAAQ,MAAM;AAChB,eAAO;MACT;AAEA,YAAMC,aAAY,YAAY,IAAI;AAElC,UAAIA,cAAa,MAAM;AAErB,eAAO;MACT;AAEA,aAAO,CAACA;IACV,CAAC;;AAEL;AAuCA,eAAsB,cAAe,KAAiBC,UAAsB;AAC1E,QAAM,YAAY,MAAMC,QAAO,OAAO,GAAG;AACzC,EAAAD,UAAS,QAAQ,eAAc;AAE/B,SAAO,UAAU;AACnB;AAKA,eAAsB,cAAeE,SAAgBF,UAAsB;AACzE,SAAO,cAAcE,QAAO,YAAW,EAAG,OAAOF,QAAO;AAC1D;AAYM,SAAU,kBAAmB,QAAgB,KAAe;AAChE,SAAO,IAAI,IAAI,GAAG,MAAM,IAAI,SAAmB,KAAK,QAAQ,CAAC,IAAI,KAAK;AACxE;AAKM,SAAU,gBAAiBG,SAAc;AAC7C,SAAO,OAAiB;IACtB;IACAA,QAAO,YAAW,EAAG;GACtB;AACH;AAEM,SAAU,eAAgB,KAAe;AAC7C,SAAO,SAAmB,IAAI,SAAS,GAAG,CAAC,CAAC,MAAM;AACpD;AAMM,SAAU,iBAAkB,KAAe;AAC/C,QAAM,YAAmBC,SAAO,IAAI,SAAS,CAAC,CAAC;AAC/C,SAAO,oBAAoB,SAAS;AACtC;AAcM,SAAU,gBAAiB,KAAiBC,QAAiB;AACjE,QAAM,eAAe,oBAAI,KAAI;AAC7B,QAAM,MAAM,IAAI,aAAa,KAAKA,QAAO,YAAY;AAErD,SAAO,IAAI,UAAS;AACtB;AAYA,IAAM,mBAAmB;AACzB,IAAM,YAAY;AAClB,IAAM,YAAY;AAClB,IAAM,eAAe;AACrB,IAAM,WAAW;AACjB,IAAM,WAAW;AAEX,SAAU,kBAAmBC,YAAoB;AACrD,QAAM,SAASA,WAAU,aAAY;AAGrC,aAAW,SAAS,QAAQ;AAC1B,QAAI,MAAM,CAAC,MAAM,kBAAkB;AACjC,aAAO;IACT;EACF;AAGA,MAAI,OAAO,CAAC,EAAE,CAAC,MAAM,aAAa,OAAO,CAAC,EAAE,CAAC,MAAM,aAAa,OAAO,CAAC,EAAE,CAAC,MAAM,cAAc;AAC7F,WAAO;EACT;AAGA,MAAI,OAAO,CAAC,EAAE,CAAC,MAAM,YAAY,OAAO,CAAC,EAAE,CAAC,MAAM,UAAU;AAC1D,UAAM,SAAS,YAAY,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE;AAC5C,UAAM,WAAW,UAAU,QAAQ,CAAC;AAEpC,WAAO;EACT;AAEA,SAAO;AACT;AAKM,SAAU,iBAAkB,KAAQ;AACxC,QAAM,QAAQ,IAAI,SAAQ,EAAG,MAAM,GAAG;AACtC,QAAM,YAAY,MAAM,IAAG;AAC3B,QAAM,SAAS,MAAM,IAAG;AAExB,MAAI,aAAa,QAAQ,UAAU,MAAM;AACvC,UAAM,IAAI,MAAM,0DAA0D,IAAI,SAAQ,CAAE,EAAE;EAC5F;AAEA,SAAO;IACL,KAAKC,KAAI,SAAaC,QAAaC,SAAO,WAAqB,QAAQ,QAAQ,CAAC,CAAC;IACjF,QAAQ,iBAAiB,SAAS;;AAEtC;AAKM,SAAU,cAAe,QAAgB,KAAmBC,SAAe;AAC/E,QAAM,SAAS,OAAO,QAAQ,WAAW,MAAM,SAAmB,IAAI,UAAU,OAAO,QAAQ;AAE/F,QAAM,QAAQ;IACZ;IACA;;AAGF,MAAIA,WAAU,MAAM;AAClB,UAAM,KAAKA,QAAO,SAAQ,CAAE;EAC9B;AAEA,SAAO,IAAI,IAAI,MAAM,KAAK,GAAG,CAAC;AAChC;AAEM,SAAU,iBAAkB,KAAe;AAC/C,SAAO,IAAI,KAAY,OAAO,GAAG,CAAC;AACpC;AAKM,SAAU,uBAAwB,IAA6C,kBAAoC,MAAe;AACtI,SAAO,oBAAqB,MAAW;AACrC,UAAM,mBAAmB,iBAAiB,WAAW,MAAM,IAAI;AAC/D,UAAM,iBAAiB,iBAAiB,WAAW,MAAM,IAAI;AAC7D,QAAI,UAAU;AAEd,QAAI;AACF,uBAAiB,SAAS,UAAU,EAAE,CAAC,IAAI,GAAG,KAAI,CAAE;AAEpD,aAAQ,GAAG,GAAG,IAAI;IACpB,SAAS,KAAK;AACZ,gBAAU;AACV,uBAAgB;AAChB,uBAAiB,QAAQ,UAAU,EAAE,CAAC,IAAI,GAAG,KAAI,CAAE;AAEnD,YAAM;IACR;AACE,uBAAiB,SAAS,UAAU,EAAE,CAAC,IAAI,GAAG,KAAI,CAAE;AAEpD,UAAI,CAAC,SAAS;AACZ,2BAAkB;MACpB;IACF;EACF;AACF;AAEM,SAAU,oBAAqB,IAAsC,kBAAoC,MAAe;AAC5H,SAAO,kBAAmB,MAAW;AACnC,UAAM,mBAAmB,kBAAkB,WAAW,MAAM,IAAI;AAChE,UAAM,iBAAiB,kBAAkB,WAAW,MAAM,IAAI;AAC9D,QAAI,UAAU;AAEd,QAAI;AACF,uBAAiB,SAAS,UAAU,EAAE,CAAC,IAAI,GAAG,KAAI,CAAE;AAEpD,aAAO,MAAM,GAAG,GAAG,IAAI;IACzB,SAAS,KAAK;AACZ,gBAAU;AACV,uBAAgB;AAChB,uBAAiB,QAAQ,UAAU,EAAE,CAAC,IAAI,GAAG,KAAI,CAAE;AAEnD,YAAM;IACR;AACE,uBAAiB,SAAS,UAAU,EAAE,CAAC,IAAI,GAAG,KAAI,CAAE;AAEpD,UAAI,CAAC,SAAS;AACZ,2BAAkB;MACpB;IACF;EACF;AACF;;;ACtQM,IAAO,kBAAP,MAAsB;EACT;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEjB,YAAa,YAA8B,MAAyB;AAClE,UAAM,EAAE,YAAAC,aAAY,WAAAC,YAAW,aAAa,cAAc,SAAS,UAAS,IAAK;AAEjF,SAAK,aAAa;AAClB,SAAK,MAAM,WAAW,OAAO,aAAa,GAAG,SAAS,mBAAmB;AACzE,SAAK,kBAAkB,GAAG,KAAK,eAAe;AAC9C,SAAK,aAAaD;AAClB,SAAK,YAAYC;AACjB,SAAK,cAAc;AACnB,SAAK,eAAe;AACpB,SAAK,UAAU;AAEf,SAAK,MAAM,WAAW,SAAS,cAAc,qBAAqB,KAAK,IAAI,KAAK,IAAI,GAAG;MACrF,cAAc;KACf,KAAK,KAAK;AACX,SAAK,MAAM,WAAW,SAAS,cAAc,qBAAqB,KAAK,IAAI,KAAK,IAAI,GAAG;MACrF,cAAc;KACf,KAAK,KAAK;EACb;;;;;EAMA,MAAM,SAAU,KAAiBC,UAAsB;AACrD,SAAK,IAAI,eAAe,GAAG;AAE3B,UAAM,QAAQ,kBAAkB,KAAK,iBAAiB,GAAG;AAEzD,SAAK,IAAI,8BAA8B,KAAK;AAE5C,UAAM,MAAM,MAAM,KAAK,WAAW,UAAU,IAAI,OAAOA,QAAO;AAC9D,SAAK,IAAI,+BAA+B,KAAK;AAE7C,UAAM,MAAM,aAAa,YAAY,GAAG;AAExC,UAAM,aAAa,KAAK,YAAY,KAAKA,QAAO;AAEhD,WAAO;EACT;;;;EAKA,OAAQ,qBAAsB,KAAiB,MAAoB,MAAkBA,UAA2B;AAC9G,SAAK,IAAI,yBAAyB,GAAG;AACrC,UAAM,WAAW,gBAAgB,KAAK,IAAI;AAE1C,eAAW,EAAE,OAAAC,QAAO,MAAAC,OAAI,KAAM,MAAM;AAElC,UAAI,OAAiBD,QAAO,IAAI,GAAG;AACjC,aAAK,IAAI,eAAe;AACxB;MACF;AAGA,UAAI,KAAK,WAAW,OAAO,OAAOC,MAAI,GAAG;AACvC,YAAI;AACF,gBAAM,QAAQ,kBAAkB,KAAK,iBAAiB,GAAG;AACzD,eAAK,IAAI,oCAAoC,MAAM,SAAQ,CAAE,EAAE;AAC/D,gBAAM,KAAK,WAAW,UAAU,IAAI,OAAO,SAAS,SAAQ,GAAIF,QAAO;QACzE,SAAS,KAAU;AACjB,eAAK,IAAI,MAAM,gCAAgC,GAAG;QACpD;AAEA;MACF;AAGA,UAAI,iBAAiB;AACrB,YAAM,UAA4B;QAChC,MAAM,YAAY;QAClB;QACA,QAAQ;;AAGV,uBAAiB,SAAS,KAAK,QAAQ,YAAYE,QAAM,SAASF,QAAO,GAAG;AAC1E,YAAI,MAAM,SAAS,mBAAoB,MAAM,UAAU,QAAS,OAAiB,MAAM,OAAO,OAAO,aAAa,YAAY,QAAQ,EAAE,KAAK,GAAG;AAC9I,2BAAiB;QACnB;AAEA,cAAM;MACR;AAEA,UAAI,CAAC,gBAAgB;AACnB,cAAM,IAAI,WAAW,2BAA2B;MAClD;AAEA,WAAK,IAAI,MAAM,+BAA+B;IAChD;EACF;;;;EAKA,OAAQ,IAAK,KAAiBC,QAAmBD,UAAuB;AACtE,SAAK,IAAI,uBAAuB,KAAKC,MAAK;AAG1C,UAAM,SAAS,gBAAgB,KAAKA,MAAK;AAGzC,UAAM,QAAQ,kBAAkB,KAAK,iBAAiB,GAAG;AACzD,SAAK,IAAI,0BAA0B,MAAM,SAAQ,CAAE,EAAE;AACrD,UAAM,KAAK,WAAW,UAAU,IAAI,OAAO,OAAO,SAAQ,GAAID,QAAO;AAGrE,WAAQ,KACN,KAAK,YAAY,gBAAgB,KAAK;MACpC,GAAGA;MACH,QAAQA,SAAQ;KACjB,GACD,CAAC,WAAWG,aAAI,QAAQ,CAAC,UAAS;AAChC,aAAO,YAAW;AAChB,YAAI,MAAM,SAAS,cAAc;AAC/B,iBAAO,CAAC,KAAK;QACf;AAEA,cAAM,SAAS,CAAA;AAEf,cAAM,MAAwB;UAC5B,MAAM,YAAY;UAClB;UACA;;AAGF,aAAK,IAAI,kBAAkB,MAAM,KAAK,EAAE;AACxC,yBAAiB,YAAY,KAAK,QAAQ,YAAY,MAAM,KAAK,IAAI,KAAK;UACxE,GAAGH;UACH,MAAM,MAAM;SACb,GAAG;AACF,iBAAO,KAAK,QAAQ;AAEpB,cAAI,SAAS,SAAS,iBAAiB;AACrC;UACF;AAEA,cAAI,EAAE,SAAS,UAAU,QAAQ,OAAiB,SAAS,OAAO,OAAO,aAAa,YAAY,MAAM,EAAE,KAAK,IAAI;AACjH,mBAAO,KAAK,gBAAgB;cAC1B,MAAM,MAAM,KAAK;cACjB,OAAO,IAAI,WAAW,yBAAyB;cAC/C,MAAM,SAAS;eACdA,QAAO,CAAC;UACb;QACF;AAEA,eAAO;MACT;IACF,CAAC,GACD,CAAC,WAAW,SAAS,QAAQ;MAC3B,SAAS;MACT,aAAa;KACd,GACD,iBAAkB,QAAM;AACtB,uBAAiB,UAAU,QAAQ;AACjC,eAAQ;MACV;IACF,CAAC;EAEL;;;;EAKA,OAAQ,IAAK,KAAiBA,UAAuB;AACnD,SAAK,IAAI,UAAU,GAAG;AAEtB,UAAM,OAAqB,CAAA;AAE3B,qBAAiB,SAAS,KAAK,QAAQ,KAAKA,QAAO,GAAG;AACpD,UAAI,MAAM,SAAS,SAAS;AAC1B,aAAK,KAAK,KAAK;AACf;MACF;AAEA,YAAM;IACR;AAEA,QAAI,KAAK,WAAW,GAAG;AACrB;IACF;AAEA,UAAM,UAAU,KAAK,IAAI,CAAC,MAAM,EAAE,KAAK;AACvC,QAAI,IAAI;AAER,QAAI;AACF,UAAI,WAAW,KAAK,WAAW,KAAK,OAAO;IAC7C,SAAS,KAAU;AAEjB,UAAI,IAAI,SAAS,0BAA0B;AACzC,cAAM;MACR;IACF;AAEA,UAAM,OAAO,QAAQ,CAAC;AACtB,SAAK,IAAI,kBAAkB,KAAK,IAAI;AAEpC,QAAI,QAAQ,MAAM;AAChB,YAAM,IAAI,cAAc,0BAA0B;IACpD;AAEA,WAAQ,KAAK,qBAAqB,KAAK,MAAM,MAAM;MACjD,GAAGA;MACH,MAAM;QACJ,OAAO;QACP,QAAQ;QACR,SAAS;QACT,OAAO;;KAEV;AAED,UAAM,KAAK,CAAC;EACd;;;;EAKA,OAAQ,QAAS,KAAiBA,WAA0B,CAAA,GAAE;AAC5D,SAAK,IAAI,yBAAyB,GAAG;AAErC,QAAI;AACF,YAAM,WAAW,MAAM,KAAK,SAAS,KAAKA,QAAO;AAEjD,YAAM,WAAW;QACf,OAAO,SAAS;QAChB,MAAM,KAAK,WAAW;QACtB,MAAM;UACJ,OAAO;UACP,SAAS;UACT,QAAQ;UACR,OAAO;;SAERA,QAAO;IACZ,SAAS,KAAU;AACjB,WAAK,IAAI,oCAAoC,KAAK,GAAG;IACvD;AAEA,UAAMI,QAAO;AAEb,UAAM,gBAA2B,iBAAkB,EAAE,MAAM,QAAQ,KAAI,GAAE;AACvE,uBAAiB,SAASA,MAAK,YAAY,gBAAgB,KAAK,IAAI,KAAK;QACvE,GAAGJ;QACH;QACA;OACD,GAAG;AACF,cAAM;AAEN,YAAI,MAAM,SAAS,mBAAoB,MAAM,UAAU,MAAO;AAC5D,gBAAM,WAAW;YACf,MAAM,KAAK;YACX,OAAO,MAAM,OAAO;YACpB;aACCA,QAAO;QACZ;MACF;IACF;AAGA,WAAQ,KAAK,aAAa,IAAI,KAAK,eAAeA,QAAO;EAC3D;;;;AC3SI,SAAU,aAAc,MAAgB,YAA2B;AACvE,QAAM,SAAqB;IACzB,IAAI,KAAK,GAAG,YAAW,EAAG;IAC1B,aAAa,KAAK,cAAc,CAAA,GAAI,IAAI,CAAC,MAAM,EAAE,KAAK;IACtD;;AAGF,SAAO;AACT;AAEM,SAAU,eAAgB,MAAgB;AAC9C,MAAI,KAAK,MAAM,MAAM;AACnB,UAAM,IAAI,MAAM,yBAAyB;EAC3C;AAEA,QAAM,YAAmBK,SAAO,KAAK,EAAE;AAEvC,SAAO;IACL,IAAI,oBAAoB,SAAS;IACjC,aAAa,KAAK,cAAc,CAAA,GAAI,IAAI,CAAC,MAAM,UAAU,CAAC,CAAC;;AAE/D;;;ACKM,IAAO,iBAAP,MAAqB;EACR;EACA;EACA;EACA;EACA;EACA;EACA;EAEjB,YAAa,YAA8B,MAAwB;AACjE,UAAM,EAAE,SAAS,aAAa,cAAc,cAAc,WAAW,UAAS,IAAK;AAEnF,SAAK,aAAa;AAClB,SAAK,MAAM,WAAW,OAAO,aAAa,GAAG,SAAS,kBAAkB;AACxE,SAAK,UAAU;AACf,SAAK,cAAc;AACnB,SAAK,eAAe;AACpB,SAAK,eAAe;AACpB,SAAK,YAAY;AAEjB,SAAK,gBAAgB,WAAW,SAAS,cAAc,+BAA+B,KAAK,cAAc,KAAK,IAAI,GAAG;MACnH,cAAc;MACd,+BAA+B,CAAC,OAAO,UAAmC;AACxE,YAAI,MAAM,SAAS,YAAY;AAC7B,gBAAM,cAAc,CAAA;AACpB,gBAAM,UAAU,KAAK,GAAG,MAAM,UAAU,IAAI,UAAQ,KAAK,GAAG,SAAQ,CAAE,CAAC;QACzE;AAEA,eAAO;MACT;KACD,KAAK,KAAK;AACX,SAAK,UAAU,WAAW,SAAS,cAAc,yBAAyB,KAAK,QAAQ,KAAK,IAAI,GAAG;MACjG,cAAc;MACd,+BAA+B,CAAC,OAAO,UAAmC;AACxE,YAAI,MAAM,SAAS,mBAAmB,MAAM,gBAAgB,gBAAgB;AAC1E,gBAAM,cAAc,CAAA;AACpB,gBAAM,UAAU,KAAK,MAAM,KAAK,SAAQ,CAAE;QAC5C;AAEA,eAAO;MACT;KACD,KAAK,KAAK;EACb;;;;;EAMA,OAAQ,QAAS,KAAU,YAAyBC,WAA0B,CAAA,GAAE;AAC9E,SAAK,IAAI,cAAc,GAAG;AAC1B,UAAM,SAAS,IAAI,UAAU;AAG7B,UAAM,KAAK,UAAU,YAAY,KAAK,KAAK,WAAW,QAAQA,QAAO;AAErE,UAAM,MAAwB;MAC5B,MAAM,YAAY;MAClB,KAAK;MACL,WAAW;QACT,aAAa;UACX,IAAI,KAAK,WAAW;UACpB;SACD;;;AAIL,QAAI,OAAO;AACX,UAAMC,QAAO;AAEb,oBAAiB,sBAAuB,OAAqB;AAC3D,UAAI;AACF,QAAAA,MAAK,IAAI,wCAAwC,KAAK,MAAM,KAAK,EAAE;AAEnE,yBAAiB,oBAAoBA,MAAK,QAAQ,YAAY,MAAM,KAAK,IAAI,KAAK;UAChF,GAAGD;UACH,MAAM,MAAM;SACb,GAAG;AACF,cAAI,iBAAiB,SAAS,iBAAiB;AAC7C,YAAAC,MAAK,IAAI,qCAAqC,KAAK,MAAM,KAAK,EAAE;AAChE;UACF;AAEA,gBAAM;QACR;MACF,SAAS,KAAU;AACjB,QAAAA,MAAK,IAAI,MAAM,2CAA2C,MAAM,KAAK,IAAI,GAAG;AAC5E,cAAM,gBAAgB;UACpB,MAAM,MAAM,KAAK;UACjB,OAAO;UACP,MAAM,MAAM;WACXD,QAAO;MACZ;IACF;AAEA,UAAM,SAAS,SAAqB;MAClC,YAAY;KACb;AAED,UAAM,QAAQ,IAAI,MAAM;MACtB,aAAa;KACd;AACD,UAAM,iBAAiB,QAAQ,MAAK;AAClC,aAAO,IAAG;IACZ,CAAC;AACD,UAAM,iBAAiB,SAAS,CAAC,QAAO;AACtC,WAAK,IAAI,MAAM,iDAAiD,GAAG;IACrE,CAAC;AAED,UAAM,IAAI,YAAW;AACnB,YAAM,kBAAoC,CAAA;AAE1C,uBAAiB,SAAS,KAAK,YAAY,gBAAgB,QAAQA,QAAO,GAAG;AAC3E,eAAO,KAAK,KAAK;AAEjB,YAAI,MAAM,SAAS,cAAc;AAC/B;QACF;AAEA,wBAAgB,KAAK,KAAK;MAC5B;AAEA,sBAAgB,QAAQ,WAAQ;AAC9B,cAAM,IAAI,YAAW;AACnB,2BAAiB,eAAe,sBAAsB,KAAK,GAAG;AAC5D,mBAAO,KAAK,WAAW;UACzB;QACF,CAAC,EACE,MAAM,SAAM;AACX,eAAK,IAAI,MAAM,iDAAiD,GAAG;QACrE,CAAC;MACL,CAAC;IACH,CAAC,EACE,MAAM,SAAM;AACX,aAAO,IAAI,GAAG;IAChB,CAAC;AAEH,WAAQ;AAER,SAAK,IAAI,qCAAqC,IAAI;EACpD;;;;EAKA,OAAQ,cAAe,KAAUA,UAAuB;AACtD,UAAM,SAAS,KAAK,aAAa;AACjC,QAAI,QAAQ;AACZ,UAAM,SAAS,IAAI,UAAU;AAC7B,UAAMC,QAAO;AAEb,SAAK,IAAI,oBAAoB,GAAG;AAEhC,UAAM,QAAQ,MAAM,KAAK,UAAU,aAAa,KAAKD,QAAO;AAG5D,QAAI,MAAM,SAAS,GAAG;AACpB,YAAME,aAAwB,CAAA;AAE9B,iBAAWC,WAAU,MAAM,MAAM,GAAG,MAAM,GAAG;AAC3C,YAAI;AACF,gBAAM,OAAO,MAAM,KAAK,WAAW,UAAU,IAAIA,SAAQH,QAAO;AAEhE,UAAAE,WAAU,KAAK;YACb,IAAIC;YACJ,YAAY,KAAK,UAAU,IAAI,CAAC,EAAE,WAAAC,WAAS,MAAOA,UAAS;WAC5D;QACH,SAAS,KAAU;AACjB,cAAI,IAAI,SAAS,iBAAiB;AAChC,kBAAM;UACR;AAEA,eAAK,IAAI,8BAA8BD,OAAM;QAC/C;MACF;AAEA,YAAM,kBAAkB;QACtB,MAAM,KAAK,WAAW;QACtB,aAAa,YAAY;QACzB,WAAAD;QACA,MAAM;UACJ,OAAO;UACP,QAAQ;UACR,SAAS;UACT,OAAO;;SAERF,QAAO;AACV,YAAM,cAAc;QAClB,MAAM,KAAK,WAAW;QACtB,WAAAE;QACA,MAAM;UACJ,OAAO;UACP,QAAQ;UACR,SAAS;UACT,OAAO;;SAERF,QAAO;AAEV,eAASE,WAAU;AAEnB,UAAI,SAAS,QAAQ;AACnB;MACF;IACF;AAKA,UAAM,qBAAgC,iBAAkB,EAAE,MAAM,QAAQ,KAAI,GAAE;AAC5E,YAAM,UAAU;QACd,MAAM,YAAY;QAClB,KAAK;;AAGP,aAAQD,MAAK,QAAQ,YAAY,KAAK,IAAI,SAAS;QACjD,GAAGD;QACH;QACA;OACD;IACH;AAEA,UAAM,YAAY,IAAI,QAAQ,KAAK;AAEnC,qBAAiB,SAAS,KAAK,aAAa,IAAI,QAAQ,oBAAoBA,QAAO,GAAG;AACpF,YAAM;AAEN,UAAI,MAAM,SAAS,iBAAiB;AAClC,aAAK,IAAI,wDAAwD,MAAM,UAAU,QAAQ,KAAK,MAAM,OAAO,MAAM;AAEjH,cAAM,eAAe,CAAA;AAErB,mBAAW,QAAQ,MAAM,WAAW;AAClC,cAAI,UAAU,IAAI,KAAK,EAAE,GAAG;AAC1B;UACF;AAEA,oBAAU,IAAI,KAAK,EAAE;AACrB,uBAAa,KAAK,IAAI;QACxB;AAEA,YAAI,aAAa,SAAS,GAAG;AAC3B,gBAAM,cAAc;YAClB,MAAM,MAAM;YACZ,WAAW;YACX,MAAM,MAAM;aACXA,QAAO;AAEV,mBAAS,aAAa;AAEtB,cAAI,SAAS,QAAQ;AACnB;UACF;QACF;MACF;IACF;EACF;;;;ACtPI,IAAOK,WAAP,cAAuB,kBAAgC;EAC1C;EACA;EACT;EACS;EACA;EACA;;;;EAQjB,YAAa,YAA8B,MAAiB;AAC1D,UAAK;AAEL,SAAK,aAAa;AAClB,SAAK,MAAM,WAAW,OAAO,aAAa,GAAG,KAAK,SAAS,UAAU;AACrE,SAAK,UAAU;AACf,SAAK,WAAW,KAAK;AACrB,SAAK,UAAU,IAAI,gBAAgB;MACjC,GAAI,KAAK,WAAW,CAAA;MACpB,SAAS,WAAW;MACpB,YAAY,GAAG,KAAK,aAAa;KAClC;AACD,SAAK,UAAU;MACb,YAAY,WAAW,SAAS,qBAAqB,GAAG,KAAK,aAAa,8BAA8B;MACxG,QAAQ,WAAW,SAAS,qBAAqB,GAAG,KAAK,aAAa,4BAA4B;;AAGpG,SAAK,cAAc,WAAW,SAAS,cAAc,6BAA6B,KAAK,YAAY,KAAK,IAAI,GAAG;MAC7G,cAAc;MACd,sBAAuB,CAAC,IAAIC,QAAO,GAAG,OAAK;AACzC,eAAO;UACL,GAAG;UACH,IAAI,GAAG,SAAQ;UACf,gBAAgB,GAAGA,SAAQ,IAAI;;MAEnC;MACA,+BAA+B,CAAC,OAAO,UAAS;AAC9C,YAAI,MAAM,SAAS,iBAAiB;AAClC,cAAI,MAAM,UAAU,SAAS,GAAG;AAC9B,kBAAM,UAAU,QAAQ,CAACC,QAAO,UAAS;AACvC,oBAAM,aAAa,KAAK,EAAE,IAAIA,OAAM,GAAG,SAAQ;YACjD,CAAC;UACH;AAEA,cAAI,MAAM,OAAO,SAAS,GAAG;AAC3B,kBAAM,OAAO,QAAQ,CAACA,QAAO,UAAS;AACpC,oBAAM,UAAU,KAAK,EAAE,IAAIA,OAAM,GAAG,SAAQ;YAC9C,CAAC;UACH;QACF;AAEA,eAAO;MACT;KACD,KAAK,KAAK;AACX,SAAK,cAAc,WAAW,SAAS,cAAc,6BAA6B,KAAK,YAAY,KAAK,IAAI,GAAG;MAC7G,cAAc;MACd,sBAAuB,CAAC,IAAID,QAAO,GAAG,OAAK;AACzC,eAAO;UACL,GAAG;UACH,IAAI,GAAG,SAAQ;UACf,gBAAgB,GAAGA,SAAQ,IAAI;;MAEnC;MACA,+BAA+B,CAAC,OAAO,UAAS;AAC9C,YAAI,MAAM,SAAS,iBAAiB;AAClC,cAAI,MAAM,UAAU,SAAS,GAAG;AAC9B,kBAAM,UAAU,QAAQ,CAACC,QAAO,UAAS;AACvC,oBAAM,aAAa,KAAK,EAAE,IAAIA,OAAM,GAAG,SAAQ;YACjD,CAAC;UACH;AAEA,cAAI,MAAM,OAAO,SAAS,GAAG;AAC3B,kBAAM,OAAO,QAAQ,CAACA,QAAO,UAAS;AACpC,oBAAM,UAAU,KAAK,EAAE,IAAIA,OAAM,GAAG,SAAQ;YAC9C,CAAC;UACH;QACF;AAEA,eAAO;MACT;KACD,KAAK,KAAK;EACb;;;;EAKA,MAAM,QAAK;AACT,QAAI,KAAK,SAAS;AAChB;IACF;AAEA,SAAK,UAAU;EACjB;;;;EAKA,MAAM,OAAI;AACR,SAAK,UAAU;EACjB;;;;EAKA,YAAS;AACP,WAAO,KAAK;EACd;;;;EAKA,OAAQ,YAAa,IAAY,KAAuBC,UAA2B;AACjF,QAAI,CAAC,KAAK,SAAS;AACjB;IACF;AAEA,UAAM,OAAO,IAAI;AAEjB,QAAI,QAAQ,MAAM;AAChB,YAAM,IAAI,uBAAuB,0BAA0B;IAC7D;AAEA,QAAI;AACJ,UAAM,SAAS,KAAK,QAAQ,iBAAiBA,QAAO;AAEpD,IAAAA,WAAU;MACR,GAAGA;MACH;;AAGF,QAAI;AACF,WAAK,QAAQ,YAAY,UAAU,EAAE,CAAC,IAAI,GAAG,KAAI,CAAE;AAEnD,WAAK,IAAI,eAAe,EAAE;AAC1B,YAAM,cAAc,EAAE,MAAM,IAAI,MAAMA,SAAQ,KAAI,GAAIA,QAAO;AAE7D,YAAM,aAAa,MAAM,KAAK,WAAW,kBAAkB,eAAe,IAAIA,QAAO;AACrF,eAAS,MAAM,WAAW,UAAU,KAAK,UAAUA,QAAO;AAE1D,WAAK,IAAI,oBAAoB,IAAI,MAAM,EAAE;AACzC,YAAM,eAAe,EAAE,IAAI,MAAM,MAAMA,SAAQ,KAAI,GAAIA,QAAO;AAE9D,YAAM,WAAW,MAAM,KAAK,kBAAkB,QAAQ,KAAKA,QAAO;AAElE,aAAO,MAAMA,QAAO,EACjB,MAAM,SAAM;AACX,aAAK,IAAI,MAAM,8BAA8B,IAAI,GAAG;AACpD,gBAAQ,MAAM,GAAG;MACnB,CAAC;AAEH,YAAM,kBAAkB;QACtB,MAAM;QACN,aAAa,SAAS;QACtB,QAAQ,SAAS,OAAO,IAAI,cAAc;QAC1C,WAAW,SAAS,UAAU,IAAI,cAAc;QAChD,QAAQ,SAAS,UAAU,OAAO,SAAY,aAAa,YAAY,SAAS,MAAM;QACtF,MAAMA,SAAQ;SACbA,QAAO;IACZ,SAAS,KAAU;AACjB,WAAK,QAAQ,QAAQ,UAAU,EAAE,CAAC,IAAI,GAAG,KAAI,CAAE;AAE/C,cAAQ,MAAM,GAAG;AAIjB,UAAIA,SAAQ,QAAQ,YAAY,MAAM;AACpC,aAAK,IAAI,MAAM,gCAAgC,IAAI,MAAM,IAAI,GAAG;MAClE;AAEA,YAAM,gBAAgB,EAAE,MAAM,IAAI,OAAO,KAAK,MAAMA,SAAQ,KAAI,GAAIA,QAAO;IAC7E;AACE,WAAK,QAAQ,QAAQ,MAAM;IAC7B;EACF;;;;EAKA,OAAQ,YAAa,IAAY,KAAuBA,UAA2B;AACjF,QAAI,CAAC,KAAK,SAAS;AACjB;IACF;AAEA,UAAM,OAAO,IAAI;AAEjB,QAAI,QAAQ,MAAM;AAChB,YAAM,IAAI,uBAAuB,0BAA0B;IAC7D;AAEA,QAAI;AACJ,UAAM,SAAS,KAAK,QAAQ,iBAAiBA,QAAO;AAEpD,IAAAA,WAAU;MACR,GAAGA;MACH;;AAGF,QAAI;AACF,WAAK,QAAQ,YAAY,UAAU,EAAE,CAAC,IAAI,GAAG,KAAI,CAAE;AAEnD,WAAK,IAAI,eAAe,EAAE;AAC1B,YAAM,cAAc,EAAE,MAAM,IAAI,MAAMA,SAAQ,KAAI,GAAIA,QAAO;AAE7D,YAAM,aAAa,MAAM,KAAK,WAAW,kBAAkB,eAAe,IAAIA,QAAO;AACrF,eAAS,MAAM,WAAW,UAAU,KAAK,UAAUA,QAAO;AAE1D,WAAK,IAAI,oBAAoB,IAAI,MAAM,EAAE;AACzC,YAAM,eAAe,EAAE,IAAI,MAAM,MAAMA,SAAQ,KAAI,GAAIA,QAAO;AAE9D,YAAM,KAAK,cAAc,QAAQ,KAAKA,QAAO;AAE7C,aAAO,MAAMA,QAAO,EACjB,MAAM,SAAM;AACX,aAAK,IAAI,MAAM,8BAA8B,IAAI,GAAG;AACpD,gBAAQ,MAAM,GAAG;MACnB,CAAC;AAEH,YAAM,kBAAkB,EAAE,MAAM,IAAI,aAAa,MAAM,MAAMA,SAAQ,KAAI,GAAIA,QAAO;IACtF,SAAS,KAAU;AACjB,WAAK,QAAQ,QAAQ,UAAU,EAAE,CAAC,IAAI,GAAG,KAAI,CAAE;AAE/C,cAAQ,MAAM,GAAG;AACjB,YAAM,gBAAgB,EAAE,MAAM,IAAI,OAAO,KAAK,MAAMA,SAAQ,KAAI,GAAIA,QAAO;IAC7E;AACE,WAAK,QAAQ,QAAQ,MAAM;IAC7B;EACF;;;;EAKA,MAAM,cAAe,QAAgB,KAAuBA,UAAqB;AAC/E,UAAM,KAAK,SAAS,MAAM;AAC1B,UAAM,GAAG,MAAM,KAAKC,UAASD,QAAO;EACtC;;;;EAKA,MAAM,kBAAmB,QAAgB,KAAuBA,UAAqB;AACnF,UAAM,KAAK,SAAS,MAAM;AAE1B,UAAM,GAAG,MAAM,KAAKC,UAASD,QAAO;AAEpC,UAAMF,WAAU,MAAM,GAAG,KAAKG,UAASD,QAAO;AAG9C,IAAAF,SAAQ,OAAO,QAAQ,cAAW;AAChC,WAAK,kBAA4B,QAAQ;QACvC,QAAQ,eAAe,QAAQ;OAChC;IACH,CAAC;AACD,IAAAA,SAAQ,UAAU,QAAQ,cAAW;AACnC,WAAK,kBAA4B,QAAQ;QACvC,QAAQ,eAAe,QAAQ;OAChC;IACH,CAAC;AAED,WAAOA;EACT;;;;AC1SI,SAAU,WAAY,GAAe,GAAa;AACtD,MAAI,EAAE,eAAe,EAAE,YAAY;AACjC,UAAM,IAAI,MAAM,oCAAoC;EACtD;AAEA,WAAS,IAAI,GAAG,IAAI,EAAE,YAAY,KAAK;AACrC,QAAI,EAAE,CAAC,MAAM,EAAE,CAAC,GAAG;AACjB;IACF;AAEA,WAAO,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK;EAC5B;AAEA,SAAO;AACT;;;ACJM,IAAO,mBAAP,MAAuB;;;;EAIV;;;;EAKA;EAET;EAER,YAAa,cAA0B,UAAgB;AACrD,SAAK,eAAe;AACpB,SAAK,WAAW;AAChB,SAAK,gBAAgB,CAAA;EACvB;;;;EAKA,IAAI,SAAM;AACR,WAAO,KAAK,cAAc;EAC5B;;;;EAKA,IAAI,QAAK;AACP,WAAO,CAAC,GAAG,KAAK,aAAa;EAC/B;;;;EAKA,MAAM,IAAK,MAAgB,OAAqB,EAAE,OAAO,IAAI,QAAQ,GAAG,SAAS,GAAG,OAAO,EAAC,GAAII,UAAsB;AACpH,UAAM,SAAS,MAAM,cAAc,KAAK,IAAIA,QAAO;AAEnD,SAAK,aAAa,MAAM,QAAQ,IAAI;EACtC;;;;EAKA,aAAc,MAAgB,OAAmB,OAAqB,EAAE,OAAO,IAAI,QAAQ,GAAG,SAAS,GAAG,OAAO,EAAC,GAAE;AAClH,QAAI,KAAK,cAAc,KAAK,QAAM,GAAG,KAAK,GAAG,OAAO,KAAK,EAAE,CAAC,KAAK,MAAM;AACrE;IACF;AAEA,UAAM,KAAmB;MACvB;MACA,UAAU,IAAc,KAAK,cAAc,KAAK;MAChD;;AAGF,QAAI,KAAK,cAAc,WAAW,KAAK,UAAU;AAC/C,YAAM,WAAW,KAAK,cAAc,KAAK,cAAc,SAAS,CAAC;AAGjE,UAAI,YAAY,QAAQ,WAAqB,GAAG,UAAU,SAAS,QAAQ,MAAM,IAAI;AACnF;MACF;IACF;AAEA,QAAI,QAAQ;AAEZ,aAAS,IAAI,GAAG,IAAI,KAAK,cAAc,QAAQ,KAAK;AAClD,YAAM,WAAW,WAAqB,KAAK,cAAc,CAAC,EAAE,UAAU,GAAG,QAAQ;AACjF,UAAI,aAAa,KAAK,aAAa,GAAG;AACpC,gBAAQ;AACR,aAAK,cAAc,OAAO,GAAG,GAAG,EAAE;AAClC;MACF;IACF;AAEA,QAAI,CAAC,OAAO;AACV,WAAK,cAAc,KAAK,EAAE;IAC5B;AAEA,SAAK,gBAAgB,KAAK,cAAc,MAAM,GAAG,KAAK,QAAQ;EAChE;;;;;EAMA,MAAM,SAAUC,SAAgBD,UAAsB;AACpD,QAAI,KAAK,WAAW,GAAG;AACrB,aAAO;IACT;AAEA,UAAM,SAAS,MAAM,cAAcC,SAAQD,QAAO;AAClD,UAAM,YAAY,IAAc,QAAQ,KAAK,YAAY;AACzD,UAAM,mBAAmB,KAAK,cAAc,KAAK,cAAc,SAAS,CAAC,EAAE;AAE3E,WAAO,WAAqB,WAAW,gBAAgB,MAAM;EAC/D;;;;;EAMA,MAAM,UAAW,SAAmBA,UAAsB;AACxD,QAAI,QAAQ,WAAW,GAAG;AACxB,aAAO;IACT;AAEA,WAAO,QAAQ,IACb,QAAQ,IAAI,OAAMC,YAAU,KAAK,SAASA,SAAQD,QAAO,CAAC,CAAC;EAE/D;;;;ACpFI,IAAO,cAAP,MAAkB;EACL;EACA;EACA;EACA;EACA;EACA;EAEjB,YAAa,YAAmC,MAAqB;AACnE,SAAK,eAAe,KAAK;AACzB,SAAK,UAAU,KAAK;AACpB,SAAK,aAAa,KAAK;AACvB,SAAK,eAAe,KAAK;AACzB,SAAK,aAAa;AAClB,SAAK,MAAM,WAAW,OAAO,aAAa,GAAG,KAAK,SAAS,eAAe;AAE1E,SAAK,WAAW,WAAW,SAAS,cAAc,0BAA0B,KAAK,SAAS,KAAK,IAAI,GAAG;MACpG,cAAc;KACf,KAAK,KAAK;AACX,SAAK,kBAAkB,WAAW,SAAS,cAAc,iCAAiC,KAAK,gBAAgB,KAAK,IAAI,GAAG;MACzH,cAAc;KACf,KAAK,KAAK;EACb;;;;;EAMA,MAAM,cAAe,MAAcE,UAAsB;AACvD,QAAI;AACJ,UAAM,IAAI,MAAM,KAAK,aAAa,KAAK,MAAMA,QAAO;AAEpD,QAAI,KAAK,MAAM;AACb,WAAK,IAAI,2CAA2C,IAAI;AAExD,UAAI;AACF,mBAAW,MAAM,KAAK,WAAW,UAAU,IAAI,GAAGA,QAAO;MAC3D,SAAS,KAAU;AACjB,YAAI,IAAI,SAAS,iBAAiB;AAChC,gBAAM;QACR;MACF;IACF;AAEA,QAAI,YAAY,MAAM;AACpB,UAAI;AACF,mBAAW,MAAM,KAAK,WAAW,UAAU,IAAI,MAAMA,QAAO;MAC9D,SAAS,KAAU;AACjB,YAAI,IAAI,SAAS,iBAAiB;AAChC,gBAAM;QACR;MACF;IACF;AAEA,QAAI,YAAY,MAAM;AACpB,WAAK,IAAI,wCAAwC,IAAI;AAErD,aAAO;QACL,IAAI,SAAS;QACb,YAAY,SAAS,UAAU,IAAI,CAAC,YAAY,QAAQ,SAAS;;IAErE;AAEA,WAAO;EACT;;;;EAKA,OAAQ,gBAAiB,MAAc,KAAiBA,UAA2B;AACjF,UAAM,MAAwB;MAC5B,MAAM,YAAY;MAClB;;AAGF,WAAQ,KAAK,QAAQ,YAAY,MAAM,KAAKA,QAAO;EACrD;;;;EAKA,OAAQ,qBAAsB,MAAcA,WAA0B,CAAA,GAAE;AACtE,UAAM,QAAQ,gBAAgB,IAAI;AAClC,UAAM,OAAO;MACX,OAAO;MACP,QAAQ;MACR,SAAS;MACT,OAAO;;AAGT,qBAAiB,SAAS,KAAK,gBAAgB,MAAM,OAAO;MAC1D,GAAGA;MACH;KACD,GAAG;AACF,YAAM;AAEN,UAAI,MAAM,SAAS,mBAAmB,MAAM,UAAU,MAAM;AAC1D,cAAMC,aAAY,sBAAsB,MAAM,OAAO,KAAK;AAC1D,cAAM,UAAU,oBAAoBA,UAAS;AAG7C,YAAI,CAAC,QAAQ,OAAO,IAAI,GAAG;AACzB,gBAAM,IAAI,sBAAsB,8BAA8B;QAChE;AAEA,YAAI,QAAQ,aAAa,MAAM;AAC7B,gBAAM,IAAI,sBAAsB,oBAAoB;QACtD;AAEA,cAAM,WAAW;UACf,MAAM;UACN,OAAO,MAAM,OAAO;UACpB;WACCD,QAAO;MACZ;IACF;AAEA,UAAM,IAAI,WAAW,4CAA4C,KAAK,SAAQ,CAAE,EAAE;EACpF;;;;EAKA,OAAQ,SAAU,IAAYA,WAA0B,CAAA,GAAE;AACxD,SAAK,IAAI,eAAe,EAAE;AAE1B,QAAIA,SAAQ,aAAa,OAAO;AAE9B,YAAM,KAAK,MAAM,KAAK,cAAc,IAAIA,QAAO;AAG/C,UAAI,MAAM,MAAM;AACd,aAAK,IAAI,aAAa;AACtB,cAAM,eAAe;UACnB,MAAM,KAAK,WAAW;UACtB,MAAM;UACN,MAAM;YACJ,OAAO;YACP,QAAQ;YACR,SAAS;YACT,OAAO;;WAERA,QAAO;AACV;MACF;IACF;AAEA,QAAI,YAAY;AAEhB,QAAIA,SAAQ,eAAe,OAAO;AAChC,YAAME,QAAO;AAEb,YAAM,gBAA2B,iBAAkB,EAAE,MAAM,QAAQ,KAAI,GAAE;AACvE,cAAM,UAA4B;UAChC,MAAM,YAAY;UAClB,KAAK,GAAG,YAAW,EAAG;;AAGxB,yBAAiB,SAASA,MAAK,QAAQ,YAAY,KAAK,IAAI,SAAS;UACnE,GAAGF;UACH;UACA;SACD,GAAG;AACF,gBAAM;AAEN,cAAI,MAAM,SAAS,iBAAiB;AAClC,kBAAM,QAAQ,MAAM,OAAO,KAAK,CAAC,MAAM,EAAE,GAAG,OAAO,EAAE,CAAC;AAGtD,gBAAI,SAAS,MAAM;AACjB,oBAAM,eAAe;gBACnB,MAAM,MAAM;gBACZ,MAAM;gBACN,MAAM,MAAM;iBACXA,QAAO;YACZ;UACF;QACF;MACF;AAEA,uBAAiB,SAAS,KAAK,aAAa,IAAI,GAAG,YAAW,EAAG,OAAO,eAAeA,QAAO,GAAG;AAC/F,YAAI,MAAM,SAAS,cAAc;AAC/B,sBAAY;QACd;AAEA,cAAM;MACR;IACF;AAEA,QAAI,CAAC,WAAW;AACd,YAAM,IAAI,cAAc,WAAW;IACrC;EACF;;;;;EAMA,OAAQ,gBAAiB,KAAiBA,WAAwB,CAAA,GAAE;AAClE,SAAK,IAAI,yBAAyB,GAAG;AACrC,UAAM,QAAQ,MAAM,cAAc,KAAKA,QAAO;AAC9C,UAAM,QAAQ,IAAI,iBAAiB,OAAO,KAAK,aAAa,WAAW;AACvE,UAAME,QAAO;AAEb,UAAM,sBAAiC,iBAAkB,EAAE,MAAM,MAAM,WAAW,OAAM,GAAE;AACxF,MAAAA,MAAK,IAAI,6BAA6B,KAAK,EAAE;AAC7C,YAAM,UAA4B;QAChC,MAAM,YAAY;QAClB;;AAGF,aAAQA,MAAK,QAAQ,YAAY,KAAK,IAAI,SAAS;QACjD,GAAGF;QACH;QACA;OACD;AAGD,YAAM,aAAa,MAAM,WAAW,IAAI;IAC1C;AAEA,WAAQ,KAAK,aAAa,IAAI,KAAK,qBAAqBA,QAAO;AAE/D,SAAK,IAAI,8BAA8B,MAAM,QAAQ,GAAG;AAExD,aAAS,EAAE,MAAM,KAAI,KAAM,MAAM,OAAO;AACtC,UAAI;AACF,YAAI,KAAK,WAAW,WAAW,GAAG;AAChC,iBAAO,MAAME,MAAK,WAAW,UAAU,QAAQ,KAAK,IAAIF,QAAO;QACjE;AAEA,YAAI,KAAK,WAAW,WAAW,GAAG;AAChC;QACF;AAEA,cAAM,eAAe;UACnB,MAAM,KAAK,WAAW;UACtB,MAAM,MAAME,MAAK,WAAW,UAAU,QAAQ,KAAK,IAAIF,QAAO;UAC9D,MAAM;YACJ,OAAO,KAAK;YACZ,QAAQ;YACR,SAAS;YACT,OAAO;;WAERA,QAAO;MACZ,QAAQ;AACN;MACF;IACF;EACF;;;;;;;EAQA,OAAQ,gBAAiB,MAAc,KAAiBA,UAA2B;AACjF,qBAAiB,SAAS,KAAK,gBAAgB,MAAM,KAAKA,QAAO,GAAG;AAClE,UAAI,MAAM,SAAS,iBAAiB;AAClC,YAAI,MAAM,UAAU,MAAM;AAExB,cAAI;AACF,kBAAM,KAAK,oBAAoB,MAAM,QAAQA,QAAO;UACtD,SAAS,KAAU;AACjB,kBAAM,SAAS;AACf,iBAAK,IAAI,MAAM;AAEf,kBAAM,gBAAgB;cACpB,MAAM,MAAM;cACZ,OAAO,IAAI,WAAW,MAAM;cAC5B,MAAMA,SAAQ;eACbA,QAAO;AACV;UACF;QACF;MACF;AAEA,YAAM;IACR;EACF;;;;;EAMA,MAAM,oBAAqB,QAAmBA,UAAsB;AAClE,QAAI,OAAO,gBAAgB,MAAM;AAC/B,YAAM,IAAI,mBAAmB,yBAAyB;IACxD;AAEA,UAAM,aAAa,KAAK,YAAY,IAAI,aAAa,OAAO,KAAK,OAAO,OAAO,OAAO,YAAY,GAAGA,QAAO;EAC9G;;;;EAKA,MAAM,uBAAwB,KAAiBA,UAAgC;AAC7E,UAAM,SAAqB,CAAA;AAG3B,QAAI;AACF,YAAM,YAAmBG,SAAO,GAAG;AACnC,YAAM,eAAe,oBAAoB,SAAS;AAElD,YAAM,OAAO,MAAM,KAAK,WAAW,UAAU,IAAI,cAAcH,QAAO;AAEtE,aAAO,KAAK;QACV,IAAI,KAAK;QACT,YAAY,KAAK,UAAU,IAAI,CAAC,EAAE,WAAAI,WAAS,MAAOA,UAAS;OAC5D;IACH,QAAQ;IAAC;AAET,UAAM,WAAW,MAAM,cAAc,KAAKJ,QAAO;AACjD,UAAM,MAAM,KAAK,aAAa,aAAa,UAAUA,QAAO;AAE5D,eAAWK,WAAU,KAAK;AACxB,UAAI;AACF,eAAO,KAAK,MAAM,KAAK,WAAW,UAAU,QAAQA,SAAQL,QAAO,CAAC;MACtE,SAAS,KAAU;AACjB,YAAI,IAAI,SAAS,iBAAiB;AAChC,gBAAM;QACR;MACF;IACF;AAEA,QAAI,OAAO,SAAS,GAAG;AACrB,WAAK,IAAI,sEAAsE,OAAO,QAAQ,GAAG;IACnG,OAAO;AACL,WAAK,IAAI,6FAA6F,KAAK,KAAK,aAAa,IAAI;IACnI;AAEA,WAAO;EACT;;;;AC9VI,IAAO,YAAP,MAAgB;EACH;EACA;EACA;EAEjB,YAAa,YAAiC,MAAmB;AAC/D,SAAK,MAAM,WAAW,OAAO,aAAa,GAAG,KAAK,SAAS,YAAY;AACvE,SAAK,kBAAkB,GAAG,KAAK,eAAe;AAC9C,SAAK,YAAY,WAAW;EAC9B;;;;EAKA,MAAM,YAAa,KAAU,UAAkBM,UAAsB;AACnE,SAAK,IAAI,MAAM,kBAAkB,UAAU,GAAG;AAC9C,UAAM,KAAK,mBAAmB,KAAK,UAAUA,QAAO;EACtD;;;;EAKA,MAAM,eAAgB,KAAU,UAAkBA,UAAsB;AACtE,UAAM,MAAM,cAAc,KAAK,iBAAiB,KAAK,QAAQ;AAC7D,SAAK,IAAI,MAAM,4BAA4B,UAAU,GAAG;AACxD,UAAM,KAAK,UAAU,OAAO,KAAKA,QAAO;EAC1C;;;;EAKA,MAAM,aAAc,KAAUA,UAAsB;AAClD,SAAK,IAAI,MAAM,wBAAwB,GAAG;AAC1C,UAAM,QAAQ,MAAM,KAAK,cAAc,KAAKA,QAAO;AACnD,SAAK,IAAI,MAAM,2BAA2B,MAAM,MAAM,GAAG;AAEzD,WAAO,CAAC,GAAG,MAAM,KAAI,CAAE;EACzB;;;;EAKQ,MAAM,mBAAoB,KAAUC,SAAgBD,UAAmC;AAC7F,UAAM,MAAM,cAAc,KAAK,iBAAiB,KAAKC,OAAM;AAC3D,UAAM,SAAgB,OAAOD,UAAS,MAAM,QAAO,KAAM,KAAK,IAAG,CAAE;AAEnE,UAAM,KAAK,UAAU,IAAI,KAAK,QAAQA,QAAO;EAC/C;;;;EAKQ,MAAM,cAAe,KAAUA,UAAsB;AAC3D,UAAM,YAAY,IAAI,QAAO;AAC7B,UAAM,MAAM,cAAc,KAAK,iBAAiB,GAAG;AAEnD,qBAAiB,SAAS,KAAK,UAAU,MAAM,EAAE,QAAQ,IAAI,SAAQ,EAAE,GAAIA,QAAO,GAAG;AACnF,YAAM,EAAE,QAAAC,QAAM,IAAK,iBAAiB,MAAM,GAAG;AAC7C,gBAAU,IAAIA,SAAQ,iBAAiB,MAAM,KAAK,CAAC;IACrD;AAEA,WAAO;EACT;;;;ACrFF,IAAM,mBAAmB,aAAW;AACnC,QAAM,cAAc,QAAQ,oBAAoB,QAAQ,MAAM,QAAQ;AACtE,QAAM,iBAAiB,QAAQ,uBAAuB,QAAQ,OAAO,QAAQ;AAE7E,MAAI,CAAC,eAAe,CAAC,gBAAgB;AACpC,UAAM,IAAI,UAAU,2BAA2B;AAAA,EAChD;AAEA,SAAO;AAAA,IACN,aAAa,YAAY,KAAK,OAAO;AAAA,IACrC,gBAAgB,eAAe,KAAK,OAAO;AAAA,EAC5C;AACD;AAEO,SAAS,eAAe,SAAS,OAAOC,UAAS;AACvD,MAAI;AACJ,QAAM,cAAc,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpD,IAAAA,WAAU;AAAA,MACT,iBAAiB,CAAC,OAAO;AAAA,MACzB,WAAW;AAAA,MACX,oBAAoB;AAAA,MACpB,GAAGA;AAAA,IACJ;AAEA,QAAI,EAAEA,SAAQ,SAAS,MAAMA,SAAQ,UAAU,OAAO,qBAAqB,OAAO,UAAUA,SAAQ,KAAK,KAAK;AAC7G,YAAM,IAAI,UAAU,iDAAiD;AAAA,IACtE;AAEA,IAAAA,SAAQ,QAAQ,eAAe;AAG/B,UAAM,SAAS,CAAC,KAAK,EAAE,KAAK;AAE5B,UAAM,QAAQ,CAAC;AACf,UAAM,EAAC,aAAa,eAAc,IAAI,iBAAiB,OAAO;AAE9D,UAAM,SAAS,IAAI,eAAe;AACjC,YAAMC,SAAQD,SAAQ,YAAY,aAAa,WAAW,CAAC;AAG3D,UAAIA,SAAQ,UAAU,CAACA,SAAQ,OAAOC,MAAK,GAAG;AAC7C;AAAA,MACD;AAEA,YAAM,KAAKA,MAAK;AAEhB,UAAID,SAAQ,UAAU,MAAM,QAAQ;AACnC,eAAO;AACP,gBAAQ,KAAK;AAAA,MACd;AAAA,IACD;AAEA,UAAM,gBAAgB,WAAS;AAC9B,aAAO;AACP,aAAO,KAAK;AAAA,IACb;AAEA,aAAS,MAAM;AACd,iBAAWE,UAAS,QAAQ;AAC3B,uBAAeA,QAAO,MAAM;AAAA,MAC7B;AAEA,iBAAW,kBAAkBF,SAAQ,iBAAiB;AACrD,uBAAe,gBAAgB,aAAa;AAAA,MAC7C;AAAA,IACD;AAEA,eAAWE,UAAS,QAAQ;AAC3B,kBAAYA,QAAO,MAAM;AAAA,IAC1B;AAEA,eAAW,kBAAkBF,SAAQ,iBAAiB;AACrD,kBAAY,gBAAgB,aAAa;AAAA,IAC1C;AAEA,QAAIA,SAAQ,QAAQ;AACnB,MAAAA,SAAQ,OAAO,iBAAiB,SAAS,MAAM;AAC9C,sBAAcA,SAAQ,OAAO,MAAM;AAAA,MACpC,GAAG,EAAC,MAAM,KAAI,CAAC;AAAA,IAChB;AAEA,QAAIA,SAAQ,oBAAoB;AAC/B,cAAQ,KAAK;AAAA,IACd;AAAA,EACD,CAAC;AAED,cAAY,SAAS;AAErB,MAAI,OAAOA,SAAQ,YAAY,UAAU;AACxC,UAAM,UAAU,SAAS,aAAa,EAAC,cAAcA,SAAQ,QAAO,CAAC;AACrE,YAAQ,SAAS;AACjB,WAAO;AAAA,EACR;AAEA,SAAO;AACR;AAEO,SAAS,OAAO,SAAS,OAAOA,UAAS;AAC/C,MAAI,OAAOA,aAAY,YAAY;AAClC,IAAAA,WAAU,EAAC,QAAQA,SAAO;AAAA,EAC3B;AAEA,EAAAA,WAAU;AAAA,IACT,GAAGA;AAAA,IACH,OAAO;AAAA,IACP,oBAAoB;AAAA,EACrB;AAEA,QAAM,eAAe,eAAe,SAAS,OAAOA,QAAO;AAC3D,QAAM,UAAU,aAAa,KAAK,WAAS,MAAM,CAAC,CAAC;AACnD,UAAQ,SAAS,aAAa;AAE9B,SAAO;AACR;;;ACrCA,gBAAwB,UAAWG,UAAyB;AAC1D,QAAM,EAAE,KAAK,eAAe,WAAW,OAAO,OAAO,MAAM,UAAU,KAAAC,MAAK,WAAW,mBAAmB,OAAM,IAAKD;AACnH,QAAM,SAAS,SAAqB;IAClC,YAAY;GACb;AAID,QAAM,QAAQ,IAAI,MAAoC;IACpD,aAAa;IACb,MAAM,CAAC,GAAG,MAAM,WAAqB,EAAE,QAAQ,UAAU,EAAE,QAAQ,QAAQ;GAC5E;AACD,QAAM,iBAAiB,QAAQ,MAAK;AAClC,WAAO,KAAK,eAAe;MACzB,MAAM;QACJ,OAAO;QACP,QAAQ,MAAM;QACd,SAAS,MAAM;QACf,OAAO,MAAM;;OAEdA,QAAO,CAAC;AAEX,WAAO,IAAG;EACZ,CAAC;AACD,QAAM,iBAAiB,SAAS,CAAC,QAAO;AACtC,IAAAC,KAAI,MAAM,2BAA2B,IAAI,MAAM;EACjD,CAAC;AAED,QAAM,UAAU,MAAW;AACzB,UAAM,MAAK;AACX,WAAO,IAAI,IAAI,WAAU,CAAE;EAC7B;AAEA,SAAO,iBAAiB,SAAS,OAAO;AAExC,MAAI;AAUF,QAAS,YAAT,SAAoB,MAAgB,WAAqB;AACvD,UAAI,QAAQ,MAAM;AAChB;MACF;AAEA,gBAAU,IAAI,KAAK,GAAG,YAAW,EAAG,KAAK;AAEzC,YAAM,UAAU,IAAc,WAAW,KAAK;AAE9C,YAAM,IAAI,YAAW;AACnB,YAAI;AACF,2BAAiB,SAAS,MAAM;YAC9B,GAAGD;YACH;YACA;YACA,MAAM;cACJ,OAAO;cACP,QAAQ,MAAM;cACd,SAAS,MAAM;cACf,OAAO,MAAM;;YAEf;YACA;YACA;WACD,GAAG;AAEF,gBAAI,MAAM,SAAS,iBAAiB;AAClC,yBAAW,cAAc,MAAM,QAAQ;AACrC,oBAAI,UAAU,IAAI,WAAW,GAAG,YAAW,EAAG,KAAK,GAAG;AACpD,kBAAAC,KAAI,4BAA4B,WAAW,EAAE;AAC7C;gBACF;AAEA,oBAAI,UAAU,OAAO,WAAW,EAAE,GAAG;AACnC,kBAAAA,KAAI,wBAAwB;AAC5B;gBACF;AAEA,oBAAI,CAAE,MAAM,kBAAkB,WAAW,WAAW,UAAU,GAAI;AAChE,kBAAAA,KAAI,8BAA8B;AAClC;gBACF;AAEA,sBAAM,kBAAkB,MAAM,cAAc,WAAW,IAAI;kBACzD;iBACD;AACD,sBAAM,gBAAgB,IAAc,iBAAiB,KAAK;AAG1D,oBAAI,WAAqB,eAAe,OAAO,MAAM,IAAI;AACvD,kBAAAA,KAAI,oDAAoD,WAAW,IAAI,KAAK,IAAI;AAChF;gBACF;AAEA,gBAAAA,KAAI,2BAA2B,WAAW,EAAE;AAC5C,0BAAU,YAAY,eAAe;cACvC;YACF;AAEA,mBAAO,KAAK;cACV,GAAG;cACH,MAAM;gBACJ,OAAO;gBACP,QAAQ,MAAM;gBACd,SAAS,MAAM;gBACf,OAAO,MAAM;;aAEhB;UACH;QACF,SAAS,KAAU;AAEjB,iBAAO,KAAK,gBAAgB;YAC1B,MAAM,KAAK;YACX,OAAO;YACP,MAAM;cACJ,OAAO;cACP,QAAQ,MAAM;cACd,SAAS,MAAM,UAAU;cACzB,OAAO,MAAM,OAAO;;aAErBD,QAAO,CAAC;QACb;MACF,GAAG;QACD,UAAU;OACX,EAAE,MAAM,SAAM;AACb,QAAAC,KAAI,MAAM,2BAA2B,GAAG;MAC1C,CAAC;IACH;AA/FA,UAAM,QAAQ,MAAM,cAAc,KAAK;MACrC;KACD;AAgGD,UAAM,QAAQ,IACZ,cAAc,IAAI,OAAM,iBAAe;AACrC,gBAAU,EAAE,IAAI,cAAc,YAAY,CAAA,EAAE,GAAI,MAAM,cAAc,cAAc;QAChF;OACD,CAAC;IACJ,CAAC,CAAC;AAIJ,WAAQ;EACV;AACE,WAAO,oBAAoB,SAAS,OAAO;EAC7C;AACF;;;ACnLM,IAAO,eAAP,MAAmB;EAChB;EACU;EACT;EACA;EACS;EACA;EACA;EACA;EACT;EACS;EACA;EAEjB,YAAa,YAAoC,MAAsB;AACrE,SAAK,YAAY,KAAK;AACtB,SAAK,gBAAgB,KAAK,iBAAiB;AAC3C,SAAK,QAAQ,KAAK,SAAS;AAC3B,SAAK,yBAAyB,KAAK;AACnC,SAAK,eAAe,KAAK;AACzB,SAAK,SAAS,WAAW;AACzB,SAAK,SAAS,WAAW;AACzB,SAAK,oBAAoB,WAAW;AACpC,SAAK,0BAA0B,KAAK,2BAA2B;AAG/D,SAAK,qBAAqB,IAAI,gBAAe;AAE7C,oBAAgB,UAAU,KAAK,mBAAmB,MAAM;AAExD,SAAK,UAAU;EACjB;EAEA,YAAS;AACP,WAAO,KAAK;EACd;;;;EAKA,MAAM,QAAK;AACT,QAAI,KAAK,SAAS;AAChB;IACF;AAEA,SAAK,UAAU;AAGf,SAAK,qBAAqB,IAAI,gBAAe;AAE7C,oBAAgB,UAAU,KAAK,mBAAmB,MAAM;EAC1D;;;;EAKA,MAAM,OAAI;AACR,SAAK,UAAU;AAEf,SAAK,mBAAmB,MAAK;EAC/B;EAEA,OAAQ,IAAK,KAAiB,WAAsBC,WAAwB,CAAA,GAAE;AAC5E,QAAI,CAAC,KAAK,SAAS;AACjB,YAAM,IAAI,MAAM,0BAA0B;IAC5C;AAEA,QAAIA,SAAQ,UAAU,MAAM;AAE1B,YAAMC,UAAS,YAAY,QAAQ,qBAAqB;AAIxD,sBAAgB,UAAUA,OAAM;AAEhC,MAAAD,WAAU;QACR,GAAGA;QACH,QAAAC;;IAEJ;AAIA,UAAM,2BAA2B,IAAI,gBAAe;AAEpD,UAAM,SAAS,UAAU;MACvB,KAAK,mBAAmB;MACxB,yBAAyB;MACzBD,SAAQ;KACT;AAID,oBAAgB,UAAU,QAAQ,yBAAyB,MAAM;AAEjE,UAAME,OAAM,KAAK,OAAO,aAAa,GAAG,KAAK,SAAS,YAAY,SAAmB,KAAK,WAAW,CAAC;AAGtG,QAAI,gBAAgB;AAEpB,QAAI;AACF,UAAI,KAAK,aAAa,SAAS,KAAK,CAAC,KAAK,yBAAyB;AACjE,QAAAA,KAAI,0EAA0EF,SAAQ,gBAAgB,OAAO,UAAU,EAAE;AAEzH,cAAM,OAAO,KAAK,cAAc,YAAY;UAC1C;UACA,QAAQ,CAAC,UAAU,CAAC,KAAK,OAAO,OAAO,MAAM,MAAM;SACpD;AACD,QAAAE,KAAI,oDAAoDF,SAAQ,gBAAgB,OAAO,UAAU,EAAE;MACrG;AAEA,UAAIA,SAAQ,gBAAgB,QAAQ,KAAK,0BAA0B,MAAM;AACvE,QAAAE,KAAI,kDAAkD;AAEtD,cAAM,WAAW,KAAK,uBAAuB,SAAS,MAAM;AAE5D,aAAK,yBAAyB;MAChC;AAEA,MAAAA,KAAI,aAAa;AAEjB,YAAM,KAAK,MAAM,cAAc,KAAK;QAClC;OACD;AACD,YAAM,QAAQ,KAAK,aAAa,aAAa,IAAI;QAC/C,OAAO,KAAK,aAAa;OAC1B;AAGD,YAAM,eAAe,MAAM,KAAK,MAAK;AACnC,YAAI,KAAK,OAAM,IAAK,KAAK;AACvB,iBAAO;QACT;AAEA,eAAO;MACT,CAAC,EACE,OAAO,CAAC,KAAiB,MAAM,UAAS;AACvC,YAAI,QAAQ,KAAK,aAAa,EAAE,KAAK,IAAI;AAEzC,eAAO;MACT,GAAG,IAAI,MAAM,KAAK,aAAa,EAAE,KAAK,CAAC,EAAE,IAAI,MAAM,CAAA,CAAE,CAAC,EACrD,OAAO,CAAAC,WAASA,OAAM,SAAS,CAAC;AAEnC,UAAI,MAAM,WAAW,GAAG;AACtB,QAAAD,KAAI,MAAM,6BAA6B;AACvC;MACF;AAGA,YAAM,YAAY,2BAA2B,IAAI;AAGjD,YAAM,QAAQ,aAAa,IAAI,CAAC,MAAM,UAAS;AAC7C,eAAO,UAAU;UACf,GAAGF;UACH;UACA,eAAe;UACf,WAAW,KAAK;UAChB;UACA,OAAO;UACP,MAAM;UACN,UAAU,aAAa;UACvB,OAAO,KAAK;UACZ,KAAAE;UACA;UACA,YAAYF,SAAQ;UACpB,mBAAmB,KAAK;SACzB;MACH,CAAC;AAGD,uBAAiB,SAASI,aAAM,GAAG,KAAK,GAAG;AACzC,YAAI,MAAM,SAAS,eAAe;AAChC,UAAAF,KAAI,MAAM,eAAe,MAAM,KAAK;QACtC;AAEA,YAAI,MAAM,SAAS,iBAAiB;AAClC,qBAAW,QAAQ,CAAC,GAAG,MAAM,QAAQ,GAAG,MAAM,SAAS,GAAG;AAExD,gBAAI,CAAE,MAAM,KAAK,kBAAkB,WAAW,KAAK,YAAY;cAC7D;aACD,GAAI;AACH;YACF;AAEA,kBAAM,KAAK,aAAa,IAAI,KAAK,IAAI;cACnC;aACD;UACH;QACF;AAEA,eAAO,eAAc;AACrB,cAAM;MACR;AAEA,sBAAgB;IAClB,SAAS,KAAK;AACZ,UAAI,KAAK,SAAS;AAEhB,cAAM;MACR;IACF;AACE,UAAI,CAAC,eAAe;AAClB,QAAAA,KAAI,oBAAoB;AACxB,iCAAyB,MAAK;MAChC;AAEA,aAAO,MAAK;AAEZ,MAAAA,KAAI,gBAAgB;IACtB;EACF;;;;AC9NF,SAASG,iBAAqB,OAAU;AACtC,SAAO,MAAM,OAAO,aAAa,KAAK;AACxC;AAOA,SAASC,SAAQ,QAAkD;AACjE,MAAID,iBAAgB,MAAM,GAAG;AAC3B,YAAQ,YAAW;AACjB,UAAI,QAAQ;AAEZ,uBAAiB,KAAK,QAAQ;AAC5B;MACF;AAEA,aAAO;IACT,GAAE;EACJ,OAAO;AACL,QAAI,QAAQ;AAEZ,eAAW,KAAK,QAAQ;AACtB;IACF;AAEA,WAAO;EACT;AACF;AAEA,IAAAE,gBAAeD;;;AChCT,IAAO,YAAP,MAAgB;EACH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACT;EACA;EACA;EACA;EACA;EAER,YAAa,YAAiC,MAAmB;AAC/D,SAAK,SAAS,WAAW;AACzB,SAAK,MAAM,WAAW,OAAO,aAAa,GAAG,KAAK,SAAS,aAAa;AACxE,SAAK,SAAS,WAAW;AACzB,SAAK,UAAU;AACf,SAAK,cAAc,KAAK;AACxB,SAAK,QAAQ,KAAK,SAAS;AAC3B,SAAK,WAAW,KAAK,YAAY;AACjC,SAAK,kBAAkB,KAAK,mBAAmB;AAC/C,SAAK,eAAe,KAAK,gBAAgB;AACzC,SAAK,yBAAyB,KAAK;AAEnC,SAAK,YAAY,oBAAoB,KAAK,UAAU,KAAK,IAAI,GAAG,KAAK,kBAAkB,YAAY;EACrG;EAEA,YAAS;AACP,WAAO,KAAK;EACd;EAEA,QAAK;AACH,QAAI,KAAK,SAAS;AAChB;IACF;AAEA,SAAK,UAAU;AACf,iBAAa,KAAK,SAAS;AAC3B,SAAK,YAAY,WAAW,MAAK;AAC/B,WAAK,UAAS,EACX,MAAM,SAAM;AACX,aAAK,IAAI,MAAM,4BAA4B,GAAG;MAChD,CAAC;IACL,GAAG,KAAK,eAAe;EACzB;EAEA,OAAI;AACF,SAAK,UAAU;AAEf,QAAI,KAAK,aAAa,MAAM;AAC1B,mBAAa,KAAK,SAAS;IAC7B;AAEA,QAAI,KAAK,cAAc,MAAM;AAC3B,WAAK,WAAW,MAAK;IACvB;EACF;EAEA,MAAM,YAAS;AACb,QAAI,CAAC,KAAK,SAAS;AACjB,WAAK,IAAI,4CAA4C;AACrD;IACF;AAEA,QAAI,KAAK,oBAAoB,MAAM;AACjC,WAAK,IAAI,6BAA6B;AACtC,aAAO,KAAK,iBAAiB;IAC/B;AAEA,SAAK,mBAAmB,OAAM;AAE9B,QAAI,KAAK,SAAS;AAChB,WAAK,aAAa,IAAI,gBAAe;AACrC,YAAM,UAAU,CAAC,KAAK,WAAW,MAAM;AAGvC,UAAI,KAAK,0BAA0B,MAAM;AACvC,cAAM,gBAAgB,YAAY,QAAQ,KAAK,YAAY;AAC3D,wBAAgB,UAAU,aAAa;AACvC,gBAAQ,KAAK,aAAa;MAC5B;AAEA,YAAM,SAAS,UAAU,OAAO;AAChC,sBAAgB,UAAU,QAAQ,KAAK,WAAW,MAAM;AAExD,UAAI;AACF,aAAK,IAAI,2DAA2D,KAAK,OAAO,KAAK,YAAY;AACjG,cAAME,SAAQ,KAAK,IAAG;AAEtB,cAAM,QAAQ,MAAM,KAClB,KAAK,YAAY,gBAAgB,KAAK,OAAO,YAAW,EAAG,OAAO;UAChE;UACA,aAAa;SACd,GACD,CAAC,WAAWC,aAAK,QAAQ,KAAK,KAAK,GACnC,OAAO,WAAWA,cAAO,MAAM,CAAC;AAGlC,gBAAQ,eAAc;AAEtB,cAAM,WAAW,KAAK,IAAG,IAAKD;AAE9B,aAAK,IAAI,qCAAqC,OAAO,QAAQ;AAE7D,aAAK,OAAO,cAAc,IAAI,YAAY,sBAAsB;UAC9D,QAAQ;YACN;YACA;;SAEH,CAAC;MACJ,SAAS,KAAU;AACjB,aAAK,IAAI,MAAM,oBAAoB,GAAG;MACxC;AACE,eAAO,MAAK;AAEZ,YAAI,KAAK,0BAA0B,MAAM;AACvC,eAAK,uBAAuB,QAAO;AACnC,eAAK,yBAAyB;QAChC;MACF;IACF;AAEA,SAAK,iBAAiB,QAAO;AAC7B,SAAK,mBAAmB;AAExB,QAAI,CAAC,KAAK,SAAS;AACjB;IACF;AAEA,SAAK,YAAY,WAAW,MAAK;AAC/B,WAAK,UAAS,EACX,MAAM,SAAM;AACX,aAAK,IAAI,MAAM,4BAA4B,GAAG;MAChD,CAAC;IACL,GAAG,KAAK,QAAQ;EAClB;;;;AC/HI,IAAO,aAAP,cAA0B,kBAAkC;EAC/C;EACA;EACA;EACA;EACT;EACS;EACT;EACA;EACS;EACA;EACA;EACA;EACA;EACA;EACA;EAEjB,YAAa,YAAkC,MAAoB;AACjE,UAAK;AAEL,SAAK,MAAM,WAAW,OAAO,aAAa,GAAG,KAAK,SAAS,aAAa;AACxE,SAAK,SAAS,WAAW;AACzB,SAAK,iBAAiB,IAAI,MAAM;MAC9B,aAAa,KAAK,eAAe;MACjC,SAAS,WAAW;MACpB,YAAY,GAAG,KAAK,aAAa;KAClC;AACD,SAAK,mBAAmB,IAAI,gBAAgB;MAC1C,GAAI,KAAK,WAAW,CAAA;MACpB,SAAS,WAAW;MACpB,YAAY,GAAG,KAAK,aAAa;KAClC;AACD,SAAK,YAAY,WAAW;AAC5B,SAAK,iBAAiB,WAAW;AACjC,SAAK,kBAAkB,GAAG,KAAK,eAAe;AAC9C,SAAK,qBAAqB,KAAK,aAAa;AAC5C,SAAK,eAAe,KAAK,gBAAgB;AACzC,SAAK,WAAW,KAAK,YAAY;AACjC,SAAK,WAAW,KAAK,YAAY;AACjC,SAAK,iBAAiB,KAAK;AAC3B,SAAK,UAAU;AAEf,SAAK,YAAY,oBAAoB,KAAK,UAAU,KAAK,IAAI,GAAG,KAAK,kBAAkB,SAAS;EAClG;EAEA,QAAK;AACH,QAAI,KAAK,SAAS;AAChB;IACF;AAEA,SAAK,UAAU;AAEf,SAAK,qBAAqB,IAAI,gBAAe;AAC7C,oBAAgB,UAAU,KAAK,mBAAmB,MAAM;AAExD,SAAK,UAAU,WAAW,MAAK;AAC7B,WAAK,QAAQ;QACX,QAAQ,YAAY,QAAQ,iBAAiB;OAC9C,EAAE,MAAM,SAAM;AACb,aAAK,IAAI,MAAM,wCAAwC,GAAG;MAC5D,CAAC;IACH,GAAG,KAAK,QAAQ;EAClB;EAEA,OAAI;AACF,SAAK,UAAU;AACf,SAAK,eAAe,MAAK;AACzB,iBAAa,KAAK,OAAO;AACzB,SAAK,oBAAoB,MAAK;EAChC;;;;;EAMQ,MAAM,QAASE,UAAsB;AAC3C,QAAI;AACF,WAAK,kBAAkB,iBAAiB;AAGxC,uBAAiB,SAAS,KAAK,UAAU,MAAM;QAC7C,QAAQ,KAAK;SACZA,QAAO,GAAG;AACX,YAAI;AAEF,gBAAM,EAAE,KAAK,QAAAC,QAAM,IAAK,iBAAiB,MAAM,GAAG;AAClD,gBAAM,UAAU,iBAAiB,MAAM,KAAK,EAAE,QAAO;AACrD,gBAAM,UAAU,UAAU,KAAK;AAC/B,gBAAM,MAAM,KAAK,IAAG;AACpB,gBAAM,UAAU,MAAM;AAEtB,eAAK,IAAI,MAAM,8BAA8B,SAAS,MAAM,KAAK,UAAU,SAAS,UAAU,cAAc,EAAE;AAG9G,cAAI,SAAS;AACX,kBAAM,KAAK,UAAU,OAAO,MAAM,KAAKD,QAAO;UAChD;AAIA,cAAI,KAAK,OAAO,OAAOC,OAAM,KAAM,MAAM,UAAW,KAAK,oBAAoB;AAC3E,iBAAK,eAAe,GAAG,EACpB,MAAM,SAAM;AACX,mBAAK,IAAI,MAAM,+BAA+B,KAAK,GAAG;YACxD,CAAC;UACL;QACF,SAAS,KAAU;AACjB,eAAK,IAAI,MAAM,0CAA0C,MAAM,KAAK,IAAI,OAAO;QACjF;MACF;AAEA,WAAK,IAAI,8BAA8B;IACzC;AACE,WAAK,kBAAkB,eAAe;AAEtC,UAAI,KAAK,SAAS;AAChB,aAAK,UAAU,WAAW,MAAK;AAC7B,eAAK,QAAQ;YACX,QAAQ,YAAY,QAAQ,iBAAiB;WAC9C,EAAE,MAAM,SAAM;AACb,iBAAK,IAAI,MAAM,iCAAiC,GAAG;UACrD,CAAC;QACH,GAAG,KAAK,QAAQ;MAClB;IACF;EACF;EAEQ,MAAM,eAAgB,KAAUD,UAAsB;AAC5D,QAAI,CAAC,KAAK,SAAS;AACjB;IACF;AAEA,SAAK,IAAI,MAAM,mEAAmE,GAAG;AACrF,UAAM,KAAK,eAAe,eAAe,KAAK,cAAcA,QAAO;AAEnE,UAAM,cAAc,KAAK,eAAe,MAAM,KAAK,SAAO,IAAI,QAAQ,IAAI,OAAO,GAAG,CAAC;AAErF,QAAI,eAAe,MAAM;AACvB,WAAK,IAAI,MAAM,wDAAwD,GAAG;AAC1E,aAAO,YAAY,KAAI;IACzB;AAEA,SAAK,IAAI,MAAM,iCAAiC,GAAG;AAEnD,SAAK,eAAe,IAAI,OAAOA,aAA0B;AACvD,MAAAA,SAAQ,QAAQ,eAAc;AAE9B,UAAI,CAAC,KAAK,SAAS;AACjB;MACF;AAEA,WAAK,IAAI,MAAM,mBAAmB,GAAG;AAGrC,YAAM,SAAS,KAAK,iBAAiB,iBAAiBA,QAAO;AAE7D,UAAI;AAEF,cAAM,KAAK,UAAUA,SAAQ,KAAKA,QAAO;MAC3C;AACE,aAAK,iBAAiB,QAAQ,MAAM;MACtC;AAEA,WAAK,IAAI,MAAM,kBAAkB,GAAG;IACtC,GAAG;MACD,QAAQ,KAAK,oBAAoB;MACjC;KACD,EACE,MAAM,SAAM;AACX,WAAK,IAAI,MAAM,oCAAoC,KAAK,GAAG;IAC7D,CAAC;EACL;EAEQ,MAAM,UAAW,KAAUA,UAAsB;AAEvD,UAAM,YAAM,KAAK,eAAe,QAAQ,KAAK,KAAK,eAAe,aAAY,GAAIA,QAAO,CAAC;EAC3F;;;;ACtNK,IAAM,gBAAgB;AACtB,IAAM,mBAAmB;AACzB,IAAM,qBAAqB;AAC3B,IAAM,sBAAsB;AAuB7B,IAAO,eAAP,MAAmB;EACN;EACA;EACT;EACA;EACS;EACA;EACT;EACS;EACA;EACA;EACT;EAER,YAAa,YAAoC,MAAsB;AACrE,SAAK,aAAa;AAClB,SAAK,MAAM,WAAW,OAAO,aAAa,GAAG,KAAK,SAAS,gBAAgB;AAC3E,SAAK,eAAe,KAAK;AACzB,SAAK,kBAAkB,KAAK,mBAAmB;AAC/C,SAAK,cAAc,KAAK,eAAe;AACvC,SAAK,eAAe,KAAK,gBAAgB;AACzC,SAAK,gBAAgB,KAAK,iBAAiB;AAE3C,SAAK,eAAe,IAAI,QAAO;AAC/B,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAC3C,SAAK,UAAU;EACjB;EAEA,MAAM,QAAK;AACT,QAAI,KAAK,SAAS;AAChB;IACF;AAEA,SAAK,UAAU;AAEf,UAAM,cAAc,MAAM,cAAc,KAAK,WAAW,MAAM;AAC9D,SAAK,WAAW,IAAI,iBAAiB,aAAa,KAAK,WAAW;AAClE,SAAK,aAAa,iBAAiB,aAAa,KAAK,UAAU;AAE/D,SAAK,UAAU,YAAY,MAAK;AAC9B,WAAK,eAAc,EAChB,MAAM,SAAM;AACX,aAAK,IAAI,MAAM,iCAAiC,GAAG;MACrD,CAAC;IACL,GAAG,KAAK,eAAe;EACzB;EAEA,OAAI;AACF,SAAK,UAAU;AACf,SAAK,aAAa,oBAAoB,aAAa,KAAK,UAAU;AAClE,iBAAa,KAAK,OAAO;EAC3B;EAEA,WAAY,OAA0B;AACpC,SAAK,UAAU,IAAI,EAAE,IAAI,MAAM,QAAQ,YAAY,CAAA,EAAE,CAAE,EACpD,MAAM,SAAM;AACX,WAAK,IAAI,MAAM,2CAA2C,GAAG;IAC/D,CAAC;EACL;EAEA,MAAM,iBAAc;AAClB,UAAM,aAAa,IAAI,QAAQ,KAAK,UAAU,MAAM,IAAI,CAAC,EAAE,KAAI,MAAO,KAAK,EAAE,CAAC;AAC9E,UAAM,QAAQ,WAAW,WAAW,KAAK,YAAY;AACrD,UAAM,UAAU,KAAK,aAAa,WAAW,UAAU;AACvD,SAAK,eAAe;AAEpB,UAAM,QAAQ,IAAI;MAChB,GAAG,CAAC,GAAG,KAAK,EAAE,IAAI,OAAME,YAAS;AAC/B,cAAM,KAAK,WAAW,UAAU,MAAMA,SAAQ;UAC5C,MAAM;YACJ,CAAC,KAAK,YAAY,GAAG;cACnB,OAAO,KAAK;;YAEd,CAACC,eAAc,GAAG;cAChB,OAAO;;;SAGZ;MACH,CAAC;MACD,GAAG,CAAC,GAAG,OAAO,EAAE,IAAI,OAAMD,YAAS;AACjC,cAAM,KAAK,WAAW,UAAU,MAAMA,SAAQ;UAC5C,MAAM;YACJ,CAAC,KAAK,YAAY,GAAG;YACrB,CAACC,eAAc,GAAG;;SAErB;MACH,CAAC;KACF;EACH;;;;ACQI,SAAU,aAAc,KAAQ;AACpC,SAAO,MAAM,QAAQ,KAAK,KAAK;AACjC;AAWM,IAAO,UAAP,MAAc;EACD;EACV;EACA;EACU;EACA;EACA;EACA;EACA;EACV;EACA;EACU;EACA;EACA;EACA;EAEjB,YAAa,YAA+BC,UAAuB;AACjE,SAAK,SAAS,WAAW;AACzB,SAAK,eAAeA,SAAQ,gBAAgB;AAC5C,SAAK,cAAcA,SAAQ,eAAe;AAC1C,SAAK,iBAAiBA,SAAQ,kBAAkB,KAAK;AACrD,SAAK,sBAAsBA,SAAQ,6BAA6B;AAChE,SAAK,oBAAoBA,SAAQ,qBAAqB;AACtD,SAAK,OAAOA,SAAQ;AACpB,SAAK,SAASA,SAAQ;AACtB,SAAK,QAAQA,SAAQ;AACrB,SAAK,WAAWA,SAAQ;AACxB,SAAK,gBAAgB,eAAe;MAClC,MAAM,GAAGA,SAAQ,aAAa;MAC9B,SAAS,WAAW;KACrB;AAED,SAAK,OAAO;MACV,QAAQ;MACR,OAAO;MACP,OAAO,CAAA;;EAEX;EAEA,MAAM,QAAK;AACT,UAAM,KAAK,YAAY,KAAK,MAAM;EACpC;EAEA,OAAI;AACF,SAAK,cAAc,MAAK;AAExB,SAAK,OAAO;MACV,QAAQ;MACR,OAAO;MACP,OAAO,CAAA;;EAEX;EAEA,MAAM,YAAaC,SAAgBD,UAAsB;AACvD,SAAK,YAAY;MACf,QAAAC;MACA,OAAO,MAAM,cAAcA,SAAQD,QAAO;MAC1C,UAAU,KAAK,IAAG;;EAEtB;;;;EAKA,MAAM,IAAKC,SAAgBD,UAAsB;AAC/C,UAAM,OAAO;MACX,QAAAC;MACA,OAAO,MAAM,cAAcA,SAAQD,QAAO;MAC1C,UAAU;;AAGZ,UAAM,kBAAkB,KAAK,cAAc,IAAIC,OAAM;AAErD,QAAI,mBAAmB,MAAM;AAC3B,aAAO;IACT;AAEA,QAAI;AACF,YAAM,IAAI,KAAK,KAAK,MAAMD,QAAO;AACjC,WAAK,cAAc,IAAIC,SAAQ,CAAC;AAChC,YAAM;IACR;AACE,WAAK,cAAc,OAAOA,OAAM;IAClC;EACF;EAEQ,MAAM,KAAM,MAAYD,UAAsB;AACpD,UAAM,SAAS,KAAK,iBAAiB,KAAK,KAAK;AAG/C,QAAI,KAAK,SAAS,QAAQ,KAAK,KAAK,IAAI,IAAI;AAC1C;IACF;AAGA,QAAI,OAAO,MAAM,WAAW,KAAK,kBAAkB,OAAO,QAAQ,KAAK,cAAc;AAEnF,YAAM,KAAK,OAAO,QAAQA,QAAO;AAGjC,YAAM,KAAK,KAAK,MAAMA,QAAO;AAE7B;IACF;AAGA,QAAI,OAAO,MAAM,SAAS,KAAK,aAAa;AAE1C,UAAI,CAAC,UAAU,MAAM,KAAK,iBAAiB,GAAG;AAC5C,eAAO,MAAM,KAAK,IAAI;AACtB,cAAM,KAAK,QAAQ,MAAM,QAAQA,QAAO;AACxC;MACF;AAEA,YAAM,SAAS,MAAM,KAAK,OAAO,MAAMA,QAAO;AAG9C,UAAI,QAAQ;AACV,aAAK,WAAW,KAAK,IAAG;AAGxB,cAAM,KAAK,KAAK,MAAMA,QAAO;MAC/B;AAEA;IACF;AAUA,UAAM,SAAS,OAAO,MACnB,OAAO,CAAAE,UAAO;AACb,UAAIA,MAAK,OAAO,OAAO,KAAK,WAAW,MAAM,GAAG;AAC9C,eAAO;MACT;AAEA,UAAIA,MAAK,WAAY,KAAK,IAAG,IAAK,KAAK,mBAAoB;AACzD,eAAO;MACT;AAEA,aAAO;IACT,CAAC,EACA,KAAK,CAAC,GAAG,MAAK;AAEb,UAAI,EAAE,WAAW,EAAE,UAAU;AAC3B,eAAO;MACT;AAEA,UAAI,EAAE,WAAW,EAAE,UAAU;AAC3B,eAAO;MACT;AAEA,aAAO;IACT,CAAC,EACA,MAAM,GAAG,KAAK,mBAAmB;AAEpC,QAAI,UAAU;AAEd,qBAAiB,WAAW,KAAK,KAAK,QAAQF,QAAO,GAAG;AACtD,gBAAU;AACV,YAAM,KAAK,OAAO,QAAQ,OAAOA,QAAO;IAC1C;AAGA,QAAI,CAAC,SAAS;AACZ;IACF;AAGA,UAAM,KAAK,KAAK,MAAMA,QAAO;EAC/B;;;;;;;;EASA,CAAE,QAAS,IAAgBA,UAAgC;AACzD,UAAM,OAAO,IAAI,iBAAiB,IAAIA,UAAS,SAAS,KAAK,WAAW;AAExE,eAAW,QAAQ,KAAK,WAAU,GAAI;AACpC,UAAIA,UAAS,SAAS,KAAK,OAAK,EAAE,OAAO,KAAK,MAAM,CAAC,MAAM,MAAM;AAC/D;MACF;AAEA,WAAK,aAAa,EAAE,IAAI,KAAK,QAAQ,YAAY,CAAA,EAAE,GAAI,KAAK,KAAK;IACnE;AAEA,WAAQG,aAAI,KAAK,OAAO,CAAC,EAAE,KAAI,MAAO,KAAK,EAAE;EAC/C;;;;;;EAOA,QAAK;AACH,aAAS,YAAa,QAAc;AAClC,UAAI,aAAa,MAAM,GAAG;AACxB,eAAO,OAAO,MAAM;MACtB;AAEA,UAAI,QAAQ;AAEZ,UAAI,OAAO,QAAQ,MAAM;AACvB,iBAAS,YAAY,OAAO,IAAI;MAClC;AAEA,UAAI,OAAO,SAAS,MAAM;AACxB,iBAAS,YAAY,OAAO,KAAK;MACnC;AAEA,aAAO;IACT;AAEA,WAAO,YAAY,KAAK,IAAI;EAC9B;;;;;;;;;;EAWA,IAAK,OAAiB;AACpB,UAAM,SAAS,KAAK,iBAAiB,KAAK;AAC1C,UAAM,QAAQ,KAAK,SAAS,QAAQ,KAAK;AAEzC,WAAO,OAAO,MAAM,KAAK;EAC3B;;;;;;EAOA,MAAM,OAAQ,OAAmBH,UAAsB;AACrD,UAAM,SAAS,KAAK,iBAAiB,KAAK;AAC1C,UAAM,QAAQ,KAAK,SAAS,QAAQ,KAAK;AAEzC,QAAI,QAAQ,IAAI;AACd,YAAM,OAAO,OAAO,MAAM,OAAO,OAAO,CAAC,EAAE,CAAC;AAE5C,YAAM,KAAK,WAAW,MAAM,QAAQA,QAAO;IAC7C;EACF;;;;;;;;EASA,CAAE,aAAU;AACV,cAAW,QAAS,QAAc;AAChC,UAAI,aAAa,MAAM,GAAG;AACxB,eAAQ,OAAO;AACf;MACF;AAEA,aAAQ,QAAQ,OAAO,IAAI;AAC3B,aAAQ,QAAQ,OAAO,KAAK;IAC9B;AAEA,WAAQ,QAAQ,KAAK,IAAI;EAC3B;;;;;;;;;EAUA,SAAU,SAAqB,UAAoB;AACjD,WAAO,OAAO,OAAO,SAAmB,IAAc,SAAS,QAAQ,GAAG,QAAQ,CAAC;EACrF;;;;;;;;EASQ,iBAAkB,OAAiB;AACzC,UAAM,YAAY,SAAmB,OAAO,OAAO;AAEnD,aAAS,WAAY,QAAgB,WAAmB,GAAC;AACvD,UAAI,aAAa,MAAM,GAAG;AACxB,eAAO;MACT;AAEA,YAAM,MAAM,UAAU,QAAQ;AAE9B,UAAI,QAAQ,KAAK;AACf,eAAO,WAAW,OAAO,MAAM,WAAW,CAAC;MAC7C;AAEA,aAAO,WAAW,OAAO,OAAO,WAAW,CAAC;IAC9C;AAEA,WAAO,WAAW,KAAK,IAAI;EAC7B;;;;;;;;;EAUQ,SAAU,QAAoB,OAAiB;AACrD,WAAO,OAAO,MAAM,UAAU,UAAQ,OAAiB,KAAK,OAAO,KAAK,CAAC;EAC3E;;;;;;EAOQ,MAAM,OAAQ,QAAoBA,UAAsB;AAE9D,UAAM,OAAmB;MACvB,QAAQ;MACR,OAAO,OAAO,QAAQ;MACtB,OAAO,CAAA;;AAET,UAAM,QAAoB;MACxB,QAAQ;MACR,OAAO,OAAO,QAAQ;MACtB,OAAO,CAAA;;AAIT,eAAW,QAAQ,OAAO,OAAO;AAC/B,YAAM,YAAY,SAAmB,KAAK,OAAO,OAAO;AAExD,UAAI,UAAU,OAAO,KAAK,MAAM,KAAK;AACnC,aAAK,MAAM,KAAK,IAAI;AACpB,cAAM,KAAK,SAAS,MAAM,QAAQ,MAAMA,QAAO;MACjD,OAAO;AACL,cAAM,MAAM,KAAK,IAAI;AACrB,cAAM,KAAK,SAAS,MAAM,QAAQ,OAAOA,QAAO;MAClD;IACF;AAGA,4BAAwB,QAAQ,MAAM,KAAK;EAC7C;;AAGF,SAAS,wBAAyB,QAAa,MAAW,OAAU;AAClE,SAAO,OAAO;AACd,SAAO,OAAO;AACd,SAAO,QAAQ;AAEf,MAAI,OAAO,WAAW,IAAI;AACxB,WAAO,OAAO;AACd,WAAO,OAAO;EAChB;AAEA,SAAO;AACT;AAEA,SAAS,UAAW,MAAY,WAAiB;AAC/C,SAAO,KAAK,WAAY,KAAK,IAAG,IAAK;AACvC;;;AC1fO,IAAM,eAAe;AACrB,IAAM,gBAAgB;AAEtB,IAAM,+BAA+B;AACrC,IAAM,kCAAkC;AACxC,IAAM,yBAAyB;AAE/B,IAAM,+BAA+B;AACrC,IAAM,kCAAkC;AACxC,IAAM,oBAAoB;AAC1B,IAAM,qBAAqB;AAC3B,IAAM,sBAAsB;AAC5B,IAAM,mCAAmC;AACzC,IAAM,gCAAgC;AA6CvC,IAAO,eAAP,cAA4B,kBAAqC;EAC9D;EACA;EACA;EACU;EACA;EACA;EACT;EACS;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAUT;EAER,YAAa,YAAoC,MAAsB;AACrE,UAAK;AAEL,SAAK,aAAa;AAClB,SAAK,MAAM,WAAW,OAAO,aAAa,GAAG,KAAK,SAAS,gBAAgB;AAC3E,SAAK,cAAc,KAAK,eAAe;AACvC,SAAK,UAAU;AACf,SAAK,WAAW,KAAK;AACrB,SAAK,UAAU,KAAK;AACpB,SAAK,cAAc,KAAK,eAAe;AACvC,SAAK,eAAe,KAAK,gBAAgB;AACzC,SAAK,kBAAkB,KAAK,gBAAgB,KAAK,IAAI;AACrD,SAAK,mBAAmB,KAAK,iBAAiB,KAAK,IAAI;AACvD,SAAK,YAAY,KAAK,UAAU,KAAK,IAAI;AACzC,SAAK,cAAc,KAAK,YAAY,KAAK,IAAI;AAC7C,SAAK,+BAA+B,KAAK,gCAAgC;AACzE,SAAK,6BAA6B,KAAK,8BAA8B;AACrE,SAAK,qBAAqB,IAAI,gBAAe;AAE7C,SAAK,sBAAsB,IAAI,UAAU;MACvC,aAAa,KAAK,6BAA6B;MAC/C,YAAY,GAAG,KAAK,aAAa;MACjC,SAAS,KAAK,WAAW;MACzB,SAAS,KAAK,8BAA8B;KAC7C;AACD,SAAK,wBAAwB,IAAI,gBAAgB;MAC/C,GAAI,KAAK,yBAAyB,CAAA;MAClC,SAAS,KAAK,WAAW;MACzB,YAAY,GAAG,KAAK,aAAa;KAClC;AAED,SAAK,sBAAsB,IAAI,UAAU;MACvC,aAAa,KAAK,6BAA6B;MAC/C,YAAY,GAAG,KAAK,aAAa;MACjC,SAAS,KAAK,WAAW;MACzB,SAAS,KAAK,8BAA8B;KAC7C;AACD,SAAK,wBAAwB,IAAI,gBAAgB;MAC/C,GAAI,KAAK,yBAAyB,CAAA;MAClC,SAAS,KAAK,WAAW;MACzB,YAAY,GAAG,KAAK,aAAa;KAClC;AAED,SAAK,KAAK,IAAI,QAAQ,YAAY;MAChC,aAAa,KAAK;MAClB,cAAc,KAAK;MACnB,gBAAgB,KAAK;MACrB,2BAA2B,KAAK;MAChC,mBAAmB,KAAK;MACxB,MAAM,KAAK;MACX,QAAQ,KAAK;MACb,OAAO,KAAK;MACZ,UAAU,KAAK;MACf,eAAe,KAAK;KACrB;AAED,SAAK,oBAAoB,IAAI,aAAa,KAAK,YAAY;MACzD,WAAW,KAAK;MAChB,cAAc;MACd,aAAa,KAAK;MAClB,iBAAiB,KAAK;MACtB,cAAc,KAAK;MACnB,eAAe,KAAK;KACrB;AAED,QAAI,KAAK,WAAW,WAAW,MAAM;AACnC,WAAK,UAAU;QACb,kBAAkB,KAAK,WAAW,QAAQ,eAAe,GAAG,KAAK,aAAa,qBAAqB;QACnG,4BAA4B,KAAK,WAAW,QAAQ,eAAe,GAAG,KAAK,aAAa,iCAAiC;QACzH,uCAAuC,KAAK,WAAW,QAAQ,eAAe,GAAG,KAAK,aAAa,6CAA6C;QAChJ,mCAAmC,KAAK,WAAW,QAAQ,eAAe,GAAG,KAAK,aAAa,yCAAyC;QACxI,mCAAmC,KAAK,WAAW,QAAQ,eAAe,GAAG,KAAK,aAAa,yCAAyC;QACxI,+BAA+B,KAAK,WAAW,QAAQ,eAAe,GAAG,KAAK,aAAa,qCAAqC;QAChI,iBAAiB,KAAK,WAAW,QAAQ,qBAAqB,GAAG,KAAK,aAAa,0BAA0B;;IAEjH;EACF;EAEA,YAAS;AACP,WAAO,KAAK;EACd;EAEA,MAAM,QAAK;AACT,QAAI,KAAK,SAAS;AAChB;IACF;AAEA,SAAK,UAAU;AAEf,SAAK,qBAAqB,IAAI,gBAAe;AAC7C,UAAM,MAAM,KAAK,mBAAmB,KAAK,EAAE;EAC7C;EAEA,MAAM,aAAU;AACd,QAAI,iBAAiB;AAIrB,YAAQ,QAAO,EAAG,KAAK,YAAW;AAChC,UAAI,CAAC,KAAK,8BAA8B;AACtC;MACF;AAEA,YAAM,SAAS,UAAU;QACvB,KAAK,mBAAmB;QACxB,YAAY,QAAQ,GAAM;OAC3B;AACD,sBAAgB,UAAU,MAAM;AAEhC,UAAI;AAEF,mBAAW,QAAQ,MAAM,KAAK,WAAW,UAAU,IAAI;UACrD,SAAS,CAAC,CAACI,UAAQ;AACjB,mBAAOA,MAAK,UAAU,SAAS,KAAK,QAAQ,KAAKA,MAAK,KAAK,IAAI,iBAAiB;UAClF,CAAC;UACD,OAAO,KAAK;UACZ;SACD,GAAG;AACF,cAAI,CAAC,KAAK,SAAS;AAEjB;UACF;AAEA,cAAI;AACF,kBAAM,KAAK,IAAI,KAAK,IAAI;cACtB;aACD;AACD;UACF,SAAS,KAAK;AACZ,iBAAK,IAAI,yEAAyE;AAClF,kBAAM,KAAK,WAAW,UAAU,MAAM,KAAK,IAAI;cAC7C,MAAM;gBACJ,CAAC,KAAK,WAAW,GAAG;;aAEvB;UACH;QACF;MACF;AACE,eAAO,MAAK;MACd;AAEA,WAAK,IAAI,kDAAkD,cAAc;IAC3E,CAAC,EACE,MAAM,SAAM;AACX,WAAK,IAAI,MAAM,+DAA+D,gBAAgB,GAAG;IACnG,CAAC;EACL;EAEA,MAAM,OAAI;AACR,SAAK,UAAU;AACf,UAAM,KAAK,KAAK,mBAAmB,KAAK,EAAE;AAC1C,SAAK,oBAAoB,MAAK;AAC9B,SAAK,oBAAoB,MAAK;AAC9B,SAAK,mBAAmB,MAAK;EAC/B;EAEQ,MAAM,UAAW,MAAY,QAAoBC,UAAsB;AAC7E,QAAI,CAAC,KAAK,WAAW,OAAO,OAAO,KAAK,MAAM,GAAG;AAC/C,YAAM,KAAK,WAAW,UAAU,MAAM,KAAK,QAAQ;QACjD,MAAM;UACJ,CAAC,KAAK,WAAW,GAAG;YAClB,OAAO,KAAK;;;SAGfA,QAAO;IACZ;AAEA,SAAK,cAAa;AAClB,SAAK,SAAS,gBAAgB,UAAU,EAAE,YAAY,KAAI,CAAE;AAC5D,SAAK,kBAAkB,YAAY,EAAE,QAAQ,KAAK,OAAM,CAAE;EAC5D;EAEQ,MAAM,YAAa,MAAY,QAAoBA,UAAsB;AAC/E,QAAI,CAAC,KAAK,WAAW,OAAO,OAAO,KAAK,MAAM,GAAG;AAC/C,YAAM,KAAK,WAAW,UAAU,MAAM,KAAK,QAAQ;QACjD,MAAM;UACJ,CAAC,KAAK,WAAW,GAAG;;SAErBA,QAAO;IACZ;AAEA,SAAK,cAAa;AAClB,SAAK,SAAS,gBAAgB,UAAU,EAAE,cAAc,KAAI,CAAE;AAC9D,SAAK,kBAAkB,eAAe,EAAE,QAAQ,KAAK,OAAM,CAAE;EAC/D;;;;;;;;;;;EAYA,OAAQ,gBAAiB,aAAqBA,UAAsB;AAClE,QAAI,CAAC,KAAK,SAAS;AACjB;IACF;AAEA,UAAM,OAA+C,CAAA;AAErD,eAAW,cAAc,aAAa;AACpC,UAAI,KAAK,GAAG,IAAI,WAAW,KAAK,KAAK,MAAM;AACzC,aAAK,IAAI,0DAA0D,WAAW,MAAM;AACpF;MACF;AAEA,WAAK,SAAS,gBAAgB,UAAU,EAAE,kBAAkB,KAAI,CAAE;AAElE,WAAK,KAAK,YAAW;AAEnB,cAAM,cAAc,KAAK,oBAAoB,KAAK,WAAW,MAAM;AAEnE,YAAI,eAAe,MAAM;AACvB,eAAK,IAAI,qDAAqD,WAAW,MAAM;AAC/E,gBAAMC,UAAS,MAAM,YAAY,KAAKD,QAAO;AAE7C,cAAI,CAACC,SAAQ;AACX,mBAAO;UACT;AAEA;QACF;AAEA,cAAM,SAAS,MAAM,KAAK,oBAAoB,IAAI,OAAOD,aAAW;AAClE,gBAAM,SAAS,KAAK,sBAAsB,iBAAgB;AAC1D,gBAAM,UAAU,UAAU;YACxB;YACA,KAAK,mBAAmB;YACxBA,UAAS;WACV;AACD,0BAAgB,UAAU,QAAQ,OAAO;AAEzC,cAAI;AACF,mBAAO,MAAM,KAAK,YAAY,YAAYA,QAAO;UACnD,QAAQ;AACN,iBAAK,SAAS,gBAAgB,UAAU,EAAE,wBAAwB,KAAI,CAAE;AACxE,mBAAO;UACT;AACE,iBAAK,sBAAsB,QAAQ,MAAM;AACzC,oBAAQ,MAAK;UACf;QACF,GAAG;UACD,QAAQ,WAAW;UACnB,QAAQA,UAAS;SAClB;AAED,YAAI,CAAC,QAAQ;AACX,iBAAO;QACT;MACF,CAAC;IACH;AAEA,qBAAiB,QAAQ,SAAS,IAAI,GAAG;AACvC,UAAI,QAAQ,MAAM;AAChB,cAAM;MACR;IACF;EACF;EAEA,MAAM,iBAAkB,SAAeA,UAAsB;AAC3D,UAAM,SAAS,KAAK,sBAAsB,iBAAgB;AAC1D,UAAM,UAAU,UAAU;MACxB;MACA,KAAK,mBAAmB;MACxBA,UAAS;KACV;AACD,oBAAgB,UAAU,QAAQ,OAAO;AAEzC,QAAI;AACF,YAAM,MAAM,KAAK,oBAAoB,KAAK,QAAQ,MAAM;AAExD,UAAI,OAAO,MAAM;AACf,aAAK,IAAI,6DAA6D,QAAQ,MAAM;AACpF,eAAO,MAAM,IAAI,KAAK;UACpB,QAAQ;SACT;MACH,OAAO;AACL,eAAO,MAAM,KAAK,oBAAoB,IAAI,OAAOA,aAAW;AAC1D,eAAK,SAAS,gBAAgB,UAAU,EAAE,kBAAkB,KAAI,CAAE;AAElE,eAAK,IAAI,sDAAsD,QAAQ,MAAM;AAC7E,iBAAO,KAAK,YAAY,SAASA,QAAO;QAC1C,GAAG;UACD,QAAQ,QAAQ;UAChB,QAAQ;SACT;MACH;IACF,SAAS,KAAK;AACZ,WAAK,IAAI,MAAM,iDAAiD,QAAQ,MAAM;AAC9E,WAAK,SAAS,gBAAgB,UAAU,EAAE,wBAAwB,KAAI,CAAE;AAExE,aAAO;IACT;AACE,WAAK,sBAAsB,QAAQ,MAAM;AACzC,cAAQ,MAAK;IACf;EACF;EAEA,MAAM,YAAa,SAAeA,UAAsB;AACtD,QAAI;AAEJ,QAAI;AACF,WAAK,IAAI,sBAAsB,QAAQ,MAAM;AAC7C,YAAM,KAAK,WAAW,KAAK,KAAK,QAAQ,QAAQA,QAAO;AACvD,WAAK,IAAI,sBAAsB,QAAQ,MAAM;AAE7C,WAAK,kBAAkB,aAAa;QAClC,QAAQ,QAAQ;OACjB;AAED,aAAO;IACT,SAAS,KAAU;AACjB,WAAK,IAAI,qCAAqC,QAAQ,QAAQ,GAAG;AACjE,cAAQ,MAAM,GAAG;AACjB,aAAO;IACT;EACF;;;;EAKA,IAAI,OAAI;AACN,QAAI,KAAK,MAAM,MAAM;AACnB,aAAO;IACT;AAEA,WAAO,KAAK,GAAG,MAAK;EACtB;;;;EAKA,MAAM,KAAM,MAAcA,UAAsB;AAC9C,UAAM,QAAQ,MAAY,cAAc,MAAMA,QAAO;AACrD,WAAO,KAAK,GAAG,IAAI,KAAK,GAAG;EAC7B;;;;EAKA,YAAa,OAAiB;AAC5B,UAAM,MAAM,KAAK,aAAa,OAAO;MACnC,OAAO;KACR;AAED,QAAI,IAAI,SAAS,GAAG;AAClB,aAAO,IAAI,CAAC;IACd;AAEA,WAAO;EACT;;;;EAKA,aAAc,OAAmBA,UAAgC;AAC/D,QAAI,KAAK,MAAM,MAAM;AACnB,aAAO,CAAA;IACT;AAEA,WAAO,CAAC,GAAG,KAAK,GAAG,QAAQ,OAAOA,QAAO,CAAC;EAC5C;;;;EAKA,MAAM,IAAKE,SAAgBF,UAAsB;AAC/C,QAAI,KAAK,MAAM,MAAM;AACnB,YAAM,IAAI,MAAM,6BAA6B;IAC/C;AAEA,UAAM,KAAK,GAAG,IAAIE,SAAQF,QAAO;EACnC;;;;EAKA,MAAM,OAAQ,MAAcA,UAAsB;AAChD,QAAI,KAAK,MAAM,MAAM;AACnB,YAAM,IAAI,MAAM,6BAA6B;IAC/C;AAEA,UAAM,QAAQ,MAAY,cAAc,MAAMA,QAAO;AAErD,UAAM,KAAK,GAAG,OAAO,OAAOA,QAAO;EACrC;EAEQ,gBAAa;AACnB,QAAI,KAAK,WAAW,QAAQ,KAAK,MAAM,MAAM;AAC3C;IACF;AAEA,QAAI,OAAO;AACX,QAAI,UAAU;AACd,QAAI,WAAW;AACf,QAAI,eAAe;AACnB,QAAI,eAAe;AAEnB,aAAS,MAAO,QAAc;AAC5B,UAAI,aAAa,MAAM,GAAG;AACxB,YAAI,OAAO,QAAQ,UAAU;AAC3B,qBAAW,OAAO;QACpB;AAEA;AACA,gBAAQ,OAAO,MAAM;AAErB,YAAI,OAAO,MAAM,SAAS,cAAc;AACtC,yBAAe,OAAO,MAAM;QAC9B;AAEA,YAAI,OAAO,MAAM,SAAS,cAAc;AACtC,yBAAe,OAAO,MAAM;QAC9B;AAEA;MACF;AAEA,YAAM,OAAO,IAAI;AACjB,YAAM,OAAO,KAAK;IACpB;AAEA,UAAM,KAAK,GAAG,IAAI;AAElB,SAAK,QAAQ,iBAAiB,OAAO,IAAI;AACzC,SAAK,QAAQ,2BAA2B,OAAO,OAAO;AACtD,SAAK,QAAQ,sCAAsC,OAAO,KAAK,MAAM,OAAO,OAAO,CAAC;AACpF,SAAK,QAAQ,kCAAkC,OAAO,YAAY;AAClE,SAAK,QAAQ,kCAAkC,OAAO,YAAY;AAClE,SAAK,QAAQ,8BAA8B,OAAO,QAAQ;EAC5D;;;;ACvhBF,IAAA,wCAAe;EACb;EAAO;EAAO;EAAO;EAAO;EAAK;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACzG;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAM;EAAQ;EAAQ;EAC1G;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAC7G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAM;EAAO;EAAM;EAAO;EAAQ;EAC1G;EAAQ;EAAO;EAAK;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAK;EAAQ;EACvG;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAC7G;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC3G;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC5G;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC3G;EAAM;EAAO;EAAO;EAAM;EAAO;EAAO;EAAK;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAQ;EAAQ;EAAO;EAC1G;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EACvG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAM;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC1G;EAAO;EAAK;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAM;EAAQ;EAAO;EAAO;EACxG;EAAO;EAAK;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EACvG;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAK;EAAQ;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EACvG;EAAQ;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EACzG;EAAM;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAC1G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAQ;EAAM;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAC3G;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAC5G;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAQ;EAAM;EAAK;EAAO;EAAQ;EAAO;EAAM;EAAQ;EAAQ;EAAO;EACzG;EAAO;EAAO;EAAO;EAAK;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EACzG;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EACxG;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAC9G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAK;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EACtG;EAAM;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC5G;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAC/G;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAK;EAAQ;EAAQ;EAAQ;EAAQ;EAAQ;EAAO;EAC5G;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EAAO;EACzG;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAK;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EACzG;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAQ;EACxG;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAC3G;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAQ;EAAQ;EAAO;EAAK;EAAO;EAC3G;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAC3G;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAM;EAAO;EAAO;EACzG;EAAO;EAAO;EAAQ;EAAK;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EACzG;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAM;EAAQ;EAAM;EAAQ;EAAQ;EAC5G;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAC1G;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EACxG;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAC9G;EAAQ;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAC7G;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAC/G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAM;EAAQ;EAC9G;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EACzG;EAAQ;EAAM;EAAO;EAAM;EAAQ;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAC5G;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAK;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAC3G;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAM;EAAM;EAAQ;EAC3G;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EACvG;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAM;EAAO;EAC1G;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAK;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC5G;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC5G;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EACxG;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC1G;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAM;EAAQ;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAC5G;EAAO;EAAO;EAAK;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EACtG;EAAO;EAAM;EAAO;EAAM;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EACtG;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAQ;EAAO;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAC5G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAC5G;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAC1G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAC5G;EAAQ;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC5G;EAAQ;EAAM;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAM;EAAO;EAAI;EAAO;EAAQ;EAAO;EAAO;EAAM;EACrG;EAAO;EAAM;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EACxG;EAAQ;EAAQ;EAAM;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAM;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAC3G;EAAQ;EAAO;EAAO;EAAK;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAQ;EAAO;EAC3G;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EACxG;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAQ;EAAO;EAAM;EAAO;EAC3G;EAAM;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EACxG;EAAM;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAM;EAAM;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EACzG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EACxG;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAQ;EAC3G;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAC9G;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAK;EAAO;EAAO;EAAQ;EAAO;EAC5G;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAM;EAAO;EAAM;EAAO;EAC1G;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAM;EAAQ;EAAO;EAAO;EACvG;EAAO;EAAQ;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAC9G;EAAQ;EAAQ;EAAO;EAAO;EAAK;EAAO;EAAQ;EAAM;EAAQ;EAAQ;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAC5G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAM;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAQ;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAO;EACzG;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAC7G;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAC9G;EAAO;EAAM;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAO;EAC7G;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAM;EAAM;EAAM;EAAO;EAAQ;EAC3G;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAC1G;EAAO;EAAO;EAAQ;EAAK;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAK;EAAO;EAAM;EAAO;EACrG;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAM;EAAO;EAAM;EAAO;EAC1G;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAC5G;EAAM;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAC3G;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAK;EAC1G;EAAQ;EAAM;EAAQ;EAAO;EAAM;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EACxG;EAAO;EAAK;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EACvG;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAC9G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAC5G;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAK;EAAO;EAAO;EAAO;EAAO;EAAM;EACvG;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAC7G;EAAO;EAAK;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EACrG;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAK;EAAO;EAAO;EAAO;EAAO;EACxG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EACvG;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EACzG;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAM;EAAQ;EAAM;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAC3G;EAAO;EAAK;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EACzG;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAC7G;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC1G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAK;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAC1G;EAAM;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EACzG;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC3G;EAAM;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAC1G;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAK;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EACtG;EAAO;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAC3G;EAAM;EAAO;EAAQ;EAAM;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAQ;EAC1G;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAC3G;EAAO;EAAM;EAAQ;EAAQ;EAAM;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EACvG;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAQ;EAAM;EAAM;EACtG;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EACzG;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EACzG;EAAO;EAAO;EAAM;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EACtG;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EACzG;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAC/G;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAM;EACxG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAC1G;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAC9G;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EACzG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EAAO;EACzG;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC5G;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAM;EAAQ;EAAM;EAAQ;EAAM;EAAO;EAC1G;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAK;EAAM;EAAO;EACtG;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAM;EAAK;EAAM;EAAO;EAAO;EAAO;EACvG;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC/G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC3G;EAAM;EAAQ;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAC5G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAM;EAAO;EAAO;EAAK;EAAO;EAAO;EAAO;EACtG;EAAQ;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EACxG;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EACzG;EAAO;EAAQ;EAAQ;EAAM;EAAM;EAAO;EAAM;EAAO;EAAO;EAAM;EAAM;EAAO;EAAM;EAAM;EAAO;EACpG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAQ;EAAO;EAAQ;EAC7G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAK;EAAO;EAAQ;EACzG;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAC5G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAM;EAAQ;EACxG;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACzG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAC9G;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACxG;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAQ;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAM;EAAO;EAAQ;EACzG;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAM;EAAO;EACtG;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAQ;EAAO;EAAM;EAAO;EAC1G;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC7G;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAC1G;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EACvG;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAC5G;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAQ;EAAQ;EAAQ;EAAQ;EAClH;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAQ;EAAQ;EAC9G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAM;EAAQ;EAC1G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC1G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAC5G;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAM;EAAO;EAAM;EAAO;EAAM;EAAO;EACxG;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACzG;EAAQ;EAAO;EAAM;EAAM;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAM;EAAQ;EAAM;EAAO;EAAO;EACxG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EACzG;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAC9G;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAC5G;EAAQ;EAAQ;EAAO;EAAM;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAC9G;EAAO;EAAQ;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAC3G;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAQ;EACzG;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EACzG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EACxG;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC7G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAC7G;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAC7G;EAAO;EAAM;EAAQ;EAAM;EAAO;EAAO;EAAM;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAM;EACxG;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAK;EAAO;EAAM;EAAO;EACxG;EAAM;EAAQ;EAAQ;EAAM;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC3G;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAM;EAAO;EACzG;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAM;EAAO;EAAO;EAAM;EACvG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EACxG;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAC9G;EAAO;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EACvG;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC1G;EAAQ;EAAO;EAAM;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAM;EAAO;EAAO;EAC1G;EAAM;EAAQ;EAAO;EAAK;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EACxG;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAC7G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAK;EAAK;EAAO;EAAO;EAAO;EACvG;EAAM;EAAQ;EAAM;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAM;EAAQ;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAK;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAK;EAAO;EAAQ;EAAO;EACvG;EAAO;EAAO;EAAO;EAAK;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EACzG;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAK;EAAO;EAAO;EAAK;EAAO;EAAO;EAAO;EAAQ;EAAO;EACzG;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC1G;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC5G;EAAQ;EAAO;EAAM;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAQ;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAM;EAAQ;EACzG;EAAQ;EAAO;EAAM;EAAM;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAK;EAAO;EAAQ;EAAO;EAAO;EAAM;EACxG;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAC5G;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAM;EAAM;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC1G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAI;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EACxG;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAC9G;EAAM;EAAK;EAAM;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EACpG;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAC1G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAC3G;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAC7G;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAK;EAAO;EAAO;EAAO;EAAM;EAAQ;EAC3G;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAM;EAAQ;EAAO;EAAM;EAAO;EAAM;EAAM;EAAQ;EACvG;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAC9G;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAC5G;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EACvG;EAAO;EAAQ;EAAO;EAAM;EAAQ;EAAQ;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAChH;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAM;EAAO;EAC5G;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EACzG;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAM;EAAQ;EACvG;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAM;EAAO;EACvG;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAK;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EACvG;EAAO;EAAK;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EACxG;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAQ;EAC9G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAM;EAAO;EACxG;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC7G;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAM;EAAM;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EAAM;EACpG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAK;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAO;EACxG;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAM;EAAQ;EAAM;EAAO;EAAM;EAAQ;EAAO;EACxG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EACtG;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAM;EACtG;EAAO;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAC9G;EAAQ;EAAM;EAAO;EAAQ;EAAQ;EAAQ;EAAQ;EAAQ;EAAQ;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAC/G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAC9G;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC3G;EAAM;EAAM;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EACxG;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAO;EAAM;EACtG;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACzG;EAAO;EAAO;EAAM;EAAM;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAK;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EACxG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAM;EAAQ;EACvG;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EAAQ;EACvG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAC3G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAC7G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC5G;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAM;EAAM;EAAO;EAAK;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EACtG;EAAM;EAAM;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAC7G;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAI;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAQ;EACvG;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EACtG;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC3G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAC9G;EAAQ;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAC1G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC5G;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAQ;EAAK;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC7G;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAC9G;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EACzG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EACvG;EAAO;EAAO;EAAO;EAAM;EAAO;EAAM;EAAM;EAAQ;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAQ;EAAO;EACzG;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAM;EAAM;EAAO;EAAM;EAAO;EAAO;EAAO;EAAM;EACtG;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EACzG;EAAO;EAAM;EAAO;EAAQ;EAAM;EAAK;EAAQ;EAAK;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAM;EAAO;EACrG;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EACtG;EAAM;EAAQ;EAAO;EAAQ;EAAQ;EAAK;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC1G;EAAQ;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAK;EAAO;EAAM;EAAO;EAAM;EAAO;EACzG;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAM;EAC1G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAM;EAC1G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAC5G;EAAM;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EACvG;EAAM;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EACvG;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACzG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAK;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAC3G;EAAK;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAO;EAAM;EACxG;EAAQ;EAAM;EAAO;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAC5G;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAC7G;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAC5G;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAM;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAQ;EACvG;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAK;EAAO;EAAM;EAAO;EAAO;EACxG;EAAO;EAAM;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAC3G;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAK;EACtG;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAQ;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC5G;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAM;EAAQ;EAAM;EAAO;EAAM;EAAQ;EAAO;EACtG;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EACzG;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAK;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EACxG;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC3G;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EAAK;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EACpG;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAM;EAAM;EACxG;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EACzG;EAAQ;EAAO;EAAO;EAAM;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAC1G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAK;EAAQ;EACxG;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAM;EACvG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAM;EAC1G;EAAO;EAAQ;EAAM;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAC/G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAQ;EAC7G;EAAO;EAAO;EAAQ;EAAM;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC5G;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC1G;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EACzG;EAAM;EAAQ;EAAQ;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EACxG;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EACxG;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAC1G;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAQ;EAAM;EAC3G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAM;EAAM;EAAO;EACvG;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAM;EACvG;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EACzG;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAQ;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EACzG;EAAM;EAAK;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EACrG;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EACzG;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAO;EACxG;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAC/G;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAM;EAC3G;EAAM;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EACzG;EAAM;EAAO;EAAM;EAAM;EAAO;EAAK;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAM;EACrG;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAK;EAAM;EAAM;EAAO;EACxG;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAK;EAAQ;EAAO;EACxG;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAM;EAAQ;EAAM;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAAM;EACzG;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAO;EAC5G;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAC3G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAM;EAC3G;EAAM;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACzG;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EACzG;EAAQ;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAQ;EAC9G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EACxG;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAM;EAAQ;EAAM;EAAO;EAAO;EAAQ;EACzG;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAC7G;EAAM;EAAO;EAAO;EAAK;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAQ;EAAO;EACzG;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAK;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAK;EAAM;EAAQ;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EACxG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAQ;EAAO;EAAO;EAC1G;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAQ;EAAM;EAAM;EAAO;EAAO;EACxG;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAM;EAAM;EAAQ;EAC1G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAC1G;EAAO;EAAK;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EACxG;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAC7G;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAC9G;EAAK;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EACzG;EAAO;EAAM;EAAO;EAAM;EAAQ;EAAM;EAAO;EAAO;EAAQ;EAAM;EAAI;EAAQ;EAAQ;EAAM;EAAM;EACpG;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAC1G;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAC1G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC5G;EAAQ;EAAO;EAAQ;EAAQ;EAAK;EAAO;EAAQ;EAAO;EAAO;EAAK;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAC1G;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAQ;EAAG;EAAO;EAAM;EAAO;EAAO;EAAO;EACrG;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAC1G;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAC3G;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAQ;EAC1G;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAChH;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAM;EAAM;EAAO;EAAO;EACxG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EACzG;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EACvG;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAO;EAAO;EAAI;EAAO;EAAO;EAAO;EAAO;EAAO;EACpG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAC3G;EAAM;EAAM;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EACvG;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAC1G;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAC9G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAC9G;EAAO;EAAO;EAAM;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EACtG;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAK;EAAO;EAAO;EAAO;EACtG;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAM;EAC5G;EAAM;EAAO;EAAO;EAAK;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EACpG;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAM;EAC1G;EAAM;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAAO;EACzG;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EACzG;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAC5G;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EACzG;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAC3G;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAM;EAAM;EACxG;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC5G;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAC1G;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACzG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAM;EAAK;EAAO;EACtG;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAC1G;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAC5G;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EACxG;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACvG;EAAM;EAAQ;EAAO;EAAO;EAAM;EAAQ;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAC3G;EAAK;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EACtG;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAC7G;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAM;EAAQ;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAC7G;EAAK;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAM;EAAQ;EAAQ;EAAQ;EAC1G;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAC/G;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAM;EAAM;EAAQ;EAAO;EACzG;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAM;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAC7G;EAAO;EAAM;EAAM;EAAM;EAAM;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EACzG;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAK;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EACvG;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAC5G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACxG;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAC3G;EAAM;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAM;EACvG;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAK;EAAO;EAAM;EAAO;EAAO;EAAO;EAAM;EAAO;EACtG;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAC7G;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAK;EAAO;EACrG;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EACzG;EAAM;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAC1G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EACzG;EAAK;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAC5G;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAK;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAC/G;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC7G;EAAO;EAAO;EAAO;EAAK;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EACzG;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC3G;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAM;EAAK;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EACtG;EAAQ;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAK;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EACxG;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EACzG;EAAO;EAAO;EAAQ;EAAM;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAQ;EAC1G;EAAM;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAM;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACvG;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAC9G;EAAK;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EACxG;EAAM;EAAQ;EAAQ;EAAK;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EACxG;EAAQ;EAAQ;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAC7G;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC1G;EAAQ;EAAQ;EAAK;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAK;EAAO;EAAM;EAAO;EACvG;EAAQ;EAAQ;EAAQ;EAAO;EAAQ;EAAM;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAC/G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAO;EACzG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EACvG;EAAO;EAAO;EAAK;EAAO;EAAO;EAAO;EAAM;EAAM;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAQ;EACzG;EAAM;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EACxG;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAQ;EAC5G;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EACzG;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAM;EACxG;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAM;EAAO;EACzG;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAK;EAC3G;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAQ;EAAO;EAC3G;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAM;EAAQ;EAC1G;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAC1G;EAAM;EAAO;EAAO;EAAK;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAC1G;EAAO;EAAK;EAAO;EAAO;EAAM;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACtG;EAAM;EAAK;EAAO;EAAM;EAAM;EAAQ;EAAO;EAAO;EAAK;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAClG;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAC5G;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAK;EAAM;EAAO;EAAK;EAAO;EAAO;EAAO;EAAO;EACrG;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAC7G;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAQ;EAAM;EAAO;EAAQ;EAAO;EAC3G;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAC7G;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAQ;EAChH;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAQ;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAC/G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAK;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EACvG;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAC1G;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EACzG;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC5G;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAQ;EAAM;EACxG;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAM;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAQ;EAC9G;EAAK;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EACvG;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAM;EAC1G;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAC5G;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAK;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EACvG;EAAO;EAAK;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAC3G;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAC5G;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EACvG;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EACzG;EAAQ;EAAO;EAAK;EAAM;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACvG;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAK;EAAO;EAAM;EAAO;EAAO;EAAM;EACvG;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAO;EAC9G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC5G;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC3G;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAM;EAAQ;EAAK;EAAQ;EAAO;EAAQ;EAAM;EAC1G;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EACzG;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAM;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAC3G;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAC1G;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAM;EAAO;EAC7G;EAAO;EAAO;EAAM;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EACvG;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAK;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAM;EAAO;EAC1G;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC7G;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAM;EAC5G;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAM;EAAO;EAAO;EACxG;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EACvG;EAAQ;EAAQ;EAAM;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAC3G;EAAQ;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAM;EAAQ;EAAQ;EAC5G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAQ;EAAM;EACzG;EAAQ;EAAO;EAAQ;EAAQ;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAM;EAAO;EAAO;EAC9G;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAK;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAC7G;EAAO;EAAO;EAAM;EAAM;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EACzG;EAAM;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EACzG;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAC9G;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAC3G;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAK;EAAQ;EAAO;EAAQ;EAAM;EAAQ;EAC1G;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC/G;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAQ;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EACzG;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAC7G;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC5G;EAAQ;EAAO;EAAQ;EAAO;EAAM;EAAK;EAAO;EAAQ;EAAO;EAAQ;EAAM;EAAM;EAAO;EAAO;EAAO;EACxG;EAAO;EAAO;EAAO;EAAO;EAAI;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAQ;EAAO;EACxG;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAC/G;EAAO;EAAQ;EAAM;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACzG;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAM;EAAO;EAAQ;EAAQ;EAC7G;EAAK;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EACxG;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAC7G;EAAQ;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAM;EACxG;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC5G;EAAO;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EAAM;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EACvG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAM;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAC1G;EAAM;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACzG;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC7G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAC9G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EACvG;EAAQ;EAAO;EAAM;EAAO;EAAQ;EAAM;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EAAQ;EAC1G;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAQ;EAC/G;EAAK;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAC1G;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAM;EACzG;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAQ;EAAQ;EAAQ;EAAO;EAAQ;EAC5G;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAK;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAQ;EAC1G;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAC5G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAQ;EAC/G;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAM;EAAK;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EACtG;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAC3G;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAQ;EACvG;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC7G;EAAO;EAAO;EAAK;EAAQ;EAAO;EAAQ;EAAM;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAM;EAAQ;EAAO;EACzG;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAK;EAAM;EAAQ;EAAO;EACvG;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC9G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EACzG;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAM;EAAQ;EAAQ;EAAQ;EAAO;EAC5G;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAC/G;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EACvG;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAQ;EAC3G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAQ;EAAQ;EAAO;EAAQ;EAAM;EAC5G;EAAM;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAM;EAAO;EAAO;EACtG;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAC3G;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EACtG;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAM;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAQ;EACzG;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAK;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EACzG;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EAC7G;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EACzG;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAM;EAC1G;EAAO;EAAM;EAAM;EAAM;EAAQ;EAAO;EAAM;EAAO;EAAM;EAAO;EAAM;EAAM;EAAQ;EAAQ;EAAM;EACpG;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAM;EAAM;EAAQ;EAC3G;EAAO;EAAM;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAK;EACrG;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EACxG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAC5G;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC5G;EAAO;EAAO;EAAM;EAAM;EAAO;EAAQ;EAAO;EAAM;EAAK;EAAM;EAAQ;EAAO;EAAO;EAAM;EAAO;EACpG;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EACvG;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAC5G;EAAO;EAAO;EAAM;EAAK;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACxG;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAC7G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACvG;EAAQ;EAAM;EAAM;EAAM;EAAQ;EAAO;EAAQ;EAAQ;EAAM;EAAQ;EAAK;EAAO;EAAO;EAAQ;EAAO;EACzG;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EACxG;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC7G;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAC5G;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EACzG;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACzG;EAAM;EAAM;EAAO;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAQ;EAAQ;EAAK;EAAQ;EAAM;EAAQ;EAAO;EACzG;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAM;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EACvG;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAM;EAAO;EAAM;EACtG;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAG;EAAO;EAAO;EAAO;EAAM;EACpG;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC/G;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAM;EAAO;EAAO;EACpG;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAK;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EACzG;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAQ;EAAQ;EAC3G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAM;EAAK;EAAM;EAAQ;EAAQ;EAAQ;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EACzG;EAAM;EAAM;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EACtG;EAAO;EAAO;EAAO;EAAM;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAM;EAAM;EACtG;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAM;EAAQ;EACzG;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAQ;EAAO;EAC7G;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAM;EAAM;EAAM;EAAO;EACzG;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EACxG;EAAQ;EAAM;EAAO;EAAQ;EAAK;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAC5G;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAC9G;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAM;EAAO;EACvG;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC3G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAC3G;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAK;EAAO;EAAM;EACvG;EAAO;EAAO;EAAQ;EAAM;EAAQ;EAAM;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAI;EACvG;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAM;EAAO;EACzG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAC7G;EAAM;EAAO;EAAK;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EACvG;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAK;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAM;EAC1G;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAM;EAAQ;EAAO;EACtG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAC7G;EAAO;EAAM;EAAQ;EAAK;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAM;EACtG;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAI;EAAO;EAAO;EAAO;EAAO;EACxG;EAAQ;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAC3G;EAAM;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAC5G;EAAQ;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EACxG;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAO;EAC1G;EAAM;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EACxG;EAAQ;EAAO;EAAO;EAAK;EAAO;EAAQ;EAAM;EAAO;EAAM;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAO;EACxG;EAAO;EAAM;EAAQ;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EACzG;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAM;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAQ;EAAM;EAAO;EAC5G;EAAM;EAAQ;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EACzG;EAAO;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAC7G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAM;EAAQ;EAAQ;EAAQ;EAC5G;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAC3G;EAAK;EAAO;EAAO;EAAQ;EAAM;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EACzG;EAAO;EAAO;EAAO;EAAK;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EACxG;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAI;EAAQ;EAAQ;EAAQ;EAC3G;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAQ;EAAO;EAAO;EAAO;EACzG;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAC7G;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAQ;EAAM;EAAM;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EACxG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAC9G;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAK;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EACzG;EAAO;EAAQ;EAAQ;EAAO;EAAM;EAAM;EAAQ;EAAM;EAAO;EAAQ;EAAO;EAAQ;EAAM;EAAO;EAAO;EAC1G;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAK;EAAO;EAAO;EAAM;EAAO;EAAM;EAAQ;EAAO;EACpG;EAAO;EAAM;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAC5G;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EACvG;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAC5G;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAQ;EAC5G;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EAAQ;EAAO;EACzG;EAAM;EAAM;EAAM;EAAM;EAAM;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACrG;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAM;EAAQ;EAAO;EAC1G;EAAQ;EAAQ;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAC9G;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAC7G;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAC3G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EACzG;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EACzG;EAAM;EAAQ;EAAO;EAAO;EAAK;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAM;EACzG;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAK;EAAQ;EAAM;EAAO;EAAO;EAAM;EAAQ;EAAQ;EACzG;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAC5G;EAAO;EAAO;EAAK;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAC5G;EAAQ;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EACzG;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAQ;EAAM;EAAQ;EAAQ;EAAO;EAC9G;EAAO;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAC7G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC1G;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAQ;EAAQ;EAAQ;EAAQ;EAAQ;EAAO;EAAO;EAAM;EAAM;EAAQ;EAAO;EAAO;EAAM;EAC5G;EAAO;EAAO;EAAO;EAAI;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EACxG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAC7G;EAAQ;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC7G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAC1G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EACxG;EAAM;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAK;EACzG;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAK;EAAO;EAAQ;EAAQ;EAAO;EACzG;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACzG;EAAM;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAK;EAAO;EAAO;EAAO;EAAQ;EAAQ;EACzG;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EACzG;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAM;EAC3G;EAAO;EAAM;EAAM;EAAQ;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAC1G;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAQ;EAC1G;EAAM;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAM;EAAO;EAAO;EAAO;EACrG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAK;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAC1G;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC1G;EAAQ;EAAM;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EACxG;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAQ;EAAK;EAAQ;EAAQ;EAAQ;EAAM;EAAQ;EAAQ;EAC3G;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAK;EAAO;EAAO;EAAO;EAAQ;EAAO;EAC1G;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAO;EAC3G;EAAQ;EAAO;EAAO;E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;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC5G;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAC3G;EAAO;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EACzG;EAAO;EAAO;EAAM;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAQ;EAAQ;EAAO;EAAQ;EAC5G;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAM;EAAQ;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAC3G;EAAO;EAAM;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAM;EAAO;EAAO;EAAM;EAAM;EAAO;EAAO;EACrG;EAAM;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAC1G;EAAM;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAC5G;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAQ;EAC5G;EAAO;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAO;EAAO;EAC3G;EAAO;EAAO;EAAO;EAAO;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EACvG;EAAO;EAAO;EAAQ;EAAO;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAC5G;EAAM;EAAO;EAAO;EAAQ;EAAQ;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAM;EACzG;EAAM;EAAO;EAAQ;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAO;EAAO;EAAO;EAAM;EAAQ;EAAO;EAAO;EACzG;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAO;EAAQ;EAAM;EAAO;EAAM;EAAO;EAAO;EAAM;EACvG;EAAO;EAAM;EAAO;EAAM;EAAO;EAAO;EAAQ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",
  "names": ["cache", "value", "Netmask", "atob", "base", "start", "n", "t", "e", "r", "u", "o", "i", "a", "f", "c", "string", "string", "require_browser", "sanitize", "options", "options", "self", "message", "options", "original", "require_retry", "value", "EventIterator", "options", "options", "response", "hashlru", "value", "options", "RecordType", "AbortError", "message", "code", "func", "message", "options", "options", "equals", "name", "encode", "length", "i", "j", "decode", "string", "name", "encode", "decode", "alphabet", "string", "value", "encode", "decode", "value", "decode", "code", "encodingLength", "code", "digest", "encodingLength", "decode", "equals", "base", "version", "cache", "baseCache", "version", "code", "digest", "self", "equals", "base", "value", "decode", "length", "cid", "encodingLength", "from", "name", "code", "encode", "digest", "value", "base", "value", "getCodec", "options", "encode", "cid", "decode", "value", "message", "peerId", "options", "src_default", "value", "self", "AbortError", "message", "QueueFullError", "message", "JobRecipient", "AbortError", "randomId", "Job", "options", "AbortError", "JobRecipient", "debounce", "func", "Queue", "debounce", "options", "QueueFullError", "Job", "AbortError", "event", "name", "options", "options", "event", "options", "AbortError", "name", "implementation", "Queue", "defaultOptions", "options", "options", "version", "code", "decode", "encode", "code", "decode", "encode", "name", "name", "code", "encode", "decode", "code", "src_exports", "code", "name", "encode", "name", "sha256", "from", "sha512", "sha256", "sha512", "code", "signal", "options", "NotFoundError", "isPromise", "res", "src_default", "value", "func", "options", "src_default", "block", "options", "options", "isAsyncIterable", "length", "encode", "options", "isAsyncIterable", "ReadMode", "length", "decode", "options", "isAsyncIterable", "value", "WantType", "__WantTypeValues", "WantlistEntry", "length", "Wantlist", "value", "Block", "BlockPresenceType", "__BlockPresenceTypeValues", "BlockPresence", "BitswapMessage", "message", "message", "start", "Block", "peerId", "decode", "message", "options", "src_default", "encode", "empty", "equals", "coerce", "base", "name", "encode", "length", "i", "j", "decode", "string", "src", "_brrp__multiformats_scope_baseX", "base_x_default", "Encoder", "name", "Decoder", "or", "ComposedDecoder", "Codec", "from", "encode", "decode", "baseX", "alphabet", "base_x_default", "coerce", "string", "value", "createAlphabetIdx", "rfc4648", "base58btc", "baseX", "base58flickr", "base32", "rfc4648", "base32upper", "base32pad", "base32padupper", "base32hex", "base32hexupper", "base32hexpad", "base32hexpadupper", "base32z", "base36", "baseX", "base36upper", "encode_1", "encode", "MSB", "REST", "MSBALL", "INT", "decode", "read", "MSB$1", "REST$1", "N1", "N2", "N3", "N4", "N5", "N6", "N7", "N8", "N9", "length", "value", "varint", "_brrp_varint", "varint_default", "decode", "code", "varint_default", "encodeTo", "encodingLength", "create", "code", "digest", "encodingLength", "encodeTo", "Digest", "decode", "coerce", "equals", "format", "base", "version", "toStringV0", "baseCache", "base58btc", "toStringV1", "base32", "cache", "baseCache", "CID", "version", "code", "DAG_PB_CODE", "SHA_256_CODE", "digest", "create", "self", "equals", "base", "format", "value", "encodeCID", "cidSymbol", "decode", "coerce", "Digest", "length", "parseCIDtoBytes", "base58btc", "base32", "base36", "toStringV0", "cid", "toStringV1", "encodingLength", "encodeTo", "code", "name", "encode", "coerce", "digest", "create", "identity", "from", "name", "code", "encode", "Hasher", "create", "digest", "sha", "name", "sha256", "from", "sha512", "base58btc", "CID", "identity", "LIBP2P_KEY_CODE", "TRANSPORT_IPFS_GATEWAY_HTTP_CODE", "decode", "base58btc", "CID", "publicKey", "identity", "sha256", "empty", "coerce", "base", "name", "encode", "length", "i", "j", "decode", "string", "src", "_brrp__multiformats_scope_baseX", "base_x_default", "Encoder", "name", "Decoder", "or", "ComposedDecoder", "Codec", "from", "encode", "decode", "baseX", "alphabet", "base_x_default", "coerce", "base58btc", "baseX", "base58flickr", "encode_1", "encode", "MSB", "REST", "MSBALL", "INT", "decode", "read", "MSB$1", "REST$1", "N1", "N2", "N3", "N4", "N5", "N6", "N7", "N8", "N9", "length", "value", "varint", "_brrp_varint", "varint_default", "decode", "code", "varint_default", "decode", "coerce", "code", "digest", "Digest", "Digest", "code", "digest", "map", "peerIdFromString", "decode", "base58btc", "map", "value", "peerId", "peerIdFromString", "peerId", "name", "value", "map", "empty", "equals", "coerce", "base", "name", "encode", "length", "i", "j", "decode", "string", "src", "_brrp__multiformats_scope_baseX", "base_x_default", "Encoder", "name", "Decoder", "or", "ComposedDecoder", "Codec", "from", "encode", "decode", "baseX", "alphabet", "base_x_default", "coerce", "string", "value", "createAlphabetIdx", "rfc4648", "base32", "rfc4648", "base32upper", "base32pad", "base32padupper", "base32hex", "base32hexupper", "base32hexpad", "base32hexpadupper", "base32z", "base36", "baseX", "base36upper", "base58btc", "baseX", "base58flickr", "encode_1", "encode", "MSB", "REST", "MSBALL", "INT", "decode", "read", "MSB$1", "REST$1", "N1", "N2", "N3", "N4", "N5", "N6", "N7", "N8", "N9", "length", "value", "varint", "_brrp_varint", "varint_default", "decode", "code", "varint_default", "encodeTo", "encodingLength", "create", "code", "digest", "encodingLength", "encodeTo", "Digest", "decode", "coerce", "equals", "format", "base", "version", "toStringV0", "baseCache", "base58btc", "toStringV1", "base32", "cache", "baseCache", "CID", "version", "code", "DAG_PB_CODE", "SHA_256_CODE", "digest", "create", "self", "equals", "base", "format", "value", "encodeCID", "cidSymbol", "decode", "coerce", "Digest", "length", "parseCIDtoBytes", "base58btc", "base32", "base36", "toStringV0", "cid", "toStringV1", "encodingLength", "encodeTo", "base64", "rfc4648", "base64pad", "base64url", "base64urlpad", "base64", "options", "message", "peerId", "message", "CID", "options", "options", "peerId", "name", "value", "map", "from", "name", "code", "encode", "Hasher", "create", "digest", "sha", "name", "sha256", "from", "sha512", "options", "event", "peerId", "message", "multicodec", "sha256", "CID", "options", "options", "getHasher", "options", "name", "code", "empty", "Encoder", "name", "Decoder", "or", "ComposedDecoder", "Codec", "from", "encode", "decode", "decode", "string", "name", "value", "encode", "alphabet", "createAlphabetIdx", "rfc4648", "from", "base64", "rfc4648", "base64pad", "base64url", "base64urlpad", "logger", "base64", "empty", "coerce", "base", "name", "encode", "length", "i", "j", "decode", "string", "src", "_brrp__multiformats_scope_baseX", "base_x_default", "Encoder", "name", "Decoder", "or", "ComposedDecoder", "Codec", "from", "encode", "decode", "baseX", "alphabet", "base_x_default", "coerce", "string", "value", "createAlphabetIdx", "rfc4648", "base58btc", "baseX", "base58flickr", "base64", "rfc4648", "base64pad", "base64url", "base64urlpad", "base58btc", "base64url", "or", "DNS", "or", "P2P", "DNS", "logger", "options", "options", "options", "options", "message", "IpnsEntry", "ValidityType", "__ValidityTypeValues", "length", "empty", "equals", "coerce", "base", "name", "encode", "length", "i", "j", "decode", "string", "src", "_brrp__multiformats_scope_baseX", "base_x_default", "Encoder", "name", "Decoder", "or", "ComposedDecoder", "Codec", "from", "encode", "decode", "baseX", "alphabet", "base_x_default", "coerce", "string", "value", "createAlphabetIdx", "rfc4648", "base36", "baseX", "base36upper", "base32", "rfc4648", "base32upper", "base32pad", "base32padupper", "base32hex", "base32hexupper", "base32hexpad", "base32hexpadupper", "base32z", "base58btc", "baseX", "base58flickr", "encode_1", "encode", "MSB", "REST", "MSBALL", "INT", "decode", "read", "MSB$1", "REST$1", "N1", "N2", "N3", "N4", "N5", "N6", "N7", "N8", "N9", "length", "value", "varint", "_brrp_varint", "varint_default", "decode", "code", "varint_default", "encodeTo", "encodingLength", "create", "code", "digest", "encodingLength", "encodeTo", "Digest", "decode", "coerce", "equals", "format", "base", "version", "toStringV0", "baseCache", "base58btc", "toStringV1", "base32", "cache", "baseCache", "CID", "version", "code", "DAG_PB_CODE", "SHA_256_CODE", "digest", "create", "self", "equals", "base", "format", "value", "encodeCID", "cidSymbol", "decode", "coerce", "Digest", "length", "parseCIDtoBytes", "base58btc", "base32", "base36", "toStringV0", "cid", "toStringV1", "encodingLength", "encodeTo", "IDENTITY_CODEC", "message", "value", "digest", "decode", "IDENTITY_CODEC", "decode", "value", "string", "CID", "digest", "log", "import_timestamp_nano", "log", "publicKey", "NanoDate", "InvalidMessageLengthError", "InvalidMessageLengthError", "message", "empty", "equals", "coerce", "base", "name", "encode", "length", "i", "j", "decode", "string", "src", "_brrp__multiformats_scope_baseX", "base_x_default", "Encoder", "name", "Decoder", "or", "ComposedDecoder", "Codec", "from", "encode", "decode", "baseX", "alphabet", "base_x_default", "coerce", "string", "value", "createAlphabetIdx", "rfc4648", "base32", "rfc4648", "base32upper", "base32pad", "base32padupper", "base32hex", "base32hexupper", "base32hexpad", "base32hexpadupper", "base32z", "base36", "baseX", "base36upper", "base58btc", "baseX", "base58flickr", "encode_1", "encode", "MSB", "REST", "MSBALL", "INT", "decode", "read", "MSB$1", "REST$1", "N1", "N2", "N3", "N4", "N5", "N6", "N7", "N8", "N9", "length", "value", "varint", "_brrp_varint", "varint_default", "decode", "code", "varint_default", "encodeTo", "encodingLength", "create", "code", "digest", "encodingLength", "encodeTo", "Digest", "decode", "coerce", "equals", "format", "base", "version", "toStringV0", "baseCache", "base58btc", "toStringV1", "base32", "cache", "baseCache", "CID", "version", "code", "DAG_PB_CODE", "SHA_256_CODE", "digest", "create", "self", "equals", "base", "format", "value", "encodeCID", "cidSymbol", "decode", "coerce", "Digest", "length", "parseCIDtoBytes", "base58btc", "base32", "base36", "toStringV0", "cid", "toStringV1", "encodingLength", "encodeTo", "IPNS_PREFIX", "options", "src_default", "value", "digest", "CID", "peerId", "log", "options", "peerId", "protocols", "response", "empty", "equals", "coerce", "base", "name", "encode", "length", "i", "j", "decode", "string", "src", "_brrp__multiformats_scope_baseX", "base_x_default", "Encoder", "name", "Decoder", "or", "ComposedDecoder", "Codec", "from", "encode", "decode", "baseX", "alphabet", "base_x_default", "coerce", "string", "value", "createAlphabetIdx", "rfc4648", "base32", "rfc4648", "base32upper", "base32pad", "base32padupper", "base32hex", "base32hexupper", "base32hexpad", "base32hexpadupper", "base32z", "base36", "baseX", "base36upper", "base58btc", "baseX", "base58flickr", "encode_1", "encode", "MSB", "REST", "MSBALL", "INT", "decode", "read", "MSB$1", "REST$1", "N1", "N2", "N3", "N4", "N5", "N6", "N7", "N8", "N9", "length", "value", "varint", "_brrp_varint", "varint_default", "decode", "code", "varint_default", "encodeTo", "encodingLength", "create", "code", "digest", "encodingLength", "encodeTo", "Digest", "decode", "coerce", "equals", "format", "base", "version", "toStringV0", "baseCache", "base58btc", "toStringV1", "base32", "cache", "baseCache", "CID", "version", "code", "DAG_PB_CODE", "SHA_256_CODE", "digest", "create", "self", "equals", "base", "format", "value", "encodeCID", "cidSymbol", "decode", "coerce", "Digest", "length", "parseCIDtoBytes", "base58btc", "base32", "base36", "toStringV0", "cid", "toStringV1", "encodingLength", "encodeTo", "IPNS_PREFIX", "options", "toString", "value", "options", "clonedRegexp", "string", "isIPv6", "string", "isIPv4", "isIPv4", "isIPv6", "code", "name", "encode", "coerce", "digest", "create", "identity", "TRANSPORT_IPFS_GATEWAY_HTTP_CODE", "CID", "identity", "options", "options", "value", "peerId", "empty", "coerce", "base", "name", "encode", "length", "i", "j", "decode", "string", "src", "_brrp__multiformats_scope_baseX", "base_x_default", "Encoder", "name", "Decoder", "or", "ComposedDecoder", "Codec", "from", "encode", "decode", "baseX", "alphabet", "base_x_default", "coerce", "string", "value", "createAlphabetIdx", "rfc4648", "base58btc", "baseX", "base58flickr", "encode_1", "encode", "MSB", "REST", "MSBALL", "INT", "decode", "read", "MSB$1", "REST$1", "N1", "N2", "N3", "N4", "N5", "N6", "N7", "N8", "N9", "length", "value", "varint", "_brrp_varint", "varint_default", "encodeTo", "varint_default", "encodingLength", "create", "code", "digest", "encodingLength", "encodeTo", "Digest", "Digest", "code", "digest", "from", "name", "code", "encode", "Hasher", "create", "digest", "sha", "name", "sha256", "from", "sha512", "create", "create", "digest", "crypto", "Boolean", "Set", "code", "base64", "base64url", "value", "base", "value", "retBuf", "retView", "log2", "concat", "_a", "value", "retView", "number", "tempBufferView", "name", "optional", "length", "Boolean", "second", "string", "Set", "base64", "rfc4648", "base64pad", "base64url", "base64urlpad", "base64", "format", "crypto", "base64", "crypto", "key", "defaultOptions", "name", "sanitize", "delay", "sha256", "base58btc", "options", "value", "name", "options", "peerId", "Envelope", "length", "message", "publicKey", "options", "a", "b", "empty", "coerce", "encode_1", "encode", "MSB", "REST", "MSBALL", "INT", "decode", "read", "MSB$1", "REST$1", "N1", "N2", "N3", "N4", "N5", "N6", "N7", "N8", "N9", "length", "value", "varint", "_brrp_varint", "varint_default", "decode", "code", "varint_default", "decode", "coerce", "code", "digest", "Digest", "Digest", "code", "digest", "PeerRecord", "AddressInfo", "_codec", "length", "value", "PeerRecord", "peerId", "decode", "empty", "equals", "coerce", "base", "name", "encode", "length", "i", "j", "decode", "string", "src", "_brrp__multiformats_scope_baseX", "base_x_default", "Encoder", "name", "Decoder", "or", "ComposedDecoder", "Codec", "from", "encode", "decode", "baseX", "alphabet", "base_x_default", "coerce", "string", "value", "createAlphabetIdx", "rfc4648", "base32", "rfc4648", "base32upper", "base32pad", "base32padupper", "base32hex", "base32hexupper", "base32hexpad", "base32hexpadupper", "base32z", "base36", "baseX", "base36upper", "base58btc", "baseX", "base58flickr", "encode_1", "encode", "MSB", "REST", "MSBALL", "INT", "decode", "read", "MSB$1", "REST$1", "N1", "N2", "N3", "N4", "N5", "N6", "N7", "N8", "N9", "length", "value", "varint", "_brrp_varint", "varint_default", "decode", "code", "varint_default", "encodeTo", "encodingLength", "create", "code", "digest", "encodingLength", "encodeTo", "Digest", "decode", "coerce", "equals", "format", "base", "version", "toStringV0", "baseCache", "base58btc", "toStringV1", "base32", "cache", "baseCache", "CID", "version", "code", "DAG_PB_CODE", "SHA_256_CODE", "digest", "create", "self", "equals", "base", "format", "value", "encodeCID", "cidSymbol", "decode", "coerce", "Digest", "length", "parseCIDtoBytes", "base58btc", "base32", "base36", "toStringV0", "cid", "toStringV1", "encodingLength", "encodeTo", "Peer", "Peer$metadataEntry", "_codec", "length", "Peer$tagsEntry", "value", "Address", "Tag", "peerId", "digest", "publicKey", "compare", "value", "peerId", "peerId", "options", "peerId", "options", "protocols", "peerRecordEnvelope", "multiaddr", "value", "publicKey", "addr", "CID", "base32", "value", "peerId", "options", "src_default", "peerId", "options", "multiaddr", "PeerRecord", "code", "value", "optional", "or", "and", "fmt", "_PEER_ID", "PEER_ID", "fmt", "_DNS4", "_DNS6", "_DNSADDR", "_DNS", "DNS4", "optional", "DNS6", "DNSADDR", "DNS", "or", "_IP4", "and", "_IP6", "_IP", "_IP_OR_DOMAIN", "IP_OR_DOMAIN", "IP4", "IP6", "IP", "_TCP", "_UDP", "TCP", "UDP", "_QUIC", "code", "QUIC_V0_OR_V1", "QUIC", "_WEB", "_WebSockets", "WebSockets", "_WebSocketsSecure", "WebSocketsSecure", "_WebRTCDirect", "WebRTCDirect", "_WebTransport", "WebTransport", "_P2P", "P2P", "_Circuit", "Circuit", "_WebRTC", "WebRTC", "_HTTP", "HTTP", "_HTTPS", "HTTPS", "_Memory", "Memory", "_Unix", "Unix", "tuple", "code", "value", "code", "value", "defaultValues", "code", "defaultValues", "multiaddr", "options", "defaultValues", "peerId", "options", "multiaddr", "ma", "WebSockets", "WebSocketsSecure", "TCP", "messages", "message", "value", "serviceCapabilities", "CODEC_IP4", "CODEC_IP6", "multiaddr", "WebSockets", "value", "options", "value", "peerId", "PEER_ID", "options", "isIPv6", "TCP", "WebSocketsSecure", "WebSockets", "WebRTC", "WebRTCDirect", "WebTransport", "Circuit", "options", "address", "defaultOptions", "options", "peerId", "multiaddr", "err", "Circuit", "value", "AbortError", "message", "options", "retry", "peerId", "options", "defaultOptions", "peerId", "options", "multiaddr", "timeSpan", "value", "options", "UnexpectedEOFError", "write", "source", "options", "value", "UnexpectedEOFError", "start", "value", "options", "self", "src_default", "value", "options", "self", "src_default", "peer", "options", "start", "DEFAULT_MAX_INBOUND_STREAMS", "DEFAULT_MAX_OUTBOUND_STREAMS", "value", "options", "protocols", "peerId", "options", "IP4", "IP6", "InvalidMessageLengthError", "InvalidDataLengthError", "InvalidDataLengthLengthError", "options", "InvalidMessageLengthError", "InvalidDataLengthLengthError", "InvalidDataLengthError", "options", "read", "protocols", "options", "protocol", "response", "protocols", "options", "encode", "protocols", "options", "options", "DEFAULT_MAX_INBOUND_STREAMS", "DEFAULT_MAX_OUTBOUND_STREAMS", "maConn", "protocols", "err", "name", "name", "version", "name", "peerId", "peerSet", "options", "protocols", "publicKey", "multiaddr", "options", "anumber", "instance", "clean", "toBytes", "defaults", "value", "isLE", "isAligned32", "anumber", "clean", "toBytes", "clean", "clean", "EMPTY_BUFFER", "length", "publicKey", "crypto", "publicKey", "value", "InvalidCryptoExchangeError", "message", "crypto", "message", "InvalidCryptoExchangeError", "NoiseExtensions", "value", "length", "NoiseHandshakePayload", "publicKey", "options", "log", "crypto", "plaintext", "crypto", "options", "publicKey", "protocols", "decode", "message", "FrameType", "Flag", "GoAwayCode", "Decoder", "length", "isPromise", "log", "isPromise", "isPromise", "options", "err", "StreamState", "src_default", "options", "CLOSE_TIMEOUT", "isPromise", "Decoder", "name", "start", "options", "length", "code", "value", "options", "options", "value", "message", "messages", "empty", "coerce", "encode_1", "encode", "MSB", "REST", "MSBALL", "INT", "decode", "read", "MSB$1", "REST$1", "N1", "N2", "N3", "N4", "N5", "N6", "N7", "N8", "N9", "length", "value", "varint", "_brrp_varint", "varint_default", "decode", "code", "varint_default", "decode", "coerce", "code", "digest", "Digest", "Digest", "code", "digest", "PROTOCOL_PREFIX", "PROTOCOL_NAME", "PROTOCOL_VERSION", "Message", "MessageType", "__MessageTypeValues", "ResponseStatus", "__ResponseStatusValues", "PeerInfo", "_codec", "value", "length", "Dial", "DialResponse", "PROTOCOL_PREFIX", "PROTOCOL_NAME", "PROTOCOL_VERSION", "peerId", "options", "messages", "message", "digest", "decode", "multiaddr", "connection", "octets", "options", "empty", "equals", "coerce", "encode_1", "encode", "MSB", "REST", "MSBALL", "INT", "decode", "read", "MSB$1", "REST$1", "N1", "N2", "N3", "N4", "N5", "N6", "N7", "N8", "N9", "length", "value", "varint", "_brrp_varint", "varint_default", "decode", "code", "varint_default", "encodeTo", "encodingLength", "create", "code", "digest", "encodingLength", "encodeTo", "Digest", "decode", "coerce", "equals", "MAX_CONNECTIONS", "HopMessage", "Type", "__TypeValues", "Peer", "length", "StopMessage", "value", "Reservation", "Envelope", "Limit", "Status", "__StatusValues", "ReservationVoucher", "code", "value", "optional", "or", "and", "fmt", "_PEER_ID", "value", "PEER_ID", "fmt", "_DNS4", "_DNS6", "_DNSADDR", "_DNS", "DNS4", "optional", "DNS6", "DNSADDR", "DNS", "or", "_IP4", "and", "_IP6", "_IP", "_IP_OR_DOMAIN", "IP_OR_DOMAIN", "IP4", "IP6", "IP", "_TCP", "_UDP", "TCP", "UDP", "_QUIC", "code", "_QUIC_V1", "QUIC_V0_OR_V1", "QUIC", "QUIC_V1", "_WEB", "_WebSockets", "WebSockets", "_WebSocketsSecure", "WebSocketsSecure", "_WebRTCDirect", "WebRTCDirect", "_WebTransport", "WebTransport", "_P2P", "P2P", "_Circuit", "Circuit", "_WebRTC", "WebRTC", "_HTTP", "HTTP", "_HTTPS", "HTTPS", "_Memory", "Memory", "_Unix", "Unix", "base", "name", "encode", "length", "i", "j", "decode", "string", "src", "_brrp__multiformats_scope_baseX", "base_x_default", "Encoder", "name", "Decoder", "or", "ComposedDecoder", "Codec", "from", "encode", "decode", "baseX", "alphabet", "base_x_default", "coerce", "string", "value", "createAlphabetIdx", "rfc4648", "base32", "rfc4648", "base32upper", "base32pad", "base32padupper", "base32hex", "base32hexupper", "base32hexpad", "base32hexpadupper", "base32z", "base36", "baseX", "base36upper", "base58btc", "baseX", "base58flickr", "format", "base", "version", "toStringV0", "baseCache", "base58btc", "toStringV1", "base32", "cache", "baseCache", "CID", "version", "code", "DAG_PB_CODE", "SHA_256_CODE", "digest", "create", "self", "equals", "base", "format", "value", "encodeCID", "cidSymbol", "decode", "coerce", "Digest", "length", "parseCIDtoBytes", "base58btc", "base32", "base36", "toStringV0", "cid", "toStringV1", "encodingLength", "encodeTo", "from", "name", "code", "encode", "Hasher", "create", "digest", "sha", "name", "sha256", "from", "sha512", "self", "fmt", "and", "P2P", "code", "logger", "log", "options", "source", "src_default", "peerId", "options", "nanoid", "ReservationStore", "reservation", "nanoid", "peerId", "start", "Circuit", "err", "options", "MAX_CONNECTIONS", "ReservationStore", "options", "code", "Circuit", "decode", "code", "value", "optional", "or", "and", "fmt", "_PEER_ID", "value", "PEER_ID", "fmt", "_DNS4", "_DNS6", "_DNSADDR", "_DNS", "DNS4", "optional", "DNS6", "DNSADDR", "DNS", "or", "_IP4", "and", "_IP6", "_IP", "_IP_OR_DOMAIN", "IP_OR_DOMAIN", "IP4", "IP6", "IP", "_TCP", "_UDP", "TCP", "UDP", "_QUIC", "code", "_QUIC_V1", "QUIC_V0_OR_V1", "QUIC", "QUIC_V1", "_WEB", "_WebSockets", "WebSockets", "_WebSocketsSecure", "WebSocketsSecure", "_WebRTCDirect", "WebRTCDirect", "_WebTransport", "WebTransport", "_P2P", "P2P", "_Circuit", "Circuit", "_WebRTC", "WebRTC", "_HTTP", "HTTP", "_HTTPS", "HTTPS", "_Memory", "Memory", "_Unix", "Unix", "HolePunch", "Type", "__TypeValues", "value", "length", "Circuit", "DNS", "IP", "defaultValues", "peerId", "Circuit", "options", "connect", "Identify", "value", "length", "defaultValues", "log", "message", "publicKey", "peerId", "peerRecordEnvelope", "PeerRecord", "multiaddr", "defaultValues", "PeerRecord", "self", "peer", "options", "message", "code", "value", "optional", "or", "and", "fmt", "_PEER_ID", "value", "PEER_ID", "fmt", "_DNS4", "_DNS6", "_DNSADDR", "_DNS", "DNS4", "optional", "DNS6", "DNSADDR", "DNS", "or", "_IP4", "and", "_IP6", "_IP", "_IP_OR_DOMAIN", "IP_OR_DOMAIN", "IP4", "IP6", "IP", "_TCP", "_UDP", "TCP", "UDP", "_QUIC", "code", "_QUIC_V1", "QUIC_V0_OR_V1", "QUIC", "QUIC_V1", "_WEB", "_WebSockets", "WebSockets", "_WebSocketsSecure", "WebSocketsSecure", "_WebRTCDirect", "WebRTCDirect", "_WebTransport", "WebTransport", "_P2P", "P2P", "_Circuit", "Circuit", "_WebRTC", "WebRTC", "_HTTP", "HTTP", "_HTTPS", "HTTPS", "_Memory", "Memory", "_Unix", "Unix", "Identify", "defaultValues", "options", "message", "publicKey", "protocols", "TCP", "PeerRecord", "IP_OR_DOMAIN", "Identify", "second", "minute", "second", "minute", "second", "KEEP_ALIVE_TAG", "Record", "length", "hour", "minute", "second", "value", "message", "Record", "length", "MessageType", "__MessageTypeValues", "ConnectionType", "__ConnectionTypeValues", "PeerInfo", "value", "Message", "options", "options", "selectors", "validators", "options", "publicKey", "empty", "equals", "coerce", "base", "name", "encode", "length", "i", "j", "decode", "string", "src", "_brrp__multiformats_scope_baseX", "base_x_default", "Encoder", "name", "Decoder", "or", "ComposedDecoder", "Codec", "from", "encode", "decode", "baseX", "alphabet", "base_x_default", "coerce", "string", "value", "createAlphabetIdx", "rfc4648", "base32", "rfc4648", "base32upper", "base32pad", "base32padupper", "base32hex", "base32hexupper", "base32hexpad", "base32hexpadupper", "base32z", "base36", "baseX", "base36upper", "base58btc", "baseX", "base58flickr", "encode_1", "encode", "MSB", "REST", "MSBALL", "INT", "decode", "read", "MSB$1", "REST$1", "N1", "N2", "N3", "N4", "N5", "N6", "N7", "N8", "N9", "length", "value", "varint", "_brrp_varint", "varint_default", "decode", "code", "varint_default", "encodeTo", "encodingLength", "create", "code", "digest", "encodingLength", "encodeTo", "Digest", "decode", "coerce", "equals", "format", "base", "version", "toStringV0", "baseCache", "base58btc", "toStringV1", "base32", "cache", "baseCache", "CID", "version", "code", "DAG_PB_CODE", "SHA_256_CODE", "digest", "create", "self", "equals", "base", "format", "value", "encodeCID", "cidSymbol", "decode", "coerce", "Digest", "length", "parseCIDtoBytes", "base58btc", "base32", "base36", "toStringV0", "cid", "toStringV1", "encodingLength", "encodeTo", "code", "from", "name", "code", "encode", "Hasher", "create", "digest", "sha", "name", "sha256", "from", "sha512", "multiaddr", "isPrivate", "options", "sha256", "peerId", "peerId", "decode", "value", "multiaddr", "CID", "code", "decode", "peerId", "validators", "selectors", "options", "value", "from", "src_default", "self", "decode", "options", "self", "providers", "peerId", "multiaddr", "Network", "message", "value", "options", "Message", "options", "peerId", "options", "publicKey", "self", "decode", "multiaddr", "peerId", "options", "peerId", "options", "value", "event", "options", "log", "options", "signal", "log", "peers", "src_default", "isAsyncIterable", "length", "src_default", "start", "src_default", "options", "peerId", "peerId", "KEEP_ALIVE_TAG", "options", "peerId", "peer", "src_default", "peer", "options", "result", "peerId", "options", "peerId", "src_default", "decode", "keyPrefix", "sha256", "length", "peerId", "CID", "digest", "decode", "peerId", "peerId", "CID", "src_default", "multiaddr", "peerId", "peerId", "validators", "peerId", "peerId", "message", "messages", "Message", "peerId", "options", "value", "peerId", "DEFAULT_MAX_INBOUND_STREAMS", "DEFAULT_MAX_OUTBOUND_STREAMS", "Network", "multiaddr", "EventTypes", "MessageTypes", "Decoder", "length", "MSB", "REST", "Encoder", "encode", "message", "message", "options", "name", "CLOSE_TIMEOUT", "encode", "name", "options", "Decoder", "message", "stream", "PING_LENGTH", "PROTOCOL_VERSION", "PROTOCOL_NAME", "PROTOCOL_PREFIX", "TIMEOUT", "MAX_INBOUND_STREAMS", "MAX_OUTBOUND_STREAMS", "PROTOCOL_PREFIX", "PROTOCOL_NAME", "PROTOCOL_VERSION", "TIMEOUT", "MAX_INBOUND_STREAMS", "MAX_OUTBOUND_STREAMS", "start", "PING_LENGTH", "options", "code", "value", "optional", "or", "and", "fmt", "_PEER_ID", "value", "PEER_ID", "fmt", "_DNS4", "_DNS6", "_DNSADDR", "_DNS", "DNS4", "optional", "DNS6", "DNSADDR", "DNS", "or", "_IP4", "and", "_IP6", "_IP", "_IP_OR_DOMAIN", "IP_OR_DOMAIN", "IP4", "IP6", "IP", "_TCP", "_UDP", "TCP", "UDP", "_QUIC", "code", "_QUIC_V1", "QUIC_V0_OR_V1", "QUIC", "QUIC_V1", "_WEB", "_WebSockets", "WebSockets", "_WebSocketsSecure", "WebSocketsSecure", "_WebRTCDirect", "WebRTCDirect", "_WebTransport", "WebTransport", "_P2P", "P2P", "_Circuit", "Circuit", "_WebRTC", "WebRTC", "_HTTP", "HTTP", "_HTTPS", "HTTPS", "_Memory", "Memory", "_Unix", "Unix", "Message", "Flag", "__FlagValues", "length", "MAX_MESSAGE_SIZE", "Message", "options", "options", "err", "MAX_MESSAGE_SIZE", "self", "decode", "message", "Message", "encode", "options", "createStream", "createStream", "options", "RTCPeerConnection", "message", "Message", "Type", "__TypeValues", "length", "options", "message", "Message", "log", "logger", "Message", "RTCPeerConnection", "Circuit", "fmt", "P2P", "code", "log", "Message", "options", "WebRTC", "RTCPeerConnection", "name", "value", "Reflect", "exporter", "value", "map", "hasOwn", "_a", "func", "second", "metadataRegistry", "metadata", "OrdinaryDefineOwnMetadata", "OrdinaryHasOwnMetadata", "OrdinaryGetOwnMetadata", "OrdinaryOwnMetadataKeys", "defineMetadata", "hasOwnMetadata", "getOwnMetadata", "getOwnMetadataKeys", "deleteMetadata", "MapIterator", "Map", "Set", "WeakMap", "create", "AsnTypeTypes", "AsnPropTypes", "BitString", "name", "value", "OctetString", "name", "value", "value", "Boolean", "OctetString", "_a", "name", "instance", "optional", "Set", "value", "options", "options", "defaultConverter", "_a", "value", "Set", "value", "Set", "value", "DirectoryString", "AttributeValue", "RelativeDistinguishedName", "RDNSequence", "Name", "value", "GeneralName", "AuthorityInfoAccessSyntax", "OctetString", "GeneralNames", "CertificateIssuer", "DisplayText", "Qualifier", "CertificatePolicies", "CRLNumber", "value", "BaseCRLNumber", "ReasonFlags", "BitString", "DistributionPointName", "CRLDistributionPoints", "FreshestCRL", "CRLReasons", "CRLReason", "ExtendedKeyUsage", "InhibitAnyPolicy", "value", "InvalidityDate", "value", "IssueAlternativeName", "KeyUsageFlags", "BitString", "GeneralSubtrees", "PolicyMappings", "SubjectAlternativeName", "SubjectDirectoryAttributes", "EntrustInfoFlags", "BitString", "SubjectInfoAccessSyntax", "Time", "OctetString", "Extensions", "Version", "__decorate", "__decorate", "SignerIdentifier", "__decorate", "CMSVersion", "DigestAlgorithmIdentifier", "__decorate", "SignatureAlgorithmIdentifier", "__decorate", "KeyEncryptionAlgorithmIdentifier", "__decorate", "ContentEncryptionAlgorithmIdentifier", "__decorate", "MessageAuthenticationCodeAlgorithm", "__decorate", "KeyDerivationAlgorithmIdentifier", "__decorate", "Attribute", "__decorate", "OctetString", "__decorate", "Attribute", "SignerInfos", "SigningTime", "__decorate", "CounterSignature", "__decorate", "__decorate", "__decorate", "AttrSpec", "__decorate", "__decorate", "__decorate", "DigestedObjectType", "__decorate", "__decorate", "AttCertIssuer", "__decorate", "__decorate", "__decorate", "AttCertVersion", "__decorate", "__decorate", "ClassListFlags", "BitString", "__decorate", "__decorate", "__decorate", "OctetString", "__decorate", "Target", "Targets", "__decorate", "ProxyInfo", "__decorate", "__decorate", "__decorate", "OctetString", "__decorate", "CertificateChoices", "CertificateSet", "__decorate", "__decorate", "EncapsulatedContent", "__decorate", "OctetString", "__decorate", "EncryptedContent", "__decorate", "OctetString", "__decorate", "__decorate", "__decorate", "KeyAgreeRecipientIdentifier", "OctetString", "__decorate", "RecipientEncryptedKeys", "__decorate", "OriginatorIdentifierOrKey", "__decorate", "OctetString", "RecipientIdentifier", "__decorate", "OctetString", "__decorate", "OctetString", "__decorate", "OctetString", "__decorate", "__decorate", "RecipientInfo", "RecipientInfos", "__decorate", "__decorate", "RevocationInfoChoice", "RevocationInfoChoices", "__decorate", "__decorate", "UnprotectedAttributes", "__decorate", "Attribute", "__decorate", "DigestAlgorithmIdentifiers", "__decorate", "__decorate", "create", "__decorate", "FieldID", "__decorate", "OctetString", "Curve", "__decorate", "ECPVer", "SpecifiedECDomain", "__decorate", "ECParameters", "__decorate", "OctetString", "__decorate", "__decorate", "__decorate", "create", "sha256", "sha512", "__decorate", "__decorate", "OctetString", "__decorate", "__decorate", "OtherPrimeInfos", "__decorate", "__decorate", "__decorate", "Lifecycle", "d", "b", "value", "DelayedConstructor", "value", "name", "RegistryBase", "value", "Registry", "ResolutionContext", "_a", "value", "PreResolutionInterceptors", "PostResolutionInterceptors", "Interceptors", "InternalDependencyContainer", "options", "from", "instance", "_a", "options", "__decorate", "__decorate", "__decorate", "PKCS12AttrSet", "AuthenticatedSafe", "__decorate", "__decorate", "__decorate", "__decorate", "OctetString", "__decorate", "Version", "OctetString", "Attributes", "__decorate", "Version", "__decorate", "KeyBag", "__decorate", "PKCS8ShroudedKeyBag", "__decorate", "__decorate", "OctetString", "__decorate", "__decorate", "__decorate", "SafeContents", "id_certTypes", "PKCS9String", "__decorate", "Pkcs7PDU", "__decorate", "UserPKCS12", "__decorate", "EncryptedPrivateKeyInfo", "__decorate", "EmailAddress", "value", "__decorate", "UnstructuredName", "__decorate", "UnstructuredAddress", "__decorate", "DateOfBirth", "value", "__decorate", "PlaceOfBirth", "__decorate", "Gender", "value", "__decorate", "CountryOfCitizenship", "value", "__decorate", "CountryOfResidence", "__decorate", "Pseudonym", "__decorate", "ContentType", "value", "__decorate", "SigningTime", "__decorate", "SequenceNumber", "value", "__decorate", "CounterSignature", "__decorate", "ChallengePassword", "__decorate", "ExtensionRequest", "__decorate", "ExtendedCertificateAttributes", "__decorate", "Attribute", "FriendlyName", "value", "__decorate", "SMIMECapability", "__decorate", "SMIMECapabilities", "__decorate", "__decorate", "Attributes_1", "Attributes", "__decorate", "Attributes", "__decorate", "__decorate", "EcAlgorithm", "__decorate", "NAME", "name", "value", "obj", "format", "Extension", "OctetString", "_a", "crypto", "names", "escape", "Name", "code", "DNS", "IP", "URL", "GeneralName", "GeneralNames", "base64", "ExtendedKeyUsage", "KeyUsageFlags", "publicKey", "Attribute", "RsaAlgorithm", "ShaAlgorithm", "EdAlgorithm", "Name", "crypto", "publicKey", "crypto", "_a", "name", "Name", "X509CrlReason", "base64", "base64pad", "base64url", "base64urlpad", "empty", "equals", "coerce", "fromString", "toString", "base", "name", "encode", "length", "i", "j", "decode", "string", "src", "_brrp__multiformats_scope_baseX", "base_x_default", "Encoder", "name", "Decoder", "or", "ComposedDecoder", "Codec", "from", "encode", "decode", "baseX", "alphabet", "base_x_default", "coerce", "string", "value", "createAlphabetIdx", "rfc4648", "base64", "rfc4648", "base64pad", "base64url", "base64urlpad", "sha256", "sha512", "digest_exports", "Digest", "create", "decode", "equals", "encode_1", "encode", "MSB", "REST", "MSBALL", "INT", "decode", "read", "MSB$1", "REST$1", "N1", "N2", "N3", "N4", "N5", "N6", "N7", "N8", "N9", "length", "value", "varint", "_brrp_varint", "varint_default", "decode", "code", "varint_default", "encodeTo", "encodingLength", "create", "code", "digest", "encodingLength", "encodeTo", "Digest", "decode", "coerce", "equals", "from", "name", "code", "encode", "Hasher", "create", "digest", "sha", "name", "sha256", "from", "sha512", "base10", "base10", "baseX", "rfc4648", "base2", "base2", "rfc4648", "encode", "decode", "from", "base32", "base32hex", "base32hexpad", "base32hexpadupper", "base32hexupper", "base32pad", "base32padupper", "base32upper", "base32z", "base32", "rfc4648", "base32upper", "base32pad", "base32padupper", "base32hex", "base32hexupper", "base32hexpad", "base32hexpadupper", "base32z", "base36", "base36upper", "base36", "baseX", "base36upper", "base58btc", "base58flickr", "base58btc", "baseX", "base58flickr", "base8", "base8", "rfc4648", "identity", "identity", "from", "toString", "fromString", "textEncoder", "textDecoder", "identity_exports", "identity", "code", "name", "encode", "coerce", "digest", "create", "identity", "format", "base", "version", "toStringV0", "baseCache", "base58btc", "toStringV1", "base32", "cache", "baseCache", "CID", "version", "code", "DAG_PB_CODE", "SHA_256_CODE", "digest", "create", "self", "equals", "base", "format", "value", "encodeCID", "cidSymbol", "decode", "coerce", "Digest", "length", "parseCIDtoBytes", "base58btc", "base32", "base36", "toStringV0", "cid", "toStringV1", "encodingLength", "encodeTo", "identity_exports", "certhash", "digest_exports", "certhash", "digest", "create", "sha256", "base64url", "code", "MAX_MESSAGE_SIZE", "create", "sha256", "certhash", "options", "createStream", "options", "WebRTCDirect", "certhash", "keychain", "cert", "base64url", "sha256", "options", "messages", "stop", "options", "connect", "code", "value", "optional", "or", "and", "fmt", "_PEER_ID", "value", "PEER_ID", "fmt", "_DNS4", "_DNS6", "_DNSADDR", "_DNS", "DNS4", "optional", "DNS6", "DNSADDR", "DNS", "or", "_IP4", "and", "_IP6", "_IP", "_IP_OR_DOMAIN", "IP_OR_DOMAIN", "IP4", "IP6", "IP", "_TCP", "_UDP", "TCP", "UDP", "_QUIC", "code", "_QUIC_V1", "QUIC_V0_OR_V1", "QUIC", "QUIC_V1", "_WEB", "_WebSockets", "WebSockets", "_WebSocketsSecure", "WebSocketsSecure", "_WebRTCDirect", "WebRTCDirect", "_WebTransport", "WebTransport", "_P2P", "P2P", "_Circuit", "Circuit", "_WebRTC", "WebRTC", "_HTTP", "HTTP", "_HTTPS", "HTTPS", "_Memory", "Memory", "_Unix", "Unix", "WebSocketsSecure", "WebSockets", "createListener", "CLOSE_TIMEOUT", "options", "log", "start", "CLOSE_TIMEOUT", "WebSockets", "options", "connect", "err", "createListener", "import_timestamp_nano", "NanoDate", "version", "name", "options", "name", "version", "createLibp2p", "options", "defaults", "createLibp2p", "options"]
}
